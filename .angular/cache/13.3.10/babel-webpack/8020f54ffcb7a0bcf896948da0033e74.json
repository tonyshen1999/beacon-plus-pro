{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/**\r\n * DevExtreme (esm/core/events_strategy.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport Callbacks from \"./utils/callbacks\";\nimport { each } from \"./utils/iterator\";\nimport { isFunction, isPlainObject } from \"./utils/type\";\nexport var EventsStrategy = /*#__PURE__*/function () {\n  function EventsStrategy(owner) {\n    _classCallCheck(this, EventsStrategy);\n\n    var options = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n    this._events = {};\n    this._owner = owner;\n    this._options = options;\n  }\n\n  _createClass(EventsStrategy, [{\n    key: \"hasEvent\",\n    value: function hasEvent(eventName) {\n      var callbacks = this._events[eventName];\n      return callbacks ? callbacks.has() : false;\n    }\n  }, {\n    key: \"fireEvent\",\n    value: function fireEvent(eventName, eventArgs) {\n      var callbacks = this._events[eventName];\n\n      if (callbacks) {\n        callbacks.fireWith(this._owner, eventArgs);\n      }\n\n      return this._owner;\n    }\n  }, {\n    key: \"on\",\n    value: function on(eventName, eventHandler) {\n      var _this = this;\n\n      if (isPlainObject(eventName)) {\n        each(eventName, function (e, h) {\n          _this.on(e, h);\n        });\n      } else {\n        var callbacks = this._events[eventName];\n\n        if (!callbacks) {\n          callbacks = Callbacks({\n            syncStrategy: this._options.syncStrategy\n          });\n          this._events[eventName] = callbacks;\n        }\n\n        var addFn = callbacks.originalAdd || callbacks.add;\n        addFn.call(callbacks, eventHandler);\n      }\n    }\n  }, {\n    key: \"off\",\n    value: function off(eventName, eventHandler) {\n      var callbacks = this._events[eventName];\n\n      if (callbacks) {\n        if (isFunction(eventHandler)) {\n          callbacks.remove(eventHandler);\n        } else {\n          callbacks.empty();\n        }\n      }\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      each(this._events, function (eventName, event) {\n        event.empty();\n      });\n    }\n  }], [{\n    key: \"create\",\n    value: function create(owner, strategy) {\n      if (strategy) {\n        return isFunction(strategy) ? strategy(owner) : strategy;\n      } else {\n        return new EventsStrategy(owner);\n      }\n    }\n  }]);\n\n  return EventsStrategy;\n}();","map":null,"metadata":{},"sourceType":"module"}