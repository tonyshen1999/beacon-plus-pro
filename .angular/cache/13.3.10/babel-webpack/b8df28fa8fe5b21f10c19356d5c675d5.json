{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/ui/speed_dial_action/speed_dial_main_item.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getHeight } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport config from \"../../core/config\";\nimport { extend } from \"../../core/utils/extend\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport errors from \"../widget/ui.errors\";\nimport swatchContainer from \"../widget/swatch_container\";\nimport SpeedDialItem from \"./speed_dial_item\";\nimport { isMaterial } from \"../themes\";\nvar getSwatchContainer = swatchContainer.getSwatchContainer;\nvar FAB_MAIN_CLASS = \"dx-fa-button-main\";\nvar FAB_MAIN_CLASS_WITH_LABEL = \"dx-fa-button-with-label\";\nvar FAB_CLOSE_ICON_CLASS = \"dx-fa-button-icon-close\";\nvar INVISIBLE_STATE_CLASS = \"dx-state-invisible\";\nvar speedDialMainItem = null;\n\nvar modifyActionOptions = function modifyActionOptions(action) {\n  var _action$option = action.option(),\n      icon = _action$option.icon,\n      onClick = _action$option.onClick,\n      label = _action$option.label,\n      visible = _action$option.visible,\n      index = _action$option.index,\n      onContentReady = _action$option.onContentReady,\n      activeStateEnabled = _action$option.activeStateEnabled,\n      hoverStateEnabled = _action$option.hoverStateEnabled,\n      animation = _action$option.animation,\n      id = _action$option.id,\n      actions = _action$option.actions,\n      actionComponent = _action$option.actionComponent,\n      actionVisible = _action$option.actionVisible,\n      zIndex = _action$option.zIndex,\n      position = _action$option.position,\n      hint = _action$option.hint,\n      parentPosition = _action$option.parentPosition,\n      direction = _action$option.direction;\n\n  return extend({}, {\n    icon: icon,\n    onClick: onClick,\n    label: label,\n    visible: visible,\n    index: index,\n    onContentReady: onContentReady,\n    activeStateEnabled: activeStateEnabled,\n    hoverStateEnabled: hoverStateEnabled,\n    animation: animation,\n    id: id,\n    actions: actions,\n    actionComponent: actionComponent,\n    actionVisible: actionVisible,\n    zIndex: zIndex,\n    position: position,\n    hint: hint,\n    parentPosition: parentPosition,\n    direction: direction\n  }, {\n    onInitialized: null,\n    onDisposing: null\n  });\n};\n\nvar SpeedDialMainItem = /*#__PURE__*/function (_SpeedDialItem) {\n  _inherits(SpeedDialMainItem, _SpeedDialItem);\n\n  var _super = _createSuper(SpeedDialMainItem);\n\n  function SpeedDialMainItem() {\n    _classCallCheck(this, SpeedDialMainItem);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SpeedDialMainItem, [{\n    key: \"_getDefaultOptions\",\n    value: function _getDefaultOptions() {\n      return extend(_get(_getPrototypeOf(SpeedDialMainItem.prototype), \"_getDefaultOptions\", this).call(this), extend({\n        icon: \"add\",\n        closeIcon: \"close\",\n        position: {\n          at: \"right bottom\",\n          my: \"right bottom\",\n          offset: {\n            x: -16,\n            y: -16\n          }\n        },\n        maxSpeedDialActionCount: 5,\n        hint: \"\",\n        label: \"\",\n        direction: \"auto\",\n        actions: [],\n        activeStateEnabled: true,\n        hoverStateEnabled: true,\n        indent: 55,\n        childIndent: 40,\n        childOffset: 9,\n        callOverlayRenderShading: true,\n        closeOnOutsideClick: true\n      }, config().floatingActionButtonConfig, {\n        shading: false\n      }));\n    }\n  }, {\n    key: \"_defaultOptionsRules\",\n    value: function _defaultOptionsRules() {\n      return _get(_getPrototypeOf(SpeedDialMainItem.prototype), \"_defaultOptionsRules\", this).call(this).concat([{\n        device: function device() {\n          return isMaterial();\n        },\n        options: {\n          indent: 72,\n          childIndent: 56,\n          childOffset: 8\n        }\n      }]);\n    }\n  }, {\n    key: \"_render\",\n    value: function _render() {\n      this.$element().addClass(FAB_MAIN_CLASS);\n\n      _get(_getPrototypeOf(SpeedDialMainItem.prototype), \"_render\", this).call(this);\n\n      this._moveToContainer();\n\n      this._renderCloseIcon();\n\n      this._renderClick();\n    }\n  }, {\n    key: \"_renderLabel\",\n    value: function _renderLabel() {\n      _get(_getPrototypeOf(SpeedDialMainItem.prototype), \"_renderLabel\", this).call(this);\n\n      this.$element().toggleClass(FAB_MAIN_CLASS_WITH_LABEL, !!this._$label);\n    }\n  }, {\n    key: \"_renderCloseIcon\",\n    value: function _renderCloseIcon() {\n      this._$closeIcon = this._renderButtonIcon(this._$closeIcon, this._options.silent(\"closeIcon\"), FAB_CLOSE_ICON_CLASS);\n\n      this._$closeIcon.addClass(INVISIBLE_STATE_CLASS);\n    }\n  }, {\n    key: \"_renderClick\",\n    value: function _renderClick() {\n      this._clickAction = 1 === this._getVisibleActions().length ? this._getActionComponent()._createActionByOption(\"onClick\") : this._createAction(this._clickHandler.bind(this));\n\n      this._setClickAction();\n    }\n  }, {\n    key: \"_getVisibleActions\",\n    value: function _getVisibleActions(actions) {\n      var currentActions = actions || this.option(\"actions\");\n      return currentActions.filter(function (action) {\n        return action.option(\"visible\");\n      });\n    }\n  }, {\n    key: \"_getCurrentOptions\",\n    value: function _getCurrentOptions(actions) {\n      var visibleActions = speedDialMainItem._getVisibleActions(actions);\n\n      var defaultOptions = this._getDefaultOptions();\n\n      delete defaultOptions.elementAttr;\n      return 1 === visibleActions.length ? extend(modifyActionOptions(visibleActions[0]), {\n        position: this._getPosition()\n      }) : extend(defaultOptions, {\n        visible: 0 !== visibleActions.length\n      });\n    }\n  }, {\n    key: \"_clickHandler\",\n    value: function _clickHandler() {\n      var actions = this._actionItems.filter(function (action) {\n        return action.option(\"actionVisible\");\n      }).sort(function (action, nextAction) {\n        return action.option(\"index\") - nextAction.option(\"index\");\n      });\n\n      if (1 === actions.length) {\n        return;\n      }\n\n      var lastActionIndex = actions.length - 1;\n\n      for (var i = 0; i < actions.length; i++) {\n        actions[i].option(\"animation\", this._getActionAnimation(actions[i], i, lastActionIndex));\n        actions[i].option(\"position\", this._getActionPosition(actions, i));\n\n        actions[i]._$wrapper.css(\"position\", this._$wrapper.css(\"position\"));\n\n        actions[i].toggle();\n      }\n\n      if (config().floatingActionButtonConfig.shading) {\n        this._isShadingShown = !this.option(\"shading\");\n        this.option(\"shading\", this._isShadingShown);\n      }\n\n      this._$icon.toggleClass(INVISIBLE_STATE_CLASS);\n\n      this._$closeIcon.toggleClass(INVISIBLE_STATE_CLASS);\n    }\n  }, {\n    key: \"_updateZIndexStackPosition\",\n    value: function _updateZIndexStackPosition() {\n      _get(_getPrototypeOf(SpeedDialMainItem.prototype), \"_updateZIndexStackPosition\", this).call(this);\n\n      var overlayStack = this._overlayStack();\n\n      overlayStack.push(this);\n    }\n  }, {\n    key: \"_renderActions\",\n    value: function _renderActions() {\n      var _this = this;\n\n      var actions = this.option(\"actions\");\n\n      if (this._actionItems && this._actionItems.length) {\n        this._actionItems.forEach(function (actionItem) {\n          actionItem.dispose();\n          actionItem.$element().remove();\n        });\n\n        this._actionItems = [];\n      }\n\n      this._actionItems = [];\n\n      if (1 === actions.length) {\n        return;\n      }\n\n      for (var i = 0; i < actions.length; i++) {\n        var action = actions[i];\n        var $actionElement = $(\"<div>\").appendTo(getSwatchContainer(action.$element()));\n        eventsEngine.off($actionElement, \"click\");\n        eventsEngine.on($actionElement, \"click\", function () {\n          _this._clickHandler();\n        });\n\n        action._options.silent(\"actionComponent\", action);\n\n        action._options.silent(\"parentPosition\", this._getPosition());\n\n        action._options.silent(\"actionVisible\", action._options.silent(\"visible\"));\n\n        this._actionItems.push(this._createComponent($actionElement, SpeedDialItem, extend({}, modifyActionOptions(action), {\n          visible: false\n        })));\n      }\n    }\n  }, {\n    key: \"_getActionAnimation\",\n    value: function _getActionAnimation(action, index, lastActionIndex) {\n      action._options.silent(\"animation.show.delay\", 30 * index);\n\n      action._options.silent(\"animation.hide.delay\", 30 * (lastActionIndex - index));\n\n      return action._options.silent(\"animation\");\n    }\n  }, {\n    key: \"_getDirectionIndex\",\n    value: function _getDirectionIndex(actions, direction) {\n      if (\"auto\" === direction) {\n        var contentHeight = getHeight(this.$content());\n        var actionsHeight = this.initialOption(\"indent\") + this.initialOption(\"childIndent\") * actions.length - contentHeight;\n        var offsetTop = this.$content().offset().top;\n\n        if (actionsHeight < offsetTop) {\n          return -1;\n        } else {\n          var offsetBottom = getHeight(this._positionController._$wrapperCoveredElement) - contentHeight - offsetTop;\n          return offsetTop >= offsetBottom ? -1 : 1;\n        }\n      }\n\n      return \"down\" !== direction ? -1 : 1;\n    }\n  }, {\n    key: \"_getActionPosition\",\n    value: function _getActionPosition(actions, index) {\n      var action = actions[index];\n      var actionOffsetXValue = this.initialOption(\"childOffset\");\n      var actionOffsetX = action._options.silent(\"label\") && !this._$label ? this._isPositionLeft(this._getPosition()) ? actionOffsetXValue : -actionOffsetXValue : 0;\n      var actionOffsetYValue = this.initialOption(\"indent\") + this.initialOption(\"childIndent\") * index;\n      var actionOffsetY = this._getDirectionIndex(actions, this.option(\"direction\")) * actionOffsetYValue;\n      var actionPositionAtMy = action._options.silent(\"label\") ? this._isPositionLeft(this._getPosition()) ? \"left\" : \"right\" : \"center\";\n      return {\n        of: this.$content(),\n        at: actionPositionAtMy,\n        my: actionPositionAtMy,\n        offset: {\n          x: actionOffsetX,\n          y: actionOffsetY\n        }\n      };\n    }\n  }, {\n    key: \"_outsideClickHandler\",\n    value: function _outsideClickHandler(e) {\n      if (this._isShadingShown) {\n        var isShadingClick = $(e.target)[0] === this._$wrapper[0];\n\n        if (isShadingClick) {\n          e.preventDefault();\n\n          this._clickHandler();\n        }\n      }\n    }\n  }, {\n    key: \"_setPosition\",\n    value: function _setPosition() {\n      if (this.option(\"visible\")) {\n        this._hide();\n\n        this._show();\n      }\n    }\n  }, {\n    key: \"_getPosition\",\n    value: function _getPosition() {\n      return this._getDefaultOptions().position;\n    }\n  }, {\n    key: \"_getInkRippleContainer\",\n    value: function _getInkRippleContainer() {\n      return this.$content();\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function _optionChanged(args) {\n      switch (args.name) {\n        case \"actions\":\n          if (this._isVisible()) {\n            this._renderIcon();\n\n            this._renderLabel();\n          }\n\n          this._renderCloseIcon();\n\n          this._renderClick();\n\n          this._renderActions();\n\n          break;\n\n        case \"maxSpeedDialActionCount\":\n          this._renderActions();\n\n          break;\n\n        case \"closeIcon\":\n          this._renderCloseIcon();\n\n          break;\n\n        case \"position\":\n          _get(_getPrototypeOf(SpeedDialMainItem.prototype), \"_optionChanged\", this).call(this, args);\n\n          this._setPosition();\n\n          break;\n\n        case \"label\":\n          if (this._isVisible()) {\n            this._renderLabel();\n          }\n\n          this._setPosition();\n\n          break;\n\n        case \"icon\":\n          if (this._isVisible()) {\n            this._renderIcon();\n          }\n\n          break;\n\n        default:\n          _get(_getPrototypeOf(SpeedDialMainItem.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }]);\n\n  return SpeedDialMainItem;\n}(SpeedDialItem);\n\nexport function initAction(newAction) {\n  newAction._options.silent(\"onInitializing\", null);\n\n  var isActionExist = false;\n\n  if (!speedDialMainItem) {\n    var $fabMainElement = $(\"<div>\").appendTo(getSwatchContainer(newAction.$element()));\n    speedDialMainItem = newAction._createComponent($fabMainElement, SpeedDialMainItem, extend({}, modifyActionOptions(newAction), {\n      actions: [newAction]\n    }));\n  } else {\n    var savedActions = speedDialMainItem.option(\"actions\");\n    savedActions.forEach(function (action) {\n      if (action._options.silent(\"id\") === newAction._options.silent(\"id\")) {\n        isActionExist = true;\n        return newAction;\n      }\n    });\n    speedDialMainItem._options.silent(\"position\"), true;\n\n    if (!isActionExist) {\n      if (speedDialMainItem._getVisibleActions(savedActions).length >= speedDialMainItem.option(\"maxSpeedDialActionCount\")) {\n        newAction.dispose();\n        errors.log(\"W1014\");\n        return;\n      }\n\n      savedActions.push(newAction);\n      speedDialMainItem.option(extend(speedDialMainItem._getCurrentOptions(savedActions), {\n        actions: savedActions\n      }));\n    } else if (1 === savedActions.length) {\n      speedDialMainItem.option(extend({}, modifyActionOptions(savedActions[0]), {\n        actions: savedActions,\n        position: speedDialMainItem._getPosition()\n      }));\n    } else {\n      speedDialMainItem.option(extend(speedDialMainItem._getCurrentOptions(savedActions), {\n        actions: savedActions\n      }));\n    }\n  }\n}\nexport function disposeAction(actionId) {\n  if (!speedDialMainItem) {\n    return;\n  }\n\n  var savedActions = speedDialMainItem.option(\"actions\");\n  var savedActionsCount = savedActions.length;\n  savedActions = savedActions.filter(function (action) {\n    return action._options.silent(\"id\") !== actionId;\n  });\n\n  if (savedActionsCount === savedActions.length) {\n    return;\n  }\n\n  if (!savedActions.length) {\n    speedDialMainItem.dispose();\n    speedDialMainItem.$element().remove();\n    speedDialMainItem = null;\n  } else if (1 === savedActions.length) {\n    speedDialMainItem.option(extend({}, modifyActionOptions(savedActions[0]), {\n      actions: savedActions\n    }));\n  } else {\n    speedDialMainItem.option({\n      actions: savedActions\n    });\n  }\n}\nexport function repaint() {\n  if (!speedDialMainItem) {\n    return;\n  }\n\n  var visibleActions = speedDialMainItem._getVisibleActions();\n\n  var icon = 1 === visibleActions.length ? visibleActions[0].option(\"icon\") : speedDialMainItem._getDefaultOptions().icon;\n  var label = 1 === visibleActions.length ? visibleActions[0].option(\"label\") : speedDialMainItem._getDefaultOptions().label;\n  speedDialMainItem.option({\n    actions: speedDialMainItem.option(\"actions\"),\n    icon: icon,\n    closeIcon: speedDialMainItem._getDefaultOptions().closeIcon,\n    position: speedDialMainItem._getPosition(),\n    label: label,\n    maxSpeedDialActionCount: speedDialMainItem._getDefaultOptions().maxSpeedDialActionCount,\n    direction: speedDialMainItem._getDefaultOptions().direction\n  });\n}","map":null,"metadata":{},"sourceType":"module"}