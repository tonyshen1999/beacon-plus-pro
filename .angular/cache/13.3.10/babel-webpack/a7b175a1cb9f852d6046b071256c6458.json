{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/gauges/linear_indicators.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { BaseIndicator, BaseTextCloudMarker, BaseRangeBar } from \"./base_indicators\";\nvar _Number = Number;\nimport { normalizeEnum as _normalizeEnum } from \"../core/utils\";\nvar SimpleIndicator = BaseIndicator.inherit({\n  _move: function _move() {\n    var delta = this._actualPosition - this._zeroPosition;\n\n    this._rootElement.move(this.vertical ? 0 : delta, this.vertical ? delta : 0);\n\n    this._trackerElement && this._trackerElement.move(this.vertical ? 0 : delta, this.vertical ? delta : 0);\n  },\n  _isEnabled: function _isEnabled() {\n    this.vertical = this._options.vertical;\n    return this._options.length > 0 && this._options.width > 0;\n  },\n  _isVisible: function _isVisible() {\n    return true;\n  },\n  _getTrackerSettings: function _getTrackerSettings() {\n    var options = this._options;\n    var x1;\n    var x2;\n    var y1;\n    var y2;\n    var width = options.width / 2;\n    var length = options.length / 2;\n    var p = this._zeroPosition;\n    width > 10 || (width = 10);\n    length > 10 || (length = 10);\n\n    if (this.vertical) {\n      x1 = options.x - length;\n      x2 = options.x + length;\n      y1 = p + width;\n      y2 = p - width;\n    } else {\n      x1 = p - width;\n      x2 = p + width;\n      y1 = options.y + length;\n      y2 = options.y - length;\n    }\n\n    return {\n      points: [x1, y1, x1, y2, x2, y2, x2, y1]\n    };\n  },\n  _render: function _render() {\n    this._zeroPosition = this._translator.getCodomainStart();\n  },\n  _clear: function _clear() {\n    delete this._element;\n  },\n  measure: function measure(layout) {\n    var p = this.vertical ? layout.x : layout.y;\n    return {\n      min: p - this._options.length / 2,\n      max: p + this._options.length / 2\n    };\n  },\n  getTooltipParameters: function getTooltipParameters() {\n    var options = this._options;\n    var p = this._actualPosition;\n    var parameters = {\n      x: p,\n      y: p,\n      value: this._currentValue,\n      color: options.color,\n      offset: options.width / 2\n    };\n    this.vertical ? parameters.x = options.x : parameters.y = options.y;\n    return parameters;\n  }\n});\nvar rectangle = SimpleIndicator.inherit({\n  _render: function _render() {\n    var options = this._options;\n    var x1;\n    var x2;\n    var y1;\n    var y2;\n    this.callBase();\n    var p = this._zeroPosition;\n\n    if (this.vertical) {\n      x1 = options.x - options.length / 2;\n      x2 = options.x + options.length / 2;\n      y1 = p + options.width / 2;\n      y2 = p - options.width / 2;\n    } else {\n      x1 = p - options.width / 2;\n      x2 = p + options.width / 2;\n      y1 = options.y + options.length / 2;\n      y2 = options.y - options.length / 2;\n    }\n\n    this._element = this._element || this._renderer.path([], \"area\").append(this._rootElement);\n\n    this._element.attr({\n      points: [x1, y1, x1, y2, x2, y2, x2, y1]\n    });\n  }\n});\nvar rhombus = SimpleIndicator.inherit({\n  _render: function _render() {\n    var options = this._options;\n    var x;\n    var y;\n    var dx;\n    var dy;\n    this.callBase();\n\n    if (this.vertical) {\n      x = options.x;\n      y = this._zeroPosition;\n      dx = options.length / 2 || 0;\n      dy = options.width / 2 || 0;\n    } else {\n      x = this._zeroPosition;\n      y = options.y;\n      dx = options.width / 2 || 0;\n      dy = options.length / 2 || 0;\n    }\n\n    this._element = this._element || this._renderer.path([], \"area\").append(this._rootElement);\n\n    this._element.attr({\n      points: [x - dx, y, x, y - dy, x + dx, y, x, y + dy]\n    });\n  }\n});\nvar circle = SimpleIndicator.inherit({\n  _render: function _render() {\n    var options = this._options;\n    var x;\n    var y;\n    this.callBase();\n\n    if (this.vertical) {\n      x = options.x;\n      y = this._zeroPosition;\n    } else {\n      x = this._zeroPosition;\n      y = options.y;\n    }\n\n    var r = options.length / 2 || 0;\n    this._element = this._element || this._renderer.circle().append(this._rootElement);\n\n    this._element.attr({\n      cx: x,\n      cy: y,\n      r: r\n    });\n  }\n});\nvar triangleMarker = SimpleIndicator.inherit({\n  _isEnabled: function _isEnabled() {\n    this.vertical = this._options.vertical;\n    this._inverted = this.vertical ? \"right\" === _normalizeEnum(this._options.horizontalOrientation) : \"bottom\" === _normalizeEnum(this._options.verticalOrientation);\n    return this._options.length > 0 && this._options.width > 0;\n  },\n  _isVisible: function _isVisible() {\n    return true;\n  },\n  _render: function _render() {\n    var options = this._options;\n    var x1;\n    var x2;\n    var y1;\n    var y2;\n    var settings = {\n      stroke: \"none\",\n      \"stroke-width\": 0,\n      \"stroke-linecap\": \"square\"\n    };\n    this.callBase();\n\n    if (this.vertical) {\n      x1 = options.x;\n      y1 = this._zeroPosition;\n      x2 = x1 + _Number(this._inverted ? options.length : -options.length);\n      settings.points = [x1, y1, x2, y1 - options.width / 2, x2, y1 + options.width / 2];\n    } else {\n      y1 = options.y;\n      x1 = this._zeroPosition;\n      y2 = y1 + _Number(this._inverted ? options.length : -options.length);\n      settings.points = [x1, y1, x1 - options.width / 2, y2, x1 + options.width / 2, y2];\n    }\n\n    if (options.space > 0) {\n      settings[\"stroke-width\"] = Math.min(options.space, options.width / 4) || 0;\n      settings.stroke = settings[\"stroke-width\"] > 0 ? options.containerBackgroundColor || \"none\" : \"none\";\n    }\n\n    this._element = this._element || this._renderer.path([], \"area\").append(this._rootElement);\n\n    this._element.attr(settings).sharp();\n  },\n  _getTrackerSettings: function _getTrackerSettings() {\n    var options = this._options;\n    var width = options.width / 2;\n\n    var length = _Number(options.length);\n\n    var x1;\n    var x2;\n    var y1;\n    var y2;\n    var result;\n    width > 10 || (width = 10);\n    length > 20 || (length = 20);\n\n    if (this.vertical) {\n      x1 = options.x;\n      x2 = x1 + (this._inverted ? length : -length);\n      y1 = this._zeroPosition + width;\n      y2 = this._zeroPosition - width;\n      result = [x1, y1, x2, y1, x2, y2, x1, y2];\n    } else {\n      y1 = options.y;\n      y2 = y1 + (this._inverted ? length : -length);\n      x1 = this._zeroPosition - width;\n      x2 = this._zeroPosition + width;\n      result = [x1, y1, x1, y2, x2, y2, x2, y1];\n    }\n\n    return {\n      points: result\n    };\n  },\n  measure: function measure(layout) {\n    var length = _Number(this._options.length);\n\n    var minBound;\n    var maxBound;\n\n    if (this.vertical) {\n      minBound = maxBound = layout.x;\n\n      if (this._inverted) {\n        maxBound = minBound + length;\n      } else {\n        minBound = maxBound - length;\n      }\n    } else {\n      minBound = maxBound = layout.y;\n\n      if (this._inverted) {\n        maxBound = minBound + length;\n      } else {\n        minBound = maxBound - length;\n      }\n    }\n\n    return {\n      min: minBound,\n      max: maxBound,\n      indent: this._options.width / 2\n    };\n  },\n  getTooltipParameters: function getTooltipParameters() {\n    var options = this._options;\n    var s = (this._inverted ? options.length : -options.length) / 2;\n    var parameters = this.callBase();\n    this.vertical ? parameters.x += s : parameters.y += s;\n    parameters.offset = options.length / 2;\n    return parameters;\n  }\n});\nvar textCloud = BaseTextCloudMarker.inherit({\n  _isEnabled: function _isEnabled() {\n    this.vertical = this._options.vertical;\n    this._inverted = this.vertical ? \"right\" === _normalizeEnum(this._options.horizontalOrientation) : \"bottom\" === _normalizeEnum(this._options.verticalOrientation);\n    return true;\n  },\n  _isVisible: function _isVisible() {\n    return true;\n  },\n  _getTextCloudOptions: function _getTextCloudOptions() {\n    var x = this._actualPosition;\n    var y = this._actualPosition;\n    var type;\n\n    if (this.vertical) {\n      x = this._options.x;\n      type = this._inverted ? \"top-left\" : \"top-right\";\n    } else {\n      y = this._options.y;\n      type = this._inverted ? \"right-top\" : \"right-bottom\";\n    }\n\n    return {\n      x: x,\n      y: y,\n      type: type\n    };\n  },\n  measure: function measure(layout) {\n    var minBound;\n    var maxBound;\n    var arrowLength = _Number(this._options.arrowLength) || 0;\n\n    this._measureText();\n\n    if (this.vertical) {\n      if (this._inverted) {\n        minBound = layout.x;\n        maxBound = layout.x + arrowLength + this._textFullWidth;\n      } else {\n        minBound = layout.x - arrowLength - this._textFullWidth;\n        maxBound = layout.x;\n      }\n    } else if (this._inverted) {\n      minBound = layout.y;\n      maxBound = layout.y + arrowLength + this._textFullHeight;\n    } else {\n      minBound = layout.y - arrowLength - this._textFullHeight;\n      maxBound = layout.y;\n    }\n\n    return {\n      min: minBound,\n      max: maxBound,\n      indent: 0\n    };\n  },\n  _correctCloudType: function _correctCloudType(type, _ref, _ref2) {\n    var x = _ref.x,\n        y = _ref.y;\n    var width = _ref2.width,\n        height = _ref2.height;\n\n    if (\"right-top\" === type || \"right-bottom\" === type) {\n      if (x - width < this._translator.getCodomainStart()) {\n        type = \"left-\".concat(type.split(\"-\")[1]);\n      }\n    } else if (\"top-left\" === type || \"top-right\" === type) {\n      if (y + height > this._translator.getCodomainStart()) {\n        type = \"bottom-\".concat(type.split(\"-\")[1]);\n      }\n    }\n\n    return type;\n  }\n});\nvar rangeBar = BaseRangeBar.inherit({\n  _isEnabled: function _isEnabled() {\n    this.vertical = this._options.vertical;\n    this._inverted = this.vertical ? \"right\" === _normalizeEnum(this._options.horizontalOrientation) : \"bottom\" === _normalizeEnum(this._options.verticalOrientation);\n    return this._options.size > 0;\n  },\n  _isVisible: function _isVisible() {\n    return true;\n  },\n  _createBarItem: function _createBarItem() {\n    return this._renderer.path([], \"area\").append(this._rootElement);\n  },\n  _createTracker: function _createTracker() {\n    return this._renderer.path([], \"area\");\n  },\n  _setBarSides: function _setBarSides() {\n    var options = this._options;\n\n    var size = _Number(options.size);\n\n    var minSide;\n    var maxSide;\n\n    if (this.vertical) {\n      if (this._inverted) {\n        minSide = options.x;\n        maxSide = options.x + size;\n      } else {\n        minSide = options.x - size;\n        maxSide = options.x;\n      }\n    } else if (this._inverted) {\n      minSide = options.y;\n      maxSide = options.y + size;\n    } else {\n      minSide = options.y - size;\n      maxSide = options.y;\n    }\n\n    this._minSide = minSide;\n    this._maxSide = maxSide;\n    this._minBound = minSide;\n    this._maxBound = maxSide;\n  },\n  _getSpace: function _getSpace() {\n    var options = this._options;\n    return options.space > 0 ? _Number(options.space) : 0;\n  },\n  _isTextVisible: function _isTextVisible() {\n    var textOptions = this._options.text || {};\n    return textOptions.indent > 0 || textOptions.indent < 0;\n  },\n  _getTextAlign: function _getTextAlign() {\n    return this.vertical ? this._options.text.indent > 0 ? \"left\" : \"right\" : \"center\";\n  },\n  _setTextItemsSides: function _setTextItemsSides() {\n    var indent = _Number(this._options.text.indent);\n\n    if (indent > 0) {\n      this._lineStart = this._maxSide;\n      this._lineEnd = this._maxSide + indent;\n      this._textPosition = this._lineEnd + (this.vertical ? 2 : this._textHeight / 2);\n      this._maxBound = this._textPosition + (this.vertical ? this._textWidth : this._textHeight / 2);\n    } else if (indent < 0) {\n      this._lineStart = this._minSide;\n      this._lineEnd = this._minSide + indent;\n      this._textPosition = this._lineEnd - (this.vertical ? 2 : this._textHeight / 2);\n      this._minBound = this._textPosition - (this.vertical ? this._textWidth : this._textHeight / 2);\n    }\n  },\n  _getPositions: function _getPositions() {\n    var startPosition = this._startPosition;\n    var endPosition = this._endPosition;\n    var space = this._space;\n    var basePosition = this._basePosition;\n    var actualPosition = this._actualPosition;\n    var mainPosition1;\n    var mainPosition2;\n    var backPosition1;\n    var backPosition2;\n\n    if (startPosition < endPosition) {\n      if (basePosition < actualPosition) {\n        mainPosition1 = basePosition;\n        mainPosition2 = actualPosition;\n      } else {\n        mainPosition1 = actualPosition;\n        mainPosition2 = basePosition;\n      }\n\n      backPosition1 = mainPosition1 - space;\n      backPosition2 = mainPosition2 + space;\n    } else {\n      if (basePosition > actualPosition) {\n        mainPosition1 = basePosition;\n        mainPosition2 = actualPosition;\n      } else {\n        mainPosition1 = actualPosition;\n        mainPosition2 = basePosition;\n      }\n\n      backPosition1 = mainPosition1 + space;\n      backPosition2 = mainPosition2 - space;\n    }\n\n    return {\n      start: startPosition,\n      end: endPosition,\n      main1: mainPosition1,\n      main2: mainPosition2,\n      back1: backPosition1,\n      back2: backPosition2\n    };\n  },\n  _buildItemSettings: function _buildItemSettings(from, to) {\n    var side1 = this._minSide;\n    var side2 = this._maxSide;\n    var points = this.vertical ? [side1, from, side1, to, side2, to, side2, from] : [from, side1, from, side2, to, side2, to, side1];\n    return {\n      points: points\n    };\n  },\n  _updateTextPosition: function _updateTextPosition() {\n    this._text.attr(this.vertical ? {\n      x: this._textPosition,\n      y: this._actualPosition + this._textVerticalOffset\n    } : {\n      x: this._actualPosition,\n      y: this._textPosition + this._textVerticalOffset\n    });\n  },\n  _updateLinePosition: function _updateLinePosition() {\n    var actualPosition = this._actualPosition;\n    var side1;\n    var side2;\n    var points;\n\n    if (this.vertical) {\n      if (this._basePosition >= actualPosition) {\n        side1 = actualPosition;\n        side2 = actualPosition + 2;\n      } else {\n        side1 = actualPosition - 2;\n        side2 = actualPosition;\n      }\n\n      points = [this._lineStart, side1, this._lineStart, side2, this._lineEnd, side2, this._lineEnd, side1];\n    } else {\n      if (this._basePosition <= actualPosition) {\n        side1 = actualPosition - 2;\n        side2 = actualPosition;\n      } else {\n        side1 = actualPosition;\n        side2 = actualPosition + 2;\n      }\n\n      points = [side1, this._lineStart, side1, this._lineEnd, side2, this._lineEnd, side2, this._lineStart];\n    }\n\n    this._line.attr({\n      points: points\n    }).sharp();\n  },\n  _getTooltipPosition: function _getTooltipPosition() {\n    var crossCenter = (this._minSide + this._maxSide) / 2;\n    var alongCenter = (this._basePosition + this._actualPosition) / 2;\n    return this.vertical ? {\n      x: crossCenter,\n      y: alongCenter\n    } : {\n      x: alongCenter,\n      y: crossCenter\n    };\n  },\n  measure: function measure(layout) {\n    var size = _Number(this._options.size);\n\n    var textIndent = _Number(this._options.text.indent);\n\n    var minBound;\n    var maxBound;\n    var indent;\n\n    this._measureText();\n\n    if (this.vertical) {\n      minBound = maxBound = layout.x;\n\n      if (this._inverted) {\n        maxBound += size;\n      } else {\n        minBound -= size;\n      }\n\n      if (this._hasText) {\n        indent = this._textHeight / 2;\n\n        if (textIndent > 0) {\n          maxBound += textIndent + this._textWidth;\n        }\n\n        if (textIndent < 0) {\n          minBound += textIndent - this._textWidth;\n        }\n      }\n    } else {\n      minBound = maxBound = layout.y;\n\n      if (this._inverted) {\n        maxBound += size;\n      } else {\n        minBound -= size;\n      }\n\n      if (this._hasText) {\n        indent = this._textWidth / 2;\n\n        if (textIndent > 0) {\n          maxBound += textIndent + this._textHeight;\n        }\n\n        if (textIndent < 0) {\n          minBound += textIndent - this._textHeight;\n        }\n      }\n    }\n\n    return {\n      min: minBound,\n      max: maxBound,\n      indent: indent\n    };\n  }\n});\nexport { rangeBar as _default, rectangle, rhombus, circle, triangleMarker as trianglemarker, textCloud as textcloud, rangeBar as rangebar };","map":null,"metadata":{},"sourceType":"module"}