{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/data_grid/ui.data_grid.grouping.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getHeight } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport gridCore from \"./ui.data_grid.core\";\nimport { GroupingHelper as ExpandedGroupingHelper } from \"./ui.data_grid.grouping.expanded\";\nimport { GroupingHelper as CollapsedGroupingHelper } from \"./ui.data_grid.grouping.collapsed\";\nimport messageLocalization from \"../../localization/message\";\nimport dataSourceAdapter from \"./ui.data_grid.data_source_adapter\";\nimport { isDefined, isString } from \"../../core/utils/type\";\nimport { each } from \"../../core/utils/iterator\";\nimport devices from \"../../core/devices\";\nimport { when, Deferred } from \"../../core/utils/deferred\";\nimport { registerKeyboardAction } from \"../grid_core/ui.grid_core.accessibility\";\nimport { setTabIndex, restoreFocus } from \"../shared/accessibility\";\nvar DATAGRID_GROUP_PANEL_CLASS = \"dx-datagrid-group-panel\";\nvar DATAGRID_GROUP_PANEL_MESSAGE_CLASS = \"dx-group-panel-message\";\nvar DATAGRID_GROUP_PANEL_ITEM_CLASS = \"dx-group-panel-item\";\nvar DATAGRID_GROUP_PANEL_LABEL_CLASS = \"dx-toolbar-label\";\nvar DATAGRID_EXPAND_CLASS = \"dx-datagrid-expand\";\nvar DATAGRID_GROUP_ROW_CLASS = \"dx-group-row\";\nvar HEADER_FILTER_CLASS_SELECTOR = \".dx-header-filter\";\nvar GroupingDataSourceAdapterExtender = {\n  init: function init() {\n    this.callBase.apply(this, arguments);\n\n    this._initGroupingHelper();\n  },\n  _initGroupingHelper: function _initGroupingHelper(options) {\n    var grouping = this._grouping;\n    var isAutoExpandAll = this.option(\"grouping.autoExpandAll\");\n    var isFocusedRowEnabled = this.option(\"focusedRowEnabled\");\n    var remoteOperations = options ? options.remoteOperations : this.remoteOperations();\n    var isODataRemoteOperations = remoteOperations.filtering && remoteOperations.sorting && remoteOperations.paging;\n\n    if (isODataRemoteOperations && !remoteOperations.grouping && (isAutoExpandAll || !isFocusedRowEnabled)) {\n      if (!grouping || grouping instanceof CollapsedGroupingHelper) {\n        this._grouping = new ExpandedGroupingHelper(this);\n      }\n    } else if (!grouping || grouping instanceof ExpandedGroupingHelper) {\n      this._grouping = new CollapsedGroupingHelper(this);\n    }\n  },\n  totalItemsCount: function totalItemsCount() {\n    var totalCount = this.callBase();\n    return totalCount > 0 && this._dataSource.group() && this._dataSource.requireTotalCount() ? totalCount + this._grouping.totalCountCorrection() : totalCount;\n  },\n  itemsCount: function itemsCount() {\n    return this._dataSource.group() ? this._grouping.itemsCount() || 0 : this.callBase.apply(this, arguments);\n  },\n  allowCollapseAll: function allowCollapseAll() {\n    return this._grouping.allowCollapseAll();\n  },\n  isGroupItemCountable: function isGroupItemCountable(item) {\n    return this._grouping.isGroupItemCountable(item);\n  },\n  isRowExpanded: function isRowExpanded(key) {\n    var groupInfo = this._grouping.findGroupInfo(key);\n\n    return groupInfo ? groupInfo.isExpanded : !this._grouping.allowCollapseAll();\n  },\n  collapseAll: function collapseAll(groupIndex) {\n    return this._collapseExpandAll(groupIndex, false);\n  },\n  expandAll: function expandAll(groupIndex) {\n    return this._collapseExpandAll(groupIndex, true);\n  },\n  _collapseExpandAll: function _collapseExpandAll(groupIndex, isExpand) {\n    var dataSource = this._dataSource;\n    var group = dataSource.group();\n    var groups = gridCore.normalizeSortingInfo(group || []);\n\n    if (groups.length) {\n      for (var i = 0; i < groups.length; i++) {\n        if (void 0 === groupIndex || groupIndex === i) {\n          groups[i].isExpanded = isExpand;\n        } else if (group && group[i]) {\n          groups[i].isExpanded = group[i].isExpanded;\n        }\n      }\n\n      dataSource.group(groups);\n\n      this._grouping.foreachGroups(function (groupInfo, parents) {\n        if (void 0 === groupIndex || groupIndex === parents.length - 1) {\n          groupInfo.isExpanded = isExpand;\n        }\n      }, false, true);\n\n      this.resetPagesCache();\n    }\n\n    return true;\n  },\n  refresh: function refresh() {\n    this.callBase.apply(this, arguments);\n    return this._grouping.refresh.apply(this._grouping, arguments);\n  },\n  changeRowExpand: function changeRowExpand(path) {\n    var dataSource = this._dataSource;\n\n    if (dataSource.group()) {\n      dataSource.beginLoading();\n\n      if (this._lastLoadOptions) {\n        this._lastLoadOptions.groupExpand = true;\n      }\n\n      return this._changeRowExpandCore(path).always(function () {\n        dataSource.endLoading();\n      });\n    }\n  },\n  _changeRowExpandCore: function _changeRowExpandCore(path) {\n    return this._grouping.changeRowExpand(path);\n  },\n  _hasGroupLevelsExpandState: function _hasGroupLevelsExpandState(group, isExpanded) {\n    if (group && Array.isArray(group)) {\n      for (var i = 0; i < group.length; i++) {\n        if (group[i].isExpanded === isExpanded) {\n          return true;\n        }\n      }\n    }\n  },\n  _customizeRemoteOperations: function _customizeRemoteOperations(options, operationTypes) {\n    var remoteOperations = options.remoteOperations;\n\n    if (options.storeLoadOptions.group) {\n      if (remoteOperations.grouping && !options.isCustomLoading) {\n        if (!remoteOperations.groupPaging || this._hasGroupLevelsExpandState(options.storeLoadOptions.group, true)) {\n          remoteOperations.paging = false;\n        }\n      }\n\n      if (!remoteOperations.grouping && (!remoteOperations.sorting || !remoteOperations.filtering || options.isCustomLoading || this._hasGroupLevelsExpandState(options.storeLoadOptions.group, false))) {\n        remoteOperations.paging = false;\n      }\n    } else if (!options.isCustomLoading && remoteOperations.paging && operationTypes.grouping) {\n      this.resetCache();\n    }\n\n    this.callBase.apply(this, arguments);\n  },\n  _handleDataLoading: function _handleDataLoading(options) {\n    this.callBase(options);\n\n    this._initGroupingHelper(options);\n\n    return this._grouping.handleDataLoading(options);\n  },\n  _handleDataLoaded: function _handleDataLoaded(options) {\n    return this._grouping.handleDataLoaded(options, this.callBase.bind(this));\n  },\n  _handleDataLoadedCore: function _handleDataLoadedCore(options) {\n    return this._grouping.handleDataLoadedCore(options, this.callBase.bind(this));\n  }\n};\ndataSourceAdapter.extend(GroupingDataSourceAdapterExtender);\nvar GroupingDataControllerExtender = {\n  init: function init() {\n    this.callBase();\n    this.createAction(\"onRowExpanding\");\n    this.createAction(\"onRowExpanded\");\n    this.createAction(\"onRowCollapsing\");\n    this.createAction(\"onRowCollapsed\");\n  },\n  _beforeProcessItems: function _beforeProcessItems(items) {\n    var groupColumns = this._columnsController.getGroupColumns();\n\n    items = this.callBase(items);\n\n    if (items.length && groupColumns.length) {\n      items = this._processGroupItems(items, groupColumns.length);\n    }\n\n    return items;\n  },\n  _processItem: function _processItem(item, options) {\n    if (isDefined(item.groupIndex) && isString(item.rowType) && 0 === item.rowType.indexOf(\"group\")) {\n      item = this._processGroupItem(item, options);\n      options.dataIndex = 0;\n    } else {\n      item = this.callBase.apply(this, arguments);\n    }\n\n    return item;\n  },\n  _processGroupItem: function _processGroupItem(item) {\n    return item;\n  },\n  _processGroupItems: function _processGroupItems(items, groupsCount, options) {\n    var groupedColumns = this._columnsController.getGroupColumns();\n\n    var column = groupedColumns[groupedColumns.length - groupsCount];\n\n    if (!options) {\n      var scrollingMode = this.option(\"scrolling.mode\");\n      options = {\n        collectContinuationItems: \"virtual\" !== scrollingMode && \"infinite\" !== scrollingMode,\n        resultItems: [],\n        path: [],\n        values: []\n      };\n    }\n\n    var resultItems = options.resultItems;\n\n    if (options.data) {\n      if (options.collectContinuationItems || !options.data.isContinuation) {\n        resultItems.push({\n          rowType: \"group\",\n          data: options.data,\n          groupIndex: options.path.length - 1,\n          isExpanded: !!options.data.items,\n          key: options.path.slice(0),\n          values: options.values.slice(0)\n        });\n      }\n    }\n\n    if (items) {\n      if (0 === groupsCount) {\n        resultItems.push.apply(resultItems, items);\n      } else {\n        for (var i = 0; i < items.length; i++) {\n          var item = items[i];\n\n          if (item && \"items\" in item) {\n            options.data = item;\n            options.path.push(item.key);\n            options.values.push(column && column.deserializeValue && !column.calculateDisplayValue ? column.deserializeValue(item.key) : item.key);\n\n            this._processGroupItems(item.items, groupsCount - 1, options);\n\n            options.data = void 0;\n            options.path.pop();\n            options.values.pop();\n          } else {\n            resultItems.push(item);\n          }\n        }\n      }\n    }\n\n    return resultItems;\n  },\n  publicMethods: function publicMethods() {\n    return this.callBase().concat([\"collapseAll\", \"expandAll\", \"isRowExpanded\", \"expandRow\", \"collapseRow\"]);\n  },\n  collapseAll: function collapseAll(groupIndex) {\n    var dataSource = this._dataSource;\n\n    if (dataSource && dataSource.collapseAll(groupIndex)) {\n      dataSource.pageIndex(0);\n      dataSource.reload();\n    }\n  },\n  expandAll: function expandAll(groupIndex) {\n    var dataSource = this._dataSource;\n\n    if (dataSource && dataSource.expandAll(groupIndex)) {\n      dataSource.pageIndex(0);\n      dataSource.reload();\n    }\n  },\n  changeRowExpand: function changeRowExpand(key) {\n    var that = this;\n    var expanded = that.isRowExpanded(key);\n    var args = {\n      key: key,\n      expanded: expanded\n    };\n    that.executeAction(expanded ? \"onRowCollapsing\" : \"onRowExpanding\", args);\n\n    if (!args.cancel) {\n      return when(that._changeRowExpandCore(key)).done(function () {\n        args.expanded = !expanded;\n        that.executeAction(expanded ? \"onRowCollapsed\" : \"onRowExpanded\", args);\n      });\n    }\n\n    return new Deferred().resolve();\n  },\n  _changeRowExpandCore: function _changeRowExpandCore(key) {\n    var that = this;\n    var dataSource = this._dataSource;\n    var d = new Deferred();\n\n    if (!dataSource) {\n      d.resolve();\n    } else {\n      when(dataSource.changeRowExpand(key)).done(function () {\n        that.load().done(d.resolve).fail(d.reject);\n      }).fail(d.reject);\n    }\n\n    return d;\n  },\n  isRowExpanded: function isRowExpanded(key) {\n    var dataSource = this._dataSource;\n    return dataSource && dataSource.isRowExpanded(key);\n  },\n  expandRow: function expandRow(key) {\n    if (!this.isRowExpanded(key)) {\n      return this.changeRowExpand(key);\n    }\n\n    return new Deferred().resolve();\n  },\n  collapseRow: function collapseRow(key) {\n    if (this.isRowExpanded(key)) {\n      return this.changeRowExpand(key);\n    }\n\n    return new Deferred().resolve();\n  },\n  optionChanged: function optionChanged(args) {\n    if (\"grouping\" === args.name) {\n      args.name = \"dataSource\";\n    }\n\n    this.callBase(args);\n  }\n};\n\nvar onGroupingMenuItemClick = function onGroupingMenuItemClick(column, params) {\n  var columnsController = this._columnsController;\n\n  switch (params.itemData.value) {\n    case \"group\":\n      var groups = columnsController._dataSource.group() || [];\n      columnsController.columnOption(column.dataField, \"groupIndex\", groups.length);\n      break;\n\n    case \"ungroup\":\n      columnsController.columnOption(column.dataField, \"groupIndex\", -1);\n      break;\n\n    case \"ungroupAll\":\n      this.component.clearGrouping();\n  }\n};\n\nexport var GroupingHeaderPanelExtender = {\n  _getToolbarItems: function _getToolbarItems() {\n    var items = this.callBase();\n    return this._appendGroupingItem(items);\n  },\n  _appendGroupingItem: function _appendGroupingItem(items) {\n    var _this = this;\n\n    if (this._isGroupPanelVisible()) {\n      var isRendered = false;\n      var toolbarItem = {\n        template: function template() {\n          var $groupPanel = $(\"<div>\").addClass(DATAGRID_GROUP_PANEL_CLASS);\n\n          _this._updateGroupPanelContent($groupPanel);\n\n          registerKeyboardAction(\"groupPanel\", _this, $groupPanel, void 0, _this._handleActionKeyDown.bind(_this));\n          return $groupPanel;\n        },\n        name: \"groupPanel\",\n        onItemRendered: function onItemRendered() {\n          isRendered && _this.renderCompleted.fire();\n          isRendered = true;\n        },\n        location: \"before\",\n        locateInMenu: \"never\",\n        sortIndex: 1\n      };\n      items.push(toolbarItem);\n    }\n\n    return items;\n  },\n  _handleActionKeyDown: function _handleActionKeyDown(args) {\n    var event = args.event;\n    var $target = $(event.target);\n    var groupColumnIndex = $target.closest(\".\".concat(DATAGRID_GROUP_PANEL_ITEM_CLASS)).index();\n\n    var column = this._columnsController.getGroupColumns()[groupColumnIndex];\n\n    var columnIndex = column && column.index;\n\n    if ($target.is(HEADER_FILTER_CLASS_SELECTOR)) {\n      this.getController(\"headerFilter\").showHeaderFilterMenu(columnIndex, true);\n    } else {\n      this._processGroupItemAction(columnIndex);\n    }\n\n    event.preventDefault();\n  },\n  _isGroupPanelVisible: function _isGroupPanelVisible() {\n    var groupPanelOptions = this.option(\"groupPanel\");\n    var isVisible;\n\n    if (groupPanelOptions) {\n      isVisible = groupPanelOptions.visible;\n\n      if (\"auto\" === isVisible) {\n        isVisible = \"desktop\" === devices.current().deviceType ? true : false;\n      }\n    }\n\n    return isVisible;\n  },\n  _renderGroupPanelItems: function _renderGroupPanelItems($groupPanel, groupColumns) {\n    var that = this;\n    $groupPanel.empty();\n    each(groupColumns, function (index, groupColumn) {\n      that._createGroupPanelItem($groupPanel, groupColumn);\n    });\n    restoreFocus(this);\n  },\n  _createGroupPanelItem: function _createGroupPanelItem($rootElement, groupColumn) {\n    var $groupPanelItem = $(\"<div>\").addClass(groupColumn.cssClass).addClass(DATAGRID_GROUP_PANEL_ITEM_CLASS).data(\"columnData\", groupColumn).appendTo($rootElement).text(groupColumn.caption);\n    setTabIndex(this, $groupPanelItem);\n    return $groupPanelItem;\n  },\n  _columnOptionChanged: function _columnOptionChanged(e) {\n    if (!this._requireReady && !gridCore.checkChanges(e.optionNames, [\"width\", \"visibleWidth\"])) {\n      var $toolbarElement = this.element();\n      var $groupPanel = $toolbarElement && $toolbarElement.find(\".\" + DATAGRID_GROUP_PANEL_CLASS);\n\n      if ($groupPanel && $groupPanel.length) {\n        this._updateGroupPanelContent($groupPanel);\n\n        this.renderCompleted.fire();\n      }\n    }\n\n    this.callBase();\n  },\n  _updateGroupPanelContent: function _updateGroupPanelContent($groupPanel) {\n    var groupColumns = this.getController(\"columns\").getGroupColumns();\n    var groupPanelOptions = this.option(\"groupPanel\");\n\n    this._renderGroupPanelItems($groupPanel, groupColumns);\n\n    if (groupPanelOptions.allowColumnDragging && !groupColumns.length) {\n      $(\"<div>\").addClass(DATAGRID_GROUP_PANEL_MESSAGE_CLASS).text(groupPanelOptions.emptyPanelText).appendTo($groupPanel);\n      $groupPanel.closest(\".\" + DATAGRID_GROUP_PANEL_LABEL_CLASS).css(\"maxWidth\", \"none\");\n      this.updateToolbarDimensions();\n    }\n  },\n  allowDragging: function allowDragging(column) {\n    var groupPanelOptions = this.option(\"groupPanel\");\n    return this._isGroupPanelVisible() && groupPanelOptions.allowColumnDragging && column && column.allowGrouping;\n  },\n  getColumnElements: function getColumnElements() {\n    var $element = this.element();\n    return $element && $element.find(\".\" + DATAGRID_GROUP_PANEL_ITEM_CLASS);\n  },\n  getColumns: function getColumns() {\n    return this.getController(\"columns\").getGroupColumns();\n  },\n  getBoundingRect: function getBoundingRect() {\n    var $element = this.element();\n\n    if ($element && $element.find(\".\" + DATAGRID_GROUP_PANEL_CLASS).length) {\n      var offset = $element.offset();\n      return {\n        top: offset.top,\n        bottom: offset.top + getHeight($element)\n      };\n    }\n\n    return null;\n  },\n  getName: function getName() {\n    return \"group\";\n  },\n  getContextMenuItems: function getContextMenuItems(options) {\n    var contextMenuEnabled = this.option(\"grouping.contextMenuEnabled\");\n    var $groupedColumnElement = $(options.targetElement).closest(\".\" + DATAGRID_GROUP_PANEL_ITEM_CLASS);\n    var items;\n\n    if ($groupedColumnElement.length) {\n      options.column = $groupedColumnElement.data(\"columnData\");\n    }\n\n    if (contextMenuEnabled && options.column) {\n      var column = options.column;\n      var isGroupingAllowed = isDefined(column.allowGrouping) ? column.allowGrouping : true;\n\n      if (isGroupingAllowed) {\n        var isColumnGrouped = isDefined(column.groupIndex) && column.groupIndex > -1;\n        var groupingTexts = this.option(\"grouping.texts\");\n        var onItemClick = onGroupingMenuItemClick.bind(this, column);\n        items = [{\n          text: groupingTexts.ungroup,\n          value: \"ungroup\",\n          disabled: !isColumnGrouped,\n          onItemClick: onItemClick\n        }, {\n          text: groupingTexts.ungroupAll,\n          value: \"ungroupAll\",\n          onItemClick: onItemClick\n        }];\n      }\n    }\n\n    return items;\n  },\n  isVisible: function isVisible() {\n    return this.callBase() || this._isGroupPanelVisible();\n  },\n  optionChanged: function optionChanged(args) {\n    if (\"groupPanel\" === args.name) {\n      this._invalidate();\n\n      args.handled = true;\n    } else {\n      this.callBase(args);\n    }\n  }\n};\nvar GroupingRowsViewExtender = {\n  getContextMenuItems: function getContextMenuItems(options) {\n    var contextMenuEnabled = this.option(\"grouping.contextMenuEnabled\");\n    var items;\n\n    if (contextMenuEnabled && options.row && \"group\" === options.row.rowType) {\n      var columnsController = this._columnsController;\n      var column = columnsController.columnOption(\"groupIndex:\" + options.row.groupIndex);\n\n      if (column && column.allowGrouping) {\n        var groupingTexts = this.option(\"grouping.texts\");\n        var onItemClick = onGroupingMenuItemClick.bind(this, column);\n        items = [];\n        items.push({\n          text: groupingTexts.ungroup,\n          value: \"ungroup\",\n          onItemClick: onItemClick\n        }, {\n          text: groupingTexts.ungroupAll,\n          value: \"ungroupAll\",\n          onItemClick: onItemClick\n        });\n      }\n    }\n\n    return items;\n  },\n  _rowClick: function _rowClick(e) {\n    var expandMode = this.option(\"grouping.expandMode\");\n    var scrollingMode = this.option(\"scrolling.mode\");\n    var isGroupRowStateChanged = \"infinite\" !== scrollingMode && \"rowClick\" === expandMode && $(e.event.target).closest(\".\" + DATAGRID_GROUP_ROW_CLASS).length;\n    var isExpandButtonClicked = $(e.event.target).closest(\".\" + DATAGRID_EXPAND_CLASS).length;\n\n    if (isGroupRowStateChanged || isExpandButtonClicked) {\n      this._changeGroupRowState(e);\n    }\n\n    this.callBase(e);\n  },\n  _changeGroupRowState: function _changeGroupRowState(e) {\n    var dataController = this.getController(\"data\");\n    var row = dataController.items()[e.rowIndex];\n\n    var allowCollapsing = this._columnsController.columnOption(\"groupIndex:\" + row.groupIndex, \"allowCollapsing\");\n\n    if (\"data\" === row.rowType || \"group\" === row.rowType && false !== allowCollapsing) {\n      dataController.changeRowExpand(row.key, true);\n      e.event.preventDefault();\n      e.handled = true;\n    }\n  }\n};\nvar columnHeadersViewExtender = {\n  getContextMenuItems: function getContextMenuItems(options) {\n    var contextMenuEnabled = this.option(\"grouping.contextMenuEnabled\");\n    var items = this.callBase(options);\n\n    if (contextMenuEnabled && options.row && (\"header\" === options.row.rowType || \"detailAdaptive\" === options.row.rowType)) {\n      var column = options.column;\n\n      if (!column.command && (!isDefined(column.allowGrouping) || column.allowGrouping)) {\n        var groupingTexts = this.option(\"grouping.texts\");\n        var isColumnGrouped = isDefined(column.groupIndex) && column.groupIndex > -1;\n        var onItemClick = onGroupingMenuItemClick.bind(this, column);\n        items = items || [];\n        items.push({\n          text: groupingTexts.groupByThisColumn,\n          value: \"group\",\n          beginGroup: true,\n          disabled: isColumnGrouped,\n          onItemClick: onItemClick\n        });\n\n        if (column.showWhenGrouped) {\n          items.push({\n            text: groupingTexts.ungroup,\n            value: \"ungroup\",\n            disabled: !isColumnGrouped,\n            onItemClick: onItemClick\n          });\n        }\n\n        items.push({\n          text: groupingTexts.ungroupAll,\n          value: \"ungroupAll\",\n          onItemClick: onItemClick\n        });\n      }\n    }\n\n    return items;\n  }\n};\ngridCore.registerModule(\"grouping\", {\n  defaultOptions: function defaultOptions() {\n    return {\n      grouping: {\n        autoExpandAll: true,\n        allowCollapsing: true,\n        contextMenuEnabled: false,\n        expandMode: \"buttonClick\",\n        texts: {\n          groupContinuesMessage: messageLocalization.format(\"dxDataGrid-groupContinuesMessage\"),\n          groupContinuedMessage: messageLocalization.format(\"dxDataGrid-groupContinuedMessage\"),\n          groupByThisColumn: messageLocalization.format(\"dxDataGrid-groupHeaderText\"),\n          ungroup: messageLocalization.format(\"dxDataGrid-ungroupHeaderText\"),\n          ungroupAll: messageLocalization.format(\"dxDataGrid-ungroupAllText\")\n        }\n      },\n      groupPanel: {\n        visible: false,\n        emptyPanelText: messageLocalization.format(\"dxDataGrid-groupPanelEmptyText\"),\n        allowColumnDragging: true\n      }\n    };\n  },\n  extenders: {\n    controllers: {\n      data: GroupingDataControllerExtender,\n      columns: {\n        _getExpandColumnOptions: function _getExpandColumnOptions() {\n          var options = this.callBase.apply(this, arguments);\n          options.cellTemplate = gridCore.getExpandCellTemplate();\n          return options;\n        }\n      },\n      editing: {\n        _isProcessedItem: function _isProcessedItem(item) {\n          return isDefined(item.groupIndex) && isString(item.rowType) && 0 === item.rowType.indexOf(\"group\");\n        }\n      }\n    },\n    views: {\n      headerPanel: GroupingHeaderPanelExtender,\n      rowsView: GroupingRowsViewExtender,\n      columnHeadersView: columnHeadersViewExtender\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"module"}