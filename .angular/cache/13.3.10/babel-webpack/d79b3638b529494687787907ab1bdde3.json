{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __decorate, __metadata, __param } from 'tslib';\nimport { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, ContentChildren, QueryList, Component, NgModule } from '@angular/core';\nimport DxDropDownButton from 'devextreme/ui/drop_down_button';\nimport { DxComponent, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxiItemComponent, DxoDropDownOptionsModule, DxoAnimationModule, DxoHideModule, DxoFromModule, DxoPositionModule, DxoAtModule, DxoBoundaryOffsetModule, DxoCollisionModule, DxoMyModule, DxoOffsetModule, DxoToModule, DxoShowModule, DxiToolbarItemModule, DxiItemModule } from 'devextreme-angular/ui/nested';\n/*!\r\n * devextreme-angular\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\n/**\r\n * The DropDownButton is a button that opens a drop-down menu.\r\n\r\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'devextreme-angular/core';\nimport * as ɵngcc2 from '@angular/platform-browser';\nvar DxDropDownButtonComponent = /*#__PURE__*/(function () {\n  var DxDropDownButtonComponent = /*#__PURE__*/function (_DxComponent) {\n    _inherits(DxDropDownButtonComponent, _DxComponent);\n\n    var _super = _createSuper(DxDropDownButtonComponent);\n\n    function DxDropDownButtonComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\n      var _this;\n\n      _classCallCheck(this, DxDropDownButtonComponent);\n\n      _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n      _this._watcherHelper = _watcherHelper;\n      _this._idh = _idh;\n\n      _this._createEventEmitters([{\n        subscribe: 'buttonClick',\n        emit: 'onButtonClick'\n      }, {\n        subscribe: 'contentReady',\n        emit: 'onContentReady'\n      }, {\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'itemClick',\n        emit: 'onItemClick'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        subscribe: 'selectionChanged',\n        emit: 'onSelectionChanged'\n      }, {\n        emit: 'accessKeyChange'\n      }, {\n        emit: 'activeStateEnabledChange'\n      }, {\n        emit: 'dataSourceChange'\n      }, {\n        emit: 'deferRenderingChange'\n      }, {\n        emit: 'disabledChange'\n      }, {\n        emit: 'displayExprChange'\n      }, {\n        emit: 'dropDownContentTemplateChange'\n      }, {\n        emit: 'dropDownOptionsChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'focusStateEnabledChange'\n      }, {\n        emit: 'heightChange'\n      }, {\n        emit: 'hintChange'\n      }, {\n        emit: 'hoverStateEnabledChange'\n      }, {\n        emit: 'iconChange'\n      }, {\n        emit: 'itemsChange'\n      }, {\n        emit: 'itemTemplateChange'\n      }, {\n        emit: 'keyExprChange'\n      }, {\n        emit: 'noDataTextChange'\n      }, {\n        emit: 'openedChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'selectedItemChange'\n      }, {\n        emit: 'selectedItemKeyChange'\n      }, {\n        emit: 'showArrowIconChange'\n      }, {\n        emit: 'splitButtonChange'\n      }, {\n        emit: 'stylingModeChange'\n      }, {\n        emit: 'tabIndexChange'\n      }, {\n        emit: 'textChange'\n      }, {\n        emit: 'useItemTextAsTitleChange'\n      }, {\n        emit: 'useSelectModeChange'\n      }, {\n        emit: 'visibleChange'\n      }, {\n        emit: 'widthChange'\n      }, {\n        emit: 'wrapItemTextChange'\n      }]);\n\n      _this._idh.setHost(_assertThisInitialized(_this));\n\n      optionHost.setHost(_assertThisInitialized(_this));\n      return _this;\n    }\n    /**\r\n     * Specifies the shortcut key that sets focus on the UI component.\r\n    \r\n     */\n\n\n    _createClass(DxDropDownButtonComponent, [{\n      key: \"accessKey\",\n      get: function get() {\n        return this._getOption('accessKey');\n      },\n      set: function set(value) {\n        this._setOption('accessKey', value);\n      }\n      /**\r\n       * Specifies whether or not the UI component changes its state when interacting with a user.\r\n      \r\n       */\n\n    }, {\n      key: \"activeStateEnabled\",\n      get: function get() {\n        return this._getOption('activeStateEnabled');\n      },\n      set: function set(value) {\n        this._setOption('activeStateEnabled', value);\n      }\n      /**\r\n       * Provides data for the drop-down menu.\r\n      \r\n       */\n\n    }, {\n      key: \"dataSource\",\n      get: function get() {\n        return this._getOption('dataSource');\n      },\n      set: function set(value) {\n        this._setOption('dataSource', value);\n      }\n      /**\r\n       * Specifies whether to wait until the drop-down menu is opened the first time to render its content.\r\n      \r\n       */\n\n    }, {\n      key: \"deferRendering\",\n      get: function get() {\n        return this._getOption('deferRendering');\n      },\n      set: function set(value) {\n        this._setOption('deferRendering', value);\n      }\n      /**\r\n       * Specifies whether the UI component responds to user interaction.\r\n      \r\n       */\n\n    }, {\n      key: \"disabled\",\n      get: function get() {\n        return this._getOption('disabled');\n      },\n      set: function set(value) {\n        this._setOption('disabled', value);\n      }\n      /**\r\n       * Specifies the data field whose values should be displayed in the drop-down menu.\r\n      \r\n       */\n\n    }, {\n      key: \"displayExpr\",\n      get: function get() {\n        return this._getOption('displayExpr');\n      },\n      set: function set(value) {\n        this._setOption('displayExpr', value);\n      }\n      /**\r\n       * Specifies custom content for the drop-down field.\r\n      \r\n       */\n\n    }, {\n      key: \"dropDownContentTemplate\",\n      get: function get() {\n        return this._getOption('dropDownContentTemplate');\n      },\n      set: function set(value) {\n        this._setOption('dropDownContentTemplate', value);\n      }\n      /**\r\n       * Configures the drop-down field.\r\n      \r\n       */\n\n    }, {\n      key: \"dropDownOptions\",\n      get: function get() {\n        return this._getOption('dropDownOptions');\n      },\n      set: function set(value) {\n        this._setOption('dropDownOptions', value);\n      }\n      /**\r\n       * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n      \r\n       */\n\n    }, {\n      key: \"elementAttr\",\n      get: function get() {\n        return this._getOption('elementAttr');\n      },\n      set: function set(value) {\n        this._setOption('elementAttr', value);\n      }\n      /**\r\n       * Specifies whether users can use keyboard to focus the UI component.\r\n      \r\n       */\n\n    }, {\n      key: \"focusStateEnabled\",\n      get: function get() {\n        return this._getOption('focusStateEnabled');\n      },\n      set: function set(value) {\n        this._setOption('focusStateEnabled', value);\n      }\n      /**\r\n       * Specifies the UI component&apos;s height.\r\n      \r\n       */\n\n    }, {\n      key: \"height\",\n      get: function get() {\n        return this._getOption('height');\n      },\n      set: function set(value) {\n        this._setOption('height', value);\n      }\n      /**\r\n       * Specifies text for a hint that appears when a user pauses on the UI component.\r\n      \r\n       */\n\n    }, {\n      key: \"hint\",\n      get: function get() {\n        return this._getOption('hint');\n      },\n      set: function set(value) {\n        this._setOption('hint', value);\n      }\n      /**\r\n       * Specifies whether the UI component changes its state when a user hovers the mouse pointer over it.\r\n      \r\n       */\n\n    }, {\n      key: \"hoverStateEnabled\",\n      get: function get() {\n        return this._getOption('hoverStateEnabled');\n      },\n      set: function set(value) {\n        this._setOption('hoverStateEnabled', value);\n      }\n      /**\r\n       * Specifies the button&apos;s icon.\r\n      \r\n       */\n\n    }, {\n      key: \"icon\",\n      get: function get() {\n        return this._getOption('icon');\n      },\n      set: function set(value) {\n        this._setOption('icon', value);\n      }\n      /**\r\n       * Provides drop-down menu items.\r\n      \r\n       */\n\n    }, {\n      key: \"items\",\n      get: function get() {\n        return this._getOption('items');\n      },\n      set: function set(value) {\n        this._setOption('items', value);\n      }\n      /**\r\n       * Specifies a custom template for drop-down menu items.\r\n      \r\n       */\n\n    }, {\n      key: \"itemTemplate\",\n      get: function get() {\n        return this._getOption('itemTemplate');\n      },\n      set: function set(value) {\n        this._setOption('itemTemplate', value);\n      }\n      /**\r\n       * Specifies which data field provides keys used to distinguish between the selected drop-down menu items.\r\n      \r\n       */\n\n    }, {\n      key: \"keyExpr\",\n      get: function get() {\n        return this._getOption('keyExpr');\n      },\n      set: function set(value) {\n        this._setOption('keyExpr', value);\n      }\n      /**\r\n       * Specifies the text or HTML markup displayed in the drop-down menu when it does not contain any items.\r\n      \r\n       */\n\n    }, {\n      key: \"noDataText\",\n      get: function get() {\n        return this._getOption('noDataText');\n      },\n      set: function set(value) {\n        this._setOption('noDataText', value);\n      }\n      /**\r\n       * Specifies whether the drop-down menu is opened.\r\n      \r\n       */\n\n    }, {\n      key: \"opened\",\n      get: function get() {\n        return this._getOption('opened');\n      },\n      set: function set(value) {\n        this._setOption('opened', value);\n      }\n      /**\r\n       * Switches the UI component to a right-to-left representation.\r\n      \r\n       */\n\n    }, {\n      key: \"rtlEnabled\",\n      get: function get() {\n        return this._getOption('rtlEnabled');\n      },\n      set: function set(value) {\n        this._setOption('rtlEnabled', value);\n      }\n      /**\r\n       * Contains the selected item&apos;s data. Available when useSelectMode is true.\r\n      \r\n       */\n\n    }, {\n      key: \"selectedItem\",\n      get: function get() {\n        return this._getOption('selectedItem');\n      },\n      set: function set(value) {\n        this._setOption('selectedItem', value);\n      }\n      /**\r\n       * Contains the selected item&apos;s key and allows you to specify the initially selected item. Applies when useSelectMode is true.\r\n      \r\n       */\n\n    }, {\n      key: \"selectedItemKey\",\n      get: function get() {\n        return this._getOption('selectedItemKey');\n      },\n      set: function set(value) {\n        this._setOption('selectedItemKey', value);\n      }\n      /**\r\n       * Specifies whether the arrow icon should be displayed.\r\n      \r\n       */\n\n    }, {\n      key: \"showArrowIcon\",\n      get: function get() {\n        return this._getOption('showArrowIcon');\n      },\n      set: function set(value) {\n        this._setOption('showArrowIcon', value);\n      }\n      /**\r\n       * Specifies whether to split the button in two: one executes an action, the other opens and closes the drop-down menu.\r\n      \r\n       */\n\n    }, {\n      key: \"splitButton\",\n      get: function get() {\n        return this._getOption('splitButton');\n      },\n      set: function set(value) {\n        this._setOption('splitButton', value);\n      }\n      /**\r\n       * Specifies how the button is styled.\r\n      \r\n       */\n\n    }, {\n      key: \"stylingMode\",\n      get: function get() {\n        return this._getOption('stylingMode');\n      },\n      set: function set(value) {\n        this._setOption('stylingMode', value);\n      }\n      /**\r\n       * Specifies the number of the element when the Tab key is used for navigating.\r\n      \r\n       */\n\n    }, {\n      key: \"tabIndex\",\n      get: function get() {\n        return this._getOption('tabIndex');\n      },\n      set: function set(value) {\n        this._setOption('tabIndex', value);\n      }\n      /**\r\n       * Specifies the button&apos;s text. Applies only if useSelectMode is false.\r\n      \r\n       */\n\n    }, {\n      key: \"text\",\n      get: function get() {\n        return this._getOption('text');\n      },\n      set: function set(value) {\n        this._setOption('text', value);\n      }\n      /**\r\n       * Specifies whether the widget uses item&apos;s text a title attribute.\r\n      \r\n       */\n\n    }, {\n      key: \"useItemTextAsTitle\",\n      get: function get() {\n        return this._getOption('useItemTextAsTitle');\n      },\n      set: function set(value) {\n        this._setOption('useItemTextAsTitle', value);\n      }\n      /**\r\n       * Specifies whether the UI component stores the selected drop-down menu item.\r\n      \r\n       */\n\n    }, {\n      key: \"useSelectMode\",\n      get: function get() {\n        return this._getOption('useSelectMode');\n      },\n      set: function set(value) {\n        this._setOption('useSelectMode', value);\n      }\n      /**\r\n       * Specifies whether the UI component is visible.\r\n      \r\n       */\n\n    }, {\n      key: \"visible\",\n      get: function get() {\n        return this._getOption('visible');\n      },\n      set: function set(value) {\n        this._setOption('visible', value);\n      }\n      /**\r\n       * Specifies the UI component&apos;s width.\r\n      \r\n       */\n\n    }, {\n      key: \"width\",\n      get: function get() {\n        return this._getOption('width');\n      },\n      set: function set(value) {\n        this._setOption('width', value);\n      }\n      /**\r\n       * Specifies whether text that exceeds the drop-down list width should be wrapped.\r\n      \r\n       */\n\n    }, {\n      key: \"wrapItemText\",\n      get: function get() {\n        return this._getOption('wrapItemText');\n      },\n      set: function set(value) {\n        this._setOption('wrapItemText', value);\n      }\n    }, {\n      key: \"itemsChildren\",\n      get: function get() {\n        return this._getOption('items');\n      },\n      set: function set(value) {\n        this.setChildren('items', value);\n      }\n    }, {\n      key: \"_createInstance\",\n      value: function _createInstance(element, options) {\n        return new DxDropDownButton(element, options);\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._destroyWidget();\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        _get(_getPrototypeOf(DxDropDownButtonComponent.prototype), \"ngOnChanges\", this).call(this, changes);\n\n        this.setupChanges('dataSource', changes);\n        this.setupChanges('items', changes);\n      }\n    }, {\n      key: \"setupChanges\",\n      value: function setupChanges(prop, changes) {\n        if (!(prop in this._optionsToUpdate)) {\n          this._idh.setup(prop, changes);\n        }\n      }\n    }, {\n      key: \"ngDoCheck\",\n      value: function ngDoCheck() {\n        this._idh.doCheck('dataSource');\n\n        this._idh.doCheck('items');\n\n        this._watcherHelper.checkWatchers();\n\n        _get(_getPrototypeOf(DxDropDownButtonComponent.prototype), \"ngDoCheck\", this).call(this);\n\n        _get(_getPrototypeOf(DxDropDownButtonComponent.prototype), \"clearChangedOptions\", this).call(this);\n      }\n    }, {\n      key: \"_setOption\",\n      value: function _setOption(name, value) {\n        var isSetup = this._idh.setupSingle(name, value);\n\n        var isChanged = this._idh.getChanges(name, value) !== null;\n\n        if (isSetup || isChanged) {\n          _get(_getPrototypeOf(DxDropDownButtonComponent.prototype), \"_setOption\", this).call(this, name, value);\n        }\n      }\n    }]);\n\n    return DxDropDownButtonComponent;\n  }(DxComponent);\n\n  DxDropDownButtonComponent.ɵfac = function DxDropDownButtonComponent_Factory(t) {\n    return new (t || DxDropDownButtonComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DxTemplateHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.WatcherHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IterableDifferHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TransferState), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n\n  DxDropDownButtonComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: DxDropDownButtonComponent,\n    selectors: [[\"dx-drop-down-button\"]],\n    contentQueries: function DxDropDownButtonComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, DxiItemComponent, 4);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.itemsChildren = _t);\n      }\n    },\n    inputs: {\n      accessKey: \"accessKey\",\n      activeStateEnabled: \"activeStateEnabled\",\n      dataSource: \"dataSource\",\n      deferRendering: \"deferRendering\",\n      disabled: \"disabled\",\n      displayExpr: \"displayExpr\",\n      dropDownContentTemplate: \"dropDownContentTemplate\",\n      dropDownOptions: \"dropDownOptions\",\n      elementAttr: \"elementAttr\",\n      focusStateEnabled: \"focusStateEnabled\",\n      height: \"height\",\n      hint: \"hint\",\n      hoverStateEnabled: \"hoverStateEnabled\",\n      icon: \"icon\",\n      items: \"items\",\n      itemTemplate: \"itemTemplate\",\n      keyExpr: \"keyExpr\",\n      noDataText: \"noDataText\",\n      opened: \"opened\",\n      rtlEnabled: \"rtlEnabled\",\n      selectedItem: \"selectedItem\",\n      selectedItemKey: \"selectedItemKey\",\n      showArrowIcon: \"showArrowIcon\",\n      splitButton: \"splitButton\",\n      stylingMode: \"stylingMode\",\n      tabIndex: \"tabIndex\",\n      text: \"text\",\n      useItemTextAsTitle: \"useItemTextAsTitle\",\n      useSelectMode: \"useSelectMode\",\n      visible: \"visible\",\n      width: \"width\",\n      wrapItemText: \"wrapItemText\"\n    },\n    outputs: {\n      onButtonClick: \"onButtonClick\",\n      onContentReady: \"onContentReady\",\n      onDisposing: \"onDisposing\",\n      onInitialized: \"onInitialized\",\n      onItemClick: \"onItemClick\",\n      onOptionChanged: \"onOptionChanged\",\n      onSelectionChanged: \"onSelectionChanged\",\n      accessKeyChange: \"accessKeyChange\",\n      activeStateEnabledChange: \"activeStateEnabledChange\",\n      dataSourceChange: \"dataSourceChange\",\n      deferRenderingChange: \"deferRenderingChange\",\n      disabledChange: \"disabledChange\",\n      displayExprChange: \"displayExprChange\",\n      dropDownContentTemplateChange: \"dropDownContentTemplateChange\",\n      dropDownOptionsChange: \"dropDownOptionsChange\",\n      elementAttrChange: \"elementAttrChange\",\n      focusStateEnabledChange: \"focusStateEnabledChange\",\n      heightChange: \"heightChange\",\n      hintChange: \"hintChange\",\n      hoverStateEnabledChange: \"hoverStateEnabledChange\",\n      iconChange: \"iconChange\",\n      itemsChange: \"itemsChange\",\n      itemTemplateChange: \"itemTemplateChange\",\n      keyExprChange: \"keyExprChange\",\n      noDataTextChange: \"noDataTextChange\",\n      openedChange: \"openedChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      selectedItemChange: \"selectedItemChange\",\n      selectedItemKeyChange: \"selectedItemKeyChange\",\n      showArrowIconChange: \"showArrowIconChange\",\n      splitButtonChange: \"splitButtonChange\",\n      stylingModeChange: \"stylingModeChange\",\n      tabIndexChange: \"tabIndexChange\",\n      textChange: \"textChange\",\n      useItemTextAsTitleChange: \"useItemTextAsTitleChange\",\n      useSelectModeChange: \"useSelectModeChange\",\n      visibleChange: \"visibleChange\",\n      widthChange: \"widthChange\",\n      wrapItemTextChange: \"wrapItemTextChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function DxDropDownButtonComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxDropDownButtonComponent.prototype, \"accessKey\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxDropDownButtonComponent.prototype, \"activeStateEnabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxDropDownButtonComponent.prototype, \"dataSource\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxDropDownButtonComponent.prototype, \"deferRendering\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxDropDownButtonComponent.prototype, \"disabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxDropDownButtonComponent.prototype, \"displayExpr\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxDropDownButtonComponent.prototype, \"dropDownContentTemplate\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxDropDownButtonComponent.prototype, \"dropDownOptions\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxDropDownButtonComponent.prototype, \"elementAttr\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxDropDownButtonComponent.prototype, \"focusStateEnabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxDropDownButtonComponent.prototype, \"height\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxDropDownButtonComponent.prototype, \"hint\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxDropDownButtonComponent.prototype, \"hoverStateEnabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxDropDownButtonComponent.prototype, \"icon\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Array), __metadata(\"design:paramtypes\", [Array])], DxDropDownButtonComponent.prototype, \"items\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxDropDownButtonComponent.prototype, \"itemTemplate\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxDropDownButtonComponent.prototype, \"keyExpr\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxDropDownButtonComponent.prototype, \"noDataText\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxDropDownButtonComponent.prototype, \"opened\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxDropDownButtonComponent.prototype, \"rtlEnabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxDropDownButtonComponent.prototype, \"selectedItem\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxDropDownButtonComponent.prototype, \"selectedItemKey\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxDropDownButtonComponent.prototype, \"showArrowIcon\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxDropDownButtonComponent.prototype, \"splitButton\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxDropDownButtonComponent.prototype, \"stylingMode\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], DxDropDownButtonComponent.prototype, \"tabIndex\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxDropDownButtonComponent.prototype, \"text\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxDropDownButtonComponent.prototype, \"useItemTextAsTitle\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxDropDownButtonComponent.prototype, \"useSelectMode\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxDropDownButtonComponent.prototype, \"visible\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxDropDownButtonComponent.prototype, \"width\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxDropDownButtonComponent.prototype, \"wrapItemText\", null);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDropDownButtonComponent.prototype, \"onButtonClick\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDropDownButtonComponent.prototype, \"onContentReady\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDropDownButtonComponent.prototype, \"onDisposing\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDropDownButtonComponent.prototype, \"onInitialized\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDropDownButtonComponent.prototype, \"onItemClick\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDropDownButtonComponent.prototype, \"onOptionChanged\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDropDownButtonComponent.prototype, \"onSelectionChanged\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDropDownButtonComponent.prototype, \"accessKeyChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDropDownButtonComponent.prototype, \"activeStateEnabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDropDownButtonComponent.prototype, \"dataSourceChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDropDownButtonComponent.prototype, \"deferRenderingChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDropDownButtonComponent.prototype, \"disabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDropDownButtonComponent.prototype, \"displayExprChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDropDownButtonComponent.prototype, \"dropDownContentTemplateChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDropDownButtonComponent.prototype, \"dropDownOptionsChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDropDownButtonComponent.prototype, \"elementAttrChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDropDownButtonComponent.prototype, \"focusStateEnabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDropDownButtonComponent.prototype, \"heightChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDropDownButtonComponent.prototype, \"hintChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDropDownButtonComponent.prototype, \"hoverStateEnabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDropDownButtonComponent.prototype, \"iconChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDropDownButtonComponent.prototype, \"itemsChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDropDownButtonComponent.prototype, \"itemTemplateChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDropDownButtonComponent.prototype, \"keyExprChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDropDownButtonComponent.prototype, \"noDataTextChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDropDownButtonComponent.prototype, \"openedChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDropDownButtonComponent.prototype, \"rtlEnabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDropDownButtonComponent.prototype, \"selectedItemChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDropDownButtonComponent.prototype, \"selectedItemKeyChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDropDownButtonComponent.prototype, \"showArrowIconChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDropDownButtonComponent.prototype, \"splitButtonChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDropDownButtonComponent.prototype, \"stylingModeChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDropDownButtonComponent.prototype, \"tabIndexChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDropDownButtonComponent.prototype, \"textChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDropDownButtonComponent.prototype, \"useItemTextAsTitleChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDropDownButtonComponent.prototype, \"useSelectModeChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDropDownButtonComponent.prototype, \"visibleChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDropDownButtonComponent.prototype, \"widthChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDropDownButtonComponent.prototype, \"wrapItemTextChange\", void 0);\n\n  __decorate([ContentChildren(DxiItemComponent), __metadata(\"design:type\", QueryList), __metadata(\"design:paramtypes\", [Object])], DxDropDownButtonComponent.prototype, \"itemsChildren\", null);\n\n  DxDropDownButtonComponent = __decorate([__param(7, Inject(PLATFORM_ID)), __metadata(\"design:paramtypes\", [ElementRef, NgZone, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, TransferState, Object])], DxDropDownButtonComponent);\n  return DxDropDownButtonComponent;\n})();\nvar DxDropDownButtonModule = /*#__PURE__*/(function () {\n  var DxDropDownButtonModule = /*#__PURE__*/_createClass(function DxDropDownButtonModule() {\n    _classCallCheck(this, DxDropDownButtonModule);\n  });\n\n  DxDropDownButtonModule.ɵfac = function DxDropDownButtonModule_Factory(t) {\n    return new (t || DxDropDownButtonModule)();\n  };\n\n  DxDropDownButtonModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: DxDropDownButtonModule\n  });\n  DxDropDownButtonModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[DxoDropDownOptionsModule, DxoAnimationModule, DxoHideModule, DxoFromModule, DxoPositionModule, DxoAtModule, DxoBoundaryOffsetModule, DxoCollisionModule, DxoMyModule, DxoOffsetModule, DxoToModule, DxoShowModule, DxiToolbarItemModule, DxiItemModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxoDropDownOptionsModule, DxoAnimationModule, DxoHideModule, DxoFromModule, DxoPositionModule, DxoAtModule, DxoBoundaryOffsetModule, DxoCollisionModule, DxoMyModule, DxoOffsetModule, DxoToModule, DxoShowModule, DxiToolbarItemModule, DxiItemModule, DxTemplateModule]\n  });\n  return DxDropDownButtonModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxDropDownButtonModule, {\n    declarations: function declarations() {\n      return [DxDropDownButtonComponent];\n    },\n    imports: function imports() {\n      return [DxoDropDownOptionsModule, DxoAnimationModule, DxoHideModule, DxoFromModule, DxoPositionModule, DxoAtModule, DxoBoundaryOffsetModule, DxoCollisionModule, DxoMyModule, DxoOffsetModule, DxoToModule, DxoShowModule, DxiToolbarItemModule, DxiItemModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule];\n    },\n    exports: function exports() {\n      return [DxDropDownButtonComponent, DxoDropDownOptionsModule, DxoAnimationModule, DxoHideModule, DxoFromModule, DxoPositionModule, DxoAtModule, DxoBoundaryOffsetModule, DxoCollisionModule, DxoMyModule, DxoOffsetModule, DxoToModule, DxoShowModule, DxiToolbarItemModule, DxiItemModule, DxTemplateModule];\n    }\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DxDropDownButtonComponent, DxDropDownButtonModule }; //# sourceMappingURL=devextreme-angular-ui-drop-down-button.js.map","map":null,"metadata":{},"sourceType":"module"}