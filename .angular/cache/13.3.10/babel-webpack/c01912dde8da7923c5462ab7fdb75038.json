{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/tree_list/ui.tree_list.rows.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport treeListCore from \"./ui.tree_list.core\";\nimport { rowsModule } from \"../grid_core/ui.grid_core.rows\";\nvar TREELIST_TEXT_CONTENT = \"dx-treelist-text-content\";\nvar TREELIST_EXPAND_ICON_CONTAINER_CLASS = \"dx-treelist-icon-container\";\nvar TREELIST_CELL_EXPANDABLE_CLASS = \"dx-treelist-cell-expandable\";\nvar TREELIST_EMPTY_SPACE = \"dx-treelist-empty-space\";\nvar TREELIST_EXPANDED_CLASS = \"dx-treelist-expanded\";\nvar TREELIST_COLLAPSED_CLASS = \"dx-treelist-collapsed\";\nexport var RowsView = rowsModule.views.rowsView.inherit(function () {\n  var createIcon = function createIcon(hasIcon, isExpanded) {\n    var $iconElement = $(\"<div>\").addClass(TREELIST_EMPTY_SPACE);\n\n    if (hasIcon) {\n      $iconElement.toggleClass(TREELIST_EXPANDED_CLASS, isExpanded).toggleClass(TREELIST_COLLAPSED_CLASS, !isExpanded).append($(\"<span>\"));\n    }\n\n    return $iconElement;\n  };\n\n  return {\n    _renderIconContainer: function _renderIconContainer($container, options) {\n      var _this = this;\n\n      var $iconContainer = $(\"<div>\").addClass(TREELIST_EXPAND_ICON_CONTAINER_CLASS).appendTo($container);\n      options.watch && options.watch(function () {\n        return [options.row.level, options.row.isExpanded, options.row.node.hasChildren];\n      }, function () {\n        $iconContainer.empty();\n\n        _this._renderIcons($iconContainer, options);\n      });\n      $container.addClass(TREELIST_CELL_EXPANDABLE_CLASS);\n      return this._renderIcons($iconContainer, options);\n    },\n    _renderIcons: function _renderIcons($iconContainer, options) {\n      var row = options.row;\n      var level = row.level;\n\n      for (var i = 0; i <= level; i++) {\n        $iconContainer.append(createIcon(i === level && row.node.hasChildren, row.isExpanded));\n      }\n\n      return $iconContainer;\n    },\n    _renderCellCommandContent: function _renderCellCommandContent(container, model) {\n      this._renderIconContainer(container, model);\n\n      return true;\n    },\n    _processTemplate: function _processTemplate(template, options) {\n      var that = this;\n      var resultTemplate;\n      var renderingTemplate = this.callBase(template);\n\n      var firstDataColumnIndex = that._columnsController.getFirstDataColumnIndex();\n\n      if (renderingTemplate && options.column.index === firstDataColumnIndex) {\n        resultTemplate = {\n          render: function render(options) {\n            var $container = options.container;\n\n            if (that._renderCellCommandContent($container, options.model)) {\n              options.container = function ($container) {\n                return $(\"<div>\").addClass(TREELIST_TEXT_CONTENT).appendTo($container);\n              }($container);\n            }\n\n            renderingTemplate.render(options);\n          }\n        };\n      } else {\n        resultTemplate = renderingTemplate;\n      }\n\n      return resultTemplate;\n    },\n    _updateCell: function _updateCell($cell, options) {\n      $cell = $cell.hasClass(TREELIST_TEXT_CONTENT) ? $cell.parent() : $cell;\n      this.callBase($cell, options);\n    },\n    _rowClick: function _rowClick(e) {\n      var dataController = this._dataController;\n      var $targetElement = $(e.event.target);\n      var isExpandIcon = this.isExpandIcon($targetElement);\n      var item = dataController && dataController.items()[e.rowIndex];\n\n      if (isExpandIcon && item) {\n        dataController.changeRowExpand(item.key);\n      }\n\n      this.callBase(e);\n    },\n    _createRow: function _createRow(row) {\n      var node = row && row.node;\n      var $rowElement = this.callBase.apply(this, arguments);\n\n      if (node) {\n        this.setAria(\"level\", row.level + 1, $rowElement);\n\n        if (node.hasChildren) {\n          this.setAria(\"expanded\", row.isExpanded, $rowElement);\n        }\n      }\n\n      return $rowElement;\n    },\n    isExpandIcon: function isExpandIcon($targetElement) {\n      return !!$targetElement.closest(\".\" + TREELIST_EXPANDED_CLASS + \", .\" + TREELIST_COLLAPSED_CLASS).length;\n    }\n  };\n}());\ntreeListCore.registerModule(\"rows\", {\n  defaultOptions: rowsModule.defaultOptions,\n  views: {\n    rowsView: RowsView\n  }\n});","map":null,"metadata":{},"sourceType":"module"}