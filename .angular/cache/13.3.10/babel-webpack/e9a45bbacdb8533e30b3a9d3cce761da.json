{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/selection/selection.strategy.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport dataQuery from \"../../data/query\";\nimport { getKeyHash, noop, equalByValue } from \"../../core/utils/common\";\nimport { isPlainObject, isObject } from \"../../core/utils/type\";\nimport Class from \"../../core/class\";\nimport { Deferred } from \"../../core/utils/deferred\";\nexport default Class.inherit({\n  ctor: function ctor(options) {\n    this.options = options;\n\n    this._setOption(\"disabledItemKeys\", []);\n\n    this._clearItemKeys();\n  },\n  _clearItemKeys: function _clearItemKeys() {\n    this._setOption(\"addedItemKeys\", []);\n\n    this._setOption(\"removedItemKeys\", []);\n\n    this._setOption(\"removedItems\", []);\n\n    this._setOption(\"addedItems\", []);\n  },\n  validate: noop,\n  _setOption: function _setOption(name, value) {\n    this.options[name] = value;\n  },\n  onSelectionChanged: function onSelectionChanged() {\n    var addedItemKeys = this.options.addedItemKeys;\n    var removedItemKeys = this.options.removedItemKeys;\n    var addedItems = this.options.addedItems;\n    var removedItems = this.options.removedItems;\n    var selectedItems = this.options.selectedItems;\n    var selectedItemKeys = this.options.selectedItemKeys;\n    var onSelectionChanged = this.options.onSelectionChanged || noop;\n\n    this._clearItemKeys();\n\n    onSelectionChanged({\n      selectedItems: selectedItems,\n      selectedItemKeys: selectedItemKeys,\n      addedItemKeys: addedItemKeys,\n      removedItemKeys: removedItemKeys,\n      addedItems: addedItems,\n      removedItems: removedItems\n    });\n  },\n  equalKeys: function equalKeys(key1, key2) {\n    if (this.options.equalByReference) {\n      if (isObject(key1) && isObject(key2)) {\n        return key1 === key2;\n      }\n    }\n\n    return equalByValue(key1, key2);\n  },\n  getSelectableItems: function getSelectableItems(items) {\n    return items.filter(function (item) {\n      return !(null !== item && void 0 !== item && item.disabled);\n    });\n  },\n  _clearSelection: function _clearSelection(keys, preserve, isDeselect, isSelectAll) {\n    keys = keys || [];\n    keys = Array.isArray(keys) ? keys : [keys];\n    this.validate();\n    return this.selectedItemKeys(keys, preserve, isDeselect, isSelectAll);\n  },\n  _removeTemplateProperty: function _removeTemplateProperty(remoteFilter) {\n    var _this = this;\n\n    if (Array.isArray(remoteFilter)) {\n      return remoteFilter.map(function (f) {\n        return _this._removeTemplateProperty(f);\n      });\n    }\n\n    if (isObject(remoteFilter)) {\n      delete remoteFilter.template;\n    }\n\n    return remoteFilter;\n  },\n  _loadFilteredData: function _loadFilteredData(remoteFilter, localFilter, select, isSelectAll) {\n    var filterLength = encodeURI(JSON.stringify(this._removeTemplateProperty(remoteFilter))).length;\n    var needLoadAllData = this.options.maxFilterLengthInRequest && filterLength > this.options.maxFilterLengthInRequest;\n    var deferred = new Deferred();\n    var loadOptions = {\n      filter: needLoadAllData ? void 0 : remoteFilter,\n      select: needLoadAllData ? this.options.dataFields() : select || this.options.dataFields()\n    };\n\n    if (remoteFilter && 0 === remoteFilter.length) {\n      deferred.resolve([]);\n    } else {\n      this.options.load(loadOptions).done(function (items) {\n        var filteredItems = isPlainObject(items) ? items.data : items;\n\n        if (localFilter && !isSelectAll) {\n          filteredItems = filteredItems.filter(localFilter);\n        } else if (needLoadAllData) {\n          filteredItems = dataQuery(filteredItems).filter(remoteFilter).toArray();\n        }\n\n        deferred.resolve(filteredItems);\n      }).fail(deferred.reject.bind(deferred));\n    }\n\n    return deferred;\n  },\n  updateSelectedItemKeyHash: function updateSelectedItemKeyHash(keys) {\n    for (var i = 0; i < keys.length; i++) {\n      var keyHash = getKeyHash(keys[i]);\n\n      if (!isObject(keyHash)) {\n        this.options.keyHashIndices[keyHash] = this.options.keyHashIndices[keyHash] || [];\n        var keyIndices = this.options.keyHashIndices[keyHash];\n        keyIndices.push(i);\n      }\n    }\n  },\n  _isAnyItemSelected: function _isAnyItemSelected(items) {\n    for (var i = 0; i < items.length; i++) {\n      if (this.options.isItemSelected(items[i])) {\n        return;\n      }\n    }\n\n    return false;\n  },\n  _getFullSelectAllState: function _getFullSelectAllState() {\n    var items = this.options.plainItems();\n    var dataFilter = this.options.filter();\n    var selectedItems = this.options.ignoreDisabledItems ? this.options.selectedItems : this.options.selectedItems.filter(function (item) {\n      return !(null !== item && void 0 !== item && item.disabled);\n    });\n\n    if (dataFilter) {\n      selectedItems = dataQuery(selectedItems).filter(dataFilter).toArray();\n    }\n\n    var selectedItemsLength = selectedItems.length;\n    var disabledItemsLength = items.length - this.getSelectableItems(items).length;\n\n    if (!selectedItemsLength) {\n      return this._isAnyItemSelected(items);\n    }\n\n    if (selectedItemsLength >= this.options.totalCount() - disabledItemsLength) {\n      return true;\n    }\n\n    return;\n  },\n  _getVisibleSelectAllState: function _getVisibleSelectAllState() {\n    var items = this.getSelectableItems(this.options.plainItems());\n    var hasSelectedItems = false;\n    var hasUnselectedItems = false;\n\n    for (var i = 0; i < items.length; i++) {\n      var item = items[i];\n      var itemData = this.options.getItemData(item);\n      var key = this.options.keyOf(itemData);\n\n      if (this.options.isSelectableItem(item)) {\n        if (this.isItemKeySelected(key)) {\n          hasSelectedItems = true;\n        } else {\n          hasUnselectedItems = true;\n        }\n      }\n    }\n\n    if (hasSelectedItems) {\n      return !hasUnselectedItems ? true : void 0;\n    } else {\n      return false;\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"module"}