{"ast":null,"code":"/**\r\n * DevExtreme (esm/core/component.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport Config from \"./config\";\nimport { extend } from \"./utils/extend\";\nimport { Options } from \"./options/index\";\nimport { convertRulesToOptions } from \"./options/utils\";\nimport Class from \"./class\";\nimport Action from \"./action\";\nimport errors from \"./errors\";\nimport Callbacks from \"./utils/callbacks\";\nimport { EventsStrategy } from \"./events_strategy\";\nimport { name as publicComponentName } from \"./utils/public_component\";\nimport { PostponedOperations } from \"./postponed_operations\";\nimport { isFunction, isPlainObject, isDefined } from \"./utils/type\";\nimport { noop } from \"./utils/common\";\nimport { getPathParts } from \"./utils/data\";\n\nvar getEventName = function getEventName(actionName) {\n  return actionName.charAt(2).toLowerCase() + actionName.substr(3);\n};\n\nvar isInnerOption = function isInnerOption(optionName) {\n  return 0 === optionName.indexOf(\"_\", 0);\n};\n\nexport var Component = Class.inherit({\n  _setDeprecatedOptions: function _setDeprecatedOptions() {\n    this._deprecatedOptions = {};\n  },\n  _getDeprecatedOptions: function _getDeprecatedOptions() {\n    return this._deprecatedOptions;\n  },\n  _getDefaultOptions: function _getDefaultOptions() {\n    return {\n      onInitialized: null,\n      onOptionChanged: null,\n      onDisposing: null,\n      defaultOptionsRules: null\n    };\n  },\n  _defaultOptionsRules: function _defaultOptionsRules() {\n    return [];\n  },\n  _setOptionsByDevice: function _setOptionsByDevice(rules) {\n    this._options.applyRules(rules);\n  },\n  _convertRulesToOptions: function _convertRulesToOptions(rules) {\n    return convertRulesToOptions(rules);\n  },\n  _isInitialOptionValue: function _isInitialOptionValue(name) {\n    return this._options.isInitial(name);\n  },\n  _setOptionsByReference: function _setOptionsByReference() {\n    this._optionsByReference = {};\n  },\n  _getOptionsByReference: function _getOptionsByReference() {\n    return this._optionsByReference;\n  },\n  ctor: function ctor() {\n    var options = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n    var _optionChangedCallbacks = options._optionChangedCallbacks,\n        _disposingCallbacks = options._disposingCallbacks;\n    this.NAME = publicComponentName(this.constructor);\n    this._eventsStrategy = EventsStrategy.create(this, options.eventsStrategy);\n    this._updateLockCount = 0;\n    this._optionChangedCallbacks = _optionChangedCallbacks || Callbacks();\n    this._disposingCallbacks = _disposingCallbacks || Callbacks();\n    this.postponedOperations = new PostponedOperations();\n\n    this._createOptions(options);\n  },\n  _createOptions: function _createOptions(options) {\n    var _this2 = this;\n\n    this.beginUpdate();\n\n    try {\n      this._setOptionsByReference();\n\n      this._setDeprecatedOptions();\n\n      this._options = new Options(this._getDefaultOptions(), this._getDefaultOptions(), this._getOptionsByReference(), this._getDeprecatedOptions());\n\n      this._options.onChanging(function (name, previousValue, value) {\n        return _this2._initialized && _this2._optionChanging(name, previousValue, value);\n      });\n\n      this._options.onDeprecated(function (option, info) {\n        return _this2._logDeprecatedOptionWarning(option, info);\n      });\n\n      this._options.onChanged(function (name, value, previousValue) {\n        return _this2._notifyOptionChanged(name, value, previousValue);\n      });\n\n      this._options.onStartChange(function () {\n        return _this2.beginUpdate();\n      });\n\n      this._options.onEndChange(function () {\n        return _this2.endUpdate();\n      });\n\n      this._options.addRules(this._defaultOptionsRules());\n\n      if (options && options.onInitializing) {\n        options.onInitializing.apply(this, [options]);\n      }\n\n      this._setOptionsByDevice(options.defaultOptionsRules);\n\n      this._initOptions(options);\n    } finally {\n      this.endUpdate();\n    }\n  },\n  _initOptions: function _initOptions(options) {\n    this.option(options);\n  },\n  _init: function _init() {\n    var _this3 = this;\n\n    this._createOptionChangedAction();\n\n    this.on(\"disposing\", function (args) {\n      _this3._disposingCallbacks.fireWith(_this3, [args]);\n    });\n  },\n  _logDeprecatedOptionWarning: function _logDeprecatedOptionWarning(option, info) {\n    var message = info.message || \"Use the '\".concat(info.alias, \"' option instead\");\n    errors.log(\"W0001\", this.NAME, option, info.since, message);\n  },\n  _logDeprecatedComponentWarning: function _logDeprecatedComponentWarning(since, alias) {\n    errors.log(\"W0000\", this.NAME, since, \"Use the '\".concat(alias, \"' widget instead\"));\n  },\n  _createOptionChangedAction: function _createOptionChangedAction() {\n    this._optionChangedAction = this._createActionByOption(\"onOptionChanged\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n  },\n  _createDisposingAction: function _createDisposingAction() {\n    this._disposingAction = this._createActionByOption(\"onDisposing\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"onDisposing\":\n      case \"onInitialized\":\n        break;\n\n      case \"onOptionChanged\":\n        this._createOptionChangedAction();\n\n    }\n  },\n  _dispose: function _dispose() {\n    this._optionChangedCallbacks.empty();\n\n    this._createDisposingAction();\n\n    this._disposingAction();\n\n    this._eventsStrategy.dispose();\n\n    this._options.dispose();\n\n    this._disposed = true;\n  },\n  _lockUpdate: function _lockUpdate() {\n    this._updateLockCount++;\n  },\n  _unlockUpdate: function _unlockUpdate() {\n    this._updateLockCount = Math.max(this._updateLockCount - 1, 0);\n  },\n  _isUpdateAllowed: function _isUpdateAllowed() {\n    return 0 === this._updateLockCount;\n  },\n  _isInitializingRequired: function _isInitializingRequired() {\n    return !this._initializing && !this._initialized;\n  },\n  isInitialized: function isInitialized() {\n    return this._initialized;\n  },\n  _commitUpdate: function _commitUpdate() {\n    this.postponedOperations.callPostponedOperations();\n    this._isInitializingRequired() && this._initializeComponent();\n  },\n  _initializeComponent: function _initializeComponent() {\n    this._initializing = true;\n\n    try {\n      this._init();\n    } finally {\n      this._initializing = false;\n\n      this._lockUpdate();\n\n      this._createActionByOption(\"onInitialized\", {\n        excludeValidators: [\"disabled\", \"readOnly\"]\n      })();\n\n      this._unlockUpdate();\n\n      this._initialized = true;\n    }\n  },\n  instance: function instance() {\n    return this;\n  },\n  beginUpdate: function beginUpdate() {\n    this._lockUpdate();\n  },\n  endUpdate: function endUpdate() {\n    this._unlockUpdate();\n\n    this._isUpdateAllowed() && this._commitUpdate();\n  },\n  _optionChanging: noop,\n  _notifyOptionChanged: function _notifyOptionChanged(option, value, previousValue) {\n    if (this._initialized) {\n      var optionNames = [option].concat(this._options.getAliasesByName(option));\n\n      for (var i = 0; i < optionNames.length; i++) {\n        var name = optionNames[i];\n        var args = {\n          name: getPathParts(name)[0],\n          fullName: name,\n          value: value,\n          previousValue: previousValue\n        };\n\n        if (!isInnerOption(name)) {\n          this._optionChangedCallbacks.fireWith(this, [extend(this._defaultActionArgs(), args)]);\n\n          this._optionChangedAction(extend({}, args));\n        }\n\n        if (!this._disposed && this._cancelOptionChange !== name) {\n          this._optionChanged(args);\n        }\n      }\n    }\n  },\n  initialOption: function initialOption(name) {\n    return this._options.initial(name);\n  },\n  _defaultActionConfig: function _defaultActionConfig() {\n    return {\n      context: this,\n      component: this\n    };\n  },\n  _defaultActionArgs: function _defaultActionArgs() {\n    return {\n      component: this\n    };\n  },\n  _createAction: function _createAction(actionSource, config) {\n    var _this4 = this;\n\n    var action;\n    return function (e) {\n      if (!isDefined(e)) {\n        e = {};\n      }\n\n      if (!isPlainObject(e)) {\n        e = {\n          actionValue: e\n        };\n      }\n\n      action = action || new Action(actionSource, extend(config, _this4._defaultActionConfig()));\n      return action.execute.call(action, extend(e, _this4._defaultActionArgs()));\n    };\n  },\n  _createActionByOption: function _createActionByOption(optionName, config) {\n    var _this = this;\n\n    var action;\n    var eventName;\n    var actionFunc;\n\n    var result = function result() {\n      if (!eventName) {\n        config = config || {};\n\n        if (\"string\" !== typeof optionName) {\n          throw errors.Error(\"E0008\");\n        }\n\n        if (0 === optionName.indexOf(\"on\")) {\n          eventName = getEventName(optionName);\n        }\n\n        actionFunc = _this.option()[optionName];\n      }\n\n      if (!action && !actionFunc && !config.beforeExecute && !config.afterExecute && !_this._eventsStrategy.hasEvent(eventName)) {\n        return;\n      }\n\n      if (!action) {\n        var beforeExecute = config.beforeExecute;\n\n        config.beforeExecute = function () {\n          for (var _len2 = arguments.length, props = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n            props[_key2] = arguments[_key2];\n          }\n\n          beforeExecute && beforeExecute.apply(_this, props);\n\n          _this._eventsStrategy.fireEvent(eventName, props[0].args);\n        };\n\n        action = _this._createAction(actionFunc, config);\n      }\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      if (Config().wrapActionsBeforeExecute) {\n        var beforeActionExecute = _this.option(\"beforeActionExecute\") || noop;\n        var wrappedAction = beforeActionExecute(_this, action, config) || action;\n        return wrappedAction.apply(_this, args);\n      }\n\n      return action.apply(_this, args);\n    };\n\n    if (Config().wrapActionsBeforeExecute) {\n      return result;\n    }\n\n    var onActionCreated = this.option(\"onActionCreated\") || noop;\n    return onActionCreated(this, result, config) || result;\n  },\n  on: function on(eventName, eventHandler) {\n    this._eventsStrategy.on(eventName, eventHandler);\n\n    return this;\n  },\n  off: function off(eventName, eventHandler) {\n    this._eventsStrategy.off(eventName, eventHandler);\n\n    return this;\n  },\n  hasActionSubscription: function hasActionSubscription(actionName) {\n    return !!this._options.silent(actionName) || this._eventsStrategy.hasEvent(getEventName(actionName));\n  },\n  isOptionDeprecated: function isOptionDeprecated(name) {\n    return this._options.isDeprecated(name);\n  },\n  _setOptionWithoutOptionChange: function _setOptionWithoutOptionChange(name, value) {\n    this._cancelOptionChange = name;\n    this.option(name, value);\n    this._cancelOptionChange = false;\n  },\n  _getOptionValue: function _getOptionValue(name, context) {\n    var value = this.option(name);\n\n    if (isFunction(value)) {\n      return value.bind(context)();\n    }\n\n    return value;\n  },\n  option: function option() {\n    var _this$_options;\n\n    return (_this$_options = this._options).option.apply(_this$_options, arguments);\n  },\n  resetOption: function resetOption(name) {\n    this.beginUpdate();\n\n    this._options.reset(name);\n\n    this.endUpdate();\n  }\n});","map":null,"metadata":{},"sourceType":"module"}