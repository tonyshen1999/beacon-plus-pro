{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/select_box.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../core/renderer\";\nimport { noop, ensureDefined } from \"../core/utils/common\";\nimport { isDefined, isPromise } from \"../core/utils/type\";\nimport { extend } from \"../core/utils/extend\";\nimport { inArray } from \"../core/utils/array\";\nimport { each } from \"../core/utils/iterator\";\nimport { Deferred, fromPromise } from \"../core/utils/deferred\";\nimport { getPublicElement } from \"../core/element\";\nimport errors from \"../core/errors\";\nimport domAdapter from \"../core/dom_adapter\";\nimport messageLocalization from \"../localization/message\";\nimport registerComponent from \"../core/component_registrator\";\nimport DropDownList from \"./drop_down_editor/ui.drop_down_list\";\nimport \"./list/modules/selection\";\nimport { normalizeKeyName } from \"../events/utils/index\";\nvar DISABLED_STATE_SELECTOR = \".dx-state-disabled\";\nvar SELECTBOX_CLASS = \"dx-selectbox\";\nvar SELECTBOX_POPUP_CLASS = \"dx-selectbox-popup\";\nvar SELECTBOX_CONTAINER_CLASS = \"dx-selectbox-container\";\nvar SELECTBOX_POPUP_WRAPPER_CLASS = \"dx-selectbox-popup-wrapper\";\nvar SelectBox = DropDownList.inherit({\n  _supportedKeys: function _supportedKeys() {\n    var that = this;\n    var parent = this.callBase();\n\n    var clearSelectBox = function clearSelectBox(e) {\n      var isEditable = this._isEditable();\n\n      if (!isEditable) {\n        if (this.option(\"showClearButton\")) {\n          e.preventDefault();\n          this.reset();\n        }\n      } else if (this._valueSubstituted()) {\n        this._preventFiltering = true;\n      }\n\n      this._savedTextRemoveEvent = e;\n      this._preventSubstitution = true;\n    };\n\n    var searchIfNeeded = function searchIfNeeded() {\n      if (that.option(\"searchEnabled\") && that._valueSubstituted()) {\n        that._searchHandler();\n      }\n    };\n\n    return extend({}, parent, {\n      tab: function tab() {\n        if (this.option(\"opened\") && \"instantly\" === this.option(\"applyValueMode\")) {\n          this._resetCaretPosition(true);\n        }\n\n        parent.tab && parent.tab.apply(this, arguments);\n\n        this._cancelSearchIfNeed();\n      },\n      upArrow: function upArrow(e) {\n        if (parent.upArrow && parent.upArrow.apply(this, arguments)) {\n          if (!this.option(\"opened\")) {\n            this._setNextValue(e);\n          }\n\n          return true;\n        }\n      },\n      downArrow: function downArrow(e) {\n        if (parent.downArrow && parent.downArrow.apply(this, arguments)) {\n          if (!this.option(\"opened\")) {\n            this._setNextValue(e);\n          }\n\n          return true;\n        }\n      },\n      leftArrow: function leftArrow() {\n        searchIfNeeded();\n        parent.leftArrow && parent.leftArrow.apply(this, arguments);\n      },\n      rightArrow: function rightArrow() {\n        searchIfNeeded();\n        parent.rightArrow && parent.rightArrow.apply(this, arguments);\n      },\n      home: function home() {\n        searchIfNeeded();\n        parent.home && parent.home.apply(this, arguments);\n      },\n      end: function end() {\n        searchIfNeeded();\n        parent.end && parent.end.apply(this, arguments);\n      },\n      escape: function escape() {\n        var result = parent.escape && parent.escape.apply(this, arguments);\n\n        this._cancelEditing();\n\n        return null !== result && void 0 !== result ? result : true;\n      },\n      enter: function enter(e) {\n        var isOpened = this.option(\"opened\");\n\n        var inputText = this._input().val().trim();\n\n        var isCustomText = inputText && this._list && !this._list.option(\"focusedElement\");\n\n        if (!inputText && isDefined(this.option(\"value\")) && this.option(\"allowClearing\")) {\n          this._saveValueChangeEvent(e);\n\n          this.option({\n            selectedItem: null,\n            value: null\n          });\n          this.close();\n        } else {\n          if (this.option(\"acceptCustomValue\")) {\n            e.preventDefault();\n\n            if (isCustomText) {\n              if (isOpened) {\n                this._toggleOpenState();\n              }\n\n              this._valueChangeEventHandler(e);\n            }\n\n            return isOpened;\n          }\n\n          if (parent.enter && parent.enter.apply(this, arguments)) {\n            return isOpened;\n          }\n        }\n      },\n      space: function space(e) {\n        var isOpened = this.option(\"opened\");\n        var isSearchEnabled = this.option(\"searchEnabled\");\n        var acceptCustomValue = this.option(\"acceptCustomValue\");\n\n        if (!isOpened || isSearchEnabled || acceptCustomValue) {\n          return;\n        }\n\n        e.preventDefault();\n\n        this._valueChangeEventHandler(e);\n\n        return true;\n      },\n      backspace: clearSelectBox,\n      del: clearSelectBox\n    });\n  },\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      placeholder: messageLocalization.format(\"Select\"),\n      fieldTemplate: null,\n      valueChangeEvent: \"change\",\n      acceptCustomValue: false,\n      onCustomItemCreating: function onCustomItemCreating(e) {\n        if (!isDefined(e.customItem)) {\n          e.customItem = e.text;\n        }\n      },\n      showSelectionControls: false,\n      allowClearing: true,\n      tooltipEnabled: false,\n      openOnFieldClick: true,\n      showDropDownButton: true,\n      displayCustomValue: false,\n      useHiddenSubmitElement: true\n    });\n  },\n  _init: function _init() {\n    this.callBase();\n\n    this._initCustomItemCreatingAction();\n  },\n  _initMarkup: function _initMarkup() {\n    this.$element().addClass(SELECTBOX_CLASS);\n\n    this._renderTooltip();\n\n    this.callBase();\n\n    this._$container.addClass(SELECTBOX_CONTAINER_CLASS);\n  },\n  _createPopup: function _createPopup() {\n    this.callBase();\n\n    this._popup.$element().addClass(SELECTBOX_POPUP_CLASS);\n\n    this._popup.$overlayContent().attr(\"tabindex\", -1);\n  },\n  _popupWrapperClass: function _popupWrapperClass() {\n    return this.callBase() + \" \" + SELECTBOX_POPUP_WRAPPER_CLASS;\n  },\n  _cancelEditing: function _cancelEditing() {\n    if (!this.option(\"searchEnabled\") && this._list) {\n      this._focusListElement(null);\n\n      this._updateField(this.option(\"selectedItem\"));\n    }\n  },\n  _renderOpenedState: function _renderOpenedState() {\n    this.callBase();\n\n    if (this.option(\"opened\")) {\n      this._scrollToSelectedItem();\n\n      this._focusSelectedElement();\n    }\n  },\n  _focusSelectedElement: function _focusSelectedElement() {\n    var searchValue = this._searchValue();\n\n    if (!searchValue) {\n      this._focusListElement(null);\n\n      return;\n    }\n\n    var $listItems = this._list._itemElements();\n\n    var index = inArray(this.option(\"selectedItem\"), this.option(\"items\"));\n    var focusedElement = index >= 0 && !this._isCustomItemSelected() ? $listItems.eq(index) : null;\n\n    this._focusListElement(focusedElement);\n  },\n  _renderFocusedElement: function _renderFocusedElement() {\n    if (!this._list) {\n      return;\n    }\n\n    var searchValue = this._searchValue();\n\n    if (!searchValue || this.option(\"acceptCustomValue\")) {\n      this._focusListElement(null);\n\n      return;\n    }\n\n    var $listItems = this._list._itemElements();\n\n    var focusedElement = $listItems.not(DISABLED_STATE_SELECTOR).eq(0);\n\n    this._focusListElement(focusedElement);\n  },\n  _focusListElement: function _focusListElement(element) {\n    this._preventInputValueRender = true;\n\n    this._list.option(\"focusedElement\", getPublicElement(element));\n\n    delete this._preventInputValueRender;\n  },\n  _scrollToSelectedItem: function _scrollToSelectedItem() {\n    this._list && this._list.scrollToItem(this._list.option(\"selectedItem\"));\n  },\n  _listContentReadyHandler: function _listContentReadyHandler() {\n    this.callBase();\n\n    var isPaginate = this._dataSource && this._dataSource.paginate();\n\n    if (isPaginate && this._needPopupRepaint()) {\n      return;\n    }\n\n    this._scrollToSelectedItem();\n  },\n  _renderValue: function _renderValue() {\n    this._renderInputValue();\n\n    this._setSubmitValue();\n\n    return new Deferred().resolve();\n  },\n  _renderInputValue: function _renderInputValue() {\n    return this.callBase().always(function () {\n      this._renderInputValueAsync();\n    }.bind(this));\n  },\n  _renderInputValueAsync: function _renderInputValueAsync() {\n    this._renderTooltip();\n\n    this._renderInputValueImpl().always(function () {\n      this._refreshSelected();\n    }.bind(this));\n  },\n  _renderInputValueImpl: function _renderInputValueImpl() {\n    this._renderField();\n\n    return new Deferred().resolve();\n  },\n  _setNextItem: function _setNextItem(step) {\n    var item = this._calcNextItem(step);\n\n    var value = this._valueGetter(item);\n\n    this._setValue(value);\n  },\n  _setNextValue: function _setNextValue(e) {\n    var dataSourceIsLoaded = this._dataSource.isLoaded() ? new Deferred().resolve() : this._dataSource.load();\n    dataSourceIsLoaded.done(function () {\n      var selectedIndex = this._getSelectedIndex();\n\n      var hasPages = this._dataSource.pageSize();\n\n      var isLastPage = this._dataSource.isLastPage();\n\n      var isLastItem = selectedIndex === this._items().length - 1;\n\n      this._saveValueChangeEvent(e);\n\n      var step = \"downArrow\" === normalizeKeyName(e) ? 1 : -1;\n\n      if (hasPages && !isLastPage && isLastItem && step > 0) {\n        if (!this._popup) {\n          this._createPopup();\n        }\n\n        if (!this._dataSource.isLoading()) {\n          this._list._loadNextPage().done(this._setNextItem.bind(this, step));\n        }\n      } else {\n        this._setNextItem(step);\n      }\n    }.bind(this));\n  },\n  _setSelectedItem: function _setSelectedItem(item) {\n    var isUnknownItem = !this._isCustomValueAllowed() && void 0 === item;\n    this.callBase(isUnknownItem ? null : item);\n\n    if (!isUnknownItem && (!this._isEditable() || this._isCustomItemSelected())) {\n      this._setListOption(\"selectedItem\", this.option(\"selectedItem\"));\n    }\n  },\n  _isCustomValueAllowed: function _isCustomValueAllowed() {\n    return this.option(\"acceptCustomValue\") || this.callBase();\n  },\n  _displayValue: function _displayValue(item) {\n    item = !isDefined(item) && this._isCustomValueAllowed() ? this.option(\"value\") : item;\n    return this.callBase(item);\n  },\n  _listConfig: function _listConfig() {\n    var result = extend(this.callBase(), {\n      pageLoadMode: \"scrollBottom\",\n      onSelectionChanged: this._getSelectionChangeHandler(),\n      selectedItem: this.option(\"selectedItem\"),\n      onFocusedItemChanged: this._listFocusedItemChangeHandler.bind(this)\n    });\n\n    if (this.option(\"showSelectionControls\")) {\n      extend(result, {\n        showSelectionControls: true,\n        selectionByClick: true\n      });\n    }\n\n    return result;\n  },\n  _listFocusedItemChangeHandler: function _listFocusedItemChangeHandler(e) {\n    if (this._preventInputValueRender) {\n      return;\n    }\n\n    var list = e.component;\n    var focusedElement = $(list.option(\"focusedElement\"));\n\n    var focusedItem = list._getItemData(focusedElement);\n\n    this._updateField(focusedItem);\n  },\n  _updateField: function _updateField(item) {\n    var fieldTemplate = this._getTemplateByOption(\"fieldTemplate\");\n\n    if (!(fieldTemplate && this.option(\"fieldTemplate\"))) {\n      var text = this._displayGetter(item);\n\n      this.option(\"text\", text);\n\n      this._renderDisplayText(text);\n\n      return;\n    }\n\n    this._renderField();\n  },\n  _getSelectionChangeHandler: function _getSelectionChangeHandler() {\n    return this.option(\"showSelectionControls\") ? this._selectionChangeHandler.bind(this) : noop;\n  },\n  _selectionChangeHandler: function _selectionChangeHandler(e) {\n    each(e.addedItems || [], function (_, addedItem) {\n      this._setValue(this._valueGetter(addedItem));\n    }.bind(this));\n  },\n  _getActualSearchValue: function _getActualSearchValue() {\n    return this._dataSource.searchValue();\n  },\n  _toggleOpenState: function _toggleOpenState(isVisible) {\n    if (this.option(\"disabled\")) {\n      return;\n    }\n\n    isVisible = arguments.length ? isVisible : !this.option(\"opened\");\n\n    if (!isVisible && !this._shouldClearFilter()) {\n      this._restoreInputText(true);\n    }\n\n    if (this._wasSearch() && isVisible) {\n      this._wasSearch(false);\n\n      var showDataImmediately = this.option(\"showDataBeforeSearch\") || this._isMinSearchLengthExceeded();\n\n      if (showDataImmediately && this._dataSource) {\n        if (this._searchTimer) {\n          return;\n        }\n\n        var searchValue = this._getActualSearchValue();\n\n        searchValue && this._wasSearch(true);\n\n        this._filterDataSource(searchValue || null);\n      } else {\n        this._setListOption(\"items\", []);\n      }\n    }\n\n    if (isVisible) {\n      this._scrollToSelectedItem();\n    }\n\n    this.callBase(isVisible);\n  },\n  _renderTooltip: function _renderTooltip() {\n    if (this.option(\"tooltipEnabled\")) {\n      this.$element().attr(\"title\", this.option(\"displayValue\"));\n    }\n  },\n  _renderDimensions: function _renderDimensions() {\n    this.callBase();\n\n    this._dimensionChanged();\n  },\n  _isValueEqualInputText: function _isValueEqualInputText() {\n    var initialSelectedItem = this.option(\"selectedItem\");\n\n    if (null === initialSelectedItem) {\n      return false;\n    }\n\n    var value = this._displayGetter(initialSelectedItem);\n\n    var displayValue = value ? String(value) : \"\";\n\n    var inputText = this._searchValue();\n\n    return displayValue === inputText;\n  },\n  _popupHidingHandler: function _popupHidingHandler() {\n    if (this._isValueEqualInputText()) {\n      this._cancelEditing();\n    }\n\n    this.callBase();\n  },\n  _popupHiddenHandler: function _popupHiddenHandler() {\n    this.callBase();\n\n    if (this._shouldCancelSearch()) {\n      this._wasSearch(false);\n\n      this._searchCanceled();\n\n      this._shouldCancelSearch(false);\n    }\n  },\n  _restoreInputText: function _restoreInputText(saveEditingValue) {\n    if (this.option(\"readOnly\")) {\n      return;\n    }\n\n    this._loadItemDeferred && this._loadItemDeferred.always(function () {\n      var initialSelectedItem = this.option(\"selectedItem\");\n\n      if (this.option(\"acceptCustomValue\")) {\n        if (!saveEditingValue) {\n          this._updateField(initialSelectedItem);\n\n          this._clearFilter();\n        }\n\n        return;\n      }\n\n      if (this.option(\"searchEnabled\")) {\n        if (!this._searchValue() && this.option(\"allowClearing\")) {\n          this._clearTextValue();\n\n          return;\n        }\n      }\n\n      if (this._isValueEqualInputText()) {\n        return;\n      }\n\n      this._renderInputValue().always(function (selectedItem) {\n        var newSelectedItem = ensureDefined(selectedItem, initialSelectedItem);\n\n        this._setSelectedItem(newSelectedItem);\n\n        this._updateField(newSelectedItem);\n\n        this._clearFilter();\n      }.bind(this));\n    }.bind(this));\n  },\n  _focusOutHandler: function _focusOutHandler(e) {\n    if (!this._preventNestedFocusEvent(e)) {\n      var isOverlayTarget = this._isOverlayNestedTarget(e.relatedTarget);\n\n      if (!isOverlayTarget) {\n        this._restoreInputText();\n\n        this._clearSearchTimer();\n      }\n\n      this._cancelSearchIfNeed(e);\n    }\n\n    e.target = this._input().get(0);\n    this.callBase(e);\n  },\n  _cancelSearchIfNeed: function _cancelSearchIfNeed(e) {\n    var _this$option = this.option(),\n        searchEnabled = _this$option.searchEnabled;\n\n    var isOverlayTarget = this._isOverlayNestedTarget(null === e || void 0 === e ? void 0 : e.relatedTarget);\n\n    var shouldCancelSearch = this._wasSearch() && searchEnabled && !isOverlayTarget;\n\n    if (shouldCancelSearch) {\n      var _this$_popup;\n\n      var isPopupVisible = null === (_this$_popup = this._popup) || void 0 === _this$_popup ? void 0 : _this$_popup._hideAnimationProcessing;\n\n      this._clearSearchTimer();\n\n      if (isPopupVisible) {\n        this._shouldCancelSearch(true);\n      } else {\n        this._wasSearch(false);\n\n        this._searchCanceled();\n      }\n    }\n  },\n  _shouldCancelSearch: function _shouldCancelSearch(value) {\n    if (!arguments.length) {\n      return this._shouldCancelSearchValue;\n    }\n\n    this._shouldCancelSearchValue = value;\n  },\n  _isOverlayNestedTarget: function _isOverlayNestedTarget(target) {\n    return !!$(target).closest(\".\".concat(SELECTBOX_POPUP_WRAPPER_CLASS)).length;\n  },\n  _clearTextValue: function _clearTextValue() {\n    if (this.option(\"selectedItem\")) {\n      if (this._savedTextRemoveEvent) {\n        this._saveValueChangeEvent(this._savedTextRemoveEvent);\n      }\n\n      this.option(\"value\", null);\n    }\n\n    delete this._savedTextRemoveEvent;\n  },\n  _shouldOpenPopup: function _shouldOpenPopup() {\n    return this._needPassDataSourceToList() && this._wasSearch();\n  },\n  _isFocused: function _isFocused() {\n    var activeElement = domAdapter.getActiveElement();\n    return this.callBase() && $(activeElement).closest(this._input()).length > 0;\n  },\n  _renderValueChangeEvent: function _renderValueChangeEvent() {\n    if (this._isEditable()) {\n      this.callBase();\n    }\n  },\n  _fieldRenderData: function _fieldRenderData() {\n    var $listFocused = this._list && this.option(\"opened\") && $(this._list.option(\"focusedElement\"));\n\n    if ($listFocused && $listFocused.length) {\n      return this._list._getItemData($listFocused);\n    }\n\n    return this.option(\"selectedItem\");\n  },\n  _isSelectedValue: function _isSelectedValue(value) {\n    return this._isValueEquals(value, this.option(\"value\"));\n  },\n  _shouldCloseOnItemClick: function _shouldCloseOnItemClick() {\n    return !(this.option(\"showSelectionControls\") && \"single\" !== this.option(\"selectionMode\"));\n  },\n  _listItemClickHandler: function _listItemClickHandler(e) {\n    var previousValue = this._getCurrentValue();\n\n    this._focusListElement($(e.itemElement));\n\n    this._saveValueChangeEvent(e.event);\n\n    this._completeSelection(this._valueGetter(e.itemData));\n\n    if (this._shouldCloseOnItemClick()) {\n      this.option(\"opened\", false);\n    }\n\n    if (this.option(\"searchEnabled\") && previousValue === this._valueGetter(e.itemData)) {\n      this._updateField(e.itemData);\n    }\n\n    if (this._shouldClearFilter()) {\n      this._cancelSearchIfNeed();\n    }\n  },\n  _shouldClearFilter: function _shouldClearFilter() {\n    return this._wasSearch();\n  },\n  _completeSelection: function _completeSelection(value) {\n    this._setValue(value);\n  },\n  _loadItem: function _loadItem(value, cache) {\n    var that = this;\n    var deferred = new Deferred();\n    this.callBase(value, cache).done(function (item) {\n      deferred.resolve(item);\n    }.bind(this)).fail(function (args) {\n      if (null !== args && void 0 !== args && args.shouldSkipCallback) {\n        return;\n      }\n\n      var selectedItem = that.option(\"selectedItem\");\n\n      if (that.option(\"acceptCustomValue\") && value === that._valueGetter(selectedItem)) {\n        deferred.resolve(selectedItem);\n      } else {\n        deferred.reject();\n      }\n    }.bind(this));\n    return deferred.promise();\n  },\n  _loadInputValue: function _loadInputValue(value, callback) {\n    this._loadItemDeferred = this._loadItem(value).always(callback);\n    return this._loadItemDeferred;\n  },\n  _isCustomItemSelected: function _isCustomItemSelected() {\n    var selectedItem = this.option(\"selectedItem\");\n\n    var searchValue = this._searchValue();\n\n    var selectedItemText = this._displayGetter(selectedItem);\n\n    return !selectedItemText || searchValue !== selectedItemText.toString();\n  },\n  _valueChangeEventHandler: function _valueChangeEventHandler(e) {\n    if (this.option(\"acceptCustomValue\") && this._isCustomItemSelected() && !this._isValueChanging) {\n      this._isValueChanging = true;\n\n      this._customItemAddedHandler(e);\n\n      this._isValueChanging = false;\n    }\n  },\n  _initCustomItemCreatingAction: function _initCustomItemCreatingAction() {\n    this._customItemCreatingAction = this._createActionByOption(\"onCustomItemCreating\");\n  },\n  _createCustomItem: function _createCustomItem(text) {\n    var params = {\n      text: text\n    };\n\n    var actionResult = this._customItemCreatingAction(params);\n\n    var item = ensureDefined(actionResult, params.customItem);\n\n    if (isDefined(actionResult)) {\n      errors.log(\"W0015\", \"onCustomItemCreating\", \"customItem\");\n    }\n\n    return item;\n  },\n  _customItemAddedHandler: function _customItemAddedHandler(e) {\n    var searchValue = this._searchValue();\n\n    var item = this._createCustomItem(searchValue);\n\n    this._saveValueChangeEvent(e);\n\n    if (void 0 === item) {\n      this._renderValue();\n\n      throw errors.Error(\"E0121\");\n    }\n\n    if (isPromise(item)) {\n      fromPromise(item).done(this._setCustomItem.bind(this)).fail(this._setCustomItem.bind(this, null));\n    } else {\n      this._setCustomItem(item);\n    }\n  },\n  _setCustomItem: function _setCustomItem(item) {\n    if (this._disposed) {\n      return;\n    }\n\n    item = item || null;\n    this.option(\"selectedItem\", item);\n\n    this._cancelSearchIfNeed();\n\n    this._setValue(this._valueGetter(item));\n\n    this._renderDisplayText(this._displayGetter(item));\n  },\n  _clearValueHandler: function _clearValueHandler(e) {\n    this._preventFiltering = true;\n    this.callBase(e);\n\n    this._searchCanceled();\n\n    return false;\n  },\n  _wasSearch: function _wasSearch(value) {\n    if (!arguments.length) {\n      return this._wasSearchValue;\n    }\n\n    this._wasSearchValue = value;\n  },\n  _searchHandler: function _searchHandler() {\n    if (this._preventFiltering) {\n      delete this._preventFiltering;\n      return;\n    }\n\n    if (this._needPassDataSourceToList()) {\n      this._wasSearch(true);\n    }\n\n    this.callBase(arguments);\n  },\n  _dataSourceFiltered: function _dataSourceFiltered(searchValue) {\n    this.callBase();\n\n    if (null !== searchValue) {\n      this._renderInputSubstitution();\n\n      this._renderFocusedElement();\n    }\n  },\n  _valueSubstituted: function _valueSubstituted() {\n    var input = this._input().get(0);\n\n    var currentSearchLength = this._searchValue().length;\n\n    var isAllSelected = 0 === input.selectionStart && input.selectionEnd === currentSearchLength;\n    var inputHasSelection = input.selectionStart !== input.selectionEnd;\n    var isLastSymbolSelected = currentSearchLength === input.selectionEnd;\n    return this._wasSearch() && inputHasSelection && !isAllSelected && isLastSymbolSelected && this._shouldSubstitutionBeRendered();\n  },\n  _shouldSubstitutionBeRendered: function _shouldSubstitutionBeRendered() {\n    return !this._preventSubstitution && this.option(\"searchEnabled\") && !this.option(\"acceptCustomValue\") && \"startswith\" === this.option(\"searchMode\");\n  },\n  _renderInputSubstitution: function _renderInputSubstitution() {\n    if (!this._shouldSubstitutionBeRendered()) {\n      delete this._preventSubstitution;\n      return;\n    }\n\n    var item = this._list && this._getPlainItems(this._list.option(\"items\"))[0];\n\n    if (!item) {\n      return;\n    }\n\n    var $input = this._input();\n\n    var valueLength = $input.val().length;\n\n    if (0 === valueLength) {\n      return;\n    }\n\n    var inputElement = $input.get(0);\n\n    var displayValue = this._displayGetter(item).toString();\n\n    inputElement.value = displayValue;\n\n    this._caret({\n      start: valueLength,\n      end: displayValue.length\n    });\n  },\n  _dispose: function _dispose() {\n    this._renderInputValueAsync = noop;\n    delete this._loadItemDeferred;\n    this.callBase();\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"onCustomItemCreating\":\n        this._initCustomItemCreatingAction();\n\n        break;\n\n      case \"tooltipEnabled\":\n        this._renderTooltip();\n\n        break;\n\n      case \"displayCustomValue\":\n      case \"acceptCustomValue\":\n      case \"showSelectionControls\":\n        this._invalidate();\n\n        break;\n\n      case \"allowClearing\":\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  }\n});\nregisterComponent(\"dxSelectBox\", SelectBox);\nexport default SelectBox;","map":null,"metadata":{},"sourceType":"module"}