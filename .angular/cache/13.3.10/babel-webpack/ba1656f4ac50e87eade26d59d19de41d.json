{"ast":null,"code":"/**\r\n * DevExtreme (esm/events/core/emitter.feedback.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport Class from \"../../core/class\";\nimport { noop, ensureDefined } from \"../../core/utils/common\";\nimport { contains } from \"../../core/utils/dom\";\nimport devices from \"../../core/devices\";\nimport { isMouseEvent } from \"../utils/index\";\nimport pointerEvents from \"../pointer\";\nimport Emitter from \"./emitter\";\nimport registerEmitter from \"./emitter_registrator\";\nvar ACTIVE_EVENT_NAME = \"dxactive\";\nvar INACTIVE_EVENT_NAME = \"dxinactive\";\nvar ACTIVE_TIMEOUT = 30;\nvar INACTIVE_TIMEOUT = 400;\nvar FeedbackEvent = Class.inherit({\n  ctor: function ctor(timeout, fire) {\n    this._timeout = timeout;\n    this._fire = fire;\n  },\n  start: function start() {\n    var that = this;\n\n    this._schedule(function () {\n      that.force();\n    });\n  },\n  _schedule: function _schedule(fn) {\n    this.stop();\n    this._timer = setTimeout(fn, this._timeout);\n  },\n  stop: function stop() {\n    clearTimeout(this._timer);\n  },\n  force: function force() {\n    if (this._fired) {\n      return;\n    }\n\n    this.stop();\n\n    this._fire();\n\n    this._fired = true;\n  },\n  fired: function fired() {\n    return this._fired;\n  }\n});\nvar activeFeedback;\nvar FeedbackEmitter = Emitter.inherit({\n  ctor: function ctor() {\n    this.callBase.apply(this, arguments);\n    this._active = new FeedbackEvent(0, noop);\n    this._inactive = new FeedbackEvent(0, noop);\n  },\n  configure: function configure(data, eventName) {\n    switch (eventName) {\n      case ACTIVE_EVENT_NAME:\n        data.activeTimeout = data.timeout;\n        break;\n\n      case INACTIVE_EVENT_NAME:\n        data.inactiveTimeout = data.timeout;\n    }\n\n    this.callBase(data);\n  },\n  start: function start(e) {\n    if (activeFeedback) {\n      var activeChildExists = contains(this.getElement().get(0), activeFeedback.getElement().get(0));\n      var childJustActivated = !activeFeedback._active.fired();\n\n      if (activeChildExists && childJustActivated) {\n        this._cancel();\n\n        return;\n      }\n\n      activeFeedback._inactive.force();\n    }\n\n    activeFeedback = this;\n\n    this._initEvents(e);\n\n    this._active.start();\n  },\n  _initEvents: function _initEvents(e) {\n    var that = this;\n\n    var eventTarget = this._getEmitterTarget(e);\n\n    var mouseEvent = isMouseEvent(e);\n    var isSimulator = devices.isSimulator();\n    var deferFeedback = isSimulator || !mouseEvent;\n    var activeTimeout = ensureDefined(this.activeTimeout, ACTIVE_TIMEOUT);\n    var inactiveTimeout = ensureDefined(this.inactiveTimeout, INACTIVE_TIMEOUT);\n    this._active = new FeedbackEvent(deferFeedback ? activeTimeout : 0, function () {\n      that._fireEvent(ACTIVE_EVENT_NAME, e, {\n        target: eventTarget\n      });\n    });\n    this._inactive = new FeedbackEvent(deferFeedback ? inactiveTimeout : 0, function () {\n      that._fireEvent(INACTIVE_EVENT_NAME, e, {\n        target: eventTarget\n      });\n\n      activeFeedback = null;\n    });\n  },\n  cancel: function cancel(e) {\n    this.end(e);\n  },\n  end: function end(e) {\n    var skipTimers = e.type !== pointerEvents.up;\n\n    if (skipTimers) {\n      this._active.stop();\n    } else {\n      this._active.force();\n    }\n\n    this._inactive.start();\n\n    if (skipTimers) {\n      this._inactive.force();\n    }\n  },\n  dispose: function dispose() {\n    this._active.stop();\n\n    this._inactive.stop();\n\n    if (activeFeedback === this) {\n      activeFeedback = null;\n    }\n\n    this.callBase();\n  },\n  lockInactive: function lockInactive() {\n    this._active.force();\n\n    this._inactive.stop();\n\n    activeFeedback = null;\n\n    this._cancel();\n\n    return this._inactive.force.bind(this._inactive);\n  }\n});\n\nFeedbackEmitter.lock = function (deferred) {\n  var lockInactive = activeFeedback ? activeFeedback.lockInactive() : noop;\n  deferred.done(lockInactive);\n};\n\nregisterEmitter({\n  emitter: FeedbackEmitter,\n  events: [ACTIVE_EVENT_NAME, INACTIVE_EVENT_NAME]\n});\nexport var lock = FeedbackEmitter.lock;\nexport { ACTIVE_EVENT_NAME as active, INACTIVE_EVENT_NAME as inactive };","map":null,"metadata":{},"sourceType":"module"}