{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Injectable, Component, ChangeDetectionStrategy, Directive, Input, Output, HostListener, HostBinding, NgModule } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { isBs3 } from 'ngx-bootstrap/utils';\nimport * as i2 from '@angular/animations';\nimport { style, animate } from '@angular/animations';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i1 from 'ngx-bootstrap/component-loader';\nimport { ComponentLoaderFactory } from 'ngx-bootstrap/component-loader';\nimport { PositioningService } from 'ngx-bootstrap/positioning';\n\nvar _c0 = function _c0(a0) {\n  return {\n    dropdown: a0\n  };\n};\n\nvar _c1 = [\"*\"];\nvar DROPDOWN_ANIMATION_TIMING = '220ms cubic-bezier(0, 0, 0.2, 1)';\nvar dropdownAnimation = [style({\n  height: 0,\n  overflow: 'hidden'\n}), animate(DROPDOWN_ANIMATION_TIMING, style({\n  height: '*',\n  overflow: 'hidden'\n}))];\nvar BsDropdownState = /*#__PURE__*/(function () {\n  var BsDropdownState = /*#__PURE__*/_createClass(function BsDropdownState() {\n    var _this = this;\n\n    _classCallCheck(this, BsDropdownState);\n\n    this.direction = 'down';\n    this.autoClose = true;\n    this.insideClick = false;\n    this.isAnimated = false;\n    this.stopOnClickPropagation = false;\n    this.isOpenChange = new EventEmitter();\n    this.isDisabledChange = new EventEmitter();\n    this.toggleClick = new EventEmitter();\n    this.counts = 0;\n    this.dropdownMenu = new Promise(function (resolve) {\n      _this.resolveDropdownMenu = resolve;\n    });\n  });\n\n  BsDropdownState.ɵfac = function BsDropdownState_Factory(t) {\n    return new (t || BsDropdownState)();\n  };\n\n  BsDropdownState.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: BsDropdownState,\n    factory: BsDropdownState.ɵfac,\n    providedIn: 'platform'\n  });\n  return BsDropdownState;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); // todo: revert ngClass to [class] when false positive angular-cli issue is fixed\n//          [class.dropdown]=\"direction === 'down'\"-->\n\n\nvar BsDropdownContainerComponent = /*#__PURE__*/(function () {\n  var BsDropdownContainerComponent = /*#__PURE__*/function () {\n    function BsDropdownContainerComponent(_state, cd, _renderer, _element, _builder) {\n      var _this2 = this;\n\n      _classCallCheck(this, BsDropdownContainerComponent);\n\n      this._state = _state;\n      this.cd = cd;\n      this._renderer = _renderer;\n      this._element = _element;\n      this.isOpen = false;\n      this._factoryDropDownAnimation = _builder.build(dropdownAnimation);\n      this._subscription = _state.isOpenChange.subscribe(function (value) {\n        _this2.isOpen = value;\n\n        var dropdown = _this2._element.nativeElement.querySelector('.dropdown-menu');\n\n        _this2._renderer.addClass(_this2._element.nativeElement.querySelector('div'), 'open');\n\n        if (dropdown && !isBs3()) {\n          _this2._renderer.addClass(dropdown, 'show');\n\n          if (dropdown.classList.contains('dropdown-menu-right') || dropdown.classList.contains('dropdown-menu-end')) {\n            _this2._renderer.setStyle(dropdown, 'left', 'auto');\n\n            _this2._renderer.setStyle(dropdown, 'right', '0');\n          }\n\n          if (_this2.direction === 'up') {\n            _this2._renderer.setStyle(dropdown, 'top', 'auto');\n\n            _this2._renderer.setStyle(dropdown, 'transform', 'translateY(-101%)');\n          }\n        }\n\n        if (dropdown && _this2._state.isAnimated) {\n          _this2._factoryDropDownAnimation.create(dropdown).play();\n        }\n\n        _this2.cd.markForCheck();\n\n        _this2.cd.detectChanges();\n      });\n    }\n\n    _createClass(BsDropdownContainerComponent, [{\n      key: \"direction\",\n      get: function get() {\n        return this._state.direction;\n      }\n      /** @internal */\n\n    }, {\n      key: \"_contains\",\n      value: function _contains(el) {\n        return this._element.nativeElement.contains(el);\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._subscription.unsubscribe();\n      }\n    }]);\n\n    return BsDropdownContainerComponent;\n  }();\n\n  BsDropdownContainerComponent.ɵfac = function BsDropdownContainerComponent_Factory(t) {\n    return new (t || BsDropdownContainerComponent)(i0.ɵɵdirectiveInject(BsDropdownState), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i2.AnimationBuilder));\n  };\n\n  BsDropdownContainerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: BsDropdownContainerComponent,\n    selectors: [[\"bs-dropdown-container\"]],\n    hostAttrs: [2, \"display\", \"block\", \"position\", \"absolute\", \"z-index\", \"1040\"],\n    ngContentSelectors: _c1,\n    decls: 2,\n    vars: 9,\n    consts: [[3, \"ngClass\"]],\n    template: function BsDropdownContainerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵprojection(1);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"dropup\", ctx.direction === \"up\")(\"show\", ctx.isOpen)(\"open\", ctx.isOpen);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(7, _c0, ctx.direction === \"down\"));\n      }\n    },\n    directives: [i3.NgClass],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return BsDropdownContainerComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Default dropdown configuration */\n\n\nvar BsDropdownConfig = /*#__PURE__*/(function () {\n  var BsDropdownConfig = /*#__PURE__*/_createClass(function BsDropdownConfig() {\n    _classCallCheck(this, BsDropdownConfig);\n\n    /** default dropdown auto closing behavior */\n    this.autoClose = true;\n    /** default dropdown auto closing behavior */\n\n    this.insideClick = false;\n    /** turn on/off animation */\n\n    this.isAnimated = false;\n    /** value true of stopOnClickPropagation allows event stopPropagation*/\n\n    this.stopOnClickPropagation = false;\n  });\n\n  BsDropdownConfig.ɵfac = function BsDropdownConfig_Factory(t) {\n    return new (t || BsDropdownConfig)();\n  };\n\n  BsDropdownConfig.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: BsDropdownConfig,\n    factory: BsDropdownConfig.ɵfac,\n    providedIn: 'root'\n  });\n  return BsDropdownConfig;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar BsDropdownDirective = /*#__PURE__*/(function () {\n  var BsDropdownDirective = /*#__PURE__*/function () {\n    function BsDropdownDirective(_elementRef, _renderer, _viewContainerRef, _cis, _state, _config, _builder) {\n      _classCallCheck(this, BsDropdownDirective);\n\n      this._elementRef = _elementRef;\n      this._renderer = _renderer;\n      this._viewContainerRef = _viewContainerRef;\n      this._cis = _cis;\n      this._state = _state;\n      this._config = _config;\n      /**\n       * This attribute indicates that the dropdown should be opened upwards\n       */\n\n      this.dropup = false; // todo: move to component loader\n\n      this._isInlineOpen = false;\n      this._isDisabled = false;\n      this._subscriptions = [];\n      this._isInited = false; // set initial dropdown state from config\n\n      this._state.autoClose = this._config.autoClose;\n      this._state.insideClick = this._config.insideClick;\n      this._state.isAnimated = this._config.isAnimated;\n      this._state.stopOnClickPropagation = this._config.stopOnClickPropagation;\n      this._factoryDropDownAnimation = _builder.build(dropdownAnimation); // create dropdown component loader\n\n      this._dropdown = this._cis.createLoader(this._elementRef, this._viewContainerRef, this._renderer).provide({\n        provide: BsDropdownState,\n        useValue: this._state\n      });\n      this.onShown = this._dropdown.onShown;\n      this.onHidden = this._dropdown.onHidden;\n      this.isOpenChange = this._state.isOpenChange;\n    }\n    /**\n     * Indicates that dropdown will be closed on item or document click,\n     * and after pressing ESC\n     */\n\n\n    _createClass(BsDropdownDirective, [{\n      key: \"autoClose\",\n      get: function get() {\n        return this._state.autoClose;\n      }\n      /**\n       * Indicates that dropdown will be animated\n       */\n      ,\n      set: function set(value) {\n        this._state.autoClose = value;\n      }\n    }, {\n      key: \"isAnimated\",\n      get: function get() {\n        return this._state.isAnimated;\n      }\n      /**\n       * This attribute indicates that the dropdown shouldn't close on inside click when autoClose is set to true\n       */\n      ,\n      set: function set(value) {\n        this._state.isAnimated = value;\n      }\n    }, {\n      key: \"insideClick\",\n      get: function get() {\n        return this._state.insideClick;\n      }\n      /**\n       * Disables dropdown toggle and hides dropdown menu if opened\n       */\n      ,\n      set: function set(value) {\n        this._state.insideClick = value;\n      }\n    }, {\n      key: \"isDisabled\",\n      get: function get() {\n        return this._isDisabled;\n      }\n      /**\n       * Returns whether or not the popover is currently being shown\n       */\n      ,\n      set: function set(value) {\n        this._isDisabled = value;\n\n        this._state.isDisabledChange.emit(value);\n\n        if (value) {\n          this.hide();\n        }\n      }\n    }, {\n      key: \"isOpen\",\n      get: function get() {\n        if (this._showInline) {\n          return this._isInlineOpen;\n        }\n\n        return this._dropdown.isShown;\n      },\n      set: function set(value) {\n        if (value) {\n          this.show();\n        } else {\n          this.hide();\n        }\n      }\n    }, {\n      key: \"isBs4\",\n      get: function get() {\n        return !isBs3();\n      }\n    }, {\n      key: \"_showInline\",\n      get: function get() {\n        return !this.container;\n      }\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        var _this3 = this;\n\n        // fix: seems there are an issue with `routerLinkActive`\n        // which result in duplicated call ngOnInit without call to ngOnDestroy\n        // read more: https://github.com/valor-software/ngx-bootstrap/issues/1885\n        if (this._isInited) {\n          return;\n        }\n\n        this._isInited = true; // attach DOM listeners\n\n        this._dropdown.listen({\n          // because of dropdown inline mode\n          outsideClick: false,\n          triggers: this.triggers,\n          show: function show() {\n            return _this3.show();\n          }\n        }); // toggle visibility on toggle element click\n\n\n        this._subscriptions.push(this._state.toggleClick.subscribe(function (value) {\n          return _this3.toggle(value);\n        })); // hide dropdown if set disabled while opened\n\n\n        this._subscriptions.push(this._state.isDisabledChange.pipe(filter(function (value) {\n          return value;\n        })).subscribe(function\n          /*value: boolean*/\n        () {\n          return _this3.hide();\n        }));\n      }\n      /**\n       * Opens an element’s popover. This is considered a “manual” triggering of\n       * the popover.\n       */\n\n    }, {\n      key: \"show\",\n      value: function show() {\n        var _this4 = this;\n\n        if (this.isOpen || this.isDisabled) {\n          return;\n        }\n\n        if (this._showInline) {\n          if (!this._inlinedMenu) {\n            this._state.dropdownMenu.then(function (dropdownMenu) {\n              _this4._dropdown.attachInline(dropdownMenu.viewContainer, dropdownMenu.templateRef);\n\n              _this4._inlinedMenu = _this4._dropdown._inlineViewRef;\n\n              _this4.addBs4Polyfills();\n\n              if (_this4._inlinedMenu) {\n                _this4._renderer.addClass(_this4._inlinedMenu.rootNodes[0].parentNode, 'open');\n              }\n\n              _this4.playAnimation();\n            }) // swallow errors\n            .catch();\n          }\n\n          this.addBs4Polyfills();\n          this._isInlineOpen = true;\n          this.onShown.emit(true);\n\n          this._state.isOpenChange.emit(true);\n\n          this.playAnimation();\n          return;\n        }\n\n        this._state.dropdownMenu.then(function (dropdownMenu) {\n          // check direction in which dropdown should be opened\n          var _dropup = _this4.dropup || typeof _this4.dropup !== 'undefined' && _this4.dropup;\n\n          _this4._state.direction = _dropup ? 'up' : 'down';\n\n          var _placement = _this4.placement || (_dropup ? 'top start' : 'bottom start'); // show dropdown\n\n\n          _this4._dropdown.attach(BsDropdownContainerComponent).to(_this4.container).position({\n            attachment: _placement\n          }).show({\n            content: dropdownMenu.templateRef,\n            placement: _placement\n          });\n\n          _this4._state.isOpenChange.emit(true);\n        }) // swallow error\n        .catch();\n      }\n      /**\n       * Closes an element’s popover. This is considered a “manual” triggering of\n       * the popover.\n       */\n\n    }, {\n      key: \"hide\",\n      value: function hide() {\n        if (!this.isOpen) {\n          return;\n        }\n\n        if (this._showInline) {\n          this.removeShowClass();\n          this.removeDropupStyles();\n          this._isInlineOpen = false;\n          this.onHidden.emit(true);\n        } else {\n          this._dropdown.hide();\n        }\n\n        this._state.isOpenChange.emit(false);\n      }\n      /**\n       * Toggles an element’s popover. This is considered a “manual” triggering of\n       * the popover. With parameter <code>true</code> allows toggling, with parameter <code>false</code>\n       * only hides opened dropdown. Parameter usage will be removed in ngx-bootstrap v3\n       */\n\n    }, {\n      key: \"toggle\",\n      value: function toggle(value) {\n        if (this.isOpen || !value) {\n          return this.hide();\n        }\n\n        return this.show();\n      }\n      /** @internal */\n\n    }, {\n      key: \"_contains\",\n      value: function _contains(event) {\n        // todo: valorkin fix typings\n        return this._elementRef.nativeElement.contains(event.target) || this._dropdown.instance && this._dropdown.instance._contains(event.target);\n      }\n    }, {\n      key: \"navigationClick\",\n      value: function navigationClick(event) {\n        var ref = this._elementRef.nativeElement.querySelector('.dropdown-menu');\n\n        if (!ref) {\n          return;\n        }\n\n        var firstActive = this._elementRef.nativeElement.ownerDocument.activeElement;\n        var allRef = ref.querySelectorAll('.dropdown-item');\n\n        switch (event.keyCode) {\n          case 38:\n            if (this._state.counts > 0) {\n              allRef[--this._state.counts].focus();\n            }\n\n            break;\n\n          case 40:\n            if (this._state.counts + 1 < allRef.length) {\n              if (firstActive.classList !== allRef[this._state.counts].classList) {\n                allRef[this._state.counts].focus();\n              } else {\n                allRef[++this._state.counts].focus();\n              }\n            }\n\n            break;\n\n          default:\n        }\n\n        event.preventDefault();\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        // clean up subscriptions and destroy dropdown\n        var _iterator = _createForOfIteratorHelper(this._subscriptions),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var sub = _step.value;\n            sub.unsubscribe();\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        this._dropdown.dispose();\n      }\n    }, {\n      key: \"addBs4Polyfills\",\n      value: function addBs4Polyfills() {\n        if (!isBs3()) {\n          this.addShowClass();\n          this.checkRightAlignment();\n          this.addDropupStyles();\n        }\n      }\n    }, {\n      key: \"playAnimation\",\n      value: function playAnimation() {\n        var _this5 = this;\n\n        if (this._state.isAnimated && this._inlinedMenu) {\n          setTimeout(function () {\n            if (_this5._inlinedMenu) {\n              _this5._factoryDropDownAnimation.create(_this5._inlinedMenu.rootNodes[0]).play();\n            }\n          });\n        }\n      }\n    }, {\n      key: \"addShowClass\",\n      value: function addShowClass() {\n        if (this._inlinedMenu && this._inlinedMenu.rootNodes[0]) {\n          this._renderer.addClass(this._inlinedMenu.rootNodes[0], 'show');\n        }\n      }\n    }, {\n      key: \"removeShowClass\",\n      value: function removeShowClass() {\n        if (this._inlinedMenu && this._inlinedMenu.rootNodes[0]) {\n          this._renderer.removeClass(this._inlinedMenu.rootNodes[0], 'show');\n        }\n      }\n    }, {\n      key: \"checkRightAlignment\",\n      value: function checkRightAlignment() {\n        if (this._inlinedMenu && this._inlinedMenu.rootNodes[0]) {\n          var isRightAligned = this._inlinedMenu.rootNodes[0].classList.contains('dropdown-menu-right') || this._inlinedMenu.rootNodes[0].classList.contains('dropdown-menu-end');\n\n          this._renderer.setStyle(this._inlinedMenu.rootNodes[0], 'left', isRightAligned ? 'auto' : '0');\n\n          this._renderer.setStyle(this._inlinedMenu.rootNodes[0], 'right', isRightAligned ? '0' : 'auto');\n        }\n      }\n    }, {\n      key: \"addDropupStyles\",\n      value: function addDropupStyles() {\n        if (this._inlinedMenu && this._inlinedMenu.rootNodes[0]) {\n          // a little hack to not break support of bootstrap 4 beta\n          this._renderer.setStyle(this._inlinedMenu.rootNodes[0], 'top', this.dropup ? 'auto' : '100%');\n\n          this._renderer.setStyle(this._inlinedMenu.rootNodes[0], 'transform', this.dropup ? 'translateY(-101%)' : 'translateY(0)');\n\n          this._renderer.setStyle(this._inlinedMenu.rootNodes[0], 'bottom', 'auto');\n        }\n      }\n    }, {\n      key: \"removeDropupStyles\",\n      value: function removeDropupStyles() {\n        if (this._inlinedMenu && this._inlinedMenu.rootNodes[0]) {\n          this._renderer.removeStyle(this._inlinedMenu.rootNodes[0], 'top');\n\n          this._renderer.removeStyle(this._inlinedMenu.rootNodes[0], 'transform');\n\n          this._renderer.removeStyle(this._inlinedMenu.rootNodes[0], 'bottom');\n        }\n      }\n    }]);\n\n    return BsDropdownDirective;\n  }();\n\n  BsDropdownDirective.ɵfac = function BsDropdownDirective_Factory(t) {\n    return new (t || BsDropdownDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i1.ComponentLoaderFactory), i0.ɵɵdirectiveInject(BsDropdownState), i0.ɵɵdirectiveInject(BsDropdownConfig), i0.ɵɵdirectiveInject(i2.AnimationBuilder));\n  };\n\n  BsDropdownDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: BsDropdownDirective,\n    selectors: [[\"\", \"bsDropdown\", \"\"], [\"\", \"dropdown\", \"\"]],\n    hostVars: 6,\n    hostBindings: function BsDropdownDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"keydown.arrowDown\", function BsDropdownDirective_keydown_arrowDown_HostBindingHandler($event) {\n          return ctx.navigationClick($event);\n        })(\"keydown.arrowUp\", function BsDropdownDirective_keydown_arrowUp_HostBindingHandler($event) {\n          return ctx.navigationClick($event);\n        });\n      }\n\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"dropup\", ctx.dropup)(\"open\", ctx.isOpen)(\"show\", ctx.isOpen && ctx.isBs4);\n      }\n    },\n    inputs: {\n      placement: \"placement\",\n      triggers: \"triggers\",\n      container: \"container\",\n      dropup: \"dropup\",\n      autoClose: \"autoClose\",\n      isAnimated: \"isAnimated\",\n      insideClick: \"insideClick\",\n      isDisabled: \"isDisabled\",\n      isOpen: \"isOpen\"\n    },\n    outputs: {\n      isOpenChange: \"isOpenChange\",\n      onShown: \"onShown\",\n      onHidden: \"onHidden\"\n    },\n    exportAs: [\"bs-dropdown\"],\n    features: [i0.ɵɵProvidersFeature([BsDropdownState])]\n  });\n  return BsDropdownDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar BsDropdownMenuDirective = /*#__PURE__*/(function () {\n  var BsDropdownMenuDirective = /*#__PURE__*/_createClass(function BsDropdownMenuDirective(_state, _viewContainer, _templateRef) {\n    _classCallCheck(this, BsDropdownMenuDirective);\n\n    _state.resolveDropdownMenu({\n      templateRef: _templateRef,\n      viewContainer: _viewContainer\n    });\n  });\n\n  BsDropdownMenuDirective.ɵfac = function BsDropdownMenuDirective_Factory(t) {\n    return new (t || BsDropdownMenuDirective)(i0.ɵɵdirectiveInject(BsDropdownState), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.TemplateRef));\n  };\n\n  BsDropdownMenuDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: BsDropdownMenuDirective,\n    selectors: [[\"\", \"bsDropdownMenu\", \"\"], [\"\", \"dropdownMenu\", \"\"]],\n    exportAs: [\"bs-dropdown-menu\"]\n  });\n  return BsDropdownMenuDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar BsDropdownToggleDirective = /*#__PURE__*/(function () {\n  var BsDropdownToggleDirective = /*#__PURE__*/function () {\n    function BsDropdownToggleDirective(_changeDetectorRef, _dropdown, _element, _renderer, _state) {\n      var _this6 = this;\n\n      _classCallCheck(this, BsDropdownToggleDirective);\n\n      this._changeDetectorRef = _changeDetectorRef;\n      this._dropdown = _dropdown;\n      this._element = _element;\n      this._renderer = _renderer;\n      this._state = _state;\n      this.isOpen = false;\n      this._subscriptions = []; // sync is open value with state\n\n      this._subscriptions.push(this._state.isOpenChange.subscribe(function (value) {\n        _this6.isOpen = value;\n\n        if (value) {\n          _this6._documentClickListener = _this6._renderer.listen('document', 'click', function (event) {\n            if (_this6._state.autoClose && event.button !== 2 && !_this6._element.nativeElement.contains(event.target) && !(_this6._state.insideClick && _this6._dropdown._contains(event))) {\n              _this6._state.toggleClick.emit(false);\n\n              _this6._changeDetectorRef.detectChanges();\n            }\n          });\n          _this6._escKeyUpListener = _this6._renderer.listen(_this6._element.nativeElement, 'keyup.esc', function () {\n            if (_this6._state.autoClose) {\n              _this6._state.toggleClick.emit(false);\n\n              _this6._changeDetectorRef.detectChanges();\n            }\n          });\n        } else {\n          _this6._documentClickListener && _this6._documentClickListener();\n          _this6._escKeyUpListener && _this6._escKeyUpListener();\n        }\n      })); // populate disabled state\n\n\n      this._subscriptions.push(this._state.isDisabledChange.subscribe(function (value) {\n        return _this6.isDisabled = value || void 0;\n      }));\n    }\n\n    _createClass(BsDropdownToggleDirective, [{\n      key: \"onClick\",\n      value: function onClick(event) {\n        if (this._state.stopOnClickPropagation) {\n          event.stopPropagation();\n        }\n\n        if (this.isDisabled) {\n          return;\n        }\n\n        this._state.toggleClick.emit(true);\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        if (this._documentClickListener) {\n          this._documentClickListener();\n        }\n\n        if (this._escKeyUpListener) {\n          this._escKeyUpListener();\n        }\n\n        var _iterator2 = _createForOfIteratorHelper(this._subscriptions),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var sub = _step2.value;\n            sub.unsubscribe();\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n    }]);\n\n    return BsDropdownToggleDirective;\n  }();\n\n  BsDropdownToggleDirective.ɵfac = function BsDropdownToggleDirective_Factory(t) {\n    return new (t || BsDropdownToggleDirective)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(BsDropdownDirective), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(BsDropdownState));\n  };\n\n  BsDropdownToggleDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: BsDropdownToggleDirective,\n    selectors: [[\"\", \"bsDropdownToggle\", \"\"], [\"\", \"dropdownToggle\", \"\"]],\n    hostVars: 3,\n    hostBindings: function BsDropdownToggleDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function BsDropdownToggleDirective_click_HostBindingHandler($event) {\n          return ctx.onClick($event);\n        });\n      }\n\n      if (rf & 2) {\n        i0.ɵɵattribute(\"aria-haspopup\", true)(\"disabled\", ctx.isDisabled)(\"aria-expanded\", ctx.isOpen);\n      }\n    },\n    exportAs: [\"bs-dropdown-toggle\"]\n  });\n  return BsDropdownToggleDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar BsDropdownModule = /*#__PURE__*/(function () {\n  var BsDropdownModule = /*#__PURE__*/function () {\n    function BsDropdownModule() {\n      _classCallCheck(this, BsDropdownModule);\n    }\n\n    _createClass(BsDropdownModule, null, [{\n      key: \"forRoot\",\n      value: function forRoot() {\n        return {\n          ngModule: BsDropdownModule,\n          providers: [ComponentLoaderFactory, PositioningService, BsDropdownState]\n        };\n      }\n    }]);\n\n    return BsDropdownModule;\n  }();\n\n  BsDropdownModule.ɵfac = function BsDropdownModule_Factory(t) {\n    return new (t || BsDropdownModule)();\n  };\n\n  BsDropdownModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: BsDropdownModule\n  });\n  BsDropdownModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return BsDropdownModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BsDropdownConfig, BsDropdownContainerComponent, BsDropdownDirective, BsDropdownMenuDirective, BsDropdownModule, BsDropdownState, BsDropdownToggleDirective }; //# sourceMappingURL=ngx-bootstrap-dropdown.mjs.map","map":null,"metadata":{},"sourceType":"module"}