{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\nvar _a, _b;\n\nimport { __decorate, __metadata } from \"tslib\";\nimport { Component } from \"@angular/core\";\nimport Chart from \"chart.js\";\nimport { PeriodService } from 'src/app/services/period.service';\nimport { DashboardService } from './dashboard.service';\n\nvar DashboardComponent = /*#__PURE__*/function () {\n  function DashboardComponent(periodService, modalService, dashboardService) {\n    var _this = this;\n\n    _classCallCheck(this, DashboardComponent);\n\n    this.periodService = periodService;\n    this.modalService = modalService;\n    this.dashboardService = dashboardService;\n    this.clicked = true;\n    this.clicked1 = false;\n    this.clicked2 = false;\n    this.period = \"N/A\";\n    this.versions = [];\n\n    this.createPeriod = function (f) {\n      console.log(f.id);\n\n      _this.dashboardService.createPeriod(f).subscribe(function (data) {// this.scenarios.push(data);\n      }, function (error) {\n        console.log(error);\n      });\n    };\n\n    this.createVersion = function () {\n      _this.dashboardService.newVersion().subscribe(function (data) {});\n\n      _this.ngOnInit();\n    };\n\n    this.pushVersionLog = function () {\n      _this.versions = [];\n\n      _this.dashboardService.getVersionLog().subscribe(function (data) {\n        for (var v in data[\"scenarios\"]) {\n          _this.versions.push(data[\"scenarios\"][v]); // console.log(v)\n          // this.versions.push(v)\n\n        }\n      });\n    };\n  }\n\n  _createClass(DashboardComponent, [{\n    key: \"onSubmit\",\n    value: function onSubmit(f) {\n      this.createPeriod(f.value);\n      this.pullPeriod();\n      this.ngOnInit(); // console.log(\"nice\")\n    }\n  }, {\n    key: \"open\",\n    value: function open(content) {\n      var _this2 = this;\n\n      this.modalService.open(content, {\n        ariaLabelledBy: 'modal-basic-title'\n      }).result.then(function (result) {\n        _this2.closeResult = \"Closed with: \".concat(result);\n      }, function (reason) {\n        _this2.closeResult = \"Dismissed \".concat(_this2.getDismissReason(reason));\n      });\n    } // private getDismissReason(reason: any): string {\n    // \tif (reason === ModalDismissReasons.ESC) {\n    // \t\treturn 'by pressing ESC';\n    // \t} else if (reason === ModalDismissReasons.BACKDROP_CLICK) {\n    // \t\treturn 'by clicking on a backdrop';\n    // \t} else {\n    // \t\treturn `with: ${reason}`;\n    // \t}\n    // }\n\n  }, {\n    key: \"pullPeriod\",\n    value: function pullPeriod() {\n      var _this3 = this;\n\n      this.periodService.pullPeriod().subscribe(function (data) {\n        var period_list = []; // console.log(data)\n\n        var periods = Array.from(Object.keys(data)); // UPDATE THIS TO DISPLAY DATE RANGE AND MOVE TO SERVICE\n\n        for (var _i = 0, _periods = periods; _i < _periods.length; _i++) {\n          var p = _periods[_i];\n\n          for (var name in data[p]) {\n            // console.log(data[p][name])\n            period_list.push(data[p][name]);\n          }\n\n          break;\n        } // console.log(\"hi hi \")\n\n\n        var period_string = period_list[0][\"period\"];\n\n        if (period_list.length > 1) {\n          period_string = period_list[0][\"period\"] + \" - \" + period_list[period_list.length - 1][\"period\"];\n        } // console.log(period_string)\n\n\n        _this3.period = period_string;\n      });\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var gradientChartOptionsConfigurationWithTooltipBlue = {\n        maintainAspectRatio: false,\n        legend: {\n          display: false\n        },\n        tooltips: {\n          backgroundColor: \"#f5f5f5\",\n          titleFontColor: \"#333\",\n          bodyFontColor: \"#666\",\n          bodySpacing: 4,\n          xPadding: 12,\n          mode: \"nearest\",\n          intersect: 0,\n          position: \"nearest\"\n        },\n        responsive: true,\n        scales: {\n          yAxes: [{\n            barPercentage: 1.6,\n            gridLines: {\n              drawBorder: false,\n              color: \"rgba(29,140,248,0.0)\",\n              zeroLineColor: \"transparent\"\n            },\n            ticks: {\n              suggestedMin: 60,\n              suggestedMax: 125,\n              padding: 20,\n              fontColor: \"#2380f7\"\n            }\n          }],\n          xAxes: [{\n            barPercentage: 1.6,\n            gridLines: {\n              drawBorder: false,\n              color: \"rgba(29,140,248,0.1)\",\n              zeroLineColor: \"transparent\"\n            },\n            ticks: {\n              padding: 20,\n              fontColor: \"#2380f7\"\n            }\n          }]\n        }\n      };\n      var gradientChartOptionsConfigurationWithTooltipPurple = {\n        maintainAspectRatio: false,\n        legend: {\n          display: false\n        },\n        tooltips: {\n          backgroundColor: \"#f5f5f5\",\n          titleFontColor: \"#333\",\n          bodyFontColor: \"#666\",\n          bodySpacing: 4,\n          xPadding: 12,\n          mode: \"nearest\",\n          intersect: 0,\n          position: \"nearest\"\n        },\n        responsive: true,\n        scales: {\n          yAxes: [{\n            barPercentage: 1.6,\n            gridLines: {\n              drawBorder: false,\n              color: \"rgba(29,140,248,0.0)\",\n              zeroLineColor: \"transparent\"\n            },\n            ticks: {\n              suggestedMin: 60,\n              suggestedMax: 125,\n              padding: 20,\n              fontColor: \"#9a9a9a\"\n            }\n          }],\n          xAxes: [{\n            barPercentage: 1.6,\n            gridLines: {\n              drawBorder: false,\n              color: \"rgba(225,78,202,0.1)\",\n              zeroLineColor: \"transparent\"\n            },\n            ticks: {\n              padding: 20,\n              fontColor: \"#9a9a9a\"\n            }\n          }]\n        }\n      };\n      var gradientChartOptionsConfigurationWithTooltipRed = {\n        maintainAspectRatio: false,\n        legend: {\n          display: false\n        },\n        tooltips: {\n          backgroundColor: \"#f5f5f5\",\n          titleFontColor: \"#333\",\n          bodyFontColor: \"#666\",\n          bodySpacing: 4,\n          xPadding: 12,\n          mode: \"nearest\",\n          intersect: 0,\n          position: \"nearest\"\n        },\n        responsive: true,\n        scales: {\n          yAxes: [{\n            barPercentage: 1.6,\n            gridLines: {\n              drawBorder: false,\n              color: \"rgba(29,140,248,0.0)\",\n              zeroLineColor: \"transparent\"\n            },\n            ticks: {\n              suggestedMin: 60,\n              suggestedMax: 125,\n              padding: 20,\n              fontColor: \"#9a9a9a\"\n            }\n          }],\n          xAxes: [{\n            barPercentage: 1.6,\n            gridLines: {\n              drawBorder: false,\n              color: \"rgba(233,32,16,0.1)\",\n              zeroLineColor: \"transparent\"\n            },\n            ticks: {\n              padding: 20,\n              fontColor: \"#9a9a9a\"\n            }\n          }]\n        }\n      };\n      var gradientChartOptionsConfigurationWithTooltipOrange = {\n        maintainAspectRatio: false,\n        legend: {\n          display: false\n        },\n        tooltips: {\n          backgroundColor: \"#f5f5f5\",\n          titleFontColor: \"#333\",\n          bodyFontColor: \"#666\",\n          bodySpacing: 4,\n          xPadding: 12,\n          mode: \"nearest\",\n          intersect: 0,\n          position: \"nearest\"\n        },\n        responsive: true,\n        scales: {\n          yAxes: [{\n            barPercentage: 1.6,\n            gridLines: {\n              drawBorder: false,\n              color: \"rgba(29,140,248,0.0)\",\n              zeroLineColor: \"transparent\"\n            },\n            ticks: {\n              suggestedMin: 50,\n              suggestedMax: 110,\n              padding: 20,\n              fontColor: \"#ff8a76\"\n            }\n          }],\n          xAxes: [{\n            barPercentage: 1.6,\n            gridLines: {\n              drawBorder: false,\n              color: \"rgba(220,53,69,0.1)\",\n              zeroLineColor: \"transparent\"\n            },\n            ticks: {\n              padding: 20,\n              fontColor: \"#ff8a76\"\n            }\n          }]\n        }\n      };\n      var gradientChartOptionsConfigurationWithTooltipGreen = {\n        maintainAspectRatio: false,\n        legend: {\n          display: false\n        },\n        tooltips: {\n          backgroundColor: \"#f5f5f5\",\n          titleFontColor: \"#333\",\n          bodyFontColor: \"#666\",\n          bodySpacing: 4,\n          xPadding: 12,\n          mode: \"nearest\",\n          intersect: 0,\n          position: \"nearest\"\n        },\n        responsive: true,\n        scales: {\n          yAxes: [{\n            barPercentage: 1.6,\n            gridLines: {\n              drawBorder: false,\n              color: \"rgba(29,140,248,0.0)\",\n              zeroLineColor: \"transparent\"\n            },\n            ticks: {\n              suggestedMin: 50,\n              suggestedMax: 125,\n              padding: 20,\n              fontColor: \"#9e9e9e\"\n            }\n          }],\n          xAxes: [{\n            barPercentage: 1.6,\n            gridLines: {\n              drawBorder: false,\n              color: \"rgba(0,242,195,0.1)\",\n              zeroLineColor: \"transparent\"\n            },\n            ticks: {\n              padding: 20,\n              fontColor: \"#9e9e9e\"\n            }\n          }]\n        }\n      };\n      var gradientBarChartConfiguration = {\n        maintainAspectRatio: false,\n        legend: {\n          display: false\n        },\n        tooltips: {\n          backgroundColor: \"#f5f5f5\",\n          titleFontColor: \"#333\",\n          bodyFontColor: \"#666\",\n          bodySpacing: 4,\n          xPadding: 12,\n          mode: \"nearest\",\n          intersect: 0,\n          position: \"nearest\"\n        },\n        responsive: true,\n        scales: {\n          yAxes: [{\n            gridLines: {\n              drawBorder: false,\n              color: \"rgba(29,140,248,0.1)\",\n              zeroLineColor: \"transparent\"\n            },\n            ticks: {\n              suggestedMin: 60,\n              suggestedMax: 120,\n              padding: 20,\n              fontColor: \"#9e9e9e\"\n            }\n          }],\n          xAxes: [{\n            gridLines: {\n              drawBorder: false,\n              color: \"rgba(29,140,248,0.1)\",\n              zeroLineColor: \"transparent\"\n            },\n            ticks: {\n              padding: 20,\n              fontColor: \"#9e9e9e\"\n            }\n          }]\n        }\n      };\n      this.canvas = document.getElementById(\"chartLineRed\");\n      this.ctx = this.canvas.getContext(\"2d\");\n      var gradientStroke = this.ctx.createLinearGradient(0, 230, 0, 50);\n      gradientStroke.addColorStop(1, \"rgba(233,32,16,0.2)\");\n      gradientStroke.addColorStop(0.4, \"rgba(233,32,16,0.0)\");\n      gradientStroke.addColorStop(0, \"rgba(233,32,16,0)\"); //red colors\n\n      var data = {\n        labels: [\"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"],\n        datasets: [{\n          label: \"Data\",\n          fill: true,\n          backgroundColor: gradientStroke,\n          borderColor: \"#ec250d\",\n          borderWidth: 2,\n          borderDash: [],\n          borderDashOffset: 0.0,\n          pointBackgroundColor: \"#ec250d\",\n          pointBorderColor: \"rgba(255,255,255,0)\",\n          pointHoverBackgroundColor: \"#ec250d\",\n          pointBorderWidth: 20,\n          pointHoverRadius: 4,\n          pointHoverBorderWidth: 15,\n          pointRadius: 4,\n          data: [80, 100, 70, 80, 120, 80]\n        }]\n      };\n      var myChart = new Chart(this.ctx, {\n        type: \"line\",\n        data: data,\n        options: gradientChartOptionsConfigurationWithTooltipRed\n      });\n      this.canvas = document.getElementById(\"chartLineGreen\");\n      this.ctx = this.canvas.getContext(\"2d\");\n      var gradientStroke = this.ctx.createLinearGradient(0, 230, 0, 50);\n      gradientStroke.addColorStop(1, \"rgba(66,134,121,0.15)\");\n      gradientStroke.addColorStop(0.4, \"rgba(66,134,121,0.0)\"); //green colors\n\n      gradientStroke.addColorStop(0, \"rgba(66,134,121,0)\"); //green colors\n\n      var data = {\n        labels: [\"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\"],\n        datasets: [{\n          label: \"My First dataset\",\n          fill: true,\n          backgroundColor: gradientStroke,\n          borderColor: \"#00d6b4\",\n          borderWidth: 2,\n          borderDash: [],\n          borderDashOffset: 0.0,\n          pointBackgroundColor: \"#00d6b4\",\n          pointBorderColor: \"rgba(255,255,255,0)\",\n          pointHoverBackgroundColor: \"#00d6b4\",\n          pointBorderWidth: 20,\n          pointHoverRadius: 4,\n          pointHoverBorderWidth: 15,\n          pointRadius: 4,\n          data: [90, 27, 60, 12, 80]\n        }]\n      };\n      var myChart = new Chart(this.ctx, {\n        type: \"line\",\n        data: data,\n        options: gradientChartOptionsConfigurationWithTooltipGreen\n      });\n      var chart_labels = [\"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\", \"JUN\", \"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"];\n      this.datasets = [[100, 70, 90, 70, 85, 60, 75, 60, 90, 80, 110, 100], [80, 120, 105, 110, 95, 105, 90, 100, 80, 95, 70, 120], [60, 80, 65, 130, 80, 105, 90, 130, 70, 115, 60, 130]];\n      this.data = this.datasets[0];\n      this.canvas = document.getElementById(\"chartBig1\");\n      this.ctx = this.canvas.getContext(\"2d\");\n      var gradientStroke = this.ctx.createLinearGradient(0, 230, 0, 50);\n      gradientStroke.addColorStop(1, \"rgba(233,32,16,0.2)\");\n      gradientStroke.addColorStop(0.4, \"rgba(233,32,16,0.0)\");\n      gradientStroke.addColorStop(0, \"rgba(233,32,16,0)\"); //red colors\n\n      var config = {\n        type: \"line\",\n        data: {\n          labels: chart_labels,\n          datasets: [{\n            label: \"My First dataset\",\n            fill: true,\n            backgroundColor: gradientStroke,\n            borderColor: \"#ec250d\",\n            borderWidth: 2,\n            borderDash: [],\n            borderDashOffset: 0.0,\n            pointBackgroundColor: \"#ec250d\",\n            pointBorderColor: \"rgba(255,255,255,0)\",\n            pointHoverBackgroundColor: \"#ec250d\",\n            pointBorderWidth: 20,\n            pointHoverRadius: 4,\n            pointHoverBorderWidth: 15,\n            pointRadius: 4,\n            data: this.data\n          }]\n        },\n        options: gradientChartOptionsConfigurationWithTooltipRed\n      };\n      this.myChartData = new Chart(this.ctx, config);\n      this.canvas = document.getElementById(\"CountryChart\");\n      this.ctx = this.canvas.getContext(\"2d\");\n      var gradientStroke = this.ctx.createLinearGradient(0, 230, 0, 50);\n      gradientStroke.addColorStop(1, \"rgba(29,140,248,0.2)\");\n      gradientStroke.addColorStop(0.4, \"rgba(29,140,248,0.0)\");\n      gradientStroke.addColorStop(0, \"rgba(29,140,248,0)\"); //blue colors\n\n      var myChart = new Chart(this.ctx, {\n        type: \"bar\",\n        responsive: true,\n        legend: {\n          display: false\n        },\n        data: {\n          labels: [\"USA\", \"GER\", \"AUS\", \"UK\", \"RO\", \"BR\"],\n          datasets: [{\n            label: \"Countries\",\n            fill: true,\n            backgroundColor: gradientStroke,\n            hoverBackgroundColor: gradientStroke,\n            borderColor: \"#1f8ef1\",\n            borderWidth: 2,\n            borderDash: [],\n            borderDashOffset: 0.0,\n            data: [53, 20, 10, 80, 100, 45]\n          }]\n        },\n        options: gradientBarChartConfiguration\n      });\n    }\n  }, {\n    key: \"updateOptions\",\n    value: function updateOptions() {\n      this.myChartData.data.datasets[0].data = this.data;\n      this.myChartData.update();\n    }\n  }]);\n\n  return DashboardComponent;\n}();\n\nDashboardComponent = __decorate([Component({\n  selector: \"app-dashboard\",\n  templateUrl: \"dashboard.component.html\"\n}), __metadata(\"design:paramtypes\", [typeof (_a = typeof PeriodService !== \"undefined\" && PeriodService) === \"function\" ? _a : Object, typeof (_b = typeof NgbModal !== \"undefined\" && NgbModal) === \"function\" ? _b : Object, DashboardService])], DashboardComponent);\nexport { DashboardComponent };","map":null,"metadata":{},"sourceType":"module"}