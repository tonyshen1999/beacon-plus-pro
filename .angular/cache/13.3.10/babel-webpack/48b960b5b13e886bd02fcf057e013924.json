{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/shared/ui.editor_factory_mixin.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { isDefined, isObject, isFunction } from \"../../core/utils/type\";\nimport variableWrapper from \"../../core/utils/variable_wrapper\";\nimport { compileGetter } from \"../../core/utils/data\";\nimport browser from \"../../core/utils/browser\";\nimport { extend } from \"../../core/utils/extend\";\nimport devices from \"../../core/devices\";\nimport { getPublicElement } from \"../../core/element\";\nimport { normalizeDataSourceOptions } from \"../../data/data_source/utils\";\nimport { normalizeKeyName } from \"../../events/utils/index\";\nvar isWrapped = variableWrapper.isWrapped;\nimport \"../text_box\";\nimport \"../number_box\";\nimport \"../check_box\";\nimport \"../select_box\";\nimport \"../date_box\";\nvar CHECKBOX_SIZE_CLASS = \"checkbox-size\";\nvar EDITOR_INLINE_BLOCK = \"dx-editor-inline-block\";\n\nvar EditorFactoryMixin = function () {\n  var getResultConfig = function getResultConfig(config, options) {\n    return extend(config, {\n      readOnly: options.readOnly,\n      placeholder: options.placeholder,\n      inputAttr: {\n        id: options.id\n      },\n      tabIndex: options.tabIndex\n    }, options.editorOptions);\n  };\n\n  var checkEnterBug = function checkEnterBug() {\n    return browser.mozilla || devices.real().ios;\n  };\n\n  var getTextEditorConfig = function getTextEditorConfig(options) {\n    var data = {};\n    var isEnterBug = checkEnterBug();\n    var sharedData = options.sharedData || data;\n    return getResultConfig({\n      placeholder: options.placeholder,\n      width: options.width,\n      value: options.value,\n      onValueChanged: function onValueChanged(e) {\n        var needDelayedUpdate = \"filterRow\" === options.parentType || \"searchPanel\" === options.parentType;\n        var isInputOrKeyUpEvent = e.event && (\"input\" === e.event.type || \"keyup\" === e.event.type);\n\n        var updateValue = function updateValue(e, notFireEvent) {\n          options && options.setValue(e.value, notFireEvent);\n        };\n\n        clearTimeout(data.valueChangeTimeout);\n\n        if (isInputOrKeyUpEvent && needDelayedUpdate) {\n          sharedData.valueChangeTimeout = data.valueChangeTimeout = setTimeout(function () {\n            updateValue(e, data.valueChangeTimeout !== sharedData.valueChangeTimeout);\n          }, isDefined(options.updateValueTimeout) ? options.updateValueTimeout : 0);\n        } else {\n          updateValue(e);\n        }\n      },\n      onKeyDown: function onKeyDown(e) {\n        if (isEnterBug && \"enter\" === normalizeKeyName(e.event)) {\n          eventsEngine.trigger($(e.component._input()), \"change\");\n        }\n      },\n      valueChangeEvent: \"change\" + (\"filterRow\" === options.parentType ? \" keyup input\" : \"\")\n    }, options);\n  };\n\n  var prepareBooleanEditor = function prepareBooleanEditor(options) {\n    if (\"filterRow\" === options.parentType || \"filterBuilder\" === options.parentType) {\n      prepareSelectBox(extend(options, {\n        lookup: {\n          displayExpr: function displayExpr(data) {\n            if (true === data) {\n              return options.trueText || \"true\";\n            } else if (false === data) {\n              return options.falseText || \"false\";\n            }\n          },\n          dataSource: [true, false]\n        }\n      }));\n    } else {\n      !function (options) {\n        options.editorName = \"dxCheckBox\";\n        options.editorOptions = getResultConfig({\n          elementAttr: {\n            id: options.id\n          },\n          value: isDefined(options.value) ? options.value : void 0,\n          hoverStateEnabled: !options.readOnly,\n          focusStateEnabled: !options.readOnly,\n          activeStateEnabled: false,\n          onValueChanged: function onValueChanged(e) {\n            options.setValue && options.setValue(e.value, e);\n          }\n        }, options);\n      }(options);\n    }\n  };\n\n  function prepareSelectBox(options) {\n    var lookup = options.lookup;\n    var displayGetter;\n    var dataSource;\n    var postProcess;\n    var isFilterRow = \"filterRow\" === options.parentType;\n\n    if (lookup) {\n      displayGetter = compileGetter(lookup.displayExpr);\n      dataSource = lookup.dataSource;\n\n      if (isFunction(dataSource) && !isWrapped(dataSource)) {\n        dataSource = dataSource(options.row || {});\n        !function (options) {\n          if (options.row && options.row.watch && \"dataRow\" === options.parentType) {\n            var editorOptions = options.editorOptions || {};\n            options.editorOptions = editorOptions;\n            var selectBox;\n            var onInitialized = editorOptions.onInitialized;\n\n            editorOptions.onInitialized = function (e) {\n              onInitialized && onInitialized.apply(this, arguments);\n              selectBox = e.component;\n              selectBox.on(\"disposing\", stopWatch);\n            };\n\n            var dataSource;\n            var stopWatch = options.row.watch(function () {\n              dataSource = options.lookup.dataSource(options.row);\n              return dataSource && dataSource.filter;\n            }, function () {\n              selectBox.option(\"dataSource\", dataSource);\n            }, function (row) {\n              options.row = row;\n            });\n          }\n        }(options);\n      }\n\n      if (isObject(dataSource) || Array.isArray(dataSource)) {\n        dataSource = normalizeDataSourceOptions(dataSource);\n\n        if (isFilterRow) {\n          postProcess = dataSource.postProcess;\n\n          dataSource.postProcess = function (items) {\n            if (0 === this.pageIndex()) {\n              items = items.slice(0);\n              items.unshift(null);\n            }\n\n            if (postProcess) {\n              return postProcess.call(this, items);\n            }\n\n            return items;\n          };\n        }\n      }\n\n      var allowClearing = Boolean(lookup.allowClearing && !isFilterRow);\n      options.editorName = \"dxSelectBox\";\n      options.editorOptions = getResultConfig({\n        searchEnabled: true,\n        value: options.value,\n        valueExpr: options.lookup.valueExpr,\n        searchExpr: options.lookup.searchExpr || options.lookup.displayExpr,\n        allowClearing: allowClearing,\n        showClearButton: allowClearing,\n        displayExpr: function displayExpr(data) {\n          if (null === data) {\n            return options.showAllText;\n          }\n\n          return displayGetter(data);\n        },\n        dataSource: dataSource,\n        onValueChanged: function onValueChanged(e) {\n          var params = [e.value];\n          !isFilterRow && params.push(e.component.option(\"text\"));\n          options.setValue.apply(this, params);\n        }\n      }, options);\n    }\n  }\n\n  return {\n    createEditor: function createEditor($container, options) {\n      options.cancel = false;\n      options.editorElement = getPublicElement($container);\n\n      if (!isDefined(options.tabIndex)) {\n        options.tabIndex = this.option(\"tabIndex\");\n      }\n\n      if (options.lookup) {\n        prepareSelectBox(options);\n      } else {\n        switch (options.dataType) {\n          case \"date\":\n          case \"datetime\":\n            !function (options) {\n              options.editorName = \"dxDateBox\";\n              options.editorOptions = getResultConfig({\n                value: options.value,\n                onValueChanged: function onValueChanged(args) {\n                  options.setValue(args.value);\n                },\n                onKeyDown: function onKeyDown(e) {\n                  if (checkEnterBug() && \"enter\" === normalizeKeyName(e.event)) {\n                    e.component.blur();\n                    e.component.focus();\n                  }\n                },\n                displayFormat: options.format,\n                type: options.dataType,\n                dateSerializationFormat: null,\n                width: \"filterBuilder\" === options.parentType ? void 0 : \"auto\"\n              }, options);\n            }(options);\n            break;\n\n          case \"boolean\":\n            prepareBooleanEditor(options);\n            break;\n\n          case \"number\":\n            !function (options) {\n              var config = getTextEditorConfig(options);\n              config.value = isDefined(options.value) ? options.value : null;\n              options.editorName = \"dxNumberBox\";\n              options.editorOptions = config;\n            }(options);\n            break;\n\n          default:\n            !function (options) {\n              var config = getTextEditorConfig(options);\n              var isSearching = \"searchPanel\" === options.parentType;\n\n              if (options.editorType && \"dxTextBox\" !== options.editorType) {\n                config.value = options.value;\n              } else {\n                config.value = (value = options.value, isDefined(value) ? value.toString() : \"\");\n              }\n\n              var value;\n              config.valueChangeEvent += isSearching ? \" keyup input search\" : \"\";\n              config.mode = config.mode || (isSearching ? \"search\" : \"text\");\n              options.editorName = \"dxTextBox\";\n              options.editorOptions = config;\n            }(options);\n        }\n      }\n\n      if (\"dataRow\" === options.parentType && options.editorType) {\n        options.editorName = options.editorType;\n      }\n\n      this.executeAction(\"onEditorPreparing\", options);\n\n      if (options.cancel) {\n        return;\n      }\n\n      if (\"dataRow\" === options.parentType && !options.isOnForm && !isDefined(options.editorOptions.showValidationMark)) {\n        options.editorOptions.showValidationMark = false;\n      }\n\n      !function (that, options) {\n        var $editorElement = $(options.editorElement);\n\n        if (options.editorName && options.editorOptions && $editorElement[options.editorName]) {\n          if (\"dxCheckBox\" === options.editorName || \"dxSwitch\" === options.editorName) {\n            if (!options.isOnForm) {\n              $editorElement.addClass(that.addWidgetPrefix(CHECKBOX_SIZE_CLASS));\n              $editorElement.parent().addClass(EDITOR_INLINE_BLOCK);\n            }\n          }\n\n          that._createComponent($editorElement, options.editorName, options.editorOptions);\n\n          if (\"dxDateBox\" === options.editorName) {\n            var dateBox = $editorElement.dxDateBox(\"instance\");\n\n            var defaultEnterKeyHandler = dateBox._supportedKeys().enter;\n\n            dateBox.registerKeyHandler(\"enter\", function (e) {\n              if (dateBox.option(\"opened\")) {\n                defaultEnterKeyHandler(e);\n              }\n\n              return true;\n            });\n          }\n\n          if (\"dxTextArea\" === options.editorName) {\n            $editorElement.dxTextArea(\"instance\").registerKeyHandler(\"enter\", function (event) {\n              if (\"enter\" === normalizeKeyName(event) && !event.ctrlKey && !event.shiftKey) {\n                event.stopPropagation();\n              }\n            });\n          }\n        }\n      }(this, options);\n      this.executeAction(\"onEditorPrepared\", options);\n    }\n  };\n}();\n\nexport default EditorFactoryMixin;","map":null,"metadata":{},"sourceType":"module"}