{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/vector_map/legend.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { extend } from \"../../core/utils/extend\";\nimport { each } from \"../../core/utils/iterator\";\nimport { clone } from \"../../core/utils/object\";\nvar _extend = extend;\nvar _each = each;\nimport { Legend as _BaseLegend } from \"../components/legend\";\nvar unknownSource = {\n  category: \"UNKNOWN\",\n  name: \"UNKNOWN\"\n};\n\nfunction buildData(partition, values, field) {\n  var i;\n  var ii = values.length;\n  var list = [];\n  var item;\n\n  for (i = 0; i < ii; ++i) {\n    list[i] = item = {\n      start: partition[i],\n      end: partition[i + 1],\n      index: i\n    };\n    item[field] = values[i];\n    item.states = {\n      normal: {\n        fill: item.color\n      }\n    };\n    item.visible = true;\n  }\n\n  return list;\n}\n\nvar Legend = function Legend(parameters) {\n  var that = this;\n  that._params = parameters;\n  that._root = parameters.renderer.g().attr({\n    class: \"dxm-legend\"\n  }).linkOn(parameters.container, {\n    name: \"legend\",\n    after: \"legend-base\"\n  }).enableLinks().linkAppend();\n  parameters.layoutControl.addItem(that);\n\n  _BaseLegend.call(that, {\n    renderer: parameters.renderer,\n    widget: parameters.widget,\n    group: that._root,\n    backgroundClass: null,\n    itemsGroupClass: null,\n    textField: \"text\",\n    getFormatObject: function getFormatObject(data) {\n      return data;\n    }\n  });\n\n  that._onDataChanged = function (data) {\n    that._updateData(data);\n  };\n};\n\nLegend.prototype = _extend(clone(_BaseLegend.prototype), {\n  constructor: Legend,\n  dispose: function dispose() {\n    var that = this;\n\n    that._params.layoutControl.removeItem(that);\n\n    that._unbindData();\n\n    that._root.linkRemove().linkOff();\n\n    that._params = that._root = that._onDataChanged = null;\n    return _BaseLegend.prototype.dispose.apply(that, arguments);\n  },\n  resize: function resize(size) {\n    this._params.notifyDirty();\n\n    if (null === size) {\n      this.erase();\n    } else {\n      this.draw(size.width, size.height);\n    }\n\n    this._params.notifyReady();\n  },\n  locate: _BaseLegend.prototype.shift,\n  _updateData: function _updateData(data) {\n    this._options.defaultColor = data && data.defaultColor;\n    this.update(data ? buildData(data.partition, data.values, this._dataName) : [], this._options, this._params.themeManager.theme(\"legend\").title);\n    this.updateLayout();\n  },\n  _unbindData: function _unbindData() {\n    if (this._dataCategory) {\n      this._params.dataExchanger.unbind(this._dataCategory, this._dataName, this._onDataChanged);\n    }\n  },\n  _bindData: function _bindData(arg) {\n    this._params.dataExchanger.bind(this._dataCategory = arg.category, this._dataName = arg.name, this._onDataChanged);\n  },\n  setOptions: function setOptions(options) {\n    this.update(this._data, options, this._params.themeManager.theme(\"legend\").title);\n\n    this._unbindData();\n\n    var source = options.source;\n\n    this._bindData(source ? {\n      category: source.layer,\n      name: source.grouping\n    } : unknownSource);\n\n    this.updateLayout();\n    return this;\n  }\n});\nexport function LegendsControl(parameters) {\n  this._params = parameters;\n  this._items = [];\n  parameters.container.virtualLink(\"legend-base\");\n}\nLegendsControl.prototype = {\n  constructor: LegendsControl,\n  dispose: function dispose() {\n    _each(this._items, function (_, item) {\n      item.dispose();\n    });\n\n    this._params = this._items = null;\n  },\n  setOptions: function setOptions(options) {\n    var optionList = options && options.length ? options : [];\n    var items = this._items;\n    var i;\n    var ii = optionList.length;\n    var params = this._params;\n    var theme = params.themeManager.theme(\"legend\");\n\n    for (i = items.length; i < ii; ++i) {\n      items[i] = new Legend(params);\n    }\n\n    for (i = items.length - 1; i >= ii; --i) {\n      items[i].dispose();\n      items.splice(i, 1);\n    }\n\n    params.layoutControl.suspend();\n\n    for (i = 0; i < ii; ++i) {\n      items[i].setOptions(_extend(true, {}, theme, optionList[i]));\n    }\n\n    params.layoutControl.resume();\n  }\n};","map":null,"metadata":{},"sourceType":"module"}