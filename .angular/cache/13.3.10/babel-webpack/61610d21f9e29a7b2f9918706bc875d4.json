{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.focus.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport core from \"./ui.grid_core.modules\";\nimport { each } from \"../../core/utils/iterator\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nimport { equalByValue } from \"../../core/utils/common\";\nimport { isDefined, isBoolean } from \"../../core/utils/type\";\nimport { Deferred, when } from \"../../core/utils/deferred\";\nvar ROW_FOCUSED_CLASS = \"dx-row-focused\";\nvar FOCUSED_ROW_SELECTOR = \".dx-row.\" + ROW_FOCUSED_CLASS;\nvar TABLE_POSTFIX_CLASS = \"table\";\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\nvar FocusController = core.ViewController.inherit({\n  init: function init() {\n    this._dataController = this.getController(\"data\");\n    this._keyboardController = this.getController(\"keyboardNavigation\");\n    this.component._optionsByReference.focusedRowKey = true;\n  },\n  optionChanged: function optionChanged(args) {\n    if (\"focusedRowIndex\" === args.name) {\n      var focusedRowKey = this.option(\"focusedRowKey\");\n\n      this._focusRowByIndex(args.value);\n\n      this._triggerFocusedRowChangedIfNeed(focusedRowKey, args.value);\n\n      args.handled = true;\n    } else if (\"focusedRowKey\" === args.name) {\n      args.handled = true;\n\n      if (Array.isArray(args.value) && JSON.stringify(args.value) === JSON.stringify(args.previousValue)) {\n        return;\n      }\n\n      var focusedRowIndex = this.option(\"focusedRowIndex\");\n\n      this._focusRowByKey(args.value);\n\n      this._triggerFocusedRowChangedIfNeed(args.value, focusedRowIndex);\n    } else if (\"focusedColumnIndex\" === args.name) {\n      args.handled = true;\n    } else if (\"focusedRowEnabled\" === args.name) {\n      args.handled = true;\n    } else if (\"autoNavigateToFocusedRow\" === args.name) {\n      args.handled = true;\n    } else {\n      this.callBase(args);\n    }\n  },\n  _triggerFocusedRowChangedIfNeed: function _triggerFocusedRowChangedIfNeed(focusedRowKey, focusedRowIndex) {\n    var focusedRowIndexByKey = this.getFocusedRowIndexByKey(focusedRowKey);\n\n    if (focusedRowIndex === focusedRowIndexByKey) {\n      var rowIndex = this._dataController.getRowIndexByKey(focusedRowKey);\n\n      if (rowIndex >= 0) {\n        var $rowElement = $(this.getView(\"rowsView\").getRowElement(rowIndex));\n\n        this.getController(\"keyboardNavigation\")._fireFocusedRowChanged($rowElement, focusedRowIndex);\n      }\n    }\n  },\n  isAutoNavigateToFocusedRow: function isAutoNavigateToFocusedRow() {\n    return \"infinite\" !== this.option(\"scrolling.mode\") && this.option(\"autoNavigateToFocusedRow\");\n  },\n  _focusRowByIndex: function _focusRowByIndex(index, operationTypes) {\n    if (!this.option(\"focusedRowEnabled\")) {\n      return;\n    }\n\n    index = void 0 !== index ? index : this.option(\"focusedRowIndex\");\n\n    if (index < 0) {\n      if (this.isAutoNavigateToFocusedRow()) {\n        this._resetFocusedRow();\n      }\n    } else {\n      this._focusRowByIndexCore(index, operationTypes);\n    }\n  },\n  _focusRowByIndexCore: function _focusRowByIndexCore(index, operationTypes) {\n    var _this = this;\n\n    var dataController = this.getController(\"data\");\n    var pageSize = dataController.pageSize();\n\n    var setKeyByIndex = function setKeyByIndex() {\n      if (_this._isValidFocusedRowIndex(index)) {\n        var rowIndex = index - dataController.getRowIndexOffset(true);\n\n        if (!operationTypes || operationTypes.paging && !operationTypes.filtering) {\n          var lastItemIndex = dataController._getLastItemIndex();\n\n          rowIndex = Math.min(rowIndex, lastItemIndex);\n        }\n\n        var focusedRowKey = dataController.getKeyByRowIndex(rowIndex, true);\n\n        if (isDefined(focusedRowKey) && !_this.isRowFocused(focusedRowKey)) {\n          _this.option(\"focusedRowKey\", focusedRowKey);\n        }\n      }\n    };\n\n    if (pageSize >= 0) {\n      if (!this._isLocalRowIndex(index)) {\n        var pageIndex = Math.floor(index / dataController.pageSize());\n        when(dataController.pageIndex(pageIndex), dataController.waitReady()).done(function () {\n          setKeyByIndex();\n        });\n      } else {\n        setKeyByIndex();\n      }\n    }\n  },\n  _isLocalRowIndex: function _isLocalRowIndex(index) {\n    var dataController = this.getController(\"data\");\n\n    var isVirtualScrolling = this.getController(\"keyboardNavigation\")._isVirtualScrolling();\n\n    if (isVirtualScrolling) {\n      var pageIndex = Math.floor(index / dataController.pageSize());\n      var virtualItems = dataController.virtualItemsCount();\n      var virtualItemsBegin = virtualItems ? virtualItems.begin : -1;\n      var visibleRowsCount = dataController.getVisibleRows().length + dataController.getRowIndexOffset();\n      var visiblePagesCount = Math.ceil(visibleRowsCount / dataController.pageSize());\n      return virtualItemsBegin <= index && visiblePagesCount > pageIndex;\n    }\n\n    return true;\n  },\n  _setFocusedRowKeyByIndex: function _setFocusedRowKeyByIndex(index) {\n    var dataController = this.getController(\"data\");\n\n    if (this._isValidFocusedRowIndex(index)) {\n      var rowIndex = Math.min(index - dataController.getRowIndexOffset(), dataController.items().length - 1);\n      var focusedRowKey = dataController.getKeyByRowIndex(rowIndex);\n\n      if (isDefined(focusedRowKey) && !this.isRowFocused(focusedRowKey)) {\n        this.option(\"focusedRowKey\", focusedRowKey);\n      }\n    }\n  },\n  _focusRowByKey: function _focusRowByKey(key) {\n    if (!isDefined(key)) {\n      this._resetFocusedRow();\n    } else {\n      this._navigateToRow(key, true);\n    }\n  },\n  _resetFocusedRow: function _resetFocusedRow() {\n    var focusedRowKey = this.option(\"focusedRowKey\");\n    var isFocusedRowKeyDefined = isDefined(focusedRowKey);\n\n    if (!isFocusedRowKeyDefined && this.option(\"focusedRowIndex\") < 0) {\n      return;\n    }\n\n    var keyboardController = this.getController(\"keyboardNavigation\");\n\n    if (isFocusedRowKeyDefined) {\n      this.option(\"focusedRowKey\", null);\n    }\n\n    keyboardController.setFocusedRowIndex(-1);\n    this.option(\"focusedRowIndex\", -1);\n    this.getController(\"data\").updateItems({\n      changeType: \"updateFocusedRow\",\n      focusedRowKey: null\n    });\n\n    keyboardController._fireFocusedRowChanged(void 0, -1);\n  },\n  _isValidFocusedRowIndex: function _isValidFocusedRowIndex(rowIndex) {\n    var dataController = this.getController(\"data\");\n    var row = dataController.getVisibleRows()[rowIndex];\n    return !row || \"data\" === row.rowType || \"group\" === row.rowType;\n  },\n  publicMethods: function publicMethods() {\n    return [\"navigateToRow\", \"isRowFocused\"];\n  },\n  navigateToRow: function navigateToRow(key) {\n    if (!this.isAutoNavigateToFocusedRow()) {\n      this.option(\"focusedRowIndex\", -1);\n    }\n\n    return this._navigateToRow(key);\n  },\n  _navigateToRow: function _navigateToRow(key, needFocusRow) {\n    var that = this;\n    var dataController = that.getController(\"data\");\n    var isAutoNavigate = that.isAutoNavigateToFocusedRow();\n    var d = new Deferred();\n\n    if (void 0 === key || !dataController.dataSource()) {\n      return d.reject().promise();\n    }\n\n    var rowIndexByKey = that.getFocusedRowIndexByKey(key);\n\n    if (!isAutoNavigate && needFocusRow || rowIndexByKey >= 0) {\n      that._navigateTo(key, d, needFocusRow);\n    } else {\n      dataController.getPageIndexByKey(key).done(function (pageIndex) {\n        if (pageIndex < 0) {\n          d.resolve(-1);\n          return;\n        }\n\n        if (pageIndex === dataController.pageIndex()) {\n          dataController.reload().done(function () {\n            if (that.isRowFocused(key) && dataController.getRowIndexByKey(key) >= 0) {\n              d.resolve(that.getFocusedRowIndexByKey(key));\n            } else {\n              that._navigateTo(key, d, needFocusRow);\n            }\n          }).fail(d.reject);\n        } else {\n          dataController.pageIndex(pageIndex).done(function () {\n            that._navigateTo(key, d, needFocusRow);\n          }).fail(d.reject);\n        }\n      }).fail(d.reject);\n    }\n\n    return d.promise();\n  },\n  _navigateTo: function _navigateTo(key, deferred, needFocusRow) {\n    var visibleRowIndex = this.getController(\"data\").getRowIndexByKey(key);\n    var isVirtualRowRenderingMode = gridCoreUtils.isVirtualRowRendering(this);\n    var isAutoNavigate = this.isAutoNavigateToFocusedRow();\n\n    if (isAutoNavigate && isVirtualRowRenderingMode && visibleRowIndex < 0) {\n      this._navigateToVirtualRow(key, deferred, needFocusRow);\n    } else {\n      this._navigateToVisibleRow(key, deferred, needFocusRow);\n    }\n  },\n  _navigateToVisibleRow: function _navigateToVisibleRow(key, deferred, needFocusRow) {\n    if (needFocusRow) {\n      this._triggerUpdateFocusedRow(key, deferred);\n    } else {\n      var focusedRowIndex = this.getFocusedRowIndexByKey(key);\n      this.getView(\"rowsView\").scrollToRowElement(key, deferred).done(function () {\n        deferred.resolve(focusedRowIndex);\n      });\n    }\n  },\n  _navigateToVirtualRow: function _navigateToVirtualRow(key, deferred, needFocusRow) {\n    var that = this;\n    var dataController = this.getController(\"data\");\n    var rowsScrollController = dataController._rowsScrollController;\n    var rowIndex = gridCoreUtils.getIndexByKey(key, dataController.items(true));\n    var scrollable = that.getView(\"rowsView\").getScrollable();\n\n    if (rowsScrollController && scrollable && rowIndex >= 0) {\n      var focusedRowIndex = rowIndex + dataController.getRowIndexOffset(true);\n      var offset = rowsScrollController.getItemOffset(focusedRowIndex);\n      that.component.on(\"contentReady\", function triggerUpdateFocusedRow() {\n        that.component.off(\"contentReady\", triggerUpdateFocusedRow);\n\n        if (needFocusRow) {\n          that._triggerUpdateFocusedRow(key, deferred);\n        } else {\n          deferred.resolve(focusedRowIndex);\n        }\n      });\n      this.getView(\"rowsView\").scrollTopPosition(offset);\n    } else {\n      deferred.resolve(-1);\n    }\n  },\n  _triggerUpdateFocusedRow: function _triggerUpdateFocusedRow(key, deferred) {\n    var _this2 = this;\n\n    var dataController = this.getController(\"data\");\n    var focusedRowIndex = this.getFocusedRowIndexByKey(key);\n\n    if (this._isValidFocusedRowIndex(focusedRowIndex)) {\n      var d;\n\n      if (this.option(\"focusedRowEnabled\")) {\n        dataController.updateItems({\n          changeType: \"updateFocusedRow\",\n          focusedRowKey: key\n        });\n      } else {\n        d = this.getView(\"rowsView\").scrollToRowElement(key);\n      }\n\n      when(d).done(function () {\n        _this2.getController(\"keyboardNavigation\").setFocusedRowIndex(focusedRowIndex);\n\n        deferred && deferred.resolve(focusedRowIndex);\n      });\n    } else {\n      deferred && deferred.resolve(-1);\n    }\n  },\n  getFocusedRowIndexByKey: function getFocusedRowIndexByKey(key) {\n    var dataController = this.getController(\"data\");\n    var loadedRowIndex = dataController.getRowIndexByKey(key, true);\n    return loadedRowIndex >= 0 ? loadedRowIndex + dataController.getRowIndexOffset(true) : -1;\n  },\n  _focusRowByKeyOrIndex: function _focusRowByKeyOrIndex() {\n    var _this3 = this;\n\n    var focusedRowKey = this.option(\"focusedRowKey\");\n    var currentFocusedRowIndex = this.option(\"focusedRowIndex\");\n    var keyboardController = this.getController(\"keyboardNavigation\");\n    var dataController = this.getController(\"data\");\n\n    if (isDefined(focusedRowKey)) {\n      var visibleRowIndex = dataController.getRowIndexByKey(focusedRowKey);\n\n      if (visibleRowIndex >= 0) {\n        if (keyboardController._isVirtualScrolling()) {\n          currentFocusedRowIndex = visibleRowIndex + dataController.getRowIndexOffset();\n        }\n\n        keyboardController.setFocusedRowIndex(currentFocusedRowIndex);\n\n        this._triggerUpdateFocusedRow(focusedRowKey);\n      } else {\n        this._navigateToRow(focusedRowKey, true).done(function (focusedRowIndex) {\n          if (currentFocusedRowIndex >= 0 && focusedRowIndex < 0) {\n            _this3._focusRowByIndex();\n          } else if (currentFocusedRowIndex < 0 && focusedRowIndex >= 0) {\n            keyboardController.setFocusedRowIndex(focusedRowIndex);\n          }\n        });\n      }\n    } else if (currentFocusedRowIndex >= 0) {\n      this.getController(\"focus\")._focusRowByIndex(currentFocusedRowIndex);\n    }\n  },\n  isRowFocused: function isRowFocused(key) {\n    var focusedRowKey = this.option(\"focusedRowKey\");\n\n    if (isDefined(focusedRowKey)) {\n      return equalByValue(key, this.option(\"focusedRowKey\"));\n    }\n  },\n  updateFocusedRow: function updateFocusedRow(change) {\n    var that = this;\n\n    var focusedRowIndex = that._dataController.getRowIndexByKey(change.focusedRowKey);\n\n    var rowsView = that.getView(\"rowsView\");\n    var $tableElement;\n    each(rowsView.getTableElements(), function (index, element) {\n      var isMainTable = 0 === index;\n      $tableElement = $(element);\n\n      that._clearPreviousFocusedRow($tableElement, focusedRowIndex);\n\n      that._prepareFocusedRow({\n        changedItem: that._dataController.getVisibleRows()[focusedRowIndex],\n        $tableElement: $tableElement,\n        focusedRowIndex: focusedRowIndex,\n        isMainTable: isMainTable\n      });\n    });\n  },\n  _clearPreviousFocusedRow: function _clearPreviousFocusedRow($tableElement, focusedRowIndex) {\n    var _this4 = this;\n\n    var $prevRowFocusedElement = $tableElement.find(FOCUSED_ROW_SELECTOR).filter(function (_, focusedRow) {\n      var $focusedRowTable = $(focusedRow).closest(\".\".concat(_this4.addWidgetPrefix(TABLE_POSTFIX_CLASS)));\n      return $tableElement.is($focusedRowTable);\n    });\n    $prevRowFocusedElement.removeClass(ROW_FOCUSED_CLASS).removeClass(CELL_FOCUS_DISABLED_CLASS).removeAttr(\"tabindex\");\n    $prevRowFocusedElement.children(\"td\").removeAttr(\"tabindex\");\n\n    if (0 !== focusedRowIndex) {\n      var $firstRow = $(this.getView(\"rowsView\").getRowElement(0));\n      $firstRow.removeClass(CELL_FOCUS_DISABLED_CLASS).removeAttr(\"tabIndex\");\n    }\n  },\n  _prepareFocusedRow: function _prepareFocusedRow(options) {\n    var $row;\n    var changedItem = options.changedItem;\n\n    if (changedItem && (\"data\" === changedItem.rowType || \"group\" === changedItem.rowType)) {\n      var focusedRowIndex = options.focusedRowIndex;\n      var $tableElement = options.$tableElement;\n      var isMainTable = options.isMainTable;\n      var tabIndex = this.option(\"tabindex\") || 0;\n      var rowsView = this.getView(\"rowsView\");\n      $row = $(rowsView._getRowElements($tableElement).eq(focusedRowIndex));\n      $row.addClass(ROW_FOCUSED_CLASS).attr(\"tabindex\", tabIndex);\n\n      if (isMainTable) {\n        rowsView.scrollToElementVertically($row);\n      }\n    }\n\n    return $row;\n  }\n});\nexport var focusModule = {\n  defaultOptions: function defaultOptions() {\n    return {\n      focusedRowEnabled: false,\n      autoNavigateToFocusedRow: true,\n      focusedRowKey: null,\n      focusedRowIndex: -1,\n      focusedColumnIndex: -1\n    };\n  },\n  controllers: {\n    focus: FocusController\n  },\n  extenders: {\n    controllers: {\n      keyboardNavigation: {\n        init: function init() {\n          var rowIndex = this.option(\"focusedRowIndex\");\n          var columnIndex = this.option(\"focusedColumnIndex\");\n          this.createAction(\"onFocusedRowChanging\", {\n            excludeValidators: [\"disabled\", \"readOnly\"]\n          });\n          this.createAction(\"onFocusedRowChanged\", {\n            excludeValidators: [\"disabled\", \"readOnly\"]\n          });\n          this.createAction(\"onFocusedCellChanging\", {\n            excludeValidators: [\"disabled\", \"readOnly\"]\n          });\n          this.createAction(\"onFocusedCellChanged\", {\n            excludeValidators: [\"disabled\", \"readOnly\"]\n          });\n          this.callBase();\n          this.setRowFocusType();\n          this._focusedCellPosition = {};\n\n          if (isDefined(rowIndex)) {\n            this._focusedCellPosition.rowIndex = this.option(\"focusedRowIndex\");\n          }\n\n          if (isDefined(columnIndex)) {\n            this._focusedCellPosition.columnIndex = this.option(\"focusedColumnIndex\");\n          }\n        },\n        setFocusedRowIndex: function setFocusedRowIndex(rowIndex) {\n          var dataController = this.getController(\"data\");\n          this.callBase(rowIndex);\n          var visibleRowIndex = rowIndex - dataController.getRowIndexOffset();\n          var visibleRow = dataController.getVisibleRows()[visibleRowIndex];\n\n          if (!visibleRow || !visibleRow.isNewRow) {\n            this.option(\"focusedRowIndex\", rowIndex);\n          }\n        },\n        setFocusedColumnIndex: function setFocusedColumnIndex(columnIndex) {\n          this.callBase(columnIndex);\n          this.option(\"focusedColumnIndex\", columnIndex);\n        },\n        _escapeKeyHandler: function _escapeKeyHandler(eventArgs, isEditing) {\n          if (isEditing || !this.option(\"focusedRowEnabled\")) {\n            this.callBase(eventArgs, isEditing);\n            return;\n          }\n\n          if (this.isCellFocusType()) {\n            this.setRowFocusType();\n\n            this._focus(this._getCellElementFromTarget(eventArgs.originalEvent.target), true);\n          }\n        },\n        _updateFocusedCellPosition: function _updateFocusedCellPosition($cell, direction) {\n          var prevRowIndex = this.option(\"focusedRowIndex\");\n          var prevColumnIndex = this.option(\"focusedColumnIndex\");\n          var position = this.callBase($cell, direction);\n\n          if (position && position.columnIndex >= 0) {\n            this._fireFocusedCellChanged($cell, prevColumnIndex, prevRowIndex);\n          }\n        }\n      },\n      editorFactory: {\n        renderFocusOverlay: function renderFocusOverlay($element, hideBorder) {\n          var keyboardController = this.getController(\"keyboardNavigation\");\n          var focusedRowEnabled = this.option(\"focusedRowEnabled\");\n          var editingController = this.getController(\"editing\");\n          var $cell;\n\n          if (!focusedRowEnabled || !(null !== keyboardController && void 0 !== keyboardController && keyboardController.isRowFocusType()) || editingController.isEditing()) {\n            this.callBase($element, hideBorder);\n          } else if (focusedRowEnabled) {\n            var isRowElement = \"row\" === keyboardController._getElementType($element);\n\n            if (isRowElement && !$element.hasClass(ROW_FOCUSED_CLASS)) {\n              $cell = keyboardController.getFirstValidCellInRow($element);\n              keyboardController.focus($cell);\n            }\n          }\n        }\n      },\n      columns: {\n        getSortDataSourceParameters: function getSortDataSourceParameters(_, sortByKey) {\n          var _this5 = this;\n\n          var result = this.callBase.apply(this, arguments);\n          var dataController = this.getController(\"data\");\n          var dataSource = dataController._dataSource;\n          var store = dataController.store();\n          var key = store && store.key();\n          var remoteOperations = dataSource && dataSource.remoteOperations() || {};\n          var isLocalOperations = Object.keys(remoteOperations).every(function (operationName) {\n            return !remoteOperations[operationName];\n          });\n\n          if (key && (this.option(\"focusedRowEnabled\") && false !== this.getController(\"focus\").isAutoNavigateToFocusedRow() || sortByKey)) {\n            key = Array.isArray(key) ? key : [key];\n            var notSortedKeys = key.filter(function (key) {\n              return !_this5.columnOption(key, \"sortOrder\");\n            });\n\n            if (notSortedKeys.length) {\n              result = result || [];\n\n              if (isLocalOperations) {\n                result.push({\n                  selector: dataSource.getDataIndexGetter(),\n                  desc: false\n                });\n              } else {\n                notSortedKeys.forEach(function (notSortedKey) {\n                  return result.push({\n                    selector: notSortedKey,\n                    desc: false\n                  });\n                });\n              }\n            }\n          }\n\n          return result;\n        }\n      },\n      data: {\n        _applyChange: function _applyChange(change) {\n          if (change && \"updateFocusedRow\" === change.changeType) {\n            return;\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _fireChanged: function _fireChanged(e) {\n          this.callBase(e);\n\n          if (this.option(\"focusedRowEnabled\") && this._dataSource) {\n            var isPartialUpdate = \"update\" === e.changeType && e.repaintChangesOnly;\n            var isPartialUpdateWithDeleting = isPartialUpdate && e.changeTypes && e.changeTypes.indexOf(\"remove\") >= 0;\n\n            if (\"refresh\" === e.changeType && e.items.length || isPartialUpdateWithDeleting) {\n              this._updatePageIndexes();\n\n              this.processUpdateFocusedRow(e);\n            } else if (\"append\" === e.changeType || \"prepend\" === e.changeType) {\n              this._updatePageIndexes();\n            } else if (\"update\" === e.changeType && e.repaintChangesOnly) {\n              this.processUpdateFocusedRow(e);\n            }\n          }\n        },\n        _updatePageIndexes: function _updatePageIndexes() {\n          var prevRenderingPageIndex = this._lastRenderingPageIndex || 0;\n          var renderingPageIndex = this._rowsScrollController ? this._rowsScrollController.pageIndex() : 0;\n          this._lastRenderingPageIndex = renderingPageIndex;\n          this._isPagingByRendering = renderingPageIndex !== prevRenderingPageIndex;\n        },\n        isPagingByRendering: function isPagingByRendering() {\n          return this._isPagingByRendering;\n        },\n        processUpdateFocusedRow: function processUpdateFocusedRow(e) {\n          var operationTypes = e.operationTypes || {};\n          var focusController = this.getController(\"focus\");\n          var reload = operationTypes.reload,\n              fullReload = operationTypes.fullReload;\n          var keyboardController = this.getController(\"keyboardNavigation\");\n\n          var isVirtualScrolling = keyboardController._isVirtualScrolling();\n\n          var focusedRowKey = this.option(\"focusedRowKey\");\n          var isAutoNavigate = focusController.isAutoNavigateToFocusedRow();\n\n          if (reload && !fullReload && isDefined(focusedRowKey)) {\n            focusController._navigateToRow(focusedRowKey, true).done(function (focusedRowIndex) {\n              if (focusedRowIndex < 0) {\n                focusController._focusRowByIndex(void 0, operationTypes);\n              }\n            });\n          } else if (operationTypes.paging && !isVirtualScrolling) {\n            if (isAutoNavigate) {\n              var rowIndexByKey = this.getRowIndexByKey(focusedRowKey);\n              var isValidRowIndexByKey = rowIndexByKey >= 0;\n              var focusedRowIndex = this.option(\"focusedRowIndex\");\n              var needFocusRowByIndex = focusedRowIndex >= 0 && (focusedRowIndex === rowIndexByKey || !isValidRowIndexByKey);\n\n              if (needFocusRowByIndex) {\n                focusController._focusRowByIndex(void 0, operationTypes);\n              }\n            } else if (this.getRowIndexByKey(focusedRowKey) < 0) {\n              this.option(\"focusedRowIndex\", -1);\n            }\n          } else if (operationTypes.fullReload) {\n            focusController._focusRowByKeyOrIndex();\n          }\n        },\n        getPageIndexByKey: function getPageIndexByKey(key) {\n          var that = this;\n          var d = new Deferred();\n          that.getGlobalRowIndexByKey(key).done(function (globalIndex) {\n            d.resolve(globalIndex >= 0 ? Math.floor(globalIndex / that.pageSize()) : -1);\n          }).fail(d.reject);\n          return d.promise();\n        },\n        getGlobalRowIndexByKey: function getGlobalRowIndexByKey(key) {\n          if (this._dataSource.group()) {\n            return this._calculateGlobalRowIndexByGroupedData(key);\n          }\n\n          return this._calculateGlobalRowIndexByFlatData(key);\n        },\n        _calculateGlobalRowIndexByFlatData: function _calculateGlobalRowIndexByFlatData(key, groupFilter, useGroup) {\n          var that = this;\n          var deferred = new Deferred();\n          var dataSource = that._dataSource;\n\n          if (Array.isArray(key)) {\n            return deferred.resolve(-1).promise();\n          }\n\n          var filter = that._generateFilterByKey(key);\n\n          dataSource.load({\n            filter: that._concatWithCombinedFilter(filter),\n            skip: 0,\n            take: 1\n          }).done(function (data) {\n            if (data.length > 0) {\n              filter = that._generateOperationFilterByKey(key, data[0], useGroup);\n              dataSource.load({\n                filter: that._concatWithCombinedFilter(filter, groupFilter),\n                skip: 0,\n                take: 1,\n                requireTotalCount: true\n              }).done(function (_, extra) {\n                deferred.resolve(extra.totalCount);\n              });\n            } else {\n              deferred.resolve(-1);\n            }\n          });\n          return deferred.promise();\n        },\n        _concatWithCombinedFilter: function _concatWithCombinedFilter(filter, groupFilter) {\n          var combinedFilter = this.getCombinedFilter();\n          return gridCoreUtils.combineFilters([filter, combinedFilter, groupFilter]);\n        },\n        _generateBooleanFilter: function _generateBooleanFilter(selector, value, sortInfo) {\n          var result;\n\n          if (false === value) {\n            result = [selector, \"=\", sortInfo.desc ? true : null];\n          } else if (true === value ? !sortInfo.desc : sortInfo.desc) {\n            result = [selector, \"<>\", value];\n          }\n\n          return result;\n        },\n        _generateOperationFilterByKey: function _generateOperationFilterByKey(key, rowData, useGroup) {\n          var that = this;\n          var dataSource = that._dataSource;\n\n          var filter = that._generateFilterByKey(key, \"<\");\n\n          var sort = that._columnsController.getSortDataSourceParameters(!dataSource.remoteOperations().filtering, true);\n\n          if (useGroup) {\n            var group = that._columnsController.getGroupDataSourceParameters(!dataSource.remoteOperations().filtering);\n\n            if (group) {\n              sort = sort ? group.concat(sort) : group;\n            }\n          }\n\n          if (sort) {\n            sort.slice().reverse().forEach(function (sortInfo) {\n              var selector = sortInfo.selector;\n              var getter;\n\n              if (\"function\" === typeof selector) {\n                getter = selector;\n              } else {\n                getter = that._columnsController.columnOption(selector, \"selector\");\n              }\n\n              var value = getter ? getter(rowData) : rowData[selector];\n              filter = [[selector, \"=\", value], \"and\", filter];\n\n              if (null === value || isBoolean(value)) {\n                var booleanFilter = that._generateBooleanFilter(selector, value, sortInfo);\n\n                if (booleanFilter) {\n                  filter = [booleanFilter, \"or\", filter];\n                }\n              } else {\n                var filterOperation = sortInfo.desc ? \">\" : \"<\";\n                var sortFilter = [selector, filterOperation, value];\n\n                if (!sortInfo.desc) {\n                  sortFilter = [sortFilter, \"or\", [selector, \"=\", null]];\n                }\n\n                filter = [sortFilter, \"or\", filter];\n              }\n            });\n          }\n\n          return filter;\n        },\n        _generateFilterByKey: function _generateFilterByKey(key, operation) {\n          var dataSourceKey = this._dataSource.key();\n\n          var filter = [];\n\n          if (!operation) {\n            operation = \"=\";\n          }\n\n          if (Array.isArray(dataSourceKey)) {\n            for (var i = 0; i < dataSourceKey.length; ++i) {\n              var keyPart = key[dataSourceKey[i]];\n\n              if (keyPart) {\n                if (filter.length > 0) {\n                  filter.push(\"and\");\n                }\n\n                filter.push([dataSourceKey[i], operation, keyPart]);\n              }\n            }\n          } else {\n            filter = [dataSourceKey, operation, key];\n          }\n\n          return filter;\n        },\n        _getLastItemIndex: function _getLastItemIndex() {\n          return this.items(true).length - 1;\n        }\n      },\n      editing: {\n        _deleteRowCore: function _deleteRowCore(rowIndex) {\n          var _this6 = this;\n\n          var deferred = this.callBase.apply(this, arguments);\n          var dataController = this.getController(\"data\");\n          var rowKey = dataController.getKeyByRowIndex(rowIndex);\n          deferred.done(function () {\n            var rowIndex = dataController.getRowIndexByKey(rowKey);\n            var visibleRows = dataController.getVisibleRows();\n\n            if (-1 === rowIndex && !visibleRows.length) {\n              _this6.getController(\"focus\")._resetFocusedRow();\n            }\n          });\n        }\n      }\n    },\n    views: {\n      rowsView: {\n        _createRow: function _createRow(row) {\n          var $row = this.callBase.apply(this, arguments);\n\n          if (this.option(\"focusedRowEnabled\") && row) {\n            if (this.getController(\"focus\").isRowFocused(row.key)) {\n              $row.addClass(ROW_FOCUSED_CLASS);\n            }\n          }\n\n          return $row;\n        },\n        _checkRowKeys: function _checkRowKeys(options) {\n          this.callBase.apply(this, arguments);\n\n          if (this.option(\"focusedRowEnabled\") && this.option(\"dataSource\")) {\n            var store = this._dataController.store();\n\n            if (store && !store.key()) {\n              this._dataController.fireError(\"E1042\", \"Row focusing\");\n            }\n          }\n        },\n        _update: function _update(change) {\n          if (\"updateFocusedRow\" === change.changeType) {\n            if (this.option(\"focusedRowEnabled\")) {\n              this.getController(\"focus\").updateFocusedRow(change);\n            }\n          } else {\n            this.callBase(change);\n          }\n        },\n        updateFocusElementTabIndex: function updateFocusElementTabIndex($cellElements, preventScroll) {\n          var rowIndex = this.getController(\"keyboardNavigation\").getVisibleRowIndex();\n\n          var row = this._dataController.getVisibleRows()[rowIndex];\n\n          if (this.option(\"focusedRowEnabled\") && !(null !== row && void 0 !== row && row.isNewRow)) {\n            this._setFocusedRowElementTabIndex(preventScroll);\n          } else {\n            this.callBase($cellElements);\n          }\n        },\n        _setFocusedRowElementTabIndex: function _setFocusedRowElementTabIndex(preventScroll) {\n          var _this7 = this;\n\n          var focusedRowKey = this.option(\"focusedRowKey\");\n          var tabIndex = this.option(\"tabIndex\") || 0;\n          var dataController = this._dataController;\n          var columnsController = this._columnsController;\n          var rowIndex = dataController.getRowIndexByKey(focusedRowKey);\n          var columnIndex = this.option(\"focusedColumnIndex\");\n\n          var $row = this._findRowElementForTabIndex();\n\n          if (!isDefined(this._scrollToFocusOnResize)) {\n            this._scrollToFocusOnResize = function () {\n              _this7.scrollToElementVertically(_this7._findRowElementForTabIndex());\n\n              _this7.resizeCompleted.remove(_this7._scrollToFocusOnResize);\n            };\n          }\n\n          $row.attr(\"tabIndex\", tabIndex);\n\n          if (rowIndex >= 0 && !preventScroll) {\n            if (columnIndex < 0) {\n              columnIndex = 0;\n            }\n\n            rowIndex += dataController.getRowIndexOffset();\n            columnIndex += columnsController.getColumnIndexOffset();\n            this.getController(\"keyboardNavigation\").setFocusedCellPosition(rowIndex, columnIndex);\n\n            if (this.getController(\"focus\").isAutoNavigateToFocusedRow()) {\n              var dataSource = dataController.dataSource();\n              var operationTypes = dataSource && dataSource.operationTypes();\n\n              if (operationTypes && !operationTypes.paging && !dataController.isPagingByRendering()) {\n                this.resizeCompleted.remove(this._scrollToFocusOnResize);\n                this.resizeCompleted.add(this._scrollToFocusOnResize);\n              }\n            }\n          }\n        },\n        _findRowElementForTabIndex: function _findRowElementForTabIndex() {\n          var focusedRowKey = this.option(\"focusedRowKey\");\n\n          var rowIndex = this._dataController.getRowIndexByKey(focusedRowKey);\n\n          return $(this.getRowElement(rowIndex >= 0 ? rowIndex : 0));\n        },\n        scrollToRowElement: function scrollToRowElement(key) {\n          var rowIndex = this.getController(\"data\").getRowIndexByKey(key);\n          var $row = $(this.getRow(rowIndex));\n          return this.scrollToElementVertically($row);\n        },\n        scrollToElementVertically: function scrollToElementVertically($row) {\n          var scrollable = this.getScrollable();\n\n          if (scrollable && $row.length) {\n            var position = scrollable.getScrollElementPosition($row, \"vertical\");\n            return this.scrollTopPosition(position);\n          }\n\n          return new Deferred().resolve();\n        },\n        scrollTopPosition: function scrollTopPosition(scrollTop) {\n          var d = new Deferred();\n          var scrollable = this.getScrollable();\n\n          if (scrollable) {\n            var currentScrollTop = scrollable.scrollTop();\n\n            var scrollHandler = function scrollHandler() {\n              scrollable.off(\"scroll\", scrollHandler);\n              d.resolve();\n            };\n\n            if (scrollTop !== currentScrollTop) {\n              scrollable.on(\"scroll\", scrollHandler);\n\n              this._dataController.resetFilterApplying();\n\n              scrollable.scrollTo({\n                top: scrollTop\n              });\n              return d.promise();\n            }\n          }\n\n          return d.resolve();\n        }\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}