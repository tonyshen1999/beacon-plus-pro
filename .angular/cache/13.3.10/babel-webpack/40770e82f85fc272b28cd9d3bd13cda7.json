{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/pivot_grid/ui.pivot_grid.area_item.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { setWidth } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport Class from \"../../core/class\";\nimport { getPublicElement } from \"../../core/element\";\nimport { extend } from \"../../core/utils/extend\";\nimport { getBoundingRect } from \"../../core/utils/position\";\nimport { isDefined } from \"../../core/utils/type\";\nvar PIVOTGRID_EXPAND_CLASS = \"dx-expand\";\n\nvar getRealElementWidth = function getRealElementWidth(element) {\n  var width = 0;\n  var offsetWidth = element.offsetWidth;\n\n  if (element.getBoundingClientRect) {\n    var clientRect = getBoundingRect(element);\n    width = clientRect.width;\n\n    if (!width) {\n      width = clientRect.right - clientRect.left;\n    }\n\n    if (width <= offsetWidth - 1) {\n      width = offsetWidth;\n    }\n  }\n\n  return width > 0 ? width : offsetWidth;\n};\n\nfunction getFakeTableOffset(scrollPos, elementOffset, tableSize, viewPortSize) {\n  var offset = 0;\n  var halfTableCount = 0;\n  var halfTableSize = tableSize / 2;\n\n  if (scrollPos + viewPortSize - (elementOffset + tableSize) > 1) {\n    if (scrollPos >= elementOffset + tableSize + halfTableSize) {\n      halfTableCount = parseInt((scrollPos - (elementOffset + tableSize)) / halfTableSize, 10);\n    }\n\n    offset = elementOffset + tableSize + halfTableSize * halfTableCount;\n  } else if (scrollPos < elementOffset) {\n    if (scrollPos <= elementOffset - halfTableSize) {\n      halfTableCount = parseInt((scrollPos - (elementOffset - halfTableSize)) / halfTableSize, 10);\n    }\n\n    offset = elementOffset - (tableSize - halfTableSize * halfTableCount);\n  } else {\n    offset = elementOffset;\n  }\n\n  return offset;\n}\n\nexport var AreaItem = Class.inherit({\n  ctor: function ctor(component) {\n    this.component = component;\n  },\n  option: function option() {\n    return this.component.option.apply(this.component, arguments);\n  },\n  _getRowElement: function _getRowElement(index) {\n    if (this._tableElement && this._tableElement.length > 0) {\n      return this._tableElement[0].rows[index];\n    }\n\n    return null;\n  },\n  _createGroupElement: function _createGroupElement() {\n    return $(\"<div>\");\n  },\n  _createTableElement: function _createTableElement() {\n    return $(\"<table>\");\n  },\n  _getCellText: function _getCellText(cell, encodeHtml) {\n    var cellText = cell.isWhiteSpace ? \"&nbsp\" : cell.text || \"&nbsp\";\n\n    if (encodeHtml && (-1 !== cellText.indexOf(\"<\") || -1 !== cellText.indexOf(\">\"))) {\n      cellText = $(\"<div>\").text(cellText).html();\n    }\n\n    return cellText;\n  },\n  _getRowClassNames: function _getRowClassNames() {},\n  _applyCustomStyles: function _applyCustomStyles(options) {\n    if (options.cell.width) {\n      options.cssArray.push(\"min-width:\" + options.cell.width + \"px\");\n    }\n\n    if (options.cell.sorted) {\n      options.classArray.push(\"dx-pivotgrid-sorted\");\n    }\n  },\n  _getMainElementMarkup: function _getMainElementMarkup() {\n    return \"<tbody>\";\n  },\n  _getCloseMainElementMarkup: function _getCloseMainElementMarkup() {\n    return \"</tbody>\";\n  },\n  _renderTableContent: function _renderTableContent(tableElement, data) {\n    var rowsCount = data.length;\n    var row;\n    var cell;\n    var i;\n    var j;\n    var cellText;\n    var rtlEnabled = this.option(\"rtlEnabled\");\n    var markupArray = [];\n    var encodeHtml = this.option(\"encodeHtml\");\n    var rowClassNames;\n    tableElement.data(\"area\", this._getAreaName());\n    tableElement.data(\"data\", data);\n    tableElement.css(\"width\", \"\");\n    markupArray.push(this._getMainElementMarkup());\n\n    for (i = 0; i < rowsCount; i++) {\n      row = data[i];\n      var columnMarkupArray = [];\n      rowClassNames = [];\n      markupArray.push(\"<tr \");\n\n      for (j = 0; j < row.length; j++) {\n        cell = row[j];\n\n        this._getRowClassNames(i, cell, rowClassNames);\n\n        columnMarkupArray.push(\"<td \");\n\n        if (cell) {\n          cell.rowspan && columnMarkupArray.push(\"rowspan='\" + (cell.rowspan || 1) + \"'\");\n          cell.colspan && columnMarkupArray.push(\"colspan='\" + (cell.colspan || 1) + \"'\");\n          var styleOptions = {\n            cellElement: void 0,\n            cell: cell,\n            cellsCount: row.length,\n            cellIndex: j,\n            rowElement: void 0,\n            rowIndex: i,\n            rowsCount: rowsCount,\n            rtlEnabled: rtlEnabled,\n            classArray: [],\n            cssArray: []\n          };\n\n          this._applyCustomStyles(styleOptions);\n\n          if (styleOptions.cssArray.length) {\n            columnMarkupArray.push(\"style='\");\n            columnMarkupArray.push(styleOptions.cssArray.join(\";\"));\n            columnMarkupArray.push(\"'\");\n          }\n\n          if (styleOptions.classArray.length) {\n            columnMarkupArray.push(\"class='\");\n            columnMarkupArray.push(styleOptions.classArray.join(\" \"));\n            columnMarkupArray.push(\"'\");\n          }\n\n          columnMarkupArray.push(\">\");\n\n          if (isDefined(cell.expanded)) {\n            columnMarkupArray.push(\"<div class='dx-expand-icon-container'><span class='\" + PIVOTGRID_EXPAND_CLASS + \"'></span></div>\");\n          }\n\n          cellText = this._getCellText(cell, encodeHtml);\n        } else {\n          cellText = \"\";\n        }\n\n        columnMarkupArray.push(\"<span \");\n\n        if (isDefined(cell.wordWrapEnabled)) {\n          columnMarkupArray.push(\"style='white-space:\", cell.wordWrapEnabled ? \"normal\" : \"nowrap\", \";'\");\n        }\n\n        columnMarkupArray.push(\">\" + cellText + \"</span>\");\n\n        if (cell.sorted) {\n          columnMarkupArray.push(\"<span class='dx-icon-sorted'></span>\");\n        }\n\n        columnMarkupArray.push(\"</td>\");\n      }\n\n      if (rowClassNames.length) {\n        markupArray.push(\"class='\");\n        markupArray.push(rowClassNames.join(\" \"));\n        markupArray.push(\"'\");\n      }\n\n      markupArray.push(\">\");\n      markupArray.push(columnMarkupArray.join(\"\"));\n      markupArray.push(\"</tr>\");\n    }\n\n    markupArray.push(this._getCloseMainElementMarkup());\n    tableElement.append(markupArray.join(\"\"));\n\n    this._triggerOnCellPrepared(tableElement, data);\n  },\n  _triggerOnCellPrepared: function _triggerOnCellPrepared(tableElement, data) {\n    var rowElements = tableElement.find(\"tr\");\n\n    var areaName = this._getAreaName();\n\n    var onCellPrepared = this.option(\"onCellPrepared\");\n\n    var hasEvent = this.component._eventsStrategy.hasEvent(\"cellPrepared\");\n\n    var rowElement;\n    var $cellElement;\n    var onCellPreparedArgs;\n\n    var defaultActionArgs = this.component._defaultActionArgs();\n\n    var row;\n    var cell;\n    var rowIndex;\n    var columnIndex;\n\n    if (onCellPrepared || hasEvent) {\n      for (rowIndex = 0; rowIndex < data.length; rowIndex++) {\n        row = data[rowIndex];\n        rowElement = rowElements.eq(rowIndex);\n\n        for (columnIndex = 0; columnIndex < row.length; columnIndex++) {\n          cell = row[columnIndex];\n          $cellElement = rowElement.children().eq(columnIndex);\n          onCellPreparedArgs = {\n            area: areaName,\n            rowIndex: rowIndex,\n            columnIndex: columnIndex,\n            cellElement: getPublicElement($cellElement),\n            cell: cell\n          };\n\n          if (hasEvent) {\n            this.component._trigger(\"onCellPrepared\", onCellPreparedArgs);\n          } else {\n            onCellPrepared(extend(onCellPreparedArgs, defaultActionArgs));\n          }\n        }\n      }\n    }\n  },\n  _getRowHeight: function _getRowHeight(index) {\n    var row = this._getRowElement(index);\n\n    var height = 0;\n    var offsetHeight = row.offsetHeight;\n\n    if (row && row.lastChild) {\n      if (row.getBoundingClientRect) {\n        var clientRect = getBoundingRect(row);\n        height = clientRect.height;\n\n        if (height <= offsetHeight - 1) {\n          height = offsetHeight;\n        }\n      }\n\n      return height > 0 ? height : offsetHeight;\n    }\n\n    return 0;\n  },\n  _setRowHeight: function _setRowHeight(index, value) {\n    var row = this._getRowElement(index);\n\n    if (row) {\n      row.style.height = value + \"px\";\n    }\n  },\n  getRowsLength: function getRowsLength() {\n    if (this._tableElement && this._tableElement.length > 0) {\n      return this._tableElement[0].rows.length;\n    }\n\n    return 0;\n  },\n  getRowsHeight: function getRowsHeight() {\n    var result = [];\n    var rowsLength = this.getRowsLength();\n    var i;\n\n    for (i = 0; i < rowsLength; i++) {\n      result.push(this._getRowHeight(i));\n    }\n\n    return result;\n  },\n  setRowsHeight: function setRowsHeight(values) {\n    var totalHeight = 0;\n    var valuesLength = values.length;\n    var i;\n\n    for (i = 0; i < valuesLength; i++) {\n      totalHeight += values[i];\n\n      this._setRowHeight(i, values[i]);\n    }\n\n    this._tableHeight = totalHeight;\n    this._tableElement[0].style.height = totalHeight + \"px\";\n  },\n  getColumnsWidth: function getColumnsWidth() {\n    var rowsLength = this.getRowsLength();\n    var rowIndex;\n    var row;\n    var i;\n    var columnIndex;\n    var processedCells = [];\n    var result = [];\n\n    var fillCells = function fillCells(cells, rowIndex, columnIndex, rowSpan, colSpan) {\n      var rowOffset;\n      var columnOffset;\n\n      for (rowOffset = 0; rowOffset < rowSpan; rowOffset++) {\n        for (columnOffset = 0; columnOffset < colSpan; columnOffset++) {\n          cells[rowIndex + rowOffset] = cells[rowIndex + rowOffset] || [];\n          cells[rowIndex + rowOffset][columnIndex + columnOffset] = true;\n        }\n      }\n    };\n\n    if (rowsLength) {\n      for (rowIndex = 0; rowIndex < rowsLength; rowIndex++) {\n        processedCells[rowIndex] = processedCells[rowIndex] || [];\n        row = this._getRowElement(rowIndex);\n\n        for (i = 0; i < row.cells.length; i++) {\n          for (columnIndex = 0; processedCells[rowIndex][columnIndex]; columnIndex++) {}\n\n          fillCells(processedCells, rowIndex, columnIndex, row.cells[i].rowSpan, row.cells[i].colSpan);\n\n          if (1 === row.cells[i].colSpan) {\n            result[columnIndex] = result[columnIndex] || getRealElementWidth(row.cells[i]);\n          }\n        }\n      }\n    }\n\n    return result;\n  },\n  setColumnsWidth: function setColumnsWidth(values) {\n    var i;\n    var tableElement = this._tableElement[0];\n    var colgroupElementHTML = \"\";\n    var columnsCount = this.getColumnsCount();\n    var columnWidth = [];\n\n    for (i = 0; i < columnsCount; i++) {\n      columnWidth.push(values[i] || 0);\n    }\n\n    for (i = columnsCount; i < values.length && values; i++) {\n      columnWidth[columnsCount - 1] += values[i];\n    }\n\n    for (i = 0; i < columnsCount; i++) {\n      colgroupElementHTML += '<col style=\"width: ' + columnWidth[i] + 'px\">';\n    }\n\n    this._colgroupElement.html(colgroupElementHTML);\n\n    this._tableWidth = columnWidth.reduce(function (sum, width) {\n      return sum + width;\n    }, 0);\n    tableElement.style.width = this._tableWidth + \"px\";\n    tableElement.style.tableLayout = \"fixed\";\n  },\n  resetColumnsWidth: function resetColumnsWidth() {\n    setWidth(this._colgroupElement.find(\"col\"), \"auto\");\n\n    this._tableElement.css({\n      width: \"\",\n      tableLayout: \"\"\n    });\n  },\n  setGroupWidth: function setGroupWidth(value) {\n    this._getScrollable().option(\"width\", value);\n  },\n  setGroupHeight: function setGroupHeight(value) {\n    this._getScrollable().option(\"height\", value);\n  },\n  getGroupHeight: function getGroupHeight() {\n    return this._getGroupElementSize(\"height\");\n  },\n  getGroupWidth: function getGroupWidth() {\n    return this._getGroupElementSize(\"width\");\n  },\n  _getGroupElementSize: function _getGroupElementSize(dimension) {\n    var size = this.groupElement()[0].style[dimension];\n\n    if (size.indexOf(\"px\") > 0) {\n      return parseFloat(size);\n    }\n\n    return null;\n  },\n  groupElement: function groupElement() {\n    return this._groupElement;\n  },\n  tableElement: function tableElement() {\n    return this._tableElement;\n  },\n  element: function element() {\n    return this._rootElement;\n  },\n  headElement: function headElement() {\n    return this._tableElement.find(\"thead\");\n  },\n  _setTableCss: function _setTableCss(styles) {\n    if (this.option(\"rtlEnabled\")) {\n      styles.right = styles.left;\n      delete styles.left;\n    }\n\n    this.tableElement().css(styles);\n  },\n  setVirtualContentParams: function setVirtualContentParams(params) {\n    this._virtualContent.css({\n      width: params.width,\n      height: params.height\n    });\n\n    this.groupElement().addClass(\"dx-virtual-mode\");\n  },\n  disableVirtualMode: function disableVirtualMode() {\n    this.groupElement().removeClass(\"dx-virtual-mode\");\n  },\n  _renderVirtualContent: function _renderVirtualContent() {\n    if (!this._virtualContent && \"virtual\" === this.option(\"scrolling.mode\")) {\n      this._virtualContent = $(\"<div>\").addClass(\"dx-virtual-content\").insertBefore(this._tableElement);\n    }\n  },\n  reset: function reset() {\n    var tableElement = this._tableElement[0];\n    this._fakeTable && this._fakeTable.detach();\n    this._fakeTable = null;\n    this.disableVirtualMode();\n    this.setGroupWidth(\"100%\");\n    this.setGroupHeight(\"auto\");\n    this.resetColumnsWidth();\n\n    if (tableElement) {\n      for (var i = 0; i < tableElement.rows.length; i++) {\n        tableElement.rows[i].style.height = \"\";\n      }\n\n      tableElement.style.height = \"\";\n      tableElement.style.width = \"100%\";\n    }\n  },\n  _updateFakeTableVisibility: function _updateFakeTableVisibility() {\n    var tableElement = this.tableElement()[0];\n    var horizontalOffsetName = this.option(\"rtlEnabled\") ? \"right\" : \"left\";\n    var fakeTableElement = this._fakeTable[0];\n\n    if (tableElement.style.top === fakeTableElement.style.top && fakeTableElement.style[horizontalOffsetName] === tableElement.style[horizontalOffsetName]) {\n      this._fakeTable.addClass(\"dx-hidden\");\n    } else {\n      this._fakeTable.removeClass(\"dx-hidden\");\n    }\n  },\n  _moveFakeTableHorizontally: function _moveFakeTableHorizontally(scrollPos) {\n    var rtlEnabled = this.option(\"rtlEnabled\");\n    var offsetStyleName = rtlEnabled ? \"right\" : \"left\";\n    var tableElementOffset = parseFloat(this.tableElement()[0].style[offsetStyleName]);\n    var offset = getFakeTableOffset(scrollPos, tableElementOffset, this._tableWidth, this.getGroupWidth());\n\n    if (parseFloat(this._fakeTable[0].style[offsetStyleName]) !== offset) {\n      this._fakeTable[0].style[offsetStyleName] = offset + \"px\";\n    }\n  },\n  _moveFakeTableTop: function _moveFakeTableTop(scrollPos) {\n    var tableElementOffsetTop = parseFloat(this.tableElement()[0].style.top);\n    var offsetTop = getFakeTableOffset(scrollPos, tableElementOffsetTop, this._tableHeight, this.getGroupHeight());\n\n    if (parseFloat(this._fakeTable[0].style.top) !== offsetTop) {\n      this._fakeTable[0].style.top = offsetTop + \"px\";\n    }\n  },\n  _moveFakeTable: function _moveFakeTable() {\n    this._updateFakeTableVisibility();\n  },\n  _createFakeTable: function _createFakeTable() {\n    if (!this._fakeTable) {\n      this._fakeTable = this.tableElement().clone().addClass(\"dx-pivot-grid-fake-table\").appendTo(this._virtualContent);\n    }\n  },\n  render: function render(rootElement, data) {\n    if (this._tableElement) {\n      try {\n        this._tableElement[0].innerHTML = \"\";\n      } catch (e) {\n        this._tableElement.empty();\n      }\n\n      this._tableElement.attr(\"style\", \"\");\n    } else {\n      this._groupElement = this._createGroupElement();\n      this._tableElement = this._createTableElement();\n\n      this._tableElement.appendTo(this._groupElement);\n\n      this._groupElement.appendTo(rootElement);\n\n      this._rootElement = rootElement;\n    }\n\n    this._colgroupElement = $(\"<colgroup>\").appendTo(this._tableElement);\n\n    this._renderTableContent(this._tableElement, data);\n\n    this._renderVirtualContent();\n  },\n  _getScrollable: function _getScrollable() {\n    return this.groupElement().data(\"dxScrollable\");\n  },\n  _getMaxLeftOffset: function _getMaxLeftOffset(scrollable) {\n    var containerElement = $(scrollable.container()).get(0);\n    return containerElement.scrollWidth - containerElement.clientWidth;\n  },\n  on: function on(eventName, handler) {\n    var that = this;\n\n    var scrollable = that._getScrollable();\n\n    if (scrollable) {\n      scrollable.on(eventName, function (e) {\n        if (that.option(\"rtlEnabled\") && isDefined(e.scrollOffset.left)) {\n          e.scrollOffset.left = that._getMaxLeftOffset(scrollable) - e.scrollOffset.left;\n        }\n\n        handler(e);\n      });\n    }\n\n    return this;\n  },\n  off: function off(eventName) {\n    var scrollable = this._getScrollable();\n\n    if (scrollable) {\n      scrollable.off(eventName);\n    }\n\n    return this;\n  },\n  scrollTo: function scrollTo(pos) {\n    var scrollable = this._getScrollable();\n\n    var scrollablePos = pos;\n\n    if (scrollable) {\n      if (this.option(\"rtlEnabled\")) {\n        if (\"column\" === this._getAreaName()) {\n          scrollablePos = this._getMaxLeftOffset(scrollable) - pos.left;\n        } else if (\"data\" === this._getAreaName()) {\n          scrollablePos = {\n            left: this._getMaxLeftOffset(scrollable) - pos.left,\n            top: pos.top\n          };\n        }\n      }\n\n      scrollable.scrollTo(scrollablePos);\n\n      if (this._virtualContent) {\n        this._createFakeTable();\n\n        this._moveFakeTable(pos);\n      }\n    }\n  },\n  updateScrollable: function updateScrollable() {\n    var scrollable = this._getScrollable();\n\n    if (scrollable) {\n      return scrollable.update();\n    }\n  },\n  getColumnsCount: function getColumnsCount() {\n    var columnCount = 0;\n\n    var row = this._getRowElement(0);\n\n    var cells;\n\n    if (row) {\n      cells = row.cells;\n\n      for (var i = 0, len = cells.length; i < len; ++i) {\n        columnCount += cells[i].colSpan;\n      }\n    }\n\n    return columnCount;\n  },\n  getData: function getData() {\n    var tableElement = this._tableElement;\n    return tableElement ? tableElement.data(\"data\") : [];\n  }\n});","map":null,"metadata":{},"sourceType":"module"}