{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.dialog.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport { isDefined } from \"../../core/utils/type\";\nimport messageLocalization from \"../../localization/message\";\nimport Widget from \"../widget/ui.widget\";\nimport Popup from \"../popup\";\nvar FILE_MANAGER_DIALOG_CONTENT = \"dx-filemanager-dialog\";\nvar FILE_MANAGER_DIALOG_POPUP = \"dx-filemanager-dialog-popup\";\n\nvar FileManagerDialogBase = /*#__PURE__*/function (_Widget) {\n  _inherits(FileManagerDialogBase, _Widget);\n\n  var _super = _createSuper(FileManagerDialogBase);\n\n  function FileManagerDialogBase() {\n    _classCallCheck(this, FileManagerDialogBase);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FileManagerDialogBase, [{\n    key: \"_initMarkup\",\n    value: function _initMarkup() {\n      var _this = this;\n\n      _get(_getPrototypeOf(FileManagerDialogBase.prototype), \"_initMarkup\", this).call(this);\n\n      this._createOnClosedAction();\n\n      var options = this._getDialogOptions();\n\n      var $popup = $(\"<div>\").addClass(FILE_MANAGER_DIALOG_POPUP).appendTo(this.$element());\n\n      if (options.popupCssClass) {\n        $popup.addClass(options.popupCssClass);\n      }\n\n      var popupOptions = {\n        showTitle: true,\n        title: options.title,\n        visible: false,\n        closeOnOutsideClick: true,\n        copyRootClassesToWrapper: true,\n        _ignoreCopyRootClassesToWrapperDeprecation: true,\n        contentTemplate: this._createContentTemplate.bind(this),\n        toolbarItems: [{\n          widget: \"dxButton\",\n          toolbar: \"bottom\",\n          location: \"after\",\n          options: {\n            text: options.buttonText,\n            onClick: this._applyDialogChanges.bind(this)\n          }\n        }, {\n          widget: \"dxButton\",\n          toolbar: \"bottom\",\n          location: \"after\",\n          options: {\n            text: messageLocalization.format(\"dxFileManager-dialogButtonCancel\"),\n            onClick: this._closeDialog.bind(this)\n          }\n        }],\n        onInitialized: function onInitialized(_ref) {\n          var component = _ref.component;\n          component.registerKeyHandler(\"enter\", _this._applyDialogChanges.bind(_this));\n        },\n        onHidden: this._onPopupHidden.bind(this),\n        onShown: this._onPopupShown.bind(this)\n      };\n\n      if (isDefined(options.height)) {\n        popupOptions.height = options.height;\n      }\n\n      if (isDefined(options.maxHeight)) {\n        popupOptions.maxHeight = options.maxHeight;\n      }\n\n      this._popup = this._createComponent($popup, Popup, popupOptions);\n    }\n  }, {\n    key: \"show\",\n    value: function show() {\n      this._dialogResult = null;\n\n      this._popup.show();\n    }\n  }, {\n    key: \"_getDialogOptions\",\n    value: function _getDialogOptions() {\n      return {\n        title: \"Title\",\n        buttonText: \"ButtonText\",\n        contentCssClass: \"\",\n        popupCssClass: \"\"\n      };\n    }\n  }, {\n    key: \"_createContentTemplate\",\n    value: function _createContentTemplate(element) {\n      this._$contentElement = $(\"<div>\").appendTo(element).addClass(FILE_MANAGER_DIALOG_CONTENT);\n\n      var cssClass = this._getDialogOptions().contentCssClass;\n\n      if (cssClass) {\n        this._$contentElement.addClass(cssClass);\n      }\n    }\n  }, {\n    key: \"_getDialogResult\",\n    value: function _getDialogResult() {\n      return null;\n    }\n  }, {\n    key: \"_applyDialogChanges\",\n    value: function _applyDialogChanges() {\n      var result = this._getDialogResult();\n\n      if (result) {\n        this._dialogResult = result;\n\n        this._closeDialog();\n      }\n    }\n  }, {\n    key: \"_closeDialog\",\n    value: function _closeDialog() {\n      this._popup.hide();\n    }\n  }, {\n    key: \"_onPopupHidden\",\n    value: function _onPopupHidden() {\n      this._onClosedAction({\n        dialogResult: this._dialogResult\n      });\n    }\n  }, {\n    key: \"_onPopupShown\",\n    value: function _onPopupShown() {}\n  }, {\n    key: \"_createOnClosedAction\",\n    value: function _createOnClosedAction() {\n      this._onClosedAction = this._createActionByOption(\"onClosed\");\n    }\n  }, {\n    key: \"_setTitle\",\n    value: function _setTitle(newTitle) {\n      this._popup.option(\"title\", newTitle);\n    }\n  }, {\n    key: \"_setButtonText\",\n    value: function _setButtonText(newText) {\n      this._popup.option(\"toolbarItems[0].options.text\", newText);\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function _getDefaultOptions() {\n      return extend(_get(_getPrototypeOf(FileManagerDialogBase.prototype), \"_getDefaultOptions\", this).call(this), {\n        onClosed: null\n      });\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function _optionChanged(args) {\n      var name = args.name;\n\n      switch (name) {\n        case \"onClosed\":\n          this._createOnPathChangedAction();\n\n          break;\n\n        default:\n          _get(_getPrototypeOf(FileManagerDialogBase.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }]);\n\n  return FileManagerDialogBase;\n}(Widget);\n\nexport default FileManagerDialogBase;","map":null,"metadata":{},"sourceType":"module"}