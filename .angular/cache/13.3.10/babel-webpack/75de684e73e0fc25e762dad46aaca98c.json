{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.keyboard_navigation.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getOuterHeight, getHeight, getWidth, getOuterWidth } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport domAdapter from \"../../core/dom_adapter\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport core from \"./ui.grid_core.modules\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nimport { isDefined, isEmptyObject } from \"../../core/utils/type\";\nimport { inArray } from \"../../core/utils/array\";\nimport { focused } from \"../widget/selectors\";\nimport { addNamespace, createEvent, isCommandKeyPressed } from \"../../events/utils/index\";\nimport pointerEvents from \"../../events/pointer\";\nimport { name as clickEventName } from \"../../events/click\";\nimport { noop } from \"../../core/utils/common\";\nimport * as accessibility from \"../shared/accessibility\";\nimport browser from \"../../core/utils/browser\";\nimport { keyboard } from \"../../events/short\";\nimport devices from \"../../core/devices\";\nvar ROWS_VIEW_CLASS = \"rowsview\";\nvar EDIT_FORM_CLASS = \"edit-form\";\nvar GROUP_FOOTER_CLASS = \"group-footer\";\nvar ROW_CLASS = \"dx-row\";\nvar DATA_ROW_CLASS = \"dx-data-row\";\nvar GROUP_ROW_CLASS = \"dx-group-row\";\nvar HEADER_ROW_CLASS = \"dx-header-row\";\nvar EDIT_FORM_ITEM_CLASS = \"edit-form-item\";\nvar MASTER_DETAIL_ROW_CLASS = \"dx-master-detail-row\";\nvar FREESPACE_ROW_CLASS = \"dx-freespace-row\";\nvar VIRTUAL_ROW_CLASS = \"dx-virtual-row\";\nvar MASTER_DETAIL_CELL_CLASS = \"dx-master-detail-cell\";\nvar EDITOR_CELL_CLASS = \"dx-editor-cell\";\nvar DROPDOWN_EDITOR_OVERLAY_CLASS = \"dx-dropdowneditor-overlay\";\nvar COMMAND_EXPAND_CLASS = \"dx-command-expand\";\nvar COMMAND_SELECT_CLASS = \"dx-command-select\";\nvar COMMAND_EDIT_CLASS = \"dx-command-edit\";\nvar COMMAND_CELL_SELECTOR = \"[class^=dx-command]\";\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\nvar DATEBOX_WIDGET_NAME = \"dxDateBox\";\nvar FOCUS_STATE_CLASS = \"dx-state-focused\";\nvar WIDGET_CLASS = \"dx-widget\";\nvar REVERT_BUTTON_CLASS = \"dx-revert-button\";\nvar FAST_EDITING_DELETE_KEY = \"delete\";\nvar INTERACTIVE_ELEMENTS_SELECTOR = \"input:not([type='hidden']), textarea, a, select, button, [tabindex], .dx-checkbox\";\nvar NON_FOCUSABLE_ELEMENTS_SELECTOR = \"\".concat(INTERACTIVE_ELEMENTS_SELECTOR, \", .dx-dropdowneditor-icon\");\nvar EDIT_MODE_ROW = \"row\";\nvar EDIT_MODE_FORM = \"form\";\nvar EDIT_MODE_BATCH = \"batch\";\nvar EDIT_MODE_CELL = \"cell\";\nvar FOCUS_TYPE_ROW = \"row\";\nvar FOCUS_TYPE_CELL = \"cell\";\nvar COLUMN_HEADERS_VIEW = \"columnHeadersView\";\n\nfunction isGroupRow($row) {\n  return $row && $row.hasClass(GROUP_ROW_CLASS);\n}\n\nfunction isDetailRow($row) {\n  return $row && $row.hasClass(MASTER_DETAIL_ROW_CLASS);\n}\n\nfunction isDataRow($row) {\n  return $row && !isGroupRow($row) && !isDetailRow($row);\n}\n\nfunction isNotFocusedRow($row) {\n  return !$row || $row.hasClass(FREESPACE_ROW_CLASS) || $row.hasClass(VIRTUAL_ROW_CLASS);\n}\n\nfunction isCellElement($element) {\n  return $element.length && \"TD\" === $element[0].tagName;\n}\n\nfunction isEditorCell(that, $cell) {\n  return !that._isRowEditMode() && $cell && !$cell.hasClass(COMMAND_SELECT_CLASS) && $cell.hasClass(EDITOR_CELL_CLASS);\n}\n\nfunction isElementDefined($element) {\n  return isDefined($element) && $element.length > 0;\n}\n\nfunction isMobile() {\n  return \"desktop\" !== devices.current().deviceType;\n}\n\nfunction isCellInHeaderRow($cell) {\n  return !!$cell.parent(\".\".concat(HEADER_ROW_CLASS)).length;\n}\n\nfunction isFixedColumnIndexOffsetRequired(that, column) {\n  var rtlEnabled = that.option(\"rtlEnabled\");\n  var result = false;\n\n  if (rtlEnabled) {\n    result = !(\"right\" === column.fixedPosition || isDefined(column.command) && !isDefined(column.fixedPosition));\n  } else {\n    result = !(!isDefined(column.fixedPosition) || \"left\" === column.fixedPosition);\n  }\n\n  return result;\n}\n\nfunction shouldPreventScroll(that) {\n  var keyboardController = that.getController(\"keyboardNavigation\");\n  return keyboardController._isVirtualScrolling() ? that.option(\"focusedRowIndex\") === keyboardController.getRowIndex() : false;\n}\n\nvar KeyboardNavigationController = core.ViewController.inherit({\n  init: function init() {\n    var _this = this;\n\n    this._dataController = this.getController(\"data\");\n    this._selectionController = this.getController(\"selection\");\n    this._editingController = this.getController(\"editing\");\n    this._headerPanel = this.getView(\"headerPanel\");\n    this._columnsController = this.getController(\"columns\");\n    this._editorFactory = this.getController(\"editorFactory\");\n\n    if (this.isKeyboardEnabled()) {\n      accessibility.subscribeVisibilityChange();\n      this._updateFocusTimeout = null;\n      this._fastEditingStarted = false;\n      this._focusedCellPosition = {};\n      this._canceledCellPosition = null;\n\n      this._editorFactory.focused.add(function ($element) {\n        _this.setupFocusedView();\n\n        if (_this._isNeedScroll) {\n          if ($element.is(\":visible\") && _this._focusedView && _this._focusedView.getScrollable) {\n            _this._focusedView._scrollToElement($element);\n\n            _this._isNeedScroll = false;\n          }\n        }\n      });\n\n      this._initViewHandlers();\n\n      this._initDocumentHandlers();\n\n      this.createAction(\"onKeyDown\");\n    }\n  },\n  _initViewHandlers: function _initViewHandlers() {\n    var _this2 = this;\n\n    var rowsView = this.getView(\"rowsView\");\n\n    var rowsViewFocusHandler = function rowsViewFocusHandler(event) {\n      var $element = $(event.target);\n      var isRelatedTargetInRowsView = $(event.relatedTarget).closest(rowsView.element()).length;\n      var isCommandButton = $element.hasClass(\"dx-link\");\n\n      if (isCommandButton && !isRelatedTargetInRowsView && _this2._isEventInCurrentGrid(event)) {\n        var $focusedCell = _this2._getFocusedCell();\n\n        $focusedCell = !isElementDefined($focusedCell) ? rowsView.getCellElements(0).filter(\"[tabindex]\").eq(0) : $focusedCell;\n\n        if (!$element.closest($focusedCell).length) {\n          event.preventDefault();\n          eventsEngine.trigger($focusedCell, \"focus\");\n        }\n      }\n    };\n\n    rowsView.renderCompleted.add(function (e) {\n      var $rowsView = rowsView.element();\n      var isFullUpdate = !e || \"refresh\" === e.changeType;\n      var isFocusedViewCorrect = _this2._focusedView && _this2._focusedView.name === rowsView.name;\n      var needUpdateFocus = false;\n      var isAppend = e && (\"append\" === e.changeType || \"prepend\" === e.changeType);\n      var $focusedElement = $(\":focus\");\n      var isFocusedElementCorrect = !$focusedElement.length || $focusedElement.closest($rowsView).length;\n      eventsEngine.off($rowsView, \"focusin\", rowsViewFocusHandler);\n      eventsEngine.on($rowsView, \"focusin\", rowsViewFocusHandler);\n\n      _this2._initPointerEventHandler();\n\n      _this2._initKeyDownHandler();\n\n      _this2._setRowsViewAttributes();\n\n      if (isFocusedViewCorrect && isFocusedElementCorrect) {\n        needUpdateFocus = _this2._isNeedFocus ? !isAppend : _this2._isHiddenFocus && isFullUpdate;\n        needUpdateFocus && _this2._updateFocus(true);\n      }\n    });\n  },\n  _initDocumentHandlers: function _initDocumentHandlers() {\n    var _this3 = this;\n\n    var document = domAdapter.getDocument();\n    this._documentClickHandler = this.createAction(function (e) {\n      var $target = $(e.event.target);\n      var isCurrentRowsViewClick = _this3._isEventInCurrentGrid(e.event) && $target.closest(\".\".concat(_this3.addWidgetPrefix(ROWS_VIEW_CLASS))).length;\n      var isEditorOverlay = $target.closest(\".\".concat(DROPDOWN_EDITOR_OVERLAY_CLASS)).length;\n\n      var columnsResizerController = _this3.getController(\"columnsResizer\");\n\n      var isColumnResizing = !!columnsResizerController && columnsResizerController.isResizing();\n\n      if (!isCurrentRowsViewClick && !isEditorOverlay && !isColumnResizing) {\n        var targetInsideFocusedView = _this3._focusedView ? $target.parents().filter(_this3._focusedView.element()).length > 0 : false;\n        !targetInsideFocusedView && _this3._resetFocusedCell(true);\n\n        _this3._resetFocusedView();\n      }\n    });\n    eventsEngine.on(document, addNamespace(pointerEvents.down, \"dxDataGridKeyboardNavigation\"), this._documentClickHandler);\n  },\n  _setRowsViewAttributes: function _setRowsViewAttributes() {\n    var $rowsView = this._getRowsViewElement();\n\n    var isGridEmpty = !this._dataController.getVisibleRows().length;\n\n    if (isGridEmpty) {\n      this._applyTabIndexToElement($rowsView);\n    }\n  },\n  _initPointerEventHandler: function _initPointerEventHandler() {\n    var pointerEventName = !isMobile() ? pointerEvents.down : clickEventName;\n    var clickSelector = \".\".concat(ROW_CLASS, \" > td, .\").concat(ROW_CLASS);\n\n    var $rowsView = this._getRowsViewElement();\n\n    if (!isDefined(this._pointerEventAction)) {\n      this._pointerEventAction = this.createAction(this._pointerEventHandler);\n    }\n\n    eventsEngine.off($rowsView, addNamespace(pointerEventName, \"dxDataGridKeyboardNavigation\"), this._pointerEventAction);\n    eventsEngine.on($rowsView, addNamespace(pointerEventName, \"dxDataGridKeyboardNavigation\"), clickSelector, this._pointerEventAction);\n  },\n  _initKeyDownHandler: function _initKeyDownHandler() {\n    var _this4 = this;\n\n    var $rowsView = this._getRowsViewElement();\n\n    keyboard.off(this._keyDownListener);\n    this._keyDownListener = keyboard.on($rowsView, null, function (e) {\n      return _this4._keyDownHandler(e);\n    });\n  },\n  dispose: function dispose() {\n    this.callBase();\n\n    this._resetFocusedView();\n\n    keyboard.off(this._keyDownListener);\n    eventsEngine.off(domAdapter.getDocument(), addNamespace(pointerEvents.down, \"dxDataGridKeyboardNavigation\"), this._documentClickHandler);\n    clearTimeout(this._updateFocusTimeout);\n    accessibility.unsubscribeVisibilityChange();\n  },\n  optionChanged: function optionChanged(args) {\n    switch (args.name) {\n      case \"keyboardNavigation\":\n      case \"useLegacyKeyboardNavigation\":\n        args.handled = true;\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  isRowFocusType: function isRowFocusType() {\n    return this.focusType === FOCUS_TYPE_ROW;\n  },\n  isCellFocusType: function isCellFocusType() {\n    return this.focusType === FOCUS_TYPE_CELL;\n  },\n  setRowFocusType: function setRowFocusType() {\n    if (this.option(\"focusedRowEnabled\")) {\n      this.focusType = FOCUS_TYPE_ROW;\n    }\n  },\n  setCellFocusType: function setCellFocusType() {\n    this.focusType = FOCUS_TYPE_CELL;\n  },\n  _keyDownHandler: function _keyDownHandler(e) {\n    var needStopPropagation = true;\n\n    var isHandled = this._processOnKeyDown(e);\n\n    var isEditing = this._editingController.isEditing();\n\n    var originalEvent = e.originalEvent;\n\n    if (originalEvent.isDefaultPrevented()) {\n      return;\n    }\n\n    this._isNeedFocus = true;\n    this._isNeedScroll = true;\n\n    this._updateFocusedCellPositionByTarget(originalEvent.target);\n\n    if (!isHandled) {\n      switch (e.keyName) {\n        case \"leftArrow\":\n        case \"rightArrow\":\n          this._leftRightKeysHandler(e, isEditing);\n\n          isHandled = true;\n          break;\n\n        case \"upArrow\":\n        case \"downArrow\":\n          if (e.ctrl) {\n            accessibility.selectView(\"rowsView\", this, originalEvent);\n          } else {\n            this._upDownKeysHandler(e, isEditing);\n          }\n\n          isHandled = true;\n          break;\n\n        case \"pageUp\":\n        case \"pageDown\":\n          this._pageUpDownKeyHandler(e);\n\n          isHandled = true;\n          break;\n\n        case \"space\":\n          this._spaceKeyHandler(e, isEditing);\n\n          isHandled = true;\n          break;\n\n        case \"A\":\n          if (isCommandKeyPressed(e.originalEvent)) {\n            this._ctrlAKeyHandler(e, isEditing);\n\n            isHandled = true;\n          } else {\n            isHandled = this._beginFastEditing(e.originalEvent);\n          }\n\n          break;\n\n        case \"tab\":\n          this._tabKeyHandler(e, isEditing);\n\n          isHandled = true;\n          break;\n\n        case \"enter\":\n          this._enterKeyHandler(e, isEditing);\n\n          isHandled = true;\n          break;\n\n        case \"escape\":\n          this._escapeKeyHandler(e, isEditing);\n\n          isHandled = true;\n          break;\n\n        case \"F\":\n          if (isCommandKeyPressed(e.originalEvent)) {\n            this._ctrlFKeyHandler(e);\n\n            isHandled = true;\n          } else {\n            isHandled = this._beginFastEditing(e.originalEvent);\n          }\n\n          break;\n\n        case \"F2\":\n          this._f2KeyHandler();\n\n          isHandled = true;\n          break;\n\n        case \"del\":\n        case \"backspace\":\n          if (this._isFastEditingAllowed() && !this._isFastEditingStarted()) {\n            isHandled = this._beginFastEditing(originalEvent, true);\n          }\n\n      }\n\n      if (!isHandled && !this._beginFastEditing(originalEvent)) {\n        this._isNeedFocus = false;\n        this._isNeedScroll = false;\n        needStopPropagation = false;\n      }\n\n      if (needStopPropagation) {\n        originalEvent.stopPropagation();\n      }\n    }\n  },\n  _processOnKeyDown: function _processOnKeyDown(eventArgs) {\n    var originalEvent = eventArgs.originalEvent;\n    var args = {\n      handled: false,\n      event: originalEvent\n    };\n    this.executeAction(\"onKeyDown\", args);\n    eventArgs.ctrl = originalEvent.ctrlKey;\n    eventArgs.alt = originalEvent.altKey;\n    eventArgs.shift = originalEvent.shiftKey;\n    return !!args.handled;\n  },\n  _closeEditCell: function _closeEditCell() {\n    var _this5 = this;\n\n    setTimeout(function () {\n      _this5._editingController.closeEditCell();\n    });\n  },\n  _leftRightKeysHandler: function _leftRightKeysHandler(eventArgs, isEditing) {\n    var rowIndex = this.getVisibleRowIndex();\n    var $event = eventArgs.originalEvent;\n\n    var $row = this._focusedView && this._focusedView.getRow(rowIndex);\n\n    var directionCode = this._getDirectionCodeByKey(eventArgs.keyName);\n\n    var isEditingNavigationMode = this._isFastEditingStarted();\n\n    var allowNavigate = (!isEditing || isEditingNavigationMode) && isDataRow($row);\n\n    if (allowNavigate) {\n      this.setCellFocusType();\n      isEditingNavigationMode && this._closeEditCell();\n\n      if (this._isVirtualColumnRender()) {\n        this._processVirtualHorizontalPosition(directionCode);\n      }\n\n      var $cell = this._getNextCell(directionCode);\n\n      if (isElementDefined($cell)) {\n        this._arrowKeysHandlerFocusCell($event, $cell, directionCode);\n      }\n\n      $event && $event.preventDefault();\n    }\n  },\n  _upDownKeysHandler: function _upDownKeysHandler(eventArgs, isEditing) {\n    var rowIndex = this._focusedCellPosition.rowIndex;\n    var visibleRowIndex = this.getVisibleRowIndex();\n\n    var $row = this._focusedView && this._focusedView.getRow(visibleRowIndex);\n\n    var $event = eventArgs.originalEvent;\n    var isUpArrow = \"upArrow\" === eventArgs.keyName;\n\n    var dataSource = this._dataController.dataSource();\n\n    var isEditingNavigationMode = this._isFastEditingStarted();\n\n    var allowNavigate = (!isEditing || isEditingNavigationMode) && $row && !isDetailRow($row);\n\n    if (allowNavigate) {\n      isEditingNavigationMode && this._closeEditCell();\n\n      if (!this._navigateNextCell($event, eventArgs.keyName)) {\n        if (this._isVirtualRowRender() && isUpArrow && dataSource && !dataSource.isLoading()) {\n          var rowHeight = getOuterHeight($row);\n          rowIndex = this._focusedCellPosition.rowIndex - 1;\n\n          this._scrollBy(0, -rowHeight, rowIndex, $event);\n        }\n      }\n\n      $event && $event.preventDefault();\n    }\n  },\n  _pageUpDownKeyHandler: function _pageUpDownKeyHandler(eventArgs) {\n    var pageIndex = this._dataController.pageIndex();\n\n    var pageCount = this._dataController.pageCount();\n\n    var pagingEnabled = this.option(\"paging.enabled\");\n    var isPageUp = \"pageUp\" === eventArgs.keyName;\n    var pageStep = isPageUp ? -1 : 1;\n    var scrollable = this.getView(\"rowsView\").getScrollable();\n\n    if (pagingEnabled && !this._isVirtualScrolling()) {\n      if ((isPageUp ? pageIndex > 0 : pageIndex < pageCount - 1) && !this._isVirtualScrolling()) {\n        this._dataController.pageIndex(pageIndex + pageStep);\n\n        eventArgs.originalEvent.preventDefault();\n      }\n    } else if (scrollable && getHeight(scrollable.container()) < getHeight(scrollable.$content())) {\n      this._scrollBy(0, getHeight(scrollable.container()) * pageStep);\n\n      eventArgs.originalEvent.preventDefault();\n    }\n  },\n  _spaceKeyHandler: function _spaceKeyHandler(eventArgs, isEditing) {\n    var rowIndex = this.getVisibleRowIndex();\n    var $target = $(eventArgs.originalEvent && eventArgs.originalEvent.target);\n\n    if (this.option(\"selection\") && \"none\" !== this.option(\"selection\").mode && !isEditing) {\n      var isFocusedRowElement = \"row\" === this._getElementType($target) && this.isRowFocusType() && isDataRow($target);\n      var isFocusedSelectionCell = $target.hasClass(COMMAND_SELECT_CLASS);\n\n      if (isFocusedSelectionCell && \"onClick\" === this.option(\"selection.showCheckBoxesMode\")) {\n        this._selectionController.startSelectionWithCheckboxes();\n      }\n\n      if (isFocusedRowElement || $target.parent().hasClass(DATA_ROW_CLASS) || $target.hasClass(this.addWidgetPrefix(ROWS_VIEW_CLASS))) {\n        this._selectionController.changeItemSelection(rowIndex, {\n          shift: eventArgs.shift,\n          control: eventArgs.ctrl\n        });\n\n        eventArgs.originalEvent.preventDefault();\n      }\n    } else {\n      this._beginFastEditing(eventArgs.originalEvent);\n    }\n  },\n  _ctrlAKeyHandler: function _ctrlAKeyHandler(eventArgs, isEditing) {\n    if (!isEditing && !eventArgs.alt && \"multiple\" === this.option(\"selection.mode\") && this.option(\"selection.allowSelectAll\")) {\n      this._selectionController.selectAll();\n\n      eventArgs.originalEvent.preventDefault();\n    }\n  },\n  _tabKeyHandler: function _tabKeyHandler(eventArgs, isEditing) {\n    var editingOptions = this.option(\"editing\");\n    var direction = eventArgs.shift ? \"previous\" : \"next\";\n    var isCellPositionDefined = isDefined(this._focusedCellPosition) && !isEmptyObject(this._focusedCellPosition);\n\n    var isOriginalHandlerRequired = !isCellPositionDefined || !eventArgs.shift && this._isLastValidCell(this._focusedCellPosition) || eventArgs.shift && this._isFirstValidCell(this._focusedCellPosition);\n\n    var eventTarget = eventArgs.originalEvent.target;\n\n    var focusedViewElement = this._focusedView && this._focusedView.element();\n\n    if (this._handleTabKeyOnMasterDetailCell(eventTarget, direction)) {\n      return;\n    }\n\n    $(focusedViewElement).addClass(FOCUS_STATE_CLASS);\n\n    if (editingOptions && eventTarget && !isOriginalHandlerRequired) {\n      if ($(eventTarget).hasClass(this.addWidgetPrefix(ROWS_VIEW_CLASS))) {\n        this._resetFocusedCell();\n      }\n\n      if (this._isVirtualColumnRender()) {\n        this._processVirtualHorizontalPosition(direction);\n      }\n\n      if (isEditing) {\n        if (!this._editingCellTabHandler(eventArgs, direction)) {\n          return;\n        }\n      } else if (this._targetCellTabHandler(eventArgs, direction)) {\n        isOriginalHandlerRequired = true;\n      }\n    }\n\n    if (isOriginalHandlerRequired) {\n      this._editorFactory.loseFocus();\n\n      if (this._editingController.isEditing() && !this._isRowEditMode()) {\n        this._resetFocusedCell(true);\n\n        this._resetFocusedView();\n\n        this._closeEditCell();\n      }\n    } else {\n      eventArgs.originalEvent.preventDefault();\n    }\n  },\n  _getMaxHorizontalOffset: function _getMaxHorizontalOffset() {\n    var scrollable = this.component.getScrollable();\n    var rowsView = this.getView(\"rowsView\");\n    var offset = scrollable ? scrollable.scrollWidth() - getWidth(rowsView.element()) : 0;\n    return offset;\n  },\n  _isColumnRendered: function _isColumnRendered(columnIndex) {\n    var allVisibleColumns = this._columnsController.getVisibleColumns(null, true);\n\n    var renderedVisibleColumns = this._columnsController.getVisibleColumns();\n\n    var column = allVisibleColumns[columnIndex];\n    var result = false;\n\n    if (column) {\n      result = renderedVisibleColumns.indexOf(column) >= 0;\n    }\n\n    return result;\n  },\n  _isFixedColumn: function _isFixedColumn(columnIndex) {\n    var allVisibleColumns = this._columnsController.getVisibleColumns(null, true);\n\n    var column = allVisibleColumns[columnIndex];\n    return !!column && !!column.fixed;\n  },\n  _isColumnVirtual: function _isColumnVirtual(columnIndex) {\n    var localColumnIndex = columnIndex - this._columnsController.getColumnIndexOffset();\n\n    var visibleColumns = this._columnsController.getVisibleColumns();\n\n    var column = visibleColumns[localColumnIndex];\n    return !!column && \"virtual\" === column.command;\n  },\n  _processVirtualHorizontalPosition: function _processVirtualHorizontalPosition(direction) {\n    var scrollable = this.component.getScrollable();\n    var columnIndex = this.getColumnIndex();\n    var nextColumnIndex;\n    var horizontalScrollPosition = 0;\n    var needToScroll = false;\n\n    switch (direction) {\n      case \"next\":\n      case \"nextInRow\":\n        var columnsCount = this._getVisibleColumnCount();\n\n        nextColumnIndex = columnIndex + 1;\n        horizontalScrollPosition = this.option(\"rtlEnabled\") ? this._getMaxHorizontalOffset() : 0;\n\n        if (\"next\" === direction) {\n          needToScroll = columnsCount === nextColumnIndex || this._isFixedColumn(columnIndex) && !this._isColumnRendered(nextColumnIndex);\n        } else {\n          needToScroll = columnsCount > nextColumnIndex && this._isFixedColumn(columnIndex) && !this._isColumnRendered(nextColumnIndex);\n        }\n\n        break;\n\n      case \"previous\":\n      case \"previousInRow\":\n        nextColumnIndex = columnIndex - 1;\n        horizontalScrollPosition = this.option(\"rtlEnabled\") ? 0 : this._getMaxHorizontalOffset();\n\n        if (\"previous\" === direction) {\n          var columnIndexOffset = this._columnsController.getColumnIndexOffset();\n\n          var leftEdgePosition = nextColumnIndex < 0 && 0 === columnIndexOffset;\n          needToScroll = leftEdgePosition || this._isFixedColumn(columnIndex) && !this._isColumnRendered(nextColumnIndex);\n        } else {\n          needToScroll = nextColumnIndex >= 0 && this._isFixedColumn(columnIndex) && !this._isColumnRendered(nextColumnIndex);\n        }\n\n    }\n\n    if (needToScroll) {\n      scrollable.scrollTo({\n        left: horizontalScrollPosition\n      });\n    } else if (isDefined(nextColumnIndex) && isDefined(direction) && this._isColumnVirtual(nextColumnIndex)) {\n      horizontalScrollPosition = this._getHorizontalScrollPositionOffset(direction);\n      0 !== horizontalScrollPosition && scrollable.scrollBy({\n        left: horizontalScrollPosition,\n        top: 0\n      });\n    }\n  },\n  _getHorizontalScrollPositionOffset: function _getHorizontalScrollPositionOffset(direction) {\n    var positionOffset = 0;\n\n    var $currentCell = this._getCell(this._focusedCellPosition);\n\n    var currentCellWidth = $currentCell && getOuterWidth($currentCell);\n\n    if (currentCellWidth > 0) {\n      var rtlMultiplier = this.option(\"rtlEnabled\") ? -1 : 1;\n      positionOffset = \"nextInRow\" === direction || \"next\" === direction ? currentCellWidth * rtlMultiplier : currentCellWidth * rtlMultiplier * -1;\n    }\n\n    return positionOffset;\n  },\n  _editingCellTabHandler: function _editingCellTabHandler(eventArgs, direction) {\n    var eventTarget = eventArgs.originalEvent.target;\n\n    var $cell = this._getCellElementFromTarget(eventTarget);\n\n    var isEditingAllowed;\n    var $event = eventArgs.originalEvent;\n\n    var elementType = this._getElementType(eventTarget);\n\n    if ($cell.is(COMMAND_CELL_SELECTOR)) {\n      return !this._targetCellTabHandler(eventArgs, direction);\n    }\n\n    this._updateFocusedCellPosition($cell);\n\n    var nextCellInfo = this._getNextCellByTabKey($event, direction, elementType);\n\n    $cell = nextCellInfo.$cell;\n\n    if (!$cell || this._handleTabKeyOnMasterDetailCell($cell, direction)) {\n      return false;\n    }\n\n    var columnsController = this._columnsController;\n    var cellIndex = this.getView(\"rowsView\").getCellIndex($cell);\n    var columnIndex = cellIndex + columnsController.getColumnIndexOffset();\n    var column = columnsController.getVisibleColumns(null, true)[columnIndex];\n    var $row = $cell.parent();\n\n    var rowIndex = this._getRowIndex($row);\n\n    var row = this._dataController.items()[rowIndex];\n\n    var editingController = this._editingController;\n\n    if (column && column.allowEditing) {\n      var _isDataRow = !row || \"data\" === row.rowType;\n\n      isEditingAllowed = editingController.allowUpdating({\n        row: row\n      }) ? _isDataRow : row && row.isNewRow;\n    }\n\n    if (!isEditingAllowed) {\n      this._closeEditCell();\n    }\n\n    if (this._focusCell($cell, !nextCellInfo.isHighlighted)) {\n      if (!this._isRowEditMode() && isEditingAllowed) {\n        this._editFocusedCell();\n      } else {\n        this._focusInteractiveElement($cell, eventArgs.shift);\n      }\n    }\n\n    return true;\n  },\n  _targetCellTabHandler: function _targetCellTabHandler(eventArgs, direction) {\n    var $event = eventArgs.originalEvent;\n    var eventTarget = $event.target;\n\n    var $cell = this._getCellElementFromTarget(eventTarget);\n\n    var $lastInteractiveElement = this._getInteractiveElement($cell, !eventArgs.shift);\n\n    var isOriginalHandlerRequired = false;\n    var elementType;\n\n    if (!isEditorCell(this, $cell) && $lastInteractiveElement.length && eventTarget !== $lastInteractiveElement.get(0)) {\n      isOriginalHandlerRequired = true;\n    } else {\n      if (void 0 === this._focusedCellPosition.rowIndex && $(eventTarget).hasClass(ROW_CLASS)) {\n        this._updateFocusedCellPosition($cell);\n      }\n\n      elementType = this._getElementType(eventTarget);\n\n      if (this.isRowFocusType()) {\n        this.setCellFocusType();\n\n        if (\"row\" === elementType && isDataRow($(eventTarget))) {\n          eventTarget = this.getFirstValidCellInRow($(eventTarget));\n          elementType = this._getElementType(eventTarget);\n        }\n      }\n\n      var nextCellInfo = this._getNextCellByTabKey($event, direction, elementType);\n\n      $cell = nextCellInfo.$cell;\n\n      if (!$cell) {\n        return false;\n      }\n\n      $cell = this._checkNewLineTransition($event, $cell);\n\n      if (!$cell) {\n        return false;\n      }\n\n      this._focusCell($cell, !nextCellInfo.isHighlighted);\n\n      if (!isEditorCell(this, $cell)) {\n        this._focusInteractiveElement($cell, eventArgs.shift);\n      }\n    }\n\n    return isOriginalHandlerRequired;\n  },\n  _getNextCellByTabKey: function _getNextCellByTabKey($event, direction, elementType) {\n    var $cell = this._getNextCell(direction, elementType);\n\n    var args = $cell && this._fireFocusedCellChanging($event, $cell, true);\n\n    if (!args || args.cancel) {\n      return {};\n    }\n\n    if (args.$newCellElement) {\n      $cell = args.$newCellElement;\n    }\n\n    return {\n      $cell: $cell,\n      isHighlighted: args.isHighlighted\n    };\n  },\n  _checkNewLineTransition: function _checkNewLineTransition($event, $cell) {\n    var rowIndex = this.getVisibleRowIndex();\n    var $row = $cell.parent();\n\n    if (rowIndex !== this._getRowIndex($row)) {\n      var cellPosition = this._getCellPosition($cell);\n\n      var args = this._fireFocusedRowChanging($event, $row);\n\n      if (args.cancel) {\n        return;\n      }\n\n      if (args.rowIndexChanged) {\n        this.setFocusedColumnIndex(cellPosition.columnIndex);\n        $cell = this._getFocusedCell();\n      }\n    }\n\n    return $cell;\n  },\n  _enterKeyHandler: function _enterKeyHandler(eventArgs, isEditing) {\n    var $cell = this._getFocusedCell();\n\n    var rowIndex = this.getVisibleRowIndex();\n\n    var $row = this._focusedView && this._focusedView.getRow(rowIndex);\n\n    if (this.option(\"grouping.allowCollapsing\") && isGroupRow($row) || this.option(\"masterDetail.enabled\") && $cell && $cell.hasClass(COMMAND_EXPAND_CLASS)) {\n      var key = this._dataController.getKeyByRowIndex(rowIndex);\n\n      var item = this._dataController.items()[rowIndex];\n\n      if (void 0 !== key && item && item.data && !item.data.isContinuation) {\n        this._dataController.changeRowExpand(key);\n      }\n    } else {\n      this._processEnterKeyForDataCell(eventArgs, isEditing);\n    }\n  },\n  _processEnterKeyForDataCell: function _processEnterKeyForDataCell(eventArgs, isEditing) {\n    var direction = this._getEnterKeyDirection(eventArgs);\n\n    var allowEditingOnEnterKey = this._allowEditingOnEnterKey();\n\n    if (isEditing || !allowEditingOnEnterKey && direction) {\n      this._handleEnterKeyEditingCell(eventArgs.originalEvent);\n\n      if (\"next\" === direction || \"previous\" === direction) {\n        this._targetCellTabHandler(eventArgs, direction);\n      } else if (\"upArrow\" === direction || \"downArrow\" === direction) {\n        this._navigateNextCell(eventArgs.originalEvent, direction);\n      }\n    } else if (allowEditingOnEnterKey) {\n      this._startEditing(eventArgs);\n    }\n  },\n  _getEnterKeyDirection: function _getEnterKeyDirection(eventArgs) {\n    var enterKeyDirection = this.option(\"keyboardNavigation.enterKeyDirection\");\n    var isShift = eventArgs.shift;\n\n    if (\"column\" === enterKeyDirection) {\n      return isShift ? \"upArrow\" : \"downArrow\";\n    }\n\n    if (\"row\" === enterKeyDirection) {\n      return isShift ? \"previous\" : \"next\";\n    }\n  },\n  _handleEnterKeyEditingCell: function _handleEnterKeyEditingCell(event) {\n    var target = event.target;\n\n    var $cell = this._getCellElementFromTarget(target);\n\n    var isRowEditMode = this._isRowEditMode();\n\n    this._updateFocusedCellPosition($cell);\n\n    if (isRowEditMode) {\n      this._focusEditFormCell($cell);\n\n      setTimeout(this._editingController.saveEditData.bind(this._editingController));\n    } else {\n      eventsEngine.trigger($(target), \"change\");\n\n      this._closeEditCell();\n\n      event.preventDefault();\n    }\n  },\n  _escapeKeyHandler: function _escapeKeyHandler(eventArgs, isEditing) {\n    var $cell = this._getCellElementFromTarget(eventArgs.originalEvent.target);\n\n    if (isEditing) {\n      this._updateFocusedCellPosition($cell);\n\n      if (!this._isRowEditMode()) {\n        if (\"cell\" === this._editingController.getEditMode()) {\n          this._editingController.cancelEditData();\n        } else {\n          this._closeEditCell();\n        }\n      } else {\n        this._focusEditFormCell($cell);\n\n        this._editingController.cancelEditData();\n\n        if (0 === this._dataController.items().length) {\n          this._resetFocusedCell();\n\n          this._editorFactory.loseFocus();\n        }\n      }\n\n      eventArgs.originalEvent.preventDefault();\n    }\n  },\n  _ctrlFKeyHandler: function _ctrlFKeyHandler(eventArgs) {\n    if (this.option(\"searchPanel.visible\")) {\n      var searchTextEditor = this._headerPanel.getSearchTextEditor();\n\n      if (searchTextEditor) {\n        searchTextEditor.focus();\n        eventArgs.originalEvent.preventDefault();\n      }\n    }\n  },\n  _f2KeyHandler: function _f2KeyHandler() {\n    var isEditing = this._editingController.isEditing();\n\n    var rowIndex = this.getVisibleRowIndex();\n\n    var $row = this._focusedView && this._focusedView.getRow(rowIndex);\n\n    if (!isEditing && isDataRow($row)) {\n      this._startEditing();\n    }\n  },\n  _navigateNextCell: function _navigateNextCell($event, keyCode) {\n    var $cell = this._getNextCell(keyCode);\n\n    var directionCode = this._getDirectionCodeByKey(keyCode);\n\n    var isCellValid = $cell && this._isCellValid($cell);\n\n    var result = isCellValid ? this._arrowKeysHandlerFocusCell($event, $cell, directionCode) : false;\n    return result;\n  },\n  _arrowKeysHandlerFocusCell: function _arrowKeysHandlerFocusCell($event, $nextCell, direction) {\n    var isVerticalDirection = \"prevRow\" === direction || \"nextRow\" === direction;\n\n    var args = this._fireFocusChangingEvents($event, $nextCell, isVerticalDirection, true);\n\n    $nextCell = args.$newCellElement;\n\n    if (!args.cancel && this._isCellValid($nextCell)) {\n      this._focus($nextCell, !args.isHighlighted);\n\n      return true;\n    }\n\n    return false;\n  },\n  _beginFastEditing: function _beginFastEditing(originalEvent, isDeleting) {\n    if (!this._isFastEditingAllowed() || originalEvent.altKey || originalEvent.ctrlKey || this._editingController.isEditing()) {\n      return false;\n    }\n\n    if (isDeleting) {\n      this._startEditing(originalEvent, FAST_EDITING_DELETE_KEY);\n    } else {\n      var key = originalEvent.key;\n      var keyCode = originalEvent.keyCode || originalEvent.which;\n      var fastEditingKey = key || keyCode && String.fromCharCode(keyCode);\n\n      if (fastEditingKey && (1 === fastEditingKey.length || fastEditingKey === FAST_EDITING_DELETE_KEY)) {\n        this._startEditing(originalEvent, fastEditingKey);\n      }\n    }\n\n    return true;\n  },\n  _pointerEventHandler: function _pointerEventHandler(e) {\n    var event = e.event || e;\n    var $target = $(event.currentTarget);\n    var rowsView = this.getView(\"rowsView\");\n    var focusedViewElement = rowsView && rowsView.element();\n    var $parent = $target.parent();\n    var isInteractiveElement = $(event.target).is(INTERACTIVE_ELEMENTS_SELECTOR);\n    var isRevertButton = !!$(event.target).closest(\".\".concat(REVERT_BUTTON_CLASS)).length;\n    var isExpandCommandCell = $target.hasClass(COMMAND_EXPAND_CLASS);\n\n    if (!this._isEventInCurrentGrid(event)) {\n      return;\n    }\n\n    if (!isRevertButton && (this._isCellValid($target, !isInteractiveElement) || isExpandCommandCell)) {\n      $target = this._isInsideEditForm($target) ? $(event.target) : $target;\n\n      this._focusView();\n\n      $(focusedViewElement).removeClass(FOCUS_STATE_CLASS);\n\n      if ($parent.hasClass(FREESPACE_ROW_CLASS)) {\n        this._updateFocusedCellPosition($target);\n\n        this._applyTabIndexToElement(this._focusedView.element());\n\n        this._focusedView.focus();\n      } else if (!this._isMasterDetailCell($target)) {\n        this._clickTargetCellHandler(event, $target);\n      } else {\n        this._updateFocusedCellPosition($target);\n      }\n    } else if ($target.is(\"td\")) {\n      this._resetFocusedCell();\n    }\n  },\n  _clickTargetCellHandler: function _clickTargetCellHandler(event, $cell) {\n    var columnIndex = this.getView(\"rowsView\").getCellIndex($cell);\n\n    var column = this._columnsController.getVisibleColumns()[columnIndex];\n\n    var isCellEditMode = this._isCellEditMode();\n\n    this.setCellFocusType();\n\n    var args = this._fireFocusChangingEvents(event, $cell, true);\n\n    $cell = args.$newCellElement;\n\n    if (!args.cancel) {\n      if (args.resetFocusedRow) {\n        this.getController(\"focus\")._resetFocusedRow();\n\n        return;\n      }\n\n      if (args.rowIndexChanged) {\n        $cell = this._getFocusedCell();\n      }\n\n      if (!args.isHighlighted && !isCellEditMode) {\n        this.setRowFocusType();\n      }\n\n      this._updateFocusedCellPosition($cell);\n\n      if (this._allowRowUpdating() && isCellEditMode && column && column.allowEditing) {\n        this._isNeedFocus = false;\n        this._isHiddenFocus = false;\n      } else {\n        var $target = event && $(event.target).closest(NON_FOCUSABLE_ELEMENTS_SELECTOR + \", td\");\n        var skipFocusEvent = $target && $target.not($cell).is(NON_FOCUSABLE_ELEMENTS_SELECTOR);\n        var isEditor = !!column && !column.command && $cell.hasClass(EDITOR_CELL_CLASS);\n        var isDisabled = !isEditor && (!args.isHighlighted || skipFocusEvent);\n\n        this._focus($cell, isDisabled, skipFocusEvent);\n      }\n    } else {\n      this.setRowFocusType();\n      this.setFocusedRowIndex(args.prevRowIndex);\n      $cell = this._getFocusedCell();\n\n      if (this._editingController.isEditing() && isCellEditMode) {\n        this._closeEditCell();\n      }\n    }\n  },\n  _allowRowUpdating: function _allowRowUpdating() {\n    var rowIndex = this.getVisibleRowIndex();\n\n    var row = this._dataController.items()[rowIndex];\n\n    return this._editingController.allowUpdating({\n      row: row\n    }, \"click\");\n  },\n  focus: function focus(element) {\n    var activeElementSelector;\n    var focusedRowEnabled = this.option(\"focusedRowEnabled\");\n    var isHighlighted = isCellElement($(element));\n\n    if (!element) {\n      activeElementSelector = \".dx-datagrid-rowsview .dx-row[tabindex]\";\n\n      if (!focusedRowEnabled) {\n        activeElementSelector += \", .dx-datagrid-rowsview .dx-row > td[tabindex]\";\n      }\n\n      element = this.component.$element().find(activeElementSelector).first();\n    }\n\n    element && this._focusElement($(element), isHighlighted);\n  },\n  getFocusedView: function getFocusedView() {\n    return this._focusedView;\n  },\n  setupFocusedView: function setupFocusedView() {\n    if (this.isKeyboardEnabled() && !isDefined(this._focusedView)) {\n      this._focusView();\n    }\n  },\n  _focusElement: function _focusElement($element, isHighlighted) {\n    var rowsViewElement = $(this._getRowsViewElement());\n    var $focusedView = $element.closest(rowsViewElement);\n    var isRowFocusType = this.isRowFocusType();\n    var args = {};\n\n    if (!$focusedView.length || isCellElement($element) && !this._isCellValid($element)) {\n      return;\n    }\n\n    this._focusView();\n\n    this._isNeedFocus = true;\n    this._isNeedScroll = true;\n\n    if (isCellElement($element) || isGroupRow($element)) {\n      this.setCellFocusType();\n      args = this._fireFocusChangingEvents(null, $element, false, isHighlighted);\n      $element = args.$newCellElement;\n\n      if (isRowFocusType && !args.isHighlighted) {\n        this.setRowFocusType();\n      }\n    }\n\n    if (!args.cancel) {\n      this._focus($element, !args.isHighlighted);\n\n      this._focusInteractiveElement($element);\n    }\n  },\n  _getFocusedViewByElement: function _getFocusedViewByElement($element) {\n    var view = this.getFocusedView();\n    var $view = view && $(view.element());\n    return $element && 0 !== $element.closest($view).length;\n  },\n  _focusView: function _focusView() {\n    this._focusedView = this.getView(\"rowsView\");\n  },\n  _resetFocusedView: function _resetFocusedView() {\n    this.setRowFocusType();\n    this._focusedView = null;\n  },\n  _focusInteractiveElement: function _focusInteractiveElement($cell, isLast) {\n    if (!$cell) {\n      return;\n    }\n\n    var $focusedElement = this._getInteractiveElement($cell, isLast);\n\n    gridCoreUtils.focusAndSelectElement(this, $focusedElement);\n  },\n  _focus: function _focus($cell, disableFocus, skipFocusEvent) {\n    var $row = $cell && !$cell.hasClass(ROW_CLASS) ? $cell.closest(\".\".concat(ROW_CLASS)) : $cell;\n\n    if ($row && isNotFocusedRow($row)) {\n      return;\n    }\n\n    var focusedView = this._focusedView;\n    var $focusViewElement = focusedView && focusedView.element();\n    var $focusElement;\n    this._isHiddenFocus = disableFocus;\n    var isRowFocus = isGroupRow($row) || this.isRowFocusType();\n\n    if (isRowFocus) {\n      $focusElement = $row;\n\n      if (focusedView) {\n        this.setFocusedRowIndex(this._getRowIndex($row));\n      }\n    } else if (isCellElement($cell)) {\n      $focusElement = $cell;\n\n      this._updateFocusedCellPosition($cell);\n    }\n\n    if ($focusElement) {\n      if ($focusViewElement) {\n        $focusViewElement.find(\".dx-row[tabindex], .dx-row > td[tabindex]\").not($focusElement).removeClass(CELL_FOCUS_DISABLED_CLASS).removeAttr(\"tabindex\");\n      }\n\n      eventsEngine.one($focusElement, \"blur\", function (e) {\n        if (e.relatedTarget) {\n          $focusElement.removeClass(CELL_FOCUS_DISABLED_CLASS);\n        }\n      });\n\n      if (!skipFocusEvent) {\n        this._applyTabIndexToElement($focusElement);\n\n        eventsEngine.trigger($focusElement, \"focus\");\n      }\n\n      if (disableFocus) {\n        $focusElement.addClass(CELL_FOCUS_DISABLED_CLASS);\n\n        if (isRowFocus) {\n          $cell.addClass(CELL_FOCUS_DISABLED_CLASS);\n        }\n      } else {\n        this._editorFactory.focus($focusElement);\n      }\n    }\n  },\n  _updateFocus: function _updateFocus(isRenderView) {\n    var _this6 = this;\n\n    this._updateFocusTimeout = setTimeout(function () {\n      var editingController = _this6._editingController;\n      var isCellEditMode = editingController.getEditMode() === EDIT_MODE_CELL;\n      var isBatchEditMode = editingController.getEditMode() === EDIT_MODE_BATCH;\n\n      if (isCellEditMode && editingController.hasChanges() || isBatchEditMode && editingController.isNewRowInEditMode()) {\n        editingController._focusEditingCell();\n\n        return;\n      }\n\n      var $cell = _this6._getFocusedCell();\n\n      var isEditing = editingController.isEditing();\n\n      if ($cell && !(_this6._isMasterDetailCell($cell) && !_this6._isRowEditMode())) {\n        if (_this6._hasSkipRow($cell.parent())) {\n          var direction = _this6._focusedCellPosition && _this6._focusedCellPosition.rowIndex > 0 ? \"upArrow\" : \"downArrow\";\n          $cell = _this6._getNextCell(direction);\n        }\n\n        if (isElementDefined($cell)) {\n          if (isRenderView && !isEditing && _this6._checkCellOverlapped($cell)) {\n            return;\n          }\n\n          if ($cell.is(\"td\") || $cell.hasClass(_this6.addWidgetPrefix(EDIT_FORM_ITEM_CLASS))) {\n            var isCommandCell = $cell.is(COMMAND_CELL_SELECTOR);\n            var $focusedElementInsideCell = $cell.find(\":focus\");\n            var isFocusedElementDefined = isElementDefined($focusedElementInsideCell);\n\n            if ((isRenderView || !isCommandCell) && _this6._editorFactory.focus()) {\n              if (isCommandCell && isFocusedElementDefined) {\n                gridCoreUtils.focusAndSelectElement(_this6, $focusedElementInsideCell);\n                return;\n              }\n\n              !isFocusedElementDefined && _this6._focus($cell);\n            } else if (!isFocusedElementDefined && (_this6._isNeedFocus || _this6._isHiddenFocus)) {\n              _this6._focus($cell, _this6._isHiddenFocus);\n            }\n\n            if (isEditing) {\n              _this6._focusInteractiveElement.bind(_this6)($cell);\n            }\n          } else {\n            eventsEngine.trigger($cell, \"focus\");\n          }\n        }\n      }\n    });\n  },\n  _checkCellOverlapped: function _checkCellOverlapped($cell) {\n    var cellOffset = $cell.offset();\n    var hasScrollable = this.component.getScrollable && this.component.getScrollable();\n    var isOverlapped = false;\n\n    if (hasScrollable) {\n      if (cellOffset.left < 0) {\n        isOverlapped = getWidth($cell) + cellOffset.left <= 0;\n      } else if (cellOffset.top < 0) {\n        isOverlapped = getHeight($cell) + cellOffset.top <= 0;\n      }\n    }\n\n    return isOverlapped;\n  },\n  _getFocusedCell: function _getFocusedCell() {\n    return $(this._getCell(this._focusedCellPosition));\n  },\n  _updateFocusedCellPositionByTarget: function _updateFocusedCellPositionByTarget(target) {\n    var _this$_focusedCellPos;\n\n    var elementType = this._getElementType(target);\n\n    if (\"row\" === elementType && isDefined(null === (_this$_focusedCellPos = this._focusedCellPosition) || void 0 === _this$_focusedCellPos ? void 0 : _this$_focusedCellPos.columnIndex)) {\n      var $row = $(target);\n      this._focusedView && isGroupRow($row) && this.setFocusedRowIndex(this._getRowIndex($row));\n    } else {\n      this._updateFocusedCellPosition(this._getCellElementFromTarget(target));\n    }\n  },\n  _updateFocusedCellPosition: function _updateFocusedCellPosition($cell, direction) {\n    var position = this._getCellPosition($cell, direction);\n\n    if (position) {\n      if (!$cell.length || position.rowIndex >= 0 && position.columnIndex >= 0) {\n        this.setFocusedCellPosition(position.rowIndex, position.columnIndex);\n      }\n    }\n\n    return position;\n  },\n  _getFocusedColumnIndexOffset: function _getFocusedColumnIndexOffset(columnIndex) {\n    var offset = 0;\n\n    var column = this._columnsController.getVisibleColumns()[columnIndex];\n\n    if (column && column.fixed) {\n      offset = this._getFixedColumnIndexOffset(column);\n    } else if (columnIndex >= 0) {\n      offset = this._columnsController.getColumnIndexOffset();\n    }\n\n    return offset;\n  },\n  _getFixedColumnIndexOffset: function _getFixedColumnIndexOffset(column) {\n    var offset = isFixedColumnIndexOffsetRequired(this, column) ? this._getVisibleColumnCount() - this._columnsController.getVisibleColumns().length : 0;\n    return offset;\n  },\n  _getCellPosition: function _getCellPosition($cell, direction) {\n    var columnIndex;\n    var $row = isElementDefined($cell) && $cell.closest(\"tr\");\n    var rowsView = this.getView(\"rowsView\");\n\n    if (isElementDefined($row)) {\n      var rowIndex = this._getRowIndex($row);\n\n      columnIndex = rowsView.getCellIndex($cell, rowIndex);\n      columnIndex += this._getFocusedColumnIndexOffset(columnIndex);\n\n      if (direction) {\n        columnIndex = \"previous\" === direction ? columnIndex - 1 : columnIndex + 1;\n        columnIndex = this._applyColumnIndexBoundaries(columnIndex);\n      }\n\n      return {\n        rowIndex: rowIndex,\n        columnIndex: columnIndex\n      };\n    }\n  },\n  _focusCell: function _focusCell($cell, isDisabled) {\n    if (this._isCellValid($cell)) {\n      this._focus($cell, isDisabled);\n\n      return true;\n    }\n  },\n  _focusEditFormCell: function _focusEditFormCell($cell) {\n    if ($cell.hasClass(MASTER_DETAIL_CELL_CLASS)) {\n      this._editorFactory.focus($cell, true);\n    }\n  },\n  _resetFocusedCell: function _resetFocusedCell(preventScroll) {\n    var _this$_focusedView;\n\n    var $cell = this._getFocusedCell();\n\n    isElementDefined($cell) && $cell.removeAttr(\"tabindex\");\n    this._isNeedFocus = false;\n    this._isNeedScroll = false;\n    this._focusedCellPosition = {};\n    clearTimeout(this._updateFocusTimeout);\n    null === (_this$_focusedView = this._focusedView) || void 0 === _this$_focusedView ? void 0 : _this$_focusedView.renderFocusState({\n      preventScroll: preventScroll\n    });\n  },\n  restoreFocusableElement: function restoreFocusableElement(rowIndex, $event) {\n    var args;\n    var $rowElement;\n    var isUpArrow = isDefined(rowIndex);\n    var rowsView = this.getView(\"rowsView\");\n    var $rowsViewElement = rowsView.element();\n    var columnIndex = this._focusedCellPosition.columnIndex;\n\n    var rowIndexOffset = this._dataController.getRowIndexOffset();\n\n    rowIndex = isUpArrow ? rowIndex : rowsView.getTopVisibleItemIndex() + rowIndexOffset;\n\n    if (!isUpArrow) {\n      this._editorFactory.loseFocus();\n\n      this._applyTabIndexToElement($rowsViewElement);\n\n      eventsEngine.trigger($rowsViewElement, \"focus\");\n    } else {\n      $rowElement = rowsView.getRow(rowIndex - rowIndexOffset);\n      args = this._fireFocusedRowChanging($event, $rowElement);\n\n      if (!args.cancel && args.rowIndexChanged) {\n        rowIndex = args.newRowIndex;\n      }\n    }\n\n    if (!isUpArrow || !args.cancel) {\n      this.setFocusedCellPosition(rowIndex, columnIndex);\n    }\n\n    isUpArrow && this._updateFocus();\n  },\n  _getNewPositionByCode: function _getNewPositionByCode(cellPosition, elementType, code) {\n    var columnIndex = cellPosition.columnIndex;\n    var rowIndex = cellPosition.rowIndex;\n    var visibleColumnsCount;\n\n    if (void 0 === cellPosition.rowIndex && \"next\" === code) {\n      return {\n        columnIndex: 0,\n        rowIndex: 0\n      };\n    }\n\n    switch (code) {\n      case \"nextInRow\":\n      case \"next\":\n        visibleColumnsCount = this._getVisibleColumnCount();\n\n        if (columnIndex < visibleColumnsCount - 1 && \"row\" !== elementType && this._hasValidCellAfterPosition({\n          columnIndex: columnIndex,\n          rowIndex: rowIndex\n        })) {\n          columnIndex++;\n        } else if (!this._isLastRow(rowIndex) && \"next\" === code) {\n          columnIndex = 0;\n          rowIndex++;\n        }\n\n        break;\n\n      case \"previousInRow\":\n      case \"previous\":\n        if (columnIndex > 0 && \"row\" !== elementType && this._hasValidCellBeforePosition({\n          columnIndex: columnIndex,\n          rowIndex: rowIndex\n        })) {\n          columnIndex--;\n        } else if (rowIndex > 0 && \"previous\" === code) {\n          rowIndex--;\n          visibleColumnsCount = this._getVisibleColumnCount();\n          columnIndex = visibleColumnsCount - 1;\n        }\n\n        break;\n\n      case \"upArrow\":\n        rowIndex = rowIndex > 0 ? rowIndex - 1 : rowIndex;\n        break;\n\n      case \"downArrow\":\n        rowIndex = !this._isLastRow(rowIndex) ? rowIndex + 1 : rowIndex;\n    }\n\n    return {\n      columnIndex: columnIndex,\n      rowIndex: rowIndex\n    };\n  },\n  setFocusedCellPosition: function setFocusedCellPosition(rowIndex, columnIndex) {\n    this.setFocusedRowIndex(rowIndex);\n    this.setFocusedColumnIndex(columnIndex);\n  },\n  setFocusedRowIndex: function setFocusedRowIndex(rowIndex) {\n    if (!this._focusedCellPosition) {\n      this._focusedCellPosition = {};\n    }\n\n    this._focusedCellPosition.rowIndex = rowIndex;\n  },\n  setFocusedColumnIndex: function setFocusedColumnIndex(columnIndex) {\n    if (!this._focusedCellPosition) {\n      this._focusedCellPosition = {};\n    }\n\n    this._focusedCellPosition.columnIndex = columnIndex;\n  },\n  getRowIndex: function getRowIndex() {\n    return this._focusedCellPosition ? this._focusedCellPosition.rowIndex : -1;\n  },\n  getColumnIndex: function getColumnIndex() {\n    return this._focusedCellPosition ? this._focusedCellPosition.columnIndex : -1;\n  },\n  getVisibleRowIndex: function getVisibleRowIndex() {\n    var rowIndex = this._focusedCellPosition && this._focusedCellPosition.rowIndex;\n\n    if (!isDefined(rowIndex) || rowIndex < 0) {\n      return -1;\n    }\n\n    return rowIndex - this._dataController.getRowIndexOffset();\n  },\n  getVisibleColumnIndex: function getVisibleColumnIndex() {\n    var columnIndex = this._focusedCellPosition && this._focusedCellPosition.columnIndex;\n\n    if (!isDefined(columnIndex)) {\n      return -1;\n    }\n\n    return columnIndex - this._columnsController.getColumnIndexOffset();\n  },\n  _applyColumnIndexBoundaries: function _applyColumnIndexBoundaries(columnIndex) {\n    var visibleColumnsCount = this._getVisibleColumnCount();\n\n    if (columnIndex < 0) {\n      columnIndex = 0;\n    } else if (columnIndex >= visibleColumnsCount) {\n      columnIndex = visibleColumnsCount - 1;\n    }\n\n    return columnIndex;\n  },\n  _isCellByPositionValid: function _isCellByPositionValid(cellPosition) {\n    var $cell = $(this._getCell(cellPosition));\n    return this._isCellValid($cell);\n  },\n  _isLastRow: function _isLastRow(rowIndex) {\n    var dataController = this._dataController;\n\n    if (this._isVirtualRowRender()) {\n      return rowIndex >= dataController.getMaxRowIndex();\n    }\n\n    return rowIndex === dataController.items().length - 1;\n  },\n  _isFirstValidCell: function _isFirstValidCell(cellPosition) {\n    var isFirstValidCell = false;\n\n    if (0 === cellPosition.rowIndex && cellPosition.columnIndex >= 0) {\n      isFirstValidCell = isFirstValidCell || !this._hasValidCellBeforePosition(cellPosition);\n    }\n\n    return isFirstValidCell;\n  },\n  _hasValidCellBeforePosition: function _hasValidCellBeforePosition(cellPosition) {\n    var columnIndex = cellPosition.columnIndex;\n    var hasValidCells = false;\n\n    while (columnIndex > 0 && !hasValidCells) {\n      var checkingPosition = {\n        columnIndex: --columnIndex,\n        rowIndex: cellPosition.rowIndex\n      };\n      hasValidCells = this._isCellByPositionValid(checkingPosition);\n    }\n\n    return hasValidCells;\n  },\n  _hasValidCellAfterPosition: function _hasValidCellAfterPosition(cellPosition) {\n    var columnIndex = cellPosition.columnIndex;\n    var hasValidCells = false;\n\n    var visibleColumnCount = this._getVisibleColumnCount();\n\n    while (columnIndex < visibleColumnCount - 1 && !hasValidCells) {\n      var checkingPosition = {\n        columnIndex: ++columnIndex,\n        rowIndex: cellPosition.rowIndex\n      };\n      hasValidCells = this._isCellByPositionValid(checkingPosition);\n    }\n\n    return hasValidCells;\n  },\n  _isLastValidCell: function _isLastValidCell(cellPosition) {\n    var nextColumnIndex = cellPosition.columnIndex >= 0 ? cellPosition.columnIndex + 1 : 0;\n    var rowIndex = cellPosition.rowIndex;\n    var checkingPosition = {\n      columnIndex: nextColumnIndex,\n      rowIndex: rowIndex\n    };\n\n    var visibleRows = this._dataController.getVisibleRows();\n\n    var row = visibleRows && visibleRows[rowIndex];\n\n    var isLastRow = this._isLastRow(rowIndex);\n\n    if (!isLastRow) {\n      return false;\n    }\n\n    if (row && \"group\" === row.rowType && cellPosition.columnIndex > 0) {\n      return true;\n    }\n\n    if (cellPosition.columnIndex === this._getVisibleColumnCount() - 1) {\n      return true;\n    }\n\n    if (this._isCellByPositionValid(checkingPosition)) {\n      return false;\n    }\n\n    return this._isLastValidCell(checkingPosition);\n  },\n  _isCellValid: function _isCellValid($cell, isClick) {\n    if (isElementDefined($cell)) {\n      var rowsView = this.getView(\"rowsView\");\n      var $row = $cell.parent();\n      var columnsController = this._columnsController;\n      var columnIndex = rowsView.getCellIndex($cell) + columnsController.getColumnIndexOffset();\n      var column = columnsController.getVisibleColumns(null, true)[columnIndex];\n\n      var visibleColumnCount = this._getVisibleColumnCount();\n\n      var editingController = this._editingController;\n      var isMasterDetailRow = isDetailRow($row);\n      var isShowWhenGrouped = column && column.showWhenGrouped;\n      var isDataCell = column && !$cell.hasClass(COMMAND_EXPAND_CLASS) && isDataRow($row);\n\n      if (this._isMasterDetailCell($cell)) {\n        return true;\n      }\n\n      if (visibleColumnCount > columnIndex && (!isMasterDetailRow && column && (!isDefined(column.groupIndex) || isShowWhenGrouped && isDataCell) || parseInt($cell.attr(\"colspan\")) > 1)) {\n        var rowItems = this._dataController.items();\n\n        var visibleRowIndex = rowsView.getRowIndex($row);\n        var row = rowItems[visibleRowIndex];\n        var isCellEditing = editingController && this._isCellEditMode() && editingController.isEditing();\n        var isRowEditingInCurrentRow = editingController && editingController.isEditRow(visibleRowIndex);\n        var isEditing = isRowEditingInCurrentRow || isCellEditing;\n\n        if (column.command) {\n          if (this._isLegacyNavigation()) {\n            return !isEditing && \"expand\" === column.command;\n          }\n\n          if (isCellEditing) {\n            return false;\n          }\n\n          if (isRowEditingInCurrentRow) {\n            return \"select\" !== column.command;\n          }\n\n          return !isEditing;\n        }\n\n        if (isCellEditing && row && \"data\" !== row.rowType) {\n          return false;\n        }\n\n        return !isEditing || column.allowEditing || isClick;\n      }\n    }\n  },\n  getFirstValidCellInRow: function getFirstValidCellInRow($row, columnIndex) {\n    var $cells = $row.find(\"> td\");\n    var $cell;\n    var $result;\n    columnIndex = columnIndex || 0;\n\n    for (var i = columnIndex; i < $cells.length; ++i) {\n      $cell = $cells.eq(i);\n\n      if (this._isCellValid($cell)) {\n        $result = $cell;\n        break;\n      }\n    }\n\n    return $result;\n  },\n  _getNextCell: function _getNextCell(keyCode, elementType, cellPosition) {\n    var focusedCellPosition = cellPosition || this._focusedCellPosition;\n    var isRowFocusType = this.isRowFocusType();\n    var includeCommandCells = isRowFocusType || inArray(keyCode, [\"next\", \"previous\"]) > -1;\n    var $cell;\n    var $row;\n\n    if (this._focusedView && focusedCellPosition) {\n      var newFocusedCellPosition = this._getNewPositionByCode(focusedCellPosition, elementType, keyCode);\n\n      $cell = $(this._getCell(newFocusedCellPosition));\n      var isLastCellOnDirection = \"previous\" === keyCode ? this._isFirstValidCell(newFocusedCellPosition) : this._isLastValidCell(newFocusedCellPosition);\n\n      if (isElementDefined($cell) && !this._isCellValid($cell) && this._isCellInRow(newFocusedCellPosition, includeCommandCells) && !isLastCellOnDirection) {\n        if (isRowFocusType) {\n          $cell = this.getFirstValidCellInRow($cell.parent(), newFocusedCellPosition.columnIndex);\n        } else {\n          $cell = this._getNextCell(keyCode, \"cell\", newFocusedCellPosition);\n        }\n      }\n\n      $row = isElementDefined($cell) && $cell.parent();\n\n      if (this._hasSkipRow($row)) {\n        var rowIndex = this._getRowIndex($row);\n\n        if (!this._isLastRow(rowIndex)) {\n          $cell = this._getNextCell(keyCode, \"row\", {\n            columnIndex: focusedCellPosition.columnIndex,\n            rowIndex: rowIndex\n          });\n        } else {\n          return null;\n        }\n      }\n\n      return isElementDefined($cell) ? $cell : null;\n    }\n\n    return null;\n  },\n  _startEditing: function _startEditing(eventArgs, fastEditingKey) {\n    var focusedCellPosition = this._focusedCellPosition;\n    var visibleRowIndex = this.getVisibleRowIndex();\n    var visibleColumnIndex = this.getVisibleColumnIndex();\n\n    var row = this._dataController.items()[visibleRowIndex];\n\n    var column = this._columnsController.getVisibleColumns()[visibleColumnIndex];\n\n    if (this._isAllowEditing(row, column)) {\n      if (this._isRowEditMode()) {\n        this._editingController.editRow(visibleRowIndex);\n      } else if (focusedCellPosition) {\n        this._startEditCell(eventArgs, fastEditingKey);\n      }\n    }\n  },\n  _isAllowEditing: function _isAllowEditing(row, column) {\n    return this._editingController.allowUpdating({\n      row: row\n    }) && column && column.allowEditing;\n  },\n  _editFocusedCell: function _editFocusedCell() {\n    var rowIndex = this.getVisibleRowIndex();\n    var colIndex = this.getVisibleColumnIndex();\n    return this._editingController.editCell(rowIndex, colIndex);\n  },\n  _startEditCell: function _startEditCell(eventArgs, fastEditingKey) {\n    var _this7 = this;\n\n    this._fastEditingStarted = isDefined(fastEditingKey);\n\n    var editResult = this._editFocusedCell();\n\n    if (this._isFastEditingStarted()) {\n      if (true === editResult) {\n        this._editingCellHandler(eventArgs, fastEditingKey);\n      } else if (editResult && editResult.done) {\n        var editorValue = fastEditingKey !== FAST_EDITING_DELETE_KEY ? fastEditingKey : \"\";\n        editResult.done(function () {\n          return _this7._editingCellHandler(eventArgs, editorValue);\n        });\n      }\n    }\n  },\n  _editingCellHandler: function _editingCellHandler(eventArgs, editorValue) {\n    var _$input$get$select, _$input$get;\n\n    var $input = this._getFocusedCell().find(INTERACTIVE_ELEMENTS_SELECTOR).eq(0);\n\n    var keyDownEvent = createEvent(eventArgs, {\n      type: \"keydown\",\n      target: $input.get(0)\n    });\n    var keyPressEvent = createEvent(eventArgs, {\n      type: \"keypress\",\n      target: $input.get(0)\n    });\n    var inputEvent = createEvent(eventArgs, {\n      type: \"input\",\n      target: $input.get(0)\n    });\n    null === (_$input$get$select = (_$input$get = $input.get(0)).select) || void 0 === _$input$get$select ? void 0 : _$input$get$select.call(_$input$get);\n    eventsEngine.trigger($input, keyDownEvent);\n\n    if (!keyDownEvent.isDefaultPrevented()) {\n      eventsEngine.trigger($input, keyPressEvent);\n\n      if (!keyPressEvent.isDefaultPrevented()) {\n        var timeout = browser.mozilla ? 25 : 0;\n        setTimeout(function () {\n          $input.val(editorValue);\n          var $widgetContainer = $input.closest(\".\".concat(WIDGET_CLASS));\n          eventsEngine.off($widgetContainer, \"focusout\");\n          eventsEngine.one($widgetContainer, \"focusout\", function () {\n            eventsEngine.trigger($input, \"change\");\n          });\n          eventsEngine.trigger($input, inputEvent);\n        }, timeout);\n      }\n    }\n  },\n  _fireFocusChangingEvents: function _fireFocusChangingEvents($event, $cell, fireRowEvent, isHighlighted) {\n    var args = {};\n    var cellPosition = this._getCellPosition($cell) || {};\n\n    if (this.isCellFocusType()) {\n      args = this._fireFocusedCellChanging($event, $cell, isHighlighted);\n\n      if (!args.cancel) {\n        cellPosition.columnIndex = args.newColumnIndex;\n        cellPosition.rowIndex = args.newRowIndex;\n        isHighlighted = args.isHighlighted;\n        $cell = $(this._getCell(cellPosition));\n      }\n    }\n\n    if (!args.cancel && fireRowEvent && $cell) {\n      args = this._fireFocusedRowChanging($event, $cell.parent());\n\n      if (!args.cancel) {\n        cellPosition.rowIndex = args.newRowIndex;\n        args.isHighlighted = isHighlighted;\n      }\n    }\n\n    args.$newCellElement = $(this._getCell(cellPosition));\n\n    if (!args.$newCellElement.length) {\n      args.$newCellElement = $cell;\n    }\n\n    return args;\n  },\n  _fireFocusedCellChanging: function _fireFocusedCellChanging($event, $cellElement, isHighlighted) {\n    var prevCellIndex = this.option(\"focusedColumnIndex\");\n    var prevRowIndex = this.option(\"focusedRowIndex\");\n\n    var cellPosition = this._getCellPosition($cellElement);\n\n    var columnIndex = cellPosition ? cellPosition.columnIndex : -1;\n    var rowIndex = cellPosition ? cellPosition.rowIndex : -1;\n    var args = {\n      cellElement: $cellElement,\n      prevColumnIndex: prevCellIndex,\n      prevRowIndex: prevRowIndex,\n      newColumnIndex: columnIndex,\n      newRowIndex: rowIndex,\n      rows: this._dataController.getVisibleRows(),\n      columns: this._columnsController.getVisibleColumns(),\n      event: $event,\n      isHighlighted: isHighlighted || false,\n      cancel: false\n    };\n    this._canceledCellPosition = null;\n    this.executeAction(\"onFocusedCellChanging\", args);\n\n    if (args.newColumnIndex !== columnIndex || args.newRowIndex !== rowIndex) {\n      args.$newCellElement = $(this._getCell({\n        columnIndex: args.newColumnIndex,\n        rowIndex: args.newRowIndex\n      }));\n    }\n\n    if (args.cancel) {\n      this._canceledCellPosition = {\n        rowIndex: rowIndex,\n        columnIndex: columnIndex\n      };\n    }\n\n    return args;\n  },\n  _fireFocusedCellChanged: function _fireFocusedCellChanged($cellElement, prevCellIndex, prevRowIndex) {\n    var dataController = this._dataController;\n    var columnIndex = this.getView(\"rowsView\").getCellIndex($cellElement);\n\n    var rowIndex = this._getRowIndex($cellElement && $cellElement.parent());\n\n    var localRowIndex = Math.min(rowIndex - dataController.getRowIndexOffset(), dataController.items().length - 1);\n\n    var isEditingCell = this._editingController.isEditCell(localRowIndex, columnIndex);\n\n    var row = dataController.items()[localRowIndex];\n\n    if (!isEditingCell && (prevCellIndex !== columnIndex || prevRowIndex !== rowIndex)) {\n      this.executeAction(\"onFocusedCellChanged\", {\n        cellElement: $cellElement,\n        columnIndex: columnIndex,\n        rowIndex: rowIndex,\n        row: row,\n        column: this._columnsController.getVisibleColumns()[columnIndex]\n      });\n    }\n  },\n  _fireFocusedRowChanging: function _fireFocusedRowChanging(eventArgs, $newFocusedRow) {\n    var newRowIndex = this._getRowIndex($newFocusedRow);\n\n    var dataController = this._dataController;\n    var prevFocusedRowIndex = this.option(\"focusedRowIndex\");\n    var loadingOperationTypes = dataController.loadingOperationTypes();\n    var args = {\n      rowElement: $newFocusedRow,\n      prevRowIndex: prevFocusedRowIndex,\n      newRowIndex: newRowIndex,\n      event: eventArgs,\n      rows: dataController.getVisibleRows(),\n      cancel: false\n    };\n\n    if (!dataController || dataController.isLoading() && (loadingOperationTypes.reload || loadingOperationTypes.paging)) {\n      args.cancel = true;\n      return args;\n    }\n\n    if (this.option(\"focusedRowEnabled\")) {\n      this.executeAction(\"onFocusedRowChanging\", args);\n\n      if (!args.cancel && args.newRowIndex !== newRowIndex) {\n        args.resetFocusedRow = args.newRowIndex < 0;\n\n        if (!args.resetFocusedRow) {\n          this.setFocusedRowIndex(args.newRowIndex);\n        }\n\n        args.rowIndexChanged = true;\n      }\n    }\n\n    return args;\n  },\n  _fireFocusedRowChanged: function _fireFocusedRowChanged($rowElement) {\n    var row;\n    var focusedRowKey = this.option(\"focusedRowKey\");\n    var focusController = this.getController(\"focus\");\n    var focusedRowIndex = null === focusController || void 0 === focusController ? void 0 : focusController.getFocusedRowIndexByKey(focusedRowKey);\n\n    if (this.option(\"focusedRowEnabled\")) {\n      if (focusedRowIndex >= 0) {\n        var dataController = this._dataController;\n        row = focusedRowIndex >= 0 && dataController.getVisibleRows()[focusedRowIndex - dataController.getRowIndexOffset()];\n      }\n\n      this.executeAction(\"onFocusedRowChanged\", {\n        rowElement: $rowElement,\n        rowIndex: focusedRowIndex,\n        row: row\n      });\n    }\n  },\n  _isEventInCurrentGrid: function _isEventInCurrentGrid(event) {\n    return gridCoreUtils.isElementInCurrentGrid(this, $(event.target));\n  },\n  _isRowEditMode: function _isRowEditMode() {\n    var editMode = this._editingController.getEditMode();\n\n    return editMode === EDIT_MODE_ROW || editMode === EDIT_MODE_FORM;\n  },\n  _isCellEditMode: function _isCellEditMode() {\n    var editMode = this._editingController.getEditMode();\n\n    return editMode === EDIT_MODE_CELL || editMode === EDIT_MODE_BATCH;\n  },\n  _isFastEditingAllowed: function _isFastEditingAllowed() {\n    return this._isCellEditMode() && this.option(\"keyboardNavigation.editOnKeyPress\");\n  },\n  _getInteractiveElement: function _getInteractiveElement($cell, isLast) {\n    var $focusedElement = $cell.find(INTERACTIVE_ELEMENTS_SELECTOR).filter(\":visible\");\n    return isLast ? $focusedElement.last() : $focusedElement.first();\n  },\n  _applyTabIndexToElement: function _applyTabIndexToElement($element) {\n    var tabIndex = this.option(\"tabIndex\") || 0;\n    $element.attr(\"tabindex\", isDefined(tabIndex) ? tabIndex : 0);\n  },\n  _getCell: function _getCell(cellPosition) {\n    if (this._focusedView && cellPosition) {\n      var rowIndexOffset = this._dataController.getRowIndexOffset();\n\n      var column = this._columnsController.getVisibleColumns(null, true)[cellPosition.columnIndex];\n\n      var columnIndexOffset = column && column.fixed ? this._getFixedColumnIndexOffset(column) : this._columnsController.getColumnIndexOffset();\n      var rowIndex = cellPosition.rowIndex >= 0 ? cellPosition.rowIndex - rowIndexOffset : -1;\n      var columnIndex = cellPosition.columnIndex >= 0 ? cellPosition.columnIndex - columnIndexOffset : -1;\n      return this._focusedView.getCell({\n        rowIndex: rowIndex,\n        columnIndex: columnIndex\n      });\n    }\n  },\n  _getRowIndex: function _getRowIndex($row) {\n    var rowsView = this.getView(\"rowsView\");\n    var rowIndex = rowsView.getRowIndex($row);\n\n    if (rowIndex >= 0) {\n      rowIndex += this._dataController.getRowIndexOffset();\n    }\n\n    return rowIndex;\n  },\n  _hasSkipRow: function _hasSkipRow($row) {\n    var row = $row && $row.get(0);\n    return row && (\"none\" === row.style.display || $row.hasClass(this.addWidgetPrefix(GROUP_FOOTER_CLASS)) || isDetailRow($row) && !$row.hasClass(this.addWidgetPrefix(EDIT_FORM_CLASS)));\n  },\n  _allowEditingOnEnterKey: function _allowEditingOnEnterKey() {\n    return \"startEdit\" === this.option(\"keyboardNavigation.enterKeyAction\");\n  },\n  _isLegacyNavigation: function _isLegacyNavigation() {\n    return this.option(\"useLegacyKeyboardNavigation\");\n  },\n  _getDirectionCodeByKey: function _getDirectionCodeByKey(key) {\n    var directionCode;\n\n    switch (key) {\n      case \"upArrow\":\n        directionCode = \"prevRow\";\n        break;\n\n      case \"downArrow\":\n        directionCode = \"nextRow\";\n        break;\n\n      case \"leftArrow\":\n        directionCode = this.option(\"rtlEnabled\") ? \"nextInRow\" : \"previousInRow\";\n        break;\n\n      case \"rightArrow\":\n        directionCode = this.option(\"rtlEnabled\") ? \"previousInRow\" : \"nextInRow\";\n    }\n\n    return directionCode;\n  },\n  _isVirtualScrolling: function _isVirtualScrolling() {\n    var scrollingMode = this.option(\"scrolling.mode\");\n    return \"virtual\" === scrollingMode || \"infinite\" === scrollingMode;\n  },\n  _isVirtualRowRender: function _isVirtualRowRender() {\n    return this._isVirtualScrolling() || gridCoreUtils.isVirtualRowRendering(this);\n  },\n  _isVirtualColumnRender: function _isVirtualColumnRender() {\n    return \"virtual\" === this.option(\"scrolling.columnRenderingMode\");\n  },\n  _scrollBy: function _scrollBy(left, top, rowIndex, $event) {\n    var that = this;\n    var scrollable = this.getView(\"rowsView\").getScrollable();\n\n    if (that._focusedCellPosition) {\n      scrollable.on(\"scroll\", function scrollHandler() {\n        scrollable.off(\"scroll\", scrollHandler);\n        setTimeout(that.restoreFocusableElement.bind(that, rowIndex, $event));\n      });\n    }\n\n    return scrollable.scrollBy({\n      left: left,\n      top: top\n    });\n  },\n  _isInsideEditForm: function _isInsideEditForm(element) {\n    return $(element).closest(\".\" + this.addWidgetPrefix(EDIT_FORM_CLASS)).length > 0;\n  },\n  _isMasterDetailCell: function _isMasterDetailCell(element) {\n    var $masterDetailCell = $(element).closest(\".\" + MASTER_DETAIL_CELL_CLASS);\n    var $masterDetailGrid = $masterDetailCell.closest(\".\" + this.getWidgetContainerClass()).parent();\n    return $masterDetailCell.length && $masterDetailGrid.is(this.component.$element());\n  },\n  _processNextCellInMasterDetail: function _processNextCellInMasterDetail($nextCell) {\n    if (!this._isInsideEditForm($nextCell) && $nextCell) {\n      this._applyTabIndexToElement($nextCell);\n    }\n  },\n  _handleTabKeyOnMasterDetailCell: function _handleTabKeyOnMasterDetailCell(target, direction) {\n    if (this._isMasterDetailCell(target)) {\n      this._updateFocusedCellPosition($(target), direction);\n\n      var $nextCell = this._getNextCell(direction, \"row\");\n\n      this._processNextCellInMasterDetail($nextCell);\n\n      return true;\n    }\n\n    return false;\n  },\n  _getElementType: function _getElementType(target) {\n    return $(target).is(\"tr\") ? \"row\" : \"cell\";\n  },\n  _isFastEditingStarted: function _isFastEditingStarted() {\n    return this._isFastEditingAllowed() && this._fastEditingStarted;\n  },\n  _getVisibleColumnCount: function _getVisibleColumnCount() {\n    return this._columnsController.getVisibleColumns(null, true).length;\n  },\n  _isCellInRow: function _isCellInRow(cellPosition, includeCommandCells) {\n    var columnIndex = cellPosition.columnIndex;\n\n    var visibleColumnsCount = this._getVisibleColumnCount();\n\n    return includeCommandCells ? columnIndex >= 0 && columnIndex <= visibleColumnsCount - 1 : columnIndex > 0 && columnIndex < visibleColumnsCount - 1;\n  },\n  _getCellElementFromTarget: function _getCellElementFromTarget(target) {\n    var elementType = this._getElementType(target);\n\n    var $targetElement = $(target);\n    var $cell;\n\n    if (\"cell\" === elementType) {\n      $cell = $targetElement.closest(\".\".concat(ROW_CLASS, \" > td\"));\n    } else {\n      $cell = $targetElement.children().not(\".\" + COMMAND_EXPAND_CLASS).first();\n    }\n\n    return $cell;\n  },\n  _getRowsViewElement: function _getRowsViewElement() {\n    var rowsView = this.getView(\"rowsView\");\n    return rowsView && rowsView.element();\n  },\n  isKeyboardEnabled: function isKeyboardEnabled() {\n    return this.option(\"keyboardNavigation.enabled\");\n  },\n  _processCanceledEditCellPosition: function _processCanceledEditCellPosition(rowIndex, columnIndex) {\n    if (this._canceledCellPosition) {\n      var isCanceled = this._canceledCellPosition.rowIndex === rowIndex && this._canceledCellPosition.columnIndex === columnIndex;\n      this._canceledCellPosition = null;\n      return isCanceled;\n    }\n  },\n  updateFocusedRowIndex: function updateFocusedRowIndex() {\n    var dataController = this._dataController;\n    var visibleRowIndex = this.getVisibleRowIndex();\n    var visibleItems = dataController.items();\n    var lastVisibleIndex = visibleItems.length ? visibleItems.length - 1 : -1;\n    var rowIndexOffset = dataController.getRowIndexOffset();\n    lastVisibleIndex >= 0 && visibleRowIndex > lastVisibleIndex && this.setFocusedRowIndex(lastVisibleIndex + rowIndexOffset);\n  }\n});\nexport var keyboardNavigationModule = {\n  defaultOptions: function defaultOptions() {\n    return {\n      useLegacyKeyboardNavigation: false,\n      keyboardNavigation: {\n        enabled: true,\n        enterKeyAction: \"startEdit\",\n        enterKeyDirection: \"none\",\n        editOnKeyPress: false\n      }\n    };\n  },\n  controllers: {\n    keyboardNavigation: KeyboardNavigationController\n  },\n  extenders: {\n    views: {\n      rowsView: {\n        _rowClick: function _rowClick(e) {\n          var editRowIndex = this.getController(\"editing\").getEditRowIndex();\n          var keyboardController = this.getController(\"keyboardNavigation\");\n\n          if (editRowIndex === e.rowIndex) {\n            keyboardController.setCellFocusType();\n          }\n\n          var needTriggerPointerEventHandler = isMobile() && this.option(\"focusedRowEnabled\");\n\n          if (needTriggerPointerEventHandler) {\n            this._triggerPointerDownEventHandler(e);\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        _triggerPointerDownEventHandler: function _triggerPointerDownEventHandler(e) {\n          var originalEvent = e.event.originalEvent;\n\n          if (originalEvent) {\n            var keyboardController = this.getController(\"keyboardNavigation\");\n            var $cell = $(originalEvent.target);\n            var columnIndex = this.getCellIndex($cell);\n            var column = this.getController(\"columns\").getVisibleColumns()[columnIndex];\n            var row = this.getController(\"data\").items()[e.rowIndex];\n\n            if (keyboardController._isAllowEditing(row, column)) {\n              var eventArgs = createEvent(originalEvent, {\n                currentTarget: originalEvent.target\n              });\n\n              keyboardController._pointerEventHandler(eventArgs);\n            }\n          }\n        },\n        renderFocusState: function renderFocusState(params) {\n          var _ref3 = null !== params && void 0 !== params ? params : {},\n              preventScroll = _ref3.preventScroll,\n              pageSizeChanged = _ref3.pageSizeChanged;\n\n          var keyboardController = this.getController(\"keyboardNavigation\");\n          var $rowsViewElement = this.element();\n\n          if ($rowsViewElement && !focused($rowsViewElement)) {\n            $rowsViewElement.attr(\"tabindex\", null);\n          }\n\n          pageSizeChanged && keyboardController.updateFocusedRowIndex();\n          var rowIndex = keyboardController.getVisibleRowIndex();\n\n          if (!isDefined(rowIndex) || rowIndex < 0) {\n            rowIndex = 0;\n          }\n\n          var cellElements = this.getCellElements(rowIndex);\n\n          if (keyboardController.isKeyboardEnabled() && cellElements.length) {\n            this.updateFocusElementTabIndex(cellElements, preventScroll);\n          }\n        },\n        updateFocusElementTabIndex: function updateFocusElementTabIndex(cellElements) {\n          var keyboardController = this.getController(\"keyboardNavigation\");\n          var $row = cellElements.eq(0).parent();\n\n          if (isGroupRow($row)) {\n            keyboardController._applyTabIndexToElement($row);\n          } else {\n            var columnIndex = keyboardController.getColumnIndex();\n\n            if (!isDefined(columnIndex) || columnIndex < 0) {\n              columnIndex = 0;\n            }\n\n            this._updateFocusedCellTabIndex(cellElements, columnIndex);\n          }\n        },\n        _updateFocusedCellTabIndex: function _updateFocusedCellTabIndex(cellElements, columnIndex) {\n          var keyboardController = this.getController(\"keyboardNavigation\");\n          var cellElementsLength = cellElements ? cellElements.length : -1;\n\n          var updateCellTabIndex = function updateCellTabIndex($cell) {\n            var isMasterDetailCell = keyboardController._isMasterDetailCell($cell);\n\n            var isValidCell = keyboardController._isCellValid($cell);\n\n            if (!isMasterDetailCell && isValidCell && isCellElement($cell)) {\n              keyboardController._applyTabIndexToElement($cell);\n\n              keyboardController.setCellFocusType();\n              return true;\n            }\n          };\n\n          var $cell = cellElements.filter(\"[aria-colindex='\".concat(columnIndex + 1, \"']\"));\n\n          if ($cell.length) {\n            updateCellTabIndex($cell);\n          } else {\n            if (cellElementsLength <= columnIndex) {\n              columnIndex = cellElementsLength - 1;\n            }\n\n            for (var i = columnIndex; i < cellElementsLength; ++i) {\n              if (updateCellTabIndex($(cellElements[i]))) {\n                break;\n              }\n            }\n          }\n        },\n        renderDelayedTemplates: function renderDelayedTemplates(change) {\n          this.callBase.apply(this, arguments);\n\n          this._renderFocusByChange(change);\n        },\n        _renderFocusByChange: function _renderFocusByChange(change) {\n          var _ref4 = null !== change && void 0 !== change ? change : {},\n              operationTypes = _ref4.operationTypes,\n              repaintChangesOnly = _ref4.repaintChangesOnly;\n\n          var _ref5 = null !== operationTypes && void 0 !== operationTypes ? operationTypes : {},\n              fullReload = _ref5.fullReload,\n              pageSize = _ref5.pageSize;\n\n          if (!change || !repaintChangesOnly || fullReload || pageSize) {\n            var preventScroll = shouldPreventScroll(this);\n            this.renderFocusState({\n              preventScroll: preventScroll,\n              pageSizeChanged: pageSize\n            });\n          }\n        },\n        _renderCore: function _renderCore(change) {\n          this.callBase.apply(this, arguments);\n\n          this._renderFocusByChange(change);\n        },\n        _editCellPrepared: function _editCellPrepared($cell) {\n          var editorInstance = this._getEditorInstance($cell);\n\n          var keyboardController = this.getController(\"keyboardNavigation\");\n\n          var isEditingNavigationMode = keyboardController && keyboardController._isFastEditingStarted();\n\n          if (editorInstance && isEditingNavigationMode) {\n            this._handleEditingNavigationMode(editorInstance);\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        _handleEditingNavigationMode: function _handleEditingNavigationMode(editorInstance) {\n          [\"downArrow\", \"upArrow\"].forEach(function (keyName) {\n            var originalKeyHandler = editorInstance._supportedKeys()[keyName];\n\n            editorInstance.registerKeyHandler(keyName, function (e) {\n              var isDropDownOpened = \"true\" === editorInstance._input().attr(\"aria-expanded\");\n\n              if (isDropDownOpened) {\n                return originalKeyHandler && originalKeyHandler.call(editorInstance, e);\n              }\n            });\n          });\n          editorInstance.registerKeyHandler(\"leftArrow\", noop);\n          editorInstance.registerKeyHandler(\"rightArrow\", noop);\n          var isDateBoxWithMask = editorInstance.NAME === DATEBOX_WIDGET_NAME && editorInstance.option(\"useMaskBehavior\");\n\n          if (isDateBoxWithMask) {\n            editorInstance.registerKeyHandler(\"enter\", noop);\n          }\n        },\n        _getEditorInstance: function _getEditorInstance($cell) {\n          var $editor = $cell.find(\".dx-texteditor\").eq(0);\n          return gridCoreUtils.getWidgetInstance($editor);\n        }\n      }\n    },\n    controllers: {\n      editing: {\n        editCell: function editCell(rowIndex, columnIndex) {\n          var keyboardController = this.getController(\"keyboardNavigation\");\n\n          if (keyboardController._processCanceledEditCellPosition(rowIndex, columnIndex)) {\n            return false;\n          }\n\n          var isCellEditing = this.callBase(rowIndex, columnIndex);\n\n          if (isCellEditing) {\n            keyboardController.setupFocusedView();\n          }\n\n          return isCellEditing;\n        },\n        editRow: function editRow(rowIndex) {\n          var keyboardController = this.getController(\"keyboardNavigation\");\n          var visibleColumnIndex = keyboardController.getVisibleColumnIndex();\n\n          var column = this._columnsController.getVisibleColumns()[visibleColumnIndex];\n\n          if (column && column.type || this.option(\"editing.mode\") === EDIT_MODE_FORM) {\n            keyboardController._resetFocusedCell();\n          }\n\n          this.callBase(rowIndex);\n        },\n        addRow: function addRow(parentKey) {\n          var keyboardController = this.getController(\"keyboardNavigation\");\n          keyboardController.setupFocusedView();\n          keyboardController.setCellFocusType();\n          return this.callBase.apply(this, arguments);\n        },\n        getFocusedCellInRow: function getFocusedCellInRow(rowIndex) {\n          var keyboardNavigationController = this.getController(\"keyboardNavigation\");\n          var $cell = this.callBase(rowIndex);\n\n          if (keyboardNavigationController.isKeyboardEnabled() && keyboardNavigationController._focusedCellPosition.rowIndex === rowIndex) {\n            var $focusedCell = keyboardNavigationController._getFocusedCell();\n\n            if (isElementDefined($focusedCell) && !$focusedCell.hasClass(COMMAND_EDIT_CLASS)) {\n              $cell = $focusedCell;\n            }\n          }\n\n          return $cell;\n        },\n        _processCanceledEditingCell: function _processCanceledEditingCell() {\n          var _this8 = this;\n\n          this.closeEditCell().done(function () {\n            var keyboardNavigation = _this8.getController(\"keyboardNavigation\");\n\n            keyboardNavigation._updateFocus();\n          });\n        },\n        init: function init() {\n          this.callBase();\n          this._keyboardNavigationController = this.getController(\"keyboardNavigation\");\n        },\n        closeEditCell: function closeEditCell() {\n          var keyboardNavigation = this._keyboardNavigationController;\n          keyboardNavigation._fastEditingStarted = false;\n          var result = this.callBase.apply(this, arguments);\n\n          keyboardNavigation._updateFocus();\n\n          return result;\n        },\n        _delayedInputFocus: function _delayedInputFocus() {\n          this._keyboardNavigationController._isNeedScroll = true;\n          this.callBase.apply(this, arguments);\n        },\n        _isEditingStart: function _isEditingStart() {\n          var keyboardNavigation = this.getController(\"keyboardNavigation\");\n          var cancel = this.callBase.apply(this, arguments);\n\n          if (cancel && !keyboardNavigation._isNeedFocus) {\n            var $cell = keyboardNavigation._getFocusedCell();\n\n            keyboardNavigation._focus($cell, true);\n          }\n\n          return cancel;\n        }\n      },\n      data: {\n        _correctRowIndices: function _correctRowIndices(getRowIndexCorrection) {\n          var that = this;\n          var keyboardNavigationController = that.getController(\"keyboardNavigation\");\n          var editorFactory = that.getController(\"editorFactory\");\n          var focusedCellPosition = keyboardNavigationController._focusedCellPosition;\n          that.callBase.apply(that, arguments);\n\n          if (focusedCellPosition && focusedCellPosition.rowIndex >= 0) {\n            var focusedRowIndexCorrection = getRowIndexCorrection(focusedCellPosition.rowIndex);\n\n            if (focusedRowIndexCorrection) {\n              focusedCellPosition.rowIndex += focusedRowIndexCorrection;\n              editorFactory.refocus();\n            }\n          }\n        },\n        getMaxRowIndex: function getMaxRowIndex() {\n          var result = this.items().length - 1;\n          var virtualItemsCount = this.virtualItemsCount();\n\n          if (virtualItemsCount) {\n            result += virtualItemsCount.begin + virtualItemsCount.end;\n          }\n\n          return result;\n        }\n      },\n      adaptiveColumns: {\n        _showHiddenCellsInView: function _showHiddenCellsInView(_ref) {\n          var viewName = _ref.viewName,\n              $cells = _ref.$cells,\n              isCommandColumn = _ref.isCommandColumn;\n          this.callBase.apply(this, arguments);\n          viewName === COLUMN_HEADERS_VIEW && !isCommandColumn && $cells.each(function (_, cellElement) {\n            var $cell = $(cellElement);\n            isCellInHeaderRow($cell) && $cell.attr(\"tabindex\", 0);\n          });\n        },\n        _hideVisibleCellInView: function _hideVisibleCellInView(_ref2) {\n          var viewName = _ref2.viewName,\n              $cell = _ref2.$cell,\n              isCommandColumn = _ref2.isCommandColumn;\n          this.callBase.apply(this, arguments);\n\n          if (viewName === COLUMN_HEADERS_VIEW && !isCommandColumn && isCellInHeaderRow($cell)) {\n            $cell.removeAttr(\"tabindex\");\n          }\n        }\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}