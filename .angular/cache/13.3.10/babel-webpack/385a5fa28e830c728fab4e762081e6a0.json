{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.selection.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport gridCore from \"../data_grid/ui.data_grid.core\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nimport { isDefined } from \"../../core/utils/type\";\nimport { each } from \"../../core/utils/iterator\";\nimport { extend } from \"../../core/utils/extend\";\nimport { touch } from \"../../core/utils/support\";\nimport { name as clickEventName } from \"../../events/click\";\nimport messageLocalization from \"../../localization/message\";\nimport { addNamespace, isCommandKeyPressed } from \"../../events/utils/index\";\nimport holdEvent from \"../../events/hold\";\nimport Selection from \"../selection/selection\";\nimport { Deferred } from \"../../core/utils/deferred\";\nimport errors from \"../widget/ui.errors\";\nvar EDITOR_CELL_CLASS = \"dx-editor-cell\";\nvar ROW_CLASS = \"dx-row\";\nvar ROW_SELECTION_CLASS = \"dx-selection\";\nvar SELECT_CHECKBOX_CLASS = \"dx-select-checkbox\";\nvar CHECKBOXES_HIDDEN_CLASS = \"dx-select-checkboxes-hidden\";\nvar COMMAND_SELECT_CLASS = \"dx-command-select\";\nvar SELECTION_DISABLED_CLASS = \"dx-selection-disabled\";\nvar DATA_ROW_CLASS = \"dx-data-row\";\nvar SHOW_CHECKBOXES_MODE = \"selection.showCheckBoxesMode\";\nvar SELECTION_MODE = \"selection.mode\";\n\nvar processLongTap = function processLongTap(that, dxEvent) {\n  var selectionController = that.getController(\"selection\");\n  var rowsView = that.getView(\"rowsView\");\n  var $row = $(dxEvent.target).closest(\".\" + DATA_ROW_CLASS);\n  var rowIndex = rowsView.getRowIndex($row);\n\n  if (rowIndex < 0) {\n    return;\n  }\n\n  if (\"onLongTap\" === that.option(SHOW_CHECKBOXES_MODE)) {\n    if (selectionController.isSelectionWithCheckboxes()) {\n      selectionController.stopSelectionWithCheckboxes();\n    } else {\n      selectionController.startSelectionWithCheckboxes();\n    }\n  } else {\n    if (\"onClick\" === that.option(SHOW_CHECKBOXES_MODE)) {\n      selectionController.startSelectionWithCheckboxes();\n    }\n\n    if (\"always\" !== that.option(SHOW_CHECKBOXES_MODE)) {\n      selectionController.changeItemSelection(rowIndex, {\n        control: true\n      });\n    }\n  }\n};\n\nvar SelectionController = gridCore.Controller.inherit(function () {\n  var selectionCellTemplate = function selectionCellTemplate(container, options) {\n    var component = options.component;\n    var rowsView = component.getView(\"rowsView\");\n\n    if (component.option(\"renderAsync\") && !component.option(\"selection.deferred\")) {\n      options.value = component.isRowSelected(options.row.key);\n    }\n\n    rowsView.renderSelectCheckBoxContainer($(container), options);\n  };\n\n  var selectionHeaderTemplate = function selectionHeaderTemplate(container, options) {\n    var column = options.column;\n    var $cellElement = $(container);\n    var columnHeadersView = options.component.getView(\"columnHeadersView\");\n    $cellElement.addClass(EDITOR_CELL_CLASS);\n\n    columnHeadersView._renderSelectAllCheckBox($cellElement, column);\n\n    columnHeadersView._attachSelectAllCheckBoxClickEvent($cellElement);\n  };\n\n  return {\n    init: function init() {\n      var _ref = this.option(\"selection\") || {},\n          deferred = _ref.deferred,\n          selectAllMode = _ref.selectAllMode,\n          mode = _ref.mode;\n\n      if (\"infinite\" === this.option(\"scrolling.mode\") && !deferred && \"multiple\" === mode && \"allPages\" === selectAllMode) {\n        errors.log(\"W1018\");\n      }\n\n      this._dataController = this.getController(\"data\");\n      this._selectionMode = mode;\n      this._isSelectionWithCheckboxes = false;\n      this._selection = this._createSelection();\n\n      this._updateSelectColumn();\n\n      this.createAction(\"onSelectionChanged\", {\n        excludeValidators: [\"disabled\", \"readOnly\"]\n      });\n      this._dataController && this._dataController.pushed.add(this._handleDataPushed.bind(this));\n    },\n    _handleDataPushed: function _handleDataPushed(changes) {\n      var removedKeys = changes.filter(function (change) {\n        return \"remove\" === change.type;\n      }).map(function (change) {\n        return change.key;\n      });\n      removedKeys.length && this.deselectRows(removedKeys);\n    },\n    _getSelectionConfig: function _getSelectionConfig() {\n      var dataController = this._dataController;\n      var columnsController = this.getController(\"columns\");\n      var selectionOptions = this.option(\"selection\") || {};\n      var deferred = selectionOptions.deferred;\n      var scrollingMode = this.option(\"scrolling.mode\");\n      var virtualPaging = \"virtual\" === scrollingMode || \"infinite\" === scrollingMode;\n      var allowSelectAll = this.option(\"selection.allowSelectAll\");\n      var legacyScrollingMode = this.option(\"scrolling.legacyMode\");\n      return {\n        selectedKeys: this.option(\"selectedRowKeys\"),\n        mode: this._selectionMode,\n        deferred: deferred,\n        maxFilterLengthInRequest: selectionOptions.maxFilterLengthInRequest,\n        selectionFilter: this.option(\"selectionFilter\"),\n        ignoreDisabledItems: true,\n        allowLoadByRange: function allowLoadByRange() {\n          var hasGroupColumns = columnsController.getGroupColumns().length > 0;\n          return virtualPaging && !legacyScrollingMode && !hasGroupColumns && allowSelectAll && !deferred;\n        },\n        key: function key() {\n          return null === dataController || void 0 === dataController ? void 0 : dataController.key();\n        },\n        keyOf: function keyOf(item) {\n          return null === dataController || void 0 === dataController ? void 0 : dataController.keyOf(item);\n        },\n        dataFields: function dataFields() {\n          var _dataController$dataS;\n\n          return null === (_dataController$dataS = dataController.dataSource()) || void 0 === _dataController$dataS ? void 0 : _dataController$dataS.select();\n        },\n        load: function load(options) {\n          var _dataController$dataS2;\n\n          return (null === (_dataController$dataS2 = dataController.dataSource()) || void 0 === _dataController$dataS2 ? void 0 : _dataController$dataS2.load(options)) || new Deferred().resolve([]);\n        },\n        plainItems: function plainItems() {\n          return dataController.items(true);\n        },\n        isItemSelected: function isItemSelected(item) {\n          return item.selected;\n        },\n        isSelectableItem: function isSelectableItem(item) {\n          return \"data\" === (null === item || void 0 === item ? void 0 : item.rowType) && !item.isNewRow;\n        },\n        getItemData: function getItemData(item) {\n          return (null === item || void 0 === item ? void 0 : item.oldData) || (null === item || void 0 === item ? void 0 : item.data) || item;\n        },\n        filter: function filter() {\n          return dataController.getCombinedFilter(deferred);\n        },\n        totalCount: function totalCount() {\n          return dataController.totalCount();\n        },\n        getLoadOptions: function getLoadOptions(loadItemIndex, focusedItemIndex, shiftItemIndex) {\n          var _dataController$dataS3, _dataController$dataS4;\n\n          var _ref2 = null !== (_dataController$dataS3 = null === (_dataController$dataS4 = dataController.dataSource()) || void 0 === _dataController$dataS4 ? void 0 : _dataController$dataS4.lastLoadOptions()) && void 0 !== _dataController$dataS3 ? _dataController$dataS3 : {},\n              sort = _ref2.sort,\n              filter = _ref2.filter;\n\n          var minIndex = Math.min(loadItemIndex, focusedItemIndex);\n          var maxIndex = Math.max(loadItemIndex, focusedItemIndex);\n\n          if (isDefined(shiftItemIndex)) {\n            minIndex = Math.min(shiftItemIndex, minIndex);\n            maxIndex = Math.max(shiftItemIndex, maxIndex);\n          }\n\n          var take = maxIndex - minIndex + 1;\n          return {\n            skip: minIndex,\n            take: take,\n            filter: filter,\n            sort: sort\n          };\n        },\n        onSelectionChanged: this._updateSelectedItems.bind(this)\n      };\n    },\n    _updateSelectColumn: function _updateSelectColumn() {\n      var columnsController = this.getController(\"columns\");\n      var isSelectColumnVisible = this.isSelectColumnVisible();\n      columnsController.addCommandColumn({\n        type: \"selection\",\n        command: \"select\",\n        visible: isSelectColumnVisible,\n        visibleIndex: -1,\n        dataType: \"boolean\",\n        alignment: \"center\",\n        cssClass: COMMAND_SELECT_CLASS,\n        width: \"auto\",\n        cellTemplate: selectionCellTemplate,\n        headerCellTemplate: selectionHeaderTemplate\n      });\n      columnsController.columnOption(\"command:select\", \"visible\", isSelectColumnVisible);\n    },\n    _createSelection: function _createSelection() {\n      var options = this._getSelectionConfig();\n\n      return new Selection(options);\n    },\n    _fireSelectionChanged: function _fireSelectionChanged(options) {\n      var argument = this.option(\"selection.deferred\") ? {\n        selectionFilter: this.option(\"selectionFilter\")\n      } : {\n        selectedRowKeys: this.option(\"selectedRowKeys\")\n      };\n      this.selectionChanged.fire(argument);\n\n      if (options) {\n        this.executeAction(\"onSelectionChanged\", options);\n      }\n    },\n    _updateCheckboxesState: function _updateCheckboxesState(options) {\n      var isDeferredMode = options.isDeferredMode;\n      var selectionFilter = options.selectionFilter;\n      var selectedItemKeys = options.selectedItemKeys;\n      var removedItemKeys = options.removedItemKeys;\n\n      if (\"onClick\" === this.option(SHOW_CHECKBOXES_MODE)) {\n        if (isDeferredMode ? selectionFilter && function (that, selectionFilter) {\n          var keyIndex = 0;\n\n          var store = that._dataController.store();\n\n          var key = store && store.key();\n          var isComplexKey = Array.isArray(key);\n\n          if (!selectionFilter.length) {\n            return false;\n          }\n\n          if (isComplexKey && Array.isArray(selectionFilter[0]) && \"and\" === selectionFilter[1]) {\n            for (var i = 0; i < selectionFilter.length; i++) {\n              if (Array.isArray(selectionFilter[i])) {\n                if (selectionFilter[i][0] !== key[keyIndex] || \"=\" !== selectionFilter[i][1]) {\n                  return true;\n                }\n\n                keyIndex++;\n              }\n            }\n\n            return false;\n          }\n\n          return key !== selectionFilter[0];\n        }(this, selectionFilter) : selectedItemKeys.length > 1) {\n          this.startSelectionWithCheckboxes();\n        } else if (isDeferredMode ? selectionFilter && !selectionFilter.length : 0 === selectedItemKeys.length && removedItemKeys.length) {\n          this.stopSelectionWithCheckboxes();\n        }\n      }\n    },\n    _updateSelectedItems: function _updateSelectedItems(args) {\n      var selectionChangedOptions;\n      var isDeferredMode = this.option(\"selection.deferred\");\n\n      var selectionFilter = this._selection.selectionFilter();\n\n      var dataController = this._dataController;\n      var items = dataController.items();\n\n      if (!items) {\n        return;\n      }\n\n      var isSelectionWithCheckboxes = this.isSelectionWithCheckboxes();\n      var changedItemIndexes = this.getChangedItemIndexes(items);\n\n      this._updateCheckboxesState({\n        selectedItemKeys: args.selectedItemKeys,\n        removedItemKeys: args.removedItemKeys,\n        selectionFilter: selectionFilter,\n        isDeferredMode: isDeferredMode\n      });\n\n      if (changedItemIndexes.length || isSelectionWithCheckboxes !== this.isSelectionWithCheckboxes()) {\n        dataController.updateItems({\n          changeType: \"updateSelection\",\n          itemIndexes: changedItemIndexes\n        });\n      }\n\n      if (isDeferredMode) {\n        this.option(\"selectionFilter\", selectionFilter);\n        selectionChangedOptions = {};\n      } else if (args.addedItemKeys.length || args.removedItemKeys.length) {\n        this._selectedItemsInternalChange = true;\n        this.option(\"selectedRowKeys\", args.selectedItemKeys.slice(0));\n        this._selectedItemsInternalChange = false;\n        selectionChangedOptions = {\n          selectedRowsData: args.selectedItems.slice(0),\n          selectedRowKeys: args.selectedItemKeys.slice(0),\n          currentSelectedRowKeys: args.addedItemKeys.slice(0),\n          currentDeselectedRowKeys: args.removedItemKeys.slice(0)\n        };\n      }\n\n      this._fireSelectionChanged(selectionChangedOptions);\n    },\n    getChangedItemIndexes: function getChangedItemIndexes(items) {\n      var itemIndexes = [];\n      var isDeferredSelection = this.option(\"selection.deferred\");\n\n      for (var i = 0, length = items.length; i < length; i++) {\n        var row = items[i];\n        var isItemSelected = this.isRowSelected(isDeferredSelection ? row.data : row.key);\n\n        if (this._selection.isDataItem(row) && row.isSelected !== isItemSelected) {\n          itemIndexes.push(i);\n        }\n      }\n\n      return itemIndexes;\n    },\n    callbackNames: function callbackNames() {\n      return [\"selectionChanged\"];\n    },\n    optionChanged: function optionChanged(args) {\n      var _this = this;\n\n      this.callBase(args);\n\n      switch (args.name) {\n        case \"selection\":\n          var oldSelectionMode = this._selectionMode;\n          this.init();\n\n          if (\"selection.showCheckBoxesMode\" !== args.fullName) {\n            var selectionMode = this._selectionMode;\n            var selectedRowKeys = this.option(\"selectedRowKeys\");\n\n            if (oldSelectionMode !== selectionMode) {\n              if (\"single\" === selectionMode) {\n                if (selectedRowKeys.length > 1) {\n                  selectedRowKeys = [selectedRowKeys[0]];\n                }\n              } else if (\"multiple\" !== selectionMode) {\n                selectedRowKeys = [];\n              }\n            }\n\n            this.selectRows(selectedRowKeys).always(function () {\n              _this._fireSelectionChanged();\n            });\n          }\n\n          this.getController(\"columns\").updateColumns();\n          args.handled = true;\n          break;\n\n        case \"selectionFilter\":\n          this._selection.selectionFilter(args.value);\n\n          args.handled = true;\n          break;\n\n        case \"selectedRowKeys\":\n          var value = args.value || [];\n\n          if (Array.isArray(value) && !this._selectedItemsInternalChange && (this.component.getDataSource() || !value.length)) {\n            this.selectRows(value);\n          }\n\n          args.handled = true;\n      }\n    },\n    publicMethods: function publicMethods() {\n      return [\"selectRows\", \"deselectRows\", \"selectRowsByIndexes\", \"getSelectedRowKeys\", \"getSelectedRowsData\", \"clearSelection\", \"selectAll\", \"deselectAll\", \"startSelectionWithCheckboxes\", \"stopSelectionWithCheckboxes\", \"isRowSelected\"];\n    },\n    isRowSelected: function isRowSelected(arg) {\n      return this._selection.isItemSelected(arg);\n    },\n    isSelectColumnVisible: function isSelectColumnVisible() {\n      return \"multiple\" === this.option(SELECTION_MODE) && (\"always\" === this.option(SHOW_CHECKBOXES_MODE) || \"onClick\" === this.option(SHOW_CHECKBOXES_MODE) || this._isSelectionWithCheckboxes);\n    },\n    _isOnePageSelectAll: function _isOnePageSelectAll() {\n      return \"page\" === this.option(\"selection.selectAllMode\");\n    },\n    isSelectAll: function isSelectAll() {\n      return this._selection.getSelectAllState(this._isOnePageSelectAll());\n    },\n    selectAll: function selectAll() {\n      if (\"onClick\" === this.option(SHOW_CHECKBOXES_MODE)) {\n        this.startSelectionWithCheckboxes();\n      }\n\n      return this._selection.selectAll(this._isOnePageSelectAll());\n    },\n    deselectAll: function deselectAll() {\n      return this._selection.deselectAll(this._isOnePageSelectAll());\n    },\n    clearSelection: function clearSelection() {\n      return this.selectedItemKeys([]);\n    },\n    refresh: function refresh() {\n      var selectedRowKeys = this.option(\"selectedRowKeys\") || [];\n\n      if (!this.option(\"selection.deferred\") && selectedRowKeys.length) {\n        return this.selectedItemKeys(selectedRowKeys);\n      }\n\n      return new Deferred().resolve().promise();\n    },\n    selectedItemKeys: function selectedItemKeys(value, preserve, isDeselect, isSelectAll) {\n      return this._selection.selectedItemKeys(value, preserve, isDeselect, isSelectAll);\n    },\n    getSelectedRowKeys: function getSelectedRowKeys() {\n      return this._selection.getSelectedItemKeys();\n    },\n    selectRows: function selectRows(keys, preserve) {\n      return this.selectedItemKeys(keys, preserve);\n    },\n    deselectRows: function deselectRows(keys) {\n      return this.selectedItemKeys(keys, true, true);\n    },\n    selectRowsByIndexes: function selectRowsByIndexes(indexes) {\n      var items = this._dataController.items();\n\n      var keys = [];\n\n      if (!Array.isArray(indexes)) {\n        indexes = Array.prototype.slice.call(arguments, 0);\n      }\n\n      each(indexes, function () {\n        var item = items[this];\n\n        if (item && \"data\" === item.rowType) {\n          keys.push(item.key);\n        }\n      });\n      return this.selectRows(keys);\n    },\n    getSelectedRowsData: function getSelectedRowsData() {\n      return this._selection.getSelectedItems();\n    },\n    changeItemSelection: function changeItemSelection(visibleItemIndex, keys) {\n      keys = keys || {};\n\n      if (this.isSelectionWithCheckboxes()) {\n        keys.control = true;\n      }\n\n      var loadedItemIndex = visibleItemIndex + this._dataController.getRowIndexOffset() - this._dataController.getRowIndexOffset(true);\n\n      return this._selection.changeItemSelection(loadedItemIndex, keys);\n    },\n    focusedItemIndex: function focusedItemIndex(itemIndex) {\n      if (isDefined(itemIndex)) {\n        this._selection._focusedItemIndex = itemIndex;\n      } else {\n        return this._selection._focusedItemIndex;\n      }\n    },\n    isSelectionWithCheckboxes: function isSelectionWithCheckboxes() {\n      return \"multiple\" === this.option(SELECTION_MODE) && (\"always\" === this.option(SHOW_CHECKBOXES_MODE) || this._isSelectionWithCheckboxes);\n    },\n    startSelectionWithCheckboxes: function startSelectionWithCheckboxes() {\n      if (\"multiple\" === this.option(SELECTION_MODE) && !this.isSelectionWithCheckboxes()) {\n        this._isSelectionWithCheckboxes = true;\n\n        this._updateSelectColumn();\n\n        return true;\n      }\n\n      return false;\n    },\n    stopSelectionWithCheckboxes: function stopSelectionWithCheckboxes() {\n      if (this._isSelectionWithCheckboxes) {\n        this._isSelectionWithCheckboxes = false;\n\n        this._updateSelectColumn();\n\n        return true;\n      }\n\n      return false;\n    }\n  };\n}());\nexport var selectionModule = {\n  defaultOptions: function defaultOptions() {\n    return {\n      selection: {\n        mode: \"none\",\n        showCheckBoxesMode: \"onClick\",\n        allowSelectAll: true,\n        selectAllMode: \"allPages\",\n        maxFilterLengthInRequest: 1500,\n        deferred: false\n      },\n      selectionFilter: [],\n      selectedRowKeys: []\n    };\n  },\n  controllers: {\n    selection: SelectionController\n  },\n  extenders: {\n    controllers: {\n      data: {\n        init: function init() {\n          var selectionController = this.getController(\"selection\");\n          var isDeferredMode = this.option(\"selection.deferred\");\n          this.callBase.apply(this, arguments);\n\n          if (isDeferredMode) {\n            selectionController._updateCheckboxesState({\n              isDeferredMode: true,\n              selectionFilter: this.option(\"selectionFilter\")\n            });\n          }\n        },\n        _loadDataSource: function _loadDataSource() {\n          var that = this;\n          return that.callBase().done(function () {\n            that.getController(\"selection\").refresh();\n          });\n        },\n        _processDataItem: function _processDataItem(item, options) {\n          var that = this;\n          var selectionController = that.getController(\"selection\");\n          var hasSelectColumn = selectionController.isSelectColumnVisible();\n          var isDeferredSelection = options.isDeferredSelection = void 0 === options.isDeferredSelection ? this.option(\"selection.deferred\") : options.isDeferredSelection;\n          var dataItem = this.callBase.apply(this, arguments);\n          dataItem.isSelected = selectionController.isRowSelected(isDeferredSelection ? dataItem.data : dataItem.key);\n\n          if (hasSelectColumn && dataItem.values) {\n            for (var i = 0; i < options.visibleColumns.length; i++) {\n              if (\"select\" === options.visibleColumns[i].command) {\n                dataItem.values[i] = dataItem.isSelected;\n                break;\n              }\n            }\n          }\n\n          return dataItem;\n        },\n        refresh: function refresh(options) {\n          var that = this;\n          var d = new Deferred();\n          this.callBase.apply(this, arguments).done(function () {\n            if (!options || options.selection) {\n              that.getController(\"selection\").refresh().done(d.resolve).fail(d.reject);\n            } else {\n              d.resolve();\n            }\n          }).fail(d.reject);\n          return d.promise();\n        },\n        _handleDataChanged: function _handleDataChanged(e) {\n          this.callBase.apply(this, arguments);\n\n          if ((!e || \"refresh\" === e.changeType) && !this._repaintChangesOnly) {\n            this.getController(\"selection\").focusedItemIndex(-1);\n          }\n        },\n        _applyChange: function _applyChange(change) {\n          var _this2 = this;\n\n          if (change && \"updateSelection\" === change.changeType) {\n            change.items.forEach(function (item, index) {\n              var currentItem = _this2._items[index];\n\n              if (currentItem) {\n                currentItem.isSelected = item.isSelected;\n                currentItem.values = item.values;\n              }\n            });\n            return;\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _endUpdateCore: function _endUpdateCore() {\n          var changes = this._changes;\n          var isUpdateSelection = changes.length > 1 && changes.every(function (change) {\n            return \"updateSelection\" === change.changeType;\n          });\n\n          if (isUpdateSelection) {\n            var itemIndexes = changes.map(function (change) {\n              return change.itemIndexes || [];\n            }).reduce(function (a, b) {\n              return a.concat(b);\n            });\n            this._changes = [{\n              changeType: \"updateSelection\",\n              itemIndexes: itemIndexes\n            }];\n          }\n\n          this.callBase.apply(this, arguments);\n        }\n      },\n      contextMenu: {\n        _contextMenuPrepared: function _contextMenuPrepared(options) {\n          var dxEvent = options.event;\n\n          if (dxEvent.originalEvent && \"dxhold\" !== dxEvent.originalEvent.type || options.items && options.items.length > 0) {\n            return;\n          }\n\n          processLongTap(this, dxEvent);\n        }\n      }\n    },\n    views: {\n      columnHeadersView: {\n        init: function init() {\n          this.callBase();\n          this.getController(\"selection\").selectionChanged.add(this._updateSelectAllValue.bind(this));\n        },\n        _updateSelectAllValue: function _updateSelectAllValue() {\n          var $element = this.element();\n          var $editor = $element && $element.find(\".\" + SELECT_CHECKBOX_CLASS);\n\n          if ($element && $editor.length && \"multiple\" === this.option(\"selection.mode\")) {\n            var selectAllValue = this.getController(\"selection\").isSelectAll();\n            var hasSelection = false !== selectAllValue;\n            var isVisible = this.option(\"selection.allowSelectAll\") ? !this.getController(\"data\").isEmpty() : hasSelection;\n            $editor.dxCheckBox(\"instance\").option({\n              visible: isVisible,\n              value: selectAllValue\n            });\n          }\n        },\n        _handleDataChanged: function _handleDataChanged(e) {\n          this.callBase(e);\n\n          if (!e || \"refresh\" === e.changeType) {\n            this._updateSelectAllValue();\n          }\n        },\n        _renderSelectAllCheckBox: function _renderSelectAllCheckBox($container, column) {\n          var that = this;\n          var selectionController = that.getController(\"selection\");\n          var isEmptyData = that.getController(\"data\").isEmpty();\n          var groupElement = $(\"<div>\").appendTo($container).addClass(SELECT_CHECKBOX_CLASS);\n          that.setAria(\"label\", messageLocalization.format(\"dxDataGrid-ariaSelectAll\"), $container);\n          that.getController(\"editorFactory\").createEditor(groupElement, extend({}, column, {\n            parentType: \"headerRow\",\n            dataType: \"boolean\",\n            value: selectionController.isSelectAll(),\n            editorOptions: {\n              visible: !isEmptyData && (that.option(\"selection.allowSelectAll\") || false !== selectionController.isSelectAll())\n            },\n            tabIndex: that.option(\"useLegacyKeyboardNavigation\") ? -1 : that.option(\"tabIndex\") || 0,\n            setValue: function setValue(value, e) {\n              var allowSelectAll = that.option(\"selection.allowSelectAll\");\n              e.component.option(\"visible\", allowSelectAll || false !== e.component.option(\"value\"));\n\n              if (!e.event || selectionController.isSelectAll() === value) {\n                return;\n              }\n\n              if (e.value && !allowSelectAll) {\n                e.component.option(\"value\", false);\n              } else {\n                e.value ? selectionController.selectAll() : selectionController.deselectAll();\n              }\n\n              e.event.preventDefault();\n            }\n          }));\n          return groupElement;\n        },\n        _attachSelectAllCheckBoxClickEvent: function _attachSelectAllCheckBoxClickEvent($element) {\n          eventsEngine.on($element, clickEventName, this.createAction(function (e) {\n            var event = e.event;\n\n            if (!$(event.target).closest(\".\" + SELECT_CHECKBOX_CLASS).length) {\n              eventsEngine.trigger($(event.currentTarget).children(\".\" + SELECT_CHECKBOX_CLASS), clickEventName);\n            }\n\n            event.preventDefault();\n          }));\n        }\n      },\n      rowsView: {\n        renderSelectCheckBoxContainer: function renderSelectCheckBoxContainer($container, options) {\n          if (\"data\" === options.rowType && !options.row.isNewRow) {\n            $container.addClass(EDITOR_CELL_CLASS);\n\n            this._attachCheckBoxClickEvent($container);\n\n            this.setAria(\"label\", messageLocalization.format(\"dxDataGrid-ariaSelectRow\"), $container);\n\n            this._renderSelectCheckBox($container, options);\n          } else {\n            gridCoreUtils.setEmptyText($container);\n          }\n        },\n        _renderSelectCheckBox: function _renderSelectCheckBox(container, options) {\n          var groupElement = $(\"<div>\").addClass(SELECT_CHECKBOX_CLASS).appendTo(container);\n          this.getController(\"editorFactory\").createEditor(groupElement, extend({}, options.column, {\n            parentType: \"dataRow\",\n            dataType: \"boolean\",\n            lookup: null,\n            value: options.value,\n            setValue: function setValue(value, e) {\n              var _e$event;\n\n              if (\"keydown\" === (null === e || void 0 === e ? void 0 : null === (_e$event = e.event) || void 0 === _e$event ? void 0 : _e$event.type)) {\n                eventsEngine.trigger(e.element, clickEventName, e);\n              }\n            },\n            row: options.row\n          }));\n          return groupElement;\n        },\n        _attachCheckBoxClickEvent: function _attachCheckBoxClickEvent($element) {\n          eventsEngine.on($element, clickEventName, this.createAction(function (e) {\n            var selectionController = this.getController(\"selection\");\n            var event = e.event;\n            var rowIndex = this.getRowIndex($(event.currentTarget).closest(\".\" + ROW_CLASS));\n\n            if (rowIndex >= 0) {\n              selectionController.startSelectionWithCheckboxes();\n              selectionController.changeItemSelection(rowIndex, {\n                shift: event.shiftKey\n              });\n\n              if ($(event.target).closest(\".\" + SELECT_CHECKBOX_CLASS).length) {\n                this.getController(\"data\").updateItems({\n                  changeType: \"updateSelection\",\n                  itemIndexes: [rowIndex]\n                });\n              }\n            }\n          }));\n        },\n        _update: function _update(change) {\n          var that = this;\n          var tableElements = that.getTableElements();\n\n          if (\"updateSelection\" === change.changeType) {\n            if (tableElements.length > 0) {\n              each(tableElements, function (_, tableElement) {\n                each(change.itemIndexes || [], function (_, index) {\n                  var $row;\n\n                  if (change.items[index]) {\n                    $row = that._getRowElements($(tableElement)).eq(index);\n\n                    if ($row.length) {\n                      var isSelected = change.items[index].isSelected;\n                      $row.toggleClass(ROW_SELECTION_CLASS, void 0 === isSelected ? false : isSelected).find(\".\" + SELECT_CHECKBOX_CLASS).dxCheckBox(\"option\", \"value\", isSelected);\n                      that.setAria(\"selected\", isSelected, $row);\n                    }\n                  }\n                });\n              });\n\n              that._updateCheckboxesClass();\n            }\n          } else {\n            that.callBase(change);\n          }\n        },\n        _createTable: function _createTable() {\n          var that = this;\n          var selectionMode = that.option(\"selection.mode\");\n          var $table = that.callBase.apply(that, arguments);\n\n          if (\"none\" !== selectionMode) {\n            if (\"onLongTap\" === that.option(SHOW_CHECKBOXES_MODE) || !touch) {\n              eventsEngine.on($table, addNamespace(holdEvent.name, \"dxDataGridRowsView\"), \".\" + DATA_ROW_CLASS, that.createAction(function (e) {\n                processLongTap(that.component, e.event);\n                e.event.stopPropagation();\n              }));\n            }\n\n            eventsEngine.on($table, \"mousedown selectstart\", that.createAction(function (e) {\n              var event = e.event;\n\n              if (event.shiftKey) {\n                event.preventDefault();\n              }\n            }));\n          }\n\n          return $table;\n        },\n        _createRow: function _createRow(row) {\n          var $row = this.callBase.apply(this, arguments);\n\n          if (row) {\n            var isSelected = !!row.isSelected;\n\n            if (isSelected) {\n              $row.addClass(ROW_SELECTION_CLASS);\n            }\n\n            this.setAria(\"selected\", isSelected, $row);\n          }\n\n          return $row;\n        },\n        _rowClick: function _rowClick(e) {\n          var dxEvent = e.event;\n          var isSelectionDisabled = $(dxEvent.target).closest(\".\" + SELECTION_DISABLED_CLASS).length;\n\n          if (!this.isClickableElement($(dxEvent.target))) {\n            if (!isSelectionDisabled && (\"multiple\" !== this.option(SELECTION_MODE) || \"always\" !== this.option(SHOW_CHECKBOXES_MODE))) {\n              if (this.getController(\"selection\").changeItemSelection(e.rowIndex, {\n                control: isCommandKeyPressed(dxEvent),\n                shift: dxEvent.shiftKey\n              })) {\n                dxEvent.preventDefault();\n                e.handled = true;\n              }\n            }\n\n            this.callBase(e);\n          }\n        },\n        isClickableElement: function isClickableElement($target) {\n          var isCommandSelect = $target.closest(\".\" + COMMAND_SELECT_CLASS).length;\n          return !!isCommandSelect;\n        },\n        _renderCore: function _renderCore(change) {\n          this.callBase(change);\n\n          this._updateCheckboxesClass();\n        },\n        _updateCheckboxesClass: function _updateCheckboxesClass() {\n          var tableElements = this.getTableElements();\n          var selectionController = this.getController(\"selection\");\n          var isCheckBoxesHidden = selectionController.isSelectColumnVisible() && !selectionController.isSelectionWithCheckboxes();\n          each(tableElements, function (_, tableElement) {\n            $(tableElement).toggleClass(CHECKBOXES_HIDDEN_CLASS, isCheckBoxesHidden);\n          });\n        }\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}