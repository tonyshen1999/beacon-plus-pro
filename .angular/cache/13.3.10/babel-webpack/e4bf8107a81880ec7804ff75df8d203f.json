{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/pivot_grid/ui.pivot_grid.field_chooser.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { getImageContainer } from \"../../core/utils/icon\";\nimport { hasWindow as hasWindowFn } from \"../../core/utils/window\";\nimport { isDefined } from \"../../core/utils/type\";\nimport { extend } from \"../../core/utils/extend\";\nimport { inArray } from \"../../core/utils/array\";\nimport { each } from \"../../core/utils/iterator\";\nimport localizationMessage from \"../../localization/message\";\nimport registerComponent from \"../../core/component_registrator\";\nimport { getCompareFunction, foreachDataLevel } from \"./ui.pivot_grid.utils\";\nimport TreeView from \"../tree_view\";\nimport ContextMenu from \"../context_menu\";\nimport BaseFieldChooser from \"./ui.pivot_grid.field_chooser_base\";\nvar DIV = \"<div>\";\nvar hasWindow = hasWindowFn();\nimport \"./data_source\";\nvar FIELDCHOOSER_CLASS = \"dx-pivotgridfieldchooser\";\nvar FIELDCHOOSER_CONTAINER_CLASS = \"dx-pivotgridfieldchooser-container\";\nvar FIELDS_CONTAINER_CLASS = \"dx-pivotgrid-fields-container\";\nvar AREA_DRAG_CLASS = \"dx-pivotgrid-drag-action\";\n\nfunction getDimensionFields(item, fields) {\n  var result = [];\n\n  if (item.items) {\n    for (var i = 0; i < item.items.length; i++) {\n      result.push.apply(result, getDimensionFields(item.items[i], fields));\n    }\n  } else if (isDefined(item.index)) {\n    result.push(fields[item.index]);\n  }\n\n  return result;\n}\n\nfunction getFirstItem(item, condition) {\n  if (item.items) {\n    for (var i = 0; i < item.items.length; i++) {\n      var childrenItem = getFirstItem(item.items[i], condition);\n\n      if (childrenItem) {\n        return childrenItem;\n      }\n    }\n  }\n\n  if (condition(item)) {\n    return item;\n  }\n}\n\nvar compareOrder = [function (a, b) {\n  var aValue = -!!a.isMeasure;\n  var bValue = +!!b.isMeasure;\n  return aValue + bValue;\n}, function (a, b) {\n  var aValue = -!!(a.items && a.items.length);\n  var bValue = +!!(b.items && b.items.length);\n  return aValue + bValue;\n}, function (a, b) {\n  var aValue = +!!(false === a.isMeasure && a.field && a.field.levels && a.field.levels.length);\n  var bValue = -!!(false === b.isMeasure && b.field && b.field.levels && b.field.levels.length);\n  return aValue + bValue;\n}, getCompareFunction(function (item) {\n  return item.text;\n})];\n\nfunction compareItems(a, b) {\n  var result = 0;\n  var i = 0;\n\n  while (!result && compareOrder[i]) {\n    result = compareOrder[i++](a, b);\n  }\n\n  return result;\n}\n\nfunction getScrollable(container) {\n  return container.find(\".dx-scrollable\").dxScrollable(\"instance\");\n}\n\nvar FieldChooser = BaseFieldChooser.inherit({\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      height: 400,\n      layout: 0,\n      dataSource: null,\n      onContextMenuPreparing: null,\n      allowSearch: false,\n      searchTimeout: 500,\n      texts: {\n        columnFields: localizationMessage.format(\"dxPivotGrid-columnFields\"),\n        rowFields: localizationMessage.format(\"dxPivotGrid-rowFields\"),\n        dataFields: localizationMessage.format(\"dxPivotGrid-dataFields\"),\n        filterFields: localizationMessage.format(\"dxPivotGrid-filterFields\"),\n        allFields: localizationMessage.format(\"dxPivotGrid-allFields\")\n      }\n    });\n  },\n  _refreshDataSource: function _refreshDataSource() {\n    var that = this;\n    that._expandedPaths = [];\n\n    that._changedHandler = that._changedHandler || function () {\n      each(that._dataChangedHandlers, function (_, func) {\n        func();\n      });\n\n      that._fireContentReadyAction();\n\n      that._skipStateChange = true;\n      that.option(\"state\", that._dataSource.state());\n      that._skipStateChange = false;\n    };\n\n    that._disposeDataSource();\n\n    that.callBase();\n    that._dataSource && that._dataSource.on(\"changed\", that._changedHandler);\n  },\n  _disposeDataSource: function _disposeDataSource() {\n    var dataSource = this._dataSource;\n\n    if (dataSource) {\n      dataSource.off(\"changed\", this._changedHandler);\n      this._dataSource = void 0;\n    }\n  },\n  _dispose: function _dispose() {\n    this._disposeDataSource();\n\n    this.callBase.apply(this, arguments);\n  },\n  _init: function _init() {\n    this.callBase();\n\n    this._refreshDataSource();\n\n    this._dataChangedHandlers = [];\n\n    this._initActions();\n  },\n  _initActions: function _initActions() {\n    this._actions = {\n      onContextMenuPreparing: this._createActionByOption(\"onContextMenuPreparing\")\n    };\n  },\n  _trigger: function _trigger(eventName, eventArg) {\n    this._actions[eventName](eventArg);\n  },\n  _setOptionsByReference: function _setOptionsByReference() {\n    this.callBase();\n    extend(this._optionsByReference, {\n      dataSource: true\n    });\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"dataSource\":\n        this._refreshDataSource();\n\n        this._invalidate();\n\n        break;\n\n      case \"layout\":\n      case \"texts\":\n      case \"allowSearch\":\n      case \"searchTimeout\":\n        this._invalidate();\n\n        break;\n\n      case \"onContextMenuPreparing\":\n        this._actions[args.name] = this._createActionByOption(args.name);\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  _clean: function _clean(skipStateSetting) {\n    !skipStateSetting && this._dataSource && this.option(\"state\", this._dataSource.state());\n    this.$element().children(\".\" + FIELDCHOOSER_CONTAINER_CLASS).remove();\n  },\n  _renderLayout0: function _renderLayout0($container) {\n    $container.addClass(\"dx-layout-0\");\n    var $row1 = $(DIV).addClass(\"dx-row\").appendTo($container);\n    var $row2 = $(DIV).addClass(\"dx-row\").appendTo($container);\n    var $col1 = $(DIV).addClass(\"dx-col\").appendTo($row1);\n    var $col2 = $(DIV).addClass(\"dx-col\").appendTo($row1);\n    var $col3 = $(DIV).addClass(\"dx-col\").appendTo($row2);\n    var $col4 = $(DIV).addClass(\"dx-col\").appendTo($row2);\n\n    this._renderArea($col1, \"all\");\n\n    this._renderArea($col2, \"row\");\n\n    this._renderArea($col2, \"column\");\n\n    this._renderArea($col3, \"filter\");\n\n    this._renderArea($col4, \"data\");\n  },\n  _renderLayout1: function _renderLayout1($container) {\n    var $col1 = $(DIV).addClass(\"dx-col\").appendTo($container);\n    var $col2 = $(DIV).addClass(\"dx-col\").appendTo($container);\n\n    this._renderArea($col1, \"all\");\n\n    this._renderArea($col2, \"filter\");\n\n    this._renderArea($col2, \"row\");\n\n    this._renderArea($col2, \"column\");\n\n    this._renderArea($col2, \"data\");\n  },\n  _renderLayout2: function _renderLayout2($container) {\n    $container.addClass(\"dx-layout-2\");\n    var $row1 = $(DIV).addClass(\"dx-row\").appendTo($container);\n\n    this._renderArea($row1, \"all\");\n\n    var $row2 = $(DIV).addClass(\"dx-row\").appendTo($container);\n    var $col1 = $(DIV).addClass(\"dx-col\").appendTo($row2);\n    var $col2 = $(DIV).addClass(\"dx-col\").appendTo($row2);\n\n    this._renderArea($col1, \"filter\");\n\n    this._renderArea($col1, \"row\");\n\n    this._renderArea($col2, \"column\");\n\n    this._renderArea($col2, \"data\");\n  },\n  _initMarkup: function _initMarkup() {\n    var $element = this.$element();\n    var $container = $(DIV).addClass(FIELDCHOOSER_CONTAINER_CLASS).appendTo($element);\n    var layout = this.option(\"layout\");\n    this.callBase();\n    $element.addClass(FIELDCHOOSER_CLASS).addClass(FIELDS_CONTAINER_CLASS);\n    this._dataChangedHandlers = [];\n    var dataSource = this._dataSource;\n    var currentState = \"instantly\" !== this.option(\"applyChangesMode\") && dataSource && dataSource.state();\n    currentState && this.option(\"state\") && dataSource.state(this.option(\"state\"), true);\n\n    if (0 === layout) {\n      this._renderLayout0($container);\n    } else if (1 === layout) {\n      this._renderLayout1($container);\n    } else {\n      this._renderLayout2($container);\n    }\n\n    currentState && dataSource.state(currentState, true);\n  },\n  _renderContentImpl: function _renderContentImpl() {\n    this.callBase();\n    this.renderSortable();\n\n    this._renderContextMenu();\n\n    this.updateDimensions();\n  },\n  _fireContentReadyAction: function _fireContentReadyAction() {\n    if (!this._dataSource || !this._dataSource.isLoading()) {\n      this.callBase();\n    }\n  },\n  _getContextMenuArgs: function _getContextMenuArgs(dxEvent) {\n    var targetFieldElement = $(dxEvent.target).closest(\".dx-area-field\");\n    var targetGroupElement = $(dxEvent.target).closest(\".dx-area-fields\");\n    var field;\n    var area;\n\n    if (targetFieldElement.length) {\n      var fieldCopy = targetFieldElement.data(\"field\");\n\n      if (fieldCopy) {\n        field = this.getDataSource().field(fieldCopy.index) || fieldCopy;\n      }\n    }\n\n    if (targetGroupElement.length) {\n      area = targetGroupElement.attr(\"group\");\n    }\n\n    return {\n      event: dxEvent,\n      field: field,\n      area: area,\n      items: []\n    };\n  },\n  _renderContextMenu: function _renderContextMenu() {\n    var that = this;\n    var $container = that.$element();\n\n    if (that._contextMenu) {\n      that._contextMenu.$element().remove();\n    }\n\n    that._contextMenu = that._createComponent($(DIV).appendTo($container), ContextMenu, {\n      onPositioning: function onPositioning(actionArgs) {\n        var event = actionArgs.event;\n\n        if (!event) {\n          return;\n        }\n\n        var args = that._getContextMenuArgs(event);\n\n        that._trigger(\"onContextMenuPreparing\", args);\n\n        if (args.items && args.items.length) {\n          actionArgs.component.option(\"items\", args.items);\n        } else {\n          actionArgs.cancel = true;\n        }\n      },\n      target: $container,\n      onItemClick: function onItemClick(params) {\n        params.itemData.onItemClick && params.itemData.onItemClick(params);\n      },\n      cssClass: \"dx-pivotgridfieldchooser-context-menu\"\n    });\n  },\n  _createTreeItems: function _createTreeItems(fields, groupFieldNames, path) {\n    var that = this;\n    var isMeasure;\n    var resultItems = [];\n    var groupedItems = [];\n    var groupFieldName = groupFieldNames[0];\n    var fieldsByGroup = {};\n\n    if (!groupFieldName) {\n      each(fields, function (index, field) {\n        var icon;\n\n        if (true === field.isMeasure) {\n          icon = \"measure\";\n        }\n\n        if (false === field.isMeasure) {\n          icon = field.groupName ? \"hierarchy\" : \"dimension\";\n        }\n\n        resultItems.push({\n          index: field.index,\n          field: field,\n          key: field.dataField,\n          selected: isDefined(field.area),\n          text: field.caption || field.dataField,\n          icon: icon,\n          isMeasure: field.isMeasure,\n          isDefault: field.isDefault\n        });\n      });\n    } else {\n      each(fields, function (index, field) {\n        var groupName = field[groupFieldName] || \"\";\n        fieldsByGroup[groupName] = fieldsByGroup[groupName] || [];\n        fieldsByGroup[groupName].push(field);\n\n        if (void 0 === isMeasure) {\n          isMeasure = true;\n        }\n\n        isMeasure = isMeasure && true === field.isMeasure;\n      });\n      each(fieldsByGroup, function (groupName, fields) {\n        var currentPath = path ? path + \".\" + groupName : groupName;\n\n        var items = that._createTreeItems(fields, groupFieldNames.slice(1), currentPath);\n\n        if (groupName) {\n          groupedItems.push({\n            key: groupName,\n            text: groupName,\n            path: currentPath,\n            isMeasure: items.isMeasure,\n            expanded: inArray(currentPath, that._expandedPaths) >= 0,\n            items: items\n          });\n        } else {\n          resultItems = items;\n        }\n      });\n      resultItems = groupedItems.concat(resultItems);\n      resultItems.isMeasure = isMeasure;\n    }\n\n    return resultItems;\n  },\n  _createFieldsDataSource: function _createFieldsDataSource(dataSource) {\n    var fields = dataSource && dataSource.fields() || [];\n    fields = fields.filter(function (field) {\n      return false !== field.visible && !isDefined(field.groupIndex);\n    });\n\n    var treeItems = this._createTreeItems(fields, [\"dimension\", \"displayFolder\"]);\n\n    foreachDataLevel(treeItems, function (items) {\n      items.sort(compareItems);\n    }, 0, \"items\");\n    return treeItems;\n  },\n  _renderFieldsTreeView: function _renderFieldsTreeView(container) {\n    var that = this;\n    var dataSource = that._dataSource;\n\n    var treeView = that._createComponent(container, TreeView, {\n      dataSource: that._createFieldsDataSource(dataSource),\n      showCheckBoxesMode: \"normal\",\n      expandNodesRecursive: false,\n      searchEnabled: that.option(\"allowSearch\"),\n      searchTimeout: that.option(\"searchTimeout\"),\n      itemTemplate: function itemTemplate(itemData, itemIndex, itemElement) {\n        if (itemData.icon) {\n          getImageContainer(itemData.icon).appendTo(itemElement);\n        }\n\n        $(\"<span>\").toggleClass(\"dx-area-field\", !itemData.items).data(\"field\", itemData.field).text(itemData.text).appendTo(itemElement);\n      },\n      onItemCollapsed: function onItemCollapsed(e) {\n        var index = inArray(e.itemData.path, that._expandedPaths);\n\n        if (index >= 0) {\n          that._expandedPaths.splice(index, 1);\n        }\n      },\n      onItemExpanded: function onItemExpanded(e) {\n        var index = inArray(e.itemData.path, that._expandedPaths);\n\n        if (index < 0) {\n          that._expandedPaths.push(e.itemData.path);\n        }\n      },\n      onItemSelectionChanged: function onItemSelectionChanged(e) {\n        var data = e.itemData;\n        var field;\n        var fields;\n        var needSelectDefaultItem = true;\n        var area;\n\n        if (data.items) {\n          if (data.selected) {\n            treeView.unselectItem(data);\n            return;\n          }\n\n          that._processDemandState(function () {\n            fields = getDimensionFields(data, dataSource.fields());\n\n            for (var i = 0; i < fields.length; i++) {\n              if (fields[i].area) {\n                needSelectDefaultItem = false;\n                break;\n              }\n            }\n          });\n\n          if (needSelectDefaultItem) {\n            var item = getFirstItem(data, function (item) {\n              return item.isDefault;\n            }) || getFirstItem(data, function (item) {\n              return isDefined(item.index);\n            });\n            item && treeView.selectItem(item);\n            return;\n          }\n        } else {\n          field = dataSource.fields()[data.index];\n\n          if (data.selected) {\n            area = field.isMeasure ? \"data\" : \"column\";\n          }\n\n          if (field) {\n            fields = [field];\n          }\n        }\n\n        that._applyChanges(fields, {\n          area: area,\n          areaIndex: void 0\n        });\n      }\n    });\n\n    that._dataChangedHandlers.push(function () {\n      var scrollable = getScrollable(container);\n      var scrollTop = scrollable ? scrollable.scrollTop() : 0;\n      treeView.option({\n        dataSource: that._createFieldsDataSource(dataSource)\n      });\n      scrollable = getScrollable(container);\n\n      if (scrollable) {\n        scrollable.scrollTo({\n          y: scrollTop\n        });\n        scrollable.update();\n      }\n    });\n  },\n  _renderAreaFields: function _renderAreaFields($container, area) {\n    var that = this;\n    var dataSource = that._dataSource;\n    var fields = dataSource ? extend(true, [], dataSource.getAreaFields(area, true)) : [];\n    $container.empty();\n    each(fields, function (_, field) {\n      if (false !== field.visible) {\n        that.renderField(field, true).appendTo($container);\n      }\n    });\n  },\n  _renderArea: function _renderArea(container, area) {\n    var that = this;\n    var $areaContainer = $(DIV).addClass(\"dx-area\").appendTo(container);\n    var $fieldsHeaderContainer = $(DIV).addClass(\"dx-area-fields-header\").appendTo($areaContainer);\n    var caption = that.option(\"texts.\" + area + \"Fields\");\n    var $fieldsContent;\n    var render;\n    $(\"<span>\").addClass(\"dx-area-icon\").addClass(\"dx-area-icon-\" + area).appendTo($fieldsHeaderContainer);\n    $(\"<span>\").html(\"&nbsp;\").appendTo($fieldsHeaderContainer);\n    $(\"<span>\").addClass(\"dx-area-caption\").text(caption).appendTo($fieldsHeaderContainer);\n    var $fieldsContainer = $(DIV).addClass(\"dx-area-fields\").addClass(AREA_DRAG_CLASS).appendTo($areaContainer);\n\n    if (\"all\" !== area) {\n      $fieldsContainer.attr(\"group\", area).attr(\"allow-scrolling\", true);\n      $fieldsContent = $(DIV).addClass(\"dx-area-field-container\").appendTo($fieldsContainer);\n\n      render = function render() {\n        that._renderAreaFields($fieldsContent, area);\n      };\n\n      that._dataChangedHandlers.push(render);\n\n      render();\n      $fieldsContainer.dxScrollable();\n    } else {\n      $areaContainer.addClass(\"dx-all-fields\");\n      $fieldsContainer.addClass(\"dx-treeview-border-visible\");\n\n      that._renderFieldsTreeView($fieldsContainer);\n    }\n  },\n  _getSortableOptions: function _getSortableOptions() {\n    return {};\n  },\n  _adjustSortableOnChangedArgs: function _adjustSortableOnChangedArgs() {},\n  resetTreeView: function resetTreeView() {\n    var treeView = this.$element().find(\".dx-treeview\").dxTreeView(\"instance\");\n\n    if (treeView) {\n      treeView.option(\"searchValue\", \"\");\n      treeView.collapseAll();\n    }\n  },\n  applyChanges: function applyChanges() {\n    var state = this.option(\"state\");\n\n    if (isDefined(state)) {\n      this._dataSource.state(state);\n    }\n  },\n  cancelChanges: function cancelChanges() {\n    var dataSource = this._dataSource;\n\n    if (!dataSource.isLoading()) {\n      this.option(\"state\", dataSource.state());\n      return true;\n    }\n\n    return false;\n  },\n  getDataSource: function getDataSource() {\n    return this._dataSource;\n  },\n  updateDimensions: function updateDimensions() {\n    var $scrollableElements = this.$element().find(\".dx-area .dx-scrollable\");\n    $scrollableElements.dxScrollable(\"update\");\n  },\n  _visibilityChanged: function _visibilityChanged(visible) {\n    if (visible && hasWindow) {\n      this.updateDimensions();\n    }\n  }\n});\nregisterComponent(\"dxPivotGridFieldChooser\", FieldChooser);\nexport default FieldChooser;","map":null,"metadata":{},"sourceType":"module"}