{"ast":null,"code":"import _toConsumableArray from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport { isDefined, isEmptyObject, isFunction, type } from \"../../core/utils/type\";\nimport { Deferred, when } from \"../../core/utils/deferred\";\nimport { ensureDefined, equalByValue } from \"../../core/utils/common\";\nimport messageLocalization from \"../../localization/message\";\nimport registerComponent from \"../../core/component_registrator\";\nimport Widget from \"../widget/ui.widget\";\nimport notify from \"../notify\";\nimport { findItemsByKeys, extendAttributes } from \"./ui.file_manager.common\";\nimport FileItemsController from \"./file_items_controller\";\nimport { defaultPermissions, FileManagerCommandManager } from \"./ui.file_manager.command_manager\";\nimport FileManagerContextMenu from \"./ui.file_manager.context_menu\";\nimport FileManagerFilesTreeView from \"./ui.file_manager.files_tree_view\";\nimport FileManagerDetailsItemList from \"./ui.file_manager.item_list.details\";\nimport FileManagerThumbnailsItemList from \"./ui.file_manager.item_list.thumbnails\";\nimport FileManagerToolbar from \"./ui.file_manager.toolbar\";\nimport FileManagerNotificationControl from \"./ui.file_manager.notification\";\nimport FileManagerEditingControl from \"./ui.file_manager.editing\";\nimport FileManagerBreadcrumbs from \"./ui.file_manager.breadcrumbs\";\nimport FileManagerAdaptivityControl from \"./ui.file_manager.adaptivity\";\nimport { normalizeOptions } from \"../../core/options/utils\";\nimport { equals } from \"../../core/utils/comparator\";\nvar FILE_MANAGER_CLASS = \"dx-filemanager\";\nvar FILE_MANAGER_WRAPPER_CLASS = FILE_MANAGER_CLASS + \"-wrapper\";\nvar FILE_MANAGER_CONTAINER_CLASS = FILE_MANAGER_CLASS + \"-container\";\nvar FILE_MANAGER_DIRS_PANEL_CLASS = FILE_MANAGER_CLASS + \"-dirs-panel\";\nvar FILE_MANAGER_EDITING_CONTAINER_CLASS = FILE_MANAGER_CLASS + \"-editing-container\";\nvar FILE_MANAGER_ITEMS_PANEL_CLASS = FILE_MANAGER_CLASS + \"-items-panel\";\nvar FILE_MANAGER_ITEM_CUSTOM_THUMBNAIL_CLASS = FILE_MANAGER_CLASS + \"-item-custom-thumbnail\";\nvar PARENT_DIRECTORY_KEY_PREFIX = \"[*DXPDK*]$40F96F03-FBD8-43DF-91BE-F55F4B8BA871$\";\nvar VIEW_AREAS = {\n  folders: \"navPane\",\n  items: \"itemView\"\n};\n\nvar FileManager = /*#__PURE__*/function (_Widget) {\n  _inherits(FileManager, _Widget);\n\n  var _super = _createSuper(FileManager);\n\n  function FileManager() {\n    _classCallCheck(this, FileManager);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FileManager, [{\n    key: \"_initTemplates\",\n    value: function _initTemplates() {}\n  }, {\n    key: \"_init\",\n    value: function _init() {\n      _get(_getPrototypeOf(FileManager.prototype), \"_init\", this).call(this);\n\n      this._initActions();\n\n      this._providerUpdateDeferred = null;\n      this._lockCurrentPathProcessing = false;\n      this._controller = new FileItemsController({\n        currentPath: this.option(\"currentPath\"),\n        currentPathKeys: this.option(\"currentPathKeys\"),\n        rootText: this.option(\"rootFolderName\"),\n        fileProvider: this.option(\"fileSystemProvider\"),\n        allowedFileExtensions: this.option(\"allowedFileExtensions\"),\n        uploadMaxFileSize: this.option(\"upload\").maxFileSize,\n        uploadChunkSize: this.option(\"upload\").chunkSize,\n        onInitialized: this._onControllerInitialized.bind(this),\n        onDataLoading: this._onDataLoading.bind(this),\n        onSelectedDirectoryChanged: this._onSelectedDirectoryChanged.bind(this),\n        onPathPotentiallyChanged: this._checkPathActuality.bind(this),\n        editingEvents: this._actions.editing\n      });\n    }\n  }, {\n    key: \"_initMarkup\",\n    value: function _initMarkup() {\n      _get(_getPrototypeOf(FileManager.prototype), \"_initMarkup\", this).call(this);\n\n      this._firstItemViewLoad = true;\n      this._lockSelectionProcessing = false;\n      this._lockFocusedItemProcessing = false;\n      this._itemKeyToFocus = void 0;\n      this._commandManager = new FileManagerCommandManager(this.option(\"permissions\"));\n      this.$element().addClass(FILE_MANAGER_CLASS);\n\n      this._createNotificationControl();\n\n      this._initCommandManager();\n    }\n  }, {\n    key: \"_createNotificationControl\",\n    value: function _createNotificationControl() {\n      var _this = this;\n\n      var $notificationControl = $(\"<div>\").addClass(\"dx-filemanager-notification-container\").appendTo(this.$element());\n      this._notificationControl = this._createComponent($notificationControl, FileManagerNotificationControl, {\n        progressPanelContainer: this.$element(),\n        contentTemplate: function contentTemplate(container, notificationControl) {\n          return _this._createWrapper(container, notificationControl);\n        },\n        onActionProgress: function onActionProgress(e) {\n          return _this._onActionProgress(e);\n        },\n        positionTarget: \".\".concat(FILE_MANAGER_CONTAINER_CLASS),\n        showProgressPanel: this.option(\"notifications.showPanel\"),\n        showNotificationPopup: this.option(\"notifications.showPopup\")\n      });\n    }\n  }, {\n    key: \"_createWrapper\",\n    value: function _createWrapper(container, notificationControl) {\n      var _this2 = this;\n\n      this._$wrapper = $(\"<div>\").addClass(FILE_MANAGER_WRAPPER_CLASS).appendTo(container);\n\n      this._createEditing(notificationControl);\n\n      var $toolbar = $(\"<div>\").appendTo(this._$wrapper);\n      this._toolbar = this._createComponent($toolbar, FileManagerToolbar, {\n        commandManager: this._commandManager,\n        generalItems: this.option(\"toolbar.items\"),\n        fileItems: this.option(\"toolbar.fileSelectionItems\"),\n        itemViewMode: this.option(\"itemView\").mode,\n        onItemClick: function onItemClick(args) {\n          return _this2._actions.onToolbarItemClick(args);\n        }\n      });\n\n      this._createAdaptivityControl();\n    }\n  }, {\n    key: \"_createAdaptivityControl\",\n    value: function _createAdaptivityControl() {\n      var _this3 = this;\n\n      var $container = $(\"<div>\").addClass(FILE_MANAGER_CONTAINER_CLASS).appendTo(this._$wrapper);\n      this._adaptivityControl = this._createComponent($container, FileManagerAdaptivityControl, {\n        drawerTemplate: function drawerTemplate(container) {\n          return _this3._createFilesTreeView(container);\n        },\n        contentTemplate: function contentTemplate(container) {\n          return _this3._createItemsPanel(container);\n        },\n        onAdaptiveStateChanged: function onAdaptiveStateChanged(e) {\n          return _this3._onAdaptiveStateChanged(e);\n        }\n      });\n\n      this._editing.setUploaderSplitterElement(this._adaptivityControl.getSplitterElement());\n    }\n  }, {\n    key: \"_createEditing\",\n    value: function _createEditing(notificationControl) {\n      var _this4 = this;\n\n      var $editingContainer = $(\"<div>\").addClass(FILE_MANAGER_EDITING_CONTAINER_CLASS).appendTo(this.$element());\n      this._editing = this._createComponent($editingContainer, FileManagerEditingControl, {\n        controller: this._controller,\n        model: {\n          getMultipleSelectedItems: this._getSelectedItemInfos.bind(this)\n        },\n        getItemThumbnail: this._getItemThumbnailInfo.bind(this),\n        notificationControl: notificationControl,\n        uploadDropZonePlaceholderContainer: this.$element(),\n        rtlEnabled: this.option(\"rtlEnabled\"),\n        onSuccess: function onSuccess(_ref) {\n          var updatedOnlyFiles = _ref.updatedOnlyFiles;\n          return _this4._redrawComponent(updatedOnlyFiles);\n        },\n        onError: function onError(e) {\n          return _this4._onEditingError(e);\n        }\n      });\n    }\n  }, {\n    key: \"_createItemsPanel\",\n    value: function _createItemsPanel($container) {\n      this._$itemsPanel = $(\"<div>\").addClass(FILE_MANAGER_ITEMS_PANEL_CLASS).appendTo($container);\n\n      this._createBreadcrumbs(this._$itemsPanel);\n\n      this._createItemView(this._$itemsPanel);\n\n      this._updateUploadDropZone();\n    }\n  }, {\n    key: \"_updateUploadDropZone\",\n    value: function _updateUploadDropZone() {\n      var dropZone = this._commandManager.isCommandAvailable(\"upload\") ? this._$itemsPanel : $();\n\n      this._editing.setUploaderDropZone(dropZone);\n    }\n  }, {\n    key: \"_createFilesTreeView\",\n    value: function _createFilesTreeView(container) {\n      var _this5 = this;\n\n      this._filesTreeViewContextMenu = this._createContextMenu(false, VIEW_AREAS.folders);\n      var $filesTreeView = $(\"<div>\").addClass(FILE_MANAGER_DIRS_PANEL_CLASS).appendTo(container);\n      this._filesTreeView = this._createComponent($filesTreeView, FileManagerFilesTreeView, {\n        storeExpandedState: true,\n        contextMenu: this._filesTreeViewContextMenu,\n        getDirectories: this.getDirectories.bind(this),\n        getCurrentDirectory: this._getCurrentDirectory.bind(this),\n        onDirectoryClick: function onDirectoryClick(_ref2) {\n          var itemData = _ref2.itemData;\n          return _this5._setCurrentDirectory(itemData);\n        }\n      });\n\n      this._filesTreeView.updateCurrentDirectory();\n    }\n  }, {\n    key: \"_createItemView\",\n    value: function _createItemView($container, viewMode) {\n      var _this6 = this;\n\n      this._itemViewContextMenu = this._createContextMenu(true, VIEW_AREAS.items);\n      var itemViewOptions = this.option(\"itemView\");\n      var options = {\n        selectionMode: this.option(\"selectionMode\"),\n        selectedItemKeys: this.option(\"selectedItemKeys\"),\n        focusedItemKey: this.option(\"focusedItemKey\"),\n        contextMenu: this._itemViewContextMenu,\n        getItems: this._getItemViewItems.bind(this),\n        onError: function onError(_ref3) {\n          var error = _ref3.error;\n          return _this6._showError(error);\n        },\n        onSelectionChanged: this._onItemViewSelectionChanged.bind(this),\n        onFocusedItemChanged: this._onItemViewFocusedItemChanged.bind(this),\n        onSelectedItemOpened: this._onSelectedItemOpened.bind(this),\n        onContextMenuShowing: function onContextMenuShowing(e) {\n          return _this6._onContextMenuShowing(VIEW_AREAS.items, e);\n        },\n        getItemThumbnail: this._getItemThumbnailInfo.bind(this),\n        customizeDetailColumns: this.option(\"customizeDetailColumns\"),\n        detailColumns: this.option(\"itemView.details.columns\")\n      };\n      var $itemView = $(\"<div>\").appendTo($container);\n      viewMode = viewMode || itemViewOptions.mode;\n      var widgetClass = \"thumbnails\" === viewMode ? FileManagerThumbnailsItemList : FileManagerDetailsItemList;\n      this._itemView = this._createComponent($itemView, widgetClass, options);\n    }\n  }, {\n    key: \"_createBreadcrumbs\",\n    value: function _createBreadcrumbs($container) {\n      var _this7 = this;\n\n      var $breadcrumbs = $(\"<div>\").appendTo($container);\n      this._breadcrumbs = this._createComponent($breadcrumbs, FileManagerBreadcrumbs, {\n        rootFolderDisplayName: this.option(\"rootFolderName\"),\n        onCurrentDirectoryChanging: function onCurrentDirectoryChanging(_ref4) {\n          var currentDirectory = _ref4.currentDirectory;\n          return _this7._setCurrentDirectory(currentDirectory, true);\n        }\n      });\n\n      this._breadcrumbs.setCurrentDirectory(this._getCurrentDirectory());\n    }\n  }, {\n    key: \"_createContextMenu\",\n    value: function _createContextMenu(isolateCreationItemCommands, viewArea) {\n      var _this8 = this;\n\n      var $contextMenu = $(\"<div>\").appendTo(this._$wrapper);\n      return this._createComponent($contextMenu, FileManagerContextMenu, {\n        commandManager: this._commandManager,\n        items: this.option(\"contextMenu.items\"),\n        onItemClick: function onItemClick(args) {\n          return _this8._actions.onContextMenuItemClick(args);\n        },\n        onContextMenuShowing: function onContextMenuShowing(e) {\n          return _this8._onContextMenuShowing(viewArea, e);\n        },\n        isolateCreationItemCommands: isolateCreationItemCommands,\n        viewArea: viewArea\n      });\n    }\n  }, {\n    key: \"_initCommandManager\",\n    value: function _initCommandManager() {\n      var _this9 = this;\n\n      var actions = extend(this._editing.getCommandActions(), {\n        refresh: function refresh() {\n          return _this9._refreshAndShowProgress();\n        },\n        thumbnails: function thumbnails() {\n          return _this9.option(\"itemView.mode\", \"thumbnails\");\n        },\n        details: function details() {\n          return _this9.option(\"itemView.mode\", \"details\");\n        },\n        clearSelection: function clearSelection() {\n          return _this9._clearSelection();\n        },\n        showNavPane: function showNavPane() {\n          return _this9._adaptivityControl.toggleDrawer();\n        }\n      });\n\n      this._commandManager.registerActions(actions);\n    }\n  }, {\n    key: \"_onItemViewSelectionChanged\",\n    value: function _onItemViewSelectionChanged(_ref5) {\n      var selectedItemInfos = _ref5.selectedItemInfos,\n          selectedItems = _ref5.selectedItems,\n          selectedItemKeys = _ref5.selectedItemKeys,\n          currentSelectedItemKeys = _ref5.currentSelectedItemKeys,\n          currentDeselectedItemKeys = _ref5.currentDeselectedItemKeys;\n      this._lockSelectionProcessing = true;\n      this.option(\"selectedItemKeys\", selectedItemKeys);\n      this._lockSelectionProcessing = false;\n\n      this._actions.onSelectionChanged({\n        selectedItems: selectedItems,\n        selectedItemKeys: selectedItemKeys,\n        currentSelectedItemKeys: currentSelectedItemKeys,\n        currentDeselectedItemKeys: currentDeselectedItemKeys\n      });\n\n      this._updateToolbar(selectedItemInfos);\n    }\n  }, {\n    key: \"_onItemViewFocusedItemChanged\",\n    value: function _onItemViewFocusedItemChanged(e) {\n      this._lockFocusedItemProcessing = true;\n      this.option(\"focusedItemKey\", e.itemKey);\n      this._lockFocusedItemProcessing = false;\n\n      this._actions.onFocusedItemChanged({\n        item: e.item,\n        itemElement: e.itemElement\n      });\n    }\n  }, {\n    key: \"_onAdaptiveStateChanged\",\n    value: function _onAdaptiveStateChanged(_ref6) {\n      var enabled = _ref6.enabled;\n\n      this._commandManager.setCommandEnabled(\"showNavPane\", enabled);\n\n      this._updateToolbar();\n    }\n  }, {\n    key: \"_onActionProgress\",\n    value: function _onActionProgress(_ref7) {\n      var message = _ref7.message,\n          status = _ref7.status;\n\n      this._toolbar.updateRefreshItem(message, status);\n\n      this._updateToolbar();\n    }\n  }, {\n    key: \"_onEditingError\",\n    value: function _onEditingError(e) {\n      var args = extendAttributes({}, e, [\"errorCode\", \"errorText\", \"fileSystemItem\"]);\n\n      this._actions.onErrorOccurred(args);\n\n      e.errorText = args.errorText;\n    }\n  }, {\n    key: \"_refreshAndShowProgress\",\n    value: function _refreshAndShowProgress() {\n      var _this10 = this;\n\n      return when(this._notificationControl.tryShowProgressPanel(), this._controller.refresh()).then(function () {\n        return _this10._filesTreeView.refresh();\n      });\n    }\n  }, {\n    key: \"_updateToolbar\",\n    value: function _updateToolbar(selectedItems) {\n      var items = selectedItems || this._getSelectedItemInfos();\n\n      this._toolbar.option(\"contextItems\", ensureDefined(items, []));\n    }\n  }, {\n    key: \"_switchView\",\n    value: function _switchView(viewMode) {\n      this._disposeWidget(this._itemView.option(\"contextMenu\"));\n\n      this._disposeWidget(this._itemView);\n\n      this._createItemView(this._$itemsPanel, viewMode);\n\n      this._toolbar.option({\n        itemViewMode: viewMode\n      });\n    }\n  }, {\n    key: \"_disposeWidget\",\n    value: function _disposeWidget(widget) {\n      widget.dispose();\n      widget.$element().remove();\n    }\n  }, {\n    key: \"_clearSelection\",\n    value: function _clearSelection() {\n      this._itemView.clearSelection();\n    }\n  }, {\n    key: \"_showError\",\n    value: function _showError(message) {\n      this._showNotification(message, false);\n    }\n  }, {\n    key: \"_showNotification\",\n    value: function _showNotification(message, isSuccess) {\n      notify({\n        message: message,\n        width: 450\n      }, isSuccess ? \"success\" : \"error\", 5e3);\n    }\n  }, {\n    key: \"_redrawComponent\",\n    value: function _redrawComponent(onlyFileItemsView) {\n      var _this11 = this;\n\n      this._itemView.refresh().then(function () {\n        return !onlyFileItemsView && _this11._filesTreeView.refresh();\n      });\n    }\n  }, {\n    key: \"_getItemViewItems\",\n    value: function _getItemViewItems() {\n      var _this12 = this;\n\n      var showFolders = this.option(\"itemView\").showFolders;\n\n      var result = this._controller.getCurrentItems(!showFolders);\n\n      this._updateToolbarWithSelectionOnFirstLoad(result);\n\n      if (this.option(\"itemView.showParentFolder\")) {\n        result = when(result).then(function (items) {\n          return _this12._getPreparedItemViewItems(items);\n        });\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_updateToolbarWithSelectionOnFirstLoad\",\n    value: function _updateToolbarWithSelectionOnFirstLoad(itemsResult) {\n      var _this13 = this;\n\n      if (!this._firstItemViewLoad) {\n        return;\n      }\n\n      this._firstItemViewLoad = false;\n      var selectedItemKeys = this.option(\"selectedItemKeys\");\n\n      if (selectedItemKeys.length > 0) {\n        when(itemsResult).done(function (items) {\n          var selectedItems = findItemsByKeys(items, selectedItemKeys);\n\n          if (selectedItems.length > 0) {\n            _this13._updateToolbar(selectedItems);\n          }\n        });\n      }\n    }\n  }, {\n    key: \"_getPreparedItemViewItems\",\n    value: function _getPreparedItemViewItems(items) {\n      var selectedDir = this._getCurrentDirectory();\n\n      if (selectedDir.fileItem.isRoot()) {\n        return items;\n      }\n\n      var parentDirItem = selectedDir.fileItem.createClone();\n      parentDirItem.isParentFolder = true;\n      parentDirItem.name = \"..\";\n      parentDirItem.relativeName = \"..\";\n      parentDirItem.key = \"\".concat(PARENT_DIRECTORY_KEY_PREFIX).concat(selectedDir.fileItem.key);\n\n      var itemsCopy = _toConsumableArray(items);\n\n      itemsCopy.unshift({\n        fileItem: parentDirItem,\n        icon: \"parentfolder\"\n      });\n      return itemsCopy;\n    }\n  }, {\n    key: \"_onContextMenuShowing\",\n    value: function _onContextMenuShowing(viewArea, e) {\n      var _e$itemData;\n\n      var eventArgs = extendAttributes({}, e, [\"targetElement\", \"cancel\", \"event\"]);\n      eventArgs = extend(eventArgs, {\n        viewArea: viewArea,\n        fileSystemItem: null === (_e$itemData = e.itemData) || void 0 === _e$itemData ? void 0 : _e$itemData.fileItem,\n        _isActionButton: e.isActionButton\n      });\n\n      this._actions.onContextMenuShowing(eventArgs);\n\n      e.cancel = ensureDefined(eventArgs.cancel, false);\n    }\n  }, {\n    key: \"_getItemThumbnailInfo\",\n    value: function _getItemThumbnailInfo(fileInfo) {\n      var func = this.option(\"customizeThumbnail\");\n      var thumbnail = isFunction(func) ? func(fileInfo.fileItem) : fileInfo.fileItem.thumbnail;\n\n      if (thumbnail) {\n        return {\n          thumbnail: thumbnail,\n          cssClass: FILE_MANAGER_ITEM_CUSTOM_THUMBNAIL_CLASS\n        };\n      }\n\n      return {\n        thumbnail: fileInfo.icon\n      };\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function _getDefaultOptions() {\n      return extend(_get(_getPrototypeOf(FileManager.prototype), \"_getDefaultOptions\", this).call(this), {\n        fileSystemProvider: null,\n        currentPath: \"\",\n        currentPathKeys: [],\n        rootFolderName: messageLocalization.format(\"dxFileManager-rootDirectoryName\"),\n        selectionMode: \"multiple\",\n        selectedItemKeys: [],\n        focusedItemKey: void 0,\n        toolbar: {\n          items: [\"showNavPane\", \"create\", \"upload\", \"switchView\", {\n            name: \"separator\",\n            location: \"after\"\n          }, \"refresh\"],\n          fileSelectionItems: [\"download\", \"separator\", \"move\", \"copy\", \"rename\", \"separator\", \"delete\", \"clearSelection\", {\n            name: \"separator\",\n            location: \"after\"\n          }, \"refresh\"]\n        },\n        contextMenu: {\n          items: [\"create\", \"upload\", \"rename\", \"move\", \"copy\", \"delete\", \"refresh\", \"download\"]\n        },\n        itemView: {\n          details: {\n            columns: [\"thumbnail\", \"name\", \"dateModified\", \"size\"]\n          },\n          mode: \"details\",\n          showFolders: true,\n          showParentFolder: true\n        },\n        customizeThumbnail: null,\n        customizeDetailColumns: null,\n        onContextMenuItemClick: null,\n        onContextMenuShowing: null,\n        onCurrentDirectoryChanged: null,\n        onSelectedFileOpened: null,\n        onSelectionChanged: null,\n        onFocusedItemChanged: null,\n        onToolbarItemClick: null,\n        onErrorOccurred: null,\n        onDirectoryCreating: null,\n        onDirectoryCreated: null,\n        onItemRenaming: null,\n        onItemRenamed: null,\n        onItemDeleting: null,\n        onItemDeleted: null,\n        onItemCopying: null,\n        onItemCopied: null,\n        onItemMoving: null,\n        onItemMoved: null,\n        onFileUploading: null,\n        onFileUploaded: null,\n        onItemDownloading: null,\n        allowedFileExtensions: [],\n        upload: {\n          maxFileSize: 0,\n          chunkSize: 2e5\n        },\n        permissions: extend({}, defaultPermissions),\n        notifications: {\n          showPanel: true,\n          showPopup: true\n        }\n      });\n    }\n  }, {\n    key: \"option\",\n    value: function option(options, value) {\n      var _this14 = this;\n\n      var optionsToCheck = normalizeOptions(options, value);\n      var isGetter = arguments.length < 2 && \"object\" !== type(options);\n\n      var isOptionDefined = function isOptionDefined(name) {\n        return isDefined(optionsToCheck[name]);\n      };\n\n      var isOptionValueDiffers = function isOptionValueDiffers(name) {\n        if (!isOptionDefined(name)) {\n          return false;\n        }\n\n        var previousValue = _this14.option(name);\n\n        var value = optionsToCheck[name];\n        return !equals(previousValue, value);\n      };\n\n      if (!isGetter && isOptionDefined(\"fileSystemProvider\")) {\n        this._providerUpdateDeferred = new Deferred();\n\n        if (isOptionValueDiffers(\"currentPath\") || isOptionValueDiffers(\"currentPathKeys\")) {\n          this._lockCurrentPathProcessing = true;\n        }\n      }\n\n      return _get(_getPrototypeOf(FileManager.prototype), \"option\", this).apply(this, arguments);\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function _optionChanged(args) {\n      var _this15 = this;\n\n      var name = args.name;\n\n      switch (name) {\n        case \"currentPath\":\n          var updateFunc = function updateFunc() {\n            _this15._lockCurrentPathProcessing = false;\n            return _this15._controller.setCurrentPath(args.value);\n          };\n\n          this._lockCurrentPathProcessing = true;\n          this._providerUpdateDeferred ? this._providerUpdateDeferred.then(updateFunc) : updateFunc();\n          break;\n\n        case \"currentPathKeys\":\n          var _updateFunc = function _updateFunc() {\n            _this15._lockCurrentPathProcessing = false;\n            return _this15._controller.setCurrentPathByKeys(args.value);\n          };\n\n          this._lockCurrentPathProcessing = true;\n          this._providerUpdateDeferred ? this._providerUpdateDeferred.then(_updateFunc) : _updateFunc();\n          break;\n\n        case \"selectedItemKeys\":\n          if (!this._lockSelectionProcessing && this._itemView) {\n            this._itemView.option(\"selectedItemKeys\", args.value);\n          }\n\n          break;\n\n        case \"focusedItemKey\":\n          if (!this._lockFocusedItemProcessing && this._itemView) {\n            this._itemView.option(\"focusedItemKey\", args.value);\n          }\n\n          break;\n\n        case \"rootFolderName\":\n          this._controller.setRootText(args.value);\n\n          this._invalidate();\n\n          break;\n\n        case \"fileSystemProvider\":\n          if (!this._lockCurrentPathProcessing) {\n            this._providerUpdateDeferred = new Deferred();\n          }\n\n          var pathKeys = this._lockCurrentPathProcessing ? void 0 : this.option(\"currentPathKeys\");\n\n          this._controller.updateProvider(args.value, pathKeys).then(function () {\n            return _this15._providerUpdateDeferred.resolve();\n          }).always(function () {\n            _this15._providerUpdateDeferred = null;\n\n            _this15.repaint();\n          });\n\n          break;\n\n        case \"allowedFileExtensions\":\n          this._controller.setAllowedFileExtensions(args.value);\n\n          this._invalidate();\n\n          break;\n\n        case \"upload\":\n          this._controller.setUploadOptions(this.option(\"upload\"));\n\n          this._invalidate();\n\n          break;\n\n        case \"permissions\":\n          this._commandManager.updatePermissions(this.option(\"permissions\"));\n\n          this._filesTreeViewContextMenu.tryUpdateVisibleContextMenu();\n\n          this._itemViewContextMenu.tryUpdateVisibleContextMenu();\n\n          this._toolbar.updateItemPermissions();\n\n          this._updateUploadDropZone();\n\n          break;\n\n        case \"selectionMode\":\n        case \"customizeThumbnail\":\n        case \"customizeDetailColumns\":\n          this._invalidate();\n\n          break;\n\n        case \"itemView\":\n          if (\"itemView.mode\" === args.fullName) {\n            this._switchView(args.value);\n          } else {\n            this._invalidate();\n          }\n\n          break;\n\n        case \"toolbar\":\n          var toolbarOptions = {};\n\n          if (\"toolbar\" === args.fullName) {\n            if (args.value.items) {\n              toolbarOptions.generalItems = args.value.items;\n            }\n\n            if (args.value.fileSelectionItems) {\n              toolbarOptions.fileItems = args.value.fileSelectionItems;\n            }\n          }\n\n          if (0 === args.fullName.indexOf(\"toolbar.items\")) {\n            toolbarOptions.generalItems = this.option(\"toolbar.items\");\n          }\n\n          if (0 === args.fullName.indexOf(\"toolbar.fileSelectionItems\")) {\n            toolbarOptions.fileItems = this.option(\"toolbar.fileSelectionItems\");\n          }\n\n          this._toolbar.option(toolbarOptions);\n\n          break;\n\n        case \"contextMenu\":\n          if (\"contextMenu\" === args.fullName && args.value.items || 0 === args.fullName.indexOf(\"contextMenu.items\")) {\n            var contextMenuItems = this.option(\"contextMenu.items\");\n\n            this._filesTreeViewContextMenu.option(\"items\", contextMenuItems);\n\n            this._itemViewContextMenu.option(\"items\", contextMenuItems);\n          }\n\n          break;\n\n        case \"notifications\":\n          this._notificationControl.option(\"showProgressPanel\", this.option(\"notifications.showPanel\"));\n\n          this._notificationControl.option(\"showNotificationPopup\", this.option(\"notifications.showPopup\"));\n\n          break;\n\n        case \"onContextMenuItemClick\":\n        case \"onContextMenuShowing\":\n        case \"onCurrentDirectoryChanged\":\n        case \"onSelectedFileOpened\":\n        case \"onSelectionChanged\":\n        case \"onFocusedItemChanged\":\n        case \"onToolbarItemClick\":\n        case \"onErrorOccurred\":\n          this._actions[name] = this._createActionByOption(name);\n          break;\n\n        case \"onDirectoryCreating\":\n        case \"onDirectoryCreated\":\n        case \"onItemRenaming\":\n        case \"onItemRenamed\":\n        case \"onItemDeleting\":\n        case \"onItemDeleted\":\n        case \"onItemCopying\":\n        case \"onItemCopied\":\n        case \"onItemMoving\":\n        case \"onItemMoved\":\n        case \"onFileUploading\":\n        case \"onFileUploaded\":\n        case \"onItemDownloading\":\n          this._actions.editing[name] = this._createActionByOption(name);\n          break;\n\n        case \"rtlEnabled\":\n          this._editing.updateDialogRtl(args.value);\n\n          _get(_getPrototypeOf(FileManager.prototype), \"_optionChanged\", this).call(this, args);\n\n          break;\n\n        default:\n          _get(_getPrototypeOf(FileManager.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }, {\n    key: \"_initActions\",\n    value: function _initActions() {\n      this._actions = {\n        onContextMenuItemClick: this._createActionByOption(\"onContextMenuItemClick\"),\n        onContextMenuShowing: this._createActionByOption(\"onContextMenuShowing\"),\n        onCurrentDirectoryChanged: this._createActionByOption(\"onCurrentDirectoryChanged\"),\n        onSelectedFileOpened: this._createActionByOption(\"onSelectedFileOpened\"),\n        onSelectionChanged: this._createActionByOption(\"onSelectionChanged\"),\n        onFocusedItemChanged: this._createActionByOption(\"onFocusedItemChanged\"),\n        onToolbarItemClick: this._createActionByOption(\"onToolbarItemClick\"),\n        onErrorOccurred: this._createActionByOption(\"onErrorOccurred\"),\n        editing: {\n          onDirectoryCreating: this._createActionByOption(\"onDirectoryCreating\"),\n          onDirectoryCreated: this._createActionByOption(\"onDirectoryCreated\"),\n          onItemRenaming: this._createActionByOption(\"onItemRenaming\"),\n          onItemRenamed: this._createActionByOption(\"onItemRenamed\"),\n          onItemDeleting: this._createActionByOption(\"onItemDeleting\"),\n          onItemDeleted: this._createActionByOption(\"onItemDeleted\"),\n          onItemCopying: this._createActionByOption(\"onItemCopying\"),\n          onItemCopied: this._createActionByOption(\"onItemCopied\"),\n          onItemMoving: this._createActionByOption(\"onItemMoving\"),\n          onItemMoved: this._createActionByOption(\"onItemMoved\"),\n          onFileUploading: this._createActionByOption(\"onFileUploading\"),\n          onFileUploaded: this._createActionByOption(\"onFileUploaded\"),\n          onItemDownloading: this._createActionByOption(\"onItemDownloading\")\n        }\n      };\n    }\n  }, {\n    key: \"executeCommand\",\n    value: function executeCommand(commandName) {\n      return this._commandManager.executeCommand(commandName);\n    }\n  }, {\n    key: \"_setCurrentDirectory\",\n    value: function _setCurrentDirectory(directoryInfo, checkActuality) {\n      this._controller.setCurrentDirectory(directoryInfo, checkActuality);\n    }\n  }, {\n    key: \"_getCurrentDirectory\",\n    value: function _getCurrentDirectory() {\n      return this._controller.getCurrentDirectory();\n    }\n  }, {\n    key: \"_onControllerInitialized\",\n    value: function _onControllerInitialized(_ref8) {\n      var controller = _ref8.controller;\n      this._controller = this._controller || controller;\n\n      this._syncToCurrentDirectory();\n    }\n  }, {\n    key: \"_onDataLoading\",\n    value: function _onDataLoading(_ref9) {\n      var operation = _ref9.operation;\n      var options = null;\n\n      if (\"navigation\" === operation) {\n        options = {\n          focusedItemKey: this._itemKeyToFocus,\n          selectedItemKeys: this.option(\"selectedItemKeys\")\n        };\n        this._itemKeyToFocus = void 0;\n      }\n\n      this._itemView.refresh(options);\n    }\n  }, {\n    key: \"_onSelectedDirectoryChanged\",\n    value: function _onSelectedDirectoryChanged() {\n      var currentDirectory = this._getCurrentDirectory();\n\n      this._syncToCurrentDirectory();\n\n      this._actions.onCurrentDirectoryChanged({\n        directory: currentDirectory.fileItem\n      });\n    }\n  }, {\n    key: \"_syncToCurrentDirectory\",\n    value: function _syncToCurrentDirectory() {\n      var currentDirectory = this._getCurrentDirectory();\n\n      if (this._filesTreeView) {\n        this._filesTreeView.updateCurrentDirectory();\n      }\n\n      if (this._breadcrumbs) {\n        this._breadcrumbs.setCurrentDirectory(currentDirectory);\n      }\n\n      this._checkPathActuality();\n    }\n  }, {\n    key: \"_checkPathActuality\",\n    value: function _checkPathActuality() {\n      if (this._lockCurrentPathProcessing) {\n        return;\n      }\n\n      var currentPath = this._controller.getCurrentPath();\n\n      var currentPathKeys = this._controller.getCurrentPathKeys();\n\n      var options = {};\n\n      if (this.option(\"currentPath\") !== currentPath) {\n        options.currentPath = currentPath;\n      }\n\n      if (!equalByValue(this.option(\"currentPathKeys\"), currentPathKeys)) {\n        options.currentPathKeys = currentPathKeys;\n      }\n\n      if (!isEmptyObject(options)) {\n        this.option(options);\n      }\n    }\n  }, {\n    key: \"getDirectories\",\n    value: function getDirectories(parentDirectoryInfo, skipNavigationOnError) {\n      return this._controller.getDirectories(parentDirectoryInfo, skipNavigationOnError);\n    }\n  }, {\n    key: \"_getSelectedItemInfos\",\n    value: function _getSelectedItemInfos() {\n      return this._itemView ? this._itemView.getSelectedItems() : [];\n    }\n  }, {\n    key: \"refresh\",\n    value: function refresh() {\n      return this.executeCommand(\"refresh\");\n    }\n  }, {\n    key: \"getCurrentDirectory\",\n    value: function getCurrentDirectory() {\n      var directoryInfo = this._getCurrentDirectory();\n\n      return directoryInfo && directoryInfo.fileItem || null;\n    }\n  }, {\n    key: \"getSelectedItems\",\n    value: function getSelectedItems() {\n      return this._getSelectedItemInfos().map(function (itemInfo) {\n        return itemInfo.fileItem;\n      });\n    }\n  }, {\n    key: \"_onSelectedItemOpened\",\n    value: function _onSelectedItemOpened(_ref10) {\n      var fileItemInfo = _ref10.fileItemInfo;\n      var fileItem = fileItemInfo.fileItem;\n\n      if (!fileItem.isDirectory) {\n        this._actions.onSelectedFileOpened({\n          file: fileItem\n        });\n\n        return;\n      }\n\n      if (fileItem.isParentFolder) {\n        this._itemKeyToFocus = this._getCurrentDirectory().fileItem.key;\n      }\n\n      var newCurrentDirectory = fileItem.isParentFolder ? this._getCurrentDirectory().parentDirectory : fileItemInfo;\n\n      this._setCurrentDirectory(newCurrentDirectory);\n\n      if (newCurrentDirectory) {\n        this._filesTreeView.toggleDirectoryExpandedState(newCurrentDirectory.parentDirectory, true);\n      }\n    }\n  }]);\n\n  return FileManager;\n}(Widget);\n\nregisterComponent(\"dxFileManager\", FileManager);\nexport default FileManager;","map":null,"metadata":{},"sourceType":"module"}