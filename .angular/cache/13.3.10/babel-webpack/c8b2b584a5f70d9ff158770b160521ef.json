{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/series/financial_series.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { chart as scatterSeries } from \"./scatter_series\";\nimport { chart as barChart } from \"./bar_series\";\nimport { extend as _extend } from \"../../core/utils/extend\";\nimport { isDefined as _isDefined } from \"../../core/utils/type\";\nimport { normalizeEnum as _normalizeEnum } from \"../core/utils\";\nimport { noop as _noop } from \"../../core/utils/common\";\nvar barSeries = barChart.bar;\nvar DEFAULT_FINANCIAL_POINT_SIZE = 10;\nexport var stock = _extend({}, scatterSeries, {\n  _animate: _noop,\n  _applyMarkerClipRect: function _applyMarkerClipRect(settings) {\n    settings[\"clip-path\"] = this._forceClipping ? this._paneClipRectID : this._widePaneClipRectID;\n  },\n  _updatePointsVisibility: barSeries._updatePointsVisibility,\n  _getOptionsForPoint: barSeries._getOptionsForPoint,\n  _createErrorBarGroup: _noop,\n  areErrorBarsVisible: _noop,\n  _createGroups: scatterSeries._createGroups,\n  _setMarkerGroupSettings: function _setMarkerGroupSettings() {\n    var markersGroup = this._markersGroup;\n\n    var styles = this._createPointStyles(this._getMarkerGroupOptions());\n\n    var defaultStyle = _extend(styles.normal, {\n      class: \"default-markers\"\n    });\n\n    var defaultPositiveStyle = _extend(styles.positive.normal, {\n      class: \"default-positive-markers\"\n    });\n\n    var reductionStyle = _extend(styles.reduction.normal, {\n      class: \"reduction-markers\"\n    });\n\n    var reductionPositiveStyle = _extend(styles.reductionPositive.normal, {\n      class: \"reduction-positive-markers\"\n    });\n\n    var markerSettings = {\n      class: \"dxc-markers\"\n    };\n\n    this._applyMarkerClipRect(markerSettings);\n\n    markersGroup.attr(markerSettings);\n\n    this._createGroup(\"defaultMarkersGroup\", markersGroup, markersGroup, defaultStyle);\n\n    this._createGroup(\"reductionMarkersGroup\", markersGroup, markersGroup, reductionStyle);\n\n    this._createGroup(\"defaultPositiveMarkersGroup\", markersGroup, markersGroup, defaultPositiveStyle);\n\n    this._createGroup(\"reductionPositiveMarkersGroup\", markersGroup, markersGroup, reductionPositiveStyle);\n  },\n  _setGroupsSettings: function _setGroupsSettings() {\n    scatterSeries._setGroupsSettings.call(this, false);\n  },\n  _getCreatingPointOptions: function _getCreatingPointOptions() {\n    var defaultPointOptions;\n    var creatingPointOptions = this._predefinedPointOptions;\n\n    if (!creatingPointOptions) {\n      defaultPointOptions = this._getPointOptions();\n      this._predefinedPointOptions = creatingPointOptions = _extend(true, {\n        styles: {}\n      }, defaultPointOptions);\n      creatingPointOptions.styles.normal = creatingPointOptions.styles.positive.normal = creatingPointOptions.styles.reduction.normal = creatingPointOptions.styles.reductionPositive.normal = {\n        \"stroke-width\": defaultPointOptions.styles && defaultPointOptions.styles.normal && defaultPointOptions.styles.normal[\"stroke-width\"]\n      };\n    }\n\n    return creatingPointOptions;\n  },\n  _checkData: function _checkData(data, skippedFields) {\n    var valueFields = this.getValueFields();\n    return scatterSeries._checkData.call(this, data, skippedFields, {\n      openValue: valueFields[0],\n      highValue: valueFields[1],\n      lowValue: valueFields[2],\n      closeValue: valueFields[3]\n    }) && data.highValue === data.highValue && data.lowValue === data.lowValue;\n  },\n  _getPointDataSelector: function _getPointDataSelector(data, options) {\n    var _this = this;\n\n    var that = this;\n    var level;\n    var valueFields = that.getValueFields();\n    var argumentField = that.getArgumentField();\n    var openValueField = valueFields[0];\n    var highValueField = valueFields[1];\n    var lowValueField = valueFields[2];\n    var closeValueField = valueFields[3];\n    that.level = that._options.reduction.level;\n\n    switch (_normalizeEnum(that.level)) {\n      case \"open\":\n        level = openValueField;\n        break;\n\n      case \"high\":\n        level = highValueField;\n        break;\n\n      case \"low\":\n        level = lowValueField;\n        break;\n\n      default:\n        level = closeValueField;\n        that.level = \"close\";\n    }\n\n    var prevLevelValue;\n    return function (data) {\n      var reductionValue = data[level];\n      var isReduction = false;\n\n      if (_isDefined(reductionValue)) {\n        if (_isDefined(prevLevelValue)) {\n          isReduction = reductionValue < prevLevelValue;\n        }\n\n        prevLevelValue = reductionValue;\n      }\n\n      return {\n        argument: data[argumentField],\n        highValue: _this._processEmptyValue(data[highValueField]),\n        lowValue: _this._processEmptyValue(data[lowValueField]),\n        closeValue: _this._processEmptyValue(data[closeValueField]),\n        openValue: _this._processEmptyValue(data[openValueField]),\n        reductionValue: reductionValue,\n        tag: data[that.getTagField()],\n        isReduction: isReduction,\n        data: data\n      };\n    };\n  },\n  _parsePointStyle: function _parsePointStyle(style, defaultColor, innerColor) {\n    return {\n      stroke: style.color || defaultColor,\n      \"stroke-width\": style.width,\n      fill: style.color || innerColor\n    };\n  },\n  _getDefaultStyle: function _getDefaultStyle(options) {\n    var mainPointColor = options.color || this._options.mainSeriesColor;\n    return {\n      normal: this._parsePointStyle(options, mainPointColor, mainPointColor),\n      hover: this._parsePointStyle(options.hoverStyle, mainPointColor, mainPointColor),\n      selection: this._parsePointStyle(options.selectionStyle, mainPointColor, mainPointColor)\n    };\n  },\n  _getReductionStyle: function _getReductionStyle(options) {\n    var reductionColor = options.reduction.color;\n    return {\n      normal: this._parsePointStyle({\n        color: reductionColor,\n        width: options.width,\n        hatching: options.hatching\n      }, reductionColor, reductionColor),\n      hover: this._parsePointStyle(options.hoverStyle, reductionColor, reductionColor),\n      selection: this._parsePointStyle(options.selectionStyle, reductionColor, reductionColor)\n    };\n  },\n  _createPointStyles: function _createPointStyles(pointOptions) {\n    var innerColor = this._options.innerColor;\n\n    var styles = this._getDefaultStyle(pointOptions);\n\n    var positiveStyle = _extend(true, {}, styles);\n\n    var reductionStyle = this._getReductionStyle(pointOptions);\n\n    var reductionPositiveStyle = _extend(true, {}, reductionStyle);\n\n    positiveStyle.normal.fill = positiveStyle.hover.fill = positiveStyle.selection.fill = innerColor;\n    reductionPositiveStyle.normal.fill = reductionPositiveStyle.hover.fill = reductionPositiveStyle.selection.fill = innerColor;\n    styles.positive = positiveStyle;\n    styles.reduction = reductionStyle;\n    styles.reductionPositive = reductionPositiveStyle;\n    return styles;\n  },\n  _endUpdateData: function _endUpdateData() {\n    delete this._predefinedPointOptions;\n  },\n  _defaultAggregator: \"ohlc\",\n  _aggregators: {\n    ohlc: function ohlc(_ref, series) {\n      var intervalStart = _ref.intervalStart,\n          intervalEnd = _ref.intervalEnd,\n          data = _ref.data;\n\n      if (!data.length) {\n        return;\n      }\n\n      var result = {};\n      var valueFields = series.getValueFields();\n      var highValueField = valueFields[1];\n      var lowValueField = valueFields[2];\n      result[highValueField] = -1 / 0;\n      result[lowValueField] = 1 / 0;\n      result = data.reduce(function (result, item) {\n        if (null !== item[highValueField]) {\n          result[highValueField] = Math.max(result[highValueField], item[highValueField]);\n        }\n\n        if (null !== item[lowValueField]) {\n          result[lowValueField] = Math.min(result[lowValueField], item[lowValueField]);\n        }\n\n        return result;\n      }, result);\n      result[valueFields[0]] = data[0][valueFields[0]];\n      result[valueFields[3]] = data[data.length - 1][valueFields[3]];\n\n      if (!isFinite(result[highValueField])) {\n        result[highValueField] = null;\n      }\n\n      if (!isFinite(result[lowValueField])) {\n        result[lowValueField] = null;\n      }\n\n      result[series.getArgumentField()] = series._getIntervalCenter(intervalStart, intervalEnd);\n      return result;\n    }\n  },\n  getValueFields: function getValueFields() {\n    var options = this._options;\n    return [options.openValueField || \"open\", options.highValueField || \"high\", options.lowValueField || \"low\", options.closeValueField || \"close\"];\n  },\n  getArgumentField: function getArgumentField() {\n    return this._options.argumentField || \"date\";\n  },\n  _patchMarginOptions: function _patchMarginOptions(options) {\n    var pointOptions = this._getCreatingPointOptions();\n\n    var styles = pointOptions.styles;\n    var border = [styles.normal, styles.hover, styles.selection].reduce(function (max, style) {\n      return Math.max(max, style[\"stroke-width\"]);\n    }, 0);\n    options.size = DEFAULT_FINANCIAL_POINT_SIZE + border;\n    options.sizePointNormalState = DEFAULT_FINANCIAL_POINT_SIZE;\n    return options;\n  },\n  getSeriesPairCoord: function getSeriesPairCoord(coord, isArgument) {\n    var oppositeCoord = null;\n    var points = this.getVisiblePoints();\n\n    for (var i = 0; i < points.length; i++) {\n      var p = points[i];\n      var tmpCoord = void 0;\n\n      if (isArgument) {\n        tmpCoord = p.vx === coord ? (p.openY + p.closeY) / 2 : void 0;\n      } else {\n        var coords = [Math.min(p.lowY, p.highY), Math.max(p.lowY, p.highY)];\n        tmpCoord = coord >= coords[0] && coord <= coords[1] ? p.vx : void 0;\n      }\n\n      if (this._checkAxisVisibleAreaCoord(!isArgument, tmpCoord)) {\n        oppositeCoord = tmpCoord;\n        break;\n      }\n    }\n\n    return oppositeCoord;\n  },\n  usePointsToDefineAutoHiding: function usePointsToDefineAutoHiding() {\n    return false;\n  }\n});\nexport var candlestick = _extend({}, stock, {\n  _parsePointStyle: function _parsePointStyle(style, defaultColor, innerColor) {\n    var color = style.color || innerColor;\n\n    var base = stock._parsePointStyle.call(this, style, defaultColor, color);\n\n    base.fill = color;\n    base.hatching = style.hatching;\n    return base;\n  }\n});","map":null,"metadata":{},"sourceType":"module"}