{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/pivot_grid/ui.sortable.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getOuterWidth, getOuterHeight, getHeight, getWidth, setWidth, setHeight } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { isDefined } from \"../../core/utils/type\";\nimport { extend } from \"../../core/utils/extend\";\nimport { each } from \"../../core/utils/iterator\";\nimport { addNamespace } from \"../../events/utils/index\";\nimport registerComponent from \"../../core/component_registrator\";\nimport DOMComponent from \"../../core/dom_component\";\nimport { start as dragEventStart, move as dragEventMove, end as dragEventEnd, enter as dragEventEnter, leave as dragEventLeave, drop as dragEventDrop } from \"../../events/drag\";\nimport swatchContainer from \"../widget/swatch_container\";\nvar getSwatchContainer = swatchContainer.getSwatchContainer;\nvar SORTABLE_NAMESPACE = \"dxSortable\";\nvar SORTABLE_CLASS = \"dx-sortable-old\";\nvar SCROLL_STEP = 2;\nvar START_SCROLL_OFFSET = 20;\nvar SCROLL_TIMEOUT = 10;\n\nfunction elementHasPoint(element, x, y) {\n  var $item = $(element);\n  var offset = $item.offset();\n\n  if (x >= offset.left && x <= offset.left + getOuterWidth($item, true)) {\n    if (y >= offset.top && y <= offset.top + getOuterHeight($item, true)) {\n      return true;\n    }\n  }\n}\n\nfunction checkHorizontalPosition(position, itemOffset, rtl) {\n  if (isDefined(itemOffset.posHorizontal)) {\n    return rtl ? position > itemOffset.posHorizontal : position < itemOffset.posHorizontal;\n  } else {\n    return true;\n  }\n}\n\nfunction getIndex($items, $item) {\n  var index = -1;\n  var itemElement = $item.get(0);\n  each($items, function (elementIndex, element) {\n    var $element = $(element);\n\n    if (!($element.attr(\"item-group\") && $element.attr(\"item-group\") === $items.eq(elementIndex - 1).attr(\"item-group\"))) {\n      index++;\n    }\n\n    if (element === itemElement) {\n      return false;\n    }\n  });\n  return index === $items.length ? -1 : index;\n}\n\nfunction getTargetGroup(e, $groups) {\n  var result;\n  each($groups, function () {\n    if (elementHasPoint(this, e.pageX, e.pageY)) {\n      result = $(this);\n    }\n  });\n  return result;\n}\n\nfunction getItemsOffset($elements, isVertical, $itemsContainer) {\n  var result = [];\n  var $item = [];\n\n  for (var i = 0; i < $elements.length; i += $item.length) {\n    $item = $elements.eq(i);\n\n    if ($item.attr(\"item-group\")) {\n      $item = $itemsContainer.find(\"[item-group='\" + $item.attr(\"item-group\") + \"']\");\n    }\n\n    if ($item.is(\":visible\")) {\n      var offset = {\n        item: $item,\n        index: result.length,\n        posHorizontal: isVertical ? void 0 : (getOuterWidth($item.last(), true) + $item.last().offset().left + $item.offset().left) / 2\n      };\n\n      if (isVertical) {\n        offset.posVertical = ($item.last().offset().top + $item.offset().top + getOuterHeight($item.last(), true)) / 2;\n      } else {\n        offset.posVertical = getOuterHeight($item.last(), true) + $item.last().offset().top;\n      }\n\n      result.push(offset);\n    }\n  }\n\n  return result;\n}\n\nfunction getScrollWrapper(scrollable) {\n  var timeout = null;\n  var scrollTop = scrollable.scrollTop();\n  var $element = scrollable.$element();\n  var top = $element.offset().top;\n  var height = getHeight($element);\n  var delta = 0;\n\n  function onScroll(e) {\n    scrollTop = e.scrollOffset.top;\n  }\n\n  scrollable.on(\"scroll\", onScroll);\n\n  function move() {\n    stop();\n    scrollable.scrollTo(scrollTop += delta);\n    timeout = setTimeout(move, SCROLL_TIMEOUT);\n  }\n\n  function stop() {\n    clearTimeout(timeout);\n  }\n\n  return {\n    moveIfNeed: function moveIfNeed(event) {\n      if (event.pageY <= top + START_SCROLL_OFFSET) {\n        delta = -SCROLL_STEP;\n      } else if (event.pageY >= top + height - START_SCROLL_OFFSET) {\n        delta = SCROLL_STEP;\n      } else {\n        delta = 0;\n        stop();\n        return;\n      }\n\n      move();\n    },\n    element: function element() {\n      return $element;\n    },\n    dispose: function dispose() {\n      stop();\n      scrollable.off(\"scroll\", onScroll);\n    }\n  };\n}\n\nvar Sortable = DOMComponent.inherit({\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      onChanged: null,\n      onDragging: null,\n      itemRender: null,\n      groupSelector: null,\n      itemSelector: \".dx-sort-item\",\n      itemContainerSelector: \".dx-sortable-old\",\n      sourceClass: \"dx-drag-source\",\n      dragClass: \"dx-drag\",\n      targetClass: \"dx-drag-target\",\n      direction: \"vertical\",\n      allowDragging: true,\n      groupFilter: null,\n      useIndicator: false\n    });\n  },\n  _renderItem: function _renderItem($sourceItem, target) {\n    var itemRender = this.option(\"itemRender\");\n    var $item;\n\n    if (itemRender) {\n      $item = itemRender($sourceItem, target);\n    } else {\n      $item = $sourceItem.clone();\n      $item.css({\n        width: getWidth($sourceItem),\n        height: getHeight($sourceItem)\n      });\n    }\n\n    return $item;\n  },\n  _renderIndicator: function _renderIndicator($item, isVertical, $targetGroup, isLast) {\n    var height = getOuterHeight($item, true);\n    var width = getOuterWidth($item, true);\n    var top = $item.offset().top - $targetGroup.offset().top;\n    var left = $item.offset().left - $targetGroup.offset().left;\n\n    this._indicator.css({\n      position: \"absolute\",\n      top: isLast && isVertical ? top + height : top,\n      left: isLast && !isVertical ? left + width : left\n    }).toggleClass(\"dx-position-indicator-horizontal\", !isVertical).toggleClass(\"dx-position-indicator-vertical\", !!isVertical).toggleClass(\"dx-position-indicator-last\", !!isLast).appendTo($targetGroup);\n\n    setHeight(this._indicator, \"\");\n    setWidth(this._indicator, \"\");\n\n    if (isVertical) {\n      setWidth(this._indicator, width);\n    } else {\n      setHeight(this._indicator, height);\n    }\n  },\n  _renderDraggable: function _renderDraggable($sourceItem) {\n    this._$draggable && this._$draggable.remove();\n    this._$draggable = this._renderItem($sourceItem, \"drag\").addClass(this.option(\"dragClass\")).appendTo(getSwatchContainer($sourceItem)).css({\n      zIndex: 1e6,\n      position: \"absolute\"\n    });\n  },\n  _detachEventHandlers: function _detachEventHandlers() {\n    var dragEventsString = [dragEventMove, dragEventStart, dragEventEnd, dragEventEnter, dragEventLeave, dragEventDrop].join(\" \");\n    eventsEngine.off(this._getEventListener(), addNamespace(dragEventsString, SORTABLE_NAMESPACE));\n  },\n  _getItemOffset: function _getItemOffset(isVertical, itemsOffset, e) {\n    for (var i = 0; i < itemsOffset.length; i++) {\n      var shouldInsert = void 0;\n      var sameLine = e.pageY < itemsOffset[i].posVertical;\n\n      if (isVertical) {\n        shouldInsert = sameLine;\n      } else if (sameLine) {\n        shouldInsert = checkHorizontalPosition(e.pageX, itemsOffset[i], this.option(\"rtlEnabled\"));\n\n        if (!shouldInsert && itemsOffset[i + 1] && itemsOffset[i + 1].posVertical > itemsOffset[i].posVertical) {\n          shouldInsert = true;\n        }\n      }\n\n      if (shouldInsert) {\n        return itemsOffset[i];\n      }\n    }\n  },\n  _getEventListener: function _getEventListener() {\n    var groupSelector = this.option(\"groupSelector\");\n    var element = this.$element();\n    return groupSelector ? element.find(groupSelector) : element;\n  },\n  _attachEventHandlers: function _attachEventHandlers() {\n    var that = this;\n    var itemSelector = that.option(\"itemSelector\");\n    var itemContainerSelector = that.option(\"itemContainerSelector\");\n    var groupSelector = that.option(\"groupSelector\");\n    var sourceClass = that.option(\"sourceClass\");\n    var targetClass = that.option(\"targetClass\");\n    var onDragging = that.option(\"onDragging\");\n    var groupFilter = that.option(\"groupFilter\");\n    var $sourceItem;\n    var sourceIndex;\n    var $targetItem;\n    var $targetGroup;\n    var startPositions;\n    var sourceGroup;\n    var element = that.$element();\n    var $groups;\n    var scrollWrapper = null;\n    var targetIndex = -1;\n\n    var disposeScrollWrapper = function disposeScrollWrapper() {\n      scrollWrapper && scrollWrapper.dispose();\n      scrollWrapper = null;\n    };\n\n    that._detachEventHandlers();\n\n    if (that.option(\"allowDragging\")) {\n      var $eventListener = that._getEventListener();\n\n      eventsEngine.on($eventListener, addNamespace(dragEventStart, SORTABLE_NAMESPACE), itemSelector, function (e) {\n        $sourceItem = $(e.currentTarget);\n        var $sourceGroup = $sourceItem.closest(groupSelector);\n        sourceGroup = $sourceGroup.attr(\"group\");\n        sourceIndex = getIndex((groupSelector ? $sourceGroup : element).find(itemSelector), $sourceItem);\n\n        if ($sourceItem.attr(\"item-group\")) {\n          $sourceItem = $sourceGroup.find(\"[item-group='\" + $sourceItem.attr(\"item-group\") + \"']\");\n        }\n\n        that._renderDraggable($sourceItem);\n\n        $targetItem = that._renderItem($sourceItem, \"target\").addClass(targetClass);\n        $sourceItem.addClass(sourceClass);\n        !function () {\n          startPositions = [];\n          each($sourceItem, function (_, item) {\n            startPositions.push($(item).offset());\n          });\n        }();\n\n        $groups = function () {\n          if (!groupSelector) {\n            return element;\n          } else {\n            return groupFilter ? $(groupSelector).filter(groupFilter) : element.find(groupSelector);\n          }\n        }();\n\n        that._indicator = $(\"<div>\").addClass(\"dx-position-indicator\");\n      });\n      eventsEngine.on($eventListener, addNamespace(dragEventMove, SORTABLE_NAMESPACE), function (e) {\n        var $item;\n        var $lastItem;\n        var $prevItem;\n\n        if (!$sourceItem) {\n          return;\n        }\n\n        targetIndex = -1;\n\n        that._indicator.detach();\n\n        each(that._$draggable, function (index, draggableElement) {\n          $(draggableElement).css({\n            top: startPositions[index].top + e.offset.y,\n            left: startPositions[index].left + e.offset.x\n          });\n        });\n        $targetGroup && $targetGroup.removeClass(targetClass);\n        $targetGroup = getTargetGroup(e, $groups);\n        $targetGroup && function () {\n          var draggingArgs = {\n            sourceGroup: sourceGroup,\n            sourceIndex: sourceIndex,\n            sourceElement: $sourceItem,\n            targetGroup: $targetGroup.attr(\"group\"),\n            targetIndex: $targetGroup.find(itemSelector).index($targetItem)\n          };\n          onDragging && onDragging(draggingArgs);\n\n          if (draggingArgs.cancel) {\n            $targetGroup = void 0;\n          }\n        }();\n\n        if ($targetGroup && scrollWrapper && $targetGroup.get(0) !== scrollWrapper.element().get(0)) {\n          disposeScrollWrapper();\n        }\n\n        scrollWrapper && scrollWrapper.moveIfNeed(e);\n\n        if (!$targetGroup) {\n          $targetItem.detach();\n          return;\n        }\n\n        if (!scrollWrapper && $targetGroup.attr(\"allow-scrolling\")) {\n          scrollWrapper = getScrollWrapper($targetGroup.dxScrollable(\"instance\"));\n        }\n\n        $targetGroup.addClass(targetClass);\n        var $itemContainer = $targetGroup.find(itemContainerSelector);\n        var $items = $itemContainer.find(itemSelector);\n        var targetSortable = $targetGroup.closest(\".\" + SORTABLE_CLASS).data(\"dxSortableOld\");\n        var useIndicator = targetSortable.option(\"useIndicator\");\n        var isVertical = \"vertical\" === (targetSortable || that).option(\"direction\");\n        var itemsOffset = getItemsOffset($items, isVertical, $itemContainer);\n\n        var itemOffset = that._getItemOffset(isVertical, itemsOffset, e);\n\n        if (itemOffset) {\n          $item = itemOffset.item;\n          $prevItem = itemsOffset[itemOffset.index - 1] && itemsOffset[itemOffset.index - 1].item;\n\n          if ($item.hasClass(sourceClass) || $prevItem && $prevItem.hasClass(sourceClass) && $prevItem.is(\":visible\")) {\n            $targetItem.detach();\n            return;\n          }\n\n          targetIndex = itemOffset.index;\n\n          if (!useIndicator) {\n            $targetItem.insertBefore($item);\n            return;\n          }\n\n          var isAnotherGroup = $targetGroup.attr(\"group\") !== sourceGroup;\n          var isSameIndex = targetIndex === sourceIndex;\n          var isNextIndex = targetIndex === sourceIndex + 1;\n\n          if (isAnotherGroup) {\n            that._renderIndicator($item, isVertical, $targetGroup, that.option(\"rtlEnabled\") && !isVertical);\n\n            return;\n          }\n\n          if (!isSameIndex && !isNextIndex) {\n            that._renderIndicator($item, isVertical, $targetGroup, that.option(\"rtlEnabled\") && !isVertical);\n          }\n        } else {\n          $lastItem = $items.last();\n\n          if ($lastItem.is(\":visible\") && $lastItem.hasClass(sourceClass)) {\n            return;\n          }\n\n          if ($itemContainer.length) {\n            targetIndex = itemsOffset.length ? itemsOffset[itemsOffset.length - 1].index + 1 : 0;\n          }\n\n          if (useIndicator) {\n            $items.length && that._renderIndicator($lastItem, isVertical, $targetGroup, !that.option(\"rtlEnabled\") || isVertical);\n          } else {\n            $targetItem.appendTo($itemContainer);\n          }\n        }\n      });\n      eventsEngine.on($eventListener, addNamespace(dragEventEnd, SORTABLE_NAMESPACE), function () {\n        disposeScrollWrapper();\n\n        if (!$sourceItem) {\n          return;\n        }\n\n        var onChanged = that.option(\"onChanged\");\n        var changedArgs = {\n          sourceIndex: sourceIndex,\n          sourceElement: $sourceItem,\n          sourceGroup: sourceGroup,\n          targetIndex: targetIndex,\n          removeSourceElement: true,\n          removeTargetElement: false,\n          removeSourceClass: true\n        };\n\n        if ($targetGroup) {\n          $targetGroup.removeClass(targetClass);\n          changedArgs.targetGroup = $targetGroup.attr(\"group\");\n\n          if (sourceGroup !== changedArgs.targetGroup || targetIndex > -1) {\n            onChanged && onChanged(changedArgs);\n            changedArgs.removeSourceElement && $sourceItem.remove();\n          }\n        }\n\n        that._indicator.detach();\n\n        changedArgs.removeSourceClass && $sourceItem.removeClass(sourceClass);\n        $sourceItem = null;\n\n        that._$draggable.remove();\n\n        that._$draggable = null;\n        changedArgs.removeTargetElement && $targetItem.remove();\n        $targetItem.removeClass(targetClass);\n        $targetItem = null;\n      });\n    }\n  },\n  _init: function _init() {\n    this.callBase();\n\n    this._attachEventHandlers();\n  },\n  _render: function _render() {\n    this.callBase();\n    this.$element().addClass(SORTABLE_CLASS);\n  },\n  _dispose: function _dispose() {\n    var that = this;\n    that.callBase.apply(that, arguments);\n    that._$draggable && that._$draggable.detach();\n    that._indicator && that._indicator.detach();\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"onDragging\":\n      case \"onChanged\":\n      case \"itemRender\":\n      case \"groupSelector\":\n      case \"itemSelector\":\n      case \"itemContainerSelector\":\n      case \"sourceClass\":\n      case \"targetClass\":\n      case \"dragClass\":\n      case \"allowDragging\":\n      case \"groupFilter\":\n      case \"useIndicator\":\n        this._attachEventHandlers();\n\n        break;\n\n      case \"direction\":\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  _useTemplates: function _useTemplates() {\n    return false;\n  }\n});\nregisterComponent(\"dxSortableOld\", Sortable);\nexport default Sortable;","map":null,"metadata":{},"sourceType":"module"}