{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/switch.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getOuterWidth } from \"../core/utils/size\";\nimport $ from \"../core/renderer\";\nimport eventsEngine from \"../events/core/events_engine\";\nimport devices from \"../core/devices\";\nimport { extend } from \"../core/utils/extend\";\nimport registerComponent from \"../core/component_registrator\";\nimport Editor from \"./editor/editor\";\nimport { addNamespace } from \"../events/utils/index\";\nimport { lock } from \"../events/core/emitter.feedback\";\nimport { getBoundingRect } from \"../core/utils/position\";\nimport fx from \"../animation/fx\";\nimport messageLocalization from \"../localization/message\";\nimport { name as clickEventName } from \"../events/click\";\nimport Swipeable from \"../events/gesture/swipeable\";\nimport { Deferred } from \"../core/utils/deferred\";\nvar SWITCH_CLASS = \"dx-switch\";\nvar SWITCH_WRAPPER_CLASS = SWITCH_CLASS + \"-wrapper\";\nvar SWITCH_CONTAINER_CLASS = SWITCH_CLASS + \"-container\";\nvar SWITCH_INNER_CLASS = SWITCH_CLASS + \"-inner\";\nvar SWITCH_HANDLE_CLASS = SWITCH_CLASS + \"-handle\";\nvar SWITCH_ON_VALUE_CLASS = SWITCH_CLASS + \"-on-value\";\nvar SWITCH_ON_CLASS = SWITCH_CLASS + \"-on\";\nvar SWITCH_OFF_CLASS = SWITCH_CLASS + \"-off\";\nvar SWITCH_ANIMATION_DURATION = 100;\nvar Switch = Editor.inherit({\n  _supportedKeys: function _supportedKeys() {\n    var isRTL = this.option(\"rtlEnabled\");\n\n    var click = function click(e) {\n      e.preventDefault();\n\n      this._clickAction({\n        event: e\n      });\n    };\n\n    var move = function move(value, e) {\n      e.preventDefault();\n      e.stopPropagation();\n\n      this._saveValueChangeEvent(e);\n\n      this._animateValue(value);\n    };\n\n    return extend(this.callBase(), {\n      space: click,\n      enter: click,\n      leftArrow: move.bind(this, isRTL ? true : false),\n      rightArrow: move.bind(this, isRTL ? false : true)\n    });\n  },\n  _useTemplates: function _useTemplates() {\n    return false;\n  },\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      hoverStateEnabled: true,\n      activeStateEnabled: true,\n      switchedOnText: messageLocalization.format(\"dxSwitch-switchedOnText\"),\n      switchedOffText: messageLocalization.format(\"dxSwitch-switchedOffText\"),\n      value: false\n    });\n  },\n  _defaultOptionsRules: function _defaultOptionsRules() {\n    return this.callBase().concat([{\n      device: function device() {\n        return \"desktop\" === devices.real().deviceType && !devices.isSimulator();\n      },\n      options: {\n        focusStateEnabled: true\n      }\n    }]);\n  },\n  _feedbackHideTimeout: 0,\n  _animating: false,\n  _initMarkup: function _initMarkup() {\n    this._renderContainers();\n\n    this.$element().addClass(SWITCH_CLASS).append(this._$switchWrapper);\n\n    this._renderSubmitElement();\n\n    this._renderClick();\n\n    this.setAria(\"role\", \"button\");\n\n    this._renderSwipeable();\n\n    this.callBase();\n\n    this._renderSwitchInner();\n\n    this._renderLabels();\n\n    this._renderValue();\n  },\n  _getInnerOffset: function _getInnerOffset(value, offset) {\n    var ratio = (offset - this._offsetDirection() * Number(!value)) / 2;\n    return 100 * ratio + \"%\";\n  },\n  _getHandleOffset: function _getHandleOffset(value, offset) {\n    if (this.option(\"rtlEnabled\")) {\n      value = !value;\n    }\n\n    if (value) {\n      var calcValue = 100 * -offset - 100;\n      return calcValue + \"%\";\n    } else {\n      return 100 * -offset + \"%\";\n    }\n  },\n  _renderSwitchInner: function _renderSwitchInner() {\n    this._$switchInner = $(\"<div>\").addClass(SWITCH_INNER_CLASS).appendTo(this._$switchContainer);\n    this._$handle = $(\"<div>\").addClass(SWITCH_HANDLE_CLASS).appendTo(this._$switchInner);\n  },\n  _renderLabels: function _renderLabels() {\n    this._$labelOn = $(\"<div>\").addClass(SWITCH_ON_CLASS).prependTo(this._$switchInner);\n    this._$labelOff = $(\"<div>\").addClass(SWITCH_OFF_CLASS).appendTo(this._$switchInner);\n\n    this._setLabelsText();\n  },\n  _renderContainers: function _renderContainers() {\n    this._$switchContainer = $(\"<div>\").addClass(SWITCH_CONTAINER_CLASS);\n    this._$switchWrapper = $(\"<div>\").addClass(SWITCH_WRAPPER_CLASS).append(this._$switchContainer);\n  },\n  _renderSwipeable: function _renderSwipeable() {\n    this._createComponent(this.$element(), Swipeable, {\n      elastic: false,\n      immediate: true,\n      onStart: this._swipeStartHandler.bind(this),\n      onUpdated: this._swipeUpdateHandler.bind(this),\n      onEnd: this._swipeEndHandler.bind(this),\n      itemSizeFunc: this._getItemSizeFunc.bind(this)\n    });\n  },\n  _getItemSizeFunc: function _getItemSizeFunc() {\n    return getOuterWidth(this._$switchContainer, true) - getBoundingRect(this._$handle.get(0)).width;\n  },\n  _renderSubmitElement: function _renderSubmitElement() {\n    this._$submitElement = $(\"<input>\").attr(\"type\", \"hidden\").appendTo(this.$element());\n  },\n  _getSubmitElement: function _getSubmitElement() {\n    return this._$submitElement;\n  },\n  _offsetDirection: function _offsetDirection() {\n    return this.option(\"rtlEnabled\") ? -1 : 1;\n  },\n  _renderPosition: function _renderPosition(state, swipeOffset) {\n    var innerOffset = this._getInnerOffset(state, swipeOffset);\n\n    var handleOffset = this._getHandleOffset(state, swipeOffset);\n\n    this._$switchInner.css(\"transform\", \" translateX(\" + innerOffset + \")\");\n\n    this._$handle.css(\"transform\", \" translateX(\" + handleOffset + \")\");\n  },\n  _validateValue: function _validateValue() {\n    var check = this.option(\"value\");\n\n    if (\"boolean\" !== typeof check) {\n      this._options.silent(\"value\", !!check);\n    }\n  },\n  _renderClick: function _renderClick() {\n    var eventName = addNamespace(clickEventName, this.NAME);\n    var $element = this.$element();\n    this._clickAction = this._createAction(this._clickHandler.bind(this));\n    eventsEngine.off($element, eventName);\n    eventsEngine.on($element, eventName, function (e) {\n      this._clickAction({\n        event: e\n      });\n    }.bind(this));\n  },\n  _clickHandler: function _clickHandler(args) {\n    var e = args.event;\n\n    this._saveValueChangeEvent(e);\n\n    if (this._animating || this._swiping) {\n      return;\n    }\n\n    this._animateValue(!this.option(\"value\"));\n  },\n  _animateValue: function _animateValue(value) {\n    var startValue = this.option(\"value\");\n    var endValue = value;\n\n    if (startValue === endValue) {\n      return;\n    }\n\n    this._animating = true;\n\n    var fromInnerOffset = this._getInnerOffset(startValue, 0);\n\n    var toInnerOffset = this._getInnerOffset(endValue, 0);\n\n    var fromHandleOffset = this._getHandleOffset(startValue, 0);\n\n    var toHandleOffset = this._getHandleOffset(endValue, 0);\n\n    var that = this;\n    var fromInnerConfig = {};\n    var toInnerConfig = {};\n    var fromHandleConfig = {};\n    var toHandlerConfig = {};\n    fromInnerConfig.transform = \" translateX(\" + fromInnerOffset + \")\";\n    toInnerConfig.transform = \" translateX(\" + toInnerOffset + \")\";\n    fromHandleConfig.transform = \" translateX(\" + fromHandleOffset + \")\";\n    toHandlerConfig.transform = \" translateX(\" + toHandleOffset + \")\";\n    this.$element().toggleClass(SWITCH_ON_VALUE_CLASS, endValue);\n    fx.animate(this._$handle, {\n      from: fromHandleConfig,\n      to: toHandlerConfig,\n      duration: SWITCH_ANIMATION_DURATION\n    });\n    fx.animate(this._$switchInner, {\n      from: fromInnerConfig,\n      to: toInnerConfig,\n      duration: SWITCH_ANIMATION_DURATION,\n      complete: function complete() {\n        that._animating = false;\n        that.option(\"value\", endValue);\n      }\n    });\n  },\n  _swipeStartHandler: function _swipeStartHandler(e) {\n    var state = this.option(\"value\");\n    var rtlEnabled = this.option(\"rtlEnabled\");\n    var maxOffOffset = rtlEnabled ? 0 : 1;\n    var maxOnOffset = rtlEnabled ? 1 : 0;\n    e.event.maxLeftOffset = state ? maxOffOffset : maxOnOffset;\n    e.event.maxRightOffset = state ? maxOnOffset : maxOffOffset;\n    this._swiping = true;\n    this._feedbackDeferred = new Deferred();\n    lock(this._feedbackDeferred);\n\n    this._toggleActiveState(this.$element(), this.option(\"activeStateEnabled\"));\n  },\n  _swipeUpdateHandler: function _swipeUpdateHandler(e) {\n    this._renderPosition(this.option(\"value\"), e.event.offset);\n  },\n  _swipeEndHandler: function _swipeEndHandler(e) {\n    var that = this;\n\n    var offsetDirection = this._offsetDirection();\n\n    var toInnerConfig = {};\n    var toHandleConfig = {};\n\n    var innerOffset = this._getInnerOffset(that.option(\"value\"), e.event.targetOffset);\n\n    var handleOffset = this._getHandleOffset(that.option(\"value\"), e.event.targetOffset);\n\n    toInnerConfig.transform = \" translateX(\" + innerOffset + \")\";\n    toHandleConfig.transform = \" translateX(\" + handleOffset + \")\";\n    fx.animate(this._$handle, {\n      to: toHandleConfig,\n      duration: SWITCH_ANIMATION_DURATION\n    });\n    fx.animate(this._$switchInner, {\n      to: toInnerConfig,\n      duration: SWITCH_ANIMATION_DURATION,\n      complete: function complete() {\n        that._swiping = false;\n        var pos = that.option(\"value\") + offsetDirection * e.event.targetOffset;\n\n        that._saveValueChangeEvent(e.event);\n\n        that.option(\"value\", Boolean(pos));\n\n        that._feedbackDeferred.resolve();\n\n        that._toggleActiveState(that.$element(), false);\n      }\n    });\n  },\n  _renderValue: function _renderValue() {\n    this._validateValue();\n\n    var val = this.option(\"value\");\n\n    this._renderPosition(val, 0);\n\n    this.$element().toggleClass(SWITCH_ON_VALUE_CLASS, val);\n\n    this._getSubmitElement().val(val);\n\n    this.setAria({\n      pressed: val,\n      label: val ? this.option(\"switchedOnText\") : this.option(\"switchedOffText\")\n    });\n  },\n  _setLabelsText: function _setLabelsText() {\n    this._$labelOn && this._$labelOn.text(this.option(\"switchedOnText\"));\n    this._$labelOff && this._$labelOff.text(this.option(\"switchedOffText\"));\n  },\n  _visibilityChanged: function _visibilityChanged(visible) {\n    if (visible) {\n      this.repaint();\n    }\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"width\":\n        delete this._marginBound;\n\n        this._refresh();\n\n        break;\n\n      case \"switchedOnText\":\n      case \"switchedOffText\":\n        this._setLabelsText();\n\n        break;\n\n      case \"value\":\n        this._renderValue();\n\n        this.callBase(args);\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  }\n});\nregisterComponent(\"dxSwitch\", Switch);\nexport default Switch;","map":null,"metadata":{},"sourceType":"module"}