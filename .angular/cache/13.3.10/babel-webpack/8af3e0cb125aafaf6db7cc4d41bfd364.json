{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/**\r\n * DevExtreme (esm/ui/diagram/diagram.bar.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getDiagram } from \"./diagram.importer\";\n\nvar DiagramBar = /*#__PURE__*/function () {\n  function DiagramBar(owner) {\n    _classCallCheck(this, DiagramBar);\n\n    var _getDiagram = getDiagram(),\n        EventDispatcher = _getDiagram.EventDispatcher;\n\n    this.onChanged = new EventDispatcher();\n    this._owner = owner;\n  }\n\n  _createClass(DiagramBar, [{\n    key: \"raiseBarCommandExecuted\",\n    value: function raiseBarCommandExecuted(key, parameter) {\n      this.onChanged.raise(\"notifyBarCommandExecuted\", parseInt(key), parameter);\n    }\n  }, {\n    key: \"getCommandKeys\",\n    value: function getCommandKeys() {\n      throw \"Not Implemented\";\n    }\n  }, {\n    key: \"setItemValue\",\n    value: function setItemValue(key, value) {}\n  }, {\n    key: \"setItemEnabled\",\n    value: function setItemEnabled(key, enabled) {}\n  }, {\n    key: \"setItemVisible\",\n    value: function setItemVisible(key, enabled) {}\n  }, {\n    key: \"setEnabled\",\n    value: function setEnabled(enabled) {}\n  }, {\n    key: \"setItemSubItems\",\n    value: function setItemSubItems(key, items) {}\n  }, {\n    key: \"isVisible\",\n    value: function isVisible() {\n      return true;\n    }\n  }, {\n    key: \"_getKeys\",\n    value: function _getKeys(items) {\n      var _this = this;\n\n      var keys = items.reduce(function (commands, item) {\n        if (void 0 !== item.command) {\n          commands.push(item.command);\n        }\n\n        if (item.items) {\n          commands = commands.concat(_this._getKeys(item.items));\n        }\n\n        return commands;\n      }, []);\n      return keys;\n    }\n  }]);\n\n  return DiagramBar;\n}();\n\nexport default DiagramBar;","map":null,"metadata":{},"sourceType":"module"}