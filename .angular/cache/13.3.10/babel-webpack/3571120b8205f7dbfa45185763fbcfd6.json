{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/**\r\n * DevExtreme (esm/ui/html_editor/ui/formDialog.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../../core/renderer\";\nimport { extend } from \"../../../core/utils/extend\";\nimport Popup from \"../../popup\";\nimport Form from \"../../form\";\nimport { Deferred } from \"../../../core/utils/deferred\";\nimport localizationMessage from \"../../../localization/message\";\nimport { getCurrentScreenFactor, hasWindow } from \"../../../core/utils/window\";\nimport devices from \"../../../core/devices\";\nvar DIALOG_CLASS = \"dx-formdialog\";\nvar FORM_CLASS = \"dx-formdialog-form\";\n\nvar FormDialog = /*#__PURE__*/function () {\n  function FormDialog(editorInstance, popupConfig) {\n    _classCallCheck(this, FormDialog);\n\n    this._editorInstance = editorInstance;\n    this._popupUserConfig = popupConfig;\n\n    this._renderPopup();\n\n    this._attachOptionChangedHandler();\n  }\n\n  _createClass(FormDialog, [{\n    key: \"_renderPopup\",\n    value: function _renderPopup() {\n      var editorInstance = this._editorInstance;\n      var $container = $(\"<div>\").addClass(DIALOG_CLASS).appendTo(editorInstance.$element());\n\n      var popupConfig = this._getPopupConfig();\n\n      return editorInstance._createComponent($container, Popup, popupConfig);\n    }\n  }, {\n    key: \"_attachOptionChangedHandler\",\n    value: function _attachOptionChangedHandler() {\n      var _this = this;\n\n      var _this$_popup;\n\n      null === (_this$_popup = this._popup) || void 0 === _this$_popup ? void 0 : _this$_popup.on(\"optionChanged\", function (_ref) {\n        var name = _ref.name,\n            value = _ref.value;\n\n        if (\"title\" === name) {\n          _this._updateFormLabel(value);\n        }\n      });\n    }\n  }, {\n    key: \"_escKeyHandler\",\n    value: function _escKeyHandler() {\n      this._popup.hide();\n    }\n  }, {\n    key: \"_addEscapeHandler\",\n    value: function _addEscapeHandler(e) {\n      e.component.registerKeyHandler(\"escape\", this._escKeyHandler.bind(this));\n    }\n  }, {\n    key: \"_isSmallScreen\",\n    value: function _isSmallScreen() {\n      var screenFactor = hasWindow() ? getCurrentScreenFactor() : null;\n      return \"phone\" === devices.real().deviceType || \"xs\" === screenFactor;\n    }\n  }, {\n    key: \"_getPopupConfig\",\n    value: function _getPopupConfig() {\n      var _this2 = this;\n\n      return extend({\n        onInitialized: function onInitialized(e) {\n          _this2._popup = e.component;\n\n          _this2._popup.on(\"hiding\", function () {\n            _this2.deferred.reject();\n          });\n\n          _this2._popup.on(\"shown\", function () {\n            _this2._form.focus();\n          });\n        },\n        deferRendering: false,\n        focusStateEnabled: false,\n        showCloseButton: false,\n        wrapperAttr: {\n          class: \"dx-formdialog\"\n        },\n        fullScreen: this._isSmallScreen(),\n        contentTemplate: function contentTemplate(contentElem) {\n          var $formContainer = $(\"<div>\").appendTo(contentElem);\n\n          _this2._renderForm($formContainer, {\n            onEditorEnterKey: function onEditorEnterKey(_ref2) {\n              var component = _ref2.component,\n                  dataField = _ref2.dataField,\n                  event = _ref2.event;\n\n              _this2.hide(component.option(\"formData\"), event);\n            },\n            customizeItem: function customizeItem(item) {\n              if (\"simple\" === item.itemType) {\n                item.editorOptions = extend(true, {}, item.editorOptions, {\n                  onInitialized: _this2._addEscapeHandler.bind(_this2)\n                });\n              }\n            }\n          });\n        },\n        toolbarItems: [{\n          toolbar: \"bottom\",\n          location: \"after\",\n          widget: \"dxButton\",\n          options: {\n            onInitialized: this._addEscapeHandler.bind(this),\n            text: localizationMessage.format(\"OK\"),\n            onClick: function onClick(_ref3) {\n              var event = _ref3.event;\n\n              _this2.hide(_this2._form.option(\"formData\"), event);\n            }\n          }\n        }, {\n          toolbar: \"bottom\",\n          location: \"after\",\n          widget: \"dxButton\",\n          options: {\n            onInitialized: this._addEscapeHandler.bind(this),\n            text: localizationMessage.format(\"Cancel\"),\n            onClick: function onClick() {\n              _this2._popup.hide();\n            }\n          }\n        }]\n      }, this._popupUserConfig);\n    }\n  }, {\n    key: \"_renderForm\",\n    value: function _renderForm($container, options) {\n      $container.addClass(FORM_CLASS);\n      this._form = this._editorInstance._createComponent($container, Form, options);\n\n      this._updateFormLabel();\n    }\n  }, {\n    key: \"_updateFormLabel\",\n    value: function _updateFormLabel(text) {\n      var _this$_form;\n\n      var label = null !== text && void 0 !== text ? text : this.popupOption(\"title\");\n      null === (_this$_form = this._form) || void 0 === _this$_form ? void 0 : _this$_form.$element().attr(\"aria-label\", label);\n    }\n  }, {\n    key: \"show\",\n    value: function show(formUserConfig) {\n      if (this._popup.option(\"visible\")) {\n        return;\n      }\n\n      this.deferred = new Deferred();\n      var formConfig = extend({}, formUserConfig);\n\n      this._form.option(formConfig);\n\n      this._popup.show();\n\n      return this.deferred.promise();\n    }\n  }, {\n    key: \"hide\",\n    value: function hide(formData, event) {\n      this.deferred.resolve(formData, event);\n\n      this._popup.hide();\n    }\n  }, {\n    key: \"popupOption\",\n    value: function popupOption(optionName, optionValue) {\n      return this._popup.option.apply(this._popup, arguments);\n    }\n  }]);\n\n  return FormDialog;\n}();\n\nexport default FormDialog;","map":null,"metadata":{},"sourceType":"module"}