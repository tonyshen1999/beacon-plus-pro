{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/ui/gantt/ui.gantt.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getHeight } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport { compileGetter, compileSetter } from \"../../core/utils/data\";\nimport { extend } from \"../../core/utils/extend\";\nimport { getWindow } from \"../../core/utils/window\";\nimport { isDefined } from \"../../core/utils/type\";\nimport { ModelChangesListener } from \"./ui.gantt.model_changes_listener\";\nimport DataOption from \"./ui.gantt.data.option\";\nimport LoadPanel from \"../load_panel\";\nimport registerComponent from \"../../core/component_registrator\";\nimport SplitterControl from \"../splitter\";\nimport Widget from \"../widget/ui.widget\";\nimport { GanttActionsManager } from \"./ui.gantt.actions\";\nimport { GanttCustomFieldsManager } from \"./ui.gantt.custom_fields\";\nimport { GanttDialog } from \"./ui.gantt.dialogs\";\nimport { GanttExportHelper } from \"./ui.gantt.export_helper\";\nimport { GanttHelper } from \"./ui.gantt.helper\";\nimport { GanttMappingHelper } from \"./ui.gantt.mapping_helper\";\nimport { GanttSizeHelper } from \"./ui.gantt.size_helper\";\nimport { GanttTemplatesManager } from \"./ui.gantt.templates\";\nimport { GanttToolbar, GanttContextMenuBar } from \"./ui.gantt.bars\";\nimport { GanttTreeList } from \"./ui.gantt.treelist\";\nimport { GanttView } from \"./ui.gantt.view\";\nvar window = getWindow();\nvar GANTT_CLASS = \"dx-gantt\";\nvar GANTT_VIEW_CLASS = \"dx-gantt-view\";\nvar GANTT_TREE_LIST_WRAPPER = \"dx-gantt-treelist-wrapper\";\nvar GANTT_TOOLBAR_WRAPPER = \"dx-gantt-toolbar-wrapper\";\nvar GANTT_MAIN_WRAPPER = \"dx-gantt-main-wrapper\";\nvar GANTT_TASKS = \"tasks\";\nvar GANTT_DEPENDENCIES = \"dependencies\";\nvar GANTT_RESOURCES = \"resources\";\nvar GANTT_RESOURCE_ASSIGNMENTS = \"resourceAssignments\";\nvar GANTT_NEW_TASK_CACHE_KEY = \"gantt_new_task_key\";\n\nvar Gantt = /*#__PURE__*/function (_Widget) {\n  _inherits(Gantt, _Widget);\n\n  var _super = _createSuper(Gantt);\n\n  function Gantt() {\n    _classCallCheck(this, Gantt);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Gantt, [{\n    key: \"_init\",\n    value: function _init() {\n      _get(_getPrototypeOf(Gantt.prototype), \"_init\", this).call(this);\n\n      this._initGantt();\n\n      this._isGanttRendered = false;\n\n      this._initHelpers();\n    }\n  }, {\n    key: \"_initGantt\",\n    value: function _initGantt() {\n      this._refreshDataSources();\n    }\n  }, {\n    key: \"_initMarkup\",\n    value: function _initMarkup() {\n      _get(_getPrototypeOf(Gantt.prototype), \"_initMarkup\", this).call(this);\n\n      this.$element().addClass(GANTT_CLASS);\n      this._$toolbarWrapper = $(\"<div>\").addClass(GANTT_TOOLBAR_WRAPPER).appendTo(this.$element());\n      this._$toolbar = $(\"<div>\").appendTo(this._$toolbarWrapper);\n      this._$mainWrapper = $(\"<div>\").addClass(GANTT_MAIN_WRAPPER).appendTo(this.$element());\n      this._$treeListWrapper = $(\"<div>\").addClass(GANTT_TREE_LIST_WRAPPER).appendTo(this._$mainWrapper);\n      this._$treeList = $(\"<div>\").appendTo(this._$treeListWrapper);\n      this._$splitter = $(\"<div>\").appendTo(this._$mainWrapper);\n      this._$ganttView = $(\"<div>\").addClass(GANTT_VIEW_CLASS).appendTo(this._$mainWrapper);\n      this._$dialog = $(\"<div>\").appendTo(this.$element());\n      this._$loadPanel = $(\"<div>\").appendTo(this.$element());\n      this._$contextMenu = $(\"<div>\").appendTo(this.$element());\n    }\n  }, {\n    key: \"_clean\",\n    value: function _clean() {\n      var _this$_ganttView;\n\n      null === (_this$_ganttView = this._ganttView) || void 0 === _this$_ganttView ? void 0 : _this$_ganttView._ganttViewCore.cleanMarkup();\n      delete this._ganttView;\n      delete this._dialogInstance;\n      delete this._loadPanel;\n      delete this._exportHelper;\n\n      _get(_getPrototypeOf(Gantt.prototype), \"_clean\", this).call(this);\n    }\n  }, {\n    key: \"_refresh\",\n    value: function _refresh() {\n      this._isGanttRendered = false;\n\n      _get(_getPrototypeOf(Gantt.prototype), \"_refresh\", this).call(this);\n    }\n  }, {\n    key: \"_dimensionChanged\",\n    value: function _dimensionChanged() {\n      var _this$_ganttView2;\n\n      null === (_this$_ganttView2 = this._ganttView) || void 0 === _this$_ganttView2 ? void 0 : _this$_ganttView2._onDimensionChanged();\n    }\n  }, {\n    key: \"_visibilityChanged\",\n    value: function _visibilityChanged(visible) {\n      if (visible) {\n        this._refreshGantt();\n      }\n    }\n  }, {\n    key: \"_refreshGantt\",\n    value: function _refreshGantt() {\n      this._refreshDataSources();\n\n      this._refresh();\n    }\n  }, {\n    key: \"_refreshDataSources\",\n    value: function _refreshDataSources() {\n      this._refreshDataSource(GANTT_TASKS);\n\n      this._refreshDataSource(GANTT_DEPENDENCIES);\n\n      this._refreshDataSource(GANTT_RESOURCES);\n\n      this._refreshDataSource(GANTT_RESOURCE_ASSIGNMENTS);\n    }\n  }, {\n    key: \"_renderContent\",\n    value: function _renderContent() {\n      this._isMainElementVisible = this.$element().is(\":visible\");\n\n      if (this._isMainElementVisible && !this._isGanttRendered) {\n        this._isGanttRendered = true;\n\n        this._renderBars();\n\n        this._renderTreeList();\n\n        this._renderSplitter();\n      }\n    }\n  }, {\n    key: \"_renderTreeList\",\n    value: function _renderTreeList() {\n      this._ganttTreeList = new GanttTreeList(this);\n      this._treeList = this._ganttTreeList.getTreeList();\n\n      this._ganttTreeList.onAfterTreeListCreate();\n    }\n  }, {\n    key: \"_renderSplitter\",\n    value: function _renderSplitter() {\n      var _this = this;\n\n      this._splitter = this._createComponent(this._$splitter, SplitterControl, {\n        container: this.$element(),\n        leftElement: this._$treeListWrapper,\n        rightElement: this._$ganttView,\n        onApplyPanelSize: function onApplyPanelSize(e) {\n          _this._sizeHelper.onApplyPanelSize(e);\n        }\n      });\n\n      this._splitter.option(\"initialLeftPanelWidth\", this.option(\"taskListWidth\"));\n    }\n  }, {\n    key: \"_renderBars\",\n    value: function _renderBars() {\n      this._bars = [];\n      this._toolbar = new GanttToolbar(this._$toolbar, this);\n\n      this._updateToolbarContent();\n\n      this._bars.push(this._toolbar);\n\n      this._contextMenuBar = new GanttContextMenuBar(this._$contextMenu, this);\n\n      this._updateContextMenu();\n\n      this._bars.push(this._contextMenuBar);\n    }\n  }, {\n    key: \"_initHelpers\",\n    value: function _initHelpers() {\n      this._mappingHelper = new GanttMappingHelper(this);\n      this._customFieldsManager = new GanttCustomFieldsManager(this);\n      this._actionsManager = new GanttActionsManager(this);\n      this._ganttTemplatesManager = new GanttTemplatesManager(this);\n      this._sizeHelper = new GanttSizeHelper(this);\n    }\n  }, {\n    key: \"_initGanttView\",\n    value: function _initGanttView() {\n      var _this2 = this;\n\n      if (this._ganttView) {\n        return;\n      }\n\n      this._ganttView = this._createComponent(this._$ganttView, GanttView, {\n        width: \"100%\",\n        height: this._ganttTreeList.getOffsetHeight(),\n        rowHeight: this._ganttTreeList.getRowHeight(),\n        headerHeight: this._ganttTreeList.getHeaderHeight(),\n        tasks: this._tasks,\n        dependencies: this._dependencies,\n        resources: this._resources,\n        resourceAssignments: this._resourceAssignments,\n        allowSelection: this.option(\"allowSelection\"),\n        selectedRowKey: this.option(\"selectedRowKey\"),\n        showResources: this.option(\"showResources\"),\n        showDependencies: this.option(\"showDependencies\"),\n        startDateRange: this.option(\"startDateRange\"),\n        endDateRange: this.option(\"endDateRange\"),\n        taskTitlePosition: this.option(\"taskTitlePosition\"),\n        firstDayOfWeek: this.option(\"firstDayOfWeek\"),\n        showRowLines: this.option(\"showRowLines\"),\n        scaleType: this.option(\"scaleType\"),\n        scaleTypeRange: this.option(\"scaleTypeRange\"),\n        editing: this.option(\"editing\"),\n        validation: this.option(\"validation\"),\n        stripLines: this.option(\"stripLines\"),\n        bars: this._bars,\n        mainElement: this.$element(),\n        onSelectionChanged: function onSelectionChanged(e) {\n          _this2._ganttTreeList.selectRows(GanttHelper.getArrayFromOneElement(e.id));\n        },\n        onScroll: function onScroll(e) {\n          _this2._ganttTreeList.scrollBy(e.scrollTop);\n        },\n        onDialogShowing: this._showDialog.bind(this),\n        onPopupMenuShowing: this._showPopupMenu.bind(this),\n        onPopupMenuHiding: this._hidePopupMenu.bind(this),\n        onExpandAll: this._expandAll.bind(this),\n        onCollapseAll: this._collapseAll.bind(this),\n        modelChangesListener: ModelChangesListener.create(this),\n        exportHelper: this._getExportHelper(),\n        taskTooltipContentTemplate: this._ganttTemplatesManager.getTaskTooltipContentTemplateFunc(this.option(\"taskTooltipContentTemplate\")),\n        taskProgressTooltipContentTemplate: this._ganttTemplatesManager.getTaskProgressTooltipContentTemplateFunc(this.option(\"taskProgressTooltipContentTemplate\")),\n        taskTimeTooltipContentTemplate: this._ganttTemplatesManager.getTaskTimeTooltipContentTemplateFunc(this.option(\"taskTimeTooltipContentTemplate\")),\n        taskContentTemplate: this._ganttTemplatesManager.getTaskContentTemplateFunc(this.option(\"taskContentTemplate\")),\n        onTaskClick: function onTaskClick(e) {\n          _this2._ganttTreeList.onRowClick(e);\n        },\n        onTaskDblClick: function onTaskDblClick(e) {\n          _this2._ganttTreeList.onRowDblClick(e);\n        },\n        onAdjustControl: function onAdjustControl() {\n          _this2._sizeHelper.onAdjustControl();\n        }\n      });\n\n      this._fireContentReadyAction();\n    }\n  }, {\n    key: \"_refreshDataSource\",\n    value: function _refreshDataSource(name) {\n      var _this3 = this;\n\n      var dataOption = this[\"_\".concat(name, \"Option\")];\n\n      if (dataOption) {\n        dataOption.dispose();\n        delete this[\"_\".concat(name, \"Option\")];\n        delete this[\"_\".concat(name)];\n      }\n\n      dataOption = new DataOption(name, this._getLoadPanel.bind(this), function (name, data) {\n        _this3._dataSourceChanged(name, data);\n      });\n      dataOption.option(\"dataSource\", this._getSpecificDataSourceOption(name));\n\n      dataOption._refreshDataSource();\n\n      this[\"_\".concat(name, \"Option\")] = dataOption;\n    }\n  }, {\n    key: \"_getSpecificDataSourceOption\",\n    value: function _getSpecificDataSourceOption(name) {\n      var dataSource = this.option(\"\".concat(name, \".dataSource\"));\n\n      if (!dataSource || Array.isArray(dataSource)) {\n        return {\n          store: {\n            type: \"array\",\n            data: null !== dataSource && void 0 !== dataSource ? dataSource : [],\n            key: this.option(\"\".concat(name, \".keyExpr\"))\n          }\n        };\n      }\n\n      return dataSource;\n    }\n  }, {\n    key: \"_dataSourceChanged\",\n    value: function _dataSourceChanged(dataSourceName, data) {\n      var getters = GanttHelper.compileGettersByOption(this.option(dataSourceName));\n\n      var validatedData = this._validateSourceData(dataSourceName, data);\n\n      var mappedData = validatedData.map(GanttHelper.prepareMapHandler(getters));\n      this[\"_\".concat(dataSourceName)] = mappedData;\n\n      this._setGanttViewOption(dataSourceName, mappedData);\n\n      if (dataSourceName === GANTT_TASKS) {\n        var _this$_ganttTreeList, _this$_ganttTreeList2;\n\n        this._tasksRaw = validatedData;\n        var forceUpdate = !(null !== (_this$_ganttTreeList = this._ganttTreeList) && void 0 !== _this$_ganttTreeList && _this$_ganttTreeList.getDataSource()) && !this._ganttView;\n        null === (_this$_ganttTreeList2 = this._ganttTreeList) || void 0 === _this$_ganttTreeList2 ? void 0 : _this$_ganttTreeList2.updateDataSource(validatedData, forceUpdate);\n      }\n    }\n  }, {\n    key: \"_validateSourceData\",\n    value: function _validateSourceData(dataSourceName, data) {\n      return data && dataSourceName === GANTT_TASKS ? this._validateTaskData(data) : data;\n    }\n  }, {\n    key: \"_validateTaskData\",\n    value: function _validateTaskData(data) {\n      var _this$option;\n\n      var keyGetter = compileGetter(this.option(\"\".concat(GANTT_TASKS, \".keyExpr\")));\n      var parentIdGetter = compileGetter(this.option(\"\".concat(GANTT_TASKS, \".parentIdExpr\")));\n      var rootValue = null !== (_this$option = this.option(\"rootValue\")) && void 0 !== _this$option ? _this$option : \"dx_dxt_gantt_default_root_value\";\n      var validationTree = {};\n\n      for (var i = 0; i < data.length; i++) {\n        var item = data[i];\n\n        if (item) {\n          var _validationTree$key;\n\n          var key = keyGetter(item);\n          var isRootTask = key === rootValue;\n          var treeItem = null !== (_validationTree$key = validationTree[key]) && void 0 !== _validationTree$key ? _validationTree$key : validationTree[key] = {\n            key: key,\n            children: []\n          };\n\n          if (!isRootTask) {\n            var _parentIdGetter, _validationTree$paren;\n\n            var parentId = null !== (_parentIdGetter = parentIdGetter(item)) && void 0 !== _parentIdGetter ? _parentIdGetter : rootValue;\n            var parentTreeItem = null !== (_validationTree$paren = validationTree[parentId]) && void 0 !== _validationTree$paren ? _validationTree$paren : validationTree[parentId] = {\n              key: parentId,\n              children: []\n            };\n            parentTreeItem.children.push(treeItem);\n            treeItem.parent = parentTreeItem;\n          }\n        }\n      }\n\n      var validKeys = [rootValue];\n\n      this._appendChildKeys(validationTree[rootValue], validKeys);\n\n      return data.filter(function (item) {\n        return validKeys.indexOf(keyGetter(item)) > -1;\n      });\n    }\n  }, {\n    key: \"_appendChildKeys\",\n    value: function _appendChildKeys(treeItem, keys) {\n      var children = null === treeItem || void 0 === treeItem ? void 0 : treeItem.children;\n\n      for (var i = 0; i < (null === children || void 0 === children ? void 0 : children.length); i++) {\n        var child = children[i];\n        keys.push(child.key);\n\n        this._appendChildKeys(child, keys);\n      }\n    }\n  }, {\n    key: \"_onRecordInserted\",\n    value: function _onRecordInserted(optionName, record, callback) {\n      var _this4 = this;\n\n      var dataOption = this[\"_\".concat(optionName, \"Option\")];\n\n      if (dataOption) {\n        var data = GanttHelper.getStoreObject(this.option(optionName), record);\n        var isTaskInsert = optionName === GANTT_TASKS;\n\n        if (isTaskInsert) {\n          this._customFieldsManager.addCustomFieldsDataFromCache(GANTT_NEW_TASK_CACHE_KEY, data);\n        }\n\n        dataOption.insert(data, function (response) {\n          var keyGetter = compileGetter(_this4.option(\"\".concat(optionName, \".keyExpr\")));\n          var insertedId = keyGetter(response);\n          callback(insertedId);\n\n          dataOption._reloadDataSource().done(function (data) {\n            if (isTaskInsert) {\n              _this4._ganttTreeList.onTaskInserted(insertedId, record.parentId);\n            }\n          });\n\n          _this4._actionsManager.raiseInsertedAction(optionName, data, insertedId);\n        });\n      }\n    }\n  }, {\n    key: \"_onRecordUpdated\",\n    value: function _onRecordUpdated(optionName, key, fieldName, value) {\n      var _this5 = this;\n\n      var dataOption = this[\"_\".concat(optionName, \"Option\")];\n      var isTaskUpdated = optionName === GANTT_TASKS;\n\n      if (dataOption) {\n        var setter = compileSetter(this.option(\"\".concat(optionName, \".\").concat(fieldName, \"Expr\")));\n        var data = {};\n        setter(data, value);\n\n        var hasCustomFieldsData = isTaskUpdated && this._customFieldsManager.cache.hasData(key);\n\n        if (hasCustomFieldsData) {\n          this._customFieldsManager.addCustomFieldsDataFromCache(key, data);\n        }\n\n        dataOption.update(key, data, function () {\n          dataOption._reloadDataSource();\n\n          _this5._actionsManager.raiseUpdatedAction(optionName, data, key);\n        });\n      }\n    }\n  }, {\n    key: \"_onRecordRemoved\",\n    value: function _onRecordRemoved(optionName, key, data) {\n      var _this6 = this;\n\n      var dataOption = this[\"_\".concat(optionName, \"Option\")];\n\n      if (dataOption) {\n        dataOption.remove(key, function () {\n          dataOption._reloadDataSource();\n\n          _this6._actionsManager.raiseDeletedAction(optionName, key, _this6._mappingHelper.convertCoreToMappedData(optionName, data));\n        });\n      }\n    }\n  }, {\n    key: \"_onParentTaskUpdated\",\n    value: function _onParentTaskUpdated(data) {\n      var mappedData = this.getTaskDataByCoreData(data);\n\n      this._actionsManager.raiseUpdatedAction(GANTT_TASKS, mappedData, data.id);\n    }\n  }, {\n    key: \"_onParentTasksRecalculated\",\n    value: function _onParentTasksRecalculated(data) {\n      if (!this.isSieving) {\n        var _this$_ganttTreeList3;\n\n        var setters = GanttHelper.compileSettersByOption(this.option(GANTT_TASKS));\n\n        var treeDataSource = this._customFieldsManager.appendCustomFields(data.map(GanttHelper.prepareSetterMapHandler(setters)));\n\n        null === (_this$_ganttTreeList3 = this._ganttTreeList) || void 0 === _this$_ganttTreeList3 ? void 0 : _this$_ganttTreeList3.setOption(\"dataSource\", treeDataSource);\n      }\n\n      this.isSieving = false;\n    }\n  }, {\n    key: \"_sortAndFilter\",\n    value: function _sortAndFilter() {\n      var columns = this._treeList.getVisibleColumns();\n\n      var sortColumn = columns.filter(function (c) {\n        return 0 === c.sortIndex;\n      })[0];\n      var filterColumn = columns.filter(function (c) {\n        var _c$filterValues;\n\n        return isDefined(c.filterValue) || (null === (_c$filterValues = c.filterValues) || void 0 === _c$filterValues ? void 0 : _c$filterValues.length);\n      })[0];\n      var sieveColumn = sortColumn || filterColumn;\n      var isClearSieving = this.sieveColumn && !sieveColumn;\n\n      if (sieveColumn || isClearSieving) {\n        var sievedItems = this._ganttTreeList.getSievedItems();\n\n        var sieveOptions = {\n          sievedItems: sievedItems,\n          sieveColumn: sieveColumn\n        };\n        this.isSieving = !isClearSieving;\n\n        this._setGanttViewOption(\"sieve\", isClearSieving ? void 0 : sieveOptions);\n      }\n\n      this.sieveColumn = sieveColumn;\n    }\n  }, {\n    key: \"_getToolbarItems\",\n    value: function _getToolbarItems() {\n      var items = this.option(\"toolbar.items\");\n      return items ? items : [];\n    }\n  }, {\n    key: \"_updateToolbarContent\",\n    value: function _updateToolbarContent() {\n      var items = this._getToolbarItems();\n\n      if (items.length) {\n        this._$toolbarWrapper.show();\n      } else {\n        this._$toolbarWrapper.hide();\n      }\n\n      this._toolbar && this._toolbar.createItems(items);\n\n      this._updateBarItemsState();\n    }\n  }, {\n    key: \"_updateContextMenu\",\n    value: function _updateContextMenu() {\n      var contextMenuOptions = this.option(\"contextMenu\");\n\n      if (contextMenuOptions.enabled && this._contextMenuBar) {\n        this._contextMenuBar.createItems(contextMenuOptions.items);\n\n        this._updateBarItemsState();\n      }\n    }\n  }, {\n    key: \"_updateBarItemsState\",\n    value: function _updateBarItemsState() {\n      this._ganttView && this._ganttView.updateBarItemsState();\n    }\n  }, {\n    key: \"_showDialog\",\n    value: function _showDialog(e) {\n      if (!this._dialogInstance) {\n        this._dialogInstance = new GanttDialog(this, this._$dialog);\n      }\n\n      this._dialogInstance.show(e.name, e.parameters, e.callback, e.afterClosing, this.option(\"editing\"));\n    }\n  }, {\n    key: \"_showPopupMenu\",\n    value: function _showPopupMenu(info) {\n      if (this.option(\"contextMenu.enabled\")) {\n        this._ganttView.getBarManager().updateContextMenu();\n\n        var args = {\n          cancel: false,\n          event: info.event,\n          targetType: info.type,\n          targetKey: info.key,\n          items: extend(true, [], this._contextMenuBar._items),\n          data: \"task\" === info.type ? this.getTaskData(info.key) : this.getDependencyData(info.key)\n        };\n\n        this._actionsManager.raiseContextMenuPreparing(args);\n\n        if (!args.cancel) {\n          this._contextMenuBar.show(info.position, args.items);\n        }\n      }\n    }\n  }, {\n    key: \"_hidePopupMenu\",\n    value: function _hidePopupMenu() {\n      this._contextMenuBar.hide();\n    }\n  }, {\n    key: \"_getLoadPanel\",\n    value: function _getLoadPanel() {\n      if (!this._loadPanel) {\n        this._loadPanel = this._createComponent(this._$loadPanel, LoadPanel, {\n          position: {\n            of: this.$element()\n          }\n        });\n      }\n\n      return this._loadPanel;\n    }\n  }, {\n    key: \"_getTaskKeyGetter\",\n    value: function _getTaskKeyGetter() {\n      return compileGetter(this.option(\"\".concat(GANTT_TASKS, \".keyExpr\")));\n    }\n  }, {\n    key: \"_findTaskByKey\",\n    value: function _findTaskByKey(key) {\n      var _this$_tasksOption;\n\n      var tasks = null === (_this$_tasksOption = this._tasksOption) || void 0 === _this$_tasksOption ? void 0 : _this$_tasksOption._getItems();\n\n      var keyGetter = this._getTaskKeyGetter();\n\n      return tasks.find(function (t) {\n        return keyGetter(t) === key;\n      });\n    }\n  }, {\n    key: \"_setGanttViewOption\",\n    value: function _setGanttViewOption(optionName, value) {\n      this._ganttView && this._ganttView.option(optionName, value);\n    }\n  }, {\n    key: \"_getGanttViewOption\",\n    value: function _getGanttViewOption(optionName, value) {\n      var _this$_ganttView3;\n\n      return null === (_this$_ganttView3 = this._ganttView) || void 0 === _this$_ganttView3 ? void 0 : _this$_ganttView3.option(optionName);\n    }\n  }, {\n    key: \"_getExportHelper\",\n    value: function _getExportHelper() {\n      var _this$_exportHelper;\n\n      null !== (_this$_exportHelper = this._exportHelper) && void 0 !== _this$_exportHelper ? _this$_exportHelper : this._exportHelper = new GanttExportHelper(this);\n      return this._exportHelper;\n    }\n  }, {\n    key: \"_executeCoreCommand\",\n    value: function _executeCoreCommand(id) {\n      this._ganttView.executeCoreCommand(id);\n    }\n  }, {\n    key: \"_expandAll\",\n    value: function _expandAll() {\n      this._changeExpandAll(true);\n    }\n  }, {\n    key: \"_collapseAll\",\n    value: function _collapseAll() {\n      this._changeExpandAll(false);\n    }\n  }, {\n    key: \"_onTreeListRowExpandChanged\",\n    value: function _onTreeListRowExpandChanged(e, expanded) {\n      if (!this._lockRowExpandEvent) {\n        this._ganttView.changeTaskExpanded(e.key, expanded);\n\n        this._sizeHelper.adjustHeight();\n      }\n    }\n  }, {\n    key: \"_changeExpandAll\",\n    value: function _changeExpandAll(expanded, level, rowKey) {\n      var _this7 = this;\n\n      var _promise;\n\n      var allExpandableNodes = [];\n      var nodesToExpand = [];\n\n      this._treeList.forEachNode(function (node) {\n        var _node$children;\n\n        if (null !== (_node$children = node.children) && void 0 !== _node$children && _node$children.length) {\n          allExpandableNodes.push(node);\n        }\n      });\n\n      if (rowKey) {\n        var node = this._treeList.getNodeByKey(rowKey);\n\n        GanttHelper.getAllParentNodesKeys(node, nodesToExpand);\n      }\n\n      var promise;\n      this._lockRowExpandEvent = allExpandableNodes.length > 0;\n      var state = allExpandableNodes.reduce(function (previous, node, index) {\n        if (rowKey) {\n          expanded = nodesToExpand.includes(node.key);\n        } else if (level) {\n          expanded = node.level < level;\n        }\n\n        previous[node.key] = expanded;\n        var action = expanded ? _this7._treeList.expandRow : _this7._treeList.collapseRow;\n        var isLast = index === allExpandableNodes.length - 1;\n\n        if (isLast) {\n          promise = action(node.key);\n        } else {\n          action(node.key);\n        }\n\n        return previous;\n      }, {});\n      null === (_promise = promise) || void 0 === _promise ? void 0 : _promise.then(function () {\n        _this7._ganttView._ganttViewCore.applyTasksExpandedState(state);\n\n        _this7._sizeHelper.adjustHeight();\n\n        delete _this7._lockRowExpandEvent;\n      });\n    }\n  }, {\n    key: \"getTaskResources\",\n    value: function getTaskResources(key) {\n      var _this8 = this;\n\n      if (!isDefined(key)) {\n        return null;\n      }\n\n      var coreData = this._ganttView._ganttViewCore.getTaskResources(key);\n\n      return coreData.map(function (r) {\n        return _this8._mappingHelper.convertCoreToMappedData(GANTT_RESOURCES, r);\n      });\n    }\n  }, {\n    key: \"getVisibleTaskKeys\",\n    value: function getVisibleTaskKeys() {\n      return this._ganttView._ganttViewCore.getVisibleTaskKeys();\n    }\n  }, {\n    key: \"getVisibleDependencyKeys\",\n    value: function getVisibleDependencyKeys() {\n      return this._ganttView._ganttViewCore.getVisibleDependencyKeys();\n    }\n  }, {\n    key: \"getVisibleResourceKeys\",\n    value: function getVisibleResourceKeys() {\n      return this._ganttView._ganttViewCore.getVisibleResourceKeys();\n    }\n  }, {\n    key: \"getVisibleResourceAssignmentKeys\",\n    value: function getVisibleResourceAssignmentKeys() {\n      return this._ganttView._ganttViewCore.getVisibleResourceAssignmentKeys();\n    }\n  }, {\n    key: \"getTaskData\",\n    value: function getTaskData(key) {\n      if (!isDefined(key)) {\n        return null;\n      }\n\n      var coreData = this._ganttView._ganttViewCore.getTaskData(key);\n\n      var mappedData = this.getTaskDataByCoreData(coreData);\n      return mappedData;\n    }\n  }, {\n    key: \"getTaskDataByCoreData\",\n    value: function getTaskDataByCoreData(coreData) {\n      var mappedData = coreData ? this._mappingHelper.convertCoreToMappedData(GANTT_TASKS, coreData) : null;\n\n      this._customFieldsManager.addCustomFieldsData(coreData.id, mappedData);\n\n      return mappedData;\n    }\n  }, {\n    key: \"insertTask\",\n    value: function insertTask(data) {\n      this._customFieldsManager.saveCustomFieldsDataToCache(GANTT_NEW_TASK_CACHE_KEY, data);\n\n      this._ganttView._ganttViewCore.insertTask(this._mappingHelper.convertMappedToCoreData(GANTT_TASKS, data));\n    }\n  }, {\n    key: \"deleteTask\",\n    value: function deleteTask(key) {\n      this._ganttView._ganttViewCore.deleteTask(key);\n    }\n  }, {\n    key: \"updateTask\",\n    value: function updateTask(key, data) {\n      var coreTaskData = this._mappingHelper.convertMappedToCoreData(GANTT_TASKS, data);\n\n      var isCustomFieldsUpdateOnly = !Object.keys(coreTaskData).length;\n\n      this._customFieldsManager.saveCustomFieldsDataToCache(key, data, true, isCustomFieldsUpdateOnly);\n\n      if (isCustomFieldsUpdateOnly) {\n        var customFieldsData = this._customFieldsManager._getCustomFieldsData(data);\n\n        if (Object.keys(customFieldsData).length > 0) {\n          this._actionsManager.raiseUpdatingAction(GANTT_TASKS, {\n            cancel: false,\n            key: key,\n            newValues: {}\n          });\n        }\n      } else {\n        this._ganttView._ganttViewCore.updateTask(key, coreTaskData);\n      }\n    }\n  }, {\n    key: \"getDependencyData\",\n    value: function getDependencyData(key) {\n      if (!isDefined(key)) {\n        return null;\n      }\n\n      var coreData = this._ganttView._ganttViewCore.getDependencyData(key);\n\n      return coreData ? this._mappingHelper.convertCoreToMappedData(GANTT_DEPENDENCIES, coreData) : null;\n    }\n  }, {\n    key: \"insertDependency\",\n    value: function insertDependency(data) {\n      this._ganttView._ganttViewCore.insertDependency(this._mappingHelper.convertMappedToCoreData(GANTT_DEPENDENCIES, data));\n    }\n  }, {\n    key: \"deleteDependency\",\n    value: function deleteDependency(key) {\n      this._ganttView._ganttViewCore.deleteDependency(key);\n    }\n  }, {\n    key: \"getResourceData\",\n    value: function getResourceData(key) {\n      var coreData = this._ganttView._ganttViewCore.getResourceData(key);\n\n      return coreData ? this._mappingHelper.convertCoreToMappedData(GANTT_RESOURCES, coreData) : null;\n    }\n  }, {\n    key: \"deleteResource\",\n    value: function deleteResource(key) {\n      this._ganttView._ganttViewCore.deleteResource(key);\n    }\n  }, {\n    key: \"insertResource\",\n    value: function insertResource(data, taskKeys) {\n      this._ganttView._ganttViewCore.insertResource(this._mappingHelper.convertMappedToCoreData(GANTT_RESOURCES, data), taskKeys);\n    }\n  }, {\n    key: \"getResourceAssignmentData\",\n    value: function getResourceAssignmentData(key) {\n      var coreData = this._ganttView._ganttViewCore.getResourceAssignmentData(key);\n\n      return coreData ? this._mappingHelper.convertCoreToMappedData(GANTT_RESOURCE_ASSIGNMENTS, coreData) : null;\n    }\n  }, {\n    key: \"assignResourceToTask\",\n    value: function assignResourceToTask(resourceKey, taskKey) {\n      this._ganttView._ganttViewCore.assignResourceToTask(resourceKey, taskKey);\n    }\n  }, {\n    key: \"unassignResourceFromTask\",\n    value: function unassignResourceFromTask(resourceKey, taskKey) {\n      this._ganttView._ganttViewCore.unassignResourceFromTask(resourceKey, taskKey);\n    }\n  }, {\n    key: \"unassignAllResourcesFromTask\",\n    value: function unassignAllResourcesFromTask(taskKey) {\n      this._ganttView._ganttViewCore.unassignAllResourcesFromTask(taskKey);\n    }\n  }, {\n    key: \"updateDimensions\",\n    value: function updateDimensions() {\n      this._sizeHelper.onAdjustControl();\n    }\n  }, {\n    key: \"scrollToDate\",\n    value: function scrollToDate(date) {\n      this._ganttView._ganttViewCore.scrollToDate(date);\n    }\n  }, {\n    key: \"showResourceManagerDialog\",\n    value: function showResourceManagerDialog() {\n      this._ganttView._ganttViewCore.showResourcesDialog();\n    }\n  }, {\n    key: \"showTaskDetailsDialog\",\n    value: function showTaskDetailsDialog(taskKey) {\n      this._ganttView._ganttViewCore.showTaskDetailsDialog(taskKey);\n    }\n  }, {\n    key: \"exportToPdf\",\n    value: function exportToPdf(options) {\n      return this._exportToPdf(options);\n    }\n  }, {\n    key: \"_exportToPdf\",\n    value: function _exportToPdf(options) {\n      var _this9 = this;\n\n      var _fullOptions$pdfDocum, _fullOptions$docCreat, _window$jspdf$jsPDF, _window$jspdf, _fullOptions$format;\n\n      this._exportHelper.reset();\n\n      var fullOptions = extend({}, options);\n\n      if (fullOptions.createDocumentMethod) {\n        fullOptions.docCreateMethod = fullOptions.createDocumentMethod;\n      }\n\n      null !== (_fullOptions$pdfDocum = fullOptions.pdfDocument) && void 0 !== _fullOptions$pdfDocum ? _fullOptions$pdfDocum : fullOptions.pdfDocument = fullOptions.jsPDFDocument;\n      null !== (_fullOptions$docCreat = fullOptions.docCreateMethod) && void 0 !== _fullOptions$docCreat ? _fullOptions$docCreat : fullOptions.docCreateMethod = null !== (_window$jspdf$jsPDF = null === (_window$jspdf = window.jspdf) || void 0 === _window$jspdf ? void 0 : _window$jspdf.jsPDF) && void 0 !== _window$jspdf$jsPDF ? _window$jspdf$jsPDF : window.jsPDF;\n      null !== (_fullOptions$format = fullOptions.format) && void 0 !== _fullOptions$format ? _fullOptions$format : fullOptions.format = \"a4\";\n      return new Promise(function (resolve) {\n        var _this$_ganttView4;\n\n        var doc = null === (_this$_ganttView4 = _this9._ganttView) || void 0 === _this$_ganttView4 ? void 0 : _this$_ganttView4._ganttViewCore.exportToPdf(fullOptions);\n        resolve(doc);\n      });\n    }\n  }, {\n    key: \"refresh\",\n    value: function refresh() {\n      var _this10 = this;\n\n      return new Promise(function (resolve, reject) {\n        try {\n          _this10._refreshGantt();\n\n          resolve();\n        } catch (e) {\n          reject(e.message);\n        }\n      });\n    }\n  }, {\n    key: \"expandAll\",\n    value: function expandAll() {\n      this._expandAll();\n    }\n  }, {\n    key: \"collapseAll\",\n    value: function collapseAll() {\n      this._collapseAll();\n    }\n  }, {\n    key: \"expandAllToLevel\",\n    value: function expandAllToLevel(level) {\n      this._changeExpandAll(false, level);\n    }\n  }, {\n    key: \"expandToTask\",\n    value: function expandToTask(key) {\n      var _node$parent;\n\n      var node = this._treeList.getNodeByKey(key);\n\n      this._changeExpandAll(false, 0, null === node || void 0 === node ? void 0 : null === (_node$parent = node.parent) || void 0 === _node$parent ? void 0 : _node$parent.key);\n    }\n  }, {\n    key: \"collapseTask\",\n    value: function collapseTask(key) {\n      this._treeList.collapseRow(key);\n    }\n  }, {\n    key: \"expandTask\",\n    value: function expandTask(key) {\n      this._treeList.expandRow(key);\n    }\n  }, {\n    key: \"showResources\",\n    value: function showResources(value) {\n      this.option(\"showResources\", value);\n    }\n  }, {\n    key: \"showDependencies\",\n    value: function showDependencies(value) {\n      this.option(\"showDependencies\", value);\n    }\n  }, {\n    key: \"zoomIn\",\n    value: function zoomIn() {\n      this._ganttView._ganttViewCore.zoomIn();\n    }\n  }, {\n    key: \"zoomOut\",\n    value: function zoomOut() {\n      this._ganttView._ganttViewCore.zoomOut();\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function _getDefaultOptions() {\n      return extend(_get(_getPrototypeOf(Gantt.prototype), \"_getDefaultOptions\", this).call(this), GanttHelper.getDefaultOptions());\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function _optionChanged(args) {\n      var _this$_ganttTreeList4, _this$_sizeHelper, _this$_ganttTreeList5, _this$_actionsManager, _this$_actionsManager2, _this$_actionsManager3, _this$_actionsManager4, _this$_actionsManager5, _this$_actionsManager6, _this$_actionsManager7, _this$_actionsManager8, _this$_actionsManager9, _this$_actionsManager10, _this$_actionsManager11, _this$_actionsManager12, _this$_actionsManager13, _this$_actionsManager14, _this$_actionsManager15, _this$_actionsManager16, _this$_actionsManager17, _this$_actionsManager18, _this$_actionsManager19, _this$_actionsManager20, _this$_actionsManager21, _this$_actionsManager22, _this$_actionsManager23, _this$_actionsManager24, _this$_actionsManager25, _this$_actionsManager26, _this$_ganttTreeList6, _this$_ganttTreeList7, _this$_ganttTemplates, _this$_ganttTemplates2, _this$_ganttTemplates3, _this$_ganttTemplates4, _this$_ganttTreeList8, _this$_sizeHelper2, _this$_sizeHelper3, _this$_ganttTreeList9, _this$_ganttTreeList10, _this$_ganttTreeList11;\n\n      switch (args.name) {\n        case \"tasks\":\n          this._refreshDataSource(GANTT_TASKS);\n\n          break;\n\n        case \"dependencies\":\n          this._refreshDataSource(GANTT_DEPENDENCIES);\n\n          break;\n\n        case \"resources\":\n          this._refreshDataSource(GANTT_RESOURCES);\n\n          break;\n\n        case \"resourceAssignments\":\n          this._refreshDataSource(GANTT_RESOURCE_ASSIGNMENTS);\n\n          break;\n\n        case \"columns\":\n          null === (_this$_ganttTreeList4 = this._ganttTreeList) || void 0 === _this$_ganttTreeList4 ? void 0 : _this$_ganttTreeList4.setOption(\"columns\", this._ganttTreeList.getColumns());\n          break;\n\n        case \"taskListWidth\":\n          null === (_this$_sizeHelper = this._sizeHelper) || void 0 === _this$_sizeHelper ? void 0 : _this$_sizeHelper.setInnerElementsWidth();\n          break;\n\n        case \"showResources\":\n          this._setGanttViewOption(\"showResources\", args.value);\n\n          break;\n\n        case \"showDependencies\":\n          this._setGanttViewOption(\"showDependencies\", args.value);\n\n          break;\n\n        case \"taskTitlePosition\":\n          this._setGanttViewOption(\"taskTitlePosition\", args.value);\n\n          break;\n\n        case \"firstDayOfWeek\":\n          this._setGanttViewOption(\"firstDayOfWeek\", args.value);\n\n          break;\n\n        case \"startDateRange\":\n          this._setGanttViewOption(\"startDateRange\", args.value);\n\n          break;\n\n        case \"endDateRange\":\n          this._setGanttViewOption(\"endDateRange\", args.value);\n\n          break;\n\n        case \"selectedRowKey\":\n          null === (_this$_ganttTreeList5 = this._ganttTreeList) || void 0 === _this$_ganttTreeList5 ? void 0 : _this$_ganttTreeList5.selectRows(GanttHelper.getArrayFromOneElement(args.value));\n          break;\n\n        case \"onSelectionChanged\":\n          null === (_this$_actionsManager = this._actionsManager) || void 0 === _this$_actionsManager ? void 0 : _this$_actionsManager.createSelectionChangedAction();\n          break;\n\n        case \"onTaskClick\":\n          null === (_this$_actionsManager2 = this._actionsManager) || void 0 === _this$_actionsManager2 ? void 0 : _this$_actionsManager2.createTaskClickAction();\n          break;\n\n        case \"onTaskDblClick\":\n          null === (_this$_actionsManager3 = this._actionsManager) || void 0 === _this$_actionsManager3 ? void 0 : _this$_actionsManager3.createTaskDblClickAction();\n          break;\n\n        case \"onTaskInserting\":\n          null === (_this$_actionsManager4 = this._actionsManager) || void 0 === _this$_actionsManager4 ? void 0 : _this$_actionsManager4.createTaskInsertingAction();\n          break;\n\n        case \"onTaskInserted\":\n          null === (_this$_actionsManager5 = this._actionsManager) || void 0 === _this$_actionsManager5 ? void 0 : _this$_actionsManager5.createTaskInsertedAction();\n          break;\n\n        case \"onTaskDeleting\":\n          null === (_this$_actionsManager6 = this._actionsManager) || void 0 === _this$_actionsManager6 ? void 0 : _this$_actionsManager6.createTaskDeletingAction();\n          break;\n\n        case \"onTaskDeleted\":\n          null === (_this$_actionsManager7 = this._actionsManager) || void 0 === _this$_actionsManager7 ? void 0 : _this$_actionsManager7.createTaskDeletedAction();\n          break;\n\n        case \"onTaskUpdating\":\n          null === (_this$_actionsManager8 = this._actionsManager) || void 0 === _this$_actionsManager8 ? void 0 : _this$_actionsManager8.createTaskUpdatingAction();\n          break;\n\n        case \"onTaskUpdated\":\n          null === (_this$_actionsManager9 = this._actionsManager) || void 0 === _this$_actionsManager9 ? void 0 : _this$_actionsManager9.createTaskUpdatedAction();\n          break;\n\n        case \"onTaskMoving\":\n          null === (_this$_actionsManager10 = this._actionsManager) || void 0 === _this$_actionsManager10 ? void 0 : _this$_actionsManager10.createTaskMovingAction();\n          break;\n\n        case \"onTaskEditDialogShowing\":\n          null === (_this$_actionsManager11 = this._actionsManager) || void 0 === _this$_actionsManager11 ? void 0 : _this$_actionsManager11.createTaskEditDialogShowingAction();\n          break;\n\n        case \"onResourceManagerDialogShowing\":\n          null === (_this$_actionsManager12 = this._actionsManager) || void 0 === _this$_actionsManager12 ? void 0 : _this$_actionsManager12.createResourceManagerDialogShowingAction();\n          break;\n\n        case \"onDependencyInserting\":\n          null === (_this$_actionsManager13 = this._actionsManager) || void 0 === _this$_actionsManager13 ? void 0 : _this$_actionsManager13.createDependencyInsertingAction();\n          break;\n\n        case \"onDependencyInserted\":\n          null === (_this$_actionsManager14 = this._actionsManager) || void 0 === _this$_actionsManager14 ? void 0 : _this$_actionsManager14.createDependencyInsertedAction();\n          break;\n\n        case \"onDependencyDeleting\":\n          null === (_this$_actionsManager15 = this._actionsManager) || void 0 === _this$_actionsManager15 ? void 0 : _this$_actionsManager15.createDependencyDeletingAction();\n          break;\n\n        case \"onDependencyDeleted\":\n          null === (_this$_actionsManager16 = this._actionsManager) || void 0 === _this$_actionsManager16 ? void 0 : _this$_actionsManager16.createDependencyDeletedAction();\n          break;\n\n        case \"onResourceInserting\":\n          null === (_this$_actionsManager17 = this._actionsManager) || void 0 === _this$_actionsManager17 ? void 0 : _this$_actionsManager17.createResourceInsertingAction();\n          break;\n\n        case \"onResourceInserted\":\n          null === (_this$_actionsManager18 = this._actionsManager) || void 0 === _this$_actionsManager18 ? void 0 : _this$_actionsManager18.createResourceInsertedAction();\n          break;\n\n        case \"onResourceDeleting\":\n          null === (_this$_actionsManager19 = this._actionsManager) || void 0 === _this$_actionsManager19 ? void 0 : _this$_actionsManager19.createResourceDeletingAction();\n          break;\n\n        case \"onResourceDeleted\":\n          null === (_this$_actionsManager20 = this._actionsManager) || void 0 === _this$_actionsManager20 ? void 0 : _this$_actionsManager20.createResourceDeletedAction();\n          break;\n\n        case \"onResourceAssigning\":\n          null === (_this$_actionsManager21 = this._actionsManager) || void 0 === _this$_actionsManager21 ? void 0 : _this$_actionsManager21.createResourceAssigningAction();\n          break;\n\n        case \"onResourceAssigned\":\n          null === (_this$_actionsManager22 = this._actionsManager) || void 0 === _this$_actionsManager22 ? void 0 : _this$_actionsManager22.createResourceAssignedAction();\n          break;\n\n        case \"onResourceUnassigning\":\n          null === (_this$_actionsManager23 = this._actionsManager) || void 0 === _this$_actionsManager23 ? void 0 : _this$_actionsManager23.createResourceUnassigningAction();\n          break;\n\n        case \"onResourceUnassigned\":\n          null === (_this$_actionsManager24 = this._actionsManager) || void 0 === _this$_actionsManager24 ? void 0 : _this$_actionsManager24.createResourceUnassignedAction();\n          break;\n\n        case \"onCustomCommand\":\n          null === (_this$_actionsManager25 = this._actionsManager) || void 0 === _this$_actionsManager25 ? void 0 : _this$_actionsManager25.createCustomCommandAction();\n          break;\n\n        case \"onContextMenuPreparing\":\n          null === (_this$_actionsManager26 = this._actionsManager) || void 0 === _this$_actionsManager26 ? void 0 : _this$_actionsManager26.createContextMenuPreparingAction();\n          break;\n\n        case \"allowSelection\":\n          null === (_this$_ganttTreeList6 = this._ganttTreeList) || void 0 === _this$_ganttTreeList6 ? void 0 : _this$_ganttTreeList6.setOption(\"selection.mode\", GanttHelper.getSelectionMode(args.value));\n\n          this._setGanttViewOption(\"allowSelection\", args.value);\n\n          break;\n\n        case \"showRowLines\":\n          null === (_this$_ganttTreeList7 = this._ganttTreeList) || void 0 === _this$_ganttTreeList7 ? void 0 : _this$_ganttTreeList7.setOption(\"showRowLines\", args.value);\n\n          this._setGanttViewOption(\"showRowLines\", args.value);\n\n          break;\n\n        case \"stripLines\":\n          this._setGanttViewOption(\"stripLines\", args.value);\n\n          break;\n\n        case \"scaleType\":\n          this._setGanttViewOption(\"scaleType\", args.value);\n\n          break;\n\n        case \"scaleTypeRange\":\n          this._setGanttViewOption(\"scaleTypeRange\", this.option(args.name));\n\n          break;\n\n        case \"editing\":\n          this._setGanttViewOption(\"editing\", this.option(args.name));\n\n          break;\n\n        case \"validation\":\n          this._setGanttViewOption(\"validation\", this.option(args.name));\n\n          break;\n\n        case \"toolbar\":\n          this._updateToolbarContent();\n\n          break;\n\n        case \"contextMenu\":\n          this._updateContextMenu();\n\n          break;\n\n        case \"taskTooltipContentTemplate\":\n          this._setGanttViewOption(\"taskTooltipContentTemplate\", null === (_this$_ganttTemplates = this._ganttTemplatesManager) || void 0 === _this$_ganttTemplates ? void 0 : _this$_ganttTemplates.getTaskTooltipContentTemplateFunc(args.value));\n\n          break;\n\n        case \"taskProgressTooltipContentTemplate\":\n          this._setGanttViewOption(\"taskProgressTooltipContentTemplate\", null === (_this$_ganttTemplates2 = this._ganttTemplatesManager) || void 0 === _this$_ganttTemplates2 ? void 0 : _this$_ganttTemplates2.getTaskProgressTooltipContentTemplateFunc(args.value));\n\n          break;\n\n        case \"taskTimeTooltipContentTemplate\":\n          this._setGanttViewOption(\"taskTimeTooltipContentTemplate\", null === (_this$_ganttTemplates3 = this._ganttTemplatesManager) || void 0 === _this$_ganttTemplates3 ? void 0 : _this$_ganttTemplates3.getTaskTimeTooltipContentTemplateFunc(args.value));\n\n          break;\n\n        case \"taskContentTemplate\":\n          this._setGanttViewOption(\"taskContentTemplate\", null === (_this$_ganttTemplates4 = this._ganttTemplatesManager) || void 0 === _this$_ganttTemplates4 ? void 0 : _this$_ganttTemplates4.getTaskContentTemplateFunc(args.value));\n\n          break;\n\n        case \"rootValue\":\n          null === (_this$_ganttTreeList8 = this._ganttTreeList) || void 0 === _this$_ganttTreeList8 ? void 0 : _this$_ganttTreeList8.setOption(\"rootValue\", args.value);\n          break;\n\n        case \"width\":\n          _get(_getPrototypeOf(Gantt.prototype), \"_optionChanged\", this).call(this, args);\n\n          null === (_this$_sizeHelper2 = this._sizeHelper) || void 0 === _this$_sizeHelper2 ? void 0 : _this$_sizeHelper2.updateGanttWidth();\n          break;\n\n        case \"height\":\n          _get(_getPrototypeOf(Gantt.prototype), \"_optionChanged\", this).call(this, args);\n\n          null === (_this$_sizeHelper3 = this._sizeHelper) || void 0 === _this$_sizeHelper3 ? void 0 : _this$_sizeHelper3.setGanttHeight(getHeight(this._$element));\n          break;\n\n        case \"sorting\":\n          null === (_this$_ganttTreeList9 = this._ganttTreeList) || void 0 === _this$_ganttTreeList9 ? void 0 : _this$_ganttTreeList9.setOption(\"sorting\", this.option(args.name));\n          break;\n\n        case \"filterRow\":\n          null === (_this$_ganttTreeList10 = this._ganttTreeList) || void 0 === _this$_ganttTreeList10 ? void 0 : _this$_ganttTreeList10.setOption(\"filterRow\", this.option(args.name));\n          break;\n\n        case \"headerFilter\":\n          null === (_this$_ganttTreeList11 = this._ganttTreeList) || void 0 === _this$_ganttTreeList11 ? void 0 : _this$_ganttTreeList11.setOption(\"headerFilter\", this.option(args.name));\n          break;\n\n        default:\n          _get(_getPrototypeOf(Gantt.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }]);\n\n  return Gantt;\n}(Widget);\n\nregisterComponent(\"dxGantt\", Gantt);\nexport default Gantt;","map":null,"metadata":{},"sourceType":"module"}