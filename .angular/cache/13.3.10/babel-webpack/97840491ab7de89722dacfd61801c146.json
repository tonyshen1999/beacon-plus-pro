{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/ui/gantt/ui.gantt.view.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport Widget from \"../widget/ui.widget\";\nimport { getGanttViewCore } from \"./gantt_importer\";\nimport { TaskAreaContainer } from \"./ui.gantt.task.area.container\";\nimport dateLocalization from \"../../localization/date\";\nimport { isDefined } from \"../../core/utils/type\";\nimport messageLocalization from \"../../localization/message\";\nimport { format } from \"../../core/utils/string\";\nexport var GanttView = /*#__PURE__*/function (_Widget) {\n  _inherits(GanttView, _Widget);\n\n  var _super = _createSuper(GanttView);\n\n  function GanttView() {\n    _classCallCheck(this, GanttView);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(GanttView, [{\n    key: \"_init\",\n    value: function _init() {\n      _get(_getPrototypeOf(GanttView.prototype), \"_init\", this).call(this);\n\n      this._onSelectionChanged = this._createActionByOption(\"onSelectionChanged\");\n      this._onScroll = this._createActionByOption(\"onScroll\");\n      this._onDialogShowing = this._createActionByOption(\"onDialogShowing\");\n      this._onPopupMenuShowing = this._createActionByOption(\"onPopupMenuShowing\");\n      this._onPopupMenuHiding = this._createActionByOption(\"onPopupMenuHiding\");\n      this._expandAll = this._createActionByOption(\"onExpandAll\");\n      this._collapseAll = this._createActionByOption(\"onCollapseAll\");\n      this._taskClick = this._createActionByOption(\"onTaskClick\");\n      this._taskDblClick = this._createActionByOption(\"onTaskDblClick\");\n      this._onAdjustControl = this._createActionByOption(\"onAdjustControl\");\n    }\n  }, {\n    key: \"_initMarkup\",\n    value: function _initMarkup() {\n      var _GanttView = getGanttViewCore();\n\n      this._ganttViewCore = new _GanttView(this.$element().get(0), this, {\n        showResources: this.option(\"showResources\"),\n        showDependencies: this.option(\"showDependencies\"),\n        taskTitlePosition: this._getTaskTitlePosition(this.option(\"taskTitlePosition\")),\n        firstDayOfWeek: this._getFirstDayOfWeek(this.option(\"firstDayOfWeek\")),\n        allowSelectTask: this.option(\"allowSelection\"),\n        startDateRange: this.option(\"startDateRange\"),\n        endDateRange: this.option(\"endDateRange\"),\n        editing: this._parseEditingSettings(this.option(\"editing\")),\n        validation: this.option(\"validation\"),\n        stripLines: {\n          stripLines: this.option(\"stripLines\")\n        },\n        areHorizontalBordersEnabled: this.option(\"showRowLines\"),\n        areAlternateRowsEnabled: false,\n        viewType: this._getViewTypeByScaleType(this.option(\"scaleType\")),\n        viewTypeRange: this._parseViewTypeRangeSettings(this.option(\"scaleTypeRange\")),\n        cultureInfo: this._getCultureInfo(),\n        taskTooltipContentTemplate: this.option(\"taskTooltipContentTemplate\"),\n        taskProgressTooltipContentTemplate: this.option(\"taskProgressTooltipContentTemplate\"),\n        taskTimeTooltipContentTemplate: this.option(\"taskTimeTooltipContentTemplate\"),\n        taskContentTemplate: this.option(\"taskContentTemplate\"),\n        sieve: this.option(\"sieve\")\n      });\n\n      this._selectTask(this.option(\"selectedRowKey\"));\n\n      this.updateBarItemsState();\n    }\n  }, {\n    key: \"_getFirstDayOfWeek\",\n    value: function _getFirstDayOfWeek(value) {\n      return isDefined(value) ? value : dateLocalization.firstDayOfWeekIndex();\n    }\n  }, {\n    key: \"getTaskAreaContainer\",\n    value: function getTaskAreaContainer() {\n      return this._ganttViewCore.getTaskAreaContainer();\n    }\n  }, {\n    key: \"getBarManager\",\n    value: function getBarManager() {\n      return this._ganttViewCore.barManager;\n    }\n  }, {\n    key: \"executeCoreCommand\",\n    value: function executeCoreCommand(id) {\n      var command = this._ganttViewCore.getCommandByKey(id);\n\n      if (command) {\n        command.execute();\n      }\n    }\n  }, {\n    key: \"changeTaskExpanded\",\n    value: function changeTaskExpanded(id, value) {\n      this._ganttViewCore.changeTaskExpanded(id, value);\n    }\n  }, {\n    key: \"updateView\",\n    value: function updateView() {\n      var _this$_ganttViewCore;\n\n      null === (_this$_ganttViewCore = this._ganttViewCore) || void 0 === _this$_ganttViewCore ? void 0 : _this$_ganttViewCore.updateView();\n    }\n  }, {\n    key: \"updateBarItemsState\",\n    value: function updateBarItemsState() {\n      this._ganttViewCore.barManager.updateItemsState([]);\n    }\n  }, {\n    key: \"setWidth\",\n    value: function setWidth(value) {\n      this._ganttViewCore.setWidth(value);\n    }\n  }, {\n    key: \"_onDimensionChanged\",\n    value: function _onDimensionChanged() {\n      this._ganttViewCore.onBrowserWindowResize();\n    }\n  }, {\n    key: \"_selectTask\",\n    value: function _selectTask(id) {\n      this._ganttViewCore.selectTaskById(id);\n    }\n  }, {\n    key: \"_update\",\n    value: function _update(keepExpandState) {\n      var _this$_ganttViewCore2;\n\n      null === (_this$_ganttViewCore2 = this._ganttViewCore) || void 0 === _this$_ganttViewCore2 ? void 0 : _this$_ganttViewCore2.updateWithDataReload(keepExpandState);\n    }\n  }, {\n    key: \"_getCultureInfo\",\n    value: function _getCultureInfo() {\n      return {\n        monthNames: dateLocalization.getMonthNames(\"wide\"),\n        dayNames: dateLocalization.getDayNames(\"wide\"),\n        abbrMonthNames: dateLocalization.getMonthNames(\"abbreviated\"),\n        abbrDayNames: dateLocalization.getDayNames(\"abbreviated\"),\n        quarterNames: this._getQuarterNames(),\n        amText: dateLocalization.getPeriodNames()[0],\n        pmText: dateLocalization.getPeriodNames()[1]\n      };\n    }\n  }, {\n    key: \"_getQuarterNames\",\n    value: function _getQuarterNames() {\n      var quarterFormat = messageLocalization.format(\"dxGantt-quarter\");\n\n      if (!quarterFormat) {\n        return dateLocalization.getQuarterNames();\n      }\n\n      return [format(quarterFormat, 1), format(quarterFormat, 2), format(quarterFormat, 3), format(quarterFormat, 4)];\n    }\n  }, {\n    key: \"_getTaskTitlePosition\",\n    value: function _getTaskTitlePosition(value) {\n      switch (value) {\n        case \"outside\":\n          return 1;\n\n        case \"none\":\n          return 2;\n\n        default:\n          return 0;\n      }\n    }\n  }, {\n    key: \"_getViewTypeByScaleType\",\n    value: function _getViewTypeByScaleType(scaleType) {\n      switch (scaleType) {\n        case \"minutes\":\n          return 0;\n\n        case \"hours\":\n          return 1;\n\n        case \"days\":\n          return 3;\n\n        case \"weeks\":\n          return 4;\n\n        case \"months\":\n          return 5;\n\n        case \"quarters\":\n          return 6;\n\n        case \"years\":\n          return 7;\n\n        default:\n          return;\n      }\n    }\n  }, {\n    key: \"_parseEditingSettings\",\n    value: function _parseEditingSettings(value) {\n      return {\n        enabled: value.enabled,\n        allowDependencyDelete: value.allowDependencyDeleting,\n        allowDependencyInsert: value.allowDependencyAdding,\n        allowTaskDelete: value.allowTaskDeleting,\n        allowTaskInsert: value.allowTaskAdding,\n        allowTaskUpdate: value.allowTaskUpdating,\n        allowResourceDelete: value.allowResourceDeleting,\n        allowResourceInsert: value.allowResourceAdding,\n        allowResourceUpdate: value.allowResourceUpdating,\n        allowTaskResourceUpdate: value.allowTaskResourceUpdating\n      };\n    }\n  }, {\n    key: \"_parseViewTypeRangeSettings\",\n    value: function _parseViewTypeRangeSettings(value) {\n      return {\n        min: this._getViewTypeByScaleType(value.min),\n        max: this._getViewTypeByScaleType(value.max)\n      };\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function _optionChanged(args) {\n      switch (args.name) {\n        case \"width\":\n          _get(_getPrototypeOf(GanttView.prototype), \"_optionChanged\", this).call(this, args);\n\n          this._ganttViewCore.setWidth(args.value);\n\n          break;\n\n        case \"height\":\n          this._ganttViewCore.setHeight(args.value);\n\n          break;\n\n        case \"tasks\":\n        case \"dependencies\":\n        case \"resources\":\n        case \"resourceAssignments\":\n          this._sieveOptions = void 0;\n\n          this._update(true);\n\n          break;\n\n        case \"showResources\":\n          this._ganttViewCore.setShowResources(args.value);\n\n          break;\n\n        case \"showDependencies\":\n          this._ganttViewCore.setShowDependencies(args.value);\n\n          break;\n\n        case \"taskTitlePosition\":\n          this._ganttViewCore.setTaskTitlePosition(this._getTaskTitlePosition(args.value));\n\n          break;\n\n        case \"firstDayOfWeek\":\n          this._ganttViewCore.setFirstDayOfWeek(this._getFirstDayOfWeek(args.value));\n\n          break;\n\n        case \"startDateRange\":\n          this._ganttViewCore.setStartDateRange(args.value);\n\n          break;\n\n        case \"endDateRange\":\n          this._ganttViewCore.setEndDateRange(args.value);\n\n          break;\n\n        case \"allowSelection\":\n          this._ganttViewCore.setAllowSelection(args.value);\n\n          break;\n\n        case \"selectedRowKey\":\n          this._selectTask(args.value);\n\n          break;\n\n        case \"editing\":\n          this._ganttViewCore.setEditingSettings(this._parseEditingSettings(args.value));\n\n          break;\n\n        case \"validation\":\n          this._ganttViewCore.setValidationSettings(args.value);\n\n          this._update(true);\n\n          break;\n\n        case \"showRowLines\":\n          this._ganttViewCore.setRowLinesVisible(args.value);\n\n          break;\n\n        case \"scaleType\":\n          this._ganttViewCore.setViewType(this._getViewTypeByScaleType(args.value));\n\n          break;\n\n        case \"scaleTypeRange\":\n          this._ganttViewCore.setViewTypeRange(this._getViewTypeByScaleType(args.value.min), this._getViewTypeByScaleType(args.value.max));\n\n          break;\n\n        case \"stripLines\":\n          this._ganttViewCore.setStripLines({\n            stripLines: args.value\n          });\n\n          break;\n\n        case \"taskTooltipContentTemplate\":\n          this._ganttViewCore.setTaskTooltipContentTemplate(args.value);\n\n          break;\n\n        case \"taskProgressTooltipContentTemplate\":\n          this._ganttViewCore.setTaskProgressTooltipContentTemplate(args.value);\n\n          break;\n\n        case \"taskTimeTooltipContentTemplate\":\n          this._ganttViewCore.setTaskTimeTooltipContentTemplate(args.value);\n\n          break;\n\n        case \"taskContentTemplate\":\n          this._ganttViewCore.setTaskContentTemplate(args.value);\n\n          break;\n\n        case \"sieve\":\n          this._sortAndFilter(args.value);\n\n          break;\n\n        default:\n          _get(_getPrototypeOf(GanttView.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }, {\n    key: \"bars\",\n    get: function get() {\n      return this.option(\"bars\");\n    }\n  }, {\n    key: \"getRowHeight\",\n    value: function getRowHeight() {\n      return this.option(\"rowHeight\");\n    }\n  }, {\n    key: \"getHeaderHeight\",\n    value: function getHeaderHeight() {\n      return this.option(\"headerHeight\");\n    }\n  }, {\n    key: \"getGanttTasksData\",\n    value: function getGanttTasksData() {\n      var tasks = this.option(\"tasks\");\n      var sieveOptions = this.getSieveOptions();\n\n      if (null !== sieveOptions && void 0 !== sieveOptions && sieveOptions.sievedItems && null !== sieveOptions && void 0 !== sieveOptions && sieveOptions.sieveColumn) {\n        return sieveOptions.sievedItems;\n      }\n\n      return tasks;\n    }\n  }, {\n    key: \"_sortAndFilter\",\n    value: function _sortAndFilter(args) {\n      this._sieveOptions = args;\n\n      this._update(true);\n\n      var selectedRowKey = this.option(\"selectedRowKey\");\n\n      this._selectTask(selectedRowKey);\n    }\n  }, {\n    key: \"getSieveOptions\",\n    value: function getSieveOptions() {\n      return this._sieveOptions;\n    }\n  }, {\n    key: \"getGanttDependenciesData\",\n    value: function getGanttDependenciesData() {\n      return this.option(\"dependencies\");\n    }\n  }, {\n    key: \"getGanttResourcesData\",\n    value: function getGanttResourcesData() {\n      return this.option(\"resources\");\n    }\n  }, {\n    key: \"getGanttResourceAssignmentsData\",\n    value: function getGanttResourceAssignmentsData() {\n      return this.option(\"resourceAssignments\");\n    }\n  }, {\n    key: \"getGanttWorkTimeRules\",\n    value: function getGanttWorkTimeRules() {\n      return null;\n    }\n  }, {\n    key: \"getExternalTaskAreaContainer\",\n    value: function getExternalTaskAreaContainer(element) {\n      if (!this._taskAreaContainer) {\n        this._taskAreaContainer = new TaskAreaContainer(element, this);\n      }\n\n      return this._taskAreaContainer;\n    }\n  }, {\n    key: \"prepareExternalTaskAreaContainer\",\n    value: function prepareExternalTaskAreaContainer(element, info) {\n      if (null !== info && void 0 !== info && info.height) {\n        this._taskAreaContainer._scrollView.option(\"height\", info.height);\n      }\n    }\n  }, {\n    key: \"changeGanttTaskSelection\",\n    value: function changeGanttTaskSelection(id, selected) {\n      this._onSelectionChanged({\n        id: id,\n        selected: selected\n      });\n    }\n  }, {\n    key: \"onGanttScroll\",\n    value: function onGanttScroll(scrollTop) {\n      this._onScroll({\n        scrollTop: scrollTop\n      });\n    }\n  }, {\n    key: \"showDialog\",\n    value: function showDialog(name, parameters, callback, afterClosing) {\n      this._onDialogShowing({\n        name: name,\n        parameters: parameters,\n        callback: callback,\n        afterClosing: afterClosing\n      });\n    }\n  }, {\n    key: \"getModelChangesListener\",\n    value: function getModelChangesListener() {\n      return this.option(\"modelChangesListener\");\n    }\n  }, {\n    key: \"getExportInfo\",\n    value: function getExportInfo() {\n      return this.option(\"exportInfo\");\n    }\n  }, {\n    key: \"showPopupMenu\",\n    value: function showPopupMenu(info) {\n      this._onPopupMenuShowing(info);\n    }\n  }, {\n    key: \"hidePopupMenu\",\n    value: function hidePopupMenu(info) {\n      this._onPopupMenuHiding(info);\n    }\n  }, {\n    key: \"getMainElement\",\n    value: function getMainElement() {\n      return this.option(\"mainElement\").get(0);\n    }\n  }, {\n    key: \"adjustControl\",\n    value: function adjustControl() {\n      this._onAdjustControl();\n    }\n  }, {\n    key: \"getRequireFirstLoadParentAutoCalc\",\n    value: function getRequireFirstLoadParentAutoCalc() {\n      return this.option(\"validation.autoUpdateParentTasks\");\n    }\n  }, {\n    key: \"collapseAll\",\n    value: function collapseAll() {\n      this._collapseAll();\n    }\n  }, {\n    key: \"expandAll\",\n    value: function expandAll() {\n      this._expandAll();\n    }\n  }, {\n    key: \"onTaskClick\",\n    value: function onTaskClick(key, event) {\n      this._taskClick({\n        key: key,\n        event: event\n      });\n\n      return true;\n    }\n  }, {\n    key: \"onTaskDblClick\",\n    value: function onTaskDblClick(key, event) {\n      return this._taskDblClick({\n        key: key,\n        event: event\n      });\n    }\n  }, {\n    key: \"onGanttViewContextMenu\",\n    value: function onGanttViewContextMenu(event, key, type) {\n      return true;\n    }\n  }, {\n    key: \"getFormattedDateText\",\n    value: function getFormattedDateText(date) {\n      var result = \"\";\n\n      if (date) {\n        var datePart = dateLocalization.format(date, \"shortDate\");\n        var timePart = dateLocalization.format(date, \"hh:mm\");\n        result = datePart + \" \" + timePart;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"destroyTemplate\",\n    value: function destroyTemplate(container) {\n      $(container).empty();\n    }\n  }, {\n    key: \"onTaskAreaSizeChanged\",\n    value: function onTaskAreaSizeChanged(info) {\n      var scrollView = this._taskAreaContainer._scrollView;\n\n      if (isDefined(null === info || void 0 === info ? void 0 : info.height)) {\n        var direction = (null === info || void 0 === info ? void 0 : info.height) > this._taskAreaContainer.getHeight() ? \"both\" : \"horizontal\";\n        scrollView.option(\"direction\", direction);\n      }\n    }\n  }, {\n    key: \"getTreeListTableStyle\",\n    value: function getTreeListTableStyle() {\n      return this.callExportHelperMethod(\"getTreeListTableStyle\");\n    }\n  }, {\n    key: \"getTreeListColCount\",\n    value: function getTreeListColCount() {\n      return this.callExportHelperMethod(\"getTreeListColCount\");\n    }\n  }, {\n    key: \"getTreeListHeaderInfo\",\n    value: function getTreeListHeaderInfo(colIndex) {\n      return this.callExportHelperMethod(\"getTreeListHeaderInfo\", colIndex);\n    }\n  }, {\n    key: \"getTreeListCellInfo\",\n    value: function getTreeListCellInfo(rowIndex, colIndex, key) {\n      return this.callExportHelperMethod(\"getTreeListCellInfo\", key, colIndex);\n    }\n  }, {\n    key: \"callExportHelperMethod\",\n    value: function callExportHelperMethod(methodName) {\n      var helper = this.option(\"exportHelper\");\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return helper[methodName].apply(helper, args);\n    }\n  }]);\n\n  return GanttView;\n}(Widget);","map":null,"metadata":{},"sourceType":"module"}