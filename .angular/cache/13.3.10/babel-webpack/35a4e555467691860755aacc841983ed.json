{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/**\r\n * DevExtreme (esm/core/options/option_manager.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { compileGetter, compileSetter, getPathParts } from \"../utils/data\";\nimport { noop } from \"../utils/common\";\nimport { equals } from \"../utils/comparator\";\nimport { extend } from \"../utils/extend\";\nimport { isDefined, isPlainObject } from \"../utils/type\";\nimport { normalizeOptions } from \"./utils\";\nvar cachedGetters = {};\nvar cachedSetters = {};\nexport var OptionManager = /*#__PURE__*/function () {\n  function OptionManager(options, optionsByReference) {\n    _classCallCheck(this, OptionManager);\n\n    this._options = options;\n    this._optionsByReference = optionsByReference;\n    this._changingCallback;\n    this._changedCallback;\n    this._namePreparedCallbacks;\n  }\n\n  _createClass(OptionManager, [{\n    key: \"_setByReference\",\n    value: function _setByReference(options, rulesOptions) {\n      extend(true, options, rulesOptions);\n\n      for (var fieldName in this._optionsByReference) {\n        if (Object.prototype.hasOwnProperty.call(rulesOptions, fieldName)) {\n          options[fieldName] = rulesOptions[fieldName];\n        }\n      }\n    }\n  }, {\n    key: \"_setPreparedValue\",\n    value: function _setPreparedValue(name, value, merge, silent) {\n      var previousValue = this.get(this._options, name, false);\n\n      if (!equals(previousValue, value)) {\n        var path = getPathParts(name);\n        !silent && this._changingCallback(name, previousValue, value);\n        cachedSetters[name] = cachedSetters[name] || compileSetter(name);\n        cachedSetters[name](this._options, value, {\n          functionsAsIs: true,\n          merge: isDefined(merge) ? merge : !this._optionsByReference[name],\n          unwrapObservables: path.length > 1 && !!this._optionsByReference[path[0]]\n        });\n        !silent && this._changedCallback(name, value, previousValue);\n      }\n    }\n  }, {\n    key: \"_prepareRelevantNames\",\n    value: function _prepareRelevantNames(options, name, value, silent) {\n      if (isPlainObject(value)) {\n        for (var valueName in value) {\n          this._prepareRelevantNames(options, \"\".concat(name, \".\").concat(valueName), value[valueName]);\n        }\n      }\n\n      this._namePreparedCallbacks(options, name, value, silent);\n    }\n  }, {\n    key: \"get\",\n    value: function get() {\n      var options = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this._options;\n      var name = arguments.length > 1 ? arguments[1] : void 0;\n      var unwrapObservables = arguments.length > 2 ? arguments[2] : void 0;\n      cachedGetters[name] = cachedGetters[name] || compileGetter(name);\n      return cachedGetters[name](options, {\n        functionsAsIs: true,\n        unwrapObservables: unwrapObservables\n      });\n    }\n  }, {\n    key: \"set\",\n    value: function set(options, value, merge, silent) {\n      options = normalizeOptions(options, value);\n\n      for (var name in options) {\n        this._prepareRelevantNames(options, name, options[name], silent);\n      }\n\n      for (var _name in options) {\n        this._setPreparedValue(_name, options[_name], merge, silent);\n      }\n    }\n  }, {\n    key: \"onRelevantNamesPrepared\",\n    value: function onRelevantNamesPrepared(callBack) {\n      this._namePreparedCallbacks = callBack;\n    }\n  }, {\n    key: \"onChanging\",\n    value: function onChanging(callBack) {\n      this._changingCallback = callBack;\n    }\n  }, {\n    key: \"onChanged\",\n    value: function onChanged(callBack) {\n      this._changedCallback = callBack;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this._changingCallback = noop;\n      this._changedCallback = noop;\n    }\n  }]);\n\n  return OptionManager;\n}();","map":null,"metadata":{},"sourceType":"module"}