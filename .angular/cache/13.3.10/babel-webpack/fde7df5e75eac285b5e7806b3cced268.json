{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/funnel/item.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nvar states = [\"normal\", \"hover\", \"selection\", \"selection\"];\nimport { isDefined } from \"../../core/utils/type\";\n\nfunction parseStyles(color, style, baseStyle) {\n  var border = style.border;\n  var baseBorder = baseStyle.border;\n  var borderVisible = isDefined(border.visible) ? border.visible : baseBorder.visible;\n  var borderWidth = isDefined(border.width) ? border.width : baseBorder.width;\n  return {\n    fill: color,\n    hatching: style.hatching,\n    stroke: border.color || baseBorder.color,\n    \"stroke-width\": borderVisible ? borderWidth : 0\n  };\n}\n\nfunction Item(widget, options) {\n  var data = options.data;\n  this.code = 0;\n  this.widget = widget;\n  this.figure = options.figure;\n  this.argument = data.argument;\n  this.value = data.value;\n  this.data = data.dataItem;\n  this.percent = options.percent;\n  this.id = options.id;\n  this.color = options.color;\n  this.states = {\n    normal: parseStyles(options.color, options.itemOptions, options.itemOptions),\n    hover: parseStyles(options.color, options.itemOptions.hoverStyle, options.itemOptions),\n    selection: parseStyles(options.color, options.itemOptions.selectionStyle, options.itemOptions)\n  };\n}\n\nItem.prototype = {\n  getState: function getState() {\n    return states[this.code];\n  },\n  getNormalStyle: function getNormalStyle() {\n    return this.states.normal;\n  },\n  setHover: function setHover() {\n    this.hover(true);\n  },\n  hover: function hover(state) {\n    if (!this.widget._getOption(\"hoverEnabled\", true) || state === this.isHovered()) {\n      return;\n    }\n\n    this.widget._suspend();\n\n    state && this.widget.clearHover();\n    this.setState(1, state);\n\n    this.widget._eventTrigger(\"hoverChanged\", {\n      item: this\n    });\n\n    this.widget._resume();\n  },\n  setState: function setState(code, state) {\n    if (state) {\n      this.code |= code;\n    } else {\n      this.code &= ~code;\n    }\n\n    this.widget._applyTilesAppearance();\n  },\n  select: function select(state) {\n    var mode = this.widget._getOption(\"selectionMode\", true);\n\n    if (\"none\" === mode || state === this.isSelected()) {\n      return;\n    }\n\n    this.widget._suspend();\n\n    if (state && \"multiple\" !== mode) {\n      this.widget.clearSelection();\n    }\n\n    this.setState(2, state);\n\n    this.widget._eventTrigger(\"selectionChanged\", {\n      item: this\n    });\n\n    this.widget._resume();\n  },\n  showTooltip: function showTooltip(coords) {\n    this.widget._showTooltip(this.id, coords);\n  },\n  getColor: function getColor() {\n    return this.color;\n  },\n  isHovered: function isHovered() {\n    return !!(1 & this.code);\n  },\n  isSelected: function isSelected() {\n    return !!(2 & this.code);\n  }\n};\nexport default Item;","map":null,"metadata":{},"sourceType":"module"}