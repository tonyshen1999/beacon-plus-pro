{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/drop_down_editor/ui.drop_down_editor.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport Guid from \"../../core/guid\";\nimport registerComponent from \"../../core/component_registrator\";\nimport { noop, splitPair } from \"../../core/utils/common\";\nimport { focused } from \"../widget/selectors\";\nimport { each } from \"../../core/utils/iterator\";\nimport { isDefined } from \"../../core/utils/type\";\nimport { extend } from \"../../core/utils/extend\";\nimport { getPublicElement } from \"../../core/element\";\nimport errors from \"../widget/ui.errors\";\nimport animationPosition from \"../../animation/position\";\nimport { getDefaultAlignment } from \"../../core/utils/position\";\nimport DropDownButton from \"./ui.drop_down_button\";\nimport Widget from \"../widget/ui.widget\";\nimport messageLocalization from \"../../localization/message\";\nimport { addNamespace, isCommandKeyPressed } from \"../../events/utils/index\";\nimport TextBox from \"../text_box\";\nimport { name as clickEventName } from \"../../events/click\";\nimport devices from \"../../core/devices\";\nimport { FunctionTemplate } from \"../../core/templates/function_template\";\nimport Popup from \"../popup\";\nimport { hasWindow } from \"../../core/utils/window\";\nimport { getElementWidth, getSizeValue } from \"./utils\";\nimport { locate, move } from \"../../animation/translator\";\nvar DROP_DOWN_EDITOR_CLASS = \"dx-dropdowneditor\";\nvar DROP_DOWN_EDITOR_INPUT_WRAPPER = \"dx-dropdowneditor-input-wrapper\";\nvar DROP_DOWN_EDITOR_BUTTON_ICON = \"dx-dropdowneditor-icon\";\nvar DROP_DOWN_EDITOR_OVERLAY = \"dx-dropdowneditor-overlay\";\nvar DROP_DOWN_EDITOR_OVERLAY_FLIPPED = \"dx-dropdowneditor-overlay-flipped\";\nvar DROP_DOWN_EDITOR_ACTIVE = \"dx-dropdowneditor-active\";\nvar DROP_DOWN_EDITOR_FIELD_CLICKABLE = \"dx-dropdowneditor-field-clickable\";\nvar DROP_DOWN_EDITOR_FIELD_TEMPLATE_WRAPPER = \"dx-dropdowneditor-field-template-wrapper\";\nvar isIOs = \"ios\" === devices.current().platform;\nvar DropDownEditor = TextBox.inherit({\n  _supportedKeys: function _supportedKeys() {\n    return extend({}, this.callBase(), {\n      tab: function tab(e) {\n        if (!this.option(\"opened\")) {\n          return;\n        }\n\n        if (\"instantly\" === this.option(\"applyValueMode\")) {\n          this.close();\n          return;\n        }\n\n        var $focusableElement = e.shiftKey ? this._getLastPopupElement() : this._getFirstPopupElement();\n        $focusableElement && eventsEngine.trigger($focusableElement, \"focus\");\n        e.preventDefault();\n      },\n      escape: function escape(e) {\n        if (this.option(\"opened\")) {\n          e.preventDefault();\n        }\n\n        this.close();\n        return true;\n      },\n      upArrow: function upArrow(e) {\n        if (!isCommandKeyPressed(e)) {\n          e.preventDefault();\n          e.stopPropagation();\n\n          if (e.altKey) {\n            this.close();\n            return false;\n          }\n        }\n\n        return true;\n      },\n      downArrow: function downArrow(e) {\n        if (!isCommandKeyPressed(e)) {\n          e.preventDefault();\n          e.stopPropagation();\n\n          if (e.altKey) {\n            this._validatedOpening();\n\n            return false;\n          }\n        }\n\n        return true;\n      },\n      enter: function enter(e) {\n        if (this.option(\"opened\")) {\n          e.preventDefault();\n\n          this._valueChangeEventHandler(e);\n        }\n\n        return true;\n      }\n    });\n  },\n  _getDefaultButtons: function _getDefaultButtons() {\n    return this.callBase().concat([{\n      name: \"dropDown\",\n      Ctor: DropDownButton\n    }]);\n  },\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      value: null,\n      onOpened: null,\n      onClosed: null,\n      opened: false,\n      acceptCustomValue: true,\n      applyValueMode: \"instantly\",\n      deferRendering: true,\n      activeStateEnabled: true,\n      dropDownButtonTemplate: \"dropDownButton\",\n      fieldTemplate: null,\n      openOnFieldClick: false,\n      showDropDownButton: true,\n      buttons: void 0,\n      dropDownOptions: {\n        showTitle: false\n      },\n      popupPosition: this._getDefaultPopupPosition(),\n      onPopupInitialized: null,\n      applyButtonText: messageLocalization.format(\"OK\"),\n      cancelButtonText: messageLocalization.format(\"Cancel\"),\n      buttonsLocation: \"default\",\n      useHiddenSubmitElement: false\n    });\n  },\n  _useTemplates: function _useTemplates() {\n    return true;\n  },\n  _getDefaultPopupPosition: function _getDefaultPopupPosition(isRtlEnabled) {\n    var position = getDefaultAlignment(isRtlEnabled);\n    return {\n      offset: {\n        h: 0,\n        v: -1\n      },\n      my: position + \" top\",\n      at: position + \" bottom\",\n      collision: \"flip flip\"\n    };\n  },\n  _defaultOptionsRules: function _defaultOptionsRules() {\n    return this.callBase().concat([{\n      device: function device(_device) {\n        var isGeneric = \"generic\" === _device.platform;\n        return isGeneric;\n      },\n      options: {\n        popupPosition: {\n          offset: {\n            v: 0\n          }\n        }\n      }\n    }]);\n  },\n  _inputWrapper: function _inputWrapper() {\n    return this.$element().find(\".\" + DROP_DOWN_EDITOR_INPUT_WRAPPER).first();\n  },\n  _init: function _init() {\n    this.callBase();\n\n    this._initVisibilityActions();\n\n    this._initPopupInitializedAction();\n\n    this._updatePopupPosition(this.option(\"rtlEnabled\"));\n\n    this._options.cache(\"dropDownOptions\", this.option(\"dropDownOptions\"));\n  },\n  _updatePopupPosition: function _updatePopupPosition(isRtlEnabled) {\n    var _this$_getDefaultPopu = this._getDefaultPopupPosition(isRtlEnabled),\n        my = _this$_getDefaultPopu.my,\n        at = _this$_getDefaultPopu.at;\n\n    var currentPosition = this.option(\"popupPosition\");\n    this.option(\"popupPosition\", extend({}, currentPosition, {\n      my: my,\n      at: at\n    }));\n  },\n  _initVisibilityActions: function _initVisibilityActions() {\n    this._openAction = this._createActionByOption(\"onOpened\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n    this._closeAction = this._createActionByOption(\"onClosed\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n  },\n  _initPopupInitializedAction: function _initPopupInitializedAction() {\n    this._popupInitializedAction = this._createActionByOption(\"onPopupInitialized\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n  },\n  _initMarkup: function _initMarkup() {\n    this._renderSubmitElement();\n\n    this.callBase();\n    this.$element().addClass(DROP_DOWN_EDITOR_CLASS);\n    this.setAria(\"role\", \"combobox\");\n  },\n  _render: function _render() {\n    this.callBase();\n\n    this._renderOpenHandler();\n\n    this._attachFocusOutHandler();\n\n    this._renderOpenedState();\n  },\n  _renderContentImpl: function _renderContentImpl() {\n    if (!this.option(\"deferRendering\")) {\n      this._createPopup();\n    }\n  },\n  _renderInput: function _renderInput() {\n    this.callBase();\n\n    this._wrapInput();\n\n    this._setDefaultAria();\n  },\n  _wrapInput: function _wrapInput() {\n    this._$container = this.$element().wrapInner($(\"<div>\").addClass(DROP_DOWN_EDITOR_INPUT_WRAPPER)).children().eq(0);\n  },\n  _setDefaultAria: function _setDefaultAria() {\n    this.setAria({\n      haspopup: \"true\",\n      autocomplete: \"list\"\n    });\n  },\n  _readOnlyPropValue: function _readOnlyPropValue() {\n    return !this._isEditable() || this.callBase();\n  },\n  _cleanFocusState: function _cleanFocusState() {\n    this.callBase();\n\n    if (this.option(\"fieldTemplate\")) {\n      this._detachFocusEvents();\n    }\n  },\n  _getFieldTemplate: function _getFieldTemplate() {\n    return this.option(\"fieldTemplate\") && this._getTemplateByOption(\"fieldTemplate\");\n  },\n  _renderMask: function _renderMask() {\n    if (this.option(\"fieldTemplate\")) {\n      return;\n    }\n\n    this.callBase();\n  },\n  _renderField: function _renderField() {\n    var fieldTemplate = this._getFieldTemplate();\n\n    fieldTemplate && this._renderTemplatedField(fieldTemplate, this._fieldRenderData());\n  },\n  _renderPlaceholder: function _renderPlaceholder() {\n    var hasFieldTemplate = !!this._getFieldTemplate();\n\n    if (!hasFieldTemplate) {\n      this.callBase();\n    }\n  },\n  _renderValue: function _renderValue() {\n    if (this.option(\"useHiddenSubmitElement\")) {\n      this._setSubmitValue();\n    }\n\n    var promise = this.callBase();\n    promise.always(this._renderField.bind(this));\n  },\n  _renderTemplatedField: function _renderTemplatedField(fieldTemplate, data) {\n    var _this = this;\n\n    var isFocused = focused(this._input());\n    var $container = this._$container;\n\n    this._detachKeyboardEvents();\n\n    this._refreshButtonsContainer();\n\n    this._detachWrapperContent();\n\n    this._detachFocusEvents();\n\n    $container.empty();\n    var $templateWrapper = $(\"<div>\").addClass(DROP_DOWN_EDITOR_FIELD_TEMPLATE_WRAPPER).appendTo($container);\n    fieldTemplate.render({\n      model: data,\n      container: getPublicElement($templateWrapper),\n      onRendered: function onRendered() {\n        var $input = _this._input();\n\n        if (!$input.length) {\n          throw errors.Error(\"E1010\");\n        }\n\n        _this._integrateInput();\n\n        isFocused && eventsEngine.trigger($input, \"focus\");\n      }\n    });\n\n    this._attachWrapperContent($container);\n  },\n  _detachWrapperContent: function _detachWrapperContent() {\n    var _this$_$submitElement, _this$_$beforeButtons, _this$_$afterButtonsC;\n\n    var useHiddenSubmitElement = this.option(\"useHiddenSubmitElement\");\n    useHiddenSubmitElement && (null === (_this$_$submitElement = this._$submitElement) || void 0 === _this$_$submitElement ? void 0 : _this$_$submitElement.detach());\n    var beforeButtonsContainerParent = null === (_this$_$beforeButtons = this._$beforeButtonsContainer) || void 0 === _this$_$beforeButtons ? void 0 : _this$_$beforeButtons[0].parentNode;\n    var afterButtonsContainerParent = null === (_this$_$afterButtonsC = this._$afterButtonsContainer) || void 0 === _this$_$afterButtonsC ? void 0 : _this$_$afterButtonsC[0].parentNode;\n    null === beforeButtonsContainerParent || void 0 === beforeButtonsContainerParent ? void 0 : beforeButtonsContainerParent.removeChild(this._$beforeButtonsContainer[0]);\n    null === afterButtonsContainerParent || void 0 === afterButtonsContainerParent ? void 0 : afterButtonsContainerParent.removeChild(this._$afterButtonsContainer[0]);\n  },\n  _attachWrapperContent: function _attachWrapperContent($container) {\n    var _this$_$submitElement2;\n\n    var useHiddenSubmitElement = this.option(\"useHiddenSubmitElement\");\n    $container.prepend(this._$beforeButtonsContainer);\n    useHiddenSubmitElement && (null === (_this$_$submitElement2 = this._$submitElement) || void 0 === _this$_$submitElement2 ? void 0 : _this$_$submitElement2.appendTo($container));\n    $container.append(this._$afterButtonsContainer);\n  },\n  _refreshButtonsContainer: function _refreshButtonsContainer() {\n    this._$buttonsContainer = this.$element().children().eq(0);\n  },\n  _integrateInput: function _integrateInput() {\n    this._renderFocusState();\n\n    this._refreshValueChangeEvent();\n\n    this._refreshEvents();\n\n    this._refreshEmptinessEvent();\n  },\n  _refreshEmptinessEvent: function _refreshEmptinessEvent() {\n    eventsEngine.off(this._input(), \"input blur\", this._toggleEmptinessEventHandler);\n\n    this._renderEmptinessEvent();\n  },\n  _fieldRenderData: function _fieldRenderData() {\n    return this.option(\"value\");\n  },\n  _initTemplates: function _initTemplates() {\n    this._templateManager.addDefaultTemplates({\n      dropDownButton: new FunctionTemplate(function (options) {\n        var $icon = $(\"<div>\").addClass(DROP_DOWN_EDITOR_BUTTON_ICON);\n        $(options.container).append($icon);\n      })\n    });\n\n    this.callBase();\n  },\n  _renderOpenHandler: function _renderOpenHandler() {\n    var $inputWrapper = this._inputWrapper();\n\n    var eventName = addNamespace(clickEventName, this.NAME);\n    var openOnFieldClick = this.option(\"openOnFieldClick\");\n    eventsEngine.off($inputWrapper, eventName);\n    eventsEngine.on($inputWrapper, eventName, this._getInputClickHandler(openOnFieldClick));\n    this.$element().toggleClass(DROP_DOWN_EDITOR_FIELD_CLICKABLE, openOnFieldClick);\n\n    if (openOnFieldClick) {\n      this._openOnFieldClickAction = this._createAction(this._openHandler.bind(this));\n    }\n  },\n  _attachFocusOutHandler: function _attachFocusOutHandler() {\n    var _this2 = this;\n\n    if (isIOs) {\n      this._detachFocusOutEvents();\n\n      eventsEngine.on(this._inputWrapper(), addNamespace(\"focusout\", this.NAME), function (event) {\n        var newTarget = event.relatedTarget;\n        var popupWrapper = _this2.content ? $(_this2.content()).closest(\".\" + DROP_DOWN_EDITOR_OVERLAY) : _this2._$popup;\n\n        if (newTarget && _this2.option(\"opened\")) {\n          var isNewTargetOutside = 0 === $(newTarget).closest(\".\" + DROP_DOWN_EDITOR_OVERLAY, popupWrapper).length;\n\n          if (isNewTargetOutside) {\n            _this2.close();\n          }\n        }\n      });\n    }\n  },\n  _detachFocusOutEvents: function _detachFocusOutEvents() {\n    isIOs && eventsEngine.off(this._inputWrapper(), addNamespace(\"focusout\", this.NAME));\n  },\n  _getInputClickHandler: function _getInputClickHandler(openOnFieldClick) {\n    var _this3 = this;\n\n    return openOnFieldClick ? function (e) {\n      _this3._executeOpenAction(e);\n    } : function (e) {\n      _this3._focusInput();\n    };\n  },\n  _openHandler: function _openHandler() {\n    this._toggleOpenState();\n  },\n  _executeOpenAction: function _executeOpenAction(e) {\n    this._openOnFieldClickAction({\n      event: e\n    });\n  },\n  _keyboardEventBindingTarget: function _keyboardEventBindingTarget() {\n    return this._input();\n  },\n  _focusInput: function _focusInput() {\n    if (this.option(\"disabled\")) {\n      return false;\n    }\n\n    if (this.option(\"focusStateEnabled\") && !focused(this._input())) {\n      this._resetCaretPosition();\n\n      eventsEngine.trigger(this._input(), \"focus\");\n    }\n\n    return true;\n  },\n  _resetCaretPosition: function _resetCaretPosition() {\n    var ignoreEditable = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : false;\n\n    var inputElement = this._input().get(0);\n\n    if (inputElement) {\n      var value = inputElement.value;\n      var caretPosition = isDefined(value) && (ignoreEditable || this._isEditable()) ? value.length : 0;\n\n      this._caret({\n        start: caretPosition,\n        end: caretPosition\n      }, true);\n    }\n  },\n  _isEditable: function _isEditable() {\n    return this.option(\"acceptCustomValue\");\n  },\n  _toggleOpenState: function _toggleOpenState(isVisible) {\n    if (!this._focusInput()) {\n      return;\n    }\n\n    if (!this.option(\"readOnly\")) {\n      isVisible = arguments.length ? isVisible : !this.option(\"opened\");\n      this.option(\"opened\", isVisible);\n    }\n  },\n  _renderOpenedState: function _renderOpenedState() {\n    var opened = this.option(\"opened\");\n\n    if (opened) {\n      this._createPopup();\n    }\n\n    this.$element().toggleClass(DROP_DOWN_EDITOR_ACTIVE, opened);\n\n    this._setPopupOption(\"visible\", opened);\n\n    this.setAria({\n      expanded: opened\n    });\n    this.setAria(\"owns\", opened ? this._popupContentId : void 0, this.$element());\n  },\n  _createPopup: function _createPopup() {\n    if (this._$popup) {\n      return;\n    }\n\n    this._$popup = $(\"<div>\").addClass(DROP_DOWN_EDITOR_OVERLAY).appendTo(this.$element());\n\n    this._renderPopup();\n\n    this._renderPopupContent();\n  },\n  _renderPopupContent: noop,\n  _renderPopup: function _renderPopup() {\n    var popupConfig = extend(this._popupConfig(), this._options.cache(\"dropDownOptions\"));\n    this._popup = this._createComponent(this._$popup, Popup, popupConfig);\n\n    this._popup.on({\n      showing: this._popupShowingHandler.bind(this),\n      shown: this._popupShownHandler.bind(this),\n      hiding: this._popupHidingHandler.bind(this),\n      hidden: this._popupHiddenHandler.bind(this),\n      contentReady: this._contentReadyHandler.bind(this)\n    });\n\n    this._contentReadyHandler();\n\n    this._setPopupContentId(this._popup.$content());\n\n    this._bindInnerWidgetOptions(this._popup, \"dropDownOptions\");\n  },\n  _setPopupContentId: function _setPopupContentId($popupContent) {\n    this._popupContentId = \"dx-\" + new Guid();\n    this.setAria(\"id\", this._popupContentId, $popupContent);\n  },\n  _contentReadyHandler: noop,\n  _popupConfig: function _popupConfig() {\n    var _this4 = this;\n\n    return {\n      onInitialized: this._popupInitializedHandler(),\n      position: extend(this.option(\"popupPosition\"), {\n        of: this.$element()\n      }),\n      showTitle: this.option(\"dropDownOptions.showTitle\"),\n      _ignoreFunctionValueDeprecation: true,\n      width: function width() {\n        return getElementWidth(_this4.$element());\n      },\n      height: \"auto\",\n      shading: false,\n      wrapperAttr: {\n        class: DROP_DOWN_EDITOR_OVERLAY\n      },\n      hideOnParentScroll: true,\n      closeOnOutsideClick: this._closeOutsideDropDownHandler.bind(this),\n      animation: {\n        show: {\n          type: \"fade\",\n          duration: 0,\n          from: 0,\n          to: 1\n        },\n        hide: {\n          type: \"fade\",\n          duration: 400,\n          from: 1,\n          to: 0\n        }\n      },\n      deferRendering: false,\n      focusStateEnabled: false,\n      showCloseButton: false,\n      dragEnabled: false,\n      toolbarItems: this._getPopupToolbarItems(),\n      onPositioned: this._popupPositionedHandler.bind(this),\n      fullScreen: false,\n      contentTemplate: null\n    };\n  },\n  _popupInitializedHandler: function _popupInitializedHandler() {\n    var _this5 = this;\n\n    if (!this.option(\"onPopupInitialized\")) {\n      return null;\n    }\n\n    return function (e) {\n      _this5._popupInitializedAction({\n        popup: e.component\n      });\n    };\n  },\n  _dimensionChanged: function _dimensionChanged() {\n    var _this6 = this;\n\n    var popupWidth = getSizeValue(this.option(\"dropDownOptions.width\"));\n\n    if (void 0 === popupWidth) {\n      this._setPopupOption(\"width\", function () {\n        return getElementWidth(_this6.$element());\n      });\n    }\n  },\n  _popupPositionedHandler: function _popupPositionedHandler(e) {\n    e.position && this._popup.$overlayContent().toggleClass(DROP_DOWN_EDITOR_OVERLAY_FLIPPED, e.position.v.flip);\n  },\n  _popupShowingHandler: noop,\n  _popupHidingHandler: function _popupHidingHandler() {\n    this.option(\"opened\", false);\n  },\n  _popupShownHandler: function _popupShownHandler() {\n    var _this$_validationMess;\n\n    this._openAction();\n\n    var $popupOverlayContent = this._popup.$overlayContent();\n\n    var position = locate($popupOverlayContent);\n\n    if (this._label.isVisible() && $popupOverlayContent.hasClass(DROP_DOWN_EDITOR_OVERLAY_FLIPPED)) {\n      var $label = this._label.$element();\n\n      move($popupOverlayContent, {\n        top: position.top - parseInt($label.css(\"fontSize\"))\n      });\n    }\n\n    null === (_this$_validationMess = this._validationMessage) || void 0 === _this$_validationMess ? void 0 : _this$_validationMess.option(\"positionRequest\", this._getValidationMessagePositionRequest());\n  },\n  _popupHiddenHandler: function _popupHiddenHandler() {\n    var _this$_validationMess2;\n\n    this._closeAction();\n\n    null === (_this$_validationMess2 = this._validationMessage) || void 0 === _this$_validationMess2 ? void 0 : _this$_validationMess2.option(\"positionRequest\", this._getValidationMessagePositionRequest());\n  },\n  _getValidationMessagePositionRequest: function _getValidationMessagePositionRequest() {\n    var positionRequest = \"below\";\n\n    if (this._popup && this._popup.option(\"visible\")) {\n      var _animationPosition$se = animationPosition.setup(this.$element()),\n          myTop = _animationPosition$se.top;\n\n      var _animationPosition$se2 = animationPosition.setup(this._popup.$content()),\n          popupTop = _animationPosition$se2.top;\n\n      positionRequest = myTop + this.option(\"popupPosition\").offset.v > popupTop ? \"below\" : \"above\";\n    }\n\n    return positionRequest;\n  },\n  _closeOutsideDropDownHandler: function _closeOutsideDropDownHandler(_ref) {\n    var target = _ref.target;\n    var $target = $(target);\n    var dropDownButton = this.getButton(\"dropDown\");\n    var $dropDownButton = dropDownButton && dropDownButton.$element();\n    var isInputClicked = !!$target.closest(this.$element()).length;\n    var isDropDownButtonClicked = !!$target.closest($dropDownButton).length;\n    var isOutsideClick = !isInputClicked && !isDropDownButtonClicked;\n    return isOutsideClick;\n  },\n  _clean: function _clean() {\n    delete this._openOnFieldClickAction;\n\n    if (this._$popup) {\n      this._$popup.remove();\n\n      delete this._$popup;\n      delete this._popup;\n    }\n\n    this.callBase();\n  },\n  _setPopupOption: function _setPopupOption(optionName, value) {\n    this._setWidgetOption(\"_popup\", arguments);\n  },\n  _validatedOpening: function _validatedOpening() {\n    if (!this.option(\"readOnly\")) {\n      this._toggleOpenState(true);\n    }\n  },\n  _getPopupToolbarItems: function _getPopupToolbarItems() {\n    return \"useButtons\" === this.option(\"applyValueMode\") ? this._popupToolbarItemsConfig() : [];\n  },\n  _getFirstPopupElement: function _getFirstPopupElement() {\n    return this._popup.$wrapper().find(\".dx-popup-done.dx-button\");\n  },\n  _getLastPopupElement: function _getLastPopupElement() {\n    return this._popup.$wrapper().find(\".dx-popup-cancel.dx-button\");\n  },\n  _popupElementTabHandler: function _popupElementTabHandler(e) {\n    var $element = $(e.currentTarget);\n\n    if (e.shiftKey && $element.is(this._getFirstPopupElement()) || !e.shiftKey && $element.is(this._getLastPopupElement())) {\n      eventsEngine.trigger(this._input(), \"focus\");\n      e.preventDefault();\n    }\n  },\n  _popupElementEscHandler: function _popupElementEscHandler() {\n    eventsEngine.trigger(this._input(), \"focus\");\n    this.close();\n  },\n  _popupButtonInitializedHandler: function _popupButtonInitializedHandler(e) {\n    e.component.registerKeyHandler(\"tab\", this._popupElementTabHandler.bind(this));\n    e.component.registerKeyHandler(\"escape\", this._popupElementEscHandler.bind(this));\n  },\n  _popupToolbarItemsConfig: function _popupToolbarItemsConfig() {\n    var buttonsConfig = [{\n      shortcut: \"done\",\n      options: {\n        onClick: this._applyButtonHandler.bind(this),\n        text: this.option(\"applyButtonText\"),\n        onInitialized: this._popupButtonInitializedHandler.bind(this)\n      }\n    }, {\n      shortcut: \"cancel\",\n      options: {\n        onClick: this._cancelButtonHandler.bind(this),\n        text: this.option(\"cancelButtonText\"),\n        onInitialized: this._popupButtonInitializedHandler.bind(this)\n      }\n    }];\n    return this._applyButtonsLocation(buttonsConfig);\n  },\n  _applyButtonsLocation: function _applyButtonsLocation(buttonsConfig) {\n    var buttonsLocation = this.option(\"buttonsLocation\");\n    var resultConfig = buttonsConfig;\n\n    if (\"default\" !== buttonsLocation) {\n      var position = splitPair(buttonsLocation);\n      each(resultConfig, function (_, element) {\n        extend(element, {\n          toolbar: position[0],\n          location: position[1]\n        });\n      });\n    }\n\n    return resultConfig;\n  },\n  _applyButtonHandler: function _applyButtonHandler() {\n    this.close();\n    this.option(\"focusStateEnabled\") && this.focus();\n  },\n  _cancelButtonHandler: function _cancelButtonHandler() {\n    this.close();\n    this.option(\"focusStateEnabled\") && this.focus();\n  },\n  _popupOptionChanged: function _popupOptionChanged(args) {\n    var options = Widget.getOptionsFromContainer(args);\n\n    this._setPopupOption(options);\n\n    var optionsKeys = Object.keys(options);\n\n    if (-1 !== optionsKeys.indexOf(\"width\") || -1 !== optionsKeys.indexOf(\"height\")) {\n      this._dimensionChanged();\n    }\n  },\n  _renderSubmitElement: function _renderSubmitElement() {\n    if (this.option(\"useHiddenSubmitElement\")) {\n      this._$submitElement = $(\"<input>\").attr(\"type\", \"hidden\").appendTo(this.$element());\n    }\n  },\n  _setSubmitValue: function _setSubmitValue() {\n    this._getSubmitElement().val(this.option(\"value\"));\n  },\n  _getSubmitElement: function _getSubmitElement() {\n    if (this.option(\"useHiddenSubmitElement\")) {\n      return this._$submitElement;\n    } else {\n      return this.callBase();\n    }\n  },\n  _dispose: function _dispose() {\n    this._detachFocusOutEvents();\n\n    this.callBase();\n  },\n  _optionChanged: function _optionChanged(args) {\n    var _this$_popup;\n\n    switch (args.name) {\n      case \"width\":\n      case \"height\":\n        this.callBase(args);\n        null === (_this$_popup = this._popup) || void 0 === _this$_popup ? void 0 : _this$_popup.repaint();\n        break;\n\n      case \"opened\":\n        this._renderOpenedState();\n\n        break;\n\n      case \"onOpened\":\n      case \"onClosed\":\n        this._initVisibilityActions();\n\n        break;\n\n      case \"onPopupInitialized\":\n        this._initPopupInitializedAction();\n\n        break;\n\n      case \"fieldTemplate\":\n        if (isDefined(args.value)) {\n          this._renderField();\n        } else {\n          this._invalidate();\n        }\n\n        break;\n\n      case \"acceptCustomValue\":\n      case \"openOnFieldClick\":\n        this._invalidate();\n\n        break;\n\n      case \"dropDownButtonTemplate\":\n      case \"showDropDownButton\":\n        this._updateButtons([\"dropDown\"]);\n\n        break;\n\n      case \"dropDownOptions\":\n        this._popupOptionChanged(args);\n\n        this._options.cache(\"dropDownOptions\", this.option(\"dropDownOptions\"));\n\n        break;\n\n      case \"popupPosition\":\n        break;\n\n      case \"deferRendering\":\n        if (hasWindow()) {\n          this._createPopup();\n        }\n\n        break;\n\n      case \"applyValueMode\":\n      case \"applyButtonText\":\n      case \"cancelButtonText\":\n      case \"buttonsLocation\":\n        this._setPopupOption(\"toolbarItems\", this._getPopupToolbarItems());\n\n        break;\n\n      case \"useHiddenSubmitElement\":\n        if (this._$submitElement) {\n          this._$submitElement.remove();\n\n          this._$submitElement = void 0;\n        }\n\n        this._renderSubmitElement();\n\n        break;\n\n      case \"rtlEnabled\":\n        this._updatePopupPosition(args.value);\n\n        this.callBase(args);\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  open: function open() {\n    this.option(\"opened\", true);\n  },\n  close: function close() {\n    this.option(\"opened\", false);\n  },\n  field: function field() {\n    return getPublicElement(this._input());\n  },\n  content: function content() {\n    return this._popup ? this._popup.content() : null;\n  }\n});\nregisterComponent(\"dxDropDownEditor\", DropDownEditor);\nexport default DropDownEditor;","map":null,"metadata":{},"sourceType":"module"}