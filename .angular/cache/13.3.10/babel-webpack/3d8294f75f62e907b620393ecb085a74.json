{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/series/points/candlestick_point.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { extend as _extend } from \"../../../core/utils/extend\";\nimport symbolPoint from \"./symbol_point\";\nimport barPoint from \"./bar_point\";\nvar _math = Math;\nvar _abs = _math.abs;\nvar _min = _math.min;\nvar _max = _math.max;\nvar _round = _math.round;\nvar DEFAULT_FINANCIAL_TRACKER_MARGIN = 2;\nexport default _extend({}, barPoint, {\n  _getContinuousPoints: function _getContinuousPoints(openCoord, closeCoord) {\n    var x = this.x;\n    var createPoint = this._options.rotated ? function (x, y) {\n      return [y, x];\n    } : function (x, y) {\n      return [x, y];\n    };\n    var width = this.width;\n    var highCoord = this.highY;\n    var max = _abs(highCoord - openCoord) < _abs(highCoord - closeCoord) ? openCoord : closeCoord;\n    var min = max === closeCoord ? openCoord : closeCoord;\n    var points;\n\n    if (min === max) {\n      points = [].concat(createPoint(x, this.highY)).concat(createPoint(x, this.lowY)).concat(createPoint(x, this.closeY)).concat(createPoint(x - width / 2, this.closeY)).concat(createPoint(x + width / 2, this.closeY)).concat(createPoint(x, this.closeY));\n    } else {\n      points = [].concat(createPoint(x, this.highY)).concat(createPoint(x, max)).concat(createPoint(x + width / 2, max)).concat(createPoint(x + width / 2, min)).concat(createPoint(x, min)).concat(createPoint(x, this.lowY)).concat(createPoint(x, min)).concat(createPoint(x - width / 2, min)).concat(createPoint(x - width / 2, max)).concat(createPoint(x, max));\n    }\n\n    return points;\n  },\n  _getCrockPoints: function _getCrockPoints(y) {\n    var x = this.x;\n    var createPoint = this._options.rotated ? function (x, y) {\n      return [y, x];\n    } : function (x, y) {\n      return [x, y];\n    };\n    return [].concat(createPoint(x, this.highY)).concat(createPoint(x, this.lowY)).concat(createPoint(x, y)).concat(createPoint(x - this.width / 2, y)).concat(createPoint(x + this.width / 2, y)).concat(createPoint(x, y));\n  },\n  _getPoints: function _getPoints() {\n    var points;\n    var closeCoord = this.closeY;\n    var openCoord = this.openY;\n\n    if (null !== closeCoord && null !== openCoord) {\n      points = this._getContinuousPoints(openCoord, closeCoord);\n    } else if (openCoord === closeCoord) {\n      points = [this.x, this.highY, this.x, this.lowY];\n    } else {\n      points = this._getCrockPoints(null !== openCoord ? openCoord : closeCoord);\n    }\n\n    return points;\n  },\n  getColor: function getColor() {\n    return this._isReduction ? this._options.reduction.color : this._styles.normal.stroke || this.series.getColor();\n  },\n  _drawMarkerInGroup: function _drawMarkerInGroup(group, attributes, renderer) {\n    this.graphic = renderer.path(this._getPoints(), \"area\").attr({\n      \"stroke-linecap\": \"square\"\n    }).attr(attributes).data({\n      \"chart-data-point\": this\n    }).sharp().append(group);\n  },\n  _fillStyle: function _fillStyle() {\n    var styles = this._options.styles;\n\n    if (this._isReduction && this._isPositive) {\n      this._styles = styles.reductionPositive;\n    } else if (this._isReduction) {\n      this._styles = styles.reduction;\n    } else if (this._isPositive) {\n      this._styles = styles.positive;\n    } else {\n      this._styles = styles;\n    }\n  },\n  _getMinTrackerWidth: function _getMinTrackerWidth() {\n    return 2 + 2 * this._styles.normal[\"stroke-width\"];\n  },\n  correctCoordinates: function correctCoordinates(correctOptions) {\n    var minWidth = this._getMinTrackerWidth();\n\n    var width = correctOptions.width;\n    width = width < minWidth ? minWidth : width > 10 ? 10 : width;\n    this.width = width + width % 2;\n    this.xCorrection = correctOptions.offset;\n  },\n  _getMarkerGroup: function _getMarkerGroup(group) {\n    var markerGroup;\n\n    if (this._isReduction && this._isPositive) {\n      markerGroup = group.reductionPositiveMarkersGroup;\n    } else if (this._isReduction) {\n      markerGroup = group.reductionMarkersGroup;\n    } else if (this._isPositive) {\n      markerGroup = group.defaultPositiveMarkersGroup;\n    } else {\n      markerGroup = group.defaultMarkersGroup;\n    }\n\n    return markerGroup;\n  },\n  _drawMarker: function _drawMarker(renderer, group) {\n    this._drawMarkerInGroup(this._getMarkerGroup(group), this._getStyle(), renderer);\n  },\n  _getSettingsForTracker: function _getSettingsForTracker() {\n    var highY = this.highY;\n    var lowY = this.lowY;\n    var rotated = this._options.rotated;\n    var x;\n    var y;\n    var width;\n    var height;\n\n    if (highY === lowY) {\n      highY = rotated ? highY + DEFAULT_FINANCIAL_TRACKER_MARGIN : highY - DEFAULT_FINANCIAL_TRACKER_MARGIN;\n      lowY = rotated ? lowY - DEFAULT_FINANCIAL_TRACKER_MARGIN : lowY + DEFAULT_FINANCIAL_TRACKER_MARGIN;\n    }\n\n    if (rotated) {\n      x = _min(lowY, highY);\n      y = this.x - this.width / 2;\n      width = _abs(lowY - highY);\n      height = this.width;\n    } else {\n      x = this.x - this.width / 2;\n      y = _min(lowY, highY);\n      width = this.width;\n      height = _abs(lowY - highY);\n    }\n\n    return {\n      x: x,\n      y: y,\n      width: width,\n      height: height\n    };\n  },\n  _getGraphicBBox: function _getGraphicBBox(location) {\n    var rotated = this._options.rotated;\n    var x = this.x;\n    var width = this.width;\n    var lowY = this.lowY;\n    var highY = this.highY;\n\n    if (location) {\n      var valVisibleArea = this.series.getValueAxis().getVisibleArea();\n      highY = this._truncateCoord(highY, valVisibleArea);\n      lowY = this._truncateCoord(lowY, valVisibleArea);\n    }\n\n    var bBox = {\n      x: !rotated ? x - _round(width / 2) : lowY,\n      y: !rotated ? highY : x - _round(width / 2),\n      width: !rotated ? width : highY - lowY,\n      height: !rotated ? lowY - highY : width\n    };\n\n    if (location) {\n      var isTop = \"top\" === location;\n\n      if (!this._options.rotated) {\n        bBox.y = isTop ? bBox.y : bBox.y + bBox.height;\n        bBox.height = 0;\n      } else {\n        bBox.x = isTop ? bBox.x + bBox.width : bBox.x;\n        bBox.width = 0;\n      }\n    }\n\n    return bBox;\n  },\n  getTooltipParams: function getTooltipParams(location) {\n    if (this.graphic) {\n      var minValue = _min(this.lowY, this.highY);\n\n      var maxValue = _max(this.lowY, this.highY);\n\n      var visibleArea = this._getVisibleArea();\n\n      var rotated = this._options.rotated;\n      var minVisible = rotated ? visibleArea.minX : visibleArea.minY;\n      var maxVisible = rotated ? visibleArea.maxX : visibleArea.maxY;\n\n      var min = _max(minVisible, minValue);\n\n      var max = _min(maxVisible, maxValue);\n\n      var centerCoord = this.getCenterCoord();\n\n      if (\"edge\" === location) {\n        centerCoord[rotated ? \"x\" : \"y\"] = rotated ? max : min;\n      }\n\n      centerCoord.offset = 0;\n      return centerCoord;\n    }\n  },\n  getCenterCoord: function getCenterCoord() {\n    if (this.graphic) {\n      var x;\n      var y;\n\n      var minValue = _min(this.lowY, this.highY);\n\n      var maxValue = _max(this.lowY, this.highY);\n\n      var visibleArea = this._getVisibleArea();\n\n      var rotated = this._options.rotated;\n      var minVisible = rotated ? visibleArea.minX : visibleArea.minY;\n      var maxVisible = rotated ? visibleArea.maxX : visibleArea.maxY;\n\n      var min = _max(minVisible, minValue);\n\n      var max = _min(maxVisible, maxValue);\n\n      var center = min + (max - min) / 2;\n\n      if (rotated) {\n        y = this.x;\n        x = center;\n      } else {\n        x = this.x;\n        y = center;\n      }\n\n      return {\n        x: x,\n        y: y\n      };\n    }\n  },\n  hasValue: function hasValue() {\n    return null !== this.highValue && null !== this.lowValue;\n  },\n  hasCoords: function hasCoords() {\n    return null !== this.x && null !== this.lowY && null !== this.highY;\n  },\n  _translate: function _translate() {\n    var rotated = this._options.rotated;\n\n    var valTranslator = this._getValTranslator();\n\n    var x = this._getArgTranslator().translate(this.argument);\n\n    this.vx = this.vy = this.x = null === x ? x : x + (this.xCorrection || 0);\n    this.openY = null !== this.openValue ? valTranslator.translate(this.openValue) : null;\n    this.highY = valTranslator.translate(this.highValue);\n    this.lowY = valTranslator.translate(this.lowValue);\n    this.closeY = null !== this.closeValue ? valTranslator.translate(this.closeValue) : null;\n    var centerValue = _min(this.lowY, this.highY) + _abs(this.lowY - this.highY) / 2;\n\n    this._calculateVisibility(!rotated ? this.x : centerValue, !rotated ? centerValue : this.x);\n  },\n  getCrosshairData: function getCrosshairData(x, y) {\n    var rotated = this._options.rotated;\n    var origY = rotated ? x : y;\n    var yValue;\n    var argument = this.argument;\n    var coords;\n    var coord = \"low\";\n\n    if (_abs(this.lowY - origY) < _abs(this.closeY - origY)) {\n      yValue = this.lowY;\n    } else {\n      yValue = this.closeY;\n      coord = \"close\";\n    }\n\n    if (_abs(yValue - origY) >= _abs(this.openY - origY)) {\n      yValue = this.openY;\n      coord = \"open\";\n    }\n\n    if (_abs(yValue - origY) >= _abs(this.highY - origY)) {\n      yValue = this.highY;\n      coord = \"high\";\n    }\n\n    if (rotated) {\n      coords = {\n        y: this.vy,\n        x: yValue,\n        xValue: this[coord + \"Value\"],\n        yValue: argument\n      };\n    } else {\n      coords = {\n        x: this.vx,\n        y: yValue,\n        xValue: argument,\n        yValue: this[coord + \"Value\"]\n      };\n    }\n\n    coords.axis = this.series.axis;\n    return coords;\n  },\n  _updateData: function _updateData(data) {\n    var label = this._label;\n    var reductionColor = this._options.reduction.color;\n    this.value = this.initialValue = data.reductionValue;\n    this.originalValue = data.value;\n    this.lowValue = this.originalLowValue = data.lowValue;\n    this.highValue = this.originalHighValue = data.highValue;\n    this.openValue = this.originalOpenValue = data.openValue;\n    this.closeValue = this.originalCloseValue = data.closeValue;\n    this._isPositive = data.openValue < data.closeValue;\n    this._isReduction = data.isReduction;\n\n    if (this._isReduction) {\n      label.setColor(reductionColor);\n    }\n  },\n  _updateMarker: function _updateMarker(animationEnabled, style, group) {\n    var graphic = this.graphic;\n    graphic.attr({\n      points: this._getPoints()\n    }).smartAttr(style).sharp();\n    group && graphic.append(this._getMarkerGroup(group));\n  },\n  _getLabelFormatObject: function _getLabelFormatObject() {\n    return {\n      openValue: this.openValue,\n      highValue: this.highValue,\n      lowValue: this.lowValue,\n      closeValue: this.closeValue,\n      reductionValue: this.initialValue,\n      argument: this.initialArgument,\n      value: this.initialValue,\n      seriesName: this.series.name,\n      originalOpenValue: this.originalOpenValue,\n      originalCloseValue: this.originalCloseValue,\n      originalLowValue: this.originalLowValue,\n      originalHighValue: this.originalHighValue,\n      originalArgument: this.originalArgument,\n      point: this\n    };\n  },\n  _getFormatObject: function _getFormatObject(tooltip) {\n    var highValue = tooltip.formatValue(this.highValue);\n    var openValue = tooltip.formatValue(this.openValue);\n    var closeValue = tooltip.formatValue(this.closeValue);\n    var lowValue = tooltip.formatValue(this.lowValue);\n    var symbolMethods = symbolPoint;\n\n    var formatObject = symbolMethods._getFormatObject.call(this, tooltip);\n\n    return _extend({}, formatObject, {\n      valueText: \"h: \" + highValue + (\"\" !== openValue ? \" o: \" + openValue : \"\") + (\"\" !== closeValue ? \" c: \" + closeValue : \"\") + \" l: \" + lowValue,\n      highValueText: highValue,\n      openValueText: openValue,\n      closeValueText: closeValue,\n      lowValueText: lowValue\n    });\n  },\n  getMaxValue: function getMaxValue() {\n    return this.highValue;\n  },\n  getMinValue: function getMinValue() {\n    return this.lowValue;\n  }\n});","map":null,"metadata":{},"sourceType":"module"}