{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport Chart from \"chart.js\";\nimport { PeriodService } from 'src/app/services/period.service';\nimport { ModalDismissReasons, NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { DashboardService } from './dashboard.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/period.service\";\nimport * as i2 from \"@ng-bootstrap/ng-bootstrap\";\nimport * as i3 from \"./dashboard.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/common\";\n\nfunction DashboardComponent_ng_template_16_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r10 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 27)(1, \"h4\", 28);\n    i0.ɵɵtext(2, \"Create/Update Period\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 29);\n    i0.ɵɵlistener(\"click\", function DashboardComponent_ng_template_16_Template_button_click_3_listener() {\n      var restoredCtx = i0.ɵɵrestoreView(_r10);\n      var modal_r3 = restoredCtx.$implicit;\n      return modal_r3.dismiss(\"Cross click\");\n    });\n    i0.ɵɵtext(4, \"X\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(5, \"div\", 30)(6, \"form\", 31, 32);\n    i0.ɵɵlistener(\"ngSubmit\", function DashboardComponent_ng_template_16_Template_form_ngSubmit_6_listener() {\n      i0.ɵɵrestoreView(_r10);\n\n      var _r4 = i0.ɵɵreference(7);\n\n      var ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11.onSubmit(_r4);\n    });\n    i0.ɵɵelementStart(8, \"div\", 33);\n    i0.ɵɵelement(9, \"label\", 34)(10, \"input\", 35, 36);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"div\", 33);\n    i0.ɵɵelement(13, \"label\", 37)(14, \"input\", 38, 36);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"div\", 33);\n    i0.ɵɵelement(17, \"label\", 39)(18, \"input\", 40, 36);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(20, \"div\", 33);\n    i0.ɵɵelement(21, \"label\", 41)(22, \"input\", 42, 36);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(24, \"div\", 33)(25, \"button\");\n    i0.ɵɵtext(26, \"Submit\");\n    i0.ɵɵelementEnd()()()();\n  }\n}\n\nfunction DashboardComponent_tr_80_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"td\");\n    i0.ɵɵelementStart(7, \"td\", 43)(8, \"a\");\n    i0.ɵɵtext(9, \"Revert\");\n    i0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    var v_r12 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(v_r12.version);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(5, 2, v_r12.modify_date));\n  }\n}\n\nexport var DashboardComponent = /*#__PURE__*/(function () {\n  var DashboardComponent = /*#__PURE__*/function () {\n    function DashboardComponent(periodService, modalService, dashboardService) {\n      var _this = this;\n\n      _classCallCheck(this, DashboardComponent);\n\n      this.periodService = periodService;\n      this.modalService = modalService;\n      this.dashboardService = dashboardService;\n      this.clicked = true;\n      this.clicked1 = false;\n      this.clicked2 = false;\n      this.period = \"N/A\";\n      this.versions = [];\n\n      this.createPeriod = function (f) {\n        console.log(f.id);\n\n        _this.dashboardService.createPeriod(f).subscribe(function (data) {// this.scenarios.push(data);\n        }, function (error) {\n          console.log(error);\n        });\n      };\n\n      this.createVersion = function () {\n        _this.dashboardService.newVersion().subscribe(function (data) {});\n\n        _this.ngOnInit();\n      };\n\n      this.pushVersionLog = function () {\n        _this.versions = [];\n\n        _this.dashboardService.getVersionLog().subscribe(function (data) {\n          for (var v in data[\"scenarios\"]) {\n            _this.versions.push(data[\"scenarios\"][v]); // console.log(v)\n            // this.versions.push(v)\n\n          }\n        });\n      };\n    }\n\n    _createClass(DashboardComponent, [{\n      key: \"onSubmit\",\n      value: function onSubmit(f) {\n        this.createPeriod(f.value);\n        this.pullPeriod();\n        this.ngOnInit(); // console.log(\"nice\")\n      }\n    }, {\n      key: \"open\",\n      value: function open(content) {\n        var _this2 = this;\n\n        this.modalService.open(content, {\n          ariaLabelledBy: 'modal-basic-title'\n        }).result.then(function (result) {\n          _this2.closeResult = \"Closed with: \".concat(result);\n        }, function (reason) {\n          _this2.closeResult = \"Dismissed \".concat(_this2.getDismissReason(reason));\n        });\n      }\n    }, {\n      key: \"getDismissReason\",\n      value: function getDismissReason(reason) {\n        if (reason === ModalDismissReasons.ESC) {\n          return 'by pressing ESC';\n        } else if (reason === ModalDismissReasons.BACKDROP_CLICK) {\n          return 'by clicking on a backdrop';\n        } else {\n          return \"with: \".concat(reason);\n        }\n      }\n    }, {\n      key: \"pullPeriod\",\n      value: function pullPeriod() {\n        var _this3 = this;\n\n        this.periodService.pullPeriod().subscribe(function (data) {\n          var period_list = []; // console.log(data)\n\n          var periods = Array.from(Object.keys(data)); // UPDATE THIS TO DISPLAY DATE RANGE AND MOVE TO SERVICE\n\n          for (var _i = 0, _periods = periods; _i < _periods.length; _i++) {\n            var p = _periods[_i];\n\n            for (var name in data[p]) {\n              // console.log(data[p][name])\n              period_list.push(data[p][name]);\n            }\n\n            break;\n          } // console.log(\"hi hi \")\n\n\n          var period_string = period_list[0][\"period\"];\n\n          if (period_list.length > 1) {\n            period_string = period_list[0][\"period\"] + \" - \" + period_list[period_list.length - 1][\"period\"];\n          } // console.log(period_string)\n\n\n          _this3.period = period_string;\n        });\n      }\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this.scnId = Number(sessionStorage.getItem(\"scnID\"));\n        this.scnVersion = Number(sessionStorage.getItem(\"scnVersion\"));\n        this.scnName = sessionStorage.getItem(\"scnName\");\n        this.pullPeriod();\n        this.pushVersionLog();\n        var gradientChartOptionsConfigurationWithTooltipBlue = {\n          maintainAspectRatio: false,\n          legend: {\n            display: false\n          },\n          tooltips: {\n            backgroundColor: \"#f5f5f5\",\n            titleFontColor: \"#333\",\n            bodyFontColor: \"#666\",\n            bodySpacing: 4,\n            xPadding: 12,\n            mode: \"nearest\",\n            intersect: 0,\n            position: \"nearest\"\n          },\n          responsive: true,\n          scales: {\n            yAxes: [{\n              barPercentage: 1.6,\n              gridLines: {\n                drawBorder: false,\n                color: \"rgba(29,140,248,0.0)\",\n                zeroLineColor: \"transparent\"\n              },\n              ticks: {\n                suggestedMin: 60,\n                suggestedMax: 125,\n                padding: 20,\n                fontColor: \"#2380f7\"\n              }\n            }],\n            xAxes: [{\n              barPercentage: 1.6,\n              gridLines: {\n                drawBorder: false,\n                color: \"rgba(29,140,248,0.1)\",\n                zeroLineColor: \"transparent\"\n              },\n              ticks: {\n                padding: 20,\n                fontColor: \"#2380f7\"\n              }\n            }]\n          }\n        };\n        var gradientChartOptionsConfigurationWithTooltipPurple = {\n          maintainAspectRatio: false,\n          legend: {\n            display: false\n          },\n          tooltips: {\n            backgroundColor: \"#f5f5f5\",\n            titleFontColor: \"#333\",\n            bodyFontColor: \"#666\",\n            bodySpacing: 4,\n            xPadding: 12,\n            mode: \"nearest\",\n            intersect: 0,\n            position: \"nearest\"\n          },\n          responsive: true,\n          scales: {\n            yAxes: [{\n              barPercentage: 1.6,\n              gridLines: {\n                drawBorder: false,\n                color: \"rgba(29,140,248,0.0)\",\n                zeroLineColor: \"transparent\"\n              },\n              ticks: {\n                suggestedMin: 60,\n                suggestedMax: 125,\n                padding: 20,\n                fontColor: \"#9a9a9a\"\n              }\n            }],\n            xAxes: [{\n              barPercentage: 1.6,\n              gridLines: {\n                drawBorder: false,\n                color: \"rgba(225,78,202,0.1)\",\n                zeroLineColor: \"transparent\"\n              },\n              ticks: {\n                padding: 20,\n                fontColor: \"#9a9a9a\"\n              }\n            }]\n          }\n        };\n        var gradientChartOptionsConfigurationWithTooltipRed = {\n          maintainAspectRatio: false,\n          legend: {\n            display: false\n          },\n          tooltips: {\n            backgroundColor: \"#f5f5f5\",\n            titleFontColor: \"#333\",\n            bodyFontColor: \"#666\",\n            bodySpacing: 4,\n            xPadding: 12,\n            mode: \"nearest\",\n            intersect: 0,\n            position: \"nearest\"\n          },\n          responsive: true,\n          scales: {\n            yAxes: [{\n              barPercentage: 1.6,\n              gridLines: {\n                drawBorder: false,\n                color: \"rgba(29,140,248,0.0)\",\n                zeroLineColor: \"transparent\"\n              },\n              ticks: {\n                suggestedMin: 60,\n                suggestedMax: 125,\n                padding: 20,\n                fontColor: \"#9a9a9a\"\n              }\n            }],\n            xAxes: [{\n              barPercentage: 1.6,\n              gridLines: {\n                drawBorder: false,\n                color: \"rgba(233,32,16,0.1)\",\n                zeroLineColor: \"transparent\"\n              },\n              ticks: {\n                padding: 20,\n                fontColor: \"#9a9a9a\"\n              }\n            }]\n          }\n        };\n        var gradientChartOptionsConfigurationWithTooltipOrange = {\n          maintainAspectRatio: false,\n          legend: {\n            display: false\n          },\n          tooltips: {\n            backgroundColor: \"#f5f5f5\",\n            titleFontColor: \"#333\",\n            bodyFontColor: \"#666\",\n            bodySpacing: 4,\n            xPadding: 12,\n            mode: \"nearest\",\n            intersect: 0,\n            position: \"nearest\"\n          },\n          responsive: true,\n          scales: {\n            yAxes: [{\n              barPercentage: 1.6,\n              gridLines: {\n                drawBorder: false,\n                color: \"rgba(29,140,248,0.0)\",\n                zeroLineColor: \"transparent\"\n              },\n              ticks: {\n                suggestedMin: 50,\n                suggestedMax: 110,\n                padding: 20,\n                fontColor: \"#ff8a76\"\n              }\n            }],\n            xAxes: [{\n              barPercentage: 1.6,\n              gridLines: {\n                drawBorder: false,\n                color: \"rgba(220,53,69,0.1)\",\n                zeroLineColor: \"transparent\"\n              },\n              ticks: {\n                padding: 20,\n                fontColor: \"#ff8a76\"\n              }\n            }]\n          }\n        };\n        var gradientChartOptionsConfigurationWithTooltipGreen = {\n          maintainAspectRatio: false,\n          legend: {\n            display: false\n          },\n          tooltips: {\n            backgroundColor: \"#f5f5f5\",\n            titleFontColor: \"#333\",\n            bodyFontColor: \"#666\",\n            bodySpacing: 4,\n            xPadding: 12,\n            mode: \"nearest\",\n            intersect: 0,\n            position: \"nearest\"\n          },\n          responsive: true,\n          scales: {\n            yAxes: [{\n              barPercentage: 1.6,\n              gridLines: {\n                drawBorder: false,\n                color: \"rgba(29,140,248,0.0)\",\n                zeroLineColor: \"transparent\"\n              },\n              ticks: {\n                suggestedMin: 50,\n                suggestedMax: 125,\n                padding: 20,\n                fontColor: \"#9e9e9e\"\n              }\n            }],\n            xAxes: [{\n              barPercentage: 1.6,\n              gridLines: {\n                drawBorder: false,\n                color: \"rgba(0,242,195,0.1)\",\n                zeroLineColor: \"transparent\"\n              },\n              ticks: {\n                padding: 20,\n                fontColor: \"#9e9e9e\"\n              }\n            }]\n          }\n        };\n        var gradientBarChartConfiguration = {\n          maintainAspectRatio: false,\n          legend: {\n            display: false\n          },\n          tooltips: {\n            backgroundColor: \"#f5f5f5\",\n            titleFontColor: \"#333\",\n            bodyFontColor: \"#666\",\n            bodySpacing: 4,\n            xPadding: 12,\n            mode: \"nearest\",\n            intersect: 0,\n            position: \"nearest\"\n          },\n          responsive: true,\n          scales: {\n            yAxes: [{\n              gridLines: {\n                drawBorder: false,\n                color: \"rgba(29,140,248,0.1)\",\n                zeroLineColor: \"transparent\"\n              },\n              ticks: {\n                suggestedMin: 60,\n                suggestedMax: 120,\n                padding: 20,\n                fontColor: \"#9e9e9e\"\n              }\n            }],\n            xAxes: [{\n              gridLines: {\n                drawBorder: false,\n                color: \"rgba(29,140,248,0.1)\",\n                zeroLineColor: \"transparent\"\n              },\n              ticks: {\n                padding: 20,\n                fontColor: \"#9e9e9e\"\n              }\n            }]\n          }\n        };\n        this.canvas = document.getElementById(\"chartLineRed\");\n        this.ctx = this.canvas.getContext(\"2d\");\n        var gradientStroke = this.ctx.createLinearGradient(0, 230, 0, 50);\n        gradientStroke.addColorStop(1, \"rgba(233,32,16,0.2)\");\n        gradientStroke.addColorStop(0.4, \"rgba(233,32,16,0.0)\");\n        gradientStroke.addColorStop(0, \"rgba(233,32,16,0)\"); //red colors\n\n        var data = {\n          labels: [\"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"],\n          datasets: [{\n            label: \"Data\",\n            fill: true,\n            backgroundColor: gradientStroke,\n            borderColor: \"#ec250d\",\n            borderWidth: 2,\n            borderDash: [],\n            borderDashOffset: 0.0,\n            pointBackgroundColor: \"#ec250d\",\n            pointBorderColor: \"rgba(255,255,255,0)\",\n            pointHoverBackgroundColor: \"#ec250d\",\n            pointBorderWidth: 20,\n            pointHoverRadius: 4,\n            pointHoverBorderWidth: 15,\n            pointRadius: 4,\n            data: [80, 100, 70, 80, 120, 80]\n          }]\n        };\n        var myChart = new Chart(this.ctx, {\n          type: \"line\",\n          data: data,\n          options: gradientChartOptionsConfigurationWithTooltipRed\n        });\n        this.canvas = document.getElementById(\"chartLineGreen\");\n        this.ctx = this.canvas.getContext(\"2d\");\n        var gradientStroke = this.ctx.createLinearGradient(0, 230, 0, 50);\n        gradientStroke.addColorStop(1, \"rgba(66,134,121,0.15)\");\n        gradientStroke.addColorStop(0.4, \"rgba(66,134,121,0.0)\"); //green colors\n\n        gradientStroke.addColorStop(0, \"rgba(66,134,121,0)\"); //green colors\n\n        var data = {\n          labels: [\"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\"],\n          datasets: [{\n            label: \"My First dataset\",\n            fill: true,\n            backgroundColor: gradientStroke,\n            borderColor: \"#00d6b4\",\n            borderWidth: 2,\n            borderDash: [],\n            borderDashOffset: 0.0,\n            pointBackgroundColor: \"#00d6b4\",\n            pointBorderColor: \"rgba(255,255,255,0)\",\n            pointHoverBackgroundColor: \"#00d6b4\",\n            pointBorderWidth: 20,\n            pointHoverRadius: 4,\n            pointHoverBorderWidth: 15,\n            pointRadius: 4,\n            data: [90, 27, 60, 12, 80]\n          }]\n        };\n        var myChart = new Chart(this.ctx, {\n          type: \"line\",\n          data: data,\n          options: gradientChartOptionsConfigurationWithTooltipGreen\n        });\n        var chart_labels = [\"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\", \"JUN\", \"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"];\n        this.datasets = [[100, 70, 90, 70, 85, 60, 75, 60, 90, 80, 110, 100], [80, 120, 105, 110, 95, 105, 90, 100, 80, 95, 70, 120], [60, 80, 65, 130, 80, 105, 90, 130, 70, 115, 60, 130]];\n        this.data = this.datasets[0];\n        this.canvas = document.getElementById(\"chartBig1\");\n        this.ctx = this.canvas.getContext(\"2d\");\n        var gradientStroke = this.ctx.createLinearGradient(0, 230, 0, 50);\n        gradientStroke.addColorStop(1, \"rgba(233,32,16,0.2)\");\n        gradientStroke.addColorStop(0.4, \"rgba(233,32,16,0.0)\");\n        gradientStroke.addColorStop(0, \"rgba(233,32,16,0)\"); //red colors\n\n        var config = {\n          type: \"line\",\n          data: {\n            labels: chart_labels,\n            datasets: [{\n              label: \"My First dataset\",\n              fill: true,\n              backgroundColor: gradientStroke,\n              borderColor: \"#ec250d\",\n              borderWidth: 2,\n              borderDash: [],\n              borderDashOffset: 0.0,\n              pointBackgroundColor: \"#ec250d\",\n              pointBorderColor: \"rgba(255,255,255,0)\",\n              pointHoverBackgroundColor: \"#ec250d\",\n              pointBorderWidth: 20,\n              pointHoverRadius: 4,\n              pointHoverBorderWidth: 15,\n              pointRadius: 4,\n              data: this.data\n            }]\n          },\n          options: gradientChartOptionsConfigurationWithTooltipRed\n        };\n        this.myChartData = new Chart(this.ctx, config);\n        this.canvas = document.getElementById(\"CountryChart\");\n        this.ctx = this.canvas.getContext(\"2d\");\n        var gradientStroke = this.ctx.createLinearGradient(0, 230, 0, 50);\n        gradientStroke.addColorStop(1, \"rgba(29,140,248,0.2)\");\n        gradientStroke.addColorStop(0.4, \"rgba(29,140,248,0.0)\");\n        gradientStroke.addColorStop(0, \"rgba(29,140,248,0)\"); //blue colors\n\n        var myChart = new Chart(this.ctx, {\n          type: \"bar\",\n          responsive: true,\n          legend: {\n            display: false\n          },\n          data: {\n            labels: [\"USA\", \"GER\", \"AUS\", \"UK\", \"RO\", \"BR\"],\n            datasets: [{\n              label: \"Countries\",\n              fill: true,\n              backgroundColor: gradientStroke,\n              hoverBackgroundColor: gradientStroke,\n              borderColor: \"#1f8ef1\",\n              borderWidth: 2,\n              borderDash: [],\n              borderDashOffset: 0.0,\n              data: [53, 20, 10, 80, 100, 45]\n            }]\n          },\n          options: gradientBarChartConfiguration\n        });\n      }\n    }, {\n      key: \"updateOptions\",\n      value: function updateOptions() {\n        this.myChartData.data.datasets[0].data = this.data;\n        this.myChartData.update();\n      }\n    }]);\n\n    return DashboardComponent;\n  }();\n\n  DashboardComponent.ɵfac = function DashboardComponent_Factory(t) {\n    return new (t || DashboardComponent)(i0.ɵɵdirectiveInject(i1.PeriodService), i0.ɵɵdirectiveInject(i2.NgbModal), i0.ɵɵdirectiveInject(i3.DashboardService));\n  };\n\n  DashboardComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DashboardComponent,\n    selectors: [[\"app-dashboard\"]],\n    decls: 81,\n    vars: 5,\n    consts: [[1, \"content\"], [1, \"row\"], [1, \"col-12\"], [1, \"card\", \"card-chart\"], [1, \"card-header\"], [1, \"col-sm-4\", \"text-left\"], [1, \"card-category\"], [1, \"card-title\"], [1, \"btn\", \"btn-light\", 3, \"click\"], [1, \"col-sm-8\", \"text-right\"], [1, \"btn\", \"btn-group\"], [\"content\", \"\"], [1, \"col-lg-6\", \"col-md-12\"], [1, \"card\", \"card-nav-tabs\", \"text-left\"], [1, \"card-header\", \"card-header-primary\"], [1, \"card-body\"], [1, \"table\"], [\"routerLink\", \"\", \"routerLinkActive\", \"active\", 1, \"simple-text\", \"logo-normal\"], [1, \"title\"], [1, \"text-muted\"], [3, \"click\"], [1, \"title\", \"pe-auto\"], [1, \"card\"], [1, \"table-responsive\"], [\"id\", \"\", 1, \"table\", \"tablesorter\"], [1, \"text-primary\"], [4, \"ngFor\", \"ngForOf\"], [1, \"modal-header\"], [\"id\", \"modal-basic-title\", 1, \"modal-title\"], [\"type\", \"button\", 1, \"btn\", \"btn-warning\", 3, \"click\"], [1, \"modal-body\"], [\"novalidate\", \"\", 3, \"ngSubmit\"], [\"f\", \"ngForm\"], [\"clas\", \"input-group\"], [\"for\", \"period_start\"], [\"name\", \"period_start\", \"ngModel\", \"\", \"required\", \"\", 1, \"form-control\"], [\"first\", \"ngModel\"], [\"for\", \"period_end\"], [\"name\", \"period_end\", \"ngModel\", \"\", \"required\", \"\", 1, \"form-control\"], [\"for\", \"begin_date\"], [\"name\", \"begin_date\", \"ngModel\", \"\", \"required\", \"\", 1, \"form-control\"], [\"for\", \"end_date\"], [\"name\", \"end_date\", \"ngModel\", \"\", \"required\", \"\", 1, \"form-control\"], [1, \"text-center\"]],\n    template: function DashboardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        var _r13 = i0.ɵɵgetCurrentView();\n\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"div\", 1)(6, \"div\", 5)(7, \"h5\", 6);\n        i0.ɵɵtext(8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"h2\", 7);\n        i0.ɵɵtext(10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"button\", 8);\n        i0.ɵɵlistener(\"click\", function DashboardComponent_Template_button_click_11_listener() {\n          i0.ɵɵrestoreView(_r13);\n\n          var _r0 = i0.ɵɵreference(17);\n\n          return ctx.open(_r0);\n        });\n        i0.ɵɵtext(12, \"Create/Update Period\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(13, \"div\", 9)(14, \"button\", 10);\n        i0.ɵɵtext(15, \"Export Scenario\");\n        i0.ɵɵelementEnd()()()()()()();\n        i0.ɵɵtemplate(16, DashboardComponent_ng_template_16_Template, 27, 0, \"ng-template\", null, 11, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵelementStart(18, \"div\", 1)(19, \"div\", 12)(20, \"div\", 13)(21, \"div\", 14);\n        i0.ɵɵtext(22, \" Scenario Actions \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"div\", 15)(24, \"table\", 16)(25, \"tbody\")(26, \"tr\")(27, \"td\")(28, \"a\", 17)(29, \"p\", 18);\n        i0.ɵɵtext(30, \"Change Scenarios\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(31, \"p\", 19);\n        i0.ɵɵtext(32, \" Switch to a different scenario \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(33, \"tr\")(34, \"td\")(35, \"a\", 20);\n        i0.ɵɵlistener(\"click\", function DashboardComponent_Template_a_click_35_listener() {\n          return ctx.createVersion();\n        });\n        i0.ɵɵelementStart(36, \"p\", 21);\n        i0.ɵɵtext(37, \"Save as new version\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(38, \"p\", 19);\n        i0.ɵɵtext(39, \" Stores a new version of current scenario \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(40, \"tr\")(41, \"td\")(42, \"p\", 18);\n        i0.ɵɵtext(43, \"Reset Data\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(44, \"p\", 19);\n        i0.ɵɵtext(45, \" Clears the accounts and adjustments tables from current scenario \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(46, \"tr\")(47, \"td\")(48, \"p\", 18);\n        i0.ɵɵtext(49, \"Clone Scenario\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(50, \"p\", 19);\n        i0.ɵɵtext(51, \" Create a new scenario by copying current scenario into new scenario id \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(52, \"tr\")(53, \"td\")(54, \"p\", 18);\n        i0.ɵɵtext(55, \"Export Base Tables\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(56, \"p\", 19);\n        i0.ɵɵtext(57, \" Download the base tables representing the organizational structure of the scenario \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(58, \"tr\")(59, \"td\")(60, \"p\", 18);\n        i0.ɵɵtext(61, \"Delete Scenario\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(62, \"p\", 19);\n        i0.ɵɵtext(63, \" Delete this scenario and all saved versions \");\n        i0.ɵɵelementEnd()()()()()()()();\n        i0.ɵɵelementStart(64, \"div\", 12)(65, \"div\", 22)(66, \"div\", 4)(67, \"h4\", 7);\n        i0.ɵɵtext(68, \"Scenario Version Log\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(69, \"div\", 15)(70, \"div\", 23)(71, \"table\", 24)(72, \"thead\", 25)(73, \"tr\")(74, \"th\");\n        i0.ɵɵtext(75, \"Version\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(76, \"th\");\n        i0.ɵɵtext(77, \"Modify Date\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(78, \"th\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(79, \"tbody\");\n        i0.ɵɵtemplate(80, DashboardComponent_tr_80_Template, 10, 4, \"tr\", 26);\n        i0.ɵɵelementEnd()()()()()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(8);\n        i0.ɵɵtextInterpolate2(\"Version: \", ctx.scnVersion, \", Period: \", ctx.period, \"\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate2(\"SCENARIO \", ctx.scnId, \", \", ctx.scnName, \" \");\n        i0.ɵɵadvance(70);\n        i0.ɵɵproperty(\"ngForOf\", ctx.versions);\n      }\n    },\n    directives: [i4.RouterLinkWithHref, i4.RouterLinkActive, i5.NgForOf],\n    pipes: [i5.DatePipe],\n    encapsulation: 2\n  });\n  return DashboardComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}