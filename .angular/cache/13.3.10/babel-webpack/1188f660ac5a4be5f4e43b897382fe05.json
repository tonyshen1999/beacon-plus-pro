{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/gauges/common.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { BaseGauge, compareArrays as _compareArrays } from \"./base_gauge\";\nimport { isDefined as _isDefined, isNumeric as _isNumber } from \"../../core/utils/type\";\nimport { extend } from \"../../core/utils/extend\";\nvar _isArray = Array.isArray;\nimport { Axis } from \"../axes/base_axis\";\nimport { map as _map, normalizeEnum as _normalizeEnum } from \"../core/utils\";\nvar _isFinite = isFinite;\nvar _Number = Number;\nvar _min = Math.min;\nvar _max = Math.max;\nvar _extend = extend;\nimport { noop as _noop } from \"../../core/utils/common\";\nvar SHIFT_ANGLE = 90;\nvar OPTION_VALUE = \"value\";\nvar OPTION_SUBVALUES = \"subvalues\";\nvar DEFAULT_MINOR_AXIS_DIVISION_FACTOR = 5;\nvar DEFAULT_NUMBER_MULTIPLIERS = [1, 2, 5];\n\nfunction processValue(value, fallbackValue) {\n  if (null === value) {\n    return value;\n  }\n\n  return _isFinite(value) ? _Number(value) : fallbackValue;\n}\n\nfunction parseArrayOfNumbers(arg) {\n  return _isArray(arg) ? arg : _isNumber(arg) ? [arg] : null;\n}\n\nexport var dxGauge = BaseGauge.inherit({\n  _initCore: function _initCore() {\n    var that = this;\n    var renderer = that._renderer;\n\n    that._setupValue(that.option(OPTION_VALUE));\n\n    that.__subvalues = parseArrayOfNumbers(that.option(OPTION_SUBVALUES));\n\n    that._setupSubvalues(that.__subvalues);\n\n    selectMode(that);\n    that.callBase.apply(that, arguments);\n    that._rangeContainer = new that._factory.RangeContainer({\n      renderer: renderer,\n      container: renderer.root,\n      translator: that._translator,\n      themeManager: that._themeManager\n    });\n\n    that._initScale();\n\n    that._subvalueIndicatorContainer = that._renderer.g().attr({\n      class: \"dxg-subvalue-indicators\"\n    }).linkOn(that._renderer.root, \"valueIndicator\").enableLinks();\n  },\n  _fontFields: [\"scale.label.font\", \"valueIndicators.rangebar.text.font\", \"valueIndicators.textcloud.text.font\", \"indicator.text.font\"],\n  _initScale: function _initScale() {\n    this._scaleGroup = this._renderer.g().attr({\n      class: \"dxg-scale\"\n    }).linkOn(this._renderer.root, \"scale\");\n    this._labelsAxesGroup = this._renderer.g().attr({\n      class: \"dxg-scale-elements\"\n    }).linkOn(this._renderer.root, \"scale-elements\");\n    this._scale = new Axis({\n      incidentOccurred: this._incidentOccurred,\n      renderer: this._renderer,\n      axesContainerGroup: this._scaleGroup,\n      labelsAxesGroup: this._labelsAxesGroup,\n      axisType: this._scaleTypes.type,\n      drawingType: this._scaleTypes.drawingType,\n      widgetClass: \"dxg\",\n      getTemplate: function getTemplate() {}\n    });\n  },\n  _disposeCore: function _disposeCore() {\n    var that = this;\n    that.callBase.apply(that, arguments);\n\n    that._scale.dispose();\n\n    that._scaleGroup.linkOff();\n\n    that._labelsAxesGroup.linkOff();\n\n    that._rangeContainer.dispose();\n\n    that._disposeValueIndicators();\n\n    that._subvalueIndicatorContainer.linkOff();\n\n    that._scale = that._scaleGroup = that._labelsAxesGroup = that._rangeContainer = null;\n  },\n  _disposeValueIndicators: function _disposeValueIndicators() {\n    this._valueIndicator && this._valueIndicator.dispose();\n    this._subvalueIndicatorsSet && this._subvalueIndicatorsSet.dispose();\n    this._valueIndicator = this._subvalueIndicatorsSet = null;\n  },\n  _setupDomainCore: function _setupDomainCore() {\n    var scaleOption = this.option(\"scale\") || {};\n    var startValue = this.option(\"startValue\");\n    var endValue = this.option(\"endValue\");\n    startValue = _isNumber(startValue) ? _Number(startValue) : _isNumber(scaleOption.startValue) ? _Number(scaleOption.startValue) : 0;\n    endValue = _isNumber(endValue) ? _Number(endValue) : _isNumber(scaleOption.endValue) ? _Number(scaleOption.endValue) : 100;\n    this._baseValue = startValue < endValue ? startValue : endValue;\n\n    this._translator.setDomain(startValue, endValue);\n  },\n  _cleanContent: function _cleanContent() {\n    this._rangeContainer.clean();\n\n    this._cleanValueIndicators();\n  },\n  _measureScale: function _measureScale(scaleOptions) {\n    var majorTick = scaleOptions.tick;\n    var majorTickEnabled = majorTick.visible && majorTick.length > 0 && majorTick.width > 0;\n    var minorTick = scaleOptions.minorTick;\n    var minorTickEnabled = minorTick.visible && minorTick.length > 0 && minorTick.width > 0;\n    var label = scaleOptions.label;\n    var indentFromTick = Number(label.indentFromTick);\n\n    if (!majorTickEnabled && !minorTickEnabled && !label.visible) {\n      return {};\n    }\n\n    var textParams = this._scale.measureLabels(extend({}, this._canvas));\n\n    var layoutValue = this._getScaleLayoutValue();\n\n    var result = {\n      min: layoutValue,\n      max: layoutValue\n    };\n\n    var coefs = this._getTicksCoefficients(scaleOptions);\n\n    var innerCoef = coefs.inner;\n    var outerCoef = coefs.outer;\n\n    if (majorTickEnabled) {\n      result.min = _min(result.min, layoutValue - innerCoef * majorTick.length);\n      result.max = _max(result.max, layoutValue + outerCoef * majorTick.length);\n    }\n\n    if (minorTickEnabled) {\n      result.min = _min(result.min, layoutValue - innerCoef * minorTick.length);\n      result.max = _max(result.max, layoutValue + outerCoef * minorTick.length);\n    }\n\n    label.visible && this._correctScaleIndents(result, indentFromTick, textParams);\n    return result;\n  },\n  _renderContent: function _renderContent() {\n    var that = this;\n\n    var scaleOptions = that._prepareScaleSettings();\n\n    that._rangeContainer.render(_extend(that._getOption(\"rangeContainer\"), {\n      vertical: that._area.vertical\n    }));\n\n    that._renderScale(scaleOptions);\n\n    that._subvalueIndicatorContainer.linkAppend();\n\n    var elements = _map([that._rangeContainer].concat(that._prepareValueIndicators()), function (element) {\n      return element && element.enabled ? element : null;\n    });\n\n    that._applyMainLayout(elements, that._measureScale(scaleOptions));\n\n    elements.forEach(function (element) {\n      return element.resize(that._getElementLayout(element.getOffset()));\n    });\n\n    that._shiftScale(that._getElementLayout(0), scaleOptions);\n\n    that._beginValueChanging();\n\n    that._updateActiveElements();\n\n    that._endValueChanging();\n  },\n  _prepareScaleSettings: function _prepareScaleSettings() {\n    var that = this;\n    var userOptions = that.option(\"scale\");\n    var scaleOptions = extend(true, {}, that._themeManager.theme(\"scale\"), userOptions);\n    scaleOptions.label.indentFromAxis = 0;\n    scaleOptions.isHorizontal = !that._area.vertical;\n    scaleOptions.forceUserTickInterval |= _isDefined(userOptions) && _isDefined(userOptions.tickInterval) && !_isDefined(userOptions.scaleDivisionFactor);\n    scaleOptions.axisDivisionFactor = scaleOptions.scaleDivisionFactor || that._gridSpacingFactor;\n    scaleOptions.minorAxisDivisionFactor = scaleOptions.minorScaleDivisionFactor || DEFAULT_MINOR_AXIS_DIVISION_FACTOR;\n    scaleOptions.numberMultipliers = DEFAULT_NUMBER_MULTIPLIERS;\n    scaleOptions.tickOrientation = that._getTicksOrientation(scaleOptions);\n\n    if (scaleOptions.label.useRangeColors) {\n      scaleOptions.label.customizeColor = function () {\n        return that._rangeContainer.getColorForValue(this.value);\n      };\n    }\n\n    return scaleOptions;\n  },\n  _renderScale: function _renderScale(scaleOptions) {\n    var bounds = this._translator.getDomain();\n\n    var startValue = bounds[0];\n    var endValue = bounds[1];\n\n    var angles = this._translator.getCodomain();\n\n    var invert = !!(startValue > endValue ^ scaleOptions.inverted);\n\n    var min = _min(startValue, endValue);\n\n    var max = _max(startValue, endValue);\n\n    scaleOptions.min = min;\n    scaleOptions.max = max;\n    scaleOptions.startAngle = SHIFT_ANGLE - angles[0];\n    scaleOptions.endAngle = SHIFT_ANGLE - angles[1];\n    scaleOptions.skipViewportExtending = true;\n    scaleOptions.inverted = invert;\n\n    this._scale.updateOptions(scaleOptions);\n\n    this._scale.setBusinessRange({\n      axisType: \"continuous\",\n      dataType: \"numeric\",\n      min: min,\n      max: max,\n      invert: invert\n    });\n\n    this._updateScaleTickIndent(scaleOptions);\n\n    this._scaleGroup.linkAppend();\n\n    this._labelsAxesGroup.linkAppend();\n\n    this._scale.draw(extend({}, this._canvas));\n  },\n  _updateIndicatorSettings: function _updateIndicatorSettings(settings) {\n    settings.currentValue = settings.baseValue = _isFinite(this._translator.translate(settings.baseValue)) ? _Number(settings.baseValue) : this._baseValue;\n    settings.vertical = this._area.vertical;\n\n    if (settings.text && !settings.text.format) {\n      settings.text.format = this._defaultFormatOptions;\n    }\n  },\n  _prepareIndicatorSettings: function _prepareIndicatorSettings(options, defaultTypeField) {\n    var theme = this._themeManager.theme(\"valueIndicators\");\n\n    var type = _normalizeEnum(options.type || this._themeManager.theme(defaultTypeField));\n\n    var settings = _extend(true, {}, theme._default, theme[type], options);\n\n    settings.type = type;\n    settings.animation = this._animationSettings;\n    settings.containerBackgroundColor = this._containerBackgroundColor;\n\n    this._updateIndicatorSettings(settings);\n\n    return settings;\n  },\n  _cleanValueIndicators: function _cleanValueIndicators() {\n    this._valueIndicator && this._valueIndicator.clean();\n    this._subvalueIndicatorsSet && this._subvalueIndicatorsSet.clean();\n  },\n  _prepareValueIndicators: function _prepareValueIndicators() {\n    this._prepareValueIndicator();\n\n    null !== this.__subvalues && this._prepareSubvalueIndicators();\n    return [this._valueIndicator, this._subvalueIndicatorsSet];\n  },\n  _updateActiveElements: function _updateActiveElements() {\n    this._updateValueIndicator();\n\n    this._updateSubvalueIndicators();\n  },\n  _prepareValueIndicator: function _prepareValueIndicator() {\n    var target = this._valueIndicator;\n\n    var settings = this._prepareIndicatorSettings(this.option(\"valueIndicator\") || {}, \"valueIndicatorType\");\n\n    if (target && target.type !== settings.type) {\n      target.dispose();\n      target = null;\n    }\n\n    if (!target) {\n      target = this._valueIndicator = this._createIndicator(settings.type, this._renderer.root, \"dxg-value-indicator\", \"value-indicator\");\n    }\n\n    target.render(settings);\n  },\n  _createSubvalueIndicatorsSet: function _createSubvalueIndicatorsSet() {\n    var that = this;\n    var root = that._subvalueIndicatorContainer;\n    return new ValueIndicatorsSet({\n      createIndicator: function createIndicator(type, i) {\n        return that._createIndicator(type, root, \"dxg-subvalue-indicator\", \"subvalue-indicator\", i);\n      },\n      createPalette: function createPalette(palette) {\n        return that._themeManager.createPalette(palette);\n      }\n    });\n  },\n  _prepareSubvalueIndicators: function _prepareSubvalueIndicators() {\n    var target = this._subvalueIndicatorsSet;\n\n    var settings = this._prepareIndicatorSettings(this.option(\"subvalueIndicator\") || {}, \"subvalueIndicatorType\");\n\n    if (!target) {\n      target = this._subvalueIndicatorsSet = this._createSubvalueIndicatorsSet();\n    }\n\n    var isRecreate = settings.type !== target.type;\n    target.type = settings.type;\n\n    var dummy = this._createIndicator(settings.type, this._renderer.root);\n\n    if (dummy) {\n      dummy.dispose();\n      target.render(settings, isRecreate);\n    }\n  },\n  _setupValue: function _setupValue(value) {\n    this.__value = processValue(value, this.__value);\n  },\n  _setupSubvalues: function _setupSubvalues(subvalues) {\n    var vals = void 0 === subvalues ? this.__subvalues : parseArrayOfNumbers(subvalues);\n    var i;\n    var ii;\n    var list;\n\n    if (null === vals) {\n      return;\n    }\n\n    for (i = 0, ii = vals.length, list = []; i < ii; ++i) {\n      list.push(processValue(vals[i], this.__subvalues[i]));\n    }\n\n    this.__subvalues = list;\n  },\n  _updateValueIndicator: function _updateValueIndicator() {\n    this._valueIndicator && this._valueIndicator.value(this.__value, this._noAnimation);\n  },\n  _updateSubvalueIndicators: function _updateSubvalueIndicators() {\n    this._subvalueIndicatorsSet && this._subvalueIndicatorsSet.values(this.__subvalues, this._noAnimation);\n  },\n  value: function value(arg) {\n    if (void 0 !== arg) {\n      this._changeValue(arg);\n\n      return this;\n    }\n\n    return this.__value;\n  },\n  subvalues: function subvalues(arg) {\n    if (void 0 !== arg) {\n      this._changeSubvalues(arg);\n\n      return this;\n    }\n\n    return null !== this.__subvalues ? this.__subvalues.slice() : void 0;\n  },\n  _changeValue: function _changeValue(value) {\n    this._setupValue(value);\n\n    this._beginValueChanging();\n\n    this._updateValueIndicator();\n\n    if (this.__value !== this.option(OPTION_VALUE)) {\n      this.option(OPTION_VALUE, this.__value);\n    }\n\n    this._endValueChanging();\n  },\n  _changeSubvalues: function _changeSubvalues(subvalues) {\n    if (null !== this.__subvalues) {\n      this._setupSubvalues(subvalues);\n\n      this._beginValueChanging();\n\n      this._updateSubvalueIndicators();\n\n      this._endValueChanging();\n    } else {\n      this.__subvalues = parseArrayOfNumbers(subvalues);\n\n      this._setContentSize();\n\n      this._renderContent();\n    }\n\n    if (!_compareArrays(this.__subvalues, this.option(OPTION_SUBVALUES))) {\n      this.option(OPTION_SUBVALUES, this.__subvalues);\n    }\n  },\n  _optionChangesMap: {\n    scale: \"DOMAIN\",\n    rangeContainer: \"MOSTLY_TOTAL\",\n    valueIndicator: \"MOSTLY_TOTAL\",\n    subvalueIndicator: \"MOSTLY_TOTAL\",\n    containerBackgroundColor: \"MOSTLY_TOTAL\",\n    value: \"VALUE\",\n    subvalues: \"SUBVALUES\",\n    valueIndicators: \"MOSTLY_TOTAL\"\n  },\n  _customChangesOrder: [\"VALUE\", \"SUBVALUES\"],\n  _change_VALUE: function _change_VALUE() {\n    this._changeValue(this.option(OPTION_VALUE));\n  },\n  _change_SUBVALUES: function _change_SUBVALUES() {\n    this._changeSubvalues(this.option(OPTION_SUBVALUES));\n  },\n  _applyMainLayout: null,\n  _getElementLayout: null,\n  _createIndicator: function _createIndicator(type, owner, className, trackerType, trackerIndex, _strict) {\n    var indicator = this._factory.createIndicator({\n      renderer: this._renderer,\n      translator: this._translator,\n      owner: owner,\n      tracker: this._tracker,\n      className: className\n    }, type, _strict);\n\n    if (indicator) {\n      indicator.type = type;\n      indicator._trackerInfo = {\n        type: trackerType,\n        index: trackerIndex\n      };\n    }\n\n    return indicator;\n  },\n  _getApproximateScreenRange: null\n});\n\nfunction valueGetter(arg) {\n  return arg ? arg.value : null;\n}\n\nfunction setupValues(that, fieldName, optionItems) {\n  var currentValues = that[fieldName];\n  var newValues = _isArray(optionItems) ? _map(optionItems, valueGetter) : [];\n  var i = 0;\n  var ii = newValues.length;\n  var list = [];\n\n  for (; i < ii; ++i) {\n    list.push(processValue(newValues[i], currentValues[i]));\n  }\n\n  that[fieldName] = list;\n}\n\nfunction selectMode(gauge) {\n  if (void 0 === gauge.option(OPTION_VALUE) && void 0 === gauge.option(OPTION_SUBVALUES)) {\n    if (void 0 !== gauge.option(\"valueIndicators\")) {\n      disableDefaultMode(gauge);\n      selectHardMode(gauge);\n    }\n  }\n}\n\nfunction disableDefaultMode(that) {\n  that.value = that.subvalues = _noop;\n  that._setupValue = that._setupSubvalues = that._updateValueIndicator = that._updateSubvalueIndicators = null;\n}\n\nfunction selectHardMode(that) {\n  that._indicatorValues = [];\n  setupValues(that, \"_indicatorValues\", that.option(\"valueIndicators\"));\n  that._valueIndicators = [];\n  var _applyMostlyTotalChange = that._applyMostlyTotalChange;\n\n  that._applyMostlyTotalChange = function () {\n    setupValues(this, \"_indicatorValues\", this.option(\"valueIndicators\"));\n\n    _applyMostlyTotalChange.call(this);\n  };\n\n  that._updateActiveElements = updateActiveElements_hardMode;\n  that._prepareValueIndicators = prepareValueIndicators_hardMode;\n  that._disposeValueIndicators = disposeValueIndicators_hardMode;\n  that._cleanValueIndicators = cleanValueIndicators_hardMode;\n  that.indicatorValue = indicatorValue_hardMode;\n}\n\nfunction updateActiveElements_hardMode() {\n  var that = this;\n\n  that._valueIndicators.forEach(function (valueIndicator) {\n    valueIndicator.value(that._indicatorValues[valueIndicator.index], that._noAnimation);\n  });\n}\n\nfunction prepareValueIndicators_hardMode() {\n  var that = this;\n  var valueIndicators = that._valueIndicators || [];\n  var userOptions = that.option(\"valueIndicators\");\n  var optionList = [];\n  var i = 0;\n  var ii;\n\n  for (ii = _isArray(userOptions) ? userOptions.length : 0; i < ii; ++i) {\n    optionList.push(userOptions[i]);\n  }\n\n  for (ii = valueIndicators.length; i < ii; ++i) {\n    optionList.push(null);\n  }\n\n  var newValueIndicators = [];\n  optionList.forEach(function (userSettings, i) {\n    var valueIndicator = valueIndicators[i];\n\n    if (!userSettings) {\n      valueIndicator && valueIndicator.dispose();\n      return;\n    }\n\n    var settings = that._prepareIndicatorSettings(userSettings, \"valueIndicatorType\");\n\n    if (valueIndicator && valueIndicator.type !== settings.type) {\n      valueIndicator.dispose();\n      valueIndicator = null;\n    }\n\n    if (!valueIndicator) {\n      valueIndicator = that._createIndicator(settings.type, that._renderer.root, \"dxg-value-indicator\", \"value-indicator\", i, true);\n    }\n\n    if (valueIndicator) {\n      valueIndicator.index = i;\n      valueIndicator.render(settings);\n      newValueIndicators.push(valueIndicator);\n    }\n  });\n  that._valueIndicators = newValueIndicators;\n  return that._valueIndicators;\n}\n\nfunction disposeValueIndicators_hardMode() {\n  this._valueIndicators.forEach(function (valueIndicator) {\n    return valueIndicator.dispose();\n  });\n\n  this._valueIndicators = null;\n}\n\nfunction cleanValueIndicators_hardMode() {\n  this._valueIndicators.forEach(function (valueIndicator) {\n    return valueIndicator.clean();\n  });\n}\n\nfunction indicatorValue_hardMode(index, value) {\n  return accessPointerValue(this, this._valueIndicators, this._indicatorValues, index, value);\n}\n\nfunction accessPointerValue(that, pointers, values, index, value) {\n  if (void 0 !== value) {\n    if (void 0 !== values[index]) {\n      values[index] = processValue(value, values[index]);\n      pointers[index] && pointers[index].value(values[index]);\n    }\n\n    return that;\n  } else {\n    return values[index];\n  }\n}\n\nfunction ValueIndicatorsSet(parameters) {\n  this._parameters = parameters;\n  this._indicators = [];\n}\n\nValueIndicatorsSet.prototype = {\n  constructor: ValueIndicatorsSet,\n  dispose: function dispose() {\n    this._indicators.forEach(function (indicator) {\n      return indicator.dispose();\n    });\n\n    this._parameters = this._options = this._indicators = this._colorPalette = this._palette = null;\n    return this;\n  },\n  clean: function clean() {\n    this._sample && this._sample.clean().dispose();\n\n    this._indicators.forEach(function (indicator) {\n      return indicator.clean();\n    });\n\n    this._sample = this._options = this._palette = null;\n    return this;\n  },\n  render: function render(options, isRecreate) {\n    var that = this;\n    that._options = options;\n    that._sample = that._parameters.createIndicator(that.type);\n\n    that._sample.render(options);\n\n    that.enabled = that._sample.enabled;\n    that._palette = _isDefined(options.palette) ? that._parameters.createPalette(options.palette) : null;\n\n    if (that.enabled) {\n      that._generatePalette(that._indicators.length);\n\n      that._indicators = _map(that._indicators, function (indicator, i) {\n        if (isRecreate) {\n          indicator.dispose();\n          indicator = that._parameters.createIndicator(that.type, i);\n        }\n\n        indicator.render(that._getIndicatorOptions(i));\n        return indicator;\n      });\n    }\n\n    return that;\n  },\n  getOffset: function getOffset() {\n    return this._sample.getOffset();\n  },\n  resize: function resize(layout) {\n    this._layout = layout;\n\n    this._indicators.forEach(function (indicator) {\n      return indicator.resize(layout);\n    });\n\n    return this;\n  },\n  measure: function measure(layout) {\n    return this._sample.measure(layout);\n  },\n  _getIndicatorOptions: function _getIndicatorOptions(index) {\n    var result = this._options;\n\n    if (this._colorPalette) {\n      result = _extend({}, result, {\n        color: this._colorPalette[index]\n      });\n    }\n\n    return result;\n  },\n  _generatePalette: function _generatePalette(count) {\n    var colors = null;\n\n    if (this._palette) {\n      this._palette.reset();\n\n      colors = this._palette.generateColors(count, {\n        repeat: true\n      });\n    }\n\n    this._colorPalette = colors;\n  },\n  _adjustIndicatorsCount: function _adjustIndicatorsCount(count) {\n    var indicators = this._indicators;\n    var i;\n    var ii;\n    var indicator;\n    var indicatorsLen = indicators.length;\n\n    if (indicatorsLen > count) {\n      for (i = count, ii = indicatorsLen; i < ii; ++i) {\n        indicators[i].clean().dispose();\n      }\n\n      this._indicators = indicators.slice(0, count);\n\n      this._generatePalette(indicators.length);\n    } else if (indicatorsLen < count) {\n      this._generatePalette(count);\n\n      for (i = indicatorsLen, ii = count; i < ii; ++i) {\n        indicator = this._parameters.createIndicator(this.type, i);\n        indicator.render(this._getIndicatorOptions(i)).resize(this._layout);\n        indicators.push(indicator);\n      }\n    }\n  },\n  values: function values(arg, _noAnimation) {\n    if (!this.enabled) {\n      return;\n    }\n\n    if (void 0 !== arg) {\n      if (!_isArray(arg)) {\n        arg = _isFinite(arg) ? [Number(arg)] : null;\n      }\n\n      if (arg) {\n        this._adjustIndicatorsCount(arg.length);\n\n        this._indicators.forEach(function (indicator, i) {\n          return indicator.value(arg[i], _noAnimation);\n        });\n      }\n\n      return this;\n    }\n\n    return _map(this._indicators, function (indicator) {\n      return indicator.value();\n    });\n  }\n};\nexport function createIndicatorCreator(indicators) {\n  return function (parameters, type, _strict) {\n    var indicatorType = indicators[_normalizeEnum(type)] || !_strict && indicators._default;\n\n    return indicatorType ? new indicatorType(parameters) : null;\n  };\n}","map":null,"metadata":{},"sourceType":"module"}