{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.search.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport domAdapter from \"../../core/dom_adapter\";\nimport { isDefined } from \"../../core/utils/type\";\nimport { compileGetter } from \"../../core/utils/data\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nimport messageLocalization from \"../../localization/message\";\nimport dataQuery from \"../../data/query\";\nvar SEARCH_PANEL_CLASS = \"search-panel\";\nvar SEARCH_TEXT_CLASS = \"search-text\";\nvar HEADER_PANEL_CLASS = \"header-panel\";\nvar FILTERING_TIMEOUT = 700;\n\nfunction allowSearch(column) {\n  return isDefined(column.allowSearch) ? column.allowSearch : column.allowFiltering;\n}\n\nfunction parseValue(column, text) {\n  var lookup = column.lookup;\n\n  if (!column.parseValue) {\n    return text;\n  }\n\n  if (lookup) {\n    return column.parseValue.call(lookup, text);\n  }\n\n  return column.parseValue(text);\n}\n\nexport var searchModule = {\n  defaultOptions: function defaultOptions() {\n    return {\n      searchPanel: {\n        visible: false,\n        width: 160,\n        placeholder: messageLocalization.format(\"dxDataGrid-searchPanelPlaceholder\"),\n        highlightSearchText: true,\n        highlightCaseSensitive: false,\n        text: \"\",\n        searchVisibleColumnsOnly: false\n      }\n    };\n  },\n  extenders: {\n    controllers: {\n      data: {\n        publicMethods: function publicMethods() {\n          return this.callBase().concat([\"searchByText\"]);\n        },\n        _calculateAdditionalFilter: function _calculateAdditionalFilter() {\n          var filter = this.callBase();\n\n          var searchFilter = function (that, text) {\n            var i;\n            var column;\n\n            var columns = that._columnsController.getColumns();\n\n            var searchVisibleColumnsOnly = that.option(\"searchPanel.searchVisibleColumnsOnly\");\n            var lookup;\n            var filters = [];\n\n            if (!text) {\n              return null;\n            }\n\n            function onQueryDone(items) {\n              var valueGetter = compileGetter(lookup.valueExpr);\n\n              for (var _i = 0; _i < items.length; _i++) {\n                var value = valueGetter(items[_i]);\n                filters.push(column.createFilterExpression(value, null, \"search\"));\n              }\n            }\n\n            for (i = 0; i < columns.length; i++) {\n              column = columns[i];\n\n              if (searchVisibleColumnsOnly && !column.visible) {\n                continue;\n              }\n\n              if (allowSearch(column) && column.calculateFilterExpression) {\n                lookup = column.lookup;\n                var filterValue = parseValue(column, text);\n\n                if (lookup && lookup.items) {\n                  dataQuery(lookup.items).filter(column.createFilterExpression.call({\n                    dataField: lookup.displayExpr,\n                    dataType: lookup.dataType,\n                    calculateFilterExpression: column.calculateFilterExpression\n                  }, filterValue, null, \"search\")).enumerate().done(onQueryDone);\n                } else if (void 0 !== filterValue) {\n                  filters.push(column.createFilterExpression(filterValue, null, \"search\"));\n                }\n              }\n            }\n\n            if (0 === filters.length) {\n              return [\"!\"];\n            }\n\n            return gridCoreUtils.combineFilters(filters, \"or\");\n          }(this, this.option(\"searchPanel.text\"));\n\n          return gridCoreUtils.combineFilters([filter, searchFilter]);\n        },\n        searchByText: function searchByText(text) {\n          this.option(\"searchPanel.text\", text);\n        },\n        optionChanged: function optionChanged(args) {\n          switch (args.fullName) {\n            case \"searchPanel.text\":\n            case \"searchPanel\":\n              this._applyFilter();\n\n              args.handled = true;\n              break;\n\n            default:\n              this.callBase(args);\n          }\n        }\n      }\n    },\n    views: {\n      headerPanel: function () {\n        var getSearchPanelOptions = function getSearchPanelOptions(that) {\n          return that.option(\"searchPanel\");\n        };\n\n        return {\n          _getToolbarItems: function _getToolbarItems() {\n            var items = this.callBase();\n            return this._prepareSearchItem(items);\n          },\n          _prepareSearchItem: function _prepareSearchItem(items) {\n            var that = this;\n            var dataController = that.getController(\"data\");\n            var searchPanelOptions = getSearchPanelOptions(that);\n\n            if (searchPanelOptions && searchPanelOptions.visible) {\n              var toolbarItem = {\n                template: function template(data, index, container) {\n                  var $search = $(\"<div>\").addClass(that.addWidgetPrefix(SEARCH_PANEL_CLASS)).appendTo(container);\n                  that.getController(\"editorFactory\").createEditor($search, {\n                    width: searchPanelOptions.width,\n                    placeholder: searchPanelOptions.placeholder,\n                    parentType: \"searchPanel\",\n                    value: that.option(\"searchPanel.text\"),\n                    updateValueTimeout: FILTERING_TIMEOUT,\n                    setValue: function setValue(value) {\n                      dataController.searchByText(value);\n                    },\n                    editorOptions: {\n                      inputAttr: {\n                        \"aria-label\": messageLocalization.format(\"\".concat(that.component.NAME, \"-ariaSearchInGrid\"))\n                      }\n                    }\n                  });\n                  that.resize();\n                },\n                name: \"searchPanel\",\n                location: \"after\",\n                locateInMenu: \"never\",\n                sortIndex: 40\n              };\n              items.push(toolbarItem);\n            }\n\n            return items;\n          },\n          getSearchTextEditor: function getSearchTextEditor() {\n            var that = this;\n            var $element = that.element();\n            var $searchPanel = $element.find(\".\" + that.addWidgetPrefix(SEARCH_PANEL_CLASS)).filter(function () {\n              return $(this).closest(\".\" + that.addWidgetPrefix(HEADER_PANEL_CLASS)).is($element);\n            });\n\n            if ($searchPanel.length) {\n              return $searchPanel.dxTextBox(\"instance\");\n            }\n\n            return null;\n          },\n          isVisible: function isVisible() {\n            var searchPanelOptions = getSearchPanelOptions(this);\n            return this.callBase() || searchPanelOptions && searchPanelOptions.visible;\n          },\n          optionChanged: function optionChanged(args) {\n            if (\"searchPanel\" === args.name) {\n              if (\"searchPanel.text\" === args.fullName) {\n                var editor = this.getSearchTextEditor();\n\n                if (editor) {\n                  editor.option(\"value\", args.value);\n                }\n              } else {\n                this._invalidate();\n              }\n\n              args.handled = true;\n            } else {\n              this.callBase(args);\n            }\n          }\n        };\n      }(),\n      rowsView: {\n        init: function init() {\n          this.callBase.apply(this, arguments);\n          this._searchParams = [];\n        },\n        _getFormattedSearchText: function _getFormattedSearchText(column, searchText) {\n          var value = parseValue(column, searchText);\n          var formatOptions = gridCoreUtils.getFormatOptionsByColumn(column, \"search\");\n          return gridCoreUtils.formatValue(value, formatOptions);\n        },\n        _getStringNormalizer: function _getStringNormalizer() {\n          var isCaseSensitive = this.option(\"searchPanel.highlightCaseSensitive\");\n          return function (str) {\n            return isCaseSensitive ? str : str.toLowerCase();\n          };\n        },\n        _findHighlightingTextNodes: function _findHighlightingTextNodes(column, cellElement, searchText) {\n          var _$items;\n\n          var $parent = cellElement.parent();\n          var $items;\n\n          var stringNormalizer = this._getStringNormalizer();\n\n          var normalizedSearchText = stringNormalizer(searchText);\n          var resultTextNodes = [];\n\n          if (!$parent.length) {\n            $parent = $(\"<div>\").append(cellElement);\n          } else if (column) {\n            if (column.groupIndex >= 0 && !column.showWhenGrouped) {\n              $items = cellElement;\n            } else {\n              var columnIndex = this._columnsController.getVisibleIndex(column.index);\n\n              $items = $parent.children(\"td\").eq(columnIndex).find(\"*\");\n            }\n          }\n\n          $items = null !== (_$items = $items) && void 0 !== _$items && _$items.length ? $items : $parent.find(\"*\");\n          $items.each(function (_, element) {\n            var $contents = $(element).contents();\n\n            for (var i = 0; i < $contents.length; i++) {\n              var node = $contents.get(i);\n\n              if (3 === node.nodeType) {\n                var normalizedText = stringNormalizer(node.textContent || node.nodeValue);\n\n                if (normalizedText.indexOf(normalizedSearchText) > -1) {\n                  resultTextNodes.push(node);\n                }\n              }\n            }\n          });\n          return resultTextNodes;\n        },\n        _highlightSearchTextCore: function _highlightSearchTextCore($textNode, searchText) {\n          var $searchTextSpan = $(\"<span>\").addClass(this.addWidgetPrefix(SEARCH_TEXT_CLASS));\n          var text = $textNode.text();\n          var firstContentElement = $textNode[0];\n\n          var stringNormalizer = this._getStringNormalizer();\n\n          var index = stringNormalizer(text).indexOf(stringNormalizer(searchText));\n\n          if (index >= 0) {\n            if (firstContentElement.textContent) {\n              firstContentElement.textContent = text.substr(0, index);\n            } else {\n              firstContentElement.nodeValue = text.substr(0, index);\n            }\n\n            $textNode.after($searchTextSpan.text(text.substr(index, searchText.length)));\n            $textNode = $(domAdapter.createTextNode(text.substr(index + searchText.length))).insertAfter($searchTextSpan);\n            return this._highlightSearchTextCore($textNode, searchText);\n          }\n        },\n        _highlightSearchText: function _highlightSearchText(cellElement, isEquals, column) {\n          var that = this;\n\n          var stringNormalizer = this._getStringNormalizer();\n\n          var searchText = that.option(\"searchPanel.text\");\n\n          if (isEquals && column) {\n            searchText = searchText && that._getFormattedSearchText(column, searchText);\n          }\n\n          if (searchText && that.option(\"searchPanel.highlightSearchText\")) {\n            var textNodes = that._findHighlightingTextNodes(column, cellElement, searchText);\n\n            textNodes.forEach(function (textNode) {\n              if (isEquals) {\n                if (stringNormalizer($(textNode).text()) === stringNormalizer(searchText)) {\n                  $(textNode).replaceWith($(\"<span>\").addClass(that.addWidgetPrefix(SEARCH_TEXT_CLASS)).text($(textNode).text()));\n                }\n              } else {\n                that._highlightSearchTextCore($(textNode), searchText);\n              }\n            });\n          }\n        },\n        _renderCore: function _renderCore() {\n          this.callBase.apply(this, arguments);\n\n          if (this.option().rowTemplate || this.option(\"dataRowTemplate\")) {\n            if (this.option(\"templatesRenderAsynchronously\")) {\n              clearTimeout(this._highlightTimer);\n              this._highlightTimer = setTimeout(function () {\n                this._highlightSearchText(this.getTableElement());\n              }.bind(this));\n            } else {\n              this._highlightSearchText(this.getTableElement());\n            }\n          }\n        },\n        _updateCell: function _updateCell($cell, parameters) {\n          var column = parameters.column;\n          var dataType = column.lookup && column.lookup.dataType || column.dataType;\n          var isEquals = \"string\" !== dataType;\n\n          if (allowSearch(column) && !parameters.isOnForm) {\n            if (this.option(\"templatesRenderAsynchronously\")) {\n              if (!this._searchParams.length) {\n                clearTimeout(this._highlightTimer);\n                this._highlightTimer = setTimeout(function () {\n                  this._searchParams.forEach(function (params) {\n                    this._highlightSearchText.apply(this, params);\n                  }.bind(this));\n\n                  this._searchParams = [];\n                }.bind(this));\n              }\n\n              this._searchParams.push([$cell, isEquals, column]);\n            } else {\n              this._highlightSearchText($cell, isEquals, column);\n            }\n          }\n\n          this.callBase($cell, parameters);\n        },\n        dispose: function dispose() {\n          clearTimeout(this._highlightTimer);\n          this.callBase();\n        }\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}