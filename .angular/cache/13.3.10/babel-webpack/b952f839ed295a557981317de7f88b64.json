{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.breadcrumbs.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport Widget from \"../widget/ui.widget\";\nimport Menu from \"../menu/ui.menu\";\nvar FILE_MANAGER_BREADCRUMBS_CLASS = \"dx-filemanager-breadcrumbs\";\nvar FILE_MANAGER_BREADCRUMBS_PARENT_FOLDER_ITEM_CLASS = FILE_MANAGER_BREADCRUMBS_CLASS + \"-parent-folder-item\";\nvar FILE_MANAGER_BREADCRUMBS_SEPARATOR_ITEM_CLASS = FILE_MANAGER_BREADCRUMBS_CLASS + \"-separator-item\";\nvar FILE_MANAGER_BREADCRUMBS_PATH_SEPARATOR_ITEM_CLASS = FILE_MANAGER_BREADCRUMBS_CLASS + \"-path-separator-item\";\n\nvar FileManagerBreadcrumbs = /*#__PURE__*/function (_Widget) {\n  _inherits(FileManagerBreadcrumbs, _Widget);\n\n  var _super = _createSuper(FileManagerBreadcrumbs);\n\n  function FileManagerBreadcrumbs() {\n    _classCallCheck(this, FileManagerBreadcrumbs);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FileManagerBreadcrumbs, [{\n    key: \"_init\",\n    value: function _init() {\n      _get(_getPrototypeOf(FileManagerBreadcrumbs.prototype), \"_init\", this).call(this);\n\n      this._currentDirectory = null;\n    }\n  }, {\n    key: \"_initMarkup\",\n    value: function _initMarkup() {\n      _get(_getPrototypeOf(FileManagerBreadcrumbs.prototype), \"_initMarkup\", this).call(this);\n\n      this._initActions();\n\n      if (this._currentDirectory) {\n        this._renderMenu();\n      }\n\n      this.$element().addClass(FILE_MANAGER_BREADCRUMBS_CLASS);\n    }\n  }, {\n    key: \"setCurrentDirectory\",\n    value: function setCurrentDirectory(directory) {\n      if (!this._areDirsEqual(this._currentDirectory, directory)) {\n        this._currentDirectory = directory;\n        this.repaint();\n      }\n    }\n  }, {\n    key: \"_renderMenu\",\n    value: function _renderMenu() {\n      var $menu = $(\"<div>\").appendTo(this.$element());\n      this._menu = this._createComponent($menu, Menu, {\n        dataSource: this._getMenuItems(),\n        onItemClick: this._onItemClick.bind(this),\n        onItemRendered: this._onItemRendered.bind(this)\n      });\n    }\n  }, {\n    key: \"_getMenuItems\",\n    value: function _getMenuItems() {\n      var dirLine = this._getParentDirsLine();\n\n      var result = [{\n        icon: \"arrowup\",\n        directory: this._currentDirectory.parentDirectory,\n        isPathItem: true,\n        cssClass: FILE_MANAGER_BREADCRUMBS_PARENT_FOLDER_ITEM_CLASS\n      }, {\n        text: \"\\xa0\",\n        cssClass: FILE_MANAGER_BREADCRUMBS_SEPARATOR_ITEM_CLASS\n      }];\n      dirLine.forEach(function (dir, index) {\n        result.push({\n          text: dir.getDisplayName(),\n          directory: dir,\n          isPathItem: true\n        });\n\n        if (index !== dirLine.length - 1) {\n          result.push({\n            icon: \"spinnext\",\n            cssClass: FILE_MANAGER_BREADCRUMBS_PATH_SEPARATOR_ITEM_CLASS\n          });\n        }\n      });\n      return result;\n    }\n  }, {\n    key: \"_onItemClick\",\n    value: function _onItemClick(_ref) {\n      var itemData = _ref.itemData;\n\n      if (!itemData.isPathItem) {\n        return;\n      }\n\n      var newDir = itemData.directory;\n\n      if (!this._areDirsEqual(newDir, this._currentDirectory)) {\n        this._raiseCurrentDirectoryChanged(newDir);\n      }\n    }\n  }, {\n    key: \"_onItemRendered\",\n    value: function _onItemRendered(_ref2) {\n      var itemElement = _ref2.itemElement,\n          itemData = _ref2.itemData;\n\n      if (itemData.cssClass) {\n        $(itemElement).addClass(itemData.cssClass);\n      }\n    }\n  }, {\n    key: \"_getParentDirsLine\",\n    value: function _getParentDirsLine() {\n      var currentDirectory = this._currentDirectory;\n      var result = [];\n\n      while (currentDirectory) {\n        result.unshift(currentDirectory);\n        currentDirectory = currentDirectory.parentDirectory;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_areDirsEqual\",\n    value: function _areDirsEqual(dir1, dir2) {\n      return dir1 && dir2 && dir1 === dir2 && dir1.fileItem.key === dir2.fileItem.key;\n    }\n  }, {\n    key: \"_initActions\",\n    value: function _initActions() {\n      this._actions = {\n        onCurrentDirectoryChanging: this._createActionByOption(\"onCurrentDirectoryChanging\")\n      };\n    }\n  }, {\n    key: \"_raiseCurrentDirectoryChanged\",\n    value: function _raiseCurrentDirectoryChanged(currentDirectory) {\n      this._actions.onCurrentDirectoryChanging({\n        currentDirectory: currentDirectory\n      });\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function _getDefaultOptions() {\n      return extend(_get(_getPrototypeOf(FileManagerBreadcrumbs.prototype), \"_getDefaultOptions\", this).call(this), {\n        rootFolderDisplayName: \"Files\",\n        onCurrentDirectoryChanging: null\n      });\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function _optionChanged(args) {\n      var name = args.name;\n\n      switch (name) {\n        case \"rootFolderDisplayName\":\n          this.repaint();\n          break;\n\n        case \"onCurrentDirectoryChanging\":\n          this._actions[name] = this._createActionByOption(name);\n          break;\n\n        default:\n          _get(_getPrototypeOf(FileManagerBreadcrumbs.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }]);\n\n  return FileManagerBreadcrumbs;\n}(Widget);\n\nexport default FileManagerBreadcrumbs;","map":null,"metadata":{},"sourceType":"module"}