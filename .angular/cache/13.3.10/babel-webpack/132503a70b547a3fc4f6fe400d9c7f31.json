{"ast":null,"code":"import _slicedToArray from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/utils.timeZone.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport dateUtils from \"../../core/utils/date\";\nimport timeZoneDataUtils from \"./timezones/utils.timezones_data\";\nimport DateAdapter from \"./dateAdapter\";\nvar toMs = dateUtils.dateToMilliseconds;\nvar MINUTES_IN_HOUR = 60;\n\nvar createUTCDateWithLocalOffset = function createUTCDateWithLocalOffset(date) {\n  if (!date) {\n    return null;\n  }\n\n  return new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds()));\n};\n\nvar createDateFromUTCWithLocalOffset = function createDateFromUTCWithLocalOffset(date) {\n  var result = DateAdapter(date);\n  var timezoneOffsetBeforeInMin = result.getTimezoneOffset();\n  result.addTime(result.getTimezoneOffset(\"minute\"));\n  result.subtractMinutes(timezoneOffsetBeforeInMin - result.getTimezoneOffset());\n  return result.source;\n};\n\nvar getTimeZones = function getTimeZones() {\n  var date = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : new Date();\n  var dateInUTC = createUTCDate(date);\n  return timeZoneDataUtils.getDisplayedTimeZones(dateInUTC.getTime());\n};\n\nvar createUTCDate = function createUTCDate(date) {\n  return new Date(Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes()));\n};\n\nvar getTimezoneOffsetChangeInMinutes = function getTimezoneOffsetChangeInMinutes(startDate, endDate, updatedStartDate, updatedEndDate) {\n  return getDaylightOffset(updatedStartDate, updatedEndDate) - getDaylightOffset(startDate, endDate);\n};\n\nvar getTimezoneOffsetChangeInMs = function getTimezoneOffsetChangeInMs(startDate, endDate, updatedStartDate, updatedEndDate) {\n  return getTimezoneOffsetChangeInMinutes(startDate, endDate, updatedStartDate, updatedEndDate) * toMs(\"minute\");\n};\n\nvar getDaylightOffset = function getDaylightOffset(startDate, endDate) {\n  return new Date(startDate).getTimezoneOffset() - new Date(endDate).getTimezoneOffset();\n};\n\nvar getDaylightOffsetInMs = function getDaylightOffsetInMs(startDate, endDate) {\n  return getDaylightOffset(startDate, endDate) * toMs(\"minute\");\n};\n\nvar calculateTimezoneByValue = function calculateTimezoneByValue(timezone) {\n  var date = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : new Date();\n\n  if (\"string\" === typeof timezone) {\n    var dateUtc = createUTCDate(date);\n    return timeZoneDataUtils.getTimeZoneOffsetById(timezone, dateUtc.getTime());\n  }\n\n  return timezone;\n};\n\nvar _getDaylightOffsetByTimezone = function _getDaylightOffsetByTimezone(startDate, endDate, timeZone) {\n  return calculateTimezoneByValue(timeZone, startDate) - calculateTimezoneByValue(timeZone, endDate);\n};\n\nvar getCorrectedDateByDaylightOffsets = function getCorrectedDateByDaylightOffsets(convertedOriginalStartDate, convertedDate, date, timeZone, startDateTimezone) {\n  var daylightOffsetByCommonTimezone = _getDaylightOffsetByTimezone(convertedOriginalStartDate, convertedDate, timeZone);\n\n  var daylightOffsetByAppointmentTimezone = _getDaylightOffsetByTimezone(convertedOriginalStartDate, convertedDate, startDateTimezone);\n\n  var diff = daylightOffsetByCommonTimezone - daylightOffsetByAppointmentTimezone;\n  return new Date(date.getTime() - diff * toMs(\"hour\"));\n};\n\nvar correctRecurrenceExceptionByTimezone = function correctRecurrenceExceptionByTimezone(exception, exceptionByStartDate, timeZone, startDateTimeZone) {\n  var isBackConversion = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : false;\n  var timezoneOffset = (exception.getTimezoneOffset() - exceptionByStartDate.getTimezoneOffset()) / MINUTES_IN_HOUR;\n\n  if (startDateTimeZone) {\n    timezoneOffset = _getDaylightOffsetByTimezone(exceptionByStartDate, exception, startDateTimeZone);\n  } else if (timeZone) {\n    timezoneOffset = _getDaylightOffsetByTimezone(exceptionByStartDate, exception, timeZone);\n  }\n\n  return new Date(exception.getTime() + (isBackConversion ? -1 : 1) * timezoneOffset * toMs(\"hour\"));\n};\n\nvar isTimezoneChangeInDate = function isTimezoneChangeInDate(date) {\n  var startDayDate = new Date(new Date(date).setHours(0, 0, 0, 0));\n  var endDayDate = new Date(new Date(date).setHours(23, 59, 59, 0));\n  return startDayDate.getTimezoneOffset() - endDayDate.getTimezoneOffset() !== 0;\n};\n\nvar getDateWithoutTimezoneChange = function getDateWithoutTimezoneChange(date) {\n  var clonedDate = new Date(date);\n\n  if (isTimezoneChangeInDate(clonedDate)) {\n    var result = new Date(clonedDate);\n    return new Date(result.setDate(result.getDate() + 1));\n  }\n\n  return clonedDate;\n};\n\nvar isSameAppointmentDates = function isSameAppointmentDates(startDate, endDate) {\n  endDate = new Date(endDate.getTime() - 1);\n  return dateUtils.sameDate(startDate, endDate);\n};\n\nvar getClientTimezoneOffset = function getClientTimezoneOffset() {\n  var date = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : new Date();\n  return 6e4 * date.getTimezoneOffset();\n};\n\nvar isEqualLocalTimeZone = function isEqualLocalTimeZone(timeZoneName) {\n  var date = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : new Date();\n\n  if (Intl) {\n    var localTimeZoneName = Intl.DateTimeFormat().resolvedOptions().timeZone;\n\n    if (localTimeZoneName === timeZoneName) {\n      return true;\n    }\n  }\n\n  return isEqualLocalTimeZoneByDeclaration(timeZoneName, date);\n};\n\nvar hasDSTInLocalTimeZone = function hasDSTInLocalTimeZone() {\n  var _getExtremeDates = getExtremeDates(),\n      _getExtremeDates2 = _slicedToArray(_getExtremeDates, 2),\n      startDate = _getExtremeDates2[0],\n      endDate = _getExtremeDates2[1];\n\n  return startDate.getTimezoneOffset() !== endDate.getTimezoneOffset();\n};\n\nvar isEqualLocalTimeZoneByDeclaration = function isEqualLocalTimeZoneByDeclaration(timeZoneName, date) {\n  var year = date.getFullYear();\n\n  var getOffset = function getOffset(date) {\n    return -date.getTimezoneOffset() / 60;\n  };\n\n  var getDateAndMoveHourBack = function getDateAndMoveHourBack(dateStamp) {\n    return new Date(dateStamp - 36e5);\n  };\n\n  var configTuple = timeZoneDataUtils.getTimeZoneDeclarationTuple(timeZoneName, year);\n\n  var _configTuple = _slicedToArray(configTuple, 2),\n      summerTime = _configTuple[0],\n      winterTime = _configTuple[1];\n\n  var noDSTInTargetTimeZone = configTuple.length < 2;\n\n  if (noDSTInTargetTimeZone) {\n    var targetTimeZoneOffset = timeZoneDataUtils.getTimeZoneOffsetById(timeZoneName, date);\n    var localTimeZoneOffset = getOffset(date);\n\n    if (targetTimeZoneOffset !== localTimeZoneOffset) {\n      return false;\n    }\n\n    return hasDSTInLocalTimeZone() ? false : true;\n  }\n\n  var localSummerOffset = getOffset(new Date(summerTime.date));\n  var localWinterOffset = getOffset(new Date(winterTime.date));\n\n  if (localSummerOffset !== summerTime.offset) {\n    return false;\n  }\n\n  if (localSummerOffset === getOffset(getDateAndMoveHourBack(summerTime.date))) {\n    return false;\n  }\n\n  if (localWinterOffset !== winterTime.offset) {\n    return false;\n  }\n\n  if (localWinterOffset === getOffset(getDateAndMoveHourBack(winterTime.date))) {\n    return false;\n  }\n\n  return true;\n};\n\nvar getExtremeDates = function getExtremeDates() {\n  var nowDate = new Date(Date.now());\n  var startDate = new Date();\n  var endDate = new Date();\n  startDate.setFullYear(nowDate.getFullYear(), 0, 1);\n  endDate.setFullYear(nowDate.getFullYear(), 6, 1);\n  return [startDate, endDate];\n};\n\nvar utils = {\n  getDaylightOffset: getDaylightOffset,\n  getDaylightOffsetInMs: getDaylightOffsetInMs,\n  getTimezoneOffsetChangeInMinutes: getTimezoneOffsetChangeInMinutes,\n  getTimezoneOffsetChangeInMs: getTimezoneOffsetChangeInMs,\n  calculateTimezoneByValue: calculateTimezoneByValue,\n  getCorrectedDateByDaylightOffsets: getCorrectedDateByDaylightOffsets,\n  isSameAppointmentDates: isSameAppointmentDates,\n  correctRecurrenceExceptionByTimezone: correctRecurrenceExceptionByTimezone,\n  getClientTimezoneOffset: getClientTimezoneOffset,\n  createUTCDateWithLocalOffset: createUTCDateWithLocalOffset,\n  createDateFromUTCWithLocalOffset: createDateFromUTCWithLocalOffset,\n  createUTCDate: createUTCDate,\n  isTimezoneChangeInDate: isTimezoneChangeInDate,\n  getDateWithoutTimezoneChange: getDateWithoutTimezoneChange,\n  hasDSTInLocalTimeZone: hasDSTInLocalTimeZone,\n  isEqualLocalTimeZone: isEqualLocalTimeZone,\n  isEqualLocalTimeZoneByDeclaration: isEqualLocalTimeZoneByDeclaration,\n  getTimeZones: getTimeZones\n};\nexport default utils;","map":null,"metadata":{},"sourceType":"module"}