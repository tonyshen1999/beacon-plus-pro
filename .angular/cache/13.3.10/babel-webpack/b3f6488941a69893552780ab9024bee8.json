{"ast":null,"code":"import _toConsumableArray from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n\n/**\r\n * DevExtreme (esm/renovation/ui/editors/internal/editor.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"accessKey\", \"activeStateEnabled\", \"aria\", \"children\", \"className\", \"classes\", \"defaultValue\", \"disabled\", \"focusStateEnabled\", \"height\", \"hint\", \"hoverStateEnabled\", \"isValid\", \"name\", \"onClick\", \"onFocusIn\", \"onKeyDown\", \"readOnly\", \"rtlEnabled\", \"tabIndex\", \"validationError\", \"validationErrors\", \"validationMessageMode\", \"validationStatus\", \"value\", \"valueChange\", \"visible\", \"width\"];\nimport { createFragment, createComponentVNode, normalizeProps } from \"inferno\";\nimport { Fragment } from \"inferno\";\nimport { InfernoEffect, InfernoWrapperComponent } from \"@devextreme/runtime/inferno\";\nimport Guid from \"../../../../core/guid\";\nimport { Widget, WidgetProps } from \"../../common/widget\";\nimport { BaseWidgetProps } from \"../../common/base_props\";\nimport { combineClasses } from \"../../../utils/combine_classes\";\nimport { ValidationMessage } from \"../../overlays/validation_message\";\n\nvar getCssClasses = function getCssClasses(model) {\n  var classes = model.classes,\n      isValid = model.isValid,\n      readOnly = model.readOnly;\n\n  var classesMap = _defineProperty({\n    \"dx-state-readonly\": !!readOnly,\n    \"dx-invalid\": !isValid\n  }, \"\".concat(classes), !!classes);\n\n  return combineClasses(classesMap);\n};\n\nexport var viewFunction = function viewFunction(viewModel) {\n  var aria = viewModel.aria,\n      classes = viewModel.cssClasses,\n      isValidationMessageVisible = viewModel.isValidationMessageVisible,\n      onFocusIn = viewModel.onFocusIn,\n      _viewModel$props = viewModel.props,\n      accessKey = _viewModel$props.accessKey,\n      activeStateEnabled = _viewModel$props.activeStateEnabled,\n      children = _viewModel$props.children,\n      className = _viewModel$props.className,\n      disabled = _viewModel$props.disabled,\n      focusStateEnabled = _viewModel$props.focusStateEnabled,\n      height = _viewModel$props.height,\n      hint = _viewModel$props.hint,\n      hoverStateEnabled = _viewModel$props.hoverStateEnabled,\n      onClick = _viewModel$props.onClick,\n      onKeyDown = _viewModel$props.onKeyDown,\n      rtlEnabled = _viewModel$props.rtlEnabled,\n      tabIndex = _viewModel$props.tabIndex,\n      validationMessageMode = _viewModel$props.validationMessageMode,\n      visible = _viewModel$props.visible,\n      width = _viewModel$props.width,\n      restAttributes = viewModel.restAttributes,\n      rootElementRef = viewModel.rootElementRef,\n      validationErrors = viewModel.validationErrors,\n      validationMessageGuid = viewModel.validationMessageGuid,\n      validationMessageTarget = viewModel.validationMessageTarget,\n      widgetRef = viewModel.widgetRef;\n  return normalizeProps(createComponentVNode(2, Widget, _extends({\n    rootElementRef: rootElementRef,\n    aria: aria,\n    classes: classes,\n    activeStateEnabled: activeStateEnabled,\n    focusStateEnabled: focusStateEnabled,\n    hoverStateEnabled: hoverStateEnabled,\n    accessKey: accessKey,\n    className: className,\n    rtlEnabled: rtlEnabled,\n    hint: hint,\n    disabled: disabled,\n    height: height,\n    width: width,\n    onFocusIn: onFocusIn,\n    onClick: onClick,\n    onKeyDown: onKeyDown,\n    tabIndex: tabIndex,\n    visible: visible\n  }, restAttributes, {\n    children: createFragment([children, isValidationMessageVisible && createComponentVNode(2, ValidationMessage, {\n      validationErrors: validationErrors,\n      mode: validationMessageMode,\n      positionRequest: \"below\",\n      rtlEnabled: rtlEnabled,\n      target: validationMessageTarget,\n      boundary: validationMessageTarget,\n      container: validationMessageTarget,\n      contentId: validationMessageGuid\n    })], 0)\n  }), null, widgetRef));\n};\nexport var EditorProps = Object.create(Object.prototype, _extends(Object.getOwnPropertyDescriptors(BaseWidgetProps), Object.getOwnPropertyDescriptors({\n  readOnly: false,\n  name: \"\",\n  validationError: null,\n  validationErrors: null,\n  validationMessageMode: \"auto\",\n  validationStatus: \"valid\",\n  isValid: true,\n  defaultValue: null,\n  valueChange: function valueChange() {}\n})));\nexport var EditorPropsType = {\n  get readOnly() {\n    return EditorProps.readOnly;\n  },\n\n  get name() {\n    return EditorProps.name;\n  },\n\n  get validationError() {\n    return EditorProps.validationError;\n  },\n\n  get validationErrors() {\n    return EditorProps.validationErrors;\n  },\n\n  get validationMessageMode() {\n    return EditorProps.validationMessageMode;\n  },\n\n  get validationStatus() {\n    return EditorProps.validationStatus;\n  },\n\n  get isValid() {\n    return EditorProps.isValid;\n  },\n\n  get defaultValue() {\n    return EditorProps.defaultValue;\n  },\n\n  get valueChange() {\n    return EditorProps.valueChange;\n  },\n\n  get className() {\n    return EditorProps.className;\n  },\n\n  get activeStateEnabled() {\n    return EditorProps.activeStateEnabled;\n  },\n\n  get disabled() {\n    return EditorProps.disabled;\n  },\n\n  get focusStateEnabled() {\n    return EditorProps.focusStateEnabled;\n  },\n\n  get hoverStateEnabled() {\n    return EditorProps.hoverStateEnabled;\n  },\n\n  get rtlEnabled() {\n    return EditorProps.rtlEnabled;\n  },\n\n  get tabIndex() {\n    return EditorProps.tabIndex;\n  },\n\n  get visible() {\n    return EditorProps.visible;\n  },\n\n  get aria() {\n    return WidgetProps.aria;\n  },\n\n  get classes() {\n    return WidgetProps.classes;\n  }\n\n};\nimport { convertRulesToOptions } from \"../../../../core/options/utils\";\nimport { createReRenderEffect } from \"@devextreme/runtime/inferno\";\nimport { createRef as infernoCreateRef } from \"inferno\";\nexport var Editor = /*#__PURE__*/function (_InfernoWrapperCompon) {\n  _inherits(Editor, _InfernoWrapperCompon);\n\n  var _super = _createSuper(Editor);\n\n  function Editor(props) {\n    var _this;\n\n    _classCallCheck(this, Editor);\n\n    _this = _super.call(this, props);\n    _this.widgetRef = infernoCreateRef();\n    _this.rootElementRef = infernoCreateRef();\n    _this.__getterCache = {};\n    _this.state = {\n      validationMessageGuid: \"dx-\".concat(new Guid()),\n      isValidationMessageVisible: false,\n      value: void 0 !== _this.props.value ? _this.props.value : _this.props.defaultValue\n    };\n    _this.updateValidationMessageVisibility = _this.updateValidationMessageVisibility.bind(_assertThisInitialized(_this));\n    _this.focus = _this.focus.bind(_assertThisInitialized(_this));\n    _this.blur = _this.blur.bind(_assertThisInitialized(_this));\n    _this.onFocusIn = _this.onFocusIn.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Editor, [{\n    key: \"createEffects\",\n    value: function createEffects() {\n      return [new InfernoEffect(this.updateValidationMessageVisibility, [this.props.isValid, this.props.validationStatus, this.props.validationError, this.props.validationErrors]), createReRenderEffect()];\n    }\n  }, {\n    key: \"updateEffects\",\n    value: function updateEffects() {\n      var _this$_effects$;\n\n      null === (_this$_effects$ = this._effects[0]) || void 0 === _this$_effects$ ? void 0 : _this$_effects$.update([this.props.isValid, this.props.validationStatus, this.props.validationError, this.props.validationErrors]);\n    }\n  }, {\n    key: \"updateValidationMessageVisibility\",\n    value: function updateValidationMessageVisibility() {\n      var _this2 = this;\n\n      this.setState(function (__state_argument) {\n        return {\n          isValidationMessageVisible: _this2.shouldShowValidationMessage\n        };\n      });\n    }\n  }, {\n    key: \"onFocusIn\",\n    value: function onFocusIn(event) {\n      var onFocusIn = this.props.onFocusIn;\n      null === onFocusIn || void 0 === onFocusIn ? void 0 : onFocusIn(event);\n    }\n  }, {\n    key: \"cssClasses\",\n    get: function get() {\n      return \"\".concat(getCssClasses(_extends({}, this.props, {\n        value: void 0 !== this.props.value ? this.props.value : this.state.value\n      })));\n    }\n  }, {\n    key: \"shouldShowValidationMessage\",\n    get: function get() {\n      var _this$validationError;\n\n      var _this$props = this.props,\n          isValid = _this$props.isValid,\n          validationStatus = _this$props.validationStatus;\n      var validationErrors = null !== (_this$validationError = this.validationErrors) && void 0 !== _this$validationError ? _this$validationError : [];\n      var isEditorValid = isValid && \"invalid\" !== validationStatus;\n      return !isEditorValid && validationErrors.length > 0;\n    }\n  }, {\n    key: \"aria\",\n    get: function get() {\n      var _this$props2 = this.props,\n          isValid = _this$props2.isValid,\n          readOnly = _this$props2.readOnly;\n      var result = {\n        readonly: readOnly ? \"true\" : \"false\",\n        invalid: !isValid ? \"true\" : \"false\"\n      };\n\n      if (this.shouldShowValidationMessage) {\n        result.describedBy = this.state.validationMessageGuid;\n      }\n\n      return _extends({}, result, this.props.aria);\n    }\n  }, {\n    key: \"validationErrors\",\n    get: function get() {\n      var _this3 = this;\n\n      if (void 0 !== this.__getterCache.validationErrors) {\n        return this.__getterCache.validationErrors;\n      }\n\n      return this.__getterCache.validationErrors = function () {\n        var _this3$props = _this3.props,\n            validationError = _this3$props.validationError,\n            validationErrors = _this3$props.validationErrors;\n\n        var allValidationErrors = validationErrors && _toConsumableArray(validationErrors);\n\n        if (!allValidationErrors && validationError) {\n          allValidationErrors = [_extends({}, validationError)];\n        }\n\n        return allValidationErrors;\n      }();\n    }\n  }, {\n    key: \"validationMessageTarget\",\n    get: function get() {\n      var _this$rootElementRef;\n\n      return null === (_this$rootElementRef = this.rootElementRef) || void 0 === _this$rootElementRef ? void 0 : _this$rootElementRef.current;\n    }\n  }, {\n    key: \"restAttributes\",\n    get: function get() {\n      var _this$props$value = _extends({}, this.props, {\n        value: void 0 !== this.props.value ? this.props.value : this.state.value\n      }),\n          restProps = _objectWithoutPropertiesLoose(_this$props$value, _excluded);\n\n      return restProps;\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this.widgetRef.current.focus();\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      this.widgetRef.current.blur();\n    }\n  }, {\n    key: \"componentWillUpdate\",\n    value: function componentWillUpdate(nextProps, nextState, context) {\n      _get(_getPrototypeOf(Editor.prototype), \"componentWillUpdate\", this).call(this);\n\n      if (this.props.validationError !== nextProps.validationError || this.props.validationErrors !== nextProps.validationErrors) {\n        this.__getterCache.validationErrors = void 0;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var props = this.props;\n      return viewFunction({\n        props: _extends({}, props, {\n          value: void 0 !== this.props.value ? this.props.value : this.state.value\n        }),\n        validationMessageGuid: this.state.validationMessageGuid,\n        isValidationMessageVisible: this.state.isValidationMessageVisible,\n        rootElementRef: this.rootElementRef,\n        widgetRef: this.widgetRef,\n        onFocusIn: this.onFocusIn,\n        cssClasses: this.cssClasses,\n        shouldShowValidationMessage: this.shouldShowValidationMessage,\n        aria: this.aria,\n        validationErrors: this.validationErrors,\n        validationMessageTarget: this.validationMessageTarget,\n        restAttributes: this.restAttributes\n      });\n    }\n  }]);\n\n  return Editor;\n}(InfernoWrapperComponent);\n\nfunction __processTwoWayProps(defaultProps) {\n  var twoWayProps = [\"value\"];\n  return Object.keys(defaultProps).reduce(function (props, propName) {\n    var propValue = defaultProps[propName];\n    var defaultPropName = twoWayProps.some(function (p) {\n      return p === propName;\n    }) ? \"default\" + propName.charAt(0).toUpperCase() + propName.slice(1) : propName;\n    props[defaultPropName] = propValue;\n    return props;\n  }, {});\n}\n\nEditor.defaultProps = EditorPropsType;\nvar __defaultOptionRules = [];\nexport function defaultOptions(rule) {\n  __defaultOptionRules.push(rule);\n\n  Editor.defaultProps = Object.create(Object.prototype, _extends(Object.getOwnPropertyDescriptors(Editor.defaultProps), Object.getOwnPropertyDescriptors(__processTwoWayProps(convertRulesToOptions(__defaultOptionRules)))));\n}","map":null,"metadata":{},"sourceType":"module"}