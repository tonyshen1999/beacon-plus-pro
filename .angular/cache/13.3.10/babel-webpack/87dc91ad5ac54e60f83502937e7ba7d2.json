{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/renovation/ui/pager/page_size/selector.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"isLargeDisplayMode\", \"pageSize\", \"pageSizeChange\", \"pageSizes\", \"rootElementRef\"];\nimport { createVNode, createComponentVNode } from \"inferno\";\nimport { InfernoEffect, InfernoComponent } from \"@devextreme/runtime/inferno\";\nimport { PageSizeSmall } from \"./small\";\nimport { PageSizeLarge } from \"./large\";\nimport { InternalPagerProps } from \"../common/pager_props\";\nimport messageLocalization from \"../../../../localization/message\";\nimport { PAGER_PAGE_SIZES_CLASS } from \"../common/consts\";\nexport var viewFunction = function viewFunction(_ref) {\n  var htmlRef = _ref.htmlRef,\n      normalizedPageSizes = _ref.normalizedPageSizes,\n      _ref$props = _ref.props,\n      isLargeDisplayMode = _ref$props.isLargeDisplayMode,\n      pageSize = _ref$props.pageSize,\n      pageSizeChange = _ref$props.pageSizeChange;\n  return createVNode(1, \"div\", PAGER_PAGE_SIZES_CLASS, [isLargeDisplayMode && createComponentVNode(2, PageSizeLarge, {\n    pageSizes: normalizedPageSizes,\n    pageSize: pageSize,\n    pageSizeChange: pageSizeChange\n  }), !isLargeDisplayMode && createComponentVNode(2, PageSizeSmall, {\n    parentRef: htmlRef,\n    pageSizes: normalizedPageSizes,\n    pageSize: pageSize,\n    pageSizeChange: pageSizeChange\n  })], 0, null, null, htmlRef);\n};\n\nfunction getAllText() {\n  return messageLocalization.getFormatter(\"dxPager-pageSizesAllText\")();\n}\n\nvar PageSizeSelectorProps = {\n  isLargeDisplayMode: true\n};\nvar PageSizeSelectorPropsType = {\n  get pageSize() {\n    return InternalPagerProps.pageSize;\n  },\n\n  get pageSizes() {\n    return InternalPagerProps.pageSizes;\n  },\n\n  get isLargeDisplayMode() {\n    return PageSizeSelectorProps.isLargeDisplayMode;\n  }\n\n};\nimport { createRef as infernoCreateRef } from \"inferno\";\nexport var PageSizeSelector = /*#__PURE__*/(function () {\n  var PageSizeSelector = /*#__PURE__*/function (_InfernoComponent) {\n    _inherits(PageSizeSelector, _InfernoComponent);\n\n    var _super = _createSuper(PageSizeSelector);\n\n    function PageSizeSelector(props) {\n      var _this;\n\n      _classCallCheck(this, PageSizeSelector);\n\n      _this = _super.call(this, props);\n      _this.state = {};\n      _this.htmlRef = infernoCreateRef();\n      _this.__getterCache = {};\n      _this.setRootElementRef = _this.setRootElementRef.bind(_assertThisInitialized(_this));\n      return _this;\n    }\n\n    _createClass(PageSizeSelector, [{\n      key: \"createEffects\",\n      value: function createEffects() {\n        return [new InfernoEffect(this.setRootElementRef, [])];\n      }\n    }, {\n      key: \"setRootElementRef\",\n      value: function setRootElementRef() {\n        var rootElementRef = this.props.rootElementRef;\n\n        if (rootElementRef) {\n          rootElementRef.current = this.htmlRef.current;\n        }\n      }\n    }, {\n      key: \"normalizedPageSizes\",\n      get: function get() {\n        var _this2 = this;\n\n        if (void 0 !== this.__getterCache.normalizedPageSizes) {\n          return this.__getterCache.normalizedPageSizes;\n        }\n\n        return this.__getterCache.normalizedPageSizes = function () {\n          var pageSizes = _this2.props.pageSizes;\n          return pageSizes.map(function (p) {\n            return \"all\" === p || 0 === p ? {\n              text: getAllText(),\n              value: 0\n            } : {\n              text: String(p),\n              value: p\n            };\n          });\n        }();\n      }\n    }, {\n      key: \"restAttributes\",\n      get: function get() {\n        var _this$props = this.props,\n            restProps = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n        return restProps;\n      }\n    }, {\n      key: \"componentWillUpdate\",\n      value: function componentWillUpdate(nextProps, nextState, context) {\n        _get(_getPrototypeOf(PageSizeSelector.prototype), \"componentWillUpdate\", this).call(this);\n\n        if (this.props.pageSizes !== nextProps.pageSizes) {\n          this.__getterCache.normalizedPageSizes = void 0;\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var props = this.props;\n        return viewFunction({\n          props: _extends({}, props),\n          htmlRef: this.htmlRef,\n          normalizedPageSizes: this.normalizedPageSizes,\n          restAttributes: this.restAttributes\n        });\n      }\n    }]);\n\n    return PageSizeSelector;\n  }(InfernoComponent);\n\n  PageSizeSelector.defaultProps = PageSizeSelectorPropsType;\n  return PageSizeSelector;\n})();","map":null,"metadata":{},"sourceType":"module"}