{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __decorate, __metadata, __param } from 'tslib';\nimport { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, Component, NgModule } from '@angular/core';\nimport PivotGridDataSource from 'devextreme/ui/pivot_grid/data_source';\nimport DxPivotGridFieldChooser from 'devextreme/ui/pivot_grid_field_chooser';\nimport { DxComponent, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxoHeaderFilterModule, DxoTextsModule } from 'devextreme-angular/ui/nested';\n/*!\r\n * devextreme-angular\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\n/**\r\n * A complementary UI component for the PivotGrid that allows you to manage data displayed in the PivotGrid. The field chooser is already integrated in the PivotGrid and can be invoked using the context menu. If you need to continuously display the field chooser near the PivotGrid UI component, use the PivotGridFieldChooser UI component.\r\n\r\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'devextreme-angular/core';\nimport * as ɵngcc2 from '@angular/platform-browser';\nvar DxPivotGridFieldChooserComponent = /*#__PURE__*/(function () {\n  var DxPivotGridFieldChooserComponent = /*#__PURE__*/function (_DxComponent) {\n    _inherits(DxPivotGridFieldChooserComponent, _DxComponent);\n\n    var _super = _createSuper(DxPivotGridFieldChooserComponent);\n\n    function DxPivotGridFieldChooserComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\n      var _this;\n\n      _classCallCheck(this, DxPivotGridFieldChooserComponent);\n\n      _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n      _this._watcherHelper = _watcherHelper;\n      _this._idh = _idh;\n\n      _this._createEventEmitters([{\n        subscribe: 'contentReady',\n        emit: 'onContentReady'\n      }, {\n        subscribe: 'contextMenuPreparing',\n        emit: 'onContextMenuPreparing'\n      }, {\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        emit: 'accessKeyChange'\n      }, {\n        emit: 'activeStateEnabledChange'\n      }, {\n        emit: 'allowSearchChange'\n      }, {\n        emit: 'applyChangesModeChange'\n      }, {\n        emit: 'dataSourceChange'\n      }, {\n        emit: 'disabledChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'focusStateEnabledChange'\n      }, {\n        emit: 'headerFilterChange'\n      }, {\n        emit: 'heightChange'\n      }, {\n        emit: 'hintChange'\n      }, {\n        emit: 'hoverStateEnabledChange'\n      }, {\n        emit: 'layoutChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'searchTimeoutChange'\n      }, {\n        emit: 'stateChange'\n      }, {\n        emit: 'tabIndexChange'\n      }, {\n        emit: 'textsChange'\n      }, {\n        emit: 'visibleChange'\n      }, {\n        emit: 'widthChange'\n      }]);\n\n      _this._idh.setHost(_assertThisInitialized(_this));\n\n      optionHost.setHost(_assertThisInitialized(_this));\n      return _this;\n    }\n    /**\r\n     * Specifies the shortcut key that sets focus on the UI component.\r\n    \r\n     */\n\n\n    _createClass(DxPivotGridFieldChooserComponent, [{\n      key: \"accessKey\",\n      get: function get() {\n        return this._getOption('accessKey');\n      },\n      set: function set(value) {\n        this._setOption('accessKey', value);\n      }\n      /**\r\n       * Specifies whether or not the UI component changes its state when interacting with a user.\r\n      \r\n       */\n\n    }, {\n      key: \"activeStateEnabled\",\n      get: function get() {\n        return this._getOption('activeStateEnabled');\n      },\n      set: function set(value) {\n        this._setOption('activeStateEnabled', value);\n      }\n      /**\r\n       * Specifies whether the field chooser allows searching in the &apos;All Fields&apos; section.\r\n      \r\n       */\n\n    }, {\n      key: \"allowSearch\",\n      get: function get() {\n        return this._getOption('allowSearch');\n      },\n      set: function set(value) {\n        this._setOption('allowSearch', value);\n      }\n      /**\r\n       * Specifies when to apply changes made in the UI component to the PivotGrid.\r\n      \r\n       */\n\n    }, {\n      key: \"applyChangesMode\",\n      get: function get() {\n        return this._getOption('applyChangesMode');\n      },\n      set: function set(value) {\n        this._setOption('applyChangesMode', value);\n      }\n      /**\r\n       * The data source of a PivotGrid UI component.\r\n      \r\n       */\n\n    }, {\n      key: \"dataSource\",\n      get: function get() {\n        return this._getOption('dataSource');\n      },\n      set: function set(value) {\n        this._setOption('dataSource', value);\n      }\n      /**\r\n       * Specifies whether the UI component responds to user interaction.\r\n      \r\n       */\n\n    }, {\n      key: \"disabled\",\n      get: function get() {\n        return this._getOption('disabled');\n      },\n      set: function set(value) {\n        this._setOption('disabled', value);\n      }\n      /**\r\n       * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n      \r\n       */\n\n    }, {\n      key: \"elementAttr\",\n      get: function get() {\n        return this._getOption('elementAttr');\n      },\n      set: function set(value) {\n        this._setOption('elementAttr', value);\n      }\n      /**\r\n       * Specifies whether the UI component can be focused using keyboard navigation.\r\n      \r\n       */\n\n    }, {\n      key: \"focusStateEnabled\",\n      get: function get() {\n        return this._getOption('focusStateEnabled');\n      },\n      set: function set(value) {\n        this._setOption('focusStateEnabled', value);\n      }\n      /**\r\n       * Configures the header filter feature.\r\n      \r\n       */\n\n    }, {\n      key: \"headerFilter\",\n      get: function get() {\n        return this._getOption('headerFilter');\n      },\n      set: function set(value) {\n        this._setOption('headerFilter', value);\n      }\n      /**\r\n       * Specifies the UI component&apos;s height.\r\n      \r\n       */\n\n    }, {\n      key: \"height\",\n      get: function get() {\n        return this._getOption('height');\n      },\n      set: function set(value) {\n        this._setOption('height', value);\n      }\n      /**\r\n       * Specifies text for a hint that appears when a user pauses on the UI component.\r\n      \r\n       */\n\n    }, {\n      key: \"hint\",\n      get: function get() {\n        return this._getOption('hint');\n      },\n      set: function set(value) {\n        this._setOption('hint', value);\n      }\n      /**\r\n       * Specifies whether the UI component changes its state when a user pauses on it.\r\n      \r\n       */\n\n    }, {\n      key: \"hoverStateEnabled\",\n      get: function get() {\n        return this._getOption('hoverStateEnabled');\n      },\n      set: function set(value) {\n        this._setOption('hoverStateEnabled', value);\n      }\n      /**\r\n       * Specifies the field chooser layout.\r\n      \r\n       */\n\n    }, {\n      key: \"layout\",\n      get: function get() {\n        return this._getOption('layout');\n      },\n      set: function set(value) {\n        this._setOption('layout', value);\n      }\n      /**\r\n       * Switches the UI component to a right-to-left representation.\r\n      \r\n       */\n\n    }, {\n      key: \"rtlEnabled\",\n      get: function get() {\n        return this._getOption('rtlEnabled');\n      },\n      set: function set(value) {\n        this._setOption('rtlEnabled', value);\n      }\n      /**\r\n       * Specifies a delay in milliseconds between when a user finishes typing in the field chooser&apos;s search panel, and when the search is executed.\r\n      \r\n       */\n\n    }, {\n      key: \"searchTimeout\",\n      get: function get() {\n        return this._getOption('searchTimeout');\n      },\n      set: function set(value) {\n        this._setOption('searchTimeout', value);\n      }\n      /**\r\n       * The UI component&apos;s state.\r\n      \r\n       */\n\n    }, {\n      key: \"state\",\n      get: function get() {\n        return this._getOption('state');\n      },\n      set: function set(value) {\n        this._setOption('state', value);\n      }\n      /**\r\n       * Specifies the number of the element when the Tab key is used for navigating.\r\n      \r\n       */\n\n    }, {\n      key: \"tabIndex\",\n      get: function get() {\n        return this._getOption('tabIndex');\n      },\n      set: function set(value) {\n        this._setOption('tabIndex', value);\n      }\n      /**\r\n       * Strings that can be changed or localized in the PivotGridFieldChooser UI component.\r\n      \r\n       */\n\n    }, {\n      key: \"texts\",\n      get: function get() {\n        return this._getOption('texts');\n      },\n      set: function set(value) {\n        this._setOption('texts', value);\n      }\n      /**\r\n       * Specifies whether the UI component is visible.\r\n      \r\n       */\n\n    }, {\n      key: \"visible\",\n      get: function get() {\n        return this._getOption('visible');\n      },\n      set: function set(value) {\n        this._setOption('visible', value);\n      }\n      /**\r\n       * Specifies the UI component&apos;s width.\r\n      \r\n       */\n\n    }, {\n      key: \"width\",\n      get: function get() {\n        return this._getOption('width');\n      },\n      set: function set(value) {\n        this._setOption('width', value);\n      }\n    }, {\n      key: \"_createInstance\",\n      value: function _createInstance(element, options) {\n        return new DxPivotGridFieldChooser(element, options);\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._destroyWidget();\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        _get(_getPrototypeOf(DxPivotGridFieldChooserComponent.prototype), \"ngOnChanges\", this).call(this, changes);\n\n        this.setupChanges('dataSource', changes);\n      }\n    }, {\n      key: \"setupChanges\",\n      value: function setupChanges(prop, changes) {\n        if (!(prop in this._optionsToUpdate)) {\n          this._idh.setup(prop, changes);\n        }\n      }\n    }, {\n      key: \"ngDoCheck\",\n      value: function ngDoCheck() {\n        this._idh.doCheck('dataSource');\n\n        this._watcherHelper.checkWatchers();\n\n        _get(_getPrototypeOf(DxPivotGridFieldChooserComponent.prototype), \"ngDoCheck\", this).call(this);\n\n        _get(_getPrototypeOf(DxPivotGridFieldChooserComponent.prototype), \"clearChangedOptions\", this).call(this);\n      }\n    }, {\n      key: \"_setOption\",\n      value: function _setOption(name, value) {\n        var isSetup = this._idh.setupSingle(name, value);\n\n        var isChanged = this._idh.getChanges(name, value) !== null;\n\n        if (isSetup || isChanged) {\n          _get(_getPrototypeOf(DxPivotGridFieldChooserComponent.prototype), \"_setOption\", this).call(this, name, value);\n        }\n      }\n    }]);\n\n    return DxPivotGridFieldChooserComponent;\n  }(DxComponent);\n\n  DxPivotGridFieldChooserComponent.ɵfac = function DxPivotGridFieldChooserComponent_Factory(t) {\n    return new (t || DxPivotGridFieldChooserComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DxTemplateHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.WatcherHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IterableDifferHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TransferState), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n\n  DxPivotGridFieldChooserComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: DxPivotGridFieldChooserComponent,\n    selectors: [[\"dx-pivot-grid-field-chooser\"]],\n    inputs: {\n      accessKey: \"accessKey\",\n      activeStateEnabled: \"activeStateEnabled\",\n      allowSearch: \"allowSearch\",\n      applyChangesMode: \"applyChangesMode\",\n      dataSource: \"dataSource\",\n      disabled: \"disabled\",\n      elementAttr: \"elementAttr\",\n      focusStateEnabled: \"focusStateEnabled\",\n      headerFilter: \"headerFilter\",\n      height: \"height\",\n      hint: \"hint\",\n      hoverStateEnabled: \"hoverStateEnabled\",\n      layout: \"layout\",\n      rtlEnabled: \"rtlEnabled\",\n      searchTimeout: \"searchTimeout\",\n      state: \"state\",\n      tabIndex: \"tabIndex\",\n      texts: \"texts\",\n      visible: \"visible\",\n      width: \"width\"\n    },\n    outputs: {\n      onContentReady: \"onContentReady\",\n      onContextMenuPreparing: \"onContextMenuPreparing\",\n      onDisposing: \"onDisposing\",\n      onInitialized: \"onInitialized\",\n      onOptionChanged: \"onOptionChanged\",\n      accessKeyChange: \"accessKeyChange\",\n      activeStateEnabledChange: \"activeStateEnabledChange\",\n      allowSearchChange: \"allowSearchChange\",\n      applyChangesModeChange: \"applyChangesModeChange\",\n      dataSourceChange: \"dataSourceChange\",\n      disabledChange: \"disabledChange\",\n      elementAttrChange: \"elementAttrChange\",\n      focusStateEnabledChange: \"focusStateEnabledChange\",\n      headerFilterChange: \"headerFilterChange\",\n      heightChange: \"heightChange\",\n      hintChange: \"hintChange\",\n      hoverStateEnabledChange: \"hoverStateEnabledChange\",\n      layoutChange: \"layoutChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      searchTimeoutChange: \"searchTimeoutChange\",\n      stateChange: \"stateChange\",\n      tabIndexChange: \"tabIndexChange\",\n      textsChange: \"textsChange\",\n      visibleChange: \"visibleChange\",\n      widthChange: \"widthChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function DxPivotGridFieldChooserComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxPivotGridFieldChooserComponent.prototype, \"accessKey\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxPivotGridFieldChooserComponent.prototype, \"activeStateEnabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxPivotGridFieldChooserComponent.prototype, \"allowSearch\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxPivotGridFieldChooserComponent.prototype, \"applyChangesMode\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", PivotGridDataSource), __metadata(\"design:paramtypes\", [PivotGridDataSource])], DxPivotGridFieldChooserComponent.prototype, \"dataSource\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxPivotGridFieldChooserComponent.prototype, \"disabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxPivotGridFieldChooserComponent.prototype, \"elementAttr\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxPivotGridFieldChooserComponent.prototype, \"focusStateEnabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxPivotGridFieldChooserComponent.prototype, \"headerFilter\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxPivotGridFieldChooserComponent.prototype, \"height\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxPivotGridFieldChooserComponent.prototype, \"hint\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxPivotGridFieldChooserComponent.prototype, \"hoverStateEnabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxPivotGridFieldChooserComponent.prototype, \"layout\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxPivotGridFieldChooserComponent.prototype, \"rtlEnabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], DxPivotGridFieldChooserComponent.prototype, \"searchTimeout\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxPivotGridFieldChooserComponent.prototype, \"state\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], DxPivotGridFieldChooserComponent.prototype, \"tabIndex\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxPivotGridFieldChooserComponent.prototype, \"texts\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxPivotGridFieldChooserComponent.prototype, \"visible\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxPivotGridFieldChooserComponent.prototype, \"width\", null);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxPivotGridFieldChooserComponent.prototype, \"onContentReady\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxPivotGridFieldChooserComponent.prototype, \"onContextMenuPreparing\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxPivotGridFieldChooserComponent.prototype, \"onDisposing\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxPivotGridFieldChooserComponent.prototype, \"onInitialized\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxPivotGridFieldChooserComponent.prototype, \"onOptionChanged\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxPivotGridFieldChooserComponent.prototype, \"accessKeyChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxPivotGridFieldChooserComponent.prototype, \"activeStateEnabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxPivotGridFieldChooserComponent.prototype, \"allowSearchChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxPivotGridFieldChooserComponent.prototype, \"applyChangesModeChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxPivotGridFieldChooserComponent.prototype, \"dataSourceChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxPivotGridFieldChooserComponent.prototype, \"disabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxPivotGridFieldChooserComponent.prototype, \"elementAttrChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxPivotGridFieldChooserComponent.prototype, \"focusStateEnabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxPivotGridFieldChooserComponent.prototype, \"headerFilterChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxPivotGridFieldChooserComponent.prototype, \"heightChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxPivotGridFieldChooserComponent.prototype, \"hintChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxPivotGridFieldChooserComponent.prototype, \"hoverStateEnabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxPivotGridFieldChooserComponent.prototype, \"layoutChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxPivotGridFieldChooserComponent.prototype, \"rtlEnabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxPivotGridFieldChooserComponent.prototype, \"searchTimeoutChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxPivotGridFieldChooserComponent.prototype, \"stateChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxPivotGridFieldChooserComponent.prototype, \"tabIndexChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxPivotGridFieldChooserComponent.prototype, \"textsChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxPivotGridFieldChooserComponent.prototype, \"visibleChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxPivotGridFieldChooserComponent.prototype, \"widthChange\", void 0);\n\n  DxPivotGridFieldChooserComponent = __decorate([__param(7, Inject(PLATFORM_ID)), __metadata(\"design:paramtypes\", [ElementRef, NgZone, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, TransferState, Object])], DxPivotGridFieldChooserComponent);\n  return DxPivotGridFieldChooserComponent;\n})();\nvar DxPivotGridFieldChooserModule = /*#__PURE__*/(function () {\n  var DxPivotGridFieldChooserModule = /*#__PURE__*/_createClass(function DxPivotGridFieldChooserModule() {\n    _classCallCheck(this, DxPivotGridFieldChooserModule);\n  });\n\n  DxPivotGridFieldChooserModule.ɵfac = function DxPivotGridFieldChooserModule_Factory(t) {\n    return new (t || DxPivotGridFieldChooserModule)();\n  };\n\n  DxPivotGridFieldChooserModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: DxPivotGridFieldChooserModule\n  });\n  DxPivotGridFieldChooserModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[DxoHeaderFilterModule, DxoTextsModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxoHeaderFilterModule, DxoTextsModule, DxTemplateModule]\n  });\n  return DxPivotGridFieldChooserModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxPivotGridFieldChooserModule, {\n    declarations: function declarations() {\n      return [DxPivotGridFieldChooserComponent];\n    },\n    imports: function imports() {\n      return [DxoHeaderFilterModule, DxoTextsModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule];\n    },\n    exports: function exports() {\n      return [DxPivotGridFieldChooserComponent, DxoHeaderFilterModule, DxoTextsModule, DxTemplateModule];\n    }\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DxPivotGridFieldChooserComponent, DxPivotGridFieldChooserModule }; //# sourceMappingURL=devextreme-angular-ui-pivot-grid-field-chooser.js.map","map":null,"metadata":{},"sourceType":"module"}