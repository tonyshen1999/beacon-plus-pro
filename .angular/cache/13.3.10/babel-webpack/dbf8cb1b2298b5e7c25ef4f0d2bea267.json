{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.state_storing_core.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { getWindow } from \"../../core/utils/window\";\nimport modules from \"./ui.grid_core.modules\";\nimport errors from \"../widget/ui.errors\";\nimport { sessionStorage } from \"../../core/utils/storage\";\nimport { extend } from \"../../core/utils/extend\";\nimport { each } from \"../../core/utils/iterator\";\nimport { isDefined, isPlainObject, isEmptyObject } from \"../../core/utils/type\";\nimport { fromPromise } from \"../../core/utils/deferred\";\nvar DATE_REGEX = /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*)?)Z$/;\n\nvar parseDates = function parseDates(state) {\n  if (!state) {\n    return;\n  }\n\n  each(state, function (key, value) {\n    if (isPlainObject(value) || Array.isArray(value)) {\n      parseDates(value);\n    } else if (\"string\" === typeof value) {\n      var date = DATE_REGEX.exec(value);\n\n      if (date) {\n        state[key] = new Date(Date.UTC(+date[1], +date[2] - 1, +date[3], +date[4], +date[5], +date[6]));\n      }\n    }\n  });\n};\n\nexport var StateStoringController = modules.ViewController.inherit(function () {\n  var getStorage = function getStorage(options) {\n    var storage = \"sessionStorage\" === options.type ? sessionStorage() : getWindow().localStorage;\n\n    if (!storage) {\n      throw new Error(\"E1007\");\n    }\n\n    return storage;\n  };\n\n  var getUniqueStorageKey = function getUniqueStorageKey(options) {\n    return isDefined(options.storageKey) ? options.storageKey : \"storage\";\n  };\n\n  return {\n    _loadState: function _loadState() {\n      var options = this.option(\"stateStoring\");\n\n      if (\"custom\" === options.type) {\n        return options.customLoad && options.customLoad();\n      }\n\n      try {\n        return JSON.parse(getStorage(options).getItem(getUniqueStorageKey(options)));\n      } catch (e) {\n        errors.log(e.message);\n      }\n    },\n    _saveState: function _saveState(state) {\n      var options = this.option(\"stateStoring\");\n\n      if (\"custom\" === options.type) {\n        options.customSave && options.customSave(state);\n        return;\n      }\n\n      try {\n        getStorage(options).setItem(getUniqueStorageKey(options), JSON.stringify(state));\n      } catch (e) {\n        errors.log(e.message);\n      }\n    },\n    publicMethods: function publicMethods() {\n      return [\"state\"];\n    },\n    isEnabled: function isEnabled() {\n      return this.option(\"stateStoring.enabled\");\n    },\n    init: function init() {\n      var that = this;\n      that._state = {};\n      that._isLoaded = false;\n      that._isLoading = false;\n\n      that._windowUnloadHandler = function () {\n        if (void 0 !== that._savingTimeoutID) {\n          that._saveState(that.state());\n        }\n      };\n\n      eventsEngine.on(getWindow(), \"unload\", that._windowUnloadHandler);\n      return that;\n    },\n    isLoaded: function isLoaded() {\n      return this._isLoaded;\n    },\n    isLoading: function isLoading() {\n      return this._isLoading;\n    },\n    load: function load() {\n      var _this = this;\n\n      this._isLoading = true;\n      var loadResult = fromPromise(this._loadState());\n      loadResult.always(function () {\n        _this._isLoaded = true;\n        _this._isLoading = false;\n      }).done(function (state) {\n        if (null !== state && !isEmptyObject(state)) {\n          _this.state(state);\n        }\n      });\n      return loadResult;\n    },\n    state: function state(_state) {\n      var that = this;\n\n      if (!arguments.length) {\n        return extend(true, {}, that._state);\n      } else {\n        that._state = extend({}, _state);\n        parseDates(that._state);\n      }\n    },\n    save: function save() {\n      var that = this;\n      clearTimeout(that._savingTimeoutID);\n      that._savingTimeoutID = setTimeout(function () {\n        that._saveState(that.state());\n\n        that._savingTimeoutID = void 0;\n      }, that.option(\"stateStoring.savingTimeout\"));\n    },\n    optionChanged: function optionChanged(args) {\n      switch (args.name) {\n        case \"stateStoring\":\n          if (this.isEnabled() && !this.isLoading()) {\n            this.load();\n          }\n\n          args.handled = true;\n          break;\n\n        default:\n          this.callBase(args);\n      }\n    },\n    dispose: function dispose() {\n      clearTimeout(this._savingTimeoutID);\n      eventsEngine.off(getWindow(), \"unload\", this._windowUnloadHandler);\n    }\n  };\n}());","map":null,"metadata":{},"sourceType":"module"}