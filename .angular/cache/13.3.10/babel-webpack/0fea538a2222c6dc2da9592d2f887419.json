{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/cells_selection_controller.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { isDateAndTimeView } from \"../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\nexport var CellsSelectionController = /*#__PURE__*/function () {\n  function CellsSelectionController() {\n    _classCallCheck(this, CellsSelectionController);\n  }\n\n  _createClass(CellsSelectionController, [{\n    key: \"handleArrowClick\",\n    value: function handleArrowClick(options) {\n      var key = options.key,\n          focusedCellPosition = options.focusedCellPosition,\n          edgeIndices = options.edgeIndices,\n          getCellDataByPosition = options.getCellDataByPosition,\n          isAllDayPanelCell = options.isAllDayPanelCell;\n      var nextCellIndices;\n\n      switch (key) {\n        case \"down\":\n          nextCellIndices = this.getCellFromNextRowPosition(focusedCellPosition, \"next\", edgeIndices);\n          break;\n\n        case \"up\":\n          nextCellIndices = this.getCellFromNextRowPosition(focusedCellPosition, \"prev\", edgeIndices);\n          break;\n\n        case \"left\":\n          nextCellIndices = this.getCellFromNextColumnPosition(_extends({}, options, {\n            direction: \"prev\"\n          }));\n          break;\n\n        case \"right\":\n          nextCellIndices = this.getCellFromNextColumnPosition(_extends({}, options, {\n            direction: \"next\"\n          }));\n      }\n\n      var currentCellData = getCellDataByPosition(nextCellIndices.rowIndex, nextCellIndices.columnIndex, isAllDayPanelCell);\n      return this.moveToCell(_extends({}, options, {\n        currentCellData: currentCellData\n      }));\n    }\n  }, {\n    key: \"getCellFromNextRowPosition\",\n    value: function getCellFromNextRowPosition(focusedCellPosition, direction, edgeIndices) {\n      var columnIndex = focusedCellPosition.columnIndex,\n          rowIndex = focusedCellPosition.rowIndex;\n      var deltaPosition = \"next\" === direction ? 1 : -1;\n      var nextRowIndex = rowIndex + deltaPosition;\n      var validRowIndex = nextRowIndex >= 0 && nextRowIndex <= edgeIndices.lastRowIndex ? nextRowIndex : rowIndex;\n      return {\n        columnIndex: columnIndex,\n        rowIndex: validRowIndex\n      };\n    }\n  }, {\n    key: \"getCellFromNextColumnPosition\",\n    value: function getCellFromNextColumnPosition(options) {\n      var focusedCellPosition = options.focusedCellPosition,\n          direction = options.direction,\n          edgeIndices = options.edgeIndices,\n          isRTL = options.isRTL,\n          isGroupedByDate = options.isGroupedByDate,\n          groupCount = options.groupCount,\n          isMultiSelection = options.isMultiSelection,\n          viewType = options.viewType;\n      var columnIndex = focusedCellPosition.columnIndex,\n          rowIndex = focusedCellPosition.rowIndex;\n      var firstColumnIndex = edgeIndices.firstColumnIndex,\n          lastColumnIndex = edgeIndices.lastColumnIndex,\n          firstRowIndex = edgeIndices.firstRowIndex,\n          lastRowIndex = edgeIndices.lastRowIndex;\n      var step = isGroupedByDate && isMultiSelection ? groupCount : 1;\n      var sign = isRTL ? -1 : 1;\n      var deltaColumnIndex = \"next\" === direction ? sign * step : -1 * sign * step;\n      var nextColumnIndex = columnIndex + deltaColumnIndex;\n      var isValidColumnIndex = nextColumnIndex >= firstColumnIndex && nextColumnIndex <= lastColumnIndex;\n\n      if (isValidColumnIndex) {\n        return {\n          columnIndex: nextColumnIndex,\n          rowIndex: rowIndex\n        };\n      }\n\n      return isDateAndTimeView(viewType) ? focusedCellPosition : this._processEdgeCell({\n        nextColumnIndex: nextColumnIndex,\n        rowIndex: rowIndex,\n        columnIndex: columnIndex,\n        firstColumnIndex: firstColumnIndex,\n        lastColumnIndex: lastColumnIndex,\n        firstRowIndex: firstRowIndex,\n        lastRowIndex: lastRowIndex,\n        step: step\n      });\n    }\n  }, {\n    key: \"_processEdgeCell\",\n    value: function _processEdgeCell(options) {\n      var nextColumnIndex = options.nextColumnIndex,\n          rowIndex = options.rowIndex,\n          columnIndex = options.columnIndex,\n          firstColumnIndex = options.firstColumnIndex,\n          lastColumnIndex = options.lastColumnIndex,\n          firstRowIndex = options.firstRowIndex,\n          lastRowIndex = options.lastRowIndex,\n          step = options.step;\n      var validColumnIndex = nextColumnIndex;\n      var validRowIndex = rowIndex;\n      var isLeftEdgeCell = nextColumnIndex < firstColumnIndex;\n      var isRightEdgeCell = nextColumnIndex > lastColumnIndex;\n\n      if (isLeftEdgeCell) {\n        var columnIndexInNextRow = lastColumnIndex - (step - columnIndex % step - 1);\n        var nextRowIndex = rowIndex - 1;\n        var isValidRowIndex = nextRowIndex >= firstRowIndex;\n        validRowIndex = isValidRowIndex ? nextRowIndex : rowIndex;\n        validColumnIndex = isValidRowIndex ? columnIndexInNextRow : columnIndex;\n      }\n\n      if (isRightEdgeCell) {\n        var _columnIndexInNextRow = firstColumnIndex + columnIndex % step;\n\n        var _nextRowIndex = rowIndex + 1;\n\n        var _isValidRowIndex = _nextRowIndex <= lastRowIndex;\n\n        validRowIndex = _isValidRowIndex ? _nextRowIndex : rowIndex;\n        validColumnIndex = _isValidRowIndex ? _columnIndexInNextRow : columnIndex;\n      }\n\n      return {\n        columnIndex: validColumnIndex,\n        rowIndex: validRowIndex\n      };\n    }\n  }, {\n    key: \"moveToCell\",\n    value: function moveToCell(options) {\n      var isMultiSelection = options.isMultiSelection,\n          isMultiSelectionAllowed = options.isMultiSelectionAllowed,\n          focusedCellData = options.focusedCellData,\n          currentCellData = options.currentCellData;\n      var isValidMultiSelection = isMultiSelection && isMultiSelectionAllowed;\n      var nextFocusedCellData = isValidMultiSelection ? this._getNextCellData(currentCellData, focusedCellData) : currentCellData;\n      return nextFocusedCellData;\n    }\n  }, {\n    key: \"_getNextCellData\",\n    value: function _getNextCellData(nextFocusedCellData, focusedCellData, isVirtualCell) {\n      if (isVirtualCell) {\n        return focusedCellData;\n      }\n\n      var isValidNextFocusedCell = this._isValidNextFocusedCell(nextFocusedCellData, focusedCellData);\n\n      return isValidNextFocusedCell ? nextFocusedCellData : focusedCellData;\n    }\n  }, {\n    key: \"_isValidNextFocusedCell\",\n    value: function _isValidNextFocusedCell(nextFocusedCellData, focusedCellData) {\n      if (!focusedCellData) {\n        return true;\n      }\n\n      var groupIndex = focusedCellData.groupIndex,\n          allDay = focusedCellData.allDay;\n      var nextGroupIndex = nextFocusedCellData.groupIndex,\n          nextAllDay = nextFocusedCellData.allDay;\n      return groupIndex === nextGroupIndex && allDay === nextAllDay;\n    }\n  }]);\n\n  return CellsSelectionController;\n}();","map":null,"metadata":{},"sourceType":"module"}