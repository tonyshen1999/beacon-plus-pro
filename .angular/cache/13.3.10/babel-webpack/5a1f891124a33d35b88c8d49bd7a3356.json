{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/gauges/base_gauge.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nvar _Number = Number;\nimport { getAppropriateFormat as _getAppropriateFormat } from \"../core/utils\";\nimport { extend } from \"../../core/utils/extend\";\nimport { Translator1D } from \"../translators/translator1d\";\nvar _extend = extend;\nimport BaseWidget from \"../core/base_widget\";\nimport themeManagerModule from \"./theme_manager\";\nimport Tracker from \"./tracker\";\nimport formatHelper from \"../../format_helper\";\nimport { plugin as exportPlugin } from \"../core/export\";\nimport { plugin as titlePlugin } from \"../core/title\";\nimport { plugin as tooltipPlugin } from \"../core/tooltip\";\nimport { plugin as loadingIndicatorPlugin } from \"../core/loading_indicator\";\nvar _format = formatHelper.format;\nexport var BaseGauge = BaseWidget.inherit({\n  _rootClassPrefix: \"dxg\",\n  _themeSection: \"gauge\",\n  _createThemeManager: function _createThemeManager() {\n    return new themeManagerModule.ThemeManager(this._getThemeManagerOptions());\n  },\n  _initCore: function _initCore() {\n    var root = this._renderer.root;\n    this._valueChangingLocker = 0;\n    this._translator = this._factory.createTranslator();\n    this._tracker = this._factory.createTracker({\n      renderer: this._renderer,\n      container: root\n    });\n\n    this._setTrackerCallbacks();\n  },\n  _beginValueChanging: function _beginValueChanging() {\n    this._resetIsReady();\n\n    this._onBeginUpdate();\n\n    ++this._valueChangingLocker;\n  },\n  _endValueChanging: function _endValueChanging() {\n    if (0 === --this._valueChangingLocker) {\n      this._drawn();\n    }\n  },\n  _setTrackerCallbacks: function _setTrackerCallbacks() {\n    var renderer = this._renderer;\n    var tooltip = this._tooltip;\n\n    this._tracker.setCallbacks({\n      \"tooltip-show\": function tooltipShow(target, info, callback) {\n        var tooltipParameters = target.getTooltipParameters();\n        var offset = renderer.getRootOffset();\n\n        var formatObject = _extend({\n          value: tooltipParameters.value,\n          valueText: tooltip.formatValue(tooltipParameters.value),\n          color: tooltipParameters.color\n        }, info);\n\n        return tooltip.show(formatObject, {\n          x: tooltipParameters.x + offset.left,\n          y: tooltipParameters.y + offset.top,\n          offset: tooltipParameters.offset\n        }, {\n          target: info\n        }, void 0, callback);\n      },\n      \"tooltip-hide\": function tooltipHide() {\n        return tooltip.hide();\n      }\n    });\n  },\n  _dispose: function _dispose() {\n    this._cleanCore();\n\n    this.callBase.apply(this, arguments);\n  },\n  _disposeCore: function _disposeCore() {\n    this._themeManager.dispose();\n\n    this._tracker.dispose();\n\n    this._translator = this._tracker = null;\n  },\n  _cleanCore: function _cleanCore() {\n    this._tracker.deactivate();\n\n    this._cleanContent();\n  },\n  _renderCore: function _renderCore() {\n    if (!this._isValidDomain) {\n      return;\n    }\n\n    this._renderContent();\n\n    this._tracker.setTooltipState(this._tooltip.isEnabled());\n\n    this._tracker.activate();\n\n    this._noAnimation = false;\n  },\n  _applyChanges: function _applyChanges() {\n    this.callBase.apply(this, arguments);\n    this._resizing = this._noAnimation = false;\n  },\n  _setContentSize: function _setContentSize() {\n    var that = this;\n    that._resizing = that._noAnimation = 2 === that._changes.count();\n    that.callBase.apply(that, arguments);\n  },\n  _applySize: function _applySize(rect) {\n    this._innerRect = {\n      left: rect[0],\n      top: rect[1],\n      right: rect[2],\n      bottom: rect[3]\n    };\n    var layoutCache = this._layout._cache;\n\n    this._cleanCore();\n\n    this._renderCore();\n\n    this._layout._cache = this._layout._cache || layoutCache;\n    return [rect[0], this._innerRect.top, rect[2], this._innerRect.bottom];\n  },\n  _initialChanges: [\"DOMAIN\"],\n  _themeDependentChanges: [\"DOMAIN\"],\n  _optionChangesMap: {\n    subtitle: \"MOSTLY_TOTAL\",\n    indicator: \"MOSTLY_TOTAL\",\n    geometry: \"MOSTLY_TOTAL\",\n    animation: \"MOSTLY_TOTAL\",\n    startValue: \"DOMAIN\",\n    endValue: \"DOMAIN\"\n  },\n  _optionChangesOrder: [\"DOMAIN\", \"MOSTLY_TOTAL\"],\n  _change_DOMAIN: function _change_DOMAIN() {\n    this._setupDomain();\n  },\n  _change_MOSTLY_TOTAL: function _change_MOSTLY_TOTAL() {\n    this._applyMostlyTotalChange();\n  },\n  _setupDomain: function _setupDomain() {\n    this._setupDomainCore();\n\n    this._isValidDomain = isFinite(1 / (this._translator.getDomain()[1] - this._translator.getDomain()[0]));\n\n    if (!this._isValidDomain) {\n      this._incidentOccurred(\"W2301\");\n    }\n\n    this._change([\"MOSTLY_TOTAL\"]);\n  },\n  _applyMostlyTotalChange: function _applyMostlyTotalChange() {\n    this._setupCodomain();\n\n    this._setupAnimationSettings();\n\n    this._setupDefaultFormat();\n\n    this._change([\"LAYOUT\"]);\n  },\n  _setupAnimationSettings: function _setupAnimationSettings() {\n    var option = this.option(\"animation\");\n    this._animationSettings = null;\n\n    if (void 0 === option || option) {\n      option = _extend({\n        enabled: true,\n        duration: 1e3,\n        easing: \"easeOutCubic\"\n      }, option);\n\n      if (option.enabled && option.duration > 0) {\n        this._animationSettings = {\n          duration: _Number(option.duration),\n          easing: option.easing\n        };\n      }\n    }\n\n    this._containerBackgroundColor = this.option(\"containerBackgroundColor\") || this._themeManager.theme().containerBackgroundColor;\n  },\n  _setupDefaultFormat: function _setupDefaultFormat() {\n    var domain = this._translator.getDomain();\n\n    this._defaultFormatOptions = _getAppropriateFormat(domain[0], domain[1], this._getApproximateScreenRange());\n  },\n  _setupDomainCore: null,\n  _calculateSize: null,\n  _cleanContent: null,\n  _renderContent: null,\n  _setupCodomain: null,\n  _getApproximateScreenRange: null,\n  _factory: {\n    createTranslator: function createTranslator() {\n      return new Translator1D();\n    },\n    createTracker: function createTracker(parameters) {\n      return new Tracker(parameters);\n    }\n  }\n});\nexport var formatValue = function formatValue(value, options, extra) {\n  options = options || {};\n\n  var text = _format(value, options.format);\n\n  var formatObject;\n\n  if (\"function\" === typeof options.customizeText) {\n    formatObject = _extend({\n      value: value,\n      valueText: text\n    }, extra);\n    return String(options.customizeText.call(formatObject, formatObject));\n  }\n\n  return text;\n};\nexport var getSampleText = function getSampleText(translator, options) {\n  var text1 = formatValue(translator.getDomainStart(), options);\n  var text2 = formatValue(translator.getDomainEnd(), options);\n  return text1.length >= text2.length ? text1 : text2;\n};\nexport function compareArrays(array1, array2) {\n  return array1 && array2 && array1.length === array2.length && compareArraysElements(array1, array2);\n}\n\nfunction compareArraysElements(array1, array2) {\n  var i;\n  var ii = array1.length;\n  var array1ValueIsNaN;\n  var array2ValueIsNaN;\n\n  for (i = 0; i < ii; ++i) {\n    array1ValueIsNaN = array1[i] !== array1[i];\n    array2ValueIsNaN = array2[i] !== array2[i];\n\n    if (array1ValueIsNaN && array2ValueIsNaN) {\n      continue;\n    }\n\n    if (array1[i] !== array2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nBaseGauge.addPlugin(exportPlugin);\nBaseGauge.addPlugin(titlePlugin);\nBaseGauge.addPlugin(tooltipPlugin);\nBaseGauge.addPlugin(loadingIndicatorPlugin);\nvar _setTooltipOptions = BaseGauge.prototype._setTooltipOptions;\n\nBaseGauge.prototype._setTooltipOptions = function () {\n  _setTooltipOptions.apply(this, arguments);\n\n  this._tracker && this._tracker.setTooltipState(this._tooltip.isEnabled());\n};","map":null,"metadata":{},"sourceType":"module"}