{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/tree_map/api.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport TreeMapBase from \"./tree_map.base\";\nimport Node from \"./node\";\nimport { extend as _extend } from \"../../core/utils/extend\";\nimport { noop } from \"../../core/utils/common\";\nvar proto = TreeMapBase.prototype;\nvar nodeProto = Node.prototype;\nproto._eventsMap.onNodesInitialized = {\n  name: \"nodesInitialized\"\n};\nproto._eventsMap.onNodesRendering = {\n  name: \"nodesRendering\"\n};\n\nproto._createProxyType = function () {\n  var that = this;\n  var nodes;\n  Proxy.prototype = {\n    constructor: Proxy,\n    getParent: function getParent() {\n      return nodes[this._id].parent.proxy || null;\n    },\n    getChild: function getChild(index) {\n      var _nodes = nodes[this._id].nodes;\n      return _nodes ? _nodes[index].proxy : null;\n    },\n    getChildrenCount: function getChildrenCount() {\n      var _nodes = nodes[this._id].nodes;\n      return _nodes ? _nodes.length : 0;\n    },\n    getAllChildren: function getAllChildren() {\n      var _nodes = nodes[this._id].nodes;\n      var i;\n      var ii = _nodes && _nodes.length;\n      var list = [];\n\n      for (i = 0; i < ii; ++i) {\n        list.push(_nodes[i].proxy);\n      }\n\n      return list;\n    },\n    getAllNodes: function getAllNodes() {\n      var list = [];\n      collectNodes(nodes[this._id], list);\n      return list;\n    },\n    isLeaf: function isLeaf() {\n      return !nodes[this._id].isNode();\n    },\n    isActive: function isActive() {\n      return nodes[this._id].isActive();\n    },\n    value: function value(arg) {\n      var node = nodes[this._id];\n      var result;\n\n      if (void 0 !== arg) {\n        updateValue(node, arg > 0 ? Number(arg) : 0);\n        change(node, [\"TILING\"]);\n        result = this;\n      } else {\n        result = node.value;\n      }\n\n      return result;\n    },\n    label: function label(arg) {\n      var node = nodes[this._id];\n      var result;\n\n      if (void 0 !== arg) {\n        node.customLabel = arg ? String(arg) : null;\n        change(node, [\"LABELS\"]);\n        result = this;\n      } else {\n        result = node.customLabel || node.label;\n      }\n\n      return result;\n    },\n    customize: function customize(settings) {\n      var node = nodes[this._id];\n\n      if (settings) {\n        node._custom = node._custom || {};\n\n        _extend(true, node._custom, settings);\n\n        node._partialState = node._partialLabelState = null;\n      }\n\n      change(node, [\"TILES\", \"LABELS\"]);\n      return this;\n    },\n    resetCustomization: function resetCustomization() {\n      var node = nodes[this._id];\n      node._custom = node._partialState = node._partialLabelState = null;\n      change(node, [\"TILES\", \"LABELS\"]);\n      return this;\n    }\n  };\n\n  that._extendProxyType(Proxy.prototype);\n\n  function Proxy(node) {\n    node.proxy = this;\n    this._id = node._id;\n    this.level = node.level;\n    this.index = node.index;\n    this.data = node.data;\n  }\n\n  that._handlers.beginBuildNodes = function () {\n    nodes = that._nodes;\n    new Proxy(that._root);\n  };\n\n  that._handlers.buildNode = function (node) {\n    new Proxy(node);\n  };\n\n  that._handlers.endBuildNodes = function () {\n    that._eventTrigger(\"nodesInitialized\", {\n      root: that._root.proxy\n    });\n  };\n};\n\nfunction change(node, codes) {\n  var ctx = node.ctx;\n  ctx.suspend();\n  ctx.change(codes);\n  ctx.resume();\n}\n\nfunction collectNodes(node, list) {\n  var nodes = node.nodes;\n  var i;\n  var ii = nodes && nodes.length;\n\n  for (i = 0; i < ii; ++i) {\n    list.push(nodes[i].proxy);\n    collectNodes(nodes[i], list);\n  }\n}\n\nfunction updateValue(node, value) {\n  var delta = value - node.value;\n\n  while (node) {\n    node.value += delta;\n    node = node.parent;\n  }\n}\n\nproto._extendProxyType = noop;\nvar _resetNodes = proto._resetNodes;\n\nproto._resetNodes = function () {\n  _resetNodes.call(this);\n\n  this._eventTrigger(\"nodesRendering\", {\n    node: this._topNode.proxy\n  });\n};\n\nvar _updateStyles = nodeProto.updateStyles;\n\nnodeProto.updateStyles = function () {\n  _updateStyles.call(this);\n\n  if (this._custom) {\n    this._partialState = !this.ctx.forceReset && this._partialState || this.ctx.calculateState(this._custom);\n\n    _extend(true, this.state, this._partialState);\n  }\n};\n\nvar _updateLabelStyle = nodeProto.updateLabelStyle;\n\nnodeProto.updateLabelStyle = function () {\n  var custom = this._custom;\n\n  _updateLabelStyle.call(this);\n\n  if (custom && custom.label) {\n    this._partialLabelState = !this.ctx.forceReset && this._partialLabelState || calculatePartialLabelState(this, custom.label);\n    this.labelState = _extend(true, {}, this.labelState, this._partialLabelState);\n  }\n};\n\nfunction calculatePartialLabelState(node, settings) {\n  var state = node.ctx.calculateLabelState(settings);\n\n  if (\"visible\" in settings) {\n    state.visible = !!settings.visible;\n  }\n\n  return state;\n}\n\nproto.getRootNode = function () {\n  return this._root.proxy;\n};\n\nproto.resetNodes = function () {\n  var context = this._context;\n  context.suspend();\n  context.change([\"NODES_CREATE\"]);\n  context.resume();\n  return this;\n};","map":null,"metadata":{},"sourceType":"module"}