{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/pivot_grid/ui.pivot_grid.data_area.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { AreaItem } from \"./ui.pivot_grid.area_item\";\nimport { nativeScrolling } from \"../../core/utils/support\";\nimport { calculateScrollbarWidth } from \"./utils/calculate_scrollbar_width\";\nvar PIVOTGRID_AREA_CLASS = \"dx-pivotgrid-area\";\nvar PIVOTGRID_AREA_DATA_CLASS = \"dx-pivotgrid-area-data\";\nvar PIVOTGRID_TOTAL_CLASS = \"dx-total\";\nvar PIVOTGRID_GRAND_TOTAL_CLASS = \"dx-grandtotal\";\nvar PIVOTGRID_ROW_TOTAL_CLASS = \"dx-row-total\";\nexport var DataArea = AreaItem.inherit({\n  _getAreaName: function _getAreaName() {\n    return \"data\";\n  },\n  _createGroupElement: function _createGroupElement() {\n    return $(\"<div>\").addClass(PIVOTGRID_AREA_CLASS).addClass(PIVOTGRID_AREA_DATA_CLASS).css(\"borderTopWidth\", 0);\n  },\n  _applyCustomStyles: function _applyCustomStyles(options) {\n    var cell = options.cell;\n    var classArray = options.classArray;\n\n    if (\"T\" === cell.rowType || \"T\" === cell.columnType) {\n      classArray.push(PIVOTGRID_TOTAL_CLASS);\n    }\n\n    if (\"GT\" === cell.rowType || \"GT\" === cell.columnType) {\n      classArray.push(PIVOTGRID_GRAND_TOTAL_CLASS);\n    }\n\n    if (\"T\" === cell.rowType || \"GT\" === cell.rowType) {\n      classArray.push(PIVOTGRID_ROW_TOTAL_CLASS);\n    }\n\n    if (options.rowIndex === options.rowsCount - 1) {\n      options.cssArray.push(\"border-bottom: 0px\");\n    }\n\n    this.callBase(options);\n  },\n  _moveFakeTable: function _moveFakeTable(scrollPos) {\n    this._moveFakeTableHorizontally(scrollPos.x);\n\n    this._moveFakeTableTop(scrollPos.y);\n\n    this.callBase();\n  },\n  renderScrollable: function renderScrollable() {\n    this._groupElement.dxScrollable({\n      useNative: this.getUseNativeValue(),\n      useSimulatedScrollbar: false,\n      rtlEnabled: this.component.option(\"rtlEnabled\"),\n      bounceEnabled: false,\n      updateManually: true\n    });\n  },\n  getUseNativeValue: function getUseNativeValue() {\n    var _this$component$optio = this.component.option(\"scrolling\"),\n        useNative = _this$component$optio.useNative;\n\n    return \"auto\" === useNative ? !!nativeScrolling : !!useNative;\n  },\n  getScrollbarWidth: function getScrollbarWidth() {\n    return this.getUseNativeValue() ? calculateScrollbarWidth() : 0;\n  },\n  updateScrollableOptions: function updateScrollableOptions(_ref) {\n    var direction = _ref.direction,\n        rtlEnabled = _ref.rtlEnabled;\n\n    var scrollable = this._getScrollable();\n\n    scrollable.option(\"useNative\", this.getUseNativeValue());\n    scrollable.option({\n      direction: direction,\n      rtlEnabled: rtlEnabled\n    });\n  },\n  getScrollableDirection: function getScrollableDirection(horizontal, vertical) {\n    if (horizontal && !vertical) {\n      return \"horizontal\";\n    } else if (!horizontal && vertical) {\n      return \"vertical\";\n    }\n\n    return \"both\";\n  },\n  reset: function reset() {\n    this.callBase();\n\n    if (this._virtualContent) {\n      this._virtualContent.parent().css(\"height\", \"auto\");\n    }\n  },\n  setVirtualContentParams: function setVirtualContentParams(params) {\n    this.callBase(params);\n\n    this._virtualContent.parent().css(\"height\", params.height);\n\n    this._setTableCss({\n      top: params.top,\n      left: params.left\n    });\n  }\n});","map":null,"metadata":{},"sourceType":"module"}