{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __decorate, __metadata, __param } from 'tslib';\nimport { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, Component, NgModule } from '@angular/core';\nimport DxScrollView from 'devextreme/ui/scroll_view';\nimport { DxComponent, DxTemplateHost, WatcherHelper, NestedOptionHost, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\n/*!\r\n * devextreme-angular\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\n/**\r\n * The ScrollView is a UI component that enables a user to scroll its content.\r\n\r\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'devextreme-angular/core';\nimport * as ɵngcc2 from '@angular/platform-browser';\nvar _c0 = [\"*\"];\nvar DxScrollViewComponent = /*#__PURE__*/(function () {\n  var DxScrollViewComponent = /*#__PURE__*/function (_DxComponent) {\n    _inherits(DxScrollViewComponent, _DxComponent);\n\n    var _super = _createSuper(DxScrollViewComponent);\n\n    function DxScrollViewComponent(elementRef, ngZone, templateHost, _watcherHelper, optionHost, transferState, platformId) {\n      var _this;\n\n      _classCallCheck(this, DxScrollViewComponent);\n\n      _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n\n      _this._createEventEmitters([{\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        subscribe: 'pullDown',\n        emit: 'onPullDown'\n      }, {\n        subscribe: 'reachBottom',\n        emit: 'onReachBottom'\n      }, {\n        subscribe: 'scroll',\n        emit: 'onScroll'\n      }, {\n        subscribe: 'updated',\n        emit: 'onUpdated'\n      }, {\n        emit: 'bounceEnabledChange'\n      }, {\n        emit: 'directionChange'\n      }, {\n        emit: 'disabledChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'heightChange'\n      }, {\n        emit: 'pulledDownTextChange'\n      }, {\n        emit: 'pullingDownTextChange'\n      }, {\n        emit: 'reachBottomTextChange'\n      }, {\n        emit: 'refreshingTextChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'scrollByContentChange'\n      }, {\n        emit: 'scrollByThumbChange'\n      }, {\n        emit: 'showScrollbarChange'\n      }, {\n        emit: 'useNativeChange'\n      }, {\n        emit: 'widthChange'\n      }]);\n\n      optionHost.setHost(_assertThisInitialized(_this));\n      return _this;\n    }\n    /**\r\n     * A Boolean value specifying whether to enable or disable the bounce-back effect.\r\n    \r\n     */\n\n\n    _createClass(DxScrollViewComponent, [{\n      key: \"bounceEnabled\",\n      get: function get() {\n        return this._getOption('bounceEnabled');\n      },\n      set: function set(value) {\n        this._setOption('bounceEnabled', value);\n      }\n      /**\r\n       * A string value specifying the available scrolling directions.\r\n      \r\n       */\n\n    }, {\n      key: \"direction\",\n      get: function get() {\n        return this._getOption('direction');\n      },\n      set: function set(value) {\n        this._setOption('direction', value);\n      }\n      /**\r\n       * Specifies whether the UI component responds to user interaction.\r\n      \r\n       */\n\n    }, {\n      key: \"disabled\",\n      get: function get() {\n        return this._getOption('disabled');\n      },\n      set: function set(value) {\n        this._setOption('disabled', value);\n      }\n      /**\r\n       * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n      \r\n       */\n\n    }, {\n      key: \"elementAttr\",\n      get: function get() {\n        return this._getOption('elementAttr');\n      },\n      set: function set(value) {\n        this._setOption('elementAttr', value);\n      }\n      /**\r\n       * Specifies the UI component&apos;s height.\r\n      \r\n       */\n\n    }, {\n      key: \"height\",\n      get: function get() {\n        return this._getOption('height');\n      },\n      set: function set(value) {\n        this._setOption('height', value);\n      }\n      /**\r\n       * Specifies the text shown in the pullDown panel when pulling the content down lowers the refresh threshold.\r\n      \r\n       */\n\n    }, {\n      key: \"pulledDownText\",\n      get: function get() {\n        return this._getOption('pulledDownText');\n      },\n      set: function set(value) {\n        this._setOption('pulledDownText', value);\n      }\n      /**\r\n       * Specifies the text shown in the pullDown panel while pulling the content down to the refresh threshold.\r\n      \r\n       */\n\n    }, {\n      key: \"pullingDownText\",\n      get: function get() {\n        return this._getOption('pullingDownText');\n      },\n      set: function set(value) {\n        this._setOption('pullingDownText', value);\n      }\n      /**\r\n       * Specifies the text shown in the pullDown panel displayed when content is scrolled to the bottom.\r\n      \r\n       */\n\n    }, {\n      key: \"reachBottomText\",\n      get: function get() {\n        return this._getOption('reachBottomText');\n      },\n      set: function set(value) {\n        this._setOption('reachBottomText', value);\n      }\n      /**\r\n       * Specifies the text shown in the pullDown panel displayed when the content is being refreshed.\r\n      \r\n       */\n\n    }, {\n      key: \"refreshingText\",\n      get: function get() {\n        return this._getOption('refreshingText');\n      },\n      set: function set(value) {\n        this._setOption('refreshingText', value);\n      }\n      /**\r\n       * Switches the UI component to a right-to-left representation.\r\n      \r\n       */\n\n    }, {\n      key: \"rtlEnabled\",\n      get: function get() {\n        return this._getOption('rtlEnabled');\n      },\n      set: function set(value) {\n        this._setOption('rtlEnabled', value);\n      }\n      /**\r\n       * A Boolean value specifying whether or not an end-user can scroll the UI component content swiping it up or down. Applies only if useNative is false\r\n      \r\n       */\n\n    }, {\n      key: \"scrollByContent\",\n      get: function get() {\n        return this._getOption('scrollByContent');\n      },\n      set: function set(value) {\n        this._setOption('scrollByContent', value);\n      }\n      /**\r\n       * Specifies whether a user can scroll the content with the scrollbar. Applies only if useNative is false.\r\n      \r\n       */\n\n    }, {\n      key: \"scrollByThumb\",\n      get: function get() {\n        return this._getOption('scrollByThumb');\n      },\n      set: function set(value) {\n        this._setOption('scrollByThumb', value);\n      }\n      /**\r\n       * Specifies when the UI component shows the scrollbar.\r\n      \r\n       */\n\n    }, {\n      key: \"showScrollbar\",\n      get: function get() {\n        return this._getOption('showScrollbar');\n      },\n      set: function set(value) {\n        this._setOption('showScrollbar', value);\n      }\n      /**\r\n       * Indicates whether to use native or simulated scrolling.\r\n      \r\n       */\n\n    }, {\n      key: \"useNative\",\n      get: function get() {\n        return this._getOption('useNative');\n      },\n      set: function set(value) {\n        this._setOption('useNative', value);\n      }\n      /**\r\n       * Specifies the UI component&apos;s width.\r\n      \r\n       */\n\n    }, {\n      key: \"width\",\n      get: function get() {\n        return this._getOption('width');\n      },\n      set: function set(value) {\n        this._setOption('width', value);\n      }\n    }, {\n      key: \"_createInstance\",\n      value: function _createInstance(element, options) {\n        return new DxScrollView(element, options);\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._destroyWidget();\n      }\n    }]);\n\n    return DxScrollViewComponent;\n  }(DxComponent);\n\n  DxScrollViewComponent.ɵfac = function DxScrollViewComponent_Factory(t) {\n    return new (t || DxScrollViewComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DxTemplateHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.WatcherHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TransferState), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n\n  DxScrollViewComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: DxScrollViewComponent,\n    selectors: [[\"dx-scroll-view\"]],\n    inputs: {\n      bounceEnabled: \"bounceEnabled\",\n      direction: \"direction\",\n      disabled: \"disabled\",\n      elementAttr: \"elementAttr\",\n      height: \"height\",\n      pulledDownText: \"pulledDownText\",\n      pullingDownText: \"pullingDownText\",\n      reachBottomText: \"reachBottomText\",\n      refreshingText: \"refreshingText\",\n      rtlEnabled: \"rtlEnabled\",\n      scrollByContent: \"scrollByContent\",\n      scrollByThumb: \"scrollByThumb\",\n      showScrollbar: \"showScrollbar\",\n      useNative: \"useNative\",\n      width: \"width\"\n    },\n    outputs: {\n      onDisposing: \"onDisposing\",\n      onInitialized: \"onInitialized\",\n      onOptionChanged: \"onOptionChanged\",\n      onPullDown: \"onPullDown\",\n      onReachBottom: \"onReachBottom\",\n      onScroll: \"onScroll\",\n      onUpdated: \"onUpdated\",\n      bounceEnabledChange: \"bounceEnabledChange\",\n      directionChange: \"directionChange\",\n      disabledChange: \"disabledChange\",\n      elementAttrChange: \"elementAttrChange\",\n      heightChange: \"heightChange\",\n      pulledDownTextChange: \"pulledDownTextChange\",\n      pullingDownTextChange: \"pullingDownTextChange\",\n      reachBottomTextChange: \"reachBottomTextChange\",\n      refreshingTextChange: \"refreshingTextChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      scrollByContentChange: \"scrollByContentChange\",\n      scrollByThumbChange: \"scrollByThumbChange\",\n      showScrollbarChange: \"showScrollbarChange\",\n      useNativeChange: \"useNativeChange\",\n      widthChange: \"widthChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, NestedOptionHost]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function DxScrollViewComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxScrollViewComponent.prototype, \"bounceEnabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxScrollViewComponent.prototype, \"direction\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxScrollViewComponent.prototype, \"disabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxScrollViewComponent.prototype, \"elementAttr\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxScrollViewComponent.prototype, \"height\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxScrollViewComponent.prototype, \"pulledDownText\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxScrollViewComponent.prototype, \"pullingDownText\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxScrollViewComponent.prototype, \"reachBottomText\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxScrollViewComponent.prototype, \"refreshingText\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxScrollViewComponent.prototype, \"rtlEnabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxScrollViewComponent.prototype, \"scrollByContent\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxScrollViewComponent.prototype, \"scrollByThumb\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxScrollViewComponent.prototype, \"showScrollbar\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxScrollViewComponent.prototype, \"useNative\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxScrollViewComponent.prototype, \"width\", null);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxScrollViewComponent.prototype, \"onDisposing\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxScrollViewComponent.prototype, \"onInitialized\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxScrollViewComponent.prototype, \"onOptionChanged\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxScrollViewComponent.prototype, \"onPullDown\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxScrollViewComponent.prototype, \"onReachBottom\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxScrollViewComponent.prototype, \"onScroll\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxScrollViewComponent.prototype, \"onUpdated\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxScrollViewComponent.prototype, \"bounceEnabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxScrollViewComponent.prototype, \"directionChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxScrollViewComponent.prototype, \"disabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxScrollViewComponent.prototype, \"elementAttrChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxScrollViewComponent.prototype, \"heightChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxScrollViewComponent.prototype, \"pulledDownTextChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxScrollViewComponent.prototype, \"pullingDownTextChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxScrollViewComponent.prototype, \"reachBottomTextChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxScrollViewComponent.prototype, \"refreshingTextChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxScrollViewComponent.prototype, \"rtlEnabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxScrollViewComponent.prototype, \"scrollByContentChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxScrollViewComponent.prototype, \"scrollByThumbChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxScrollViewComponent.prototype, \"showScrollbarChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxScrollViewComponent.prototype, \"useNativeChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxScrollViewComponent.prototype, \"widthChange\", void 0);\n\n  DxScrollViewComponent = __decorate([__param(6, Inject(PLATFORM_ID)), __metadata(\"design:paramtypes\", [ElementRef, NgZone, DxTemplateHost, WatcherHelper, NestedOptionHost, TransferState, Object])], DxScrollViewComponent);\n  return DxScrollViewComponent;\n})();\nvar DxScrollViewModule = /*#__PURE__*/(function () {\n  var DxScrollViewModule = /*#__PURE__*/_createClass(function DxScrollViewModule() {\n    _classCallCheck(this, DxScrollViewModule);\n  });\n\n  DxScrollViewModule.ɵfac = function DxScrollViewModule_Factory(t) {\n    return new (t || DxScrollViewModule)();\n  };\n\n  DxScrollViewModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: DxScrollViewModule\n  });\n  DxScrollViewModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxTemplateModule]\n  });\n  return DxScrollViewModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxScrollViewModule, {\n    declarations: function declarations() {\n      return [DxScrollViewComponent];\n    },\n    imports: function imports() {\n      return [DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule];\n    },\n    exports: function exports() {\n      return [DxScrollViewComponent, DxTemplateModule];\n    }\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DxScrollViewComponent, DxScrollViewModule }; //# sourceMappingURL=devextreme-angular-ui-scroll-view.js.map","map":null,"metadata":{},"sourceType":"module"}