{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.header_panel.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport Toolbar from \"../toolbar\";\nimport { ColumnsView } from \"./ui.grid_core.columns_view\";\nimport { noop } from \"../../core/utils/common\";\nimport { isDefined, isString } from \"../../core/utils/type\";\nimport messageLocalization from \"../../localization/message\";\nimport \"../drop_down_menu\";\nimport { extend } from \"../../core/utils/extend\";\nimport { getPathParts } from \"../../core/utils/data\";\nvar HEADER_PANEL_CLASS = \"header-panel\";\nvar TOOLBAR_BUTTON_CLASS = \"toolbar-button\";\nvar TOOLBAR_ARIA_LABEL = \"-ariaToolbar\";\nvar HeaderPanel = ColumnsView.inherit({\n  _getToolbarItems: function _getToolbarItems() {\n    return [];\n  },\n  _getButtonContainer: function _getButtonContainer() {\n    return $(\"<div>\").addClass(this.addWidgetPrefix(TOOLBAR_BUTTON_CLASS));\n  },\n  _getToolbarButtonClass: function _getToolbarButtonClass(specificClass) {\n    var secondClass = specificClass ? \" \" + specificClass : \"\";\n    return this.addWidgetPrefix(TOOLBAR_BUTTON_CLASS) + secondClass;\n  },\n  _getToolbarOptions: function _getToolbarOptions() {\n    var userToolbarOptions = this.option(\"toolbar\");\n    var options = {\n      toolbarOptions: {\n        items: this._getToolbarItems(),\n        visible: null === userToolbarOptions || void 0 === userToolbarOptions ? void 0 : userToolbarOptions.visible,\n        disabled: null === userToolbarOptions || void 0 === userToolbarOptions ? void 0 : userToolbarOptions.disabled,\n        onItemRendered: function onItemRendered(e) {\n          var itemRenderedCallback = e.itemData.onItemRendered;\n\n          if (itemRenderedCallback) {\n            itemRenderedCallback(e);\n          }\n        }\n      }\n    };\n    var userItems = null === userToolbarOptions || void 0 === userToolbarOptions ? void 0 : userToolbarOptions.items;\n    options.toolbarOptions.items = this._normalizeToolbarItems(options.toolbarOptions.items, userItems);\n    this.executeAction(\"onToolbarPreparing\", options);\n\n    if (options.toolbarOptions && !isDefined(options.toolbarOptions.visible)) {\n      var toolbarItems = options.toolbarOptions.items;\n      options.toolbarOptions.visible = !!(null !== toolbarItems && void 0 !== toolbarItems && toolbarItems.length);\n    }\n\n    return options.toolbarOptions;\n  },\n  _normalizeToolbarItems: function _normalizeToolbarItems(defaultItems, userItems) {\n    var defaultProps = {\n      location: \"after\"\n    };\n    var isArray = Array.isArray(userItems);\n\n    if (!isDefined(userItems)) {\n      return defaultItems;\n    }\n\n    if (!isArray) {\n      userItems = [userItems];\n    }\n\n    var defaultButtonsByNames = {};\n    defaultItems.forEach(function (button) {\n      defaultButtonsByNames[button.name] = button;\n    });\n    var normalizedItems = userItems.map(function (button) {\n      var needHideButton = false;\n\n      if (isString(button)) {\n        button = {\n          name: button\n        };\n        needHideButton = true;\n      }\n\n      if (isDefined(button.name)) {\n        if (isDefined(defaultButtonsByNames[button.name])) {\n          button = extend(true, {}, defaultButtonsByNames[button.name], button);\n        } else if (needHideButton) {\n          button.visible = false;\n        }\n      }\n\n      return extend(true, {}, defaultProps, button);\n    });\n    return isArray ? normalizedItems : normalizedItems[0];\n  },\n  _renderCore: function _renderCore() {\n    if (!this._toolbar) {\n      var $headerPanel = this.element();\n      $headerPanel.addClass(this.addWidgetPrefix(HEADER_PANEL_CLASS));\n      var label = messageLocalization.format(this.component.NAME + TOOLBAR_ARIA_LABEL);\n      var $toolbar = $(\"<div>\").attr(\"aria-label\", label).appendTo($headerPanel);\n      this._toolbar = this._createComponent($toolbar, Toolbar, this._toolbarOptions);\n    } else {\n      this._toolbar.option(this._toolbarOptions);\n    }\n  },\n  _columnOptionChanged: noop,\n  _handleDataChanged: function _handleDataChanged() {\n    if (this._requireReady) {\n      this.render();\n    }\n  },\n  init: function init() {\n    this.callBase();\n    this.createAction(\"onToolbarPreparing\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n  },\n  render: function render() {\n    this._toolbarOptions = this._getToolbarOptions();\n    this.callBase.apply(this, arguments);\n  },\n  setToolbarItemDisabled: function setToolbarItemDisabled(name, optionValue) {\n    var toolbarInstance = this._toolbar;\n\n    if (toolbarInstance) {\n      var items = toolbarInstance.option(\"items\") || [];\n      var itemIndex = items.indexOf(items.filter(function (item) {\n        return item.name === name;\n      })[0]);\n\n      if (itemIndex >= 0) {\n        var itemOptionPrefix = \"items[\" + itemIndex + \"]\";\n\n        if (toolbarInstance.option(itemOptionPrefix + \".options\")) {\n          toolbarInstance.option(itemOptionPrefix + \".options.disabled\", optionValue);\n        } else {\n          toolbarInstance.option(itemOptionPrefix + \".disabled\", optionValue);\n        }\n      }\n    }\n  },\n  updateToolbarDimensions: function updateToolbarDimensions() {\n    var _this$_toolbar;\n\n    null === (_this$_toolbar = this._toolbar) || void 0 === _this$_toolbar ? void 0 : _this$_toolbar.updateDimensions();\n  },\n  getHeaderPanel: function getHeaderPanel() {\n    return this.element();\n  },\n  getHeight: function getHeight() {\n    return this.getElementHeight();\n  },\n  optionChanged: function optionChanged(args) {\n    if (\"onToolbarPreparing\" === args.name) {\n      this._invalidate();\n\n      args.handled = true;\n    }\n\n    if (\"toolbar\" === args.name) {\n      args.handled = true;\n\n      if (this._toolbar) {\n        var parts = getPathParts(args.fullName);\n        var optionName = args.fullName.replace(/^toolbar\\./, \"\");\n\n        if (1 === parts.length) {\n          var toolbarOptions = this._getToolbarOptions();\n\n          this._toolbar.option(toolbarOptions);\n        } else if (\"items\" === parts[1]) {\n          if (2 === parts.length) {\n            var _toolbarOptions = this._getToolbarOptions();\n\n            this._toolbar.option(\"items\", _toolbarOptions.items);\n          } else if (3 === parts.length) {\n            var normalizedItem = this._normalizeToolbarItems(this._getToolbarItems(), args.value);\n\n            this._toolbar.option(optionName, normalizedItem);\n          } else if (parts.length >= 4) {\n            this._toolbar.option(optionName, args.value);\n          }\n        } else {\n          this._toolbar.option(optionName, args.value);\n        }\n      }\n    }\n\n    this.callBase(args);\n  },\n  isVisible: function isVisible() {\n    return this._toolbarOptions && this._toolbarOptions.visible;\n  },\n  allowDragging: noop\n});\nexport var headerPanelModule = {\n  defaultOptions: function defaultOptions() {\n    return {};\n  },\n  views: {\n    headerPanel: HeaderPanel\n  },\n  extenders: {\n    controllers: {\n      resizing: {\n        _updateDimensionsCore: function _updateDimensionsCore() {\n          this.callBase.apply(this, arguments);\n          this.getView(\"headerPanel\").updateToolbarDimensions();\n        }\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}