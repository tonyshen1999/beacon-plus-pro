{"ast":null,"code":"import _toConsumableArray from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n\n/**\r\n * DevExtreme (esm/ui/drop_down_button.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../core/renderer\";\nimport Widget from \"./widget/ui.widget\";\nimport { FunctionTemplate } from \"../core/templates/function_template\";\nimport registerComponent from \"../core/component_registrator\";\nimport ButtonGroup from \"./button_group\";\nimport Popup from \"./popup\";\nimport List from \"./list_light\";\nimport { compileGetter } from \"../core/utils/data\";\nimport { getPublicElement } from \"../core/element\";\nimport { getImageContainer } from \"../core/utils/icon\";\nimport DataHelperMixin from \"../data_helper\";\nimport { DataSource } from \"../data/data_source/data_source\";\nimport ArrayStore from \"../data/array_store\";\nimport { Deferred } from \"../core/utils/deferred\";\nimport { extend } from \"../core/utils/extend\";\nimport { isPlainObject, isDefined } from \"../core/utils/type\";\nimport { ensureDefined, noop } from \"../core/utils/common\";\nimport Guid from \"../core/guid\";\nimport { getElementWidth, getSizeValue } from \"./drop_down_editor/utils\";\nimport messageLocalization from \"../localization/message\";\nvar DROP_DOWN_BUTTON_CLASS = \"dx-dropdownbutton\";\nvar DROP_DOWN_BUTTON_CONTENT = \"dx-dropdownbutton-content\";\nvar DROP_DOWN_BUTTON_ACTION_CLASS = \"dx-dropdownbutton-action\";\nvar DROP_DOWN_BUTTON_TOGGLE_CLASS = \"dx-dropdownbutton-toggle\";\nvar DROP_DOWN_BUTTON_HAS_ARROW_CLASS = \"dx-dropdownbutton-has-arrow\";\nvar DROP_DOWN_BUTTON_POPUP_WRAPPER_CLASS = \"dx-dropdownbutton-popup-wrapper\";\nvar DROP_DOWN_EDITOR_OVERLAY_CLASS = \"dx-dropdowneditor-overlay\";\nvar DX_BUTTON_TEXT_CLASS = \"dx-button-text\";\nvar DX_ICON_RIGHT_CLASS = \"dx-icon-right\";\nvar DropDownButton = Widget.inherit({\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      itemTemplate: \"item\",\n      keyExpr: \"this\",\n      displayExpr: void 0,\n      selectedItem: null,\n      selectedItemKey: null,\n      stylingMode: \"outlined\",\n      deferRendering: true,\n      noDataText: messageLocalization.format(\"dxCollectionWidget-noDataText\"),\n      useSelectMode: false,\n      splitButton: false,\n      showArrowIcon: true,\n      text: \"\",\n      icon: void 0,\n      onButtonClick: null,\n      onSelectionChanged: null,\n      onItemClick: null,\n      opened: false,\n      items: null,\n      dataSource: null,\n      focusStateEnabled: true,\n      hoverStateEnabled: true,\n      dropDownOptions: {},\n      dropDownContentTemplate: \"content\",\n      wrapItemText: false,\n      useItemTextAsTitle: true,\n      grouped: false,\n      groupTemplate: \"group\",\n      buttonGroupOptions: {}\n    });\n  },\n  _setOptionsByReference: function _setOptionsByReference() {\n    this.callBase();\n    extend(this._optionsByReference, {\n      selectedItem: true\n    });\n  },\n  _init: function _init() {\n    this.callBase();\n\n    this._createItemClickAction();\n\n    this._createActionClickAction();\n\n    this._createSelectionChangedAction();\n\n    this._initDataSource();\n\n    this._compileKeyGetter();\n\n    this._compileDisplayGetter();\n\n    this._itemsToDataSource(this.option(\"items\"));\n\n    this._options.cache(\"buttonGroupOptions\", this.option(\"buttonGroupOptions\"));\n\n    this._options.cache(\"dropDownOptions\", this.option(\"dropDownOptions\"));\n  },\n  _initTemplates: function _initTemplates() {\n    var _this = this;\n\n    this._templateManager.addDefaultTemplates({\n      content: new FunctionTemplate(function (options) {\n        var $popupContent = $(options.container);\n        var $listContainer = $(\"<div>\").appendTo($popupContent);\n        _this._list = _this._createComponent($listContainer, List, _this._listOptions());\n\n        _this._list.registerKeyHandler(\"escape\", _this._escHandler.bind(_this));\n\n        _this._list.registerKeyHandler(\"tab\", _this._escHandler.bind(_this));\n\n        _this._list.registerKeyHandler(\"leftArrow\", _this._escHandler.bind(_this));\n\n        _this._list.registerKeyHandler(\"rightArrow\", _this._escHandler.bind(_this));\n      })\n    });\n\n    this.callBase();\n  },\n  _itemsToDataSource: function _itemsToDataSource(value) {\n    if (!this._dataSource) {\n      this._dataSource = new DataSource({\n        store: new ArrayStore({\n          key: this._getKey(),\n          data: value\n        }),\n        pageSize: 0\n      });\n    }\n  },\n  _getKey: function _getKey() {\n    var _this$_dataSource;\n\n    var keyExpr = this.option(\"keyExpr\");\n    var storeKey = null === (_this$_dataSource = this._dataSource) || void 0 === _this$_dataSource ? void 0 : _this$_dataSource.key();\n    return isDefined(storeKey) && (!isDefined(keyExpr) || \"this\" === keyExpr) ? storeKey : keyExpr;\n  },\n  _compileKeyGetter: function _compileKeyGetter() {\n    this._keyGetter = compileGetter(this._getKey());\n  },\n  _compileDisplayGetter: function _compileDisplayGetter() {\n    this._displayGetter = compileGetter(this.option(\"displayExpr\"));\n  },\n  _initMarkup: function _initMarkup() {\n    this.callBase();\n    this.$element().addClass(DROP_DOWN_BUTTON_CLASS);\n\n    this._renderButtonGroup();\n\n    this._updateArrowClass();\n\n    if (isDefined(this.option(\"selectedItemKey\"))) {\n      this._loadSelectedItem().done(this._updateActionButton.bind(this));\n    }\n  },\n  _renderFocusTarget: noop,\n  _render: function _render() {\n    if (!this.option(\"deferRendering\") || this.option(\"opened\")) {\n      this._renderPopup();\n    }\n\n    this.callBase();\n  },\n  _renderContentImpl: function _renderContentImpl() {\n    if (this._popup) {\n      this._renderPopupContent();\n    }\n\n    return this.callBase();\n  },\n  _loadSelectedItem: function _loadSelectedItem() {\n    var _this$_loadSingleDefe;\n\n    null === (_this$_loadSingleDefe = this._loadSingleDeferred) || void 0 === _this$_loadSingleDefe ? void 0 : _this$_loadSingleDefe.reject();\n    var d = new Deferred();\n\n    if (this._list && void 0 !== this._lastSelectedItemData) {\n      var cachedResult = this.option(\"useSelectMode\") ? this._list.option(\"selectedItem\") : this._lastSelectedItemData;\n      return d.resolve(cachedResult);\n    }\n\n    this._lastSelectedItemData = void 0;\n    var selectedItemKey = this.option(\"selectedItemKey\");\n\n    this._loadSingle(this._getKey(), selectedItemKey).done(d.resolve).fail(function () {\n      d.resolve(null);\n    });\n\n    this._loadSingleDeferred = d;\n    return d.promise();\n  },\n  _createActionClickAction: function _createActionClickAction() {\n    this._actionClickAction = this._createActionByOption(\"onButtonClick\");\n  },\n  _createSelectionChangedAction: function _createSelectionChangedAction() {\n    this._selectionChangedAction = this._createActionByOption(\"onSelectionChanged\");\n  },\n  _createItemClickAction: function _createItemClickAction() {\n    this._itemClickAction = this._createActionByOption(\"onItemClick\");\n  },\n  _fireSelectionChangedAction: function _fireSelectionChangedAction(_ref) {\n    var previousValue = _ref.previousValue,\n        value = _ref.value;\n\n    this._selectionChangedAction({\n      item: value,\n      previousItem: previousValue\n    });\n  },\n  _fireItemClickAction: function _fireItemClickAction(_ref2) {\n    var event = _ref2.event,\n        itemElement = _ref2.itemElement,\n        itemData = _ref2.itemData;\n    return this._itemClickAction({\n      event: event,\n      itemElement: itemElement,\n      itemData: this._actionItem || itemData\n    });\n  },\n  _actionButtonConfig: function _actionButtonConfig() {\n    return {\n      text: this.option(\"text\"),\n      icon: this.option(\"icon\"),\n      elementAttr: {\n        class: DROP_DOWN_BUTTON_ACTION_CLASS\n      }\n    };\n  },\n  _getButtonGroupItems: function _getButtonGroupItems() {\n    var items = [];\n    items.push(this._actionButtonConfig());\n\n    if (this.option(\"splitButton\")) {\n      items.push({\n        icon: \"spindown\",\n        elementAttr: {\n          class: DROP_DOWN_BUTTON_TOGGLE_CLASS\n        }\n      });\n    }\n\n    return items;\n  },\n  _buttonGroupItemClick: function _buttonGroupItemClick(_ref3) {\n    var event = _ref3.event,\n        itemData = _ref3.itemData;\n    var isActionButton = itemData.elementAttr.class === DROP_DOWN_BUTTON_ACTION_CLASS;\n    var isToggleButton = itemData.elementAttr.class === DROP_DOWN_BUTTON_TOGGLE_CLASS;\n\n    if (isToggleButton) {\n      this.toggle();\n    } else if (isActionButton) {\n      this._actionClickAction({\n        event: event,\n        selectedItem: this.option(\"selectedItem\")\n      });\n\n      if (!this.option(\"splitButton\")) {\n        this.toggle();\n      }\n    }\n  },\n  _buttonGroupOptions: function _buttonGroupOptions() {\n    var _this2 = this;\n\n    var buttonTemplate = this.option(\"splitButton\") || !this.option(\"showArrowIcon\") ? \"content\" : function (_ref4, buttonContent) {\n      var text = _ref4.text,\n          icon = _ref4.icon;\n      var $firstIcon = getImageContainer(icon);\n      var $textContainer = text ? $(\"<span>\").text(text).addClass(DX_BUTTON_TEXT_CLASS) : void 0;\n      var $secondIcon = getImageContainer(\"spindown\").addClass(DX_ICON_RIGHT_CLASS);\n      $(buttonContent).append($firstIcon, $textContainer, $secondIcon);\n    };\n    return extend({\n      items: this._getButtonGroupItems(),\n      focusStateEnabled: this.option(\"focusStateEnabled\"),\n      hoverStateEnabled: this.option(\"hoverStateEnabled\"),\n      onItemClick: this._buttonGroupItemClick.bind(this),\n      width: \"100%\",\n      height: \"100%\",\n      stylingMode: this.option(\"stylingMode\"),\n      selectionMode: \"none\",\n      tabIndex: this.option(\"tabIndex\"),\n      onKeyboardHandled: function onKeyboardHandled(e) {\n        return _this2._keyboardHandler(e);\n      },\n      buttonTemplate: buttonTemplate\n    }, this._options.cache(\"buttonGroupOptions\"));\n  },\n  _renderPopupContent: function _renderPopupContent() {\n    var $content = this._popup.$content();\n\n    var template = this._getTemplateByOption(\"dropDownContentTemplate\");\n\n    $content.empty();\n    this._popupContentId = \"dx-\" + new Guid();\n    this.setAria(\"id\", this._popupContentId, $content);\n    return template.render({\n      container: getPublicElement($content),\n      model: this.option(\"items\") || this._dataSource\n    });\n  },\n  _popupOptions: function _popupOptions() {\n    var _this3 = this;\n\n    var horizontalAlignment = this.option(\"rtlEnabled\") ? \"right\" : \"left\";\n    return extend({\n      dragEnabled: false,\n      focusStateEnabled: false,\n      deferRendering: this.option(\"deferRendering\"),\n      closeOnOutsideClick: function closeOnOutsideClick(e) {\n        var $element = _this3.$element();\n\n        var $buttonClicked = $(e.target).closest(\".\".concat(DROP_DOWN_BUTTON_CLASS));\n        return !$buttonClicked.is($element);\n      },\n      showTitle: false,\n      animation: {\n        show: {\n          type: \"fade\",\n          duration: 0,\n          from: 0,\n          to: 1\n        },\n        hide: {\n          type: \"fade\",\n          duration: 400,\n          from: 1,\n          to: 0\n        }\n      },\n      _ignoreFunctionValueDeprecation: true,\n      width: function width() {\n        return getElementWidth(_this3.$element());\n      },\n      height: \"auto\",\n      shading: false,\n      position: {\n        of: this.$element(),\n        collision: \"flipfit\",\n        my: horizontalAlignment + \" top\",\n        at: horizontalAlignment + \" bottom\"\n      },\n      wrapperAttr: {\n        class: DROP_DOWN_EDITOR_OVERLAY_CLASS\n      }\n    }, this._options.cache(\"dropDownOptions\"), {\n      visible: this.option(\"opened\")\n    });\n  },\n  _listOptions: function _listOptions() {\n    var _this4 = this;\n\n    var selectedItemKey = this.option(\"selectedItemKey\");\n    var useSelectMode = this.option(\"useSelectMode\");\n    return {\n      selectionMode: useSelectMode ? \"single\" : \"none\",\n      wrapItemText: this.option(\"wrapItemText\"),\n      focusStateEnabled: this.option(\"focusStateEnabled\"),\n      hoverStateEnabled: this.option(\"hoverStateEnabled\"),\n      useItemTextAsTitle: this.option(\"useItemTextAsTitle\"),\n      onContentReady: function onContentReady() {\n        return _this4._fireContentReadyAction();\n      },\n      selectedItemKeys: isDefined(selectedItemKey) && useSelectMode ? [selectedItemKey] : [],\n      grouped: this.option(\"grouped\"),\n      groupTemplate: this.option(\"groupTemplate\"),\n      keyExpr: this._getKey(),\n      noDataText: this.option(\"noDataText\"),\n      displayExpr: this.option(\"displayExpr\"),\n      itemTemplate: this.option(\"itemTemplate\"),\n      items: this.option(\"items\"),\n      dataSource: this._dataSource,\n      onItemClick: function onItemClick(e) {\n        if (!_this4.option(\"useSelectMode\")) {\n          _this4._lastSelectedItemData = e.itemData;\n        }\n\n        _this4.option(\"selectedItemKey\", _this4._keyGetter(e.itemData));\n\n        var actionResult = _this4._fireItemClickAction(e);\n\n        if (false !== actionResult) {\n          _this4.toggle(false);\n\n          _this4._buttonGroup.focus();\n        }\n      }\n    };\n  },\n  _upDownKeyHandler: function _upDownKeyHandler() {\n    if (this._popup && this._popup.option(\"visible\") && this._list) {\n      this._list.focus();\n    } else {\n      this.open();\n    }\n\n    return true;\n  },\n  _escHandler: function _escHandler() {\n    this.close();\n\n    this._buttonGroup.focus();\n\n    return true;\n  },\n  _tabHandler: function _tabHandler() {\n    this.close();\n    return true;\n  },\n  _renderPopup: function _renderPopup() {\n    var $popup = $(\"<div>\");\n    this.$element().append($popup);\n    this._popup = this._createComponent($popup, Popup, this._popupOptions());\n\n    this._popup.$content().addClass(DROP_DOWN_BUTTON_CONTENT);\n\n    this._popup.$wrapper().addClass(DROP_DOWN_BUTTON_POPUP_WRAPPER_CLASS);\n\n    this._popup.on(\"hiding\", this._popupHidingHandler.bind(this));\n\n    this._popup.on(\"showing\", this._popupShowingHandler.bind(this));\n\n    this._bindInnerWidgetOptions(this._popup, \"dropDownOptions\");\n  },\n  _popupHidingHandler: function _popupHidingHandler() {\n    this.option(\"opened\", false);\n\n    this._setAriaExpanded(false);\n  },\n  _popupOptionChanged: function _popupOptionChanged(args) {\n    var options = Widget.getOptionsFromContainer(args);\n\n    this._setPopupOption(options);\n\n    var optionsKeys = Object.keys(options);\n\n    if (-1 !== optionsKeys.indexOf(\"width\") || -1 !== optionsKeys.indexOf(\"height\")) {\n      this._dimensionChanged();\n    }\n  },\n  _dimensionChanged: function _dimensionChanged() {\n    var _this5 = this;\n\n    var popupWidth = getSizeValue(this.option(\"dropDownOptions.width\"));\n\n    if (void 0 === popupWidth) {\n      this._setPopupOption(\"width\", function () {\n        return getElementWidth(_this5.$element());\n      });\n    }\n  },\n  _setPopupOption: function _setPopupOption(optionName, value) {\n    this._setWidgetOption(\"_popup\", arguments);\n  },\n  _popupShowingHandler: function _popupShowingHandler() {\n    this.option(\"opened\", true);\n\n    this._setAriaExpanded(true);\n  },\n  _setAriaExpanded: function _setAriaExpanded(value) {\n    var _this6 = this;\n\n    this._ariaExpandedElements.forEach(function (ariaElement) {\n      _this6.setAria({\n        expanded: value,\n        owns: value ? _this6._popupContentId : void 0\n      }, $(ariaElement));\n    });\n  },\n  _renderButtonGroup: function _renderButtonGroup() {\n    var $buttonGroup = this._buttonGroup && this._buttonGroup.$element() || $(\"<div>\");\n\n    if (!this._buttonGroup) {\n      this.$element().append($buttonGroup);\n    }\n\n    this._buttonGroup = this._createComponent($buttonGroup, ButtonGroup, this._buttonGroupOptions());\n\n    var buttonElements = this._buttonGroup.$element().find(\".dx-button\").toArray();\n\n    this._ariaExpandedElements = [].concat(_toConsumableArray(buttonElements), [this.$element()]);\n\n    this._buttonGroup.registerKeyHandler(\"downArrow\", this._upDownKeyHandler.bind(this));\n\n    this._buttonGroup.registerKeyHandler(\"tab\", this._tabHandler.bind(this));\n\n    this._buttonGroup.registerKeyHandler(\"upArrow\", this._upDownKeyHandler.bind(this));\n\n    this._buttonGroup.registerKeyHandler(\"escape\", this._escHandler.bind(this));\n\n    this._bindInnerWidgetOptions(this._buttonGroup, \"buttonGroupOptions\");\n\n    this._setAriaExpanded(this.option(\"opened\"));\n  },\n  _updateArrowClass: function _updateArrowClass() {\n    var hasArrow = this.option(\"splitButton\") || this.option(\"showArrowIcon\");\n    this.$element().toggleClass(DROP_DOWN_BUTTON_HAS_ARROW_CLASS, hasArrow);\n  },\n  toggle: function toggle(visible) {\n    if (!this._popup) {\n      this._renderPopup();\n\n      this._renderContent();\n    }\n\n    return this._popup.toggle(visible);\n  },\n  open: function open() {\n    return this.toggle(true);\n  },\n  close: function close() {\n    return this.toggle(false);\n  },\n  _setListOption: function _setListOption(name, value) {\n    this._list && this._list.option(name, value);\n  },\n  _getDisplayValue: function _getDisplayValue(item) {\n    var isPrimitiveItem = !isPlainObject(item);\n    var displayValue = isPrimitiveItem ? item : this._displayGetter(item);\n    return !isPlainObject(displayValue) ? String(ensureDefined(displayValue, \"\")) : \"\";\n  },\n  _updateActionButton: function _updateActionButton(selectedItem) {\n    if (this.option(\"useSelectMode\")) {\n      this.option({\n        text: this._getDisplayValue(selectedItem),\n        icon: isPlainObject(selectedItem) ? selectedItem.icon : void 0\n      });\n    }\n\n    this._setOptionWithoutOptionChange(\"selectedItem\", selectedItem);\n\n    this._setOptionWithoutOptionChange(\"selectedItemKey\", this._keyGetter(selectedItem));\n  },\n  _clean: function _clean() {\n    this._list && this._list.$element().remove();\n    this._popup && this._popup.$element().remove();\n  },\n  _selectedItemKeyChanged: function _selectedItemKeyChanged(value) {\n    var _this7 = this;\n\n    this._setListOption(\"selectedItemKeys\", this.option(\"useSelectMode\") && isDefined(value) ? [value] : []);\n\n    var previousItem = this.option(\"selectedItem\");\n\n    this._loadSelectedItem().done(function (selectedItem) {\n      _this7._updateActionButton(selectedItem);\n\n      if (_this7._displayGetter(previousItem) !== _this7._displayGetter(selectedItem)) {\n        _this7._fireSelectionChangedAction({\n          previousValue: previousItem,\n          value: selectedItem\n        });\n      }\n    });\n  },\n  _actionButtonOptionChanged: function _actionButtonOptionChanged(_ref5) {\n    var name = _ref5.name,\n        value = _ref5.value;\n    var newConfig = {};\n    newConfig[name] = value;\n\n    this._buttonGroup.option(\"items[0]\", extend({}, this._actionButtonConfig(), newConfig));\n\n    this._popup && this._popup.repaint();\n  },\n  _selectModeChanged: function _selectModeChanged(value) {\n    if (value) {\n      this._setListOption(\"selectionMode\", \"single\");\n\n      var selectedItemKey = this.option(\"selectedItemKey\");\n\n      this._setListOption(\"selectedItemKeys\", isDefined(selectedItemKey) ? [selectedItemKey] : []);\n\n      this._selectedItemKeyChanged(this.option(\"selectedItemKey\"));\n    } else {\n      this._setListOption(\"selectionMode\", \"none\");\n\n      this.option({\n        selectedItemKey: void 0,\n        selectedItem: void 0\n      });\n\n      this._actionButtonOptionChanged({\n        text: this.option(\"text\")\n      });\n    }\n  },\n  _updateItemCollection: function _updateItemCollection(optionName) {\n    var _this8 = this;\n\n    var selectedItemKey = this.option(\"selectedItemKey\");\n\n    this._setListOption(\"selectedItem\", null);\n\n    this._setWidgetOption(\"_list\", [optionName]);\n\n    if (isDefined(selectedItemKey)) {\n      this._loadSelectedItem().done(function (selectedItem) {\n        _this8._setListOption(\"selectedItemKeys\", [selectedItemKey]);\n\n        _this8._setListOption(\"selectedItem\", selectedItem);\n      }).fail(function (error) {\n        _this8._setListOption(\"selectedItemKeys\", []);\n      }).always(this._updateActionButton.bind(this));\n    }\n  },\n  _updateDataSource: function _updateDataSource() {\n    var items = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this._dataSource.items();\n    this._dataSource = void 0;\n\n    this._itemsToDataSource(items);\n\n    this._updateKeyExpr();\n  },\n  _updateKeyExpr: function _updateKeyExpr() {\n    this._compileKeyGetter();\n\n    this._setListOption(\"keyExpr\", this._getKey());\n  },\n  focus: function focus() {\n    this._buttonGroup.focus();\n  },\n  _optionChanged: function _optionChanged(args) {\n    var _this$_popup;\n\n    var name = args.name,\n        value = args.value;\n\n    switch (name) {\n      case \"useSelectMode\":\n        this._selectModeChanged(value);\n\n        break;\n\n      case \"splitButton\":\n        this._updateArrowClass();\n\n        this._renderButtonGroup();\n\n        break;\n\n      case \"displayExpr\":\n        this._compileDisplayGetter();\n\n        this._setListOption(name, value);\n\n        this._updateActionButton(this.option(\"selectedItem\"));\n\n        break;\n\n      case \"keyExpr\":\n        this._updateDataSource();\n\n        break;\n\n      case \"buttonGroupOptions\":\n        this._innerWidgetOptionChanged(this._buttonGroup, args);\n\n        break;\n\n      case \"dropDownOptions\":\n        if (\"dropDownOptions.visible\" === args.fullName) {\n          break;\n        }\n\n        if (void 0 !== args.value.visible) {\n          delete args.value.visible;\n        }\n\n        this._popupOptionChanged(args);\n\n        this._innerWidgetOptionChanged(this._popup, args);\n\n        break;\n\n      case \"opened\":\n        this.toggle(value);\n        break;\n\n      case \"focusStateEnabled\":\n      case \"hoverStateEnabled\":\n        this._setListOption(name, value);\n\n        this._buttonGroup.option(name, value);\n\n        this.callBase(args);\n        break;\n\n      case \"items\":\n        this._updateDataSource(this.option(\"items\"));\n\n        this._updateItemCollection(name);\n\n        break;\n\n      case \"dataSource\":\n        if (Array.isArray(value)) {\n          this._updateDataSource(this.option(\"dataSource\"));\n        } else {\n          this._initDataSource();\n\n          this._updateKeyExpr();\n        }\n\n        this._updateItemCollection(name);\n\n        break;\n\n      case \"icon\":\n      case \"text\":\n        this._actionButtonOptionChanged(args);\n\n        break;\n\n      case \"showArrowIcon\":\n        this._updateArrowClass();\n\n        this._renderButtonGroup();\n\n        this._popup && this._popup.repaint();\n        break;\n\n      case \"width\":\n      case \"height\":\n        this.callBase(args);\n        null === (_this$_popup = this._popup) || void 0 === _this$_popup ? void 0 : _this$_popup.repaint();\n        break;\n\n      case \"stylingMode\":\n        this._buttonGroup.option(name, value);\n\n        break;\n\n      case \"itemTemplate\":\n      case \"grouped\":\n      case \"noDataText\":\n      case \"groupTemplate\":\n      case \"wrapItemText\":\n      case \"useItemTextAsTitle\":\n        this._setListOption(name, value);\n\n        break;\n\n      case \"dropDownContentTemplate\":\n        this._renderContent();\n\n        break;\n\n      case \"selectedItemKey\":\n        this._selectedItemKeyChanged(value);\n\n        break;\n\n      case \"selectedItem\":\n        break;\n\n      case \"onItemClick\":\n        this._createItemClickAction();\n\n        break;\n\n      case \"onButtonClick\":\n        this._createActionClickAction();\n\n        break;\n\n      case \"onSelectionChanged\":\n        this._createSelectionChangedAction();\n\n        break;\n\n      case \"deferRendering\":\n        this.toggle(this.option(\"opened\"));\n        break;\n\n      case \"tabIndex\":\n        this._buttonGroup.option(name, value);\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  }\n}).include(DataHelperMixin);\nregisterComponent(\"dxDropDownButton\", DropDownButton);\nexport default DropDownButton;","map":null,"metadata":{},"sourceType":"module"}