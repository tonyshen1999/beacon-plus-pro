{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/accordion.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getOuterHeight, setHeight, getHeight } from \"../core/utils/size\";\nimport $ from \"../core/renderer\";\nimport eventsEngine from \"../events/core/events_engine\";\nimport fx from \"../animation/fx\";\nimport { name as clickEventName } from \"../events/click\";\nimport devices from \"../core/devices\";\nimport domAdapter from \"../core/dom_adapter\";\nimport { extend } from \"../core/utils/extend\";\nimport { deferRender } from \"../core/utils/common\";\nimport { getPublicElement } from \"../core/element\";\nimport * as iteratorUtils from \"../core/utils/iterator\";\nimport { isPlainObject, isDefined } from \"../core/utils/type\";\nimport registerComponent from \"../core/component_registrator\";\nimport { addNamespace } from \"../events/utils/index\";\nimport CollectionWidget from \"./collection/ui.collection_widget.live_update\";\nimport { when, Deferred } from \"../core/utils/deferred\";\nimport { BindableTemplate } from \"../core/templates/bindable_template\";\nimport { getImageContainer } from \"../core/utils/icon\";\nimport { isMaterial } from \"./themes\";\nvar ACCORDION_CLASS = \"dx-accordion\";\nvar ACCORDION_WRAPPER_CLASS = \"dx-accordion-wrapper\";\nvar ACCORDION_ITEM_CLASS = \"dx-accordion-item\";\nvar ACCORDION_ITEM_OPENED_CLASS = \"dx-accordion-item-opened\";\nvar ACCORDION_ITEM_CLOSED_CLASS = \"dx-accordion-item-closed\";\nvar ACCORDION_ITEM_TITLE_CLASS = \"dx-accordion-item-title\";\nvar ACCORDION_ITEM_BODY_CLASS = \"dx-accordion-item-body\";\nvar ACCORDION_ITEM_TITLE_CAPTION_CLASS = \"dx-accordion-item-title-caption\";\nvar ACCORDION_ITEM_DATA_KEY = \"dxAccordionItemData\";\nvar Accordion = CollectionWidget.inherit({\n  _activeStateUnit: \".\" + ACCORDION_ITEM_CLASS,\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      hoverStateEnabled: true,\n      height: void 0,\n      itemTitleTemplate: \"title\",\n      onItemTitleClick: null,\n      selectedIndex: 0,\n      collapsible: false,\n      multiple: false,\n      animationDuration: 300,\n      deferRendering: true,\n      selectionByClick: true,\n      activeStateEnabled: true,\n      _itemAttributes: {\n        role: \"tab\"\n      },\n      _animationEasing: \"ease\"\n    });\n  },\n  _defaultOptionsRules: function _defaultOptionsRules() {\n    return this.callBase().concat([{\n      device: function device() {\n        return \"desktop\" === devices.real().deviceType && !devices.isSimulator();\n      },\n      options: {\n        focusStateEnabled: true\n      }\n    }, {\n      device: function device() {\n        return isMaterial();\n      },\n      options: {\n        animationDuration: 200,\n        _animationEasing: \"cubic-bezier(0.4, 0, 0.2, 1)\"\n      }\n    }]);\n  },\n  _itemElements: function _itemElements() {\n    return this._itemContainer().children(this._itemSelector());\n  },\n  _init: function _init() {\n    this.callBase();\n    this.option(\"selectionRequired\", !this.option(\"collapsible\"));\n    this.option(\"selectionMode\", this.option(\"multiple\") ? \"multiple\" : \"single\");\n    var $element = this.$element();\n    $element.addClass(ACCORDION_CLASS);\n    this._$container = $(\"<div>\").addClass(ACCORDION_WRAPPER_CLASS);\n    $element.append(this._$container);\n  },\n  _initTemplates: function _initTemplates() {\n    this.callBase();\n\n    this._templateManager.addDefaultTemplates({\n      title: new BindableTemplate(function ($container, data) {\n        if (isPlainObject(data)) {\n          var $iconElement = getImageContainer(data.icon);\n\n          if ($iconElement) {\n            $container.append($iconElement);\n          }\n\n          if (isDefined(data.title) && !isPlainObject(data.title)) {\n            $container.append(domAdapter.createTextNode(data.title));\n          }\n        } else if (isDefined(data)) {\n          $container.text(String(data));\n        }\n\n        $container.wrapInner($(\"<div>\").addClass(ACCORDION_ITEM_TITLE_CAPTION_CLASS));\n      }, [\"title\", \"icon\"], this.option(\"integrationOptions.watchMethod\"))\n    });\n  },\n  _initMarkup: function _initMarkup() {\n    var _this = this;\n\n    this._deferredItems = [];\n    this.callBase();\n    this.setAria({\n      role: \"tablist\",\n      multiselectable: this.option(\"multiple\")\n    });\n    deferRender(function () {\n      var selectedItemIndices = _this._getSelectedItemIndices();\n\n      _this._renderSelection(selectedItemIndices, []);\n    });\n  },\n  _render: function _render() {\n    this.callBase();\n\n    this._updateItemHeightsWrapper(true);\n  },\n  _itemDataKey: function _itemDataKey() {\n    return ACCORDION_ITEM_DATA_KEY;\n  },\n  _itemClass: function _itemClass() {\n    return ACCORDION_ITEM_CLASS;\n  },\n  _itemContainer: function _itemContainer() {\n    return this._$container;\n  },\n  _itemTitles: function _itemTitles() {\n    return this._itemElements().find(\".\" + ACCORDION_ITEM_TITLE_CLASS);\n  },\n  _itemContents: function _itemContents() {\n    return this._itemElements().find(\".\" + ACCORDION_ITEM_BODY_CLASS);\n  },\n  _getItemData: function _getItemData(target) {\n    return $(target).parent().data(this._itemDataKey()) || this.callBase.apply(this, arguments);\n  },\n  _executeItemRenderAction: function _executeItemRenderAction(itemData) {\n    if (itemData.type) {\n      return;\n    }\n\n    this.callBase.apply(this, arguments);\n  },\n  _itemSelectHandler: function _itemSelectHandler(e) {\n    if ($(e.target).closest(this._itemContents()).length) {\n      return;\n    }\n\n    this.callBase.apply(this, arguments);\n  },\n  _afterItemElementDeleted: function _afterItemElementDeleted($item, deletedActionArgs) {\n    this._deferredItems.splice(deletedActionArgs.itemIndex, 1);\n\n    this.callBase.apply(this, arguments);\n  },\n  _renderItemContent: function _renderItemContent(args) {\n    var itemTitle = this.callBase(extend({}, args, {\n      contentClass: ACCORDION_ITEM_TITLE_CLASS,\n      templateProperty: \"titleTemplate\",\n      defaultTemplateName: this.option(\"itemTitleTemplate\")\n    }));\n\n    this._attachItemTitleClickAction(itemTitle);\n\n    var deferred = new Deferred();\n\n    if (isDefined(this._deferredItems[args.index])) {\n      this._deferredItems[args.index] = deferred;\n    } else {\n      this._deferredItems.push(deferred);\n    }\n\n    if (!this.option(\"deferRendering\") || this._getSelectedItemIndices().indexOf(args.index) >= 0) {\n      deferred.resolve();\n    }\n\n    deferred.done(this.callBase.bind(this, extend({}, args, {\n      contentClass: ACCORDION_ITEM_BODY_CLASS,\n      container: getPublicElement($(\"<div>\").appendTo($(itemTitle).parent()))\n    })));\n  },\n  _attachItemTitleClickAction: function _attachItemTitleClickAction(itemTitle) {\n    var eventName = addNamespace(clickEventName, this.NAME);\n    eventsEngine.off(itemTitle, eventName);\n    eventsEngine.on(itemTitle, eventName, this._itemTitleClickHandler.bind(this));\n  },\n  _itemTitleClickHandler: function _itemTitleClickHandler(e) {\n    this._itemDXEventHandler(e, \"onItemTitleClick\");\n  },\n  _renderSelection: function _renderSelection(addedSelection, removedSelection) {\n    this._itemElements().addClass(ACCORDION_ITEM_CLOSED_CLASS);\n\n    this.setAria(\"hidden\", true, this._itemContents());\n\n    this._updateItems(addedSelection, removedSelection);\n  },\n  _updateSelection: function _updateSelection(addedSelection, removedSelection) {\n    this._updateItems(addedSelection, removedSelection);\n\n    this._updateItemHeightsWrapper(false);\n  },\n  _updateItems: function _updateItems(addedSelection, removedSelection) {\n    var _this2 = this;\n\n    var $items = this._itemElements();\n\n    iteratorUtils.each(addedSelection, function (_, index) {\n      _this2._deferredItems[index].resolve();\n\n      var $item = $items.eq(index).addClass(ACCORDION_ITEM_OPENED_CLASS).removeClass(ACCORDION_ITEM_CLOSED_CLASS);\n\n      _this2.setAria(\"hidden\", false, $item.find(\".\" + ACCORDION_ITEM_BODY_CLASS));\n    });\n    iteratorUtils.each(removedSelection, function (_, index) {\n      var $item = $items.eq(index).removeClass(ACCORDION_ITEM_OPENED_CLASS);\n\n      _this2.setAria(\"hidden\", true, $item.find(\".\" + ACCORDION_ITEM_BODY_CLASS));\n    });\n  },\n  _updateItemHeightsWrapper: function _updateItemHeightsWrapper(skipAnimation) {\n    if (this.option(\"templatesRenderAsynchronously\")) {\n      this._animationTimer = setTimeout(function () {\n        this._updateItemHeights(skipAnimation);\n      }.bind(this));\n    } else {\n      this._updateItemHeights(skipAnimation);\n    }\n  },\n  _updateItemHeights: function _updateItemHeights(skipAnimation) {\n    var that = this;\n    var deferredAnimate = that._deferredAnimate;\n\n    var itemHeight = this._splitFreeSpace(this._calculateFreeSpace());\n\n    clearTimeout(this._animationTimer);\n    return when.apply($, [].slice.call(this._itemElements()).map(function (item) {\n      return that._updateItemHeight($(item), itemHeight, skipAnimation);\n    })).done(function () {\n      if (deferredAnimate) {\n        deferredAnimate.resolveWith(that);\n      }\n    });\n  },\n  _updateItemHeight: function _updateItemHeight($item, itemHeight, skipAnimation) {\n    var $title = $item.children(\".\" + ACCORDION_ITEM_TITLE_CLASS);\n\n    if (fx.isAnimating($item)) {\n      fx.stop($item);\n    }\n\n    var startItemHeight = getOuterHeight($item);\n    var finalItemHeight;\n\n    if ($item.hasClass(ACCORDION_ITEM_OPENED_CLASS)) {\n      finalItemHeight = itemHeight + getOuterHeight($title);\n\n      if (!finalItemHeight) {\n        setHeight($item, \"auto\");\n        finalItemHeight = getOuterHeight($item);\n      }\n    } else {\n      finalItemHeight = getOuterHeight($title);\n    }\n\n    return this._animateItem($item, startItemHeight, finalItemHeight, skipAnimation, !!itemHeight);\n  },\n  _animateItem: function _animateItem($element, startHeight, endHeight, skipAnimation, fixedHeight) {\n    var d;\n\n    if (skipAnimation || startHeight === endHeight) {\n      $element.css(\"height\", endHeight);\n      d = new Deferred().resolve();\n    } else {\n      d = fx.animate($element, {\n        type: \"custom\",\n        from: {\n          height: startHeight\n        },\n        to: {\n          height: endHeight\n        },\n        duration: this.option(\"animationDuration\"),\n        easing: this.option(\"_animationEasing\")\n      });\n    }\n\n    return d.done(function () {\n      if ($element.hasClass(ACCORDION_ITEM_OPENED_CLASS) && !fixedHeight) {\n        $element.css(\"height\", \"\");\n      }\n\n      $element.not(\".\" + ACCORDION_ITEM_OPENED_CLASS).addClass(ACCORDION_ITEM_CLOSED_CLASS);\n    });\n  },\n  _splitFreeSpace: function _splitFreeSpace(freeSpace) {\n    if (!freeSpace) {\n      return freeSpace;\n    }\n\n    return freeSpace / this.option(\"selectedItems\").length;\n  },\n  _calculateFreeSpace: function _calculateFreeSpace() {\n    var height = this.option(\"height\");\n\n    if (void 0 === height || \"auto\" === height) {\n      return;\n    }\n\n    var $titles = this._itemTitles();\n\n    var itemsHeight = 0;\n    iteratorUtils.each($titles, function (_, title) {\n      itemsHeight += getOuterHeight(title);\n    });\n    return getHeight(this.$element()) - itemsHeight;\n  },\n  _visibilityChanged: function _visibilityChanged(visible) {\n    if (visible) {\n      this._dimensionChanged();\n    }\n  },\n  _dimensionChanged: function _dimensionChanged() {\n    this._updateItemHeights(true);\n  },\n  _clean: function _clean() {\n    clearTimeout(this._animationTimer);\n    this.callBase();\n  },\n  _tryParseItemPropertyName: function _tryParseItemPropertyName(fullName) {\n    var matches = fullName.match(/.*\\.(.*)/);\n\n    if (isDefined(matches) && matches.length >= 1) {\n      return matches[1];\n    }\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"items\":\n        this.callBase(args);\n\n        if (\"title\" === this._tryParseItemPropertyName(args.fullName)) {\n          this._renderSelection(this._getSelectedItemIndices(), []);\n        }\n\n        if (\"visible\" === this._tryParseItemPropertyName(args.fullName)) {\n          this._updateItemHeightsWrapper(true);\n        }\n\n        if (true === this.option(\"repaintChangesOnly\") && \"items\" === args.fullName) {\n          this._updateItemHeightsWrapper(true);\n\n          this._renderSelection(this._getSelectedItemIndices(), []);\n        }\n\n        break;\n\n      case \"animationDuration\":\n      case \"onItemTitleClick\":\n      case \"_animationEasing\":\n        break;\n\n      case \"collapsible\":\n        this.option(\"selectionRequired\", !this.option(\"collapsible\"));\n        break;\n\n      case \"itemTitleTemplate\":\n      case \"height\":\n      case \"deferRendering\":\n        this._invalidate();\n\n        break;\n\n      case \"multiple\":\n        this.option(\"selectionMode\", args.value ? \"multiple\" : \"single\");\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  expandItem: function expandItem(index) {\n    this._deferredAnimate = new Deferred();\n    this.selectItem(index);\n    return this._deferredAnimate.promise();\n  },\n  collapseItem: function collapseItem(index) {\n    this._deferredAnimate = new Deferred();\n    this.unselectItem(index);\n    return this._deferredAnimate.promise();\n  },\n  updateDimensions: function updateDimensions() {\n    return this._updateItemHeights(false);\n  }\n});\nregisterComponent(\"dxAccordion\", Accordion);\nexport default Accordion;","map":null,"metadata":{},"sourceType":"module"}