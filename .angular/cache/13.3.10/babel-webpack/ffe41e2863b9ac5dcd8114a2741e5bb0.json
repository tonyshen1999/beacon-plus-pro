{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.editor_factory.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { setOuterWidth, getOuterWidth, setOuterHeight, getOuterHeight } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport domAdapter from \"../../core/dom_adapter\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport modules from \"./ui.grid_core.modules\";\nimport { name as clickEventName } from \"../../events/click\";\nimport pointerEvents from \"../../events/pointer\";\nimport positionUtils from \"../../animation/position\";\nimport { addNamespace, normalizeKeyName } from \"../../events/utils/index\";\nimport browser from \"../../core/utils/browser\";\nimport { extend } from \"../../core/utils/extend\";\nimport { getBoundingRect } from \"../../core/utils/position\";\nimport EditorFactoryMixin from \"../shared/ui.editor_factory_mixin\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nvar EDITOR_INLINE_BLOCK = \"dx-editor-inline-block\";\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\nvar FOCUS_OVERLAY_CLASS = \"focus-overlay\";\nvar CONTENT_CLASS = \"content\";\nvar FOCUSED_ELEMENT_CLASS = \"dx-focused\";\nvar ROW_CLASS = \"dx-row\";\nvar MODULE_NAMESPACE = \"dxDataGridEditorFactory\";\nvar UPDATE_FOCUS_EVENTS = addNamespace([pointerEvents.down, \"focusin\", clickEventName].join(\" \"), MODULE_NAMESPACE);\nvar DX_HIDDEN = \"dx-hidden\";\nvar EditorFactory = modules.ViewController.inherit({\n  _getFocusedElement: function _getFocusedElement($dataGridElement) {\n    var rowSelector = this.option(\"focusedRowEnabled\") ? \"tr[tabindex]:focus\" : \"tr[tabindex]:not(.dx-data-row):focus\";\n    var focusedElementSelector = \"td[tabindex]:focus, \".concat(rowSelector, \", input:focus, textarea:focus, .dx-lookup-field:focus, .dx-checkbox:focus, .dx-switch:focus, .dx-dropdownbutton .dx-buttongroup:focus\");\n    return $dataGridElement.find(focusedElementSelector);\n  },\n  _getFocusCellSelector: function _getFocusCellSelector() {\n    return \".dx-row > td\";\n  },\n  _updateFocusCore: function _updateFocusCore() {\n    var $focus = this._$focusedElement;\n    var $dataGridElement = this.component && this.component.$element();\n    var $focusCell;\n    var hideBorders;\n\n    if ($dataGridElement) {\n      $focus = this._getFocusedElement($dataGridElement);\n\n      if ($focus.length) {\n        if (!$focus.hasClass(CELL_FOCUS_DISABLED_CLASS) && !$focus.hasClass(ROW_CLASS)) {\n          $focusCell = $focus.closest(this._getFocusCellSelector() + \", .\" + CELL_FOCUS_DISABLED_CLASS);\n          hideBorders = $focusCell.get(0) !== $focus.get(0) && $focusCell.hasClass(EDITOR_INLINE_BLOCK);\n          $focus = $focusCell;\n        }\n\n        if ($focus.length && !$focus.hasClass(CELL_FOCUS_DISABLED_CLASS)) {\n          this.focus($focus, hideBorders);\n          return;\n        }\n      }\n    }\n\n    this.loseFocus();\n  },\n  _updateFocus: function _updateFocus(e) {\n    var that = this;\n    var isFocusOverlay = e && e.event && $(e.event.target).hasClass(that.addWidgetPrefix(FOCUS_OVERLAY_CLASS));\n    that._isFocusOverlay = that._isFocusOverlay || isFocusOverlay;\n    clearTimeout(that._updateFocusTimeoutID);\n    that._updateFocusTimeoutID = setTimeout(function () {\n      delete that._updateFocusTimeoutID;\n\n      if (!that._isFocusOverlay) {\n        that._updateFocusCore();\n      }\n\n      that._isFocusOverlay = false;\n    });\n  },\n  _updateFocusOverlaySize: function _updateFocusOverlaySize($element, position) {\n    $element.hide();\n    var location = positionUtils.calculate($element, extend({\n      collision: \"fit\"\n    }, position));\n\n    if (location.h.oversize > 0) {\n      setOuterWidth($element, getOuterWidth($element) - location.h.oversize);\n    }\n\n    if (location.v.oversize > 0) {\n      setOuterHeight($element, getOuterHeight($element) - location.v.oversize);\n    }\n\n    $element.show();\n  },\n  callbackNames: function callbackNames() {\n    return [\"focused\"];\n  },\n  focus: function focus($element, hideBorder) {\n    var that = this;\n\n    if (void 0 === $element) {\n      return that._$focusedElement;\n    } else if ($element) {\n      if (!$element.is(that._$focusedElement)) {\n        that._$focusedElement && that._$focusedElement.removeClass(FOCUSED_ELEMENT_CLASS);\n      }\n\n      that._$focusedElement = $element;\n      clearTimeout(that._focusTimeoutID);\n      that._focusTimeoutID = setTimeout(function () {\n        delete that._focusTimeoutID;\n        that.renderFocusOverlay($element, hideBorder);\n        $element.addClass(FOCUSED_ELEMENT_CLASS);\n        that.focused.fire($element);\n      });\n    }\n  },\n  refocus: function refocus() {\n    var $focus = this.focus();\n    this.focus($focus);\n  },\n  renderFocusOverlay: function renderFocusOverlay($element, hideBorder) {\n    if (!gridCoreUtils.isElementInCurrentGrid(this, $element)) {\n      return;\n    }\n\n    if (!this._$focusOverlay) {\n      this._$focusOverlay = $(\"<div>\").addClass(this.addWidgetPrefix(FOCUS_OVERLAY_CLASS));\n    }\n\n    if (hideBorder) {\n      this._$focusOverlay.addClass(DX_HIDDEN);\n    } else if ($element.length) {\n      var align = browser.mozilla ? \"right bottom\" : \"left top\";\n      var $content = $element.closest(\".\" + this.addWidgetPrefix(CONTENT_CLASS));\n      var elemCoord = getBoundingRect($element.get(0));\n\n      this._$focusOverlay.removeClass(DX_HIDDEN).appendTo($content);\n\n      setOuterHeight(this._$focusOverlay, elemCoord.bottom - elemCoord.top + 1);\n      setOuterWidth(this._$focusOverlay, elemCoord.right - elemCoord.left + 1);\n      var focusOverlayPosition = {\n        precise: true,\n        my: align,\n        at: align,\n        of: $element,\n        boundary: $content.length && $content\n      };\n\n      this._updateFocusOverlaySize(this._$focusOverlay, focusOverlayPosition);\n\n      positionUtils.setup(this._$focusOverlay, focusOverlayPosition);\n\n      this._$focusOverlay.css(\"visibility\", \"visible\");\n    }\n  },\n  resize: function resize() {\n    var $focusedElement = this._$focusedElement;\n\n    if ($focusedElement) {\n      this.focus($focusedElement);\n    }\n  },\n  loseFocus: function loseFocus() {\n    this._$focusedElement && this._$focusedElement.removeClass(FOCUSED_ELEMENT_CLASS);\n    this._$focusedElement = null;\n    this._$focusOverlay && this._$focusOverlay.addClass(DX_HIDDEN);\n  },\n  init: function init() {\n    this.createAction(\"onEditorPreparing\", {\n      excludeValidators: [\"disabled\", \"readOnly\"],\n      category: \"rendering\"\n    });\n    this.createAction(\"onEditorPrepared\", {\n      excludeValidators: [\"disabled\", \"readOnly\"],\n      category: \"rendering\"\n    });\n    this._updateFocusHandler = this._updateFocusHandler || this.createAction(this._updateFocus.bind(this));\n    eventsEngine.on(domAdapter.getDocument(), UPDATE_FOCUS_EVENTS, this._updateFocusHandler);\n\n    this._attachContainerEventHandlers();\n  },\n  _attachContainerEventHandlers: function _attachContainerEventHandlers() {\n    var that = this;\n    var $container = that.component && that.component.$element();\n\n    if ($container) {\n      eventsEngine.on($container, addNamespace(\"keydown\", MODULE_NAMESPACE), function (e) {\n        if (\"tab\" === normalizeKeyName(e)) {\n          that._updateFocusHandler(e);\n        }\n      });\n    }\n  },\n  dispose: function dispose() {\n    clearTimeout(this._focusTimeoutID);\n    clearTimeout(this._updateFocusTimeoutID);\n    eventsEngine.off(domAdapter.getDocument(), UPDATE_FOCUS_EVENTS, this._updateFocusHandler);\n  }\n}).include(EditorFactoryMixin);\nexport var editorFactoryModule = {\n  defaultOptions: function defaultOptions() {\n    return {};\n  },\n  controllers: {\n    editorFactory: EditorFactory\n  }\n};","map":null,"metadata":{},"sourceType":"module"}