{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/progress_bar.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../core/renderer\";\nimport TrackBar from \"./track_bar\";\nimport { extend } from \"../core/utils/extend\";\nimport { isFunction } from \"../core/utils/type\";\nimport registerComponent from \"../core/component_registrator\";\nvar PROGRESSBAR_CLASS = \"dx-progressbar\";\nvar PROGRESSBAR_CONTAINER_CLASS = \"dx-progressbar-container\";\nvar PROGRESSBAR_RANGE_CONTAINER_CLASS = \"dx-progressbar-range-container\";\nvar PROGRESSBAR_RANGE_CLASS = \"dx-progressbar-range\";\nvar PROGRESSBAR_WRAPPER_CLASS = \"dx-progressbar-wrapper\";\nvar PROGRESSBAR_STATUS_CLASS = \"dx-progressbar-status\";\nvar PROGRESSBAR_INDETERMINATE_SEGMENT_CONTAINER = \"dx-progressbar-animating-container\";\nvar PROGRESSBAR_INDETERMINATE_SEGMENT = \"dx-progressbar-animating-segment\";\nvar ProgressBar = TrackBar.inherit({\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      value: 0,\n      statusFormat: function statusFormat(ratio) {\n        return \"Progress: \" + Math.round(100 * ratio) + \"%\";\n      },\n      showStatus: true,\n      onComplete: null,\n      activeStateEnabled: false,\n      statusPosition: \"bottom left\",\n      _animatingSegmentCount: 0\n    });\n  },\n  _defaultOptionsRules: function _defaultOptionsRules() {\n    return this.callBase().concat([{\n      device: function device(_device) {\n        return \"android\" === _device.platform;\n      },\n      options: {\n        _animatingSegmentCount: 2\n      }\n    }]);\n  },\n  _initMarkup: function _initMarkup() {\n    this._renderStatus();\n\n    this._createCompleteAction();\n\n    this.callBase();\n    this.$element().addClass(PROGRESSBAR_CLASS);\n\n    this._$wrapper.addClass(PROGRESSBAR_WRAPPER_CLASS);\n\n    this._$bar.addClass(PROGRESSBAR_CONTAINER_CLASS);\n\n    this.setAria(\"role\", \"progressbar\");\n    $(\"<div>\").addClass(PROGRESSBAR_RANGE_CONTAINER_CLASS).appendTo(this._$wrapper).append(this._$bar);\n\n    this._$range.addClass(PROGRESSBAR_RANGE_CLASS);\n\n    this._toggleStatus(this.option(\"showStatus\"));\n  },\n  _useTemplates: function _useTemplates() {\n    return false;\n  },\n  _createCompleteAction: function _createCompleteAction() {\n    this._completeAction = this._createActionByOption(\"onComplete\");\n  },\n  _renderStatus: function _renderStatus() {\n    this._$status = $(\"<div>\").addClass(PROGRESSBAR_STATUS_CLASS);\n  },\n  _renderIndeterminateState: function _renderIndeterminateState() {\n    this._$segmentContainer = $(\"<div>\").addClass(PROGRESSBAR_INDETERMINATE_SEGMENT_CONTAINER);\n    var segments = this.option(\"_animatingSegmentCount\");\n\n    for (var i = 0; i < segments; i++) {\n      $(\"<div>\").addClass(PROGRESSBAR_INDETERMINATE_SEGMENT).addClass(PROGRESSBAR_INDETERMINATE_SEGMENT + \"-\" + (i + 1)).appendTo(this._$segmentContainer);\n    }\n\n    this._$segmentContainer.appendTo(this._$wrapper);\n  },\n  _toggleStatus: function _toggleStatus(value) {\n    var splitPosition = this.option(\"statusPosition\").split(\" \");\n\n    if (value) {\n      if (\"top\" === splitPosition[0] || \"left\" === splitPosition[0]) {\n        this._$status.prependTo(this._$wrapper);\n      } else {\n        this._$status.appendTo(this._$wrapper);\n      }\n    } else {\n      this._$status.detach();\n    }\n\n    this._togglePositionClass();\n  },\n  _togglePositionClass: function _togglePositionClass() {\n    var position = this.option(\"statusPosition\");\n    var splitPosition = position.split(\" \");\n\n    this._$wrapper.removeClass(\"dx-position-top-left dx-position-top-right dx-position-bottom-left dx-position-bottom-right dx-position-left dx-position-right\");\n\n    var positionClass = \"dx-position-\" + splitPosition[0];\n\n    if (splitPosition[1]) {\n      positionClass += \"-\" + splitPosition[1];\n    }\n\n    this._$wrapper.addClass(positionClass);\n  },\n  _toggleIndeterminateState: function _toggleIndeterminateState(value) {\n    if (value) {\n      this._renderIndeterminateState();\n\n      this._$bar.toggle(false);\n    } else {\n      this._$bar.toggle(true);\n\n      this._$segmentContainer.remove();\n\n      delete this._$segmentContainer;\n    }\n  },\n  _renderValue: function _renderValue() {\n    var val = this.option(\"value\");\n    var max = this.option(\"max\");\n\n    if (!val && 0 !== val) {\n      this._toggleIndeterminateState(true);\n\n      return;\n    }\n\n    if (this._$segmentContainer) {\n      this._toggleIndeterminateState(false);\n    }\n\n    if (val === max) {\n      this._completeAction();\n    }\n\n    this.callBase();\n\n    this._setStatus();\n  },\n  _setStatus: function _setStatus() {\n    var format = this.option(\"statusFormat\");\n\n    if (isFunction(format)) {\n      format = format.bind(this);\n    } else {\n      format = function format(value) {\n        return value;\n      };\n    }\n\n    var statusText = format(this._currentRatio, this.option(\"value\"));\n\n    this._$status.text(statusText);\n  },\n  _dispose: function _dispose() {\n    this._$status.remove();\n\n    this.callBase();\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"statusFormat\":\n        this._setStatus();\n\n        break;\n\n      case \"showStatus\":\n        this._toggleStatus(args.value);\n\n        break;\n\n      case \"statusPosition\":\n        this._toggleStatus(this.option(\"showStatus\"));\n\n        break;\n\n      case \"onComplete\":\n        this._createCompleteAction();\n\n        break;\n\n      case \"_animatingSegmentCount\":\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  }\n});\nregisterComponent(\"dxProgressBar\", ProgressBar);\nexport default ProgressBar;","map":null,"metadata":{},"sourceType":"module"}