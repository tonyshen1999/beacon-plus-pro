{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.context_menu.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport { isDefined, isString } from \"../../core/utils/type\";\nimport { ensureDefined } from \"../../core/utils/common\";\nimport Widget from \"../widget/ui.widget\";\nimport ContextMenu from \"../context_menu/ui.context_menu\";\nimport { extendAttributes } from \"./ui.file_manager.common\";\nvar FILEMANAGER_CONTEXT_MEMU_CLASS = \"dx-filemanager-context-menu\";\nvar DEFAULT_CONTEXT_MENU_ITEMS = {\n  create: {},\n  upload: {},\n  download: {},\n  rename: {},\n  move: {},\n  copy: {},\n  delete: {},\n  refresh: {\n    beginGroup: true\n  }\n};\nvar DEFAULT_ITEM_ALLOWED_PROPERTIES = [\"beginGroup\", \"closeMenuOnClick\", \"disabled\", \"icon\", \"selectable\", \"selected\", \"text\", \"visible\"];\n\nvar FileManagerContextMenu = /*#__PURE__*/function (_Widget) {\n  _inherits(FileManagerContextMenu, _Widget);\n\n  var _super = _createSuper(FileManagerContextMenu);\n\n  function FileManagerContextMenu() {\n    _classCallCheck(this, FileManagerContextMenu);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FileManagerContextMenu, [{\n    key: \"_initMarkup\",\n    value: function _initMarkup() {\n      var _this = this;\n\n      this._initActions();\n\n      this._isVisible = false;\n      var $menu = $(\"<div>\").appendTo(this.$element());\n      this._contextMenu = this._createComponent($menu, ContextMenu, {\n        cssClass: FILEMANAGER_CONTEXT_MEMU_CLASS,\n        showEvent: \"\",\n        onItemClick: function onItemClick(args) {\n          return _this._onContextMenuItemClick(args.itemData.name, args);\n        },\n        onShowing: function onShowing(e) {\n          return _this._onContextMenuShowing(e);\n        },\n        onShown: function onShown() {\n          return _this._onContextMenuShown();\n        },\n        onHidden: function onHidden() {\n          return _this._onContextMenuHidden();\n        }\n      });\n\n      _get(_getPrototypeOf(FileManagerContextMenu.prototype), \"_initMarkup\", this).call(this);\n    }\n  }, {\n    key: \"showAt\",\n    value: function showAt(fileItems, element, event, target) {\n      var itemData = target.itemData,\n          itemElement = target.itemElement,\n          _target$isActionButto = target.isActionButton,\n          isActionButton = _target$isActionButto === void 0 ? false : _target$isActionButto;\n\n      if (this._isVisible) {\n        this._onContextMenuHidden();\n      }\n\n      this._menuShowingContext = {\n        targetElement: itemElement,\n        itemData: itemData,\n        fileItems: fileItems,\n        event: event,\n        isActionButton: isActionButton\n      };\n      var position = {\n        of: element,\n        at: \"top left\",\n        my: \"top left\",\n        offset: \"\"\n      };\n\n      if (event) {\n        position.offset = event.offsetX + \" \" + event.offsetY;\n      } else {\n        position.my = \"left top\";\n        position.at = \"left bottom\";\n        position.boundaryOffset = \"1\";\n      }\n\n      this._contextMenu.option({\n        target: element,\n        position: position\n      });\n\n      this._contextMenu.show();\n    }\n  }, {\n    key: \"createContextMenuItems\",\n    value: function createContextMenuItems(fileItems, contextMenuItems, targetFileItem) {\n      var _this2 = this;\n\n      this._targetFileItems = fileItems;\n      this._targetFileItem = isDefined(targetFileItem) ? targetFileItem : null === fileItems || void 0 === fileItems ? void 0 : fileItems[0];\n      var result = [];\n      var itemArray = contextMenuItems || this.option(\"items\");\n      itemArray.forEach(function (srcItem) {\n        var commandName = isString(srcItem) ? srcItem : srcItem.name;\n\n        var item = _this2._configureItemByCommandName(commandName, srcItem, fileItems, _this2._targetFileItem);\n\n        if (_this2._isContextMenuItemAvailable(item, fileItems)) {\n          result.push(item);\n        }\n      });\n      return result;\n    }\n  }, {\n    key: \"_isContextMenuItemAvailable\",\n    value: function _isContextMenuItemAvailable(menuItem, fileItems) {\n      if (!this._isDefaultItem(menuItem.name) || !menuItem._autoHide) {\n        return ensureDefined(menuItem.visible, true);\n      }\n\n      if (this._isIsolatedCreationItemCommand(menuItem.name) && fileItems && fileItems.length) {\n        return false;\n      }\n\n      return this._commandManager.isCommandAvailable(menuItem.name, fileItems);\n    }\n  }, {\n    key: \"_isIsolatedCreationItemCommand\",\n    value: function _isIsolatedCreationItemCommand(commandName) {\n      return (\"create\" === commandName || \"upload\" === commandName) && this.option(\"isolateCreationItemCommands\");\n    }\n  }, {\n    key: \"_isDefaultItem\",\n    value: function _isDefaultItem(commandName) {\n      return !!DEFAULT_CONTEXT_MENU_ITEMS[commandName];\n    }\n  }, {\n    key: \"_configureItemByCommandName\",\n    value: function _configureItemByCommandName(commandName, item, fileItems, targetFileItem) {\n      if (!this._isDefaultItem(commandName)) {\n        var res = extend(true, {}, item);\n        res.originalItemData = item;\n\n        this._addItemClickHandler(commandName, res);\n\n        if (Array.isArray(item.items)) {\n          res.items = this.createContextMenuItems(fileItems, item.items, targetFileItem);\n        }\n\n        return res;\n      }\n\n      var result = this._createMenuItemByCommandName(commandName);\n\n      var defaultConfig = DEFAULT_CONTEXT_MENU_ITEMS[commandName];\n      extend(result, defaultConfig);\n      result.originalItemData = item;\n      extendAttributes(result, item, DEFAULT_ITEM_ALLOWED_PROPERTIES);\n\n      if (!isDefined(result.visible)) {\n        result._autoHide = true;\n      }\n\n      if (commandName && !result.name) {\n        extend(result, {\n          name: commandName\n        });\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_createMenuItemByCommandName\",\n    value: function _createMenuItemByCommandName(commandName) {\n      var _this$_commandManager = this._commandManager.getCommandByName(commandName),\n          text = _this$_commandManager.text,\n          icon = _this$_commandManager.icon;\n\n      var menuItem = {\n        name: commandName,\n        text: text,\n        icon: icon\n      };\n\n      this._addItemClickHandler(commandName, menuItem);\n\n      return menuItem;\n    }\n  }, {\n    key: \"_addItemClickHandler\",\n    value: function _addItemClickHandler(commandName, contextMenuItem) {\n      var _this3 = this;\n\n      contextMenuItem.onItemClick = function (args) {\n        return _this3._onContextMenuItemClick(commandName, args);\n      };\n    }\n  }, {\n    key: \"_onContextMenuItemClick\",\n    value: function _onContextMenuItemClick(commandName, args) {\n      var _this$_targetFileItem;\n\n      var changedArgs = extend(true, {}, args);\n      changedArgs.itemData = args.itemData.originalItemData;\n      changedArgs.fileSystemItem = null === (_this$_targetFileItem = this._targetFileItem) || void 0 === _this$_targetFileItem ? void 0 : _this$_targetFileItem.fileItem;\n      changedArgs.viewArea = this.option(\"viewArea\");\n\n      this._actions.onItemClick(changedArgs);\n\n      if (this._isDefaultItem(commandName)) {\n        var targetFileItems = this._isIsolatedCreationItemCommand(commandName) ? null : this._targetFileItems;\n\n        this._commandManager.executeCommand(commandName, targetFileItems);\n      }\n    }\n  }, {\n    key: \"_initActions\",\n    value: function _initActions() {\n      this._actions = {\n        onContextMenuHidden: this._createActionByOption(\"onContextMenuHidden\"),\n        onContextMenuShowing: this._createActionByOption(\"onContextMenuShowing\"),\n        onItemClick: this._createActionByOption(\"onItemClick\")\n      };\n    }\n  }, {\n    key: \"_onContextMenuShowing\",\n    value: function _onContextMenuShowing(e) {\n      if (this._isVisible) {\n        this._onContextMenuHidden(true);\n      }\n\n      e = extend(e, this._menuShowingContext, {\n        options: this.option(),\n        cancel: false\n      });\n\n      this._actions.onContextMenuShowing(e);\n\n      if (!e.cancel) {\n        var items = this.createContextMenuItems(this._menuShowingContext.fileItems, null, this._menuShowingContext.fileSystemItem);\n\n        this._contextMenu.option(\"dataSource\", items);\n      }\n    }\n  }, {\n    key: \"tryUpdateVisibleContextMenu\",\n    value: function tryUpdateVisibleContextMenu() {\n      if (this._isVisible) {\n        var items = this.createContextMenuItems(this._targetFileItems);\n\n        this._contextMenu.option(\"dataSource\", items);\n      }\n    }\n  }, {\n    key: \"_onContextMenuShown\",\n    value: function _onContextMenuShown() {\n      this._isVisible = true;\n    }\n  }, {\n    key: \"_onContextMenuHidden\",\n    value: function _onContextMenuHidden(preserveContext) {\n      this._isVisible = false;\n\n      if (!preserveContext) {\n        this._menuShowingContext = {};\n      }\n\n      this._contextMenu.option(\"visible\", false);\n\n      this._raiseContextMenuHidden();\n    }\n  }, {\n    key: \"_raiseContextMenuHidden\",\n    value: function _raiseContextMenuHidden() {\n      this._actions.onContextMenuHidden();\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function _getDefaultOptions() {\n      return extend(_get(_getPrototypeOf(FileManagerContextMenu.prototype), \"_getDefaultOptions\", this).call(this), {\n        commandManager: null,\n        onContextMenuHidden: null,\n        onItemClick: null\n      });\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function _optionChanged(args) {\n      var name = args.name;\n\n      switch (name) {\n        case \"commandManager\":\n          this.repaint();\n          break;\n\n        case \"items\":\n          this.tryUpdateVisibleContextMenu();\n          break;\n\n        case \"onItemClick\":\n        case \"onContextMenuShowing\":\n        case \"onContextMenuHidden\":\n          this._actions[name] = this._createActionByOption(name);\n          break;\n\n        default:\n          _get(_getPrototypeOf(FileManagerContextMenu.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }, {\n    key: \"_commandManager\",\n    get: function get() {\n      return this.option(\"commandManager\");\n    }\n  }]);\n\n  return FileManagerContextMenu;\n}(Widget);\n\nexport default FileManagerContextMenu;","map":null,"metadata":{},"sourceType":"module"}