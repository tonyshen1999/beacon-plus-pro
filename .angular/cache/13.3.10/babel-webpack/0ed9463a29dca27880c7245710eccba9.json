{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/color_box/color_view.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getHeight, getWidth, getOuterHeight } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { locate, move } from \"../../animation/translator\";\nimport { extend } from \"../../core/utils/extend\";\nimport Color from \"../../color\";\nimport messageLocalization from \"../../localization/message\";\nimport devices from \"../../core/devices\";\nimport registerComponent from \"../../core/component_registrator\";\nimport Editor from \"../editor/editor\";\nimport NumberBox from \"../number_box\";\nimport TextBox from \"../text_box\";\nimport Draggable from \"../draggable\";\nimport { isCommandKeyPressed } from \"../../events/utils/index\";\nimport { name as clickEventName } from \"../../events/click\";\nvar COLOR_VIEW_CLASS = \"dx-colorview\";\nvar COLOR_VIEW_CONTAINER_CLASS = \"dx-colorview-container\";\nvar COLOR_VIEW_ROW_CLASS = \"dx-colorview-container-row\";\nvar COLOR_VIEW_CELL_CLASS = \"dx-colorview-container-cell\";\nvar COLOR_VIEW_PALETTE_CLASS = \"dx-colorview-palette\";\nvar COLOR_VIEW_PALETTE_CELL_CLASS = \"dx-colorview-palette-cell\";\nvar COLOR_VIEW_PALETTE_HANDLE_CLASS = \"dx-colorview-palette-handle\";\nvar COLOR_VIEW_PALETTE_GRADIENT_CLASS = \"dx-colorview-palette-gradient\";\nvar COLOR_VIEW_PALETTE_GRADIENT_WHITE_CLASS = \"dx-colorview-palette-gradient-white\";\nvar COLOR_VIEW_PALETTE_GRADIENT_BLACK_CLASS = \"dx-colorview-palette-gradient-black\";\nvar COLOR_VIEW_HUE_SCALE_CLASS = \"dx-colorview-hue-scale\";\nvar COLOR_VIEW_HUE_SCALE_CELL_CLASS = \"dx-colorview-hue-scale-cell\";\nvar COLOR_VIEW_HUE_SCALE_HANDLE_CLASS = \"dx-colorview-hue-scale-handle\";\nvar COLOR_VIEW_HUE_SCALE_WRAPPER_CLASS = \"dx-colorview-hue-scale-wrapper\";\nvar COLOR_VIEW_CONTROLS_CONTAINER_CLASS = \"dx-colorview-controls-container\";\nvar COLOR_VIEW_RED_LABEL_CLASS = \"dx-colorview-label-red\";\nvar COLOR_VIEW_GREEN_LABEL_CLASS = \"dx-colorview-label-green\";\nvar COLOR_VIEW_BLUE_LABEL_CLASS = \"dx-colorview-label-blue\";\nvar COLOR_VIEW_HEX_LABEL_CLASS = \"dx-colorview-label-hex\";\nvar COLOR_VIEW_ALPHA_CHANNEL_SCALE_CLASS = \"dx-colorview-alpha-channel-scale\";\nvar COLOR_VIEW_APLHA_CHANNEL_ROW_CLASS = \"dx-colorview-alpha-channel-row\";\nvar COLOR_VIEW_ALPHA_CHANNEL_SCALE_WRAPPER_CLASS = \"dx-colorview-alpha-channel-wrapper\";\nvar COLOR_VIEW_ALPHA_CHANNEL_LABEL_CLASS = \"dx-colorview-alpha-channel-label\";\nvar COLOR_VIEW_ALPHA_CHANNEL_HANDLE_CLASS = \"dx-colorview-alpha-channel-handle\";\nvar COLOR_VIEW_ALPHA_CHANNEL_CELL_CLASS = \"dx-colorview-alpha-channel-cell\";\nvar COLOR_VIEW_ALPHA_CHANNEL_BORDER_CLASS = \"dx-colorview-alpha-channel-border\";\nvar COLOR_VIEW_COLOR_PREVIEW = \"dx-colorview-color-preview\";\nvar COLOR_VIEW_COLOR_PREVIEW_CONTAINER_CLASS = \"dx-colorview-color-preview-container\";\nvar COLOR_VIEW_COLOR_PREVIEW_CONTAINER_INNER_CLASS = \"dx-colorview-color-preview-container-inner\";\nvar COLOR_VIEW_COLOR_PREVIEW_COLOR_CURRENT = \"dx-colorview-color-preview-color-current\";\nvar COLOR_VIEW_COLOR_PREVIEW_COLOR_NEW = \"dx-colorview-color-preview-color-new\";\nvar ColorView = Editor.inherit({\n  _supportedKeys: function _supportedKeys() {\n    var isRTL = this.option(\"rtlEnabled\");\n    var that = this;\n\n    var getHorizontalPaletteStep = function getHorizontalPaletteStep(e) {\n      var step = 100 / that._paletteWidth;\n\n      if (e.shiftKey) {\n        step *= that.option(\"keyStep\");\n      }\n\n      step = step > 1 ? step : 1;\n      return Math.round(step);\n    };\n\n    var updateHorizontalPaletteValue = function updateHorizontalPaletteValue(step) {\n      var value = that._currentColor.hsv.s + step;\n\n      if (value > 100) {\n        value = 100;\n      } else if (value < 0) {\n        value = 0;\n      }\n\n      that._currentColor.hsv.s = value;\n      updatePaletteValue();\n    };\n\n    var getVerticalPaletteStep = function getVerticalPaletteStep(e) {\n      var step = 100 / that._paletteHeight;\n\n      if (e.shiftKey) {\n        step *= that.option(\"keyStep\");\n      }\n\n      step = step > 1 ? step : 1;\n      return Math.round(step);\n    };\n\n    var updateVerticalPaletteValue = function updateVerticalPaletteValue(step) {\n      var value = that._currentColor.hsv.v + step;\n\n      if (value > 100) {\n        value = 100;\n      } else if (value < 0) {\n        value = 0;\n      }\n\n      that._currentColor.hsv.v = value;\n      updatePaletteValue();\n    };\n\n    function updatePaletteValue() {\n      that._placePaletteHandle();\n\n      that._updateColorFromHsv(that._currentColor.hsv.h, that._currentColor.hsv.s, that._currentColor.hsv.v);\n    }\n\n    var getHueScaleStep = function getHueScaleStep(e) {\n      var step = 360 / (that._hueScaleWrapperHeight - that._hueScaleHandleHeight);\n\n      if (e.shiftKey) {\n        step *= that.option(\"keyStep\");\n      }\n\n      step = step > 1 ? step : 1;\n      return step;\n    };\n\n    var updateHueScaleValue = function updateHueScaleValue(step) {\n      that._currentColor.hsv.h += step;\n\n      that._placeHueScaleHandle();\n\n      var handleLocation = locate(that._$hueScaleHandle);\n\n      that._updateColorHue(handleLocation.top + that._hueScaleHandleHeight / 2);\n    };\n\n    var getAlphaScaleStep = function getAlphaScaleStep(e) {\n      var step = 1 / that._alphaChannelScaleWorkWidth;\n\n      if (e.shiftKey) {\n        step *= that.option(\"keyStep\");\n      }\n\n      step = step > .01 ? step : .01;\n      step = isRTL ? -step : step;\n      return step;\n    };\n\n    var updateAlphaScaleValue = function updateAlphaScaleValue(step) {\n      that._currentColor.a += step;\n\n      that._placeAlphaChannelHandle();\n\n      var handleLocation = locate(that._$alphaChannelHandle);\n\n      that._calculateColorTransparencyByScaleWidth(handleLocation.left + that._alphaChannelHandleWidth / 2);\n    };\n\n    return extend(this.callBase(), {\n      upArrow: function upArrow(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (isCommandKeyPressed(e)) {\n          if (this._currentColor.hsv.h <= 360 && !this._isTopColorHue) {\n            this._saveValueChangeEvent(e);\n\n            updateHueScaleValue(getHueScaleStep(e));\n          }\n        } else if (this._currentColor.hsv.v < 100) {\n          this._saveValueChangeEvent(e);\n\n          updateVerticalPaletteValue(getVerticalPaletteStep(e));\n        }\n      },\n      downArrow: function downArrow(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (isCommandKeyPressed(e)) {\n          if (this._currentColor.hsv.h >= 0) {\n            if (this._isTopColorHue) {\n              this._currentColor.hsv.h = 360;\n            }\n\n            this._saveValueChangeEvent(e);\n\n            updateHueScaleValue(-getHueScaleStep(e));\n          }\n        } else if (this._currentColor.hsv.v > 0) {\n          this._saveValueChangeEvent(e);\n\n          updateVerticalPaletteValue(-getVerticalPaletteStep(e));\n        }\n      },\n      rightArrow: function rightArrow(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (isCommandKeyPressed(e)) {\n          if (isRTL ? this._currentColor.a < 1 : this._currentColor.a > 0 && this.option(\"editAlphaChannel\")) {\n            this._saveValueChangeEvent(e);\n\n            updateAlphaScaleValue(-getAlphaScaleStep(e));\n          }\n        } else if (this._currentColor.hsv.s < 100) {\n          this._saveValueChangeEvent(e);\n\n          updateHorizontalPaletteValue(getHorizontalPaletteStep(e));\n        }\n      },\n      leftArrow: function leftArrow(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (isCommandKeyPressed(e)) {\n          if (isRTL ? this._currentColor.a > 0 : this._currentColor.a < 1 && this.option(\"editAlphaChannel\")) {\n            this._saveValueChangeEvent(e);\n\n            updateAlphaScaleValue(getAlphaScaleStep(e));\n          }\n        } else if (this._currentColor.hsv.s > 0) {\n          this._saveValueChangeEvent(e);\n\n          updateHorizontalPaletteValue(-getHorizontalPaletteStep(e));\n        }\n      },\n      enter: function enter(e) {\n        this._fireEnterKeyPressed(e);\n      }\n    });\n  },\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      value: null,\n      matchValue: null,\n      onEnterKeyPressed: void 0,\n      editAlphaChannel: false,\n      keyStep: 1,\n      stylingMode: void 0\n    });\n  },\n  _defaultOptionsRules: function _defaultOptionsRules() {\n    return this.callBase().concat([{\n      device: function device() {\n        return \"desktop\" === devices.real().deviceType && !devices.isSimulator();\n      },\n      options: {\n        focusStateEnabled: true\n      }\n    }]);\n  },\n  _init: function _init() {\n    this.callBase();\n\n    this._initColorAndOpacity();\n\n    this._initEnterKeyPressedAction();\n  },\n  _initEnterKeyPressedAction: function _initEnterKeyPressedAction() {\n    this._onEnterKeyPressedAction = this._createActionByOption(\"onEnterKeyPressed\");\n  },\n  _fireEnterKeyPressed: function _fireEnterKeyPressed(e) {\n    if (!this._onEnterKeyPressedAction) {\n      return;\n    }\n\n    this._onEnterKeyPressedAction({\n      event: e\n    });\n  },\n  _initColorAndOpacity: function _initColorAndOpacity() {\n    this._setCurrentColor(this.option(\"value\"));\n  },\n  _setCurrentColor: function _setCurrentColor(value) {\n    value = value || \"#000000\";\n    var newColor = new Color(value);\n\n    if (!newColor.colorIsInvalid) {\n      if (!this._currentColor || this._makeRgba(this._currentColor) !== this._makeRgba(newColor)) {\n        this._currentColor = newColor;\n\n        if (this._$currentColor) {\n          this._makeTransparentBackground(this._$currentColor, newColor);\n        }\n      }\n    } else {\n      this.option(\"value\", this._currentColor.baseColor);\n    }\n  },\n  _setBaseColor: function _setBaseColor(value) {\n    var color = value || \"#000000\";\n    var newColor = new Color(color);\n\n    if (!newColor.colorIsInvalid) {\n      var isBaseColorChanged = this._makeRgba(this.option(\"matchValue\") !== this._makeRgba(newColor));\n\n      if (isBaseColorChanged) {\n        if (this._$baseColor) {\n          this._makeTransparentBackground(this._$baseColor, newColor);\n        }\n      }\n    }\n  },\n  _initMarkup: function _initMarkup() {\n    this.callBase();\n    this.$element().addClass(COLOR_VIEW_CLASS);\n\n    this._renderColorPickerContainer();\n  },\n  _render: function _render() {\n    this.callBase();\n\n    this._renderPalette();\n\n    this._renderHueScale();\n\n    this._renderControlsContainer();\n\n    this._renderControls();\n\n    this._renderAlphaChannelElements();\n  },\n  _makeTransparentBackground: function _makeTransparentBackground($el, color) {\n    if (!(color instanceof Color)) {\n      color = new Color(color);\n    }\n\n    $el.css(\"backgroundColor\", this._makeRgba(color));\n  },\n  _makeRgba: function _makeRgba(color) {\n    if (!(color instanceof Color)) {\n      color = new Color(color);\n    }\n\n    return \"rgba(\" + [color.r, color.g, color.b, color.a].join(\", \") + \")\";\n  },\n  _renderValue: function _renderValue() {\n    this.callBase(this.option(\"editAlphaChannel\") ? this._makeRgba(this._currentColor) : this.option(\"value\"));\n  },\n  _renderColorPickerContainer: function _renderColorPickerContainer() {\n    var $parent = this.$element();\n    this._$colorPickerContainer = $(\"<div>\").addClass(COLOR_VIEW_CONTAINER_CLASS).appendTo($parent);\n\n    this._renderHtmlRows();\n  },\n  _renderHtmlRows: function _renderHtmlRows(updatedOption) {\n    var $renderedRows = this._$colorPickerContainer.find(\".\" + COLOR_VIEW_ROW_CLASS);\n\n    var renderedRowsCount = $renderedRows.length;\n    var rowCount = this.option(\"editAlphaChannel\") ? 2 : 1;\n    var delta = renderedRowsCount - rowCount;\n\n    if (delta > 0) {\n      $renderedRows.eq(-1).remove();\n    }\n\n    if (delta < 0) {\n      delta = Math.abs(delta);\n      var rows = [];\n      var i;\n\n      for (i = 0; i < delta; i++) {\n        rows.push($(\"<div>\").addClass(COLOR_VIEW_ROW_CLASS));\n      }\n\n      if (renderedRowsCount) {\n        for (i = 0; i < rows.length; i++) {\n          $renderedRows.eq(0).after(rows[i]);\n        }\n      } else {\n        this._$colorPickerContainer.append(rows);\n      }\n    }\n  },\n  _renderHtmlCellInsideRow: function _renderHtmlCellInsideRow(index, $rowParent, additionalClass) {\n    return $(\"<div>\").addClass(COLOR_VIEW_CELL_CLASS).addClass(additionalClass).appendTo($rowParent.find(\".\" + COLOR_VIEW_ROW_CLASS).eq(index));\n  },\n  _renderPalette: function _renderPalette() {\n    var $paletteCell = this._renderHtmlCellInsideRow(0, this._$colorPickerContainer, COLOR_VIEW_PALETTE_CELL_CLASS);\n\n    var $paletteGradientWhite = $(\"<div>\").addClass([COLOR_VIEW_PALETTE_GRADIENT_CLASS, COLOR_VIEW_PALETTE_GRADIENT_WHITE_CLASS].join(\" \"));\n    var $paletteGradientBlack = $(\"<div>\").addClass([COLOR_VIEW_PALETTE_GRADIENT_CLASS, COLOR_VIEW_PALETTE_GRADIENT_BLACK_CLASS].join(\" \"));\n    this._$palette = $(\"<div>\").addClass(COLOR_VIEW_PALETTE_CLASS).css(\"backgroundColor\", this._currentColor.getPureColor().toHex()).appendTo($paletteCell);\n    this._paletteHeight = getHeight(this._$palette);\n    this._paletteWidth = getWidth(this._$palette);\n\n    this._renderPaletteHandle();\n\n    this._$palette.append([$paletteGradientWhite, $paletteGradientBlack]);\n  },\n  _renderPaletteHandle: function _renderPaletteHandle() {\n    var _this = this;\n\n    this._$paletteHandle = $(\"<div>\").addClass(COLOR_VIEW_PALETTE_HANDLE_CLASS).appendTo(this._$palette);\n\n    this._createComponent(this._$paletteHandle, Draggable, {\n      contentTemplate: null,\n      boundary: this._$palette,\n      allowMoveByClick: true,\n      boundOffset: function () {\n        return -this._paletteHandleHeight / 2;\n      }.bind(this),\n      onDragMove: function onDragMove(_ref) {\n        var event = _ref.event;\n        var paletteHandlePosition = locate(_this._$paletteHandle);\n        _this._updateByDrag = true;\n\n        _this._saveValueChangeEvent(event);\n\n        _this._updateColorFromHsv(_this._currentColor.hsv.h, _this._calculateColorSaturation(paletteHandlePosition), _this._calculateColorValue(paletteHandlePosition));\n      }\n    });\n\n    this._paletteHandleWidth = getWidth(this._$paletteHandle);\n    this._paletteHandleHeight = getHeight(this._$paletteHandle);\n\n    this._placePaletteHandle();\n  },\n  _placePaletteHandle: function _placePaletteHandle() {\n    move(this._$paletteHandle, {\n      left: Math.round(this._paletteWidth * this._currentColor.hsv.s / 100 - this._paletteHandleWidth / 2),\n      top: Math.round(this._paletteHeight - this._paletteHeight * this._currentColor.hsv.v / 100 - this._paletteHandleHeight / 2)\n    });\n  },\n  _calculateColorValue: function _calculateColorValue(paletteHandlePosition) {\n    var value = Math.floor(paletteHandlePosition.top + this._paletteHandleHeight / 2);\n    return 100 - Math.round(100 * value / this._paletteHeight);\n  },\n  _calculateColorSaturation: function _calculateColorSaturation(paletteHandlePosition) {\n    var saturation = Math.floor(paletteHandlePosition.left + this._paletteHandleWidth / 2);\n    return Math.round(100 * saturation / this._paletteWidth);\n  },\n  _updateColorFromHsv: function _updateColorFromHsv(hue, saturation, value) {\n    var a = this._currentColor.a;\n    this._currentColor = new Color(\"hsv(\" + [hue, saturation, value].join(\",\") + \")\");\n    this._currentColor.a = a;\n\n    this._updateColorParamsAndColorPreview();\n\n    this.applyColor();\n  },\n  _renderHueScale: function _renderHueScale() {\n    var $hueScaleCell = this._renderHtmlCellInsideRow(0, this._$colorPickerContainer, COLOR_VIEW_HUE_SCALE_CELL_CLASS);\n\n    this._$hueScaleWrapper = $(\"<div>\").addClass(COLOR_VIEW_HUE_SCALE_WRAPPER_CLASS).appendTo($hueScaleCell);\n    this._$hueScale = $(\"<div>\").addClass(COLOR_VIEW_HUE_SCALE_CLASS).appendTo(this._$hueScaleWrapper);\n    this._hueScaleHeight = getHeight(this._$hueScale);\n    this._hueScaleWrapperHeight = getOuterHeight(this._$hueScaleWrapper);\n\n    this._renderHueScaleHandle();\n  },\n  _renderHueScaleHandle: function _renderHueScaleHandle() {\n    var _this2 = this;\n\n    this._$hueScaleHandle = $(\"<div>\").addClass(COLOR_VIEW_HUE_SCALE_HANDLE_CLASS).appendTo(this._$hueScaleWrapper);\n\n    this._createComponent(this._$hueScaleHandle, Draggable, {\n      contentTemplate: null,\n      boundary: this._$hueScaleWrapper,\n      allowMoveByClick: true,\n      dragDirection: \"vertical\",\n      onDragMove: function onDragMove(_ref2) {\n        var event = _ref2.event;\n        _this2._updateByDrag = true;\n\n        _this2._saveValueChangeEvent(event);\n\n        _this2._updateColorHue(locate(_this2._$hueScaleHandle).top + _this2._hueScaleHandleHeight / 2);\n      }\n    });\n\n    this._hueScaleHandleHeight = getHeight(this._$hueScaleHandle);\n\n    this._placeHueScaleHandle();\n  },\n  _placeHueScaleHandle: function _placeHueScaleHandle() {\n    var hueScaleHeight = this._hueScaleWrapperHeight;\n    var handleHeight = this._hueScaleHandleHeight;\n    var top = (hueScaleHeight - handleHeight) * (360 - this._currentColor.hsv.h) / 360;\n\n    if (hueScaleHeight < top + handleHeight) {\n      top = hueScaleHeight - handleHeight;\n    }\n\n    if (top < 0) {\n      top = 0;\n    }\n\n    move(this._$hueScaleHandle, {\n      top: Math.round(top)\n    });\n  },\n  _updateColorHue: function _updateColorHue(handlePosition) {\n    var hue = 360 - Math.round(360 * (handlePosition - this._hueScaleHandleHeight / 2) / (this._hueScaleWrapperHeight - this._hueScaleHandleHeight));\n    var saturation = this._currentColor.hsv.s;\n    var value = this._currentColor.hsv.v;\n    this._isTopColorHue = false;\n    hue = hue < 0 ? 0 : hue;\n\n    if (hue >= 360) {\n      this._isTopColorHue = true;\n      hue = 0;\n    }\n\n    this._updateColorFromHsv(hue, saturation, value);\n\n    this._$palette.css(\"backgroundColor\", this._currentColor.getPureColor().toHex());\n  },\n  _renderControlsContainer: function _renderControlsContainer() {\n    var $controlsContainerCell = this._renderHtmlCellInsideRow(0, this._$colorPickerContainer);\n\n    this._$controlsContainer = $(\"<div>\").addClass(COLOR_VIEW_CONTROLS_CONTAINER_CLASS).appendTo($controlsContainerCell);\n  },\n  _renderControls: function _renderControls() {\n    this._renderColorsPreview();\n\n    this._renderRgbInputs();\n\n    this._renderHexInput();\n  },\n  _renderColorsPreview: function _renderColorsPreview() {\n    var $colorsPreviewContainer = $(\"<div>\").addClass(COLOR_VIEW_COLOR_PREVIEW_CONTAINER_CLASS).appendTo(this._$controlsContainer);\n    var $colorsPreviewContainerInner = $(\"<div>\").addClass(COLOR_VIEW_COLOR_PREVIEW_CONTAINER_INNER_CLASS).appendTo($colorsPreviewContainer);\n    this._$currentColor = $(\"<div>\").addClass([COLOR_VIEW_COLOR_PREVIEW, COLOR_VIEW_COLOR_PREVIEW_COLOR_NEW].join(\" \"));\n    this._$baseColor = $(\"<div>\").addClass([COLOR_VIEW_COLOR_PREVIEW, COLOR_VIEW_COLOR_PREVIEW_COLOR_CURRENT].join(\" \"));\n\n    this._makeTransparentBackground(this._$baseColor, this.option(\"matchValue\"));\n\n    this._makeTransparentBackground(this._$currentColor, this._currentColor);\n\n    $colorsPreviewContainerInner.append([this._$baseColor, this._$currentColor]);\n  },\n  _renderAlphaChannelElements: function _renderAlphaChannelElements() {\n    if (this.option(\"editAlphaChannel\")) {\n      this._$colorPickerContainer.find(\".\" + COLOR_VIEW_ROW_CLASS).eq(1).addClass(COLOR_VIEW_APLHA_CHANNEL_ROW_CLASS);\n\n      this._renderAlphaChannelScale();\n\n      this._renderAlphaChannelInput();\n    }\n  },\n  _renderRgbInputs: function _renderRgbInputs() {\n    this._rgbInputsWithLabels = [this._renderEditorWithLabel({\n      editorType: NumberBox,\n      value: this._currentColor.r,\n      onValueChanged: this._updateColor.bind(this, false),\n      labelText: \"R\",\n      labelAriaText: messageLocalization.format(\"dxColorView-ariaRed\"),\n      labelClass: COLOR_VIEW_RED_LABEL_CLASS\n    }), this._renderEditorWithLabel({\n      editorType: NumberBox,\n      value: this._currentColor.g,\n      onValueChanged: this._updateColor.bind(this, false),\n      labelText: \"G\",\n      labelAriaText: messageLocalization.format(\"dxColorView-ariaGreen\"),\n      labelClass: COLOR_VIEW_GREEN_LABEL_CLASS\n    }), this._renderEditorWithLabel({\n      editorType: NumberBox,\n      value: this._currentColor.b,\n      onValueChanged: this._updateColor.bind(this, false),\n      labelText: \"B\",\n      labelAriaText: messageLocalization.format(\"dxColorView-ariaBlue\"),\n      labelClass: COLOR_VIEW_BLUE_LABEL_CLASS\n    })];\n\n    this._$controlsContainer.append(this._rgbInputsWithLabels);\n\n    this._rgbInputs = [this._rgbInputsWithLabels[0].find(\".dx-numberbox\").dxNumberBox(\"instance\"), this._rgbInputsWithLabels[1].find(\".dx-numberbox\").dxNumberBox(\"instance\"), this._rgbInputsWithLabels[2].find(\".dx-numberbox\").dxNumberBox(\"instance\")];\n  },\n  _renderEditorWithLabel: function _renderEditorWithLabel(options) {\n    var _this3 = this;\n\n    var $editor = $(\"<div>\");\n    var $label = $(\"<label>\").addClass(options.labelClass).text(options.labelText + \":\").append($editor);\n    eventsEngine.off($label, clickEventName);\n    eventsEngine.on($label, clickEventName, function (e) {\n      e.preventDefault();\n    });\n    var editorType = options.editorType;\n    var editorOptions = extend({\n      value: options.value,\n      onValueChanged: options.onValueChanged,\n      onKeyboardHandled: function onKeyboardHandled(opts) {\n        return _this3._keyboardHandler(opts);\n      }\n    }, {\n      stylingMode: this.option(\"stylingMode\")\n    });\n\n    if (editorType === NumberBox) {\n      editorOptions.min = options.min || 0;\n      editorOptions.max = options.max || 255;\n      editorOptions.step = options.step || 1;\n    }\n\n    var editor = new editorType($editor, editorOptions);\n    editor.registerKeyHandler(\"enter\", function (e) {\n      this._fireEnterKeyPressed(e);\n    }.bind(this));\n    this.setAria(\"label\", options.labelAriaText, $editor);\n    return $label;\n  },\n  hexInputOptions: function hexInputOptions() {\n    return {\n      editorType: TextBox,\n      value: this._currentColor.toHex().replace(\"#\", \"\"),\n      onValueChanged: this._updateColor.bind(this, true),\n      labelClass: COLOR_VIEW_HEX_LABEL_CLASS,\n      labelText: \"#\",\n      labelAriaText: messageLocalization.format(\"dxColorView-ariaHex\")\n    };\n  },\n  _renderHexInput: function _renderHexInput() {\n    this._hexInput = TextBox.getInstance(this._renderEditorWithLabel(this.hexInputOptions()).appendTo(this._$controlsContainer).find(\".dx-textbox\"));\n  },\n  _renderAlphaChannelScale: function _renderAlphaChannelScale() {\n    var $alphaChannelScaleCell = this._renderHtmlCellInsideRow(1, this._$colorPickerContainer, COLOR_VIEW_ALPHA_CHANNEL_CELL_CLASS);\n\n    var $alphaChannelBorder = $(\"<div>\").addClass(COLOR_VIEW_ALPHA_CHANNEL_BORDER_CLASS).appendTo($alphaChannelScaleCell);\n    var $alphaChannelScaleWrapper = $(\"<div>\").addClass(COLOR_VIEW_ALPHA_CHANNEL_SCALE_WRAPPER_CLASS).appendTo($alphaChannelBorder);\n    this._$alphaChannelScale = $(\"<div>\").addClass(COLOR_VIEW_ALPHA_CHANNEL_SCALE_CLASS).appendTo($alphaChannelScaleWrapper);\n\n    this._makeCSSLinearGradient(this._$alphaChannelScale);\n\n    this._renderAlphaChannelHandle($alphaChannelScaleCell);\n  },\n  _makeCSSLinearGradient: function _makeCSSLinearGradient($el) {\n    var color = this._currentColor;\n    var colorAsRgb = [color.r, color.g, color.b].join(\",\");\n    var colorAsHex = color.toHex().replace(\"#\", \"\");\n    $el.attr(\"style\", function (colorAsRgb, colorAsHex) {\n      var rtlEnabled = this.option(\"rtlEnabled\");\n      var startColor = \"rgba(\" + colorAsRgb + \", \" + (rtlEnabled ? \"1\" : \"0\") + \")\";\n      var finishColor = \"rgba(\" + colorAsRgb + \", \" + (rtlEnabled ? \"0\" : \"1\") + \")\";\n      return [\"background-image: -webkit-linear-gradient(180deg, \" + startColor + \", \" + finishColor + \")\", \"background-image: -moz-linear-gradient(-90deg, \" + startColor + \", \" + finishColor + \")\", \"background-image: -o-linear-gradient(-90deg, \" + startColor + \", \" + finishColor + \")\", \"background-image: linear-gradient(-90deg, \" + startColor + \", \" + finishColor + \")\"].join(\";\");\n    }.call(this, colorAsRgb, colorAsHex));\n  },\n  _renderAlphaChannelInput: function _renderAlphaChannelInput() {\n    var that = this;\n\n    var $alphaChannelInputCell = this._renderHtmlCellInsideRow(1, this._$colorPickerContainer);\n\n    that._alphaChannelInput = this._renderEditorWithLabel({\n      editorType: NumberBox,\n      value: this._currentColor.a,\n      max: 1,\n      step: .1,\n      onValueChanged: function onValueChanged(args) {\n        var value = args.value;\n        value = that._currentColor.isValidAlpha(value) ? value : that._currentColor.a;\n        args.event && that._saveValueChangeEvent(args.event);\n\n        that._updateColorTransparency(value);\n\n        that._placeAlphaChannelHandle();\n      },\n      labelClass: COLOR_VIEW_ALPHA_CHANNEL_LABEL_CLASS,\n      labelText: \"Alpha\",\n      labelAriaText: messageLocalization.format(\"dxColorView-ariaAlpha\")\n    }).appendTo($alphaChannelInputCell).find(\".dx-numberbox\").dxNumberBox(\"instance\");\n  },\n  _updateColorTransparency: function _updateColorTransparency(transparency) {\n    this._currentColor.a = transparency;\n    this.applyColor();\n  },\n  _renderAlphaChannelHandle: function _renderAlphaChannelHandle($parent) {\n    var _this4 = this;\n\n    this._$alphaChannelHandle = $(\"<div>\").addClass(COLOR_VIEW_ALPHA_CHANNEL_HANDLE_CLASS).appendTo($parent);\n\n    this._createComponent(this._$alphaChannelHandle, Draggable, {\n      contentTemplate: null,\n      boundary: $parent,\n      allowMoveByClick: true,\n      dragDirection: \"horizontal\",\n      onDragMove: function onDragMove(_ref3) {\n        var event = _ref3.event;\n        _this4._updateByDrag = true;\n        var $alphaChannelHandle = _this4._$alphaChannelHandle;\n        var alphaChannelHandlePosition = locate($alphaChannelHandle).left + _this4._alphaChannelHandleWidth / 2;\n\n        _this4._saveValueChangeEvent(event);\n\n        _this4._calculateColorTransparencyByScaleWidth(alphaChannelHandlePosition);\n      }\n    });\n\n    this._alphaChannelHandleWidth = getWidth(this._$alphaChannelHandle);\n    this._alphaChannelScaleWorkWidth = getWidth($parent) - this._alphaChannelHandleWidth;\n\n    this._placeAlphaChannelHandle();\n  },\n  _calculateColorTransparencyByScaleWidth: function _calculateColorTransparencyByScaleWidth(handlePosition) {\n    var transparency = (handlePosition - this._alphaChannelHandleWidth / 2) / this._alphaChannelScaleWorkWidth;\n    var rtlEnabled = this.option(\"rtlEnabled\");\n    transparency = rtlEnabled ? transparency : 1 - transparency;\n\n    if (handlePosition >= this._alphaChannelScaleWorkWidth + this._alphaChannelHandleWidth / 2) {\n      transparency = rtlEnabled ? 1 : 0;\n    } else if (transparency < 1) {\n      transparency = transparency.toFixed(2);\n    }\n\n    transparency = Math.max(transparency, 0);\n    transparency = Math.min(transparency, 1);\n\n    this._alphaChannelInput.option(\"value\", transparency);\n  },\n  _placeAlphaChannelHandle: function _placeAlphaChannelHandle() {\n    var left = this._alphaChannelScaleWorkWidth * (1 - this._currentColor.a);\n\n    if (left < 0) {\n      left = 0;\n    }\n\n    if (this._alphaChannelScaleWorkWidth < left) {\n      left = this._alphaChannelScaleWorkWidth;\n    }\n\n    move(this._$alphaChannelHandle, {\n      left: this.option(\"rtlEnabled\") ? this._alphaChannelScaleWorkWidth - left : left\n    });\n  },\n  applyColor: function applyColor() {\n    var colorValue = this.option(\"editAlphaChannel\") ? this._makeRgba(this._currentColor) : this._currentColor.toHex();\n\n    this._makeTransparentBackground(this._$currentColor, this._currentColor);\n\n    this.option(\"value\", colorValue);\n  },\n  cancelColor: function cancelColor() {\n    this._initColorAndOpacity();\n\n    this._refreshMarkup();\n  },\n  _updateColor: function _updateColor(isHex, args) {\n    var rgba;\n    var newColor;\n\n    if (isHex) {\n      newColor = this._validateHex(\"#\" + this._hexInput.option(\"value\"));\n    } else {\n      rgba = this._validateRgb();\n\n      if (this._alphaChannelInput) {\n        rgba.push(this._alphaChannelInput.option(\"value\"));\n        newColor = \"rgba(\" + rgba.join(\", \") + \")\";\n      } else {\n        newColor = \"rgb(\" + rgba.join(\", \") + \")\";\n      }\n    }\n\n    if (!this._suppressEditorsValueUpdating) {\n      this._currentColor = new Color(newColor);\n\n      this._saveValueChangeEvent(args.event);\n\n      this.applyColor();\n\n      this._refreshMarkup();\n    }\n  },\n  _validateHex: function _validateHex(hex) {\n    return this._currentColor.isValidHex(hex) ? hex : this._currentColor.toHex();\n  },\n  _validateRgb: function _validateRgb() {\n    var r = this._rgbInputs[0].option(\"value\");\n\n    var g = this._rgbInputs[1].option(\"value\");\n\n    var b = this._rgbInputs[2].option(\"value\");\n\n    if (!this._currentColor.isValidRGB(r, g, b)) {\n      r = this._currentColor.r;\n      g = this._currentColor.g;\n      b = this._currentColor.b;\n    }\n\n    return [r, g, b];\n  },\n  _refreshMarkup: function _refreshMarkup() {\n    this._placeHueScaleHandle();\n\n    this._placePaletteHandle();\n\n    this._updateColorParamsAndColorPreview();\n\n    this._$palette.css(\"backgroundColor\", this._currentColor.getPureColor().toHex());\n\n    if (this._$alphaChannelHandle) {\n      this._updateColorTransparency(this._currentColor.a);\n\n      this._placeAlphaChannelHandle();\n    }\n  },\n  _updateColorParamsAndColorPreview: function _updateColorParamsAndColorPreview() {\n    this._suppressEditorsValueUpdating = true;\n\n    this._hexInput.option(\"value\", this._currentColor.toHex().replace(\"#\", \"\"));\n\n    this._rgbInputs[0].option(\"value\", this._currentColor.r);\n\n    this._rgbInputs[1].option(\"value\", this._currentColor.g);\n\n    this._rgbInputs[2].option(\"value\", this._currentColor.b);\n\n    this._suppressEditorsValueUpdating = false;\n\n    if (this.option(\"editAlphaChannel\")) {\n      this._makeCSSLinearGradient.call(this, this._$alphaChannelScale);\n\n      this._alphaChannelInput.option(\"value\", this._currentColor.a);\n    }\n  },\n  _optionChanged: function _optionChanged(args) {\n    var value = args.value;\n\n    switch (args.name) {\n      case \"value\":\n        this._setCurrentColor(value);\n\n        if (!this._updateByDrag) {\n          this._refreshMarkup();\n        }\n\n        this._updateByDrag = false;\n        this.callBase(args);\n        break;\n\n      case \"matchValue\":\n        this._setBaseColor(value);\n\n        break;\n\n      case \"onEnterKeyPressed\":\n        this._initEnterKeyPressedAction();\n\n        break;\n\n      case \"editAlphaChannel\":\n        if (this._$colorPickerContainer) {\n          this._renderHtmlRows(\"editAlphaChannel\");\n\n          this._renderAlphaChannelElements();\n        }\n\n        break;\n\n      case \"keyStep\":\n        break;\n\n      case \"stylingMode\":\n        this._renderControls();\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  }\n});\nregisterComponent(\"dxColorView\", ColorView);\nexport default ColorView;","map":null,"metadata":{},"sourceType":"module"}