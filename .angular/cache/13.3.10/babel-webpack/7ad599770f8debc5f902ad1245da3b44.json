{"ast":null,"code":"/**\r\n * DevExtreme (esm/exporter/excel/excel.font_helper.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { isDefined } from \"../../core/utils/type\";\nimport tagHelper from \"./excel.tag_helper\";\nimport colorHelper from \"./excel.color_helper\";\nvar fontHelper = {\n  tryCreateTag: function tryCreateTag(sourceObj) {\n    var result = null;\n\n    if (isDefined(sourceObj)) {\n      result = {\n        size: sourceObj.size,\n        name: sourceObj.name,\n        family: sourceObj.family,\n        scheme: sourceObj.scheme,\n        bold: sourceObj.bold,\n        italic: sourceObj.italic,\n        underline: sourceObj.underline,\n        color: colorHelper.tryCreateTag(sourceObj.color)\n      };\n\n      if (fontHelper.isEmpty(result)) {\n        result = null;\n      }\n    }\n\n    return result;\n  },\n  copy: function copy(source) {\n    var result = null;\n\n    if (isDefined(source)) {\n      result = {};\n\n      if (void 0 !== source.size) {\n        result.size = source.size;\n      }\n\n      if (void 0 !== source.name) {\n        result.name = source.name;\n      }\n\n      if (void 0 !== source.family) {\n        result.family = source.family;\n      }\n\n      if (void 0 !== source.scheme) {\n        result.scheme = source.scheme;\n      }\n\n      if (void 0 !== source.bold) {\n        result.bold = source.bold;\n      }\n\n      if (void 0 !== source.italic) {\n        result.italic = source.italic;\n      }\n\n      if (void 0 !== source.underline) {\n        result.underline = source.underline;\n      }\n\n      if (void 0 !== source.color) {\n        result.color = colorHelper.copy(source.color);\n      }\n    }\n\n    return result;\n  },\n  areEqual: function areEqual(leftTag, rightTag) {\n    return fontHelper.isEmpty(leftTag) && fontHelper.isEmpty(rightTag) || isDefined(leftTag) && isDefined(rightTag) && leftTag.size === rightTag.size && leftTag.name === rightTag.name && leftTag.family === rightTag.family && leftTag.scheme === rightTag.scheme && (leftTag.bold === rightTag.bold || !leftTag.bold === !rightTag.bold) && (leftTag.italic === rightTag.italic || !leftTag.italic === !rightTag.italic) && leftTag.underline === rightTag.underline && colorHelper.areEqual(leftTag.color, rightTag.color);\n  },\n  isEmpty: function isEmpty(tag) {\n    return !isDefined(tag) || !isDefined(tag.size) && !isDefined(tag.name) && !isDefined(tag.family) && !isDefined(tag.scheme) && (!isDefined(tag.bold) || !tag.bold) && (!isDefined(tag.italic) || !tag.italic) && !isDefined(tag.underline) && colorHelper.isEmpty(tag.color);\n  },\n  toXml: function toXml(tag) {\n    var content = [isDefined(tag.bold) && tag.bold ? tagHelper.toXml(\"b\", {}) : \"\", isDefined(tag.size) ? tagHelper.toXml(\"sz\", {\n      val: tag.size\n    }) : \"\", isDefined(tag.color) ? colorHelper.toXml(\"color\", tag.color) : \"\", isDefined(tag.name) ? tagHelper.toXml(\"name\", {\n      val: tag.name\n    }) : \"\", isDefined(tag.family) ? tagHelper.toXml(\"family\", {\n      val: tag.family\n    }) : \"\", isDefined(tag.scheme) ? tagHelper.toXml(\"scheme\", {\n      val: tag.scheme\n    }) : \"\", isDefined(tag.italic) && tag.italic ? tagHelper.toXml(\"i\", {}) : \"\", isDefined(tag.underline) ? tagHelper.toXml(\"u\", {\n      val: tag.underline\n    }) : \"\"].join(\"\");\n    return tagHelper.toXml(\"font\", {}, content);\n  }\n};\nexport default fontHelper;","map":null,"metadata":{},"sourceType":"module"}