{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/appointments/dataProvider/appointmentDataSource.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { Deferred } from \"../../../../core/utils/deferred\";\nexport var AppointmentDataSource = /*#__PURE__*/function () {\n  function AppointmentDataSource(dataSource) {\n    _classCallCheck(this, AppointmentDataSource);\n\n    this.setDataSource(dataSource);\n    this._updatedAppointmentKeys = [];\n  }\n\n  _createClass(AppointmentDataSource, [{\n    key: \"keyName\",\n    get: function get() {\n      var store = this._dataSource.store();\n\n      return store.key();\n    }\n  }, {\n    key: \"_getStoreKey\",\n    value: function _getStoreKey(target) {\n      var store = this._dataSource.store();\n\n      return store.keyOf(target);\n    }\n  }, {\n    key: \"setDataSource\",\n    value: function setDataSource(dataSource) {\n      this._dataSource = dataSource;\n      this.cleanState();\n\n      this._initStoreChangeHandlers();\n    }\n  }, {\n    key: \"_initStoreChangeHandlers\",\n    value: function _initStoreChangeHandlers() {\n      var _this = this;\n\n      var dataSource = this._dataSource;\n      var store = null === dataSource || void 0 === dataSource ? void 0 : dataSource.store();\n\n      if (store) {\n        store.on(\"updating\", function (newItem) {\n          _this._updatedAppointment = newItem;\n        });\n        store.on(\"push\", function (pushItems) {\n          var items = dataSource.items();\n          var keyName = store.key();\n          pushItems.forEach(function (pushItem) {\n            var itemExists = 0 !== items.filter(function (item) {\n              return item[keyName] === pushItem.key;\n            }).length;\n\n            if (itemExists) {\n              _this._updatedAppointmentKeys.push({\n                key: keyName,\n                value: pushItem.key\n              });\n            } else {\n              var data = pushItem.data;\n              data && items.push(data);\n            }\n          });\n          dataSource.load();\n        });\n      }\n    }\n  }, {\n    key: \"getUpdatedAppointment\",\n    value: function getUpdatedAppointment() {\n      return this._updatedAppointment;\n    }\n  }, {\n    key: \"getUpdatedAppointmentKeys\",\n    value: function getUpdatedAppointmentKeys() {\n      return this._updatedAppointmentKeys;\n    }\n  }, {\n    key: \"cleanState\",\n    value: function cleanState() {\n      this._updatedAppointment = null;\n      this._updatedAppointmentKeys = [];\n    }\n  }, {\n    key: \"add\",\n    value: function add(rawAppointment) {\n      var _this2 = this;\n\n      return this._dataSource.store().insert(rawAppointment).done(function () {\n        return _this2._dataSource.load();\n      });\n    }\n  }, {\n    key: \"update\",\n    value: function update(target, data) {\n      var _this3 = this;\n\n      var key = this._getStoreKey(target);\n\n      var d = new Deferred();\n\n      this._dataSource.store().update(key, data).done(function (result) {\n        return _this3._dataSource.load().done(function () {\n          return d.resolve(result);\n        }).fail(d.reject);\n      }).fail(d.reject);\n\n      return d.promise();\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(rawAppointment) {\n      var _this4 = this;\n\n      var key = this._getStoreKey(rawAppointment);\n\n      return this._dataSource.store().remove(key).done(function () {\n        return _this4._dataSource.load();\n      });\n    }\n  }]);\n\n  return AppointmentDataSource;\n}();","map":null,"metadata":{},"sourceType":"module"}