{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/date_box/ui.date_box.strategy.calendar_with_time.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getWidth } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport { getWindow } from \"../../core/utils/window\";\nvar window = getWindow();\nimport CalendarStrategy from \"./ui.date_box.strategy.calendar\";\nimport TimeView from \"./ui.time_view\";\nimport dateLocalization from \"../../localization/date\";\nimport { extend } from \"../../core/utils/extend\";\nimport dateUtils from \"../../core/utils/date\";\nimport Box from \"../box\";\nimport uiDateUtils from \"./ui.date_utils\";\nvar SHRINK_VIEW_SCREEN_WIDTH = 573;\nvar DATEBOX_ADAPTIVITY_MODE_CLASS = \"dx-datebox-adaptivity-mode\";\nvar DATEBOX_TIMEVIEW_SIDE_CLASS = \"dx-datebox-datetime-time-side\";\nvar CalendarWithTimeStrategy = CalendarStrategy.inherit({\n  NAME: \"CalendarWithTime\",\n  getDefaultOptions: function getDefaultOptions() {\n    return extend(this.callBase(), {\n      applyValueMode: \"useButtons\",\n      buttonsLocation: \"bottom after\",\n      \"dropDownOptions.showTitle\": false\n    });\n  },\n  _closeDropDownByEnter: function _closeDropDownByEnter() {\n    return dateUtils.sameDate(this._getContouredValue(), this.widgetOption(\"value\"));\n  },\n  getDisplayFormat: function getDisplayFormat(displayFormat) {\n    return displayFormat || \"shortdateshorttime\";\n  },\n  _is24HourFormat: function _is24HourFormat() {\n    return dateLocalization.is24HourFormat(this.getDisplayFormat(this.dateBox.option(\"displayFormat\")));\n  },\n  _getContouredValue: function _getContouredValue() {\n    var viewDate = this.callBase();\n    return this._updateDateTime(viewDate);\n  },\n  _renderWidget: function _renderWidget() {\n    this.callBase();\n    this._timeView = this.dateBox._createComponent($(\"<div>\"), TimeView, {\n      value: this.dateBoxValue(),\n      _showClock: !this._isShrinkView(),\n      use24HourFormat: this._is24HourFormat(),\n      onValueChanged: this._valueChangedHandler.bind(this),\n      stylingMode: this.dateBox.option(\"stylingMode\")\n    });\n\n    this._timeView.registerKeyHandler(\"escape\", this._escapeHandler.bind(this));\n  },\n  renderOpenedState: function renderOpenedState() {\n    this.callBase();\n\n    var popup = this._getPopup();\n\n    if (popup) {\n      popup.$wrapper().toggleClass(DATEBOX_ADAPTIVITY_MODE_CLASS, this._isSmallScreen());\n    }\n\n    clearTimeout(this._repaintTimer);\n    this._repaintTimer = setTimeout(function () {\n      this._getPopup() && this._getPopup().repaint();\n    }.bind(this), 0);\n  },\n  isAdaptivityChanged: function isAdaptivityChanged() {\n    var isAdaptiveMode = this._isShrinkView();\n\n    var currentAdaptiveMode = this._currentAdaptiveMode;\n\n    if (isAdaptiveMode !== currentAdaptiveMode) {\n      this._currentAdaptiveMode = isAdaptiveMode;\n      return void 0 !== currentAdaptiveMode;\n    }\n\n    return this.callBase();\n  },\n  _updateValue: function _updateValue(preventDefaultValue) {\n    var date = this.dateBoxValue();\n\n    if (!date && !preventDefaultValue) {\n      date = new Date();\n      uiDateUtils.normalizeTime(date);\n    }\n\n    this.callBase();\n\n    if (this._timeView) {\n      date && this._timeView.option(\"value\", date);\n\n      this._timeView.option(\"use24HourFormat\", this._is24HourFormat());\n    }\n  },\n  _isSmallScreen: function _isSmallScreen() {\n    return getWidth(window) <= SHRINK_VIEW_SCREEN_WIDTH;\n  },\n  _isShrinkView: function _isShrinkView() {\n    return !this.dateBox.option(\"showAnalogClock\") || this.dateBox.option(\"adaptivityEnabled\") && this._isSmallScreen();\n  },\n  _getBoxItems: function _getBoxItems() {\n    var items = [{\n      ratio: 0,\n      shrink: 0,\n      baseSize: \"auto\",\n      name: \"calendar\"\n    }];\n\n    if (!this._isShrinkView()) {\n      items.push({\n        ratio: 0,\n        shrink: 0,\n        baseSize: \"auto\",\n        name: \"time\"\n      });\n    }\n\n    return items;\n  },\n  renderPopupContent: function renderPopupContent() {\n    this.callBase();\n    this._currentAdaptiveMode = this._isShrinkView();\n\n    var $popupContent = this._getPopup().$content();\n\n    this._box = this.dateBox._createComponent($(\"<div>\").appendTo($popupContent), Box, {\n      direction: \"row\",\n      crossAlign: \"stretch\",\n      items: this._getBoxItems(),\n      itemTemplate: function (data, i, element) {\n        var $container = $(\"<div>\");\n\n        switch (data.name) {\n          case \"calendar\":\n            $container.append(this._widget.$element());\n\n            if (this._isShrinkView()) {\n              this._timeView.$element().addClass(DATEBOX_TIMEVIEW_SIDE_CLASS);\n\n              $container.append(this._timeView.$element());\n            }\n\n            break;\n\n          case \"time\":\n            $container.append(this._timeView.$element());\n            $(element).addClass(DATEBOX_TIMEVIEW_SIDE_CLASS);\n        }\n\n        return $container;\n      }.bind(this)\n    });\n\n    this._attachTabHandler();\n  },\n  popupConfig: function popupConfig(_popupConfig) {\n    var calendarPopupConfig = this.callBase(_popupConfig);\n    var result = extend(calendarPopupConfig, {\n      width: \"auto\",\n      onShowing: function () {\n        if (\"fallback\" === this._box.option(\"_layoutStrategy\")) {\n          var clockMinWidth = this._getPopup().$content().find(\".dx-timeview-clock\").css(\"minWidth\");\n\n          this._timeView.$element().css(\"maxWidth\", clockMinWidth);\n        }\n      }.bind(this)\n    });\n    return result;\n  },\n  getFirstPopupElement: function getFirstPopupElement() {\n    return this._timeView._hourBox.$element().find(\"input\");\n  },\n  _attachTabHandler: function _attachTabHandler() {\n    var dateBox = this.dateBox;\n\n    this._timeView._hourBox.registerKeyHandler(\"tab\", function (e) {\n      if (e.shiftKey) {\n        e.preventDefault();\n        dateBox.focus();\n      }\n    });\n  },\n  _preventFocusOnPopup: function _preventFocusOnPopup(e) {\n    if (!$(e.target).hasClass(\"dx-texteditor-input\")) {\n      this.callBase.apply(this, arguments);\n\n      if (!this.dateBox._hasFocusClass()) {\n        this.dateBox.focus();\n      }\n    }\n  },\n  _updateDateTime: function _updateDateTime(date) {\n    var time = this._timeView.option(\"value\");\n\n    date.setHours(time.getHours(), time.getMinutes(), time.getSeconds(), time.getMilliseconds());\n    return date;\n  },\n  getValue: function getValue() {\n    var _this$_widget$option;\n\n    var date = null !== (_this$_widget$option = this._widget.option(\"value\")) && void 0 !== _this$_widget$option ? _this$_widget$option : this._widget.getContouredDate();\n    date = date ? new Date(date) : new Date();\n    return this._updateDateTime(date);\n  },\n  dispose: function dispose() {\n    clearTimeout(this._removeMinWidthTimer);\n    clearTimeout(this._repaintTimer);\n    this.callBase();\n  }\n});\nexport default CalendarWithTimeStrategy;","map":null,"metadata":{},"sourceType":"module"}