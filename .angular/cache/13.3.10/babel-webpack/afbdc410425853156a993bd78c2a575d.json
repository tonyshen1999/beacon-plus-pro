{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/**\r\n * DevExtreme (esm/core/action.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"./renderer\";\nimport { getWindow } from \"./utils/window\";\nimport { isPlainObject, isFunction } from \"./utils/type\";\nimport { each } from \"./utils/iterator\";\n\nvar Action = /*#__PURE__*/function () {\n  function Action(action, config) {\n    _classCallCheck(this, Action);\n\n    config = config || {};\n    this._action = action;\n    this._context = config.context || getWindow();\n    this._beforeExecute = config.beforeExecute;\n    this._afterExecute = config.afterExecute;\n    this._component = config.component;\n    this._validatingTargetName = config.validatingTargetName;\n    var excludeValidators = this._excludeValidators = {};\n\n    if (config.excludeValidators) {\n      for (var i = 0; i < config.excludeValidators.length; i++) {\n        excludeValidators[config.excludeValidators[i]] = true;\n      }\n    }\n  }\n\n  _createClass(Action, [{\n    key: \"execute\",\n    value: function execute() {\n      var e = {\n        action: this._action,\n        args: Array.prototype.slice.call(arguments),\n        context: this._context,\n        component: this._component,\n        validatingTargetName: this._validatingTargetName,\n        cancel: false,\n        handled: false\n      };\n      var beforeExecute = this._beforeExecute;\n      var afterExecute = this._afterExecute;\n      var argsBag = e.args[0] || {};\n\n      if (!this._validateAction(e)) {\n        return;\n      }\n\n      null === beforeExecute || void 0 === beforeExecute ? void 0 : beforeExecute.call(this._context, e);\n\n      if (e.cancel) {\n        return;\n      }\n\n      var result = this._executeAction(e);\n\n      if (argsBag.cancel) {\n        return;\n      }\n\n      null === afterExecute || void 0 === afterExecute ? void 0 : afterExecute.call(this._context, e);\n      return result;\n    }\n  }, {\n    key: \"_validateAction\",\n    value: function _validateAction(e) {\n      var excludeValidators = this._excludeValidators;\n      var executors = Action.executors;\n\n      for (var name in executors) {\n        if (!excludeValidators[name]) {\n          var _executor$validate;\n\n          var executor = executors[name];\n          null === (_executor$validate = executor.validate) || void 0 === _executor$validate ? void 0 : _executor$validate.call(executor, e);\n\n          if (e.cancel) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"_executeAction\",\n    value: function _executeAction(e) {\n      var result;\n      var executors = Action.executors;\n\n      for (var name in executors) {\n        var _executor$execute;\n\n        var executor = executors[name];\n        null === (_executor$execute = executor.execute) || void 0 === _executor$execute ? void 0 : _executor$execute.call(executor, e);\n\n        if (e.handled) {\n          result = e.result;\n          break;\n        }\n      }\n\n      return result;\n    }\n  }], [{\n    key: \"registerExecutor\",\n    value: function registerExecutor(name, executor) {\n      if (isPlainObject(name)) {\n        each(name, Action.registerExecutor);\n        return;\n      }\n\n      Action.executors[name] = executor;\n    }\n  }, {\n    key: \"unregisterExecutor\",\n    value: function unregisterExecutor() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      each(args, function () {\n        delete Action.executors[this];\n      });\n    }\n  }]);\n\n  return Action;\n}();\n\nexport { Action as default };\nAction.executors = {};\n\nvar createValidatorByTargetElement = function createValidatorByTargetElement(condition) {\n  return function (e) {\n    if (!e.args.length) {\n      return;\n    }\n\n    var args = e.args[0];\n    var element = args[e.validatingTargetName] || args.element;\n\n    if (element && condition($(element))) {\n      e.cancel = true;\n    }\n  };\n};\n\nAction.registerExecutor({\n  disabled: {\n    validate: createValidatorByTargetElement(function ($target) {\n      return $target.is(\".dx-state-disabled, .dx-state-disabled *\");\n    })\n  },\n  readOnly: {\n    validate: createValidatorByTargetElement(function ($target) {\n      return $target.is(\".dx-state-readonly, .dx-state-readonly *:not(.dx-state-independent)\");\n    })\n  },\n  undefined: {\n    execute: function execute(e) {\n      if (!e.action) {\n        e.result = void 0;\n        e.handled = true;\n      }\n    }\n  },\n  func: {\n    execute: function execute(e) {\n      if (isFunction(e.action)) {\n        e.result = e.action.call(e.context, e.args[0]);\n        e.handled = true;\n      }\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"module"}