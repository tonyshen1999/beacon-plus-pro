{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/tree_map/colorizing.gradient.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { addColorizer, createColorCodeGetter as _createColorCodeGetter } from \"./colorizing\";\nvar _min = Math.min;\nvar _max = Math.max;\n\nfunction createSimpleColorizer(getColor, range) {\n  return function (node) {\n    return getColor(node, range);\n  };\n}\n\nfunction getRangeData(range) {\n  return [Number(range[0]) || 0, range[1] - range[0] || 1];\n}\n\nfunction calculateRange(nodes, getValue) {\n  var i;\n  var ii = nodes.length;\n  var codes = [];\n  var code;\n\n  for (i = 0; i < ii; ++i) {\n    code = getValue(nodes[i]);\n\n    if (isFinite(code)) {\n      codes.push(code);\n    }\n  }\n\n  return getRangeData([_min.apply(null, codes), _max.apply(null, codes)]);\n}\n\nfunction createGuessingColorizer(getColor, getValue) {\n  var ranges = {};\n  return function (node) {\n    var parent = node.parent;\n    return getColor(node, ranges[parent._id] || (ranges[parent._id] = calculateRange(parent.nodes, getValue)));\n  };\n}\n\nfunction gradientColorizer(options, themeManager) {\n  var palette = themeManager.createGradientPalette(options.palette);\n\n  var getValue = _createColorCodeGetter(options);\n\n  return \"range\" in options ? createSimpleColorizer(getColor, getRangeData(options.range || [])) : createGuessingColorizer(getColor, getValue);\n\n  function getColor(node, arg) {\n    return palette.getColor((getValue(node) - arg[0]) / arg[1]);\n  }\n}\n\naddColorizer(\"gradient\", gradientColorizer);\nexport default gradientColorizer;","map":null,"metadata":{},"sourceType":"module"}