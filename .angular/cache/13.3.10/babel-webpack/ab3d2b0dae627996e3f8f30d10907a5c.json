{"ast":null,"code":"import _toConsumableArray from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\n/**\r\n * DevExtreme (esm/ui/html_editor/utils/toolbar_helper.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../../core/renderer\";\nimport localizationMessage from \"../../../localization/message\";\nimport { getTableOperationHandler, hasEmbedContent, unfixTableWidth, getColumnElements, getAutoSizedElements, setLineElementsFormat, getLineElements, getRowElements } from \"./table_helper\";\nimport { isDefined, isBoolean } from \"../../../core/utils/type\";\nimport { each } from \"../../../core/utils/iterator\";\nimport Form from \"../../form\";\nimport ButtonGroup from \"../../button_group\";\nimport ColorBox from \"../../color_box\";\nimport ScrollView from \"../../scroll_view\";\nimport { getOuterHeight, getWidth, getOuterWidth } from \"../../../core/utils/size\";\nimport { getWindow } from \"../../../core/utils/window\";\nvar MIN_HEIGHT = 400;\nvar BORDER_STYLES = [\"none\", \"hidden\", \"dotted\", \"dashed\", \"solid\", \"double\", \"groove\", \"ridge\", \"inset\", \"outset\"];\nvar USER_ACTION = \"user\";\nvar SILENT_ACTION = \"silent\";\nvar DIALOG_COLOR_CAPTION = \"dxHtmlEditor-dialogColorCaption\";\nvar DIALOG_BACKGROUND_CAPTION = \"dxHtmlEditor-dialogBackgroundCaption\";\nvar DIALOG_LINK_CAPTION = \"dxHtmlEditor-dialogLinkCaption\";\nvar DIALOG_IMAGE_CAPTION = \"dxHtmlEditor-dialogImageCaption\";\nvar DIALOG_TABLE_CAPTION = \"dxHtmlEditor-dialogInsertTableCaption\";\nvar DIALOG_LINK_FIELD_URL = \"dxHtmlEditor-dialogLinkUrlField\";\nvar DIALOG_LINK_FIELD_TEXT = \"dxHtmlEditor-dialogLinkTextField\";\nvar DIALOG_LINK_FIELD_TARGET = \"dxHtmlEditor-dialogLinkTargetField\";\nvar DIALOG_LINK_FIELD_TARGET_CLASS = \"dx-formdialog-field-target\";\nvar DIALOG_IMAGE_FIELD_URL = \"dxHtmlEditor-dialogImageUrlField\";\nvar DIALOG_IMAGE_FIELD_ALT = \"dxHtmlEditor-dialogImageAltField\";\nvar DIALOG_IMAGE_FIELD_WIDTH = \"dxHtmlEditor-dialogImageWidthField\";\nvar DIALOG_IMAGE_FIELD_HEIGHT = \"dxHtmlEditor-dialogImageHeightField\";\nvar DIALOG_TABLE_FIELD_COLUMNS = \"dxHtmlEditor-dialogInsertTableRowsField\";\nvar DIALOG_TABLE_FIELD_ROWS = \"dxHtmlEditor-dialogInsertTableColumnsField\";\nvar ICON_MAP = {\n  insertHeaderRow: \"header\",\n  clear: \"clearformat\"\n};\n\nfunction getFormatHandlers(module) {\n  return {\n    clear: function clear(_ref) {\n      var event = _ref.event;\n      var range = module.quill.getSelection();\n\n      if (range) {\n        var _getToolbarModule;\n\n        module.saveValueChangeEvent(event);\n        module.quill.removeFormat(range);\n        null === (_getToolbarModule = getToolbarModule(module)) || void 0 === _getToolbarModule ? void 0 : _getToolbarModule.updateFormatWidgets();\n      }\n    },\n    link: prepareLinkHandler(module),\n    image: prepareImageHandler(module),\n    color: prepareColorClickHandler(module, \"color\"),\n    background: prepareColorClickHandler(module, \"background\"),\n    orderedList: prepareShortcutHandler(module, \"list\", \"ordered\"),\n    bulletList: prepareShortcutHandler(module, \"list\", \"bullet\"),\n    alignLeft: prepareShortcutHandler(module, \"align\", \"left\"),\n    alignCenter: prepareShortcutHandler(module, \"align\", \"center\"),\n    alignRight: prepareShortcutHandler(module, \"align\", \"right\"),\n    alignJustify: prepareShortcutHandler(module, \"align\", \"justify\"),\n    codeBlock: getDefaultClickHandler(module, \"code-block\"),\n    undo: function undo(_ref2) {\n      var event = _ref2.event;\n      module.saveValueChangeEvent(event);\n      module.quill.history.undo();\n    },\n    redo: function redo(_ref3) {\n      var event = _ref3.event;\n      module.saveValueChangeEvent(event);\n      module.quill.history.redo();\n    },\n    increaseIndent: function increaseIndent(_ref4) {\n      var event = _ref4.event;\n      applyFormat(module, [\"indent\", \"+1\", USER_ACTION], event);\n    },\n    decreaseIndent: function decreaseIndent(_ref5) {\n      var event = _ref5.event;\n      applyFormat(module, [\"indent\", \"-1\", USER_ACTION], event);\n    },\n    superscript: prepareShortcutHandler(module, \"script\", \"super\"),\n    subscript: prepareShortcutHandler(module, \"script\", \"sub\"),\n    insertTable: prepareInsertTableHandler(module),\n    insertHeaderRow: getTableOperationHandler(module.quill, \"insertHeaderRow\"),\n    insertRowAbove: getTableOperationHandler(module.quill, \"insertRowAbove\"),\n    insertRowBelow: getTableOperationHandler(module.quill, \"insertRowBelow\"),\n    insertColumnLeft: getTableOperationHandler(module.quill, \"insertColumnLeft\"),\n    insertColumnRight: getTableOperationHandler(module.quill, \"insertColumnRight\"),\n    deleteColumn: getTableOperationHandler(module.quill, \"deleteColumn\"),\n    deleteRow: getTableOperationHandler(module.quill, \"deleteRow\"),\n    deleteTable: getTableOperationHandler(module.quill, \"deleteTable\"),\n    cellProperties: prepareShowFormProperties(module, \"cell\"),\n    tableProperties: prepareShowFormProperties(module, \"table\")\n  };\n}\n\nfunction resetFormDialogOptions(editorInstance, _ref6) {\n  var contentTemplate = _ref6.contentTemplate,\n      title = _ref6.title,\n      minHeight = _ref6.minHeight,\n      minWidth = _ref6.minWidth,\n      maxWidth = _ref6.maxWidth;\n  editorInstance.formDialogOption({\n    contentTemplate: contentTemplate,\n    title: title,\n    minHeight: null !== minHeight && void 0 !== minHeight ? minHeight : 0,\n    minWidth: null !== minWidth && void 0 !== minWidth ? minWidth : 0,\n    maxWidth: null !== maxWidth && void 0 !== maxWidth ? maxWidth : \"none\"\n  });\n}\n\nfunction prepareShowFormProperties(module, type) {\n  return function ($element) {\n    var _$element, _module$quill$getModu;\n\n    if (!(null !== (_$element = $element) && void 0 !== _$element && _$element.length)) {\n      $element = $(getTargetTableNode(module, type));\n    }\n\n    var _ref13 = null !== (_module$quill$getModu = module.quill.getModule(\"table\").getTable()) && void 0 !== _module$quill$getModu ? _module$quill$getModu : [],\n        _ref14 = _slicedToArray(_ref13, 2),\n        tableBlot = _ref14[0],\n        rowBlot = _ref14[1];\n\n    var formats = module.quill.getFormat(module.editorInstance.getSelection(true));\n    var tablePropertiesFormConfig = getFormConfigConstructor(type)(module, {\n      $element: $element,\n      formats: formats,\n      tableBlot: tableBlot,\n      rowBlot: rowBlot\n    });\n\n    var _module$editorInstanc = module.editorInstance._formDialog._popup.option(),\n        contentTemplate = _module$editorInstanc.contentTemplate,\n        title = _module$editorInstanc.title,\n        minHeight = _module$editorInstanc.minHeight,\n        minWidth = _module$editorInstanc.minWidth,\n        maxWidth = _module$editorInstanc.maxWidth;\n\n    var savedOptions = {\n      contentTemplate: contentTemplate,\n      title: title,\n      minHeight: minHeight,\n      minWidth: minWidth,\n      maxWidth: maxWidth\n    };\n    var formInstance;\n    module.editorInstance.formDialogOption({\n      contentTemplate: function contentTemplate(container) {\n        var $content = $(\"<div>\").appendTo(container);\n        var $form = $(\"<div>\").appendTo($content);\n\n        module.editorInstance._createComponent($form, Form, tablePropertiesFormConfig.formOptions);\n\n        module.editorInstance._createComponent($content, ScrollView, {});\n\n        formInstance = $form.dxForm(\"instance\");\n        return $content;\n      },\n      title: localizationMessage.format(\"dxHtmlEditor-\".concat(type, \"Properties\")),\n      minHeight: MIN_HEIGHT,\n      minWidth: Math.min(800, .9 * getWidth(getWindow()) - 1),\n      maxWidth: .9 * getWidth(getWindow())\n    });\n    var promise = module.editorInstance.showFormDialog();\n    promise.done(function (formData, event) {\n      module.saveValueChangeEvent(event);\n      tablePropertiesFormConfig.applyHandler(formInstance);\n      resetFormDialogOptions(module.editorInstance, savedOptions);\n    });\n    promise.fail(function () {\n      module.quill.focus();\n      resetFormDialogOptions(module.editorInstance, savedOptions);\n    });\n  };\n}\n\nfunction applyFormat(module, formatArgs, event) {\n  var _module$quill;\n\n  module.editorInstance._saveValueChangeEvent(event);\n\n  (_module$quill = module.quill).format.apply(_module$quill, _toConsumableArray(formatArgs));\n}\n\nfunction getTargetTableNode(module, partName) {\n  var currentSelectionParts = module.quill.getModule(\"table\").getTable();\n  return \"table\" === partName ? currentSelectionParts[0].domNode : currentSelectionParts[2].domNode;\n}\n\nfunction prepareLinkHandler(module) {\n  return function () {\n    module.quill.focus();\n    var selection = module.quill.getSelection();\n    var selectionHasEmbedContent = hasEmbedContent(module, selection);\n    var formats = selection ? module.quill.getFormat() : {};\n    var formData = {\n      href: formats.link || \"\",\n      text: selection && !selectionHasEmbedContent ? module.quill.getText(selection) : \"\",\n      target: Object.prototype.hasOwnProperty.call(formats, \"target\") ? !!formats.target : true\n    };\n    module.editorInstance.formDialogOption(\"title\", localizationMessage.format(DIALOG_LINK_CAPTION));\n    var promise = module.editorInstance.showFormDialog({\n      formData: formData,\n      items: getLinkFormItems(module, selection)\n    });\n    promise.done(function (formData, event) {\n      if (selection && !selectionHasEmbedContent) {\n        var text = formData.text || formData.href;\n        var index = selection.index,\n            length = selection.length;\n        formData.text = void 0;\n        module.saveValueChangeEvent(event);\n        length && module.quill.deleteText(index, length, SILENT_ACTION);\n        module.quill.insertText(index, text, \"link\", formData, USER_ACTION);\n        module.quill.setSelection(index + text.length, 0, USER_ACTION);\n      } else {\n        formData.text = !selection && !formData.text ? formData.href : formData.text;\n        applyFormat(module, [\"link\", formData, USER_ACTION], event);\n      }\n    });\n    promise.fail(function () {\n      module.quill.focus();\n    });\n  };\n}\n\nfunction prepareImageHandler(module) {\n  return function () {\n    var formData = module.quill.getFormat();\n    var isUpdateDialog = Object.prototype.hasOwnProperty.call(formData, \"imageSrc\");\n    var defaultIndex = defaultPasteIndex(module);\n\n    if (isUpdateDialog) {\n      var _module$quill$getForm = module.quill.getFormat(defaultIndex - 1, 1),\n          imageSrc = _module$quill$getForm.imageSrc;\n\n      formData.src = formData.imageSrc;\n      delete formData.imageSrc;\n\n      if (!imageSrc || 0 === defaultIndex) {\n        module.quill.setSelection(defaultIndex + 1, 0, SILENT_ACTION);\n      }\n    }\n\n    var formatIndex = embedFormatIndex(module);\n    module.editorInstance.formDialogOption(\"title\", localizationMessage.format(DIALOG_IMAGE_CAPTION));\n    var promise = module.editorInstance.showFormDialog({\n      formData: formData,\n      items: imageFormItems()\n    });\n    promise.done(function (formData, event) {\n      var index = defaultIndex;\n      module.saveValueChangeEvent(event);\n\n      if (isUpdateDialog) {\n        index = formatIndex;\n        module.quill.deleteText(index, 1, SILENT_ACTION);\n      }\n\n      module.quill.insertEmbed(index, \"extendedImage\", formData, USER_ACTION);\n      module.quill.setSelection(index + 1, 0, USER_ACTION);\n    }).always(function () {\n      module.quill.focus();\n    });\n  };\n}\n\nfunction getLinkFormItems(module, selection) {\n  return [{\n    dataField: \"href\",\n    label: {\n      text: localizationMessage.format(DIALOG_LINK_FIELD_URL)\n    }\n  }, {\n    dataField: \"text\",\n    label: {\n      text: localizationMessage.format(DIALOG_LINK_FIELD_TEXT)\n    },\n    visible: !hasEmbedContent(module, selection)\n  }, {\n    dataField: \"target\",\n    editorType: \"dxCheckBox\",\n    editorOptions: {\n      text: localizationMessage.format(DIALOG_LINK_FIELD_TARGET)\n    },\n    cssClass: DIALOG_LINK_FIELD_TARGET_CLASS,\n    label: {\n      visible: false\n    }\n  }];\n}\n\nfunction embedFormatIndex(module) {\n  var selection = module.quill.getSelection();\n\n  if (selection) {\n    if (selection.length) {\n      return selection.index;\n    } else {\n      return selection.index - 1;\n    }\n  } else {\n    return module.quill.getLength();\n  }\n}\n\nfunction defaultPasteIndex(module) {\n  var _selection$index;\n\n  var selection = module.quill.getSelection();\n  return null !== (_selection$index = null === selection || void 0 === selection ? void 0 : selection.index) && void 0 !== _selection$index ? _selection$index : module.quill.getLength();\n}\n\nfunction imageFormItems() {\n  return [{\n    dataField: \"src\",\n    label: {\n      text: localizationMessage.format(DIALOG_IMAGE_FIELD_URL)\n    }\n  }, {\n    dataField: \"width\",\n    label: {\n      text: localizationMessage.format(DIALOG_IMAGE_FIELD_WIDTH)\n    }\n  }, {\n    dataField: \"height\",\n    label: {\n      text: localizationMessage.format(DIALOG_IMAGE_FIELD_HEIGHT)\n    }\n  }, {\n    dataField: \"alt\",\n    label: {\n      text: localizationMessage.format(DIALOG_IMAGE_FIELD_ALT)\n    }\n  }];\n}\n\nfunction prepareColorClickHandler(module, name) {\n  return function () {\n    var formData = module.quill.getFormat();\n    var caption = \"color\" === name ? DIALOG_COLOR_CAPTION : DIALOG_BACKGROUND_CAPTION;\n    module.editorInstance.formDialogOption(\"title\", localizationMessage.format(caption));\n    var promise = module.editorInstance.showFormDialog({\n      formData: formData,\n      items: [{\n        dataField: name,\n        editorType: \"dxColorView\",\n        editorOptions: {\n          focusStateEnabled: false\n        },\n        label: {\n          visible: false\n        }\n      }]\n    });\n    promise.done(function (formData, event) {\n      applyFormat(module, [name, formData[name], USER_ACTION], event);\n    });\n    promise.fail(function () {\n      module.quill.focus();\n    });\n  };\n}\n\nfunction prepareShortcutHandler(module, name, shortcutValue) {\n  return function (_ref7) {\n    var _getToolbarModule2;\n\n    var event = _ref7.event;\n    var formats = module.quill.getFormat();\n    var value = formats[name] === shortcutValue ? false : shortcutValue;\n    applyFormat(module, [name, value, USER_ACTION], event);\n    null === (_getToolbarModule2 = getToolbarModule(module)) || void 0 === _getToolbarModule2 ? void 0 : _getToolbarModule2.updateFormatWidgets(true);\n  };\n}\n\nfunction getToolbarModule(module) {\n  return module._updateFormatWidget ? module : module.quill.getModule(\"toolbar\");\n}\n\nfunction getDefaultClickHandler(module, name) {\n  return function (_ref8) {\n    var _getToolbarModule3;\n\n    var event = _ref8.event;\n    var formats = module.quill.getFormat();\n    var value = formats[name];\n    var newValue = !(isBoolean(value) ? value : isDefined(value));\n    applyFormat(module, [name, newValue, USER_ACTION], event);\n    null === (_getToolbarModule3 = getToolbarModule(module)) || void 0 === _getToolbarModule3 ? void 0 : _getToolbarModule3._updateFormatWidget(name, newValue, formats);\n  };\n}\n\nfunction insertTableFormItems() {\n  return [{\n    dataField: \"columns\",\n    editorType: \"dxNumberBox\",\n    editorOptions: {\n      min: 1\n    },\n    label: {\n      text: localizationMessage.format(DIALOG_TABLE_FIELD_COLUMNS)\n    }\n  }, {\n    dataField: \"rows\",\n    editorType: \"dxNumberBox\",\n    editorOptions: {\n      min: 1\n    },\n    label: {\n      text: localizationMessage.format(DIALOG_TABLE_FIELD_ROWS)\n    }\n  }];\n}\n\nfunction prepareInsertTableHandler(module) {\n  return function () {\n    var formats = module.quill.getFormat();\n\n    var isTableFocused = module._tableFormats.some(function (format) {\n      return Object.prototype.hasOwnProperty.call(formats, format);\n    });\n\n    if (isTableFocused) {\n      module.quill.focus();\n      return;\n    }\n\n    module.editorInstance.formDialogOption(\"title\", localizationMessage.format(DIALOG_TABLE_CAPTION));\n    var promise = module.editorInstance.showFormDialog({\n      formData: {\n        rows: 1,\n        columns: 1\n      },\n      items: insertTableFormItems()\n    });\n    promise.done(function (formData, event) {\n      module.quill.focus();\n      var table = module.quill.getModule(\"table\");\n\n      if (table) {\n        module.saveValueChangeEvent(event);\n        var columns = formData.columns,\n            rows = formData.rows;\n        table.insertTable(columns, rows);\n      }\n    }).always(function () {\n      module.quill.focus();\n    });\n  };\n}\n\nfunction getTablePropertiesFormConfig(module, _ref9) {\n  var $element = _ref9.$element,\n      formats = _ref9.formats,\n      tableBlot = _ref9.tableBlot;\n  var window = getWindow();\n  var alignmentEditorInstance;\n  var borderColorEditorInstance;\n  var backgroundColorEditorInstance;\n  var $table = $element;\n  var editorInstance = module.editorInstance;\n  var startTableWidth = isDefined(formats.tableWidth) ? parseInt(formats.tableWidth) : getOuterWidth($table);\n  var tableStyles = window.getComputedStyle($table.get(0));\n  var startTextAlign = \"start\" === tableStyles.textAlign ? \"left\" : tableStyles.textAlign;\n  var formOptions = {\n    colCount: 2,\n    formData: {\n      width: startTableWidth,\n      height: isDefined(formats.tableHeight) ? parseInt(formats.tableHeight) : getOuterHeight($table),\n      backgroundColor: formats.tableBackgroundColor || tableStyles.backgroundColor,\n      borderStyle: formats.tableBorderStyle || tableStyles.borderTopStyle,\n      borderColor: formats.tableBorderColor || tableStyles.borderTopColor,\n      borderWidth: parseInt(isDefined(formats.tableBorderWidth) ? formats.tableBorderWidth : tableStyles.borderTopWidth),\n      alignment: formats.tableAlign || startTextAlign\n    },\n    items: [{\n      itemType: \"group\",\n      caption: localizationMessage.format(\"dxHtmlEditor-border\"),\n      colCountByScreen: {\n        xs: 2\n      },\n      colCount: 2,\n      items: [{\n        dataField: \"borderStyle\",\n        label: {\n          text: localizationMessage.format(\"dxHtmlEditor-style\")\n        },\n        editorType: \"dxSelectBox\",\n        editorOptions: {\n          items: BORDER_STYLES,\n          placeholder: \"Select style\"\n        }\n      }, {\n        dataField: \"borderWidth\",\n        label: {\n          text: localizationMessage.format(\"dxHtmlEditor-borderWidth\")\n        },\n        editorOptions: {\n          placeholder: localizationMessage.format(\"dxHtmlEditor-pixels\")\n        }\n      }, {\n        itemType: \"simple\",\n        dataField: \"borderColor\",\n        label: {\n          text: localizationMessage.format(\"dxHtmlEditor-borderColor\")\n        },\n        colSpan: 2,\n        template: function template(e) {\n          var $content = $(\"<div>\");\n\n          editorInstance._createComponent($content, ColorBox, {\n            editAlphaChannel: true,\n            value: e.component.option(\"formData\").borderColor,\n            onInitialized: function onInitialized(e) {\n              borderColorEditorInstance = e.component;\n            }\n          });\n\n          return $content;\n        }\n      }]\n    }, {\n      itemType: \"group\",\n      caption: localizationMessage.format(\"dxHtmlEditor-dimensions\"),\n      colCountByScreen: {\n        xs: 2\n      },\n      colCount: 2,\n      items: [{\n        dataField: \"width\",\n        label: {\n          text: localizationMessage.format(\"dxHtmlEditor-width\")\n        },\n        editorOptions: {\n          min: 0,\n          placeholder: localizationMessage.format(\"dxHtmlEditor-pixels\")\n        }\n      }, {\n        dataField: \"height\",\n        label: {\n          text: localizationMessage.format(\"dxHtmlEditor-height\")\n        },\n        editorOptions: {\n          min: 0,\n          placeholder: localizationMessage.format(\"dxHtmlEditor-pixels\")\n        }\n      }]\n    }, {\n      itemType: \"group\",\n      caption: localizationMessage.format(\"dxHtmlEditor-tableBackground\"),\n      items: [{\n        itemType: \"simple\",\n        dataField: \"backgroundColor\",\n        label: {\n          text: localizationMessage.format(\"dxHtmlEditor-borderColor\")\n        },\n        template: function template(e) {\n          var $content = $(\"<div>\");\n\n          editorInstance._createComponent($content, ColorBox, {\n            editAlphaChannel: true,\n            value: e.component.option(\"formData\").backgroundColor,\n            onInitialized: function onInitialized(e) {\n              backgroundColorEditorInstance = e.component;\n            }\n          });\n\n          return $content;\n        }\n      }]\n    }, {\n      itemType: \"group\",\n      caption: localizationMessage.format(\"dxHtmlEditor-alignment\"),\n      items: [{\n        itemType: \"simple\",\n        label: {\n          text: localizationMessage.format(\"dxHtmlEditor-horizontal\")\n        },\n        template: function template() {\n          var $content = $(\"<div>\");\n\n          editorInstance._createComponent($content, ButtonGroup, {\n            items: [{\n              value: \"left\",\n              icon: \"alignleft\"\n            }, {\n              value: \"center\",\n              icon: \"aligncenter\"\n            }, {\n              value: \"right\",\n              icon: \"alignright\"\n            }, {\n              value: \"justify\",\n              icon: \"alignjustify\"\n            }],\n            keyExpr: \"value\",\n            selectedItemKeys: [startTextAlign],\n            onInitialized: function onInitialized(e) {\n              alignmentEditorInstance = e.component;\n            }\n          });\n\n          return $content;\n        }\n      }]\n    }],\n    showColonAfterLabel: true,\n    labelLocation: \"top\",\n    minColWidth: 400\n  };\n  return {\n    formOptions: formOptions,\n    applyHandler: function applyHandler(formInstance) {\n      var formData = formInstance.option(\"formData\");\n      var newWidth = formData.width === startTableWidth ? void 0 : formData.width;\n      var newHeight = formData.height;\n      applyTableDimensionChanges(module, {\n        $table: $table,\n        newHeight: newHeight,\n        newWidth: newWidth,\n        tableBlot: tableBlot\n      });\n      module.editorInstance.format(\"tableBorderStyle\", formData.borderStyle);\n      module.editorInstance.format(\"tableBorderWidth\", formData.borderWidth + \"px\");\n      module.editorInstance.format(\"tableBorderColor\", borderColorEditorInstance.option(\"value\"));\n      module.editorInstance.format(\"tableBackgroundColor\", backgroundColorEditorInstance.option(\"value\"));\n      module.editorInstance.format(\"tableTextAlign\", alignmentEditorInstance.option(\"selectedItemKeys\")[0]);\n    }\n  };\n}\n\nfunction getCellPropertiesFormConfig(module, _ref10) {\n  var $element = _ref10.$element,\n      formats = _ref10.formats,\n      tableBlot = _ref10.tableBlot,\n      rowBlot = _ref10.rowBlot;\n  var window = getWindow();\n  var alignmentEditorInstance;\n  var verticalAlignmentEditorInstance;\n  var borderColorEditorInstance;\n  var backgroundColorEditorInstance;\n  var $cell = $element;\n  var startCellWidth = isDefined(formats.cellWidth) ? parseInt(formats.cellWidth) : getOuterWidth($cell);\n  var editorInstance = module.editorInstance;\n  var cellStyles = window.getComputedStyle($cell.get(0));\n  var startTextAlign = \"start\" === cellStyles.textAlign ? \"left\" : cellStyles.textAlign;\n  var formOptions = {\n    colCount: 2,\n    formData: {\n      width: startCellWidth,\n      height: isDefined(formats.cellHeight) ? parseInt(formats.cellHeight) : getOuterHeight($cell),\n      backgroundColor: formats.cellBackgroundColor || cellStyles.backgroundColor,\n      borderStyle: formats.cellBorderStyle || cellStyles.borderTopStyle,\n      borderColor: formats.cellBorderColor || cellStyles.borderTopColor,\n      borderWidth: parseInt(isDefined(formats.cellBorderWidth) ? formats.cellBorderWidth : cellStyles.borderTopWidth),\n      alignment: formats.cellTextAlign || startTextAlign,\n      verticalAlignment: formats.cellVerticalAlign || cellStyles.verticalAlign,\n      verticalPadding: parseInt(isDefined(formats.cellPaddingTop) ? formats.cellPaddingTop : cellStyles.paddingTop),\n      horizontalPadding: parseInt(isDefined(formats.cellPaddingLeft) ? formats.cellPaddingLeft : cellStyles.paddingLeft)\n    },\n    items: [{\n      itemType: \"group\",\n      caption: localizationMessage.format(\"dxHtmlEditor-border\"),\n      colCountByScreen: {\n        xs: 2\n      },\n      colCount: 2,\n      items: [{\n        dataField: \"borderStyle\",\n        label: {\n          text: localizationMessage.format(\"dxHtmlEditor-style\")\n        },\n        editorType: \"dxSelectBox\",\n        editorOptions: {\n          items: BORDER_STYLES\n        }\n      }, {\n        dataField: \"borderWidth\",\n        label: {\n          text: localizationMessage.format(\"dxHtmlEditor-borderWidth\")\n        },\n        editorOptions: {\n          placeholder: localizationMessage.format(\"dxHtmlEditor-pixels\")\n        }\n      }, {\n        itemType: \"simple\",\n        dataField: \"borderColor\",\n        colSpan: 2,\n        label: {\n          text: localizationMessage.format(\"dxHtmlEditor-borderColor\")\n        },\n        template: function template(e) {\n          var $content = $(\"<div>\");\n\n          editorInstance._createComponent($content, ColorBox, {\n            editAlphaChannel: true,\n            value: e.component.option(\"formData\").borderColor,\n            onInitialized: function onInitialized(e) {\n              borderColorEditorInstance = e.component;\n            }\n          });\n\n          return $content;\n        }\n      }]\n    }, {\n      itemType: \"group\",\n      caption: localizationMessage.format(\"dxHtmlEditor-dimensions\"),\n      colCount: 2,\n      colCountByScreen: {\n        xs: 2\n      },\n      items: [{\n        dataField: \"width\",\n        label: {\n          text: localizationMessage.format(\"dxHtmlEditor-width\")\n        },\n        editorOptions: {\n          min: 0,\n          placeholder: localizationMessage.format(\"dxHtmlEditor-pixels\")\n        }\n      }, {\n        dataField: \"height\",\n        label: {\n          text: localizationMessage.format(\"dxHtmlEditor-height\")\n        },\n        editorOptions: {\n          min: 0,\n          placeholder: localizationMessage.format(\"dxHtmlEditor-pixels\")\n        }\n      }, {\n        dataField: \"verticalPadding\",\n        label: {\n          text: localizationMessage.format(\"dxHtmlEditor-paddingVertical\")\n        },\n        editorOptions: {\n          placeholder: localizationMessage.format(\"dxHtmlEditor-pixels\")\n        }\n      }, {\n        label: {\n          text: localizationMessage.format(\"dxHtmlEditor-paddingHorizontal\")\n        },\n        dataField: \"horizontalPadding\",\n        editorOptions: {\n          placeholder: localizationMessage.format(\"dxHtmlEditor-pixels\")\n        }\n      }]\n    }, {\n      itemType: \"group\",\n      caption: localizationMessage.format(\"dxHtmlEditor-tableBackground\"),\n      items: [{\n        itemType: \"simple\",\n        dataField: \"backgroundColor\",\n        label: {\n          text: localizationMessage.format(\"dxHtmlEditor-borderColor\")\n        },\n        template: function template(e) {\n          var $content = $(\"<div>\");\n\n          editorInstance._createComponent($content, ColorBox, {\n            editAlphaChannel: true,\n            value: e.component.option(\"formData\").backgroundColor,\n            onInitialized: function onInitialized(e) {\n              backgroundColorEditorInstance = e.component;\n            }\n          });\n\n          return $content;\n        }\n      }]\n    }, {\n      itemType: \"group\",\n      caption: localizationMessage.format(\"dxHtmlEditor-alignment\"),\n      colCount: 2,\n      items: [{\n        itemType: \"simple\",\n        label: {\n          text: localizationMessage.format(\"dxHtmlEditor-horizontal\")\n        },\n        template: function template() {\n          var $content = $(\"<div>\");\n\n          editorInstance._createComponent($content, ButtonGroup, {\n            items: [{\n              value: \"left\",\n              icon: \"alignleft\"\n            }, {\n              value: \"center\",\n              icon: \"aligncenter\"\n            }, {\n              value: \"right\",\n              icon: \"alignright\"\n            }, {\n              value: \"justify\",\n              icon: \"alignjustify\"\n            }],\n            keyExpr: \"value\",\n            selectedItemKeys: [startTextAlign],\n            onInitialized: function onInitialized(e) {\n              alignmentEditorInstance = e.component;\n            }\n          });\n\n          return $content;\n        }\n      }, {\n        itemType: \"simple\",\n        label: {\n          text: localizationMessage.format(\"dxHtmlEditor-vertical\")\n        },\n        template: function template() {\n          var $content = $(\"<div>\");\n\n          editorInstance._createComponent($content, ButtonGroup, {\n            items: [{\n              value: \"top\",\n              icon: \"verticalaligntop\"\n            }, {\n              value: \"middle\",\n              icon: \"verticalaligncenter\"\n            }, {\n              value: \"bottom\",\n              icon: \"verticalalignbottom\"\n            }],\n            keyExpr: \"value\",\n            selectedItemKeys: [cellStyles.verticalAlign],\n            onInitialized: function onInitialized(e) {\n              verticalAlignmentEditorInstance = e.component;\n            }\n          });\n\n          return $content;\n        }\n      }]\n    }],\n    showColonAfterLabel: true,\n    labelLocation: \"top\",\n    minColWidth: 400\n  };\n  return {\n    formOptions: formOptions,\n    applyHandler: function applyHandler(formInstance) {\n      var formData = formInstance.option(\"formData\");\n      var newWidth = formData.width === parseInt(startCellWidth) ? void 0 : formData.width;\n      var newHeight = formData.height;\n      applyCellDimensionChanges(module, {\n        $cell: $cell,\n        newHeight: newHeight,\n        newWidth: newWidth,\n        tableBlot: tableBlot,\n        rowBlot: rowBlot\n      });\n      module.editorInstance.format(\"cellBorderWidth\", formData.borderWidth + \"px\");\n      module.editorInstance.format(\"cellBorderColor\", borderColorEditorInstance.option(\"value\"));\n      module.editorInstance.format(\"cellBorderStyle\", formData.borderStyle);\n      module.editorInstance.format(\"cellBackgroundColor\", backgroundColorEditorInstance.option(\"value\"));\n      module.editorInstance.format(\"cellTextAlign\", alignmentEditorInstance.option(\"selectedItemKeys\")[0]);\n      module.editorInstance.format(\"cellVerticalAlign\", verticalAlignmentEditorInstance.option(\"selectedItemKeys\")[0]);\n      module.editorInstance.format(\"cellPaddingLeft\", formData.horizontalPadding + \"px\");\n      module.editorInstance.format(\"cellPaddingRight\", formData.horizontalPadding + \"px\");\n      module.editorInstance.format(\"cellPaddingTop\", formData.verticalPadding + \"px\");\n      module.editorInstance.format(\"cellPaddingBottom\", formData.verticalPadding + \"px\");\n    }\n  };\n}\n\nfunction getFormConfigConstructor(type) {\n  return \"cell\" === type ? getCellPropertiesFormConfig : getTablePropertiesFormConfig;\n}\n\nfunction applyTableDimensionChanges(module, _ref11) {\n  var $table = _ref11.$table,\n      newHeight = _ref11.newHeight,\n      newWidth = _ref11.newWidth,\n      tableBlot = _ref11.tableBlot;\n\n  if (isDefined(newWidth)) {\n    var autoWidthColumns = getAutoSizedElements($table);\n\n    if (autoWidthColumns.length > 0) {\n      module.editorInstance.format(\"tableWidth\", newWidth + \"px\");\n    } else {\n      var $columns = getColumnElements($table);\n      var oldTableWidth = getOuterWidth($table);\n      unfixTableWidth($table, {\n        tableBlot: tableBlot\n      });\n      each($columns, function (i, element) {\n        var $element = $(element);\n        var newElementWidth = newWidth / oldTableWidth * getOuterWidth($element);\n        var $lineElements = getLineElements($table, $element.index(), \"horizontal\");\n        setLineElementsFormat(module, {\n          elements: $lineElements,\n          property: \"width\",\n          value: newElementWidth\n        });\n      });\n    }\n  }\n\n  var autoHeightRows = getAutoSizedElements($table, \"vertical\");\n\n  if ((null === autoHeightRows || void 0 === autoHeightRows ? void 0 : autoHeightRows.length) > 0) {\n    tableBlot.format(\"tableHeight\", newHeight + \"px\");\n  } else {\n    var $rows = getRowElements($table);\n    var oldTableHeight = getOuterHeight($table);\n    each($rows, function (i, element) {\n      var $element = $(element);\n      var newElementHeight = newHeight / oldTableHeight * getOuterHeight($element);\n      var $lineElements = getLineElements($table, i, \"vertical\");\n      setLineElementsFormat(module, {\n        elements: $lineElements,\n        property: \"height\",\n        value: newElementHeight\n      });\n    });\n  }\n}\n\nfunction applyCellDimensionChanges(module, _ref12) {\n  var $cell = _ref12.$cell,\n      newHeight = _ref12.newHeight,\n      newWidth = _ref12.newWidth,\n      tableBlot = _ref12.tableBlot,\n      rowBlot = _ref12.rowBlot;\n  var $table = $($cell.closest(\"table\"));\n\n  if (isDefined(newWidth)) {\n    var index = $($cell).index();\n    var $verticalCells = getLineElements($table, index);\n    var widthDiff = newWidth - getOuterWidth($cell);\n    var tableWidth = getOuterWidth($table);\n\n    if (newWidth > tableWidth) {\n      unfixTableWidth($table, {\n        tableBlot: tableBlot\n      });\n    }\n\n    setLineElementsFormat(module, {\n      elements: $verticalCells,\n      property: \"width\",\n      value: newWidth\n    });\n    var $nextColumnCell = $cell.next();\n    var shouldUpdateNearestColumnWidth = 0 === getAutoSizedElements($table).length;\n\n    if (shouldUpdateNearestColumnWidth) {\n      unfixTableWidth($table, {\n        tableBlot: tableBlot\n      });\n\n      if (1 === $nextColumnCell.length) {\n        $verticalCells = getLineElements($table, index + 1);\n        var nextColumnWidth = getOuterWidth($verticalCells.eq(0)) - widthDiff;\n        setLineElementsFormat(module, {\n          elements: $verticalCells,\n          property: \"width\",\n          value: Math.max(nextColumnWidth, 0)\n        });\n      } else {\n        var $prevColumnCell = $cell.prev();\n\n        if (1 === $prevColumnCell.length) {\n          $verticalCells = getLineElements($table, index - 1);\n          var prevColumnWidth = getOuterWidth($verticalCells.eq(0)) - widthDiff;\n          setLineElementsFormat(module, {\n            elements: $verticalCells,\n            property: \"width\",\n            value: Math.max(prevColumnWidth, 0)\n          });\n        }\n      }\n    }\n  }\n\n  rowBlot.children.forEach(function (rowCell) {\n    rowCell.format(\"cellHeight\", newHeight + \"px\");\n  });\n  var autoHeightRows = getAutoSizedElements($table, \"vertical\");\n\n  if (0 === autoHeightRows.length) {\n    $table.css(\"height\", \"auto\");\n  }\n}\n\nexport { getFormatHandlers, getDefaultClickHandler, ICON_MAP, applyFormat };","map":null,"metadata":{},"sourceType":"module"}