{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/map/provider.dynamic.bing.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getWidth, getHeight } from \"../../core/utils/size\";\nimport { noop } from \"../../core/utils/common\";\nimport { getWindow } from \"../../core/utils/window\";\nvar window = getWindow();\nimport Promise from \"../../core/polyfills/promise\";\nimport { extend } from \"../../core/utils/extend\";\nimport errors from \"../widget/ui.errors\";\nimport { map, each } from \"../../core/utils/iterator\";\nimport DynamicProvider from \"./provider.dynamic\";\nimport Color from \"../../color\";\nimport ajax from \"../../core/utils/ajax\";\nimport { isDefined } from \"../../core/utils/type\";\nvar BING_MAP_READY = \"_bingScriptReady\";\nvar BING_URL_V8 = \"https://www.bing.com/api/maps/mapcontrol?callback=\" + BING_MAP_READY;\nvar INFOBOX_V_OFFSET_V8 = 13;\nvar BING_CREDENTIALS = \"AhuxC0dQ1DBTNo8L-H9ToVMQStmizZzBJdraTSgCzDSWPsA1Qd8uIvFSflzxdaLH\";\nvar MIN_LOCATION_RECT_LENGTH = 1e-16;\n\nvar msMapsLoaded = function msMapsLoaded() {\n  return window.Microsoft && window.Microsoft.Maps;\n};\n\nvar msMapsLoader;\nvar BingProvider = DynamicProvider.inherit({\n  _mapType: function _mapType(type) {\n    var mapTypes = {\n      roadmap: Microsoft.Maps.MapTypeId.road,\n      hybrid: Microsoft.Maps.MapTypeId.aerial,\n      satellite: Microsoft.Maps.MapTypeId.aerial\n    };\n    return mapTypes[type] || mapTypes.road;\n  },\n  _movementMode: function _movementMode(type) {\n    var movementTypes = {\n      driving: Microsoft.Maps.Directions.RouteMode.driving,\n      walking: Microsoft.Maps.Directions.RouteMode.walking\n    };\n    return movementTypes[type] || movementTypes.driving;\n  },\n  _resolveLocation: function _resolveLocation(location) {\n    return new Promise(function (resolve) {\n      var latLng = this._getLatLng(location);\n\n      if (latLng) {\n        resolve(new Microsoft.Maps.Location(latLng.lat, latLng.lng));\n      } else {\n        this._geocodeLocation(location).then(function (geocodedLocation) {\n          resolve(geocodedLocation);\n        });\n      }\n    }.bind(this));\n  },\n  _geocodedLocations: {},\n  _geocodeLocationImpl: function _geocodeLocationImpl(location) {\n    return new Promise(function (resolve) {\n      if (!isDefined(location)) {\n        resolve(new Microsoft.Maps.Location(0, 0));\n        return;\n      }\n\n      var searchManager = new Microsoft.Maps.Search.SearchManager(this._map);\n      var searchRequest = {\n        where: location,\n        count: 1,\n        callback: function callback(searchResponse) {\n          var result = searchResponse.results[0];\n\n          if (result) {\n            var boundsBox = searchResponse.results[0].location;\n            resolve(new Microsoft.Maps.Location(boundsBox.latitude, boundsBox.longitude));\n          } else {\n            resolve(new Microsoft.Maps.Location(0, 0));\n          }\n        }\n      };\n      searchManager.geocode(searchRequest);\n    }.bind(this));\n  },\n  _normalizeLocation: function _normalizeLocation(location) {\n    return {\n      lat: location.latitude,\n      lng: location.longitude\n    };\n  },\n  _normalizeLocationRect: function _normalizeLocationRect(locationRect) {\n    var northWest = this._normalizeLocation(locationRect.getNorthwest());\n\n    var southEast = this._normalizeLocation(locationRect.getSoutheast());\n\n    return {\n      northEast: {\n        lat: northWest.lat,\n        lng: southEast.lng\n      },\n      southWest: {\n        lat: southEast.lat,\n        lng: northWest.lng\n      }\n    };\n  },\n  _loadImpl: function _loadImpl() {\n    return new Promise(function (resolve) {\n      if (msMapsLoaded()) {\n        resolve();\n      } else {\n        if (!msMapsLoader) {\n          msMapsLoader = this._loadMapScript();\n        }\n\n        msMapsLoader.then(function () {\n          if (msMapsLoaded()) {\n            resolve();\n            return;\n          }\n\n          this._loadMapScript().then(resolve);\n        }.bind(this));\n      }\n    }.bind(this)).then(function () {\n      return Promise.all([new Promise(function (resolve) {\n        Microsoft.Maps.loadModule(\"Microsoft.Maps.Search\", {\n          callback: resolve\n        });\n      }), new Promise(function (resolve) {\n        Microsoft.Maps.loadModule(\"Microsoft.Maps.Directions\", {\n          callback: resolve\n        });\n      })]);\n    });\n  },\n  _loadMapScript: function _loadMapScript() {\n    return new Promise(function (resolve) {\n      window[BING_MAP_READY] = resolve;\n      ajax.sendRequest({\n        url: BING_URL_V8,\n        dataType: \"script\"\n      });\n    }).then(function () {\n      try {\n        delete window[BING_MAP_READY];\n      } catch (e) {\n        window[BING_MAP_READY] = void 0;\n      }\n    });\n  },\n  _init: function _init() {\n    this._createMap();\n\n    return Promise.resolve();\n  },\n  _createMap: function _createMap() {\n    var controls = this._option(\"controls\");\n\n    this._map = new Microsoft.Maps.Map(this._$container[0], {\n      credentials: this._keyOption(\"bing\") || BING_CREDENTIALS,\n      zoom: this._option(\"zoom\"),\n      showDashboard: controls,\n      showMapTypeSelector: controls,\n      showScalebar: controls\n    });\n  },\n  _attachHandlers: function _attachHandlers() {\n    this._providerViewChangeHandler = Microsoft.Maps.Events.addHandler(this._map, \"viewchange\", this._viewChangeHandler.bind(this));\n    this._providerClickHandler = Microsoft.Maps.Events.addHandler(this._map, \"click\", this._clickActionHandler.bind(this));\n  },\n  _viewChangeHandler: function _viewChangeHandler() {\n    var bounds = this._map.getBounds();\n\n    this._option(\"bounds\", this._normalizeLocationRect(bounds));\n\n    var center = this._map.getCenter();\n\n    this._option(\"center\", this._normalizeLocation(center));\n\n    if (!this._preventZoomChangeEvent) {\n      this._option(\"zoom\", this._map.getZoom());\n    }\n  },\n  _clickActionHandler: function _clickActionHandler(e) {\n    if (\"map\" === e.targetType) {\n      this._fireClickAction({\n        location: this._normalizeLocation(e.location)\n      });\n    }\n  },\n  updateDimensions: function updateDimensions() {\n    var $container = this._$container;\n\n    this._map.setOptions({\n      width: getWidth($container),\n      height: getHeight($container)\n    });\n\n    return Promise.resolve();\n  },\n  updateMapType: function updateMapType() {\n    var type = this._option(\"type\");\n\n    var labelOverlay = Microsoft.Maps.LabelOverlay;\n\n    this._map.setView({\n      animate: false,\n      mapTypeId: this._mapType(type),\n      labelOverlay: \"satellite\" === type ? labelOverlay.hidden : labelOverlay.visible\n    });\n\n    return Promise.resolve();\n  },\n  updateBounds: function updateBounds() {\n    return Promise.all([this._resolveLocation(this._option(\"bounds.northEast\")), this._resolveLocation(this._option(\"bounds.southWest\"))]).then(function (result) {\n      var bounds = new Microsoft.Maps.LocationRect.fromLocations(result[0], result[1]);\n\n      this._map.setView({\n        animate: false,\n        bounds: bounds\n      });\n    }.bind(this));\n  },\n  updateCenter: function updateCenter() {\n    return this._resolveLocation(this._option(\"center\")).then(function (center) {\n      this._map.setView({\n        animate: false,\n        center: center\n      });\n    }.bind(this));\n  },\n  updateZoom: function updateZoom() {\n    this._map.setView({\n      animate: false,\n      zoom: this._option(\"zoom\")\n    });\n\n    return Promise.resolve();\n  },\n  updateControls: function updateControls() {\n    this.clean();\n    return this.render.apply(this, arguments);\n  },\n  _renderMarker: function _renderMarker(options) {\n    return this._resolveLocation(options.location).then(function (location) {\n      var pushpinOptions = {\n        icon: options.iconSrc || this._option(\"markerIconSrc\")\n      };\n\n      if (options.html) {\n        extend(pushpinOptions, {\n          htmlContent: options.html,\n          width: null,\n          height: null\n        });\n        var htmlOffset = options.htmlOffset;\n\n        if (htmlOffset) {\n          pushpinOptions.anchor = new Microsoft.Maps.Point(-htmlOffset.left, -htmlOffset.top);\n        }\n      }\n\n      var pushpin = new Microsoft.Maps.Pushpin(location, pushpinOptions);\n\n      this._map.entities.push(pushpin);\n\n      var infobox = this._renderTooltip(location, options.tooltip);\n\n      var handler;\n\n      if (options.onClick || options.tooltip) {\n        var markerClickAction = this._mapWidget._createAction(options.onClick || noop);\n\n        var markerNormalizedLocation = this._normalizeLocation(location);\n\n        handler = Microsoft.Maps.Events.addHandler(pushpin, \"click\", function () {\n          markerClickAction({\n            location: markerNormalizedLocation\n          });\n\n          if (infobox) {\n            infobox.setOptions({\n              visible: true\n            });\n          }\n        });\n      }\n\n      return {\n        location: location,\n        marker: pushpin,\n        infobox: infobox,\n        handler: handler\n      };\n    }.bind(this));\n  },\n  _renderTooltip: function _renderTooltip(location, options) {\n    if (!options) {\n      return;\n    }\n\n    options = this._parseTooltipOptions(options);\n    var infobox = new Microsoft.Maps.Infobox(location, {\n      description: options.text,\n      offset: new Microsoft.Maps.Point(0, INFOBOX_V_OFFSET_V8),\n      visible: options.visible\n    });\n    infobox.setMap(this._map);\n    return infobox;\n  },\n  _destroyMarker: function _destroyMarker(marker) {\n    this._map.entities.remove(marker.marker);\n\n    if (marker.infobox) {\n      marker.infobox.setMap(null);\n    }\n\n    if (marker.handler) {\n      Microsoft.Maps.Events.removeHandler(marker.handler);\n    }\n  },\n  _renderRoute: function _renderRoute(options) {\n    return Promise.all(map(options.locations, function (point) {\n      return this._resolveLocation(point);\n    }.bind(this))).then(function (locations) {\n      return new Promise(function (resolve) {\n        var direction = new Microsoft.Maps.Directions.DirectionsManager(this._map);\n        var color = new Color(options.color || this._defaultRouteColor()).toHex();\n        var routeColor = new Microsoft.Maps.Color.fromHex(color);\n        routeColor.a = 255 * (options.opacity || this._defaultRouteOpacity());\n        direction.setRenderOptions({\n          autoUpdateMapView: false,\n          displayRouteSelector: false,\n          waypointPushpinOptions: {\n            visible: false\n          },\n          drivingPolylineOptions: {\n            strokeColor: routeColor,\n            strokeThickness: options.weight || this._defaultRouteWeight()\n          },\n          walkingPolylineOptions: {\n            strokeColor: routeColor,\n            strokeThickness: options.weight || this._defaultRouteWeight()\n          }\n        });\n        direction.setRequestOptions({\n          routeMode: this._movementMode(options.mode),\n          routeDraggable: false\n        });\n        each(locations, function (_, location) {\n          var waypoint = new Microsoft.Maps.Directions.Waypoint({\n            location: location\n          });\n          direction.addWaypoint(waypoint);\n        });\n        var directionHandlers = [];\n        directionHandlers.push(Microsoft.Maps.Events.addHandler(direction, \"directionsUpdated\", function (args) {\n          while (directionHandlers.length) {\n            Microsoft.Maps.Events.removeHandler(directionHandlers.pop());\n          }\n\n          var routeSummary = args.routeSummary[0];\n          resolve({\n            instance: direction,\n            northEast: routeSummary.northEast,\n            southWest: routeSummary.southWest\n          });\n        }));\n        directionHandlers.push(Microsoft.Maps.Events.addHandler(direction, \"directionsError\", function (args) {\n          while (directionHandlers.length) {\n            Microsoft.Maps.Events.removeHandler(directionHandlers.pop());\n          }\n\n          var status = \"RouteResponseCode: \" + args.responseCode + \" - \" + args.message;\n          errors.log(\"W1006\", status);\n          resolve({\n            instance: direction\n          });\n        }));\n        direction.calculateDirections();\n      }.bind(this));\n    }.bind(this));\n  },\n  _destroyRoute: function _destroyRoute(routeObject) {\n    routeObject.instance.dispose();\n  },\n  _fitBounds: function _fitBounds() {\n    this._updateBounds();\n\n    if (this._bounds && this._option(\"autoAdjust\")) {\n      var zoomBeforeFitting = this._map.getZoom();\n\n      this._preventZoomChangeEvent = true;\n\n      var bounds = this._bounds.clone();\n\n      bounds.height = 1.1 * bounds.height;\n      bounds.width = 1.1 * bounds.width;\n\n      this._map.setView({\n        animate: false,\n        bounds: bounds,\n        zoom: zoomBeforeFitting\n      });\n\n      var zoomAfterFitting = this._map.getZoom();\n\n      if (zoomBeforeFitting < zoomAfterFitting) {\n        this._map.setView({\n          animate: false,\n          zoom: zoomBeforeFitting\n        });\n      } else {\n        this._option(\"zoom\", zoomAfterFitting);\n      }\n\n      delete this._preventZoomChangeEvent;\n    }\n\n    return Promise.resolve();\n  },\n  _extendBounds: function _extendBounds(location) {\n    if (this._bounds) {\n      this._bounds = new Microsoft.Maps.LocationRect.fromLocations(this._bounds.getNorthwest(), this._bounds.getSoutheast(), location);\n    } else {\n      this._bounds = new Microsoft.Maps.LocationRect(location, MIN_LOCATION_RECT_LENGTH, MIN_LOCATION_RECT_LENGTH);\n    }\n  },\n  clean: function clean() {\n    if (this._map) {\n      Microsoft.Maps.Events.removeHandler(this._providerViewChangeHandler);\n      Microsoft.Maps.Events.removeHandler(this._providerClickHandler);\n\n      this._clearMarkers();\n\n      this._clearRoutes();\n\n      this._map.dispose();\n    }\n\n    return Promise.resolve();\n  }\n});\nexport default BingProvider;","map":null,"metadata":{},"sourceType":"module"}