{"ast":null,"code":"import _defineProperty from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _toConsumableArray from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n\n/**\r\n * DevExtreme (esm/core/utils/array.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { isDefined } from \"./type\";\nimport { each } from \"./iterator\";\nimport { orderEach } from \"./object\";\nimport config from \"../config\";\nexport var isEmpty = function isEmpty(entity) {\n  return Array.isArray(entity) && !entity.length;\n};\nexport var wrapToArray = function wrapToArray(entity) {\n  return Array.isArray(entity) ? entity : [entity];\n};\nexport var inArray = function inArray(value, object) {\n  if (!object) {\n    return -1;\n  }\n\n  var array = Array.isArray(object) ? object : object.toArray();\n  return array.indexOf(value);\n};\nexport var intersection = function intersection(a, b) {\n  if (!Array.isArray(a) || 0 === a.length || !Array.isArray(b) || 0 === b.length) {\n    return [];\n  }\n\n  var result = [];\n  each(a, function (_, value) {\n    var index = inArray(value, b);\n\n    if (-1 !== index) {\n      result.push(value);\n    }\n  });\n  return result;\n};\nexport var uniqueValues = function uniqueValues(data) {\n  return _toConsumableArray(new Set(data));\n};\nexport var removeDuplicates = function removeDuplicates(from, what) {\n  if (!Array.isArray(from) || 0 === from.length) {\n    return [];\n  }\n\n  var result = from.slice();\n\n  if (!Array.isArray(what) || 0 === what.length) {\n    return result;\n  }\n\n  each(what, function (_, value) {\n    var index = inArray(value, result);\n    result.splice(index, 1);\n  });\n  return result;\n};\nexport var normalizeIndexes = function normalizeIndexes(items, indexParameterName, currentItem, needIndexCallback) {\n  var indexedItems = {};\n  var parameterIndex = 0;\n  var useLegacyVisibleIndex = config().useLegacyVisibleIndex;\n  each(items, function (index, item) {\n    index = item[indexParameterName];\n\n    if (index >= 0) {\n      indexedItems[index] = indexedItems[index] || [];\n\n      if (item === currentItem) {\n        indexedItems[index].unshift(item);\n      } else {\n        indexedItems[index].push(item);\n      }\n    } else {\n      item[indexParameterName] = void 0;\n    }\n  });\n\n  if (!useLegacyVisibleIndex) {\n    each(items, function () {\n      if (!isDefined(this[indexParameterName]) && (!needIndexCallback || needIndexCallback(this))) {\n        while (indexedItems[parameterIndex]) {\n          parameterIndex++;\n        }\n\n        indexedItems[parameterIndex] = [this];\n        parameterIndex++;\n      }\n    });\n  }\n\n  parameterIndex = 0;\n  orderEach(indexedItems, function (index, items) {\n    each(items, function () {\n      if (index >= 0) {\n        this[indexParameterName] = parameterIndex++;\n      }\n    });\n  });\n\n  if (useLegacyVisibleIndex) {\n    each(items, function () {\n      if (!isDefined(this[indexParameterName]) && (!needIndexCallback || needIndexCallback(this))) {\n        this[indexParameterName] = parameterIndex++;\n      }\n    });\n  }\n\n  return parameterIndex;\n};\nexport var merge = function merge(array1, array2) {\n  for (var i = 0; i < array2.length; i++) {\n    array1[array1.length] = array2[i];\n  }\n\n  return array1;\n};\nexport var find = function find(array, condition) {\n  for (var i = 0; i < array.length; i++) {\n    if (condition(array[i])) {\n      return array[i];\n    }\n  }\n};\nexport var groupBy = function groupBy(array, cb) {\n  return array.reduce(function (result, item) {\n    return _extends({}, result, _defineProperty({}, cb(item), [].concat(_toConsumableArray(result[cb(item)] || []), [item])));\n  }, {});\n};","map":null,"metadata":{},"sourceType":"module"}