{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.item_list.details.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport { extendAttributes, getDisplayFileSize } from \"./ui.file_manager.common\";\nimport { isString, isFunction, isDefined } from \"../../core/utils/type\";\nimport messageLocalization from \"../../localization/message\";\nimport DataGrid from \"../data_grid/ui.data_grid\";\nimport FileManagerItemListBase from \"./ui.file_manager.item_list\";\nimport FileManagerFileActionsButton from \"./ui.file_manager.file_actions_button\";\nimport { Deferred } from \"../../core/utils/deferred\";\nvar FILE_MANAGER_DETAILS_ITEM_LIST_CLASS = \"dx-filemanager-details\";\nvar FILE_MANAGER_DETAILS_ITEM_THUMBNAIL_CLASS = \"dx-filemanager-details-item-thumbnail\";\nvar FILE_MANAGER_DETAILS_ITEM_NAME_CLASS = \"dx-filemanager-details-item-name\";\nvar FILE_MANAGER_DETAILS_ITEM_NAME_WRAPPER_CLASS = \"dx-filemanager-details-item-name-wrapper\";\nvar FILE_MANAGER_DETAILS_ITEM_IS_DIRECTORY_CLASS = \"dx-filemanager-details-item-is-directory\";\nvar FILE_MANAGER_PARENT_DIRECTORY_ITEM = \"dx-filemanager-parent-directory-item\";\nvar DATA_GRID_DATA_ROW_CLASS = \"dx-data-row\";\nvar DEFAULT_COLUMN_CONFIGS = {\n  thumbnail: {\n    caption: \"\",\n    calculateSortValue: \"isDirectory\",\n    width: 36,\n    alignment: \"center\",\n    cssClass: FILE_MANAGER_DETAILS_ITEM_IS_DIRECTORY_CLASS\n  },\n  name: {\n    caption: messageLocalization.format(\"dxFileManager-listDetailsColumnCaptionName\")\n  },\n  dateModified: {\n    caption: messageLocalization.format(\"dxFileManager-listDetailsColumnCaptionDateModified\"),\n    width: 110,\n    hidingPriority: 1\n  },\n  size: {\n    caption: messageLocalization.format(\"dxFileManager-listDetailsColumnCaptionFileSize\"),\n    width: 90,\n    alignment: \"right\",\n    hidingPriority: 0\n  },\n  isParentFolder: {\n    caption: \"isParentFolder\",\n    visible: false,\n    sortIndex: 0,\n    sortOrder: \"asc\"\n  }\n};\n\nvar FileManagerDetailsItemList = /*#__PURE__*/function (_FileManagerItemListB) {\n  _inherits(FileManagerDetailsItemList, _FileManagerItemListB);\n\n  var _super = _createSuper(FileManagerDetailsItemList);\n\n  function FileManagerDetailsItemList() {\n    _classCallCheck(this, FileManagerDetailsItemList);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FileManagerDetailsItemList, [{\n    key: \"_initMarkup\",\n    value: function _initMarkup() {\n      var _this = this;\n\n      this._itemCount = 0;\n      this._focusedItem = null;\n      this._hasParentDirectoryItem = false;\n      this._parentDirectoryItemKey = null;\n      this._selectAllCheckBox = null;\n      this._selectAllCheckBoxUpdating = false;\n      this.$element().addClass(FILE_MANAGER_DETAILS_ITEM_LIST_CLASS);\n\n      this._createFilesView();\n\n      this._contextMenu.option(\"onContextMenuHidden\", function () {\n        return _this._onContextMenuHidden();\n      });\n\n      _get(_getPrototypeOf(FileManagerDetailsItemList.prototype), \"_initMarkup\", this).call(this);\n    }\n  }, {\n    key: \"_createFilesView\",\n    value: function _createFilesView() {\n      var _this2 = this;\n\n      var $filesView = $(\"<div>\").appendTo(this.$element());\n      var selectionMode = this._isMultipleSelectionMode() ? \"multiple\" : \"none\";\n      this._filesView = this._createComponent($filesView, DataGrid, {\n        dataSource: this._createDataSource(),\n        hoverStateEnabled: true,\n        selection: {\n          mode: selectionMode,\n          showCheckBoxesMode: this._isDesktop() ? \"onClick\" : \"none\"\n        },\n        selectedRowKeys: this.option(\"selectedItemKeys\"),\n        focusedRowKey: this.option(\"focusedItemKey\"),\n        focusedRowEnabled: true,\n        allowColumnResizing: true,\n        scrolling: {\n          mode: \"virtual\"\n        },\n        sorting: {\n          mode: \"single\",\n          showSortIndexes: false\n        },\n        showColumnLines: false,\n        showRowLines: false,\n        columnHidingEnabled: false,\n        columns: this._createColumns(),\n        onEditorPreparing: this._onEditorPreparing.bind(this),\n        onRowPrepared: this._onRowPrepared.bind(this),\n        onContextMenuPreparing: this._onContextMenuPreparing.bind(this),\n        onSelectionChanged: this._onFilesViewSelectionChanged.bind(this),\n        onFocusedRowChanged: this._onFilesViewFocusedRowChanged.bind(this),\n        onOptionChanged: this._onFilesViewOptionChanged.bind(this),\n        onContentReady: function onContentReady() {\n          var _this$_refreshDeferre;\n\n          return null === (_this$_refreshDeferre = _this2._refreshDeferred) || void 0 === _this$_refreshDeferre ? void 0 : _this$_refreshDeferre.resolve();\n        }\n      });\n    }\n  }, {\n    key: \"_createColumns\",\n    value: function _createColumns() {\n      var _this3 = this;\n\n      var columns = this.option(\"detailColumns\");\n      columns = columns.slice(0);\n      columns = columns.map(function (column) {\n        var extendedItem = column;\n\n        if (isString(column)) {\n          extendedItem = {\n            dataField: column\n          };\n        }\n\n        return _this3._getPreparedColumn(extendedItem);\n      });\n      var customizeDetailColumns = this.option(\"customizeDetailColumns\");\n\n      if (isFunction(customizeDetailColumns)) {\n        columns = customizeDetailColumns(columns);\n      }\n\n      columns.push(this._getPreparedColumn({\n        dataField: \"isParentFolder\"\n      }));\n      columns.forEach(function (column) {\n        return _this3._updateColumnDataField(column);\n      });\n      return columns;\n    }\n  }, {\n    key: \"_getPreparedColumn\",\n    value: function _getPreparedColumn(columnOptions) {\n      var result = {};\n      var resultCssClass = \"\";\n\n      if (this._isDefaultColumn(columnOptions.dataField)) {\n        var defaultConfig = extend(true, {}, DEFAULT_COLUMN_CONFIGS[columnOptions.dataField]);\n        resultCssClass = defaultConfig.cssClass || \"\";\n\n        switch (columnOptions.dataField) {\n          case \"thumbnail\":\n            defaultConfig.cellTemplate = this._createThumbnailColumnCell.bind(this);\n            defaultConfig.calculateSortValue = \"fileItem.\".concat(defaultConfig.calculateSortValue);\n            break;\n\n          case \"name\":\n            defaultConfig.cellTemplate = this._createNameColumnCell.bind(this);\n            defaultConfig.caption = messageLocalization.format(\"dxFileManager-listDetailsColumnCaptionName\");\n            break;\n\n          case \"size\":\n            defaultConfig.calculateCellValue = this._calculateSizeColumnCellValue.bind(this);\n            defaultConfig.caption = messageLocalization.format(\"dxFileManager-listDetailsColumnCaptionFileSize\");\n\n            defaultConfig.calculateSortValue = function (rowData) {\n              return rowData.fileItem.isDirectory ? -1 : rowData.fileItem.size;\n            };\n\n            break;\n\n          case \"dateModified\":\n            defaultConfig.caption = messageLocalization.format(\"dxFileManager-listDetailsColumnCaptionDateModified\");\n        }\n\n        extend(true, result, defaultConfig);\n      }\n\n      extendAttributes(result, columnOptions, [\"alignment\", \"caption\", \"dataField\", \"dataType\", \"hidingPriority\", \"sortIndex\", \"sortOrder\", \"visible\", \"visibleIndex\", \"width\"]);\n\n      if (columnOptions.cssClass) {\n        resultCssClass = \"\".concat(resultCssClass, \" \").concat(columnOptions.cssClass);\n      }\n\n      if (resultCssClass) {\n        result.cssClass = resultCssClass;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_updateColumnDataField\",\n    value: function _updateColumnDataField(column) {\n      var dataItemSuffix = this._isDefaultColumn(column.dataField) ? \"\" : \"dataItem.\";\n      column.dataField = \"fileItem.\" + dataItemSuffix + column.dataField;\n      return column;\n    }\n  }, {\n    key: \"_isDefaultColumn\",\n    value: function _isDefaultColumn(columnDataField) {\n      return !!DEFAULT_COLUMN_CONFIGS[columnDataField];\n    }\n  }, {\n    key: \"_onFileItemActionButtonClick\",\n    value: function _onFileItemActionButtonClick(_ref) {\n      var component = _ref.component,\n          element = _ref.element,\n          event = _ref.event;\n      event.stopPropagation();\n      var $row = component.$element().closest(this._getItemSelector());\n      var fileItemInfo = $row.data(\"item\");\n\n      this._selectItem(fileItemInfo);\n\n      var target = {\n        itemData: fileItemInfo,\n        itemElement: $row,\n        isActionButton: true\n      };\n\n      var items = this._getFileItemsForContextMenu(fileItemInfo);\n\n      this._showContextMenu(items, element, event, target);\n\n      this._activeFileActionsButton = component;\n\n      this._activeFileActionsButton.setActive(true);\n    }\n  }, {\n    key: \"_onContextMenuHidden\",\n    value: function _onContextMenuHidden() {\n      if (this._activeFileActionsButton) {\n        this._activeFileActionsButton.setActive(false);\n      }\n    }\n  }, {\n    key: \"_getItemThumbnailCssClass\",\n    value: function _getItemThumbnailCssClass() {\n      return FILE_MANAGER_DETAILS_ITEM_THUMBNAIL_CLASS;\n    }\n  }, {\n    key: \"_getItemSelector\",\n    value: function _getItemSelector() {\n      return \".\".concat(DATA_GRID_DATA_ROW_CLASS);\n    }\n  }, {\n    key: \"_onItemDblClick\",\n    value: function _onItemDblClick(e) {\n      var $row = $(e.currentTarget);\n      var fileItemInfo = $row.data(\"item\");\n\n      this._raiseSelectedItemOpened(fileItemInfo);\n    }\n  }, {\n    key: \"_isAllItemsSelected\",\n    value: function _isAllItemsSelected() {\n      var selectableItemsCount = this._hasParentDirectoryItem ? this._itemCount - 1 : this._itemCount;\n\n      var selectedRowKeys = this._filesView.option(\"selectedRowKeys\");\n\n      if (!selectedRowKeys.length) {\n        return false;\n      }\n\n      return selectedRowKeys.length >= selectableItemsCount ? true : void 0;\n    }\n  }, {\n    key: \"_onEditorPreparing\",\n    value: function _onEditorPreparing(_ref2) {\n      var _this4 = this;\n\n      var component = _ref2.component,\n          command = _ref2.command,\n          row = _ref2.row,\n          parentType = _ref2.parentType,\n          editorOptions = _ref2.editorOptions;\n\n      if (!this._filesView) {\n        this._filesView = component;\n      }\n\n      if (\"select\" === command && row) {\n        if (this._isParentDirectoryItem(row.data)) {\n          editorOptions.disabled = true;\n        }\n      } else if (\"headerRow\" === parentType) {\n        editorOptions.onInitialized = function (_ref3) {\n          var component = _ref3.component;\n          _this4._selectAllCheckBox = component;\n        };\n\n        editorOptions.value = this._isAllItemsSelected();\n\n        editorOptions.onValueChanged = function (args) {\n          return _this4._onSelectAllCheckBoxValueChanged(args);\n        };\n      }\n    }\n  }, {\n    key: \"_onSelectAllCheckBoxValueChanged\",\n    value: function _onSelectAllCheckBoxValueChanged(_ref4) {\n      var event = _ref4.event,\n          previousValue = _ref4.previousValue,\n          value = _ref4.value;\n\n      if (!event) {\n        if (previousValue && !this._selectAllCheckBoxUpdating && this._selectAllCheckBox) {\n          this._selectAllCheckBox.option(\"value\", previousValue);\n        }\n\n        return;\n      }\n\n      if (this._isAllItemsSelected() === value) {\n        return;\n      }\n\n      if (value) {\n        this._filesView.selectAll();\n      } else {\n        this._filesView.deselectAll();\n      }\n\n      event.preventDefault();\n    }\n  }, {\n    key: \"_onRowPrepared\",\n    value: function _onRowPrepared(_ref5) {\n      var rowType = _ref5.rowType,\n          rowElement = _ref5.rowElement,\n          data = _ref5.data;\n\n      if (\"data\" === rowType) {\n        var $row = $(rowElement);\n        $row.data(\"item\", data);\n\n        if (this._isParentDirectoryItem(data)) {\n          $row.addClass(FILE_MANAGER_PARENT_DIRECTORY_ITEM);\n        }\n      }\n    }\n  }, {\n    key: \"_onContextMenuPreparing\",\n    value: function _onContextMenuPreparing(e) {\n      if (!this._isDesktop()) {\n        return;\n      }\n\n      var fileItems = null;\n      var item = {};\n\n      if (e.row && \"data\" === e.row.rowType) {\n        item = e.row.data;\n\n        this._selectItem(item);\n\n        fileItems = this._getFileItemsForContextMenu(item);\n      }\n\n      var eventArgs = extend({}, {\n        targetElement: \"content\" === e.target && isDefined(e.row) ? this._filesView.getRowElement(e.rowIndex) : void 0,\n        itemData: item,\n        options: this._contextMenu.option(),\n        event: e.event,\n        isActionButton: false,\n        cancel: false\n      });\n\n      this._raiseContextMenuShowing(eventArgs);\n\n      e.items = eventArgs.cancel ? [] : this._contextMenu.createContextMenuItems(fileItems, null, item);\n    }\n  }, {\n    key: \"_onFilesViewSelectionChanged\",\n    value: function _onFilesViewSelectionChanged(_ref6) {\n      var component = _ref6.component,\n          selectedRowsData = _ref6.selectedRowsData,\n          selectedRowKeys = _ref6.selectedRowKeys,\n          currentSelectedRowKeys = _ref6.currentSelectedRowKeys,\n          currentDeselectedRowKeys = _ref6.currentDeselectedRowKeys;\n      this._filesView = this._filesView || component;\n\n      if (this._selectAllCheckBox) {\n        this._selectAllCheckBoxUpdating = true;\n\n        this._selectAllCheckBox.option(\"value\", this._isAllItemsSelected());\n\n        this._selectAllCheckBoxUpdating = false;\n      }\n\n      var selectedItems = selectedRowsData.map(function (itemInfo) {\n        return itemInfo.fileItem;\n      });\n\n      this._tryRaiseSelectionChanged({\n        selectedItemInfos: selectedRowsData,\n        selectedItems: selectedItems,\n        selectedItemKeys: selectedRowKeys,\n        currentSelectedItemKeys: currentSelectedRowKeys,\n        currentDeselectedItemKeys: currentDeselectedRowKeys\n      });\n    }\n  }, {\n    key: \"_onFilesViewFocusedRowChanged\",\n    value: function _onFilesViewFocusedRowChanged(e) {\n      var _e$row2;\n\n      if (!this._isMultipleSelectionMode()) {\n        var _e$row;\n\n        this._selectItemSingleSelection(null === (_e$row = e.row) || void 0 === _e$row ? void 0 : _e$row.data);\n      }\n\n      var fileSystemItem = (null === (_e$row2 = e.row) || void 0 === _e$row2 ? void 0 : _e$row2.data.fileItem) || null;\n\n      this._onFocusedItemChanged({\n        item: fileSystemItem,\n        itemKey: null === fileSystemItem || void 0 === fileSystemItem ? void 0 : fileSystemItem.key,\n        itemElement: e.rowElement\n      });\n    }\n  }, {\n    key: \"_onFilesViewOptionChanged\",\n    value: function _onFilesViewOptionChanged(_ref7) {\n      var fullName = _ref7.fullName;\n\n      if (fullName.indexOf(\"sortOrder\") > -1) {\n        this._filesView.columnOption(\"isParentFolder\", {\n          sortOrder: \"asc\",\n          sortIndex: 0\n        });\n      }\n    }\n  }, {\n    key: \"_resetFocus\",\n    value: function _resetFocus() {\n      this._setFocusedItemKey(void 0);\n    }\n  }, {\n    key: \"_createThumbnailColumnCell\",\n    value: function _createThumbnailColumnCell(container, cellInfo) {\n      this._getItemThumbnailContainer(cellInfo.data).appendTo(container);\n    }\n  }, {\n    key: \"_createNameColumnCell\",\n    value: function _createNameColumnCell(container, cellInfo) {\n      var _this5 = this;\n\n      var $button = $(\"<div>\");\n      var $name = $(\"<span>\").text(cellInfo.data.fileItem.name).addClass(FILE_MANAGER_DETAILS_ITEM_NAME_CLASS);\n      var $wrapper = $(\"<div>\").append($name, $button).addClass(FILE_MANAGER_DETAILS_ITEM_NAME_WRAPPER_CLASS);\n      $(container).append($wrapper);\n\n      this._createComponent($button, FileManagerFileActionsButton, {\n        onClick: function onClick(e) {\n          return _this5._onFileItemActionButtonClick(e);\n        }\n      });\n    }\n  }, {\n    key: \"_calculateSizeColumnCellValue\",\n    value: function _calculateSizeColumnCellValue(rowData) {\n      return rowData.fileItem.isDirectory ? \"\" : getDisplayFileSize(rowData.fileItem.size);\n    }\n  }, {\n    key: \"_selectItem\",\n    value: function _selectItem(fileItemInfo) {\n      var selectItemFunc = this._isMultipleSelectionMode() ? this._selectItemMultipleSelection : this._selectItemSingleSelection;\n      selectItemFunc.call(this, fileItemInfo);\n    }\n  }, {\n    key: \"_deselectItem\",\n    value: function _deselectItem(item) {\n      this._filesView.deselectRows([item.fileItem.key]);\n    }\n  }, {\n    key: \"_selectItemSingleSelection\",\n    value: function _selectItemSingleSelection(fileItemInfo) {\n      if (!this._focusedItem || !fileItemInfo || this._focusedItem.fileItem.key !== fileItemInfo.fileItem.key) {\n        var oldFocusedItem = this._focusedItem;\n        this._focusedItem = fileItemInfo;\n        var deselectedKeys = [];\n\n        if (oldFocusedItem) {\n          deselectedKeys.push(oldFocusedItem.fileItem.key);\n        }\n\n        var selectedItems = [];\n        var selectedKeys = [];\n\n        if (fileItemInfo && !this._isParentDirectoryItem(fileItemInfo)) {\n          selectedItems.push(fileItemInfo.fileItem);\n          selectedKeys.push(fileItemInfo.fileItem.key);\n        }\n\n        this._raiseSelectionChanged({\n          selectedItems: selectedItems,\n          selectedItemKeys: selectedKeys,\n          currentSelectedItemKeys: [].concat(selectedKeys),\n          currentDeselectedItemKeys: deselectedKeys\n        });\n      }\n    }\n  }, {\n    key: \"_selectItemMultipleSelection\",\n    value: function _selectItemMultipleSelection(_ref8) {\n      var fileItem = _ref8.fileItem;\n\n      if (!this._filesView.isRowSelected(fileItem.key)) {\n        var selectionController = this._filesView.getController(\"selection\");\n\n        var preserve = selectionController.isSelectionWithCheckboxes();\n\n        this._filesView.selectRows([fileItem.key], preserve);\n      }\n    }\n  }, {\n    key: \"_setSelectedItemKeys\",\n    value: function _setSelectedItemKeys(itemKeys) {\n      this._filesView.option(\"selectedRowKeys\", itemKeys);\n    }\n  }, {\n    key: \"_setFocusedItemKey\",\n    value: function _setFocusedItemKey(itemKey) {\n      var _this$_filesView;\n\n      null === (_this$_filesView = this._filesView) || void 0 === _this$_filesView ? void 0 : _this$_filesView.option(\"focusedRowKey\", itemKey);\n    }\n  }, {\n    key: \"clearSelection\",\n    value: function clearSelection() {\n      if (this._isMultipleSelectionMode()) {\n        this._filesView.clearSelection();\n      } else {\n        this._filesView.option(\"focusedRowIndex\", -1);\n      }\n    }\n  }, {\n    key: \"refresh\",\n    value: function refresh(options) {\n      var actualOptions = {\n        dataSource: this._createDataSource()\n      };\n\n      if (options && Object.prototype.hasOwnProperty.call(options, \"focusedItemKey\")) {\n        if (isDefined(options.focusedItemKey)) {\n          actualOptions.focusedRowKey = options.focusedItemKey;\n        } else {\n          actualOptions.focusedRowIndex = -1;\n        }\n      }\n\n      this._filesView.option(actualOptions);\n\n      this._refreshDeferred = new Deferred();\n      return this._refreshDeferred.promise();\n    }\n  }, {\n    key: \"getSelectedItems\",\n    value: function getSelectedItems() {\n      if (this._isMultipleSelectionMode()) {\n        return this._filesView.getSelectedRowsData();\n      }\n\n      return this._focusedItem && !this._isParentDirectoryItem(this._focusedItem) ? [this._focusedItem] : [];\n    }\n  }]);\n\n  return FileManagerDetailsItemList;\n}(FileManagerItemListBase);\n\nexport default FileManagerDetailsItemList;","map":null,"metadata":{},"sourceType":"module"}