{"ast":null,"code":"import _slicedToArray from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\n/**\r\n * DevExtreme (esm/renovation/ui/scheduler/model/views.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { isObject, isString } from \"../../../../core/utils/type\";\nvar VIEW_TYPES = [\"day\", \"week\", \"workWeek\", \"month\", \"timelineDay\", \"timelineWeek\", \"timelineWorkWeek\", \"timelineMonth\", \"agenda\"];\nexport var getCurrentView = function getCurrentView(currentView, views) {\n  var currentViewProps = views.find(function (view) {\n    var names = isObject(view) ? [view.name, view.type] : [view];\n\n    if (names.includes(currentView)) {\n      return true;\n    }\n\n    return false;\n  });\n\n  if (void 0 === currentViewProps) {\n    if (VIEW_TYPES.includes(currentView)) {\n      currentViewProps = currentView;\n    } else {\n      var _views = _slicedToArray(views, 1);\n\n      currentViewProps = _views[0];\n    }\n  }\n\n  return currentViewProps;\n};\nexport var getCurrentViewProps = function getCurrentViewProps(currentView, views) {\n  var currentViewProps = getCurrentView(currentView, views);\n  return isString(currentViewProps) ? {\n    type: currentViewProps\n  } : currentViewProps;\n};\n\nfunction getViewConfigProp(schedulerProp, viewProp) {\n  return void 0 !== viewProp ? viewProp : schedulerProp;\n}\n\nexport var getCurrentViewConfig = function getCurrentViewConfig(currentViewProps, schedulerProps) {\n  var schedulerScrolling = schedulerProps.scrolling;\n  var cellDuration = currentViewProps.cellDuration,\n      dataCellTemplate = currentViewProps.dataCellTemplate,\n      dateCellTemplate = currentViewProps.dateCellTemplate,\n      endDayHour = currentViewProps.endDayHour,\n      firstDayOfWeek = currentViewProps.firstDayOfWeek,\n      groupByDate = currentViewProps.groupByDate,\n      groupOrientation = currentViewProps.groupOrientation,\n      intervalCount = currentViewProps.intervalCount,\n      resourceCellTemplate = currentViewProps.resourceCellTemplate,\n      scrolling = currentViewProps.scrolling,\n      startDate = currentViewProps.startDate,\n      startDayHour = currentViewProps.startDayHour,\n      timeCellTemplate = currentViewProps.timeCellTemplate,\n      type = currentViewProps.type;\n  var isVirtualScrolling = \"virtual\" === schedulerScrolling.mode || \"virtual\" === (null === scrolling || void 0 === scrolling ? void 0 : scrolling.mode);\n  var crossScrollingEnabled = schedulerProps.crossScrollingEnabled || isVirtualScrolling;\n  var result = {\n    firstDayOfWeek: getViewConfigProp(schedulerProps.firstDayOfWeek, firstDayOfWeek),\n    startDayHour: getViewConfigProp(schedulerProps.startDayHour, startDayHour),\n    endDayHour: getViewConfigProp(schedulerProps.endDayHour, endDayHour),\n    cellDuration: getViewConfigProp(schedulerProps.cellDuration, cellDuration),\n    groupByDate: getViewConfigProp(schedulerProps.groupByDate, groupByDate),\n    scrolling: getViewConfigProp(schedulerScrolling, scrolling),\n    dataCellTemplate: getViewConfigProp(schedulerProps.dataCellTemplate, dataCellTemplate),\n    timeCellTemplate: getViewConfigProp(schedulerProps.timeCellTemplate, timeCellTemplate),\n    resourceCellTemplate: getViewConfigProp(schedulerProps.resourceCellTemplate, resourceCellTemplate),\n    dateCellTemplate: getViewConfigProp(schedulerProps.dateCellTemplate, dateCellTemplate),\n    currentDate: schedulerProps.currentDate,\n    intervalCount: intervalCount,\n    groupOrientation: groupOrientation,\n    startDate: startDate,\n    type: type,\n    showAllDayPanel: schedulerProps.showAllDayPanel,\n    showCurrentTimeIndicator: schedulerProps.showCurrentTimeIndicator,\n    indicatorUpdateInterval: schedulerProps.indicatorUpdateInterval,\n    shadeUntilCurrentTime: schedulerProps.shadeUntilCurrentTime,\n    crossScrollingEnabled: crossScrollingEnabled,\n    schedulerHeight: schedulerProps.height,\n    schedulerWidth: schedulerProps.width,\n    tabIndex: schedulerProps.tabIndex,\n    accessKey: schedulerProps.accessKey,\n    focusStateEnabled: schedulerProps.focusStateEnabled,\n    allowMultipleCellSelection: true,\n    allDayPanelExpanded: true\n  };\n  return _extends({}, result, {\n    hoursInterval: result.cellDuration / 60\n  });\n};","map":null,"metadata":{},"sourceType":"module"}