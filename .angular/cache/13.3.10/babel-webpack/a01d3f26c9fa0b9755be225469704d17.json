{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/sankey/node_item.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nvar states = [\"normal\", \"hover\"];\nimport { isDefined } from \"../../core/utils/type\";\nimport { patchFontOptions } from \"../core/utils\";\n\nfunction _compileAttrs(color, itemOptions, itemBaseOptions) {\n  var border = itemOptions.border;\n  var baseBorder = itemBaseOptions.border;\n  var borderVisible = isDefined(border.visible) ? border.visible : baseBorder.visible;\n  var borderWidth = isDefined(border.width) ? border.width : baseBorder.width;\n  var borderOpacity = isDefined(border.opacity) ? border.opacity : isDefined(baseBorder.opacity) ? baseBorder.opacity : 1;\n  var opacity = isDefined(itemOptions.opacity) ? itemOptions.opacity : isDefined(itemBaseOptions.opacity) ? itemBaseOptions.opacity : 1;\n  return {\n    fill: itemOptions.color || color,\n    \"stroke-width\": borderVisible ? borderWidth : 0,\n    stroke: itemOptions.border.color || itemBaseOptions.border.color,\n    \"stroke-opacity\": borderOpacity,\n    opacity: opacity,\n    hatching: itemOptions.hatching\n  };\n}\n\nfunction compileLabelAttrs(labelOptions, filter, node) {\n  var _patchFontOptions = patchFontOptions;\n\n  if (labelOptions.useNodeColors) {\n    labelOptions.font.color = node.color;\n  }\n\n  var borderVisible = isDefined(labelOptions.border.visible) ? labelOptions.border.visible : false;\n  var borderWidth = isDefined(labelOptions.border.width) ? labelOptions.border.width : 0;\n  var borderColor = isDefined(labelOptions.border.color) ? labelOptions.border.color : labelOptions.font.color;\n  var borderOpacity = isDefined(labelOptions.border.opacity) ? labelOptions.border.opacity : 1;\n  var attr = {\n    filter: filter\n  };\n\n  if (borderVisible && borderWidth) {\n    attr.stroke = borderColor;\n    attr[\"stroke-width\"] = borderVisible ? borderWidth : 0;\n    attr[\"stroke-opacity\"] = borderOpacity;\n  }\n\n  return {\n    attr: attr,\n    css: _patchFontOptions(labelOptions.font)\n  };\n}\n\nfunction Node(widget, params) {\n  var widgetOffset = widget._renderer.getRootOffset();\n\n  this.code = 0;\n  this.widget = widget;\n  this.color = params.color;\n  this.options = params.options;\n  this.rect = params.rect;\n  this.label = this.title = params.rect._name;\n  this.coords = {\n    x: params.rect.x + params.rect.width / 2 + widgetOffset.left,\n    y: params.rect.y + params.rect.height / 2 + widgetOffset.top\n  };\n  this.id = params.id;\n  this.linksIn = params.linksIn;\n  this.linksOut = params.linksOut;\n  this.states = {\n    normal: _compileAttrs(this.color, this.options, this.options),\n    hover: _compileAttrs(this.color, this.options.hoverStyle, this.options)\n  };\n}\n\nNode.prototype = {\n  compileAttrs: function compileAttrs() {\n    return _compileAttrs(this.color, this.options);\n  },\n  getState: function getState() {\n    return states[this.code];\n  },\n  isHovered: function isHovered() {\n    return !!(1 & this.code);\n  },\n  setState: function setState(code, state) {\n    var _this = this;\n\n    if (state) {\n      this.code |= code;\n    } else {\n      this.code &= ~code;\n    }\n\n    if (state) {\n      this.linksIn.concat(this.linksOut).forEach(function (adjacentLink) {\n        _this.widget._links[adjacentLink.index].setAdjacentNodeHover(true);\n      });\n    } else {\n      this.widget._links.forEach(function (link) {\n        link.isAdjacentNodeHovered() && link.adjacentNodeHover(false);\n      });\n\n      this.hideTooltip();\n    }\n\n    this.widget._applyNodesAppearance();\n\n    this.widget._applyLinksAppearance();\n  },\n  hover: function hover(state) {\n    if (!this.widget._getOption(\"hoverEnabled\", true) || state === this.isHovered()) {\n      return;\n    }\n\n    this.widget._suspend();\n\n    state && this.widget.clearHover();\n    this.setState(1, state);\n\n    this.widget._eventTrigger(\"nodeHoverChanged\", {\n      target: this\n    });\n\n    this.widget._resume();\n  },\n  setHover: function setHover() {\n    this.hover(true);\n  },\n  showTooltip: function showTooltip(coords) {\n    this.widget._getOption(\"hoverEnabled\", true) && this.widget._tooltip && this.widget._tooltip.show({\n      type: \"node\",\n      info: {\n        label: this.label,\n        title: this.label,\n        weightIn: this.linksIn.reduce(function (previousValue, currentValue) {\n          return previousValue + currentValue.weight;\n        }, 0),\n        weightOut: this.linksOut.reduce(function (previousValue, currentValue) {\n          return previousValue + currentValue.weight;\n        }, 0)\n      }\n    }, \"undefined\" !== typeof coords ? {\n      x: coords[0],\n      y: coords[1]\n    } : this.coords);\n  },\n  hideTooltip: function hideTooltip() {\n    this.widget._tooltip && this.widget._tooltip.hide();\n  },\n  getLabelAttributes: function getLabelAttributes(labelSettings, filter) {\n    return compileLabelAttrs(labelSettings, filter, this);\n  }\n};\nexport default Node;","map":null,"metadata":{},"sourceType":"module"}