{"ast":null,"code":"import _toConsumableArray from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n\n/**\r\n * DevExtreme (esm/ui/form/ui.form.utils.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { isDefined } from \"../../core/utils/type\";\nimport { extend } from \"../../core/utils/extend\";\nexport var createItemPathByIndex = function createItemPathByIndex(index, isTabs) {\n  return \"\".concat(isTabs ? \"tabs\" : \"items\", \"[\").concat(index, \"]\");\n};\nexport var concatPaths = function concatPaths(path1, path2) {\n  if (isDefined(path1) && isDefined(path2)) {\n    return \"\".concat(path1, \".\").concat(path2);\n  }\n\n  return path1 || path2;\n};\nexport var getTextWithoutSpaces = function getTextWithoutSpaces(text) {\n  return text ? text.replace(/\\s/g, \"\") : void 0;\n};\nexport var isEqualToDataFieldOrNameOrTitleOrCaption = function isEqualToDataFieldOrNameOrTitleOrCaption(item, fieldName) {\n  if (item) {\n    return item.dataField === fieldName || item.name === fieldName || getTextWithoutSpaces(item.title) === fieldName || \"group\" === item.itemType && getTextWithoutSpaces(item.caption) === fieldName;\n  }\n\n  return false;\n};\nexport var getFullOptionName = function getFullOptionName(path, optionName) {\n  return \"\".concat(path, \".\").concat(optionName);\n};\nexport var getOptionNameFromFullName = function getOptionNameFromFullName(fullName) {\n  var parts = fullName.split(\".\");\n  return parts[parts.length - 1].replace(/\\[\\d+]/, \"\");\n};\nexport var tryGetTabPath = function tryGetTabPath(fullPath) {\n  var pathParts = fullPath.split(\".\");\n\n  var resultPathParts = _toConsumableArray(pathParts);\n\n  for (var i = pathParts.length - 1; i >= 0; i--) {\n    if (isFullPathContainsTabs(pathParts[i])) {\n      return resultPathParts.join(\".\");\n    }\n\n    resultPathParts.splice(i, 1);\n  }\n\n  return \"\";\n};\nexport var isFullPathContainsTabs = function isFullPathContainsTabs(fullPath) {\n  return fullPath.indexOf(\"tabs\") > -1;\n};\nexport var getItemPath = function getItemPath(items, item, isTabs) {\n  var index = items.indexOf(item);\n\n  if (index > -1) {\n    return createItemPathByIndex(index, isTabs);\n  }\n\n  for (var i = 0; i < items.length; i++) {\n    var targetItem = items[i];\n    var tabOrGroupItems = targetItem.tabs || targetItem.items;\n\n    if (tabOrGroupItems) {\n      var itemPath = getItemPath(tabOrGroupItems, item, targetItem.tabs);\n\n      if (itemPath) {\n        return concatPaths(createItemPathByIndex(i, isTabs), itemPath);\n      }\n    }\n  }\n};\nexport function convertToLayoutManagerOptions(_ref) {\n  var form = _ref.form,\n      $formElement = _ref.$formElement,\n      formOptions = _ref.formOptions,\n      items = _ref.items,\n      validationGroup = _ref.validationGroup,\n      extendedLayoutManagerOptions = _ref.extendedLayoutManagerOptions,\n      onFieldDataChanged = _ref.onFieldDataChanged,\n      onContentReady = _ref.onContentReady,\n      onDisposing = _ref.onDisposing,\n      onFieldItemRendered = _ref.onFieldItemRendered;\n  var baseOptions = {\n    form: form,\n    items: items,\n    $formElement: $formElement,\n    validationGroup: validationGroup,\n    onFieldDataChanged: onFieldDataChanged,\n    onContentReady: onContentReady,\n    onDisposing: onDisposing,\n    onFieldItemRendered: onFieldItemRendered,\n    validationBoundary: formOptions.scrollingEnabled ? $formElement : void 0,\n    scrollingEnabled: formOptions.scrollingEnabled,\n    showRequiredMark: formOptions.showRequiredMark,\n    showOptionalMark: formOptions.showOptionalMark,\n    requiredMark: formOptions.requiredMark,\n    optionalMark: formOptions.optionalMark,\n    requiredMessage: formOptions.requiredMessage,\n    screenByWidth: formOptions.screenByWidth,\n    layoutData: formOptions.formData,\n    labelLocation: formOptions.labelLocation,\n    customizeItem: formOptions.customizeItem,\n    minColWidth: formOptions.minColWidth,\n    showColonAfterLabel: formOptions.showColonAfterLabel,\n    onEditorEnterKey: formOptions.onEditorEnterKey,\n    labelMode: formOptions.labelMode\n  };\n  var result = extend(baseOptions, {\n    isRoot: extendedLayoutManagerOptions.isRoot,\n    colCount: extendedLayoutManagerOptions.colCount,\n    alignItemLabels: extendedLayoutManagerOptions.alignItemLabels,\n    cssItemClass: extendedLayoutManagerOptions.cssItemClass,\n    colCountByScreen: extendedLayoutManagerOptions.colCountByScreen,\n    onLayoutChanged: extendedLayoutManagerOptions.onLayoutChanged,\n    width: extendedLayoutManagerOptions.width\n  });\n  return result;\n}","map":null,"metadata":{},"sourceType":"module"}