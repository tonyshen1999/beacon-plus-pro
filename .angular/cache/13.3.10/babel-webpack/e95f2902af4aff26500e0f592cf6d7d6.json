{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/ui/html_editor/modules/toolbar.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport Quill from \"devextreme-quill\";\nimport $ from \"../../../core/renderer\";\nimport BaseModule from \"./base\";\nimport Toolbar from \"../../toolbar\";\nimport \"../../select_box\";\nimport \"../../color_box/color_view\";\nimport \"../../number_box\";\nimport errors from \"../../widget/ui.errors\";\nimport WidgetCollector from \"./widget_collector\";\nimport { each } from \"../../../core/utils/iterator\";\nimport { isString, isObject, isDefined, isEmptyObject } from \"../../../core/utils/type\";\nimport { extend } from \"../../../core/utils/extend\";\nimport localizationMessage from \"../../../localization/message\";\nimport { titleize, camelize } from \"../../../core/utils/inflector\";\nimport eventsEngine from \"../../../events/core/events_engine\";\nimport { addNamespace } from \"../../../events/utils/index\";\nimport { getTableFormats, TABLE_OPERATIONS } from \"../utils/table_helper\";\nimport { getFormatHandlers, getDefaultClickHandler, ICON_MAP, applyFormat } from \"../utils/toolbar_helper\";\nvar ToolbarModule = BaseModule;\n\nif (Quill) {\n  var TOOLBAR_WRAPPER_CLASS = \"dx-htmleditor-toolbar-wrapper\";\n  var TOOLBAR_CLASS = \"dx-htmleditor-toolbar\";\n  var TOOLBAR_FORMAT_WIDGET_CLASS = \"dx-htmleditor-toolbar-format\";\n  var TOOLBAR_SEPARATOR_CLASS = \"dx-htmleditor-toolbar-separator\";\n  var TOOLBAR_MENU_SEPARATOR_CLASS = \"dx-htmleditor-toolbar-menu-separator\";\n  var ACTIVE_FORMAT_CLASS = \"dx-format-active\";\n  var ICON_CLASS = \"dx-icon\";\n  var SELECTION_CHANGE_EVENT = \"selection-change\";\n  var USER_ACTION = \"user\";\n  var SILENT_ACTION = \"silent\";\n  var FORMAT_HOTKEYS = {\n    66: \"bold\",\n    73: \"italic\",\n    85: \"underline\"\n  };\n  var KEY_CODES = {\n    b: 66,\n    i: 73,\n    u: 85\n  };\n\n  var localize = function localize(name) {\n    return localizationMessage.format(\"dxHtmlEditor-\".concat(camelize(name)));\n  };\n\n  var localizeValue = function localizeValue(value, name) {\n    if (\"header\" === name) {\n      var isHeaderValue = isDefined(value) && false !== value;\n      return isHeaderValue ? \"\".concat(localize(\"heading\"), \" \").concat(value) : localize(\"normalText\");\n    }\n\n    return localize(value) || value;\n  };\n\n  ToolbarModule = /*#__PURE__*/function (_BaseModule) {\n    _inherits(ToolbarModule, _BaseModule);\n\n    var _super = _createSuper(ToolbarModule);\n\n    function ToolbarModule(quill, options) {\n      var _this;\n\n      _classCallCheck(this, ToolbarModule);\n\n      _this = _super.call(this, quill, options);\n      _this._toolbarWidgets = new WidgetCollector();\n      _this._formatHandlers = getFormatHandlers(_assertThisInitialized(_this));\n      _this._tableFormats = getTableFormats(quill);\n\n      if (isDefined(options.items)) {\n        _this._addCallbacks();\n\n        _this._renderToolbar();\n\n        _this.quill.on(\"editor-change\", function (eventName, newValue, oldValue, eventSource) {\n          var isSilentMode = eventSource === SILENT_ACTION && isEmptyObject(_this.quill.getFormat());\n\n          if (!isSilentMode) {\n            var isSelectionChanged = eventName === SELECTION_CHANGE_EVENT;\n\n            _this._updateToolbar(isSelectionChanged);\n          }\n        });\n      }\n\n      return _this;\n    }\n\n    _createClass(ToolbarModule, [{\n      key: \"_addCallbacks\",\n      value: function _addCallbacks() {\n        this.addCleanCallback(this.clean.bind(this));\n        this.editorInstance.addContentInitializedCallback(this.updateHistoryWidgets.bind(this));\n      }\n    }, {\n      key: \"_updateToolbar\",\n      value: function _updateToolbar(isSelectionChanged) {\n        this.updateFormatWidgets(isSelectionChanged);\n        this.updateHistoryWidgets();\n        this.updateTableWidgets();\n      }\n    }, {\n      key: \"_updateFormatWidget\",\n      value: function _updateFormatWidget(name, isApplied, formats) {\n        var widget = this._toolbarWidgets.getByName(name);\n\n        if (!widget) {\n          return;\n        }\n\n        if (isApplied) {\n          this._markActiveFormatWidget(name, widget, formats);\n        } else {\n          this._resetFormatWidget(name, widget);\n\n          if (Object.prototype.hasOwnProperty.call(name)) {\n            delete formats[name];\n          }\n        }\n\n        this._toggleClearFormatting(isApplied || !isEmptyObject(formats));\n      }\n    }, {\n      key: \"_renderToolbar\",\n      value: function _renderToolbar() {\n        var _this2 = this;\n\n        var container = this.options.container || this._getContainer();\n\n        this._$toolbar = $(\"<div>\").addClass(TOOLBAR_CLASS).appendTo(container);\n        this._$toolbarContainer = $(container).addClass(TOOLBAR_WRAPPER_CLASS);\n        eventsEngine.on(this._$toolbarContainer, addNamespace(\"mousedown\", this.editorInstance.NAME), function (e) {\n          e.preventDefault();\n        });\n\n        this._subscribeFormatHotKeys();\n\n        this.toolbarInstance = this.editorInstance._createComponent(this._$toolbar, Toolbar, this.toolbarConfig);\n        this.editorInstance.on(\"optionChanged\", function (_ref) {\n          var name = _ref.name;\n\n          if (\"readOnly\" === name || \"disabled\" === name) {\n            _this2.toolbarInstance.option(\"disabled\", _this2.isInteractionDisabled);\n          }\n        });\n      }\n    }, {\n      key: \"toolbarConfig\",\n      get: function get() {\n        return {\n          dataSource: this._prepareToolbarItems(),\n          disabled: this.isInteractionDisabled,\n          menuContainer: this._$toolbarContainer,\n          multiline: this.isMultilineMode()\n        };\n      }\n    }, {\n      key: \"isInteractionDisabled\",\n      get: function get() {\n        return this.editorInstance.option(\"readOnly\") || this.editorInstance.option(\"disabled\");\n      }\n    }, {\n      key: \"isMultilineMode\",\n      value: function isMultilineMode() {\n        var _this$options$multili;\n\n        return null !== (_this$options$multili = this.options.multiline) && void 0 !== _this$options$multili ? _this$options$multili : true;\n      }\n    }, {\n      key: \"clean\",\n      value: function clean() {\n        this._toolbarWidgets.clear();\n\n        if (this._$toolbarContainer) {\n          this._$toolbarContainer.empty().removeClass(TOOLBAR_WRAPPER_CLASS);\n        }\n      }\n    }, {\n      key: \"repaint\",\n      value: function repaint() {\n        this.toolbarInstance && this.toolbarInstance.repaint();\n      }\n    }, {\n      key: \"_getContainer\",\n      value: function _getContainer() {\n        var $container = $(\"<div>\");\n        this.editorInstance.$element().prepend($container);\n        return $container;\n      }\n    }, {\n      key: \"_detectRenamedOptions\",\n      value: function _detectRenamedOptions(item) {\n        if (isObject(item)) {\n          each([{\n            newName: \"name\",\n            oldName: \"formatName\"\n          }, {\n            newName: \"acceptedValues\",\n            oldName: \"formatValues\"\n          }], function (index, optionName) {\n            if (Object.prototype.hasOwnProperty.call(item, optionName.oldName)) {\n              errors.log(\"W1016\", optionName.oldName, optionName.newName);\n            }\n          });\n        }\n      }\n    }, {\n      key: \"_subscribeFormatHotKeys\",\n      value: function _subscribeFormatHotKeys() {\n        this.quill.keyboard.addBinding({\n          which: KEY_CODES.b,\n          shortKey: true\n        }, this._handleFormatHotKey.bind(this));\n        this.quill.keyboard.addBinding({\n          which: KEY_CODES.i,\n          shortKey: true\n        }, this._handleFormatHotKey.bind(this));\n        this.quill.keyboard.addBinding({\n          which: KEY_CODES.u,\n          shortKey: true\n        }, this._handleFormatHotKey.bind(this));\n      }\n    }, {\n      key: \"_handleFormatHotKey\",\n      value: function _handleFormatHotKey(range, context, _ref2) {\n        var which = _ref2.which;\n        var formatName = FORMAT_HOTKEYS[which];\n\n        this._updateButtonState(formatName);\n      }\n    }, {\n      key: \"_updateButtonState\",\n      value: function _updateButtonState(formatName) {\n        var formatWidget = this._toolbarWidgets.getByName(formatName);\n\n        var currentFormat = this.quill.getFormat();\n        var formatValue = currentFormat[formatName];\n\n        if (formatValue) {\n          this._markActiveFormatWidget(formatName, formatWidget, currentFormat);\n        } else {\n          this._resetFormatWidget(formatName, formatWidget);\n        }\n      }\n    }, {\n      key: \"_prepareToolbarItems\",\n      value: function _prepareToolbarItems() {\n        var _this3 = this;\n\n        var resultItems = [];\n        each(this.options.items, function (index, item) {\n          var newItem;\n\n          _this3._detectRenamedOptions(item);\n\n          if (isObject(item)) {\n            newItem = _this3._handleObjectItem(item);\n          } else if (isString(item)) {\n            var buttonItemConfig = _this3._prepareButtonItemConfig(item);\n\n            newItem = _this3._getToolbarItem(buttonItemConfig);\n          }\n\n          if (newItem) {\n            resultItems.push(newItem);\n          }\n        });\n        return resultItems;\n      }\n    }, {\n      key: \"_handleObjectItem\",\n      value: function _handleObjectItem(item) {\n        if (item.name && item.acceptedValues && this._isAcceptableItem(item.widget, \"dxSelectBox\")) {\n          var selectItemConfig = this._prepareSelectItemConfig(item);\n\n          return this._getToolbarItem(selectItemConfig);\n        } else if (item.name && this._isAcceptableItem(item.widget, \"dxButton\")) {\n          var defaultButtonItemConfig = this._prepareButtonItemConfig(item.name);\n\n          var buttonItemConfig = extend(true, defaultButtonItemConfig, item);\n          return this._getToolbarItem(buttonItemConfig);\n        } else {\n          return this._getToolbarItem(item);\n        }\n      }\n    }, {\n      key: \"_isAcceptableItem\",\n      value: function _isAcceptableItem(widget, acceptableWidgetName) {\n        return !widget || widget === acceptableWidgetName;\n      }\n    }, {\n      key: \"_prepareButtonItemConfig\",\n      value: function _prepareButtonItemConfig(name) {\n        var _ICON_MAP$name;\n\n        var iconName = null !== (_ICON_MAP$name = ICON_MAP[name]) && void 0 !== _ICON_MAP$name ? _ICON_MAP$name : name;\n        var buttonText = titleize(name);\n        return {\n          widget: \"dxButton\",\n          name: name,\n          options: {\n            hint: localize(buttonText),\n            text: localize(buttonText),\n            icon: iconName.toLowerCase(),\n            onClick: this._formatHandlers[name] || getDefaultClickHandler(this, name),\n            stylingMode: \"text\"\n          },\n          showText: \"inMenu\"\n        };\n      }\n    }, {\n      key: \"_prepareSelectItemConfig\",\n      value: function _prepareSelectItemConfig(item) {\n        var _this4 = this;\n\n        var name = item.name,\n            acceptedValues = item.acceptedValues;\n        return extend(true, {\n          widget: \"dxSelectBox\",\n          name: name,\n          options: {\n            stylingMode: \"filled\",\n            dataSource: acceptedValues,\n            displayExpr: function displayExpr(value) {\n              return localizeValue(value, name);\n            },\n            placeholder: localize(name),\n            onValueChanged: function onValueChanged(e) {\n              if (!_this4._isReset) {\n                _this4._hideAdaptiveMenu();\n\n                applyFormat(_this4, [name, e.value, USER_ACTION], e.event);\n\n                _this4._setValueSilent(e.component, e.value);\n              }\n            }\n          }\n        }, item);\n      }\n    }, {\n      key: \"_hideAdaptiveMenu\",\n      value: function _hideAdaptiveMenu() {\n        if (this.toolbarInstance.option(\"overflowMenuVisible\")) {\n          this.toolbarInstance.option(\"overflowMenuVisible\", false);\n        }\n      }\n    }, {\n      key: \"_getToolbarItem\",\n      value: function _getToolbarItem(item) {\n        var _this5 = this;\n\n        var baseItem = {\n          options: {\n            onInitialized: function onInitialized(e) {\n              if (item.name) {\n                e.component.$element().addClass(TOOLBAR_FORMAT_WIDGET_CLASS);\n                e.component.$element().toggleClass(\"dx-\".concat(item.name.toLowerCase(), \"-format\"), !!item.name);\n\n                _this5._toolbarWidgets.add(item.name, e.component);\n              }\n            }\n          }\n        };\n        var multilineItem = this.isMultilineMode() ? {\n          location: \"before\",\n          locateInMenu: \"never\"\n        } : {};\n        return extend(true, {\n          location: \"before\",\n          locateInMenu: \"auto\"\n        }, this._getDefaultConfig(item.name), item, baseItem, multilineItem);\n      }\n    }, {\n      key: \"_getDefaultItemsConfig\",\n      value: function _getDefaultItemsConfig() {\n        return {\n          clear: {\n            options: {\n              disabled: true\n            }\n          },\n          undo: {\n            options: {\n              disabled: true\n            }\n          },\n          redo: {\n            options: {\n              disabled: true\n            }\n          },\n          insertRowAbove: {\n            options: {\n              disabled: true\n            }\n          },\n          insertRowBelow: {\n            options: {\n              disabled: true\n            }\n          },\n          insertHeaderRow: {\n            options: {\n              disabled: true\n            }\n          },\n          insertColumnLeft: {\n            options: {\n              disabled: true\n            }\n          },\n          insertColumnRight: {\n            options: {\n              disabled: true\n            }\n          },\n          deleteRow: {\n            options: {\n              disabled: true\n            }\n          },\n          deleteColumn: {\n            options: {\n              disabled: true\n            }\n          },\n          deleteTable: {\n            options: {\n              disabled: true\n            }\n          },\n          cellProperties: {\n            options: {\n              disabled: true\n            }\n          },\n          tableProperties: {\n            options: {\n              disabled: true\n            }\n          },\n          separator: {\n            template: function template(data, index, element) {\n              $(element).addClass(TOOLBAR_SEPARATOR_CLASS);\n            },\n            menuItemTemplate: function menuItemTemplate(data, index, element) {\n              $(element).addClass(TOOLBAR_MENU_SEPARATOR_CLASS);\n            }\n          }\n        };\n      }\n    }, {\n      key: \"_getDefaultConfig\",\n      value: function _getDefaultConfig(name) {\n        return this._getDefaultItemsConfig()[name];\n      }\n    }, {\n      key: \"updateHistoryWidgets\",\n      value: function updateHistoryWidgets() {\n        var historyModule = this.quill.history;\n\n        if (!historyModule) {\n          return;\n        }\n\n        var _historyModule$stack = historyModule.stack,\n            undoOps = _historyModule$stack.undo,\n            redoOps = _historyModule$stack.redo;\n\n        this._updateManipulationWidget(this._toolbarWidgets.getByName(\"undo\"), Boolean(undoOps.length));\n\n        this._updateManipulationWidget(this._toolbarWidgets.getByName(\"redo\"), Boolean(redoOps.length));\n      }\n    }, {\n      key: \"updateTableWidgets\",\n      value: function updateTableWidgets() {\n        var _this6 = this;\n\n        var table = this.quill.getModule(\"table\");\n\n        if (!table) {\n          return;\n        }\n\n        var selection = this.quill.getSelection();\n        var formats = selection && this.quill.getFormat(selection) || {};\n\n        var isTableOperationsEnabled = this._tableFormats.some(function (format) {\n          return Boolean(formats[format]);\n        });\n\n        TABLE_OPERATIONS.forEach(function (operationName) {\n          var isInsertTable = \"insertTable\" === operationName;\n\n          var widget = _this6._toolbarWidgets.getByName(operationName);\n\n          _this6._updateManipulationWidget(widget, isInsertTable ? !isTableOperationsEnabled : isTableOperationsEnabled);\n        });\n      }\n    }, {\n      key: \"_updateManipulationWidget\",\n      value: function _updateManipulationWidget(widget, isOperationEnabled) {\n        if (!widget) {\n          return;\n        }\n\n        widget.option(\"disabled\", !isOperationEnabled);\n      }\n    }, {\n      key: \"updateFormatWidgets\",\n      value: function updateFormatWidgets(isResetRequired) {\n        var selection = this.quill.getSelection();\n\n        if (!selection) {\n          return;\n        }\n\n        var formats = this.quill.getFormat(selection);\n        var hasFormats = !isEmptyObject(formats);\n\n        if (!hasFormats || isResetRequired) {\n          this._resetFormatWidgets();\n        }\n\n        for (var formatName in formats) {\n          var widgetName = this._getFormatWidgetName(formatName, formats);\n\n          var formatWidget = this._toolbarWidgets.getByName(widgetName) || this._toolbarWidgets.getByName(formatName);\n\n          if (!formatWidget) {\n            continue;\n          }\n\n          this._markActiveFormatWidget(formatName, formatWidget, formats);\n        }\n\n        this._toggleClearFormatting(hasFormats || selection.length > 1);\n      }\n    }, {\n      key: \"_markActiveFormatWidget\",\n      value: function _markActiveFormatWidget(name, widget, formats) {\n        if (this._isColorFormat(name)) {\n          this._updateColorWidget(name, formats[name]);\n        }\n\n        if (\"value\" in widget.option()) {\n          this._setValueSilent(widget, formats[name]);\n        } else {\n          widget.$element().addClass(ACTIVE_FORMAT_CLASS);\n        }\n      }\n    }, {\n      key: \"_toggleClearFormatting\",\n      value: function _toggleClearFormatting(hasFormats) {\n        var clearWidget = this._toolbarWidgets.getByName(\"clear\");\n\n        if (clearWidget) {\n          clearWidget.option(\"disabled\", !hasFormats);\n        }\n      }\n    }, {\n      key: \"_isColorFormat\",\n      value: function _isColorFormat(name) {\n        return \"color\" === name || \"background\" === name;\n      }\n    }, {\n      key: \"_updateColorWidget\",\n      value: function _updateColorWidget(name, color) {\n        var formatWidget = this._toolbarWidgets.getByName(name);\n\n        if (!formatWidget) {\n          return;\n        }\n\n        formatWidget.$element().find(\".\".concat(ICON_CLASS)).css(\"borderBottomColor\", color || \"transparent\");\n      }\n    }, {\n      key: \"_getFormatWidgetName\",\n      value: function _getFormatWidgetName(name, formats) {\n        var widgetName;\n\n        switch (name) {\n          case \"align\":\n            widgetName = name + titleize(formats[name]);\n            break;\n\n          case \"list\":\n            widgetName = formats[name] + titleize(name);\n            break;\n\n          case \"code-block\":\n            widgetName = \"codeBlock\";\n            break;\n\n          case \"script\":\n            widgetName = formats[name] + name;\n            break;\n\n          case \"imageSrc\":\n            widgetName = \"image\";\n            break;\n\n          default:\n            widgetName = name;\n        }\n\n        return widgetName;\n      }\n    }, {\n      key: \"_setValueSilent\",\n      value: function _setValueSilent(widget, value) {\n        this._isReset = true;\n        widget.option(\"value\", value);\n        this._isReset = false;\n      }\n    }, {\n      key: \"_resetFormatWidgets\",\n      value: function _resetFormatWidgets() {\n        var _this7 = this;\n\n        this._toolbarWidgets.each(function (name, widget) {\n          _this7._resetFormatWidget(name, widget);\n        });\n      }\n    }, {\n      key: \"_resetFormatWidget\",\n      value: function _resetFormatWidget(name, widget) {\n        widget.$element().removeClass(ACTIVE_FORMAT_CLASS);\n\n        if (this._isColorFormat(name)) {\n          this._updateColorWidget(name);\n        }\n\n        if (\"clear\" === name) {\n          widget.option(\"disabled\", true);\n        }\n\n        if (\"dxSelectBox\" === widget.NAME) {\n          this._setValueSilent(widget, null);\n        }\n      }\n    }, {\n      key: \"addClickHandler\",\n      value: function addClickHandler(name, handler) {\n        this._formatHandlers[name] = handler;\n\n        var formatWidget = this._toolbarWidgets.getByName(name);\n\n        if (formatWidget && \"dxButton\" === formatWidget.NAME) {\n          formatWidget.option(\"onClick\", handler);\n        }\n      }\n    }]);\n\n    return ToolbarModule;\n  }(BaseModule);\n}\n\nexport default ToolbarModule;","map":null,"metadata":{},"sourceType":"module"}