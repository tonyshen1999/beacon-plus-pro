{"ast":null,"code":"/**\r\n * DevExtreme (esm/core/utils/date_serialization.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport config from \"../config\";\nimport { getFormatter as getLDMLFormatter } from \"../../localization/ldml/date.formatter\";\nimport defaultDateNames from \"../../localization/default_date_names\";\nimport { isString, isDate, isNumeric as isNumber } from \"./type\";\nvar NUMBER_SERIALIZATION_FORMAT = \"number\";\nvar DATE_SERIALIZATION_FORMAT = \"yyyy/MM/dd\";\nvar DATETIME_SERIALIZATION_FORMAT = \"yyyy/MM/dd HH:mm:ss\";\nvar ISO8601_PATTERN = /^(\\d{4,})(-)?(\\d{2})(-)?(\\d{2})(?:T(\\d{2})(:)?(\\d{2})?(:)?(\\d{2}(?:\\.(\\d{1,3})\\d*)?)?)?(Z|([+-])(\\d{2})(:)?(\\d{2})?)?$/;\nvar ISO8601_TIME_PATTERN = /^(\\d{2}):(\\d{2})(:(\\d{2}))?$/;\nvar ISO8601_PATTERN_PARTS = [\"\", \"yyyy\", \"\", \"MM\", \"\", \"dd\", \"THH\", \"\", \"mm\", \"\", \"ss\", \".SSS\"];\nvar DATE_SERIALIZATION_PATTERN = /^(\\d{4})\\/(\\d{2})\\/(\\d{2})$/;\nvar MILLISECOND_LENGHT = 3;\n\nvar dateParser = function dateParser(text, skipISO8601Parsing) {\n  var result;\n\n  if (isString(text) && !skipISO8601Parsing) {\n    result = parseISO8601String(text);\n  }\n\n  return result || parseDate(text);\n};\n\nfunction getTimePart(part) {\n  return +part || 0;\n}\n\nfunction parseDate(text) {\n  var isDefaultSerializationFormat = getDateSerializationFormat(text) === DATE_SERIALIZATION_FORMAT;\n  var parsedValue = !isDate(text) && Date.parse(text);\n\n  if (!parsedValue && isDefaultSerializationFormat) {\n    var parts = text.match(DATE_SERIALIZATION_PATTERN);\n\n    if (parts) {\n      var newDate = new Date(getTimePart(parts[1]), getTimePart(parts[2]), getTimePart(parts[3]));\n      newDate.setFullYear(getTimePart(parts[1]));\n      newDate.setMonth(getTimePart(parts[2]) - 1);\n      newDate.setDate(getTimePart(parts[3]));\n      return newDate;\n    }\n  }\n\n  return isNumber(parsedValue) ? new Date(parsedValue) : text;\n}\n\nfunction parseISO8601String(text) {\n  var parts = text.match(ISO8601_PATTERN);\n\n  if (!parts) {\n    parts = text.match(ISO8601_TIME_PATTERN);\n\n    if (parts) {\n      return new Date(0, 0, 0, getTimePart(parts[1]), getTimePart(parts[2]), getTimePart(parts[4]));\n    }\n\n    return;\n  }\n\n  var year = getTimePart(parts[1]);\n  var month = --parts[3];\n  var day = parts[5];\n  var timeZoneHour = 0;\n  var timeZoneMinute = 0;\n\n  var correctYear = function correctYear(d) {\n    year < 100 && d.setFullYear(year);\n    return d;\n  };\n\n  timeZoneHour = getTimePart(parts[14]);\n  timeZoneMinute = getTimePart(parts[16]);\n\n  if (\"-\" === parts[13]) {\n    timeZoneHour = -timeZoneHour;\n    timeZoneMinute = -timeZoneMinute;\n  }\n\n  var hour = getTimePart(parts[6]) - timeZoneHour;\n  var minute = getTimePart(parts[8]) - timeZoneMinute;\n  var second = getTimePart(parts[10]);\n\n  var millisecond = function (part) {\n    part = part || \"\";\n    return getTimePart(part) * Math.pow(10, MILLISECOND_LENGHT - part.length);\n  }(parts[11]);\n\n  if (parts[12]) {\n    return correctYear(new Date(Date.UTC(year, month, day, hour, minute, second, millisecond)));\n  }\n\n  return correctYear(new Date(year, month, day, hour, minute, second, millisecond));\n}\n\nvar getIso8601Format = function getIso8601Format(text, useUtc) {\n  var parts = text.match(ISO8601_PATTERN);\n  var result = \"\";\n\n  if (!parts) {\n    parts = text.match(ISO8601_TIME_PATTERN);\n\n    if (parts) {\n      return parts[3] ? \"HH:mm:ss\" : \"HH:mm\";\n    }\n\n    return;\n  }\n\n  for (var i = 1; i < ISO8601_PATTERN_PARTS.length; i++) {\n    if (parts[i]) {\n      result += ISO8601_PATTERN_PARTS[i] || parts[i];\n    }\n  }\n\n  if (\"Z\" === parts[12]) {\n    result += \"'Z'\";\n  }\n\n  if (parts[14]) {\n    if (parts[15]) {\n      result += \"xxx\";\n    } else if (parts[16]) {\n      result += \"xx\";\n    } else {\n      result += \"x\";\n    }\n  }\n\n  return result;\n};\n\nvar deserializeDate = function deserializeDate(value) {\n  if (\"number\" === typeof value) {\n    return new Date(value);\n  }\n\n  return dateParser(value, !config().forceIsoDateParsing);\n};\n\nvar serializeDate = function serializeDate(value, serializationFormat) {\n  if (!serializationFormat) {\n    return value;\n  }\n\n  if (!isDate(value)) {\n    return null;\n  }\n\n  if (serializationFormat === NUMBER_SERIALIZATION_FORMAT) {\n    return value && value.valueOf ? value.valueOf() : null;\n  }\n\n  return getLDMLFormatter(serializationFormat, defaultDateNames)(value);\n};\n\nvar getDateSerializationFormat = function getDateSerializationFormat(value) {\n  if (\"number\" === typeof value) {\n    return NUMBER_SERIALIZATION_FORMAT;\n  } else if (isString(value)) {\n    var format;\n\n    if (config().forceIsoDateParsing) {\n      format = getIso8601Format(value);\n    }\n\n    if (format) {\n      return format;\n    } else if (value.indexOf(\":\") >= 0) {\n      return DATETIME_SERIALIZATION_FORMAT;\n    } else {\n      return DATE_SERIALIZATION_FORMAT;\n    }\n  } else if (value) {\n    return null;\n  }\n};\n\nexport default {\n  dateParser: dateParser,\n  deserializeDate: deserializeDate,\n  serializeDate: serializeDate,\n  getDateSerializationFormat: getDateSerializationFormat\n};","map":null,"metadata":{},"sourceType":"module"}