{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/filter_builder/utils.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { Deferred, when } from \"../../core/utils/deferred\";\nimport { errors as dataErrors } from \"../../data/errors\";\nimport { isDefined, isFunction } from \"../../core/utils/type\";\nimport { compileGetter } from \"../../core/utils/data\";\nimport errors from \"../widget/ui.errors\";\nimport filterUtils from \"../shared/filtering\";\nimport formatHelper from \"../../format_helper\";\nimport { extend } from \"../../core/utils/extend\";\nimport { captionize } from \"../../core/utils/inflector\";\nimport { getConfig } from \"./between\";\nimport messageLocalization from \"../../localization/message\";\nimport { DataSource } from \"../../data/data_source/data_source\";\nimport filterOperationsDictionary from \"./ui.filter_operations_dictionary\";\nvar DEFAULT_DATA_TYPE = \"string\";\nvar EMPTY_MENU_ICON = \"icon-none\";\nvar AND_GROUP_OPERATION = \"and\";\nvar EQUAL_OPERATION = \"=\";\nvar NOT_EQUAL_OPERATION = \"<>\";\nvar DATATYPE_OPERATIONS = {\n  number: [\"=\", \"<>\", \"<\", \">\", \"<=\", \">=\", \"isblank\", \"isnotblank\"],\n  string: [\"contains\", \"notcontains\", \"startswith\", \"endswith\", \"=\", \"<>\", \"isblank\", \"isnotblank\"],\n  date: [\"=\", \"<>\", \"<\", \">\", \"<=\", \">=\", \"isblank\", \"isnotblank\"],\n  datetime: [\"=\", \"<>\", \"<\", \">\", \"<=\", \">=\", \"isblank\", \"isnotblank\"],\n  boolean: [\"=\", \"<>\", \"isblank\", \"isnotblank\"],\n  object: [\"isblank\", \"isnotblank\"]\n};\nvar DEFAULT_FORMAT = {\n  date: \"shortDate\",\n  datetime: \"shortDateShortTime\"\n};\nvar LOOKUP_OPERATIONS = [\"=\", \"<>\", \"isblank\", \"isnotblank\"];\nvar AVAILABLE_FIELD_PROPERTIES = [\"caption\", \"customizeText\", \"dataField\", \"dataType\", \"editorTemplate\", \"falseText\", \"editorOptions\", \"filterOperations\", \"format\", \"lookup\", \"trueText\", \"calculateFilterExpression\", \"name\"];\nvar FILTER_BUILDER_CLASS = \"dx-filterbuilder\";\nvar FILTER_BUILDER_ITEM_TEXT_CLASS = FILTER_BUILDER_CLASS + \"-text\";\nvar FILTER_BUILDER_ITEM_TEXT_PART_CLASS = FILTER_BUILDER_ITEM_TEXT_CLASS + \"-part\";\nvar FILTER_BUILDER_ITEM_TEXT_SEPARATOR_CLASS = FILTER_BUILDER_ITEM_TEXT_CLASS + \"-separator\";\nvar FILTER_BUILDER_ITEM_TEXT_SEPARATOR_EMPTY_CLASS = FILTER_BUILDER_ITEM_TEXT_SEPARATOR_CLASS + \"-empty\";\n\nfunction getFormattedValueText(field, value) {\n  var fieldFormat = field.format || DEFAULT_FORMAT[field.dataType];\n  return formatHelper.format(value, fieldFormat);\n}\n\nfunction isNegationGroup(group) {\n  return group && group.length > 1 && \"!\" === group[0] && !isCondition(group);\n}\n\nexport function getGroupCriteria(group) {\n  return isNegationGroup(group) ? group[1] : group;\n}\n\nfunction setGroupCriteria(group, criteria) {\n  if (isNegationGroup(group)) {\n    group[1] = criteria;\n  } else {\n    group = criteria;\n  }\n\n  return group;\n}\n\nfunction convertGroupToNewStructure(group, value) {\n  if (function (value) {\n    return -1 !== value.indexOf(\"!\");\n  }(value)) {\n    if (!isNegationGroup(group)) {\n      !function (group) {\n        var criteria = group.slice(0);\n        group.length = 0;\n        group.push(\"!\", criteria);\n      }(group);\n    }\n  } else if (isNegationGroup(group)) {\n    !function (group) {\n      var criteria = getGroupCriteria(group);\n      group.length = 0;\n      [].push.apply(group, criteria);\n    }(group);\n  }\n}\n\nexport function setGroupValue(group, value) {\n  convertGroupToNewStructure(group, value);\n  var criteria = getGroupCriteria(group);\n  var i;\n\n  value = function (value) {\n    return -1 === value.indexOf(\"!\") ? value : value.substring(1);\n  }(value);\n\n  !function (criteria, value) {\n    for (i = 0; i < criteria.length; i++) {\n      if (!Array.isArray(criteria[i])) {\n        criteria[i] = value;\n      }\n    }\n  }(criteria, value);\n  return group;\n}\nexport function getGroupMenuItem(group, availableGroups) {\n  var groupValue = getGroupValue(group);\n  return availableGroups.filter(function (item) {\n    return item.value === groupValue;\n  })[0];\n}\n\nfunction getCriteriaOperation(criteria) {\n  if (isCondition(criteria)) {\n    return AND_GROUP_OPERATION;\n  }\n\n  var value = \"\";\n\n  for (var i = 0; i < criteria.length; i++) {\n    var item = criteria[i];\n\n    if (!Array.isArray(item)) {\n      if (value && value !== item) {\n        throw new dataErrors.Error(\"E4019\");\n      }\n\n      if (\"!\" !== item) {\n        value = item;\n      }\n    }\n  }\n\n  return value;\n}\n\nexport function getGroupValue(group) {\n  var criteria = getGroupCriteria(group);\n  var value = getCriteriaOperation(criteria);\n\n  if (!value) {\n    value = AND_GROUP_OPERATION;\n  }\n\n  if (criteria !== group) {\n    value = \"!\" + value;\n  }\n\n  return value;\n}\n\nfunction getDefaultFilterOperations(field) {\n  return field.lookup && LOOKUP_OPERATIONS || DATATYPE_OPERATIONS[field.dataType || DEFAULT_DATA_TYPE];\n}\n\nfunction containItems(entity) {\n  return Array.isArray(entity) && entity.length;\n}\n\nexport function getFilterOperations(field) {\n  var result = containItems(field.filterOperations) ? field.filterOperations : getDefaultFilterOperations(field);\n  return extend([], result);\n}\nexport function getCaptionByOperation(operation, filterOperationDescriptions) {\n  var operationName = filterOperationsDictionary.getNameByFilterOperation(operation);\n  return filterOperationDescriptions && filterOperationDescriptions[operationName] ? filterOperationDescriptions[operationName] : operationName;\n}\nexport function getOperationFromAvailable(operation, availableOperations) {\n  for (var i = 0; i < availableOperations.length; i++) {\n    if (availableOperations[i].value === operation) {\n      return availableOperations[i];\n    }\n  }\n\n  throw new errors.Error(\"E1048\", operation);\n}\nexport function getCustomOperation(customOperations, name) {\n  var filteredOperations = customOperations.filter(function (item) {\n    return item.name === name;\n  });\n  return filteredOperations.length ? filteredOperations[0] : null;\n}\nexport function getAvailableOperations(field, filterOperationDescriptions, customOperations) {\n  var filterOperations = getFilterOperations(field);\n  var isLookupField = !!field.lookup;\n  customOperations.forEach(function (customOperation) {\n    if (!field.filterOperations && -1 === filterOperations.indexOf(customOperation.name)) {\n      var dataTypes = customOperation && customOperation.dataTypes;\n      var isOperationForbidden = isLookupField ? !!customOperation.notForLookup : false;\n\n      if (!isOperationForbidden && dataTypes && dataTypes.indexOf(field.dataType || DEFAULT_DATA_TYPE) >= 0) {\n        filterOperations.push(customOperation.name);\n      }\n    }\n  });\n  return filterOperations.map(function (operation) {\n    var customOperation = getCustomOperation(customOperations, operation);\n\n    if (customOperation) {\n      return {\n        icon: customOperation.icon || EMPTY_MENU_ICON,\n        text: customOperation.caption || captionize(customOperation.name),\n        value: customOperation.name,\n        isCustom: true\n      };\n    } else {\n      return {\n        icon: filterOperationsDictionary.getIconByFilterOperation(operation) || EMPTY_MENU_ICON,\n        text: getCaptionByOperation(operation, filterOperationDescriptions),\n        value: operation\n      };\n    }\n  });\n}\nexport function getDefaultOperation(field) {\n  return field.defaultFilterOperation || getFilterOperations(field)[0];\n}\nexport function createCondition(field, customOperations) {\n  var condition = [field.dataField, \"\", \"\"];\n  var filterOperation = getDefaultOperation(field);\n  updateConditionByOperation(condition, filterOperation, customOperations);\n  return condition;\n}\nexport function removeItem(group, item) {\n  var criteria = getGroupCriteria(group);\n  var index = criteria.indexOf(item);\n  criteria.splice(index, 1);\n\n  if (1 !== criteria.length) {\n    criteria.splice(index, 1);\n  }\n\n  return group;\n}\nexport function createEmptyGroup(value) {\n  var isNegation = isNegationGroupOperation(value);\n  var groupOperation = isNegation ? getGroupOperationFromNegationOperation(value) : value;\n  return isNegation ? [\"!\", [groupOperation]] : [groupOperation];\n}\nexport function isEmptyGroup(group) {\n  var criteria = getGroupCriteria(group);\n\n  if (isCondition(criteria)) {\n    return false;\n  }\n\n  var hasConditions = criteria.some(function (item) {\n    return isCondition(item);\n  });\n  return !hasConditions;\n}\nexport function addItem(item, group) {\n  var criteria = getGroupCriteria(group);\n  var groupValue = getGroupValue(criteria);\n  1 === criteria.length ? criteria.unshift(item) : criteria.push(item, groupValue);\n  return group;\n}\nexport function getField(dataField, fields) {\n  for (var i = 0; i < fields.length; i++) {\n    if (fields[i].name === dataField) {\n      return fields[i];\n    }\n\n    if (fields[i].dataField.toLowerCase() === dataField.toLowerCase()) {\n      return fields[i];\n    }\n  }\n\n  var extendedFields = getItems(fields, true).filter(function (item) {\n    return item.dataField.toLowerCase() === dataField.toLowerCase();\n  });\n\n  if (extendedFields.length > 0) {\n    return extendedFields[0];\n  }\n\n  throw new errors.Error(\"E1047\", dataField);\n}\nexport function isGroup(criteria) {\n  if (!Array.isArray(criteria)) {\n    return false;\n  }\n\n  return criteria.length < 2 || Array.isArray(criteria[0]) || Array.isArray(criteria[1]);\n}\nexport function isCondition(criteria) {\n  if (!Array.isArray(criteria)) {\n    return false;\n  }\n\n  return criteria.length > 1 && !Array.isArray(criteria[0]) && !Array.isArray(criteria[1]);\n}\n\nfunction convertToInnerGroup(group, customOperations, defaultGroupOperation) {\n  defaultGroupOperation = defaultGroupOperation || AND_GROUP_OPERATION;\n  var groupOperation = getCriteriaOperation(group).toLowerCase() || defaultGroupOperation;\n  var innerGroup = [];\n\n  for (var i = 0; i < group.length; i++) {\n    if (isGroup(group[i])) {\n      innerGroup.push(convertToInnerStructure(group[i], customOperations, defaultGroupOperation));\n      innerGroup = appendGroupOperationToGroup(innerGroup, groupOperation);\n    } else if (isCondition(group[i])) {\n      innerGroup.push(convertToInnerCondition(group[i], customOperations));\n      innerGroup = appendGroupOperationToGroup(innerGroup, groupOperation);\n    }\n  }\n\n  if (0 === innerGroup.length) {\n    innerGroup = appendGroupOperationToGroup(innerGroup, groupOperation);\n  }\n\n  return innerGroup;\n}\n\nfunction conditionHasCustomOperation(condition, customOperations) {\n  var customOperation = getCustomOperation(customOperations, condition[1]);\n  return customOperation && customOperation.name === condition[1];\n}\n\nfunction convertToInnerCondition(condition, customOperations) {\n  if (conditionHasCustomOperation(condition, customOperations)) {\n    return condition;\n  }\n\n  if (condition.length < 3) {\n    condition[2] = condition[1];\n    condition[1] = EQUAL_OPERATION;\n  }\n\n  return condition;\n}\n\nfunction isNegationGroupOperation(operation) {\n  return -1 !== operation.indexOf(\"not\");\n}\n\nfunction getGroupOperationFromNegationOperation(operation) {\n  return operation.substring(3).toLowerCase();\n}\n\nfunction appendGroupOperationToCriteria(criteria, groupOperation) {\n  var isNegation = isNegationGroupOperation(groupOperation);\n  groupOperation = isNegation ? getGroupOperationFromNegationOperation(groupOperation) : groupOperation;\n  return isNegation ? [\"!\", criteria, groupOperation] : [criteria, groupOperation];\n}\n\nfunction appendGroupOperationToGroup(group, groupOperation) {\n  var isNegation = isNegationGroupOperation(groupOperation);\n  groupOperation = isNegation ? getGroupOperationFromNegationOperation(groupOperation) : groupOperation;\n  group.push(groupOperation);\n  var result = group;\n\n  if (isNegation) {\n    result = [\"!\", result];\n  }\n\n  return result;\n}\n\nexport function convertToInnerStructure(value, customOperations, defaultGroupOperation) {\n  defaultGroupOperation = defaultGroupOperation || AND_GROUP_OPERATION;\n\n  if (!value) {\n    return createEmptyGroup(defaultGroupOperation);\n  }\n\n  value = extend(true, [], value);\n\n  if (isCondition(value)) {\n    return appendGroupOperationToCriteria(convertToInnerCondition(value, customOperations), defaultGroupOperation);\n  }\n\n  if (isNegationGroup(value)) {\n    return [\"!\", isCondition(value[1]) ? appendGroupOperationToCriteria(convertToInnerCondition(value[1], customOperations), defaultGroupOperation) : isNegationGroup(value[1]) ? appendGroupOperationToCriteria(convertToInnerStructure(value[1], customOperations), defaultGroupOperation) : convertToInnerGroup(value[1], customOperations, defaultGroupOperation)];\n  }\n\n  return convertToInnerGroup(value, customOperations, defaultGroupOperation);\n}\nexport function getNormalizedFields(fields) {\n  return fields.reduce(function (result, field) {\n    if (isDefined(field.dataField)) {\n      var normalizedField = {};\n\n      for (var key in field) {\n        if (field[key] && AVAILABLE_FIELD_PROPERTIES.indexOf(key) > -1) {\n          normalizedField[key] = field[key];\n        }\n      }\n\n      normalizedField.defaultCalculateFilterExpression = filterUtils.defaultCalculateFilterExpression;\n\n      if (!isDefined(normalizedField.dataType)) {\n        normalizedField.dataType = DEFAULT_DATA_TYPE;\n      }\n\n      if (!isDefined(normalizedField.trueText)) {\n        normalizedField.trueText = messageLocalization.format(\"dxDataGrid-trueText\");\n      }\n\n      if (!isDefined(normalizedField.falseText)) {\n        normalizedField.falseText = messageLocalization.format(\"dxDataGrid-falseText\");\n      }\n\n      result.push(normalizedField);\n    }\n\n    return result;\n  }, []);\n}\n\nfunction getConditionFilterExpression(condition, fields, customOperations, target) {\n  var field = getField(condition[0], fields);\n  var filterExpression = convertToInnerCondition(condition, customOperations);\n  var customOperation = customOperations.length && getCustomOperation(customOperations, filterExpression[1]);\n\n  if (customOperation && customOperation.calculateFilterExpression) {\n    return customOperation.calculateFilterExpression.apply(customOperation, [filterExpression[2], field, fields]);\n  } else if (field.createFilterExpression) {\n    return field.createFilterExpression.apply(field, [filterExpression[2], filterExpression[1], target]);\n  } else if (field.calculateFilterExpression) {\n    return field.calculateFilterExpression.apply(field, [filterExpression[2], filterExpression[1], target]);\n  } else {\n    return field.defaultCalculateFilterExpression.apply(field, [filterExpression[2], filterExpression[1], target]);\n  }\n}\n\nexport function getFilterExpression(value, fields, customOperations, target) {\n  if (!isDefined(value)) {\n    return null;\n  }\n\n  if (isNegationGroup(value)) {\n    var filterExpression = getFilterExpression(value[1], fields, customOperations, target);\n    return [\"!\", filterExpression];\n  }\n\n  var criteria = getGroupCriteria(value);\n\n  if (isCondition(criteria)) {\n    return getConditionFilterExpression(criteria, fields, customOperations, target) || null;\n  } else {\n    var result = [];\n\n    var _filterExpression;\n\n    var groupValue = getGroupValue(criteria);\n\n    for (var i = 0; i < criteria.length; i++) {\n      if (isGroup(criteria[i])) {\n        _filterExpression = getFilterExpression(criteria[i], fields, customOperations, target);\n\n        if (_filterExpression) {\n          i && result.push(groupValue);\n          result.push(_filterExpression);\n        }\n      } else if (isCondition(criteria[i])) {\n        _filterExpression = getConditionFilterExpression(criteria[i], fields, customOperations, target);\n\n        if (_filterExpression) {\n          result.length && result.push(groupValue);\n          result.push(_filterExpression);\n        }\n      }\n    }\n\n    if (1 === result.length) {\n      result = result[0];\n    }\n\n    return result.length ? result : null;\n  }\n}\nexport function getNormalizedFilter(group) {\n  var criteria = getGroupCriteria(group);\n  var i;\n\n  if (0 === criteria.length) {\n    return null;\n  }\n\n  var itemsForRemove = [];\n\n  for (i = 0; i < criteria.length; i++) {\n    if (isGroup(criteria[i])) {\n      var normalizedGroupValue = getNormalizedFilter(criteria[i]);\n\n      if (normalizedGroupValue) {\n        criteria[i] = normalizedGroupValue;\n      } else {\n        itemsForRemove.push(criteria[i]);\n      }\n    } else if (isCondition(criteria[i])) {\n      if (!isValidCondition(criteria[i])) {\n        itemsForRemove.push(criteria[i]);\n      }\n    }\n  }\n\n  for (i = 0; i < itemsForRemove.length; i++) {\n    removeItem(criteria, itemsForRemove[i]);\n  }\n\n  if (1 === criteria.length) {\n    return null;\n  }\n\n  criteria.splice(criteria.length - 1, 1);\n\n  if (1 === criteria.length) {\n    group = setGroupCriteria(group, criteria[0]);\n  }\n\n  if (0 === group.length) {\n    return null;\n  }\n\n  return group;\n}\nexport function getCurrentLookupValueText(field, value, handler) {\n  if (\"\" === value) {\n    handler(\"\");\n    return;\n  }\n\n  var lookup = field.lookup;\n\n  if (lookup.items) {\n    handler(lookup.calculateCellValue(value) || \"\");\n  } else {\n    var lookupDataSource = isFunction(lookup.dataSource) ? lookup.dataSource({}) : lookup.dataSource;\n    var dataSource = new DataSource(lookupDataSource);\n    dataSource.loadSingle(lookup.valueExpr, value).done(function (result) {\n      var valueText = \"\";\n\n      if (result) {\n        valueText = lookup.displayExpr ? compileGetter(lookup.displayExpr)(result) : result;\n      }\n\n      if (field.customizeText) {\n        valueText = field.customizeText({\n          value: value,\n          valueText: valueText\n        });\n      }\n\n      handler(valueText);\n    }).fail(function () {\n      handler(\"\");\n    });\n  }\n}\n\nfunction getPrimitiveValueText(field, value, customOperation, target, options) {\n  var valueText;\n\n  if (true === value) {\n    valueText = field.trueText || messageLocalization.format(\"dxDataGrid-trueText\");\n  } else if (false === value) {\n    valueText = field.falseText || messageLocalization.format(\"dxDataGrid-falseText\");\n  } else {\n    valueText = getFormattedValueText(field, value);\n  }\n\n  if (field.customizeText) {\n    valueText = field.customizeText.call(field, {\n      value: value,\n      valueText: valueText,\n      target: target\n    });\n  }\n\n  if (customOperation && customOperation.customizeText) {\n    valueText = customOperation.customizeText.call(customOperation, {\n      value: value,\n      valueText: valueText,\n      field: field,\n      target: target\n    }, options);\n  }\n\n  return valueText;\n}\n\nfunction getArrayValueText(field, value, customOperation, target) {\n  var options = {\n    values: value\n  };\n  return value.map(function (v) {\n    return getPrimitiveValueText(field, v, customOperation, target, options);\n  });\n}\n\nfunction checkDefaultValue(value) {\n  return \"\" === value || null === value;\n}\n\nexport function getCurrentValueText(field, value, customOperation) {\n  var target = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : \"filterBuilder\";\n\n  if (checkDefaultValue(value)) {\n    return \"\";\n  }\n\n  if (Array.isArray(value)) {\n    var result = new Deferred();\n    when.apply(this, getArrayValueText(field, value, customOperation, target)).done(function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var text = args.some(function (item) {\n        return !checkDefaultValue(item);\n      }) ? args.map(function (item) {\n        return !checkDefaultValue(item) ? item : \"?\";\n      }) : \"\";\n      result.resolve(text);\n    });\n    return result;\n  } else {\n    return getPrimitiveValueText(field, value, customOperation, target);\n  }\n}\n\nfunction itemExists(plainItems, parentId) {\n  return plainItems.some(function (item) {\n    return item.dataField === parentId;\n  });\n}\n\nfunction pushItemAndCheckParent(originalItems, plainItems, item) {\n  var dataField = item.dataField;\n\n  if (hasParent(dataField)) {\n    item.parentId = getParentIdFromItemDataField(dataField);\n\n    if (!itemExists(plainItems, item.parentId) && !itemExists(originalItems, item.parentId)) {\n      pushItemAndCheckParent(originalItems, plainItems, {\n        id: item.parentId,\n        dataType: \"object\",\n        dataField: item.parentId,\n        caption: generateCaptionByDataField(item.parentId, true),\n        filterOperations: [\"isblank\", \"isnotblank\"]\n      });\n    }\n  }\n\n  plainItems.push(item);\n}\n\nfunction generateCaptionByDataField(dataField, allowHierarchicalFields) {\n  var caption = \"\";\n\n  if (allowHierarchicalFields) {\n    dataField = dataField.substring(dataField.lastIndexOf(\".\") + 1);\n  } else if (hasParent(dataField)) {\n    dataField.split(\".\").forEach(function (field, index, arr) {\n      caption += captionize(field);\n\n      if (index !== arr.length - 1) {\n        caption += \".\";\n      }\n    });\n    return caption;\n  }\n\n  return captionize(dataField);\n}\n\nexport function getItems(fields, allowHierarchicalFields) {\n  var items = [];\n\n  for (var i = 0; i < fields.length; i++) {\n    var item = extend(true, {\n      caption: generateCaptionByDataField(fields[i].dataField, allowHierarchicalFields)\n    }, fields[i]);\n    item.id = item.name || item.dataField;\n\n    if (allowHierarchicalFields) {\n      pushItemAndCheckParent(fields, items, item);\n    } else {\n      items.push(item);\n    }\n  }\n\n  return items;\n}\n\nfunction hasParent(dataField) {\n  return -1 !== dataField.lastIndexOf(\".\");\n}\n\nfunction getParentIdFromItemDataField(dataField) {\n  return dataField.substring(0, dataField.lastIndexOf(\".\"));\n}\n\nexport function getCaptionWithParents(item, plainItems) {\n  if (hasParent(item.dataField)) {\n    var parentId = getParentIdFromItemDataField(item.dataField);\n\n    for (var i = 0; i < plainItems.length; i++) {\n      if (plainItems[i].dataField === parentId) {\n        return getCaptionWithParents(plainItems[i], plainItems) + \".\" + item.caption;\n      }\n    }\n  }\n\n  return item.caption;\n}\nexport function updateConditionByOperation(condition, operation, customOperations) {\n  var customOperation = getCustomOperation(customOperations, operation);\n\n  if (customOperation) {\n    if (false === customOperation.hasValue) {\n      condition[1] = operation;\n      condition.length = 2;\n    } else {\n      condition[1] = operation;\n      condition[2] = \"\";\n    }\n\n    return condition;\n  }\n\n  if (\"isblank\" === operation) {\n    condition[1] = EQUAL_OPERATION;\n    condition[2] = null;\n  } else if (\"isnotblank\" === operation) {\n    condition[1] = NOT_EQUAL_OPERATION;\n    condition[2] = null;\n  } else {\n    customOperation = getCustomOperation(customOperations, condition[1]);\n\n    if (customOperation || 2 === condition.length || null === condition[2]) {\n      condition[2] = \"\";\n    }\n\n    condition[1] = operation;\n  }\n\n  return condition;\n}\nexport function getOperationValue(condition) {\n  var caption;\n\n  if (null === condition[2]) {\n    if (condition[1] === EQUAL_OPERATION) {\n      caption = \"isblank\";\n    } else {\n      caption = \"isnotblank\";\n    }\n  } else {\n    caption = condition[1];\n  }\n\n  return caption;\n}\nexport function isValidCondition(condition) {\n  return \"\" !== condition[2];\n}\nexport function getMergedOperations(customOperations, betweenCaption, context) {\n  var result = extend(true, [], customOperations);\n  var betweenIndex = -1;\n  result.some(function (customOperation, index) {\n    if (\"between\" === customOperation.name) {\n      betweenIndex = index;\n      return true;\n    }\n  });\n\n  if (-1 !== betweenIndex) {\n    result[betweenIndex] = extend(getConfig(betweenCaption, context), result[betweenIndex]);\n  } else {\n    result.unshift(getConfig(betweenCaption, context));\n  }\n\n  return result;\n}\n\nfunction isMatchedCondition(filter, addedFilterDataField) {\n  return filter[0] === addedFilterDataField;\n}\n\nexport function removeFieldConditionsFromFilter(filter, dataField) {\n  if (!filter || 0 === filter.length) {\n    return null;\n  }\n\n  if (isCondition(filter)) {\n    var hasMatchedCondition = isMatchedCondition(filter, dataField);\n    return !hasMatchedCondition ? filter : null;\n  } else {\n    return syncConditionIntoGroup(filter, [dataField], false);\n  }\n}\n\nfunction syncConditionIntoGroup(filter, addedFilter, canPush) {\n  var result = [];\n  filter.forEach(function (item) {\n    if (isCondition(item)) {\n      if (isMatchedCondition(item, addedFilter[0])) {\n        if (canPush) {\n          result.push(addedFilter);\n          canPush = false;\n        } else {\n          result.splice(result.length - 1, 1);\n        }\n      } else {\n        result.push(item);\n      }\n    } else {\n      (result.length || isGroup(item)) && result.push(item);\n    }\n  });\n\n  if (0 === result.length) {\n    return null;\n  }\n\n  if (canPush) {\n    result.push(AND_GROUP_OPERATION);\n    result.push(addedFilter);\n  }\n\n  return 1 === result.length ? result[0] : result;\n}\n\nexport function syncFilters(filter, addedFilter) {\n  if (null === filter || 0 === filter.length) {\n    return addedFilter;\n  }\n\n  if (isCondition(filter)) {\n    if (isMatchedCondition(filter, addedFilter[0])) {\n      return addedFilter;\n    } else {\n      return [filter, AND_GROUP_OPERATION, addedFilter];\n    }\n  }\n\n  var groupValue = getGroupValue(filter);\n\n  if (groupValue !== AND_GROUP_OPERATION) {\n    return [addedFilter, \"and\", filter];\n  }\n\n  return syncConditionIntoGroup(filter, addedFilter, true);\n}\nexport function getMatchedConditions(filter, dataField) {\n  if (null === filter || 0 === filter.length) {\n    return [];\n  }\n\n  if (isCondition(filter)) {\n    if (isMatchedCondition(filter, dataField)) {\n      return [filter];\n    } else {\n      return [];\n    }\n  }\n\n  var groupValue = getGroupValue(filter);\n\n  if (groupValue !== AND_GROUP_OPERATION) {\n    return [];\n  }\n\n  var result = filter.filter(function (item) {\n    return isCondition(item) && isMatchedCondition(item, dataField);\n  });\n  return result;\n}\nexport function filterHasField(filter, dataField) {\n  if (null === filter || 0 === filter.length) {\n    return false;\n  }\n\n  if (isCondition(filter)) {\n    return filter[0] === dataField;\n  }\n\n  return filter.some(function (item) {\n    return (isCondition(item) || isGroup(item)) && filterHasField(item, dataField);\n  });\n}\nexport var renderValueText = function renderValueText($container, value, customOperation) {\n  if (Array.isArray(value)) {\n    var lastItemIndex = value.length - 1;\n    $container.empty();\n    value.forEach(function (t, i) {\n      $(\"<span>\").addClass(FILTER_BUILDER_ITEM_TEXT_PART_CLASS).text(t).appendTo($container);\n\n      if (i !== lastItemIndex) {\n        $(\"<span>\").addClass(FILTER_BUILDER_ITEM_TEXT_SEPARATOR_CLASS).text(customOperation && customOperation.valueSeparator ? customOperation.valueSeparator : \"|\").addClass(FILTER_BUILDER_ITEM_TEXT_SEPARATOR_EMPTY_CLASS).appendTo($container);\n      }\n    });\n  } else if (value) {\n    $container.text(value);\n  } else {\n    $container.text(messageLocalization.format(\"dxFilterBuilder-enterValueText\"));\n  }\n};","map":null,"metadata":{},"sourceType":"module"}