{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __decorate, __metadata, __param } from 'tslib';\nimport { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, ContentChildren, QueryList, Component, NgModule } from '@angular/core';\nimport DxChart from 'devextreme/viz/chart';\nimport { DxComponent, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxiAnnotationComponent, DxiPaneComponent, DxiSeriesComponent, DxiValueAxisComponent, DxoAdaptiveLayoutModule, DxoAnimationModule, DxiAnnotationModule, DxoBorderModule, DxoFontModule, DxoImageModule, DxoShadowModule, DxoArgumentAxisModule, DxoAggregationIntervalModule, DxiBreakModule, DxoBreakStyleModule, DxiConstantLineModule, DxoLabelModule, DxoConstantLineStyleModule, DxoGridModule, DxoFormatModule, DxoMinorGridModule, DxoMinorTickModule, DxoMinorTickIntervalModule, DxoMinVisualRangeLengthModule, DxiStripModule, DxoStripStyleModule, DxoTickModule, DxoTickIntervalModule, DxoTitleModule, DxoCommonAnnotationSettingsModule, DxoCommonAxisSettingsModule, DxoCommonPaneSettingsModule, DxoCommonSeriesSettingsModule, DxoAggregationModule, DxoAreaModule, DxoHoverStyleModule, DxoHatchingModule, DxoConnectorModule, DxoPointModule, DxoHeightModule, DxoUrlModule, DxoWidthModule, DxoSelectionStyleModule, DxoReductionModule, DxoValueErrorBarModule, DxoBarModule, DxoBubbleModule, DxoCandlestickModule, DxoFullstackedareaModule, DxoFullstackedbarModule, DxoFullstackedlineModule, DxoFullstackedsplineModule, DxoFullstackedsplineareaModule, DxoArgumentFormatModule, DxoLineModule, DxoRangeareaModule, DxoRangebarModule, DxoScatterModule, DxoSplineModule, DxoSplineareaModule, DxoStackedareaModule, DxoStackedbarModule, DxoStackedlineModule, DxoStackedsplineModule, DxoStackedsplineareaModule, DxoStepareaModule, DxoSteplineModule, DxoStockModule, DxoCrosshairModule, DxoHorizontalLineModule, DxoVerticalLineModule, DxoDataPrepareSettingsModule, DxoExportModule, DxoLegendModule, DxoMarginModule, DxoSubtitleModule, DxoLoadingIndicatorModule, DxiPaneModule, DxoScrollBarModule, DxiSeriesModule, DxoSeriesTemplateModule, DxoSizeModule, DxoTooltipModule, DxiValueAxisModule, DxoZoomAndPanModule, DxoDragBoxStyleModule } from 'devextreme-angular/ui/nested';\n/*!\r\n * devextreme-angular\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\n/**\r\n * The Chart is a UI component that visualizes data from a local or remote storage using a great variety of series types along with different interactive elements, such as tooltips, crosshair pointer, legend, etc.\r\n\r\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'devextreme-angular/core';\nimport * as ɵngcc2 from '@angular/platform-browser';\nvar DxChartComponent = /*#__PURE__*/(function () {\n  var DxChartComponent = /*#__PURE__*/function (_DxComponent) {\n    _inherits(DxChartComponent, _DxComponent);\n\n    var _super = _createSuper(DxChartComponent);\n\n    function DxChartComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\n      var _this;\n\n      _classCallCheck(this, DxChartComponent);\n\n      _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n      _this._watcherHelper = _watcherHelper;\n      _this._idh = _idh;\n\n      _this._createEventEmitters([{\n        subscribe: 'argumentAxisClick',\n        emit: 'onArgumentAxisClick'\n      }, {\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'done',\n        emit: 'onDone'\n      }, {\n        subscribe: 'drawn',\n        emit: 'onDrawn'\n      }, {\n        subscribe: 'exported',\n        emit: 'onExported'\n      }, {\n        subscribe: 'exporting',\n        emit: 'onExporting'\n      }, {\n        subscribe: 'fileSaving',\n        emit: 'onFileSaving'\n      }, {\n        subscribe: 'incidentOccurred',\n        emit: 'onIncidentOccurred'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'legendClick',\n        emit: 'onLegendClick'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        subscribe: 'pointClick',\n        emit: 'onPointClick'\n      }, {\n        subscribe: 'pointHoverChanged',\n        emit: 'onPointHoverChanged'\n      }, {\n        subscribe: 'pointSelectionChanged',\n        emit: 'onPointSelectionChanged'\n      }, {\n        subscribe: 'seriesClick',\n        emit: 'onSeriesClick'\n      }, {\n        subscribe: 'seriesHoverChanged',\n        emit: 'onSeriesHoverChanged'\n      }, {\n        subscribe: 'seriesSelectionChanged',\n        emit: 'onSeriesSelectionChanged'\n      }, {\n        subscribe: 'tooltipHidden',\n        emit: 'onTooltipHidden'\n      }, {\n        subscribe: 'tooltipShown',\n        emit: 'onTooltipShown'\n      }, {\n        subscribe: 'zoomEnd',\n        emit: 'onZoomEnd'\n      }, {\n        subscribe: 'zoomStart',\n        emit: 'onZoomStart'\n      }, {\n        emit: 'adaptiveLayoutChange'\n      }, {\n        emit: 'adjustOnZoomChange'\n      }, {\n        emit: 'animationChange'\n      }, {\n        emit: 'annotationsChange'\n      }, {\n        emit: 'argumentAxisChange'\n      }, {\n        emit: 'autoHidePointMarkersChange'\n      }, {\n        emit: 'barGroupPaddingChange'\n      }, {\n        emit: 'barGroupWidthChange'\n      }, {\n        emit: 'commonAnnotationSettingsChange'\n      }, {\n        emit: 'commonAxisSettingsChange'\n      }, {\n        emit: 'commonPaneSettingsChange'\n      }, {\n        emit: 'commonSeriesSettingsChange'\n      }, {\n        emit: 'containerBackgroundColorChange'\n      }, {\n        emit: 'crosshairChange'\n      }, {\n        emit: 'customizeAnnotationChange'\n      }, {\n        emit: 'customizeLabelChange'\n      }, {\n        emit: 'customizePointChange'\n      }, {\n        emit: 'dataPrepareSettingsChange'\n      }, {\n        emit: 'dataSourceChange'\n      }, {\n        emit: 'defaultPaneChange'\n      }, {\n        emit: 'disabledChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'exportChange'\n      }, {\n        emit: 'legendChange'\n      }, {\n        emit: 'loadingIndicatorChange'\n      }, {\n        emit: 'marginChange'\n      }, {\n        emit: 'maxBubbleSizeChange'\n      }, {\n        emit: 'minBubbleSizeChange'\n      }, {\n        emit: 'negativesAsZeroesChange'\n      }, {\n        emit: 'paletteChange'\n      }, {\n        emit: 'paletteExtensionModeChange'\n      }, {\n        emit: 'panesChange'\n      }, {\n        emit: 'pathModifiedChange'\n      }, {\n        emit: 'pointSelectionModeChange'\n      }, {\n        emit: 'redrawOnResizeChange'\n      }, {\n        emit: 'resizePanesOnZoomChange'\n      }, {\n        emit: 'resolveLabelOverlappingChange'\n      }, {\n        emit: 'rotatedChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'scrollBarChange'\n      }, {\n        emit: 'seriesChange'\n      }, {\n        emit: 'seriesSelectionModeChange'\n      }, {\n        emit: 'seriesTemplateChange'\n      }, {\n        emit: 'sizeChange'\n      }, {\n        emit: 'stickyHoveringChange'\n      }, {\n        emit: 'synchronizeMultiAxesChange'\n      }, {\n        emit: 'themeChange'\n      }, {\n        emit: 'titleChange'\n      }, {\n        emit: 'tooltipChange'\n      }, {\n        emit: 'valueAxisChange'\n      }, {\n        emit: 'zoomAndPanChange'\n      }]);\n\n      _this._idh.setHost(_assertThisInitialized(_this));\n\n      optionHost.setHost(_assertThisInitialized(_this));\n      return _this;\n    }\n    /**\r\n     * Specifies adaptive layout properties.\r\n    \r\n     */\n\n\n    _createClass(DxChartComponent, [{\n      key: \"adaptiveLayout\",\n      get: function get() {\n        return this._getOption('adaptiveLayout');\n      },\n      set: function set(value) {\n        this._setOption('adaptiveLayout', value);\n      }\n      /**\r\n       * Specifies whether to adjust the value axis&apos;s visualRange when the argument axis is being zoomed or panned.\r\n      \r\n       */\n\n    }, {\n      key: \"adjustOnZoom\",\n      get: function get() {\n        return this._getOption('adjustOnZoom');\n      },\n      set: function set(value) {\n        this._setOption('adjustOnZoom', value);\n      }\n      /**\r\n       * Specifies animation properties.\r\n      \r\n       */\n\n    }, {\n      key: \"animation\",\n      get: function get() {\n        return this._getOption('animation');\n      },\n      set: function set(value) {\n        this._setOption('animation', value);\n      }\n      /**\r\n       * Specifies the annotation collection.\r\n      \r\n       */\n\n    }, {\n      key: \"annotations\",\n      get: function get() {\n        return this._getOption('annotations');\n      },\n      set: function set(value) {\n        this._setOption('annotations', value);\n      }\n      /**\r\n       * Configures the argument axis.\r\n      \r\n       */\n\n    }, {\n      key: \"argumentAxis\",\n      get: function get() {\n        return this._getOption('argumentAxis');\n      },\n      set: function set(value) {\n        this._setOption('argumentAxis', value);\n      }\n      /**\r\n       * Specifies whether to hide series point markers automatically to reduce visual clutter.\r\n      \r\n       */\n\n    }, {\n      key: \"autoHidePointMarkers\",\n      get: function get() {\n        return this._getOption('autoHidePointMarkers');\n      },\n      set: function set(value) {\n        this._setOption('autoHidePointMarkers', value);\n      }\n      /**\r\n       * Controls the padding and consequently the width of a group of bars with the same argument using relative units. Ignored if the barGroupWidth property is set.\r\n      \r\n       */\n\n    }, {\n      key: \"barGroupPadding\",\n      get: function get() {\n        return this._getOption('barGroupPadding');\n      },\n      set: function set(value) {\n        this._setOption('barGroupPadding', value);\n      }\n      /**\r\n       * Specifies a fixed width for groups of bars with the same argument, measured in pixels. Takes precedence over the barGroupPadding property.\r\n      \r\n       */\n\n    }, {\n      key: \"barGroupWidth\",\n      get: function get() {\n        return this._getOption('barGroupWidth');\n      },\n      set: function set(value) {\n        this._setOption('barGroupWidth', value);\n      }\n      /**\r\n       * Specifies settings common for all annotations in the chart.\r\n      \r\n       */\n\n    }, {\n      key: \"commonAnnotationSettings\",\n      get: function get() {\n        return this._getOption('commonAnnotationSettings');\n      },\n      set: function set(value) {\n        this._setOption('commonAnnotationSettings', value);\n      }\n      /**\r\n       * Defines common settings for both the argument and value axis in a chart.\r\n      \r\n       */\n\n    }, {\n      key: \"commonAxisSettings\",\n      get: function get() {\n        return this._getOption('commonAxisSettings');\n      },\n      set: function set(value) {\n        this._setOption('commonAxisSettings', value);\n      }\n      /**\r\n       * Defines common settings for all panes in a chart.\r\n      \r\n       */\n\n    }, {\n      key: \"commonPaneSettings\",\n      get: function get() {\n        return this._getOption('commonPaneSettings');\n      },\n      set: function set(value) {\n        this._setOption('commonPaneSettings', value);\n      }\n      /**\r\n       * Specifies settings common for all series in the chart.\r\n      \r\n       */\n\n    }, {\n      key: \"commonSeriesSettings\",\n      get: function get() {\n        return this._getOption('commonSeriesSettings');\n      },\n      set: function set(value) {\n        this._setOption('commonSeriesSettings', value);\n      }\n      /**\r\n       * Colors the background of the chart container.\r\n      \r\n       */\n\n    }, {\n      key: \"containerBackgroundColor\",\n      get: function get() {\n        return this._getOption('containerBackgroundColor');\n      },\n      set: function set(value) {\n        this._setOption('containerBackgroundColor', value);\n      }\n      /**\r\n       * Configures the crosshair feature.\r\n      \r\n       */\n\n    }, {\n      key: \"crosshair\",\n      get: function get() {\n        return this._getOption('crosshair');\n      },\n      set: function set(value) {\n        this._setOption('crosshair', value);\n      }\n      /**\r\n       * Customizes an individual annotation.\r\n      \r\n       */\n\n    }, {\n      key: \"customizeAnnotation\",\n      get: function get() {\n        return this._getOption('customizeAnnotation');\n      },\n      set: function set(value) {\n        this._setOption('customizeAnnotation', value);\n      }\n      /**\r\n       * Customizes the appearance of an individual point label.\r\n      \r\n       */\n\n    }, {\n      key: \"customizeLabel\",\n      get: function get() {\n        return this._getOption('customizeLabel');\n      },\n      set: function set(value) {\n        this._setOption('customizeLabel', value);\n      }\n      /**\r\n       * Customizes the appearance of an individual series point.\r\n      \r\n       */\n\n    }, {\n      key: \"customizePoint\",\n      get: function get() {\n        return this._getOption('customizePoint');\n      },\n      set: function set(value) {\n        this._setOption('customizePoint', value);\n      }\n      /**\r\n       * Processes data before visualizing it.\r\n      \r\n       */\n\n    }, {\n      key: \"dataPrepareSettings\",\n      get: function get() {\n        return this._getOption('dataPrepareSettings');\n      },\n      set: function set(value) {\n        this._setOption('dataPrepareSettings', value);\n      }\n      /**\r\n       * Binds the UI component to data.\r\n      \r\n       */\n\n    }, {\n      key: \"dataSource\",\n      get: function get() {\n        return this._getOption('dataSource');\n      },\n      set: function set(value) {\n        this._setOption('dataSource', value);\n      }\n      /**\r\n       * Specifies which pane should be used by default.\r\n      \r\n       */\n\n    }, {\n      key: \"defaultPane\",\n      get: function get() {\n        return this._getOption('defaultPane');\n      },\n      set: function set(value) {\n        this._setOption('defaultPane', value);\n      }\n      /**\r\n       * Specifies whether the UI component responds to user interaction.\r\n      \r\n       */\n\n    }, {\n      key: \"disabled\",\n      get: function get() {\n        return this._getOption('disabled');\n      },\n      set: function set(value) {\n        this._setOption('disabled', value);\n      }\n      /**\r\n       * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n      \r\n       */\n\n    }, {\n      key: \"elementAttr\",\n      get: function get() {\n        return this._getOption('elementAttr');\n      },\n      set: function set(value) {\n        this._setOption('elementAttr', value);\n      }\n      /**\r\n       * Configures the exporting and printing features.\r\n      \r\n       */\n\n    }, {\n      key: \"export\",\n      get: function get() {\n        return this._getOption('export');\n      },\n      set: function set(value) {\n        this._setOption('export', value);\n      }\n      /**\r\n       * Specifies the properties of a chart&apos;s legend.\r\n      \r\n       */\n\n    }, {\n      key: \"legend\",\n      get: function get() {\n        return this._getOption('legend');\n      },\n      set: function set(value) {\n        this._setOption('legend', value);\n      }\n      /**\r\n       * Configures the loading indicator.\r\n      \r\n       */\n\n    }, {\n      key: \"loadingIndicator\",\n      get: function get() {\n        return this._getOption('loadingIndicator');\n      },\n      set: function set(value) {\n        this._setOption('loadingIndicator', value);\n      }\n      /**\r\n       * Generates space around the UI component.\r\n      \r\n       */\n\n    }, {\n      key: \"margin\",\n      get: function get() {\n        return this._getOption('margin');\n      },\n      set: function set(value) {\n        this._setOption('margin', value);\n      }\n      /**\r\n       * Specifies a coefficient determining the diameter of the largest bubble.\r\n      \r\n       */\n\n    }, {\n      key: \"maxBubbleSize\",\n      get: function get() {\n        return this._getOption('maxBubbleSize');\n      },\n      set: function set(value) {\n        this._setOption('maxBubbleSize', value);\n      }\n      /**\r\n       * Specifies the diameter of the smallest bubble measured in pixels.\r\n      \r\n       */\n\n    }, {\n      key: \"minBubbleSize\",\n      get: function get() {\n        return this._getOption('minBubbleSize');\n      },\n      set: function set(value) {\n        this._setOption('minBubbleSize', value);\n      }\n      /**\r\n       * Forces the UI component to treat negative values as zeroes. Applies to stacked-like series only.\r\n      \r\n       */\n\n    }, {\n      key: \"negativesAsZeroes\",\n      get: function get() {\n        return this._getOption('negativesAsZeroes');\n      },\n      set: function set(value) {\n        this._setOption('negativesAsZeroes', value);\n      }\n      /**\r\n       * Sets the palette to be used for colorizing series and their elements.\r\n      \r\n       */\n\n    }, {\n      key: \"palette\",\n      get: function get() {\n        return this._getOption('palette');\n      },\n      set: function set(value) {\n        this._setOption('palette', value);\n      }\n      /**\r\n       * Specifies what to do with colors in the palette when their number is less than the number of series (in the Chart UI component) or points in a series (in the PieChart UI component).\r\n      \r\n       */\n\n    }, {\n      key: \"paletteExtensionMode\",\n      get: function get() {\n        return this._getOption('paletteExtensionMode');\n      },\n      set: function set(value) {\n        this._setOption('paletteExtensionMode', value);\n      }\n      /**\r\n       * Declares a collection of panes.\r\n      \r\n       */\n\n    }, {\n      key: \"panes\",\n      get: function get() {\n        return this._getOption('panes');\n      },\n      set: function set(value) {\n        this._setOption('panes', value);\n      }\n      /**\r\n       * Notifies the UI component that it is embedded into an HTML page that uses a tag modifying the path.\r\n      \r\n       */\n\n    }, {\n      key: \"pathModified\",\n      get: function get() {\n        return this._getOption('pathModified');\n      },\n      set: function set(value) {\n        this._setOption('pathModified', value);\n      }\n      /**\r\n       * Specifies whether a single point or multiple points can be selected in the chart.\r\n      \r\n       */\n\n    }, {\n      key: \"pointSelectionMode\",\n      get: function get() {\n        return this._getOption('pointSelectionMode');\n      },\n      set: function set(value) {\n        this._setOption('pointSelectionMode', value);\n      }\n      /**\r\n       * Specifies whether to redraw the UI component when the size of the parent browser window changes or a mobile device rotates.\r\n      \r\n       */\n\n    }, {\n      key: \"redrawOnResize\",\n      get: function get() {\n        return this._getOption('redrawOnResize');\n      },\n      set: function set(value) {\n        this._setOption('redrawOnResize', value);\n      }\n      /**\r\n       * Specifies whether panes can be resized if other chart elements require more space after zooming or panning.\r\n      \r\n       */\n\n    }, {\n      key: \"resizePanesOnZoom\",\n      get: function get() {\n        return this._getOption('resizePanesOnZoom');\n      },\n      set: function set(value) {\n        this._setOption('resizePanesOnZoom', value);\n      }\n      /**\r\n       * Specifies how the chart must behave when series point labels overlap.\r\n      \r\n       */\n\n    }, {\n      key: \"resolveLabelOverlapping\",\n      get: function get() {\n        return this._getOption('resolveLabelOverlapping');\n      },\n      set: function set(value) {\n        this._setOption('resolveLabelOverlapping', value);\n      }\n      /**\r\n       * Swaps the axes around making the value axis horizontal and the argument axis vertical.\r\n      \r\n       */\n\n    }, {\n      key: \"rotated\",\n      get: function get() {\n        return this._getOption('rotated');\n      },\n      set: function set(value) {\n        this._setOption('rotated', value);\n      }\n      /**\r\n       * Switches the UI component to a right-to-left representation.\r\n      \r\n       */\n\n    }, {\n      key: \"rtlEnabled\",\n      get: function get() {\n        return this._getOption('rtlEnabled');\n      },\n      set: function set(value) {\n        this._setOption('rtlEnabled', value);\n      }\n      /**\r\n       * Specifies the settings of the scroll bar.\r\n      \r\n       */\n\n    }, {\n      key: \"scrollBar\",\n      get: function get() {\n        return this._getOption('scrollBar');\n      },\n      set: function set(value) {\n        this._setOption('scrollBar', value);\n      }\n      /**\r\n       * Specifies properties for Chart UI component series.\r\n      \r\n       */\n\n    }, {\n      key: \"series\",\n      get: function get() {\n        return this._getOption('series');\n      },\n      set: function set(value) {\n        this._setOption('series', value);\n      }\n      /**\r\n       * Specifies whether a single series or multiple series can be selected in the chart.\r\n      \r\n       */\n\n    }, {\n      key: \"seriesSelectionMode\",\n      get: function get() {\n        return this._getOption('seriesSelectionMode');\n      },\n      set: function set(value) {\n        this._setOption('seriesSelectionMode', value);\n      }\n      /**\r\n       * Defines properties for the series template.\r\n      \r\n       */\n\n    }, {\n      key: \"seriesTemplate\",\n      get: function get() {\n        return this._getOption('seriesTemplate');\n      },\n      set: function set(value) {\n        this._setOption('seriesTemplate', value);\n      }\n      /**\r\n       * Specifies the UI component&apos;s size in pixels.\r\n      \r\n       */\n\n    }, {\n      key: \"size\",\n      get: function get() {\n        return this._getOption('size');\n      },\n      set: function set(value) {\n        this._setOption('size', value);\n      }\n      /**\r\n       * Specifies whether a point should remain in the hover state when the mouse pointer moves away.\r\n      \r\n       */\n\n    }, {\n      key: \"stickyHovering\",\n      get: function get() {\n        return this._getOption('stickyHovering');\n      },\n      set: function set(value) {\n        this._setOption('stickyHovering', value);\n      }\n      /**\r\n       * Indicates whether or not to synchronize value axes when they are displayed on a single pane.\r\n      \r\n       */\n\n    }, {\n      key: \"synchronizeMultiAxes\",\n      get: function get() {\n        return this._getOption('synchronizeMultiAxes');\n      },\n      set: function set(value) {\n        this._setOption('synchronizeMultiAxes', value);\n      }\n      /**\r\n       * Sets the name of the theme the UI component uses.\r\n      \r\n       */\n\n    }, {\n      key: \"theme\",\n      get: function get() {\n        return this._getOption('theme');\n      },\n      set: function set(value) {\n        this._setOption('theme', value);\n      }\n      /**\r\n       * Configures the UI component&apos;s title.\r\n      \r\n       */\n\n    }, {\n      key: \"title\",\n      get: function get() {\n        return this._getOption('title');\n      },\n      set: function set(value) {\n        this._setOption('title', value);\n      }\n      /**\r\n       * Configures tooltips.\r\n      \r\n       */\n\n    }, {\n      key: \"tooltip\",\n      get: function get() {\n        return this._getOption('tooltip');\n      },\n      set: function set(value) {\n        this._setOption('tooltip', value);\n      }\n      /**\r\n       * Configures the value axis.\r\n      \r\n       */\n\n    }, {\n      key: \"valueAxis\",\n      get: function get() {\n        return this._getOption('valueAxis');\n      },\n      set: function set(value) {\n        this._setOption('valueAxis', value);\n      }\n      /**\r\n       * Configures zooming and panning.\r\n      \r\n       */\n\n    }, {\n      key: \"zoomAndPan\",\n      get: function get() {\n        return this._getOption('zoomAndPan');\n      },\n      set: function set(value) {\n        this._setOption('zoomAndPan', value);\n      }\n    }, {\n      key: \"annotationsChildren\",\n      get: function get() {\n        return this._getOption('annotations');\n      },\n      set: function set(value) {\n        this.setChildren('annotations', value);\n      }\n    }, {\n      key: \"panesChildren\",\n      get: function get() {\n        return this._getOption('panes');\n      },\n      set: function set(value) {\n        this.setChildren('panes', value);\n      }\n    }, {\n      key: \"seriesChildren\",\n      get: function get() {\n        return this._getOption('series');\n      },\n      set: function set(value) {\n        this.setChildren('series', value);\n      }\n    }, {\n      key: \"valueAxisChildren\",\n      get: function get() {\n        return this._getOption('valueAxis');\n      },\n      set: function set(value) {\n        this.setChildren('valueAxis', value);\n      }\n    }, {\n      key: \"_createInstance\",\n      value: function _createInstance(element, options) {\n        return new DxChart(element, options);\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._destroyWidget();\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        _get(_getPrototypeOf(DxChartComponent.prototype), \"ngOnChanges\", this).call(this, changes);\n\n        this.setupChanges('annotations', changes);\n        this.setupChanges('dataSource', changes);\n        this.setupChanges('palette', changes);\n        this.setupChanges('panes', changes);\n        this.setupChanges('series', changes);\n        this.setupChanges('valueAxis', changes);\n      }\n    }, {\n      key: \"setupChanges\",\n      value: function setupChanges(prop, changes) {\n        if (!(prop in this._optionsToUpdate)) {\n          this._idh.setup(prop, changes);\n        }\n      }\n    }, {\n      key: \"ngDoCheck\",\n      value: function ngDoCheck() {\n        this._idh.doCheck('annotations');\n\n        this._idh.doCheck('dataSource');\n\n        this._idh.doCheck('palette');\n\n        this._idh.doCheck('panes');\n\n        this._idh.doCheck('series');\n\n        this._idh.doCheck('valueAxis');\n\n        this._watcherHelper.checkWatchers();\n\n        _get(_getPrototypeOf(DxChartComponent.prototype), \"ngDoCheck\", this).call(this);\n\n        _get(_getPrototypeOf(DxChartComponent.prototype), \"clearChangedOptions\", this).call(this);\n      }\n    }, {\n      key: \"_setOption\",\n      value: function _setOption(name, value) {\n        var isSetup = this._idh.setupSingle(name, value);\n\n        var isChanged = this._idh.getChanges(name, value) !== null;\n\n        if (isSetup || isChanged) {\n          _get(_getPrototypeOf(DxChartComponent.prototype), \"_setOption\", this).call(this, name, value);\n        }\n      }\n    }]);\n\n    return DxChartComponent;\n  }(DxComponent);\n\n  DxChartComponent.ɵfac = function DxChartComponent_Factory(t) {\n    return new (t || DxChartComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DxTemplateHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.WatcherHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IterableDifferHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TransferState), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n\n  DxChartComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: DxChartComponent,\n    selectors: [[\"dx-chart\"]],\n    contentQueries: function DxChartComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, DxiAnnotationComponent, 4);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, DxiPaneComponent, 4);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, DxiSeriesComponent, 4);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, DxiValueAxisComponent, 4);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.annotationsChildren = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panesChildren = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.seriesChildren = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.valueAxisChildren = _t);\n      }\n    },\n    inputs: {\n      adaptiveLayout: \"adaptiveLayout\",\n      adjustOnZoom: \"adjustOnZoom\",\n      animation: \"animation\",\n      annotations: \"annotations\",\n      argumentAxis: \"argumentAxis\",\n      autoHidePointMarkers: \"autoHidePointMarkers\",\n      barGroupPadding: \"barGroupPadding\",\n      barGroupWidth: \"barGroupWidth\",\n      commonAnnotationSettings: \"commonAnnotationSettings\",\n      commonAxisSettings: \"commonAxisSettings\",\n      commonPaneSettings: \"commonPaneSettings\",\n      commonSeriesSettings: \"commonSeriesSettings\",\n      containerBackgroundColor: \"containerBackgroundColor\",\n      crosshair: \"crosshair\",\n      customizeAnnotation: \"customizeAnnotation\",\n      customizeLabel: \"customizeLabel\",\n      customizePoint: \"customizePoint\",\n      dataPrepareSettings: \"dataPrepareSettings\",\n      dataSource: \"dataSource\",\n      defaultPane: \"defaultPane\",\n      disabled: \"disabled\",\n      elementAttr: \"elementAttr\",\n      export: \"export\",\n      legend: \"legend\",\n      loadingIndicator: \"loadingIndicator\",\n      margin: \"margin\",\n      maxBubbleSize: \"maxBubbleSize\",\n      minBubbleSize: \"minBubbleSize\",\n      negativesAsZeroes: \"negativesAsZeroes\",\n      palette: \"palette\",\n      paletteExtensionMode: \"paletteExtensionMode\",\n      panes: \"panes\",\n      pathModified: \"pathModified\",\n      pointSelectionMode: \"pointSelectionMode\",\n      redrawOnResize: \"redrawOnResize\",\n      resizePanesOnZoom: \"resizePanesOnZoom\",\n      resolveLabelOverlapping: \"resolveLabelOverlapping\",\n      rotated: \"rotated\",\n      rtlEnabled: \"rtlEnabled\",\n      scrollBar: \"scrollBar\",\n      series: \"series\",\n      seriesSelectionMode: \"seriesSelectionMode\",\n      seriesTemplate: \"seriesTemplate\",\n      size: \"size\",\n      stickyHovering: \"stickyHovering\",\n      synchronizeMultiAxes: \"synchronizeMultiAxes\",\n      theme: \"theme\",\n      title: \"title\",\n      tooltip: \"tooltip\",\n      valueAxis: \"valueAxis\",\n      zoomAndPan: \"zoomAndPan\"\n    },\n    outputs: {\n      onArgumentAxisClick: \"onArgumentAxisClick\",\n      onDisposing: \"onDisposing\",\n      onDone: \"onDone\",\n      onDrawn: \"onDrawn\",\n      onExported: \"onExported\",\n      onExporting: \"onExporting\",\n      onFileSaving: \"onFileSaving\",\n      onIncidentOccurred: \"onIncidentOccurred\",\n      onInitialized: \"onInitialized\",\n      onLegendClick: \"onLegendClick\",\n      onOptionChanged: \"onOptionChanged\",\n      onPointClick: \"onPointClick\",\n      onPointHoverChanged: \"onPointHoverChanged\",\n      onPointSelectionChanged: \"onPointSelectionChanged\",\n      onSeriesClick: \"onSeriesClick\",\n      onSeriesHoverChanged: \"onSeriesHoverChanged\",\n      onSeriesSelectionChanged: \"onSeriesSelectionChanged\",\n      onTooltipHidden: \"onTooltipHidden\",\n      onTooltipShown: \"onTooltipShown\",\n      onZoomEnd: \"onZoomEnd\",\n      onZoomStart: \"onZoomStart\",\n      adaptiveLayoutChange: \"adaptiveLayoutChange\",\n      adjustOnZoomChange: \"adjustOnZoomChange\",\n      animationChange: \"animationChange\",\n      annotationsChange: \"annotationsChange\",\n      argumentAxisChange: \"argumentAxisChange\",\n      autoHidePointMarkersChange: \"autoHidePointMarkersChange\",\n      barGroupPaddingChange: \"barGroupPaddingChange\",\n      barGroupWidthChange: \"barGroupWidthChange\",\n      commonAnnotationSettingsChange: \"commonAnnotationSettingsChange\",\n      commonAxisSettingsChange: \"commonAxisSettingsChange\",\n      commonPaneSettingsChange: \"commonPaneSettingsChange\",\n      commonSeriesSettingsChange: \"commonSeriesSettingsChange\",\n      containerBackgroundColorChange: \"containerBackgroundColorChange\",\n      crosshairChange: \"crosshairChange\",\n      customizeAnnotationChange: \"customizeAnnotationChange\",\n      customizeLabelChange: \"customizeLabelChange\",\n      customizePointChange: \"customizePointChange\",\n      dataPrepareSettingsChange: \"dataPrepareSettingsChange\",\n      dataSourceChange: \"dataSourceChange\",\n      defaultPaneChange: \"defaultPaneChange\",\n      disabledChange: \"disabledChange\",\n      elementAttrChange: \"elementAttrChange\",\n      exportChange: \"exportChange\",\n      legendChange: \"legendChange\",\n      loadingIndicatorChange: \"loadingIndicatorChange\",\n      marginChange: \"marginChange\",\n      maxBubbleSizeChange: \"maxBubbleSizeChange\",\n      minBubbleSizeChange: \"minBubbleSizeChange\",\n      negativesAsZeroesChange: \"negativesAsZeroesChange\",\n      paletteChange: \"paletteChange\",\n      paletteExtensionModeChange: \"paletteExtensionModeChange\",\n      panesChange: \"panesChange\",\n      pathModifiedChange: \"pathModifiedChange\",\n      pointSelectionModeChange: \"pointSelectionModeChange\",\n      redrawOnResizeChange: \"redrawOnResizeChange\",\n      resizePanesOnZoomChange: \"resizePanesOnZoomChange\",\n      resolveLabelOverlappingChange: \"resolveLabelOverlappingChange\",\n      rotatedChange: \"rotatedChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      scrollBarChange: \"scrollBarChange\",\n      seriesChange: \"seriesChange\",\n      seriesSelectionModeChange: \"seriesSelectionModeChange\",\n      seriesTemplateChange: \"seriesTemplateChange\",\n      sizeChange: \"sizeChange\",\n      stickyHoveringChange: \"stickyHoveringChange\",\n      synchronizeMultiAxesChange: \"synchronizeMultiAxesChange\",\n      themeChange: \"themeChange\",\n      titleChange: \"titleChange\",\n      tooltipChange: \"tooltipChange\",\n      valueAxisChange: \"valueAxisChange\",\n      zoomAndPanChange: \"zoomAndPanChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function DxChartComponent_Template(rf, ctx) {},\n    styles: [\"[_nghost-%COMP%] {  display: block; }\"]\n  });\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxChartComponent.prototype, \"adaptiveLayout\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxChartComponent.prototype, \"adjustOnZoom\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxChartComponent.prototype, \"animation\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Array), __metadata(\"design:paramtypes\", [Array])], DxChartComponent.prototype, \"annotations\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxChartComponent.prototype, \"argumentAxis\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxChartComponent.prototype, \"autoHidePointMarkers\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], DxChartComponent.prototype, \"barGroupPadding\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], DxChartComponent.prototype, \"barGroupWidth\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxChartComponent.prototype, \"commonAnnotationSettings\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxChartComponent.prototype, \"commonAxisSettings\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxChartComponent.prototype, \"commonPaneSettings\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxChartComponent.prototype, \"commonSeriesSettings\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxChartComponent.prototype, \"containerBackgroundColor\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxChartComponent.prototype, \"crosshair\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Function])], DxChartComponent.prototype, \"customizeAnnotation\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Function])], DxChartComponent.prototype, \"customizeLabel\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Function])], DxChartComponent.prototype, \"customizePoint\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxChartComponent.prototype, \"dataPrepareSettings\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxChartComponent.prototype, \"dataSource\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxChartComponent.prototype, \"defaultPane\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxChartComponent.prototype, \"disabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxChartComponent.prototype, \"elementAttr\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxChartComponent.prototype, \"export\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxChartComponent.prototype, \"legend\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxChartComponent.prototype, \"loadingIndicator\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxChartComponent.prototype, \"margin\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], DxChartComponent.prototype, \"maxBubbleSize\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], DxChartComponent.prototype, \"minBubbleSize\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxChartComponent.prototype, \"negativesAsZeroes\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxChartComponent.prototype, \"palette\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxChartComponent.prototype, \"paletteExtensionMode\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Array), __metadata(\"design:paramtypes\", [Array])], DxChartComponent.prototype, \"panes\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxChartComponent.prototype, \"pathModified\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxChartComponent.prototype, \"pointSelectionMode\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxChartComponent.prototype, \"redrawOnResize\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxChartComponent.prototype, \"resizePanesOnZoom\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxChartComponent.prototype, \"resolveLabelOverlapping\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxChartComponent.prototype, \"rotated\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxChartComponent.prototype, \"rtlEnabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxChartComponent.prototype, \"scrollBar\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxChartComponent.prototype, \"series\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxChartComponent.prototype, \"seriesSelectionMode\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxChartComponent.prototype, \"seriesTemplate\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxChartComponent.prototype, \"size\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxChartComponent.prototype, \"stickyHovering\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxChartComponent.prototype, \"synchronizeMultiAxes\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxChartComponent.prototype, \"theme\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxChartComponent.prototype, \"title\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxChartComponent.prototype, \"tooltip\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Array), __metadata(\"design:paramtypes\", [Array])], DxChartComponent.prototype, \"valueAxis\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxChartComponent.prototype, \"zoomAndPan\", null);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"onArgumentAxisClick\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"onDisposing\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"onDone\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"onDrawn\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"onExported\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"onExporting\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"onFileSaving\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"onIncidentOccurred\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"onInitialized\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"onLegendClick\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"onOptionChanged\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"onPointClick\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"onPointHoverChanged\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"onPointSelectionChanged\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"onSeriesClick\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"onSeriesHoverChanged\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"onSeriesSelectionChanged\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"onTooltipHidden\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"onTooltipShown\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"onZoomEnd\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"onZoomStart\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"adaptiveLayoutChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"adjustOnZoomChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"animationChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"annotationsChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"argumentAxisChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"autoHidePointMarkersChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"barGroupPaddingChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"barGroupWidthChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"commonAnnotationSettingsChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"commonAxisSettingsChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"commonPaneSettingsChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"commonSeriesSettingsChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"containerBackgroundColorChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"crosshairChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"customizeAnnotationChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"customizeLabelChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"customizePointChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"dataPrepareSettingsChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"dataSourceChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"defaultPaneChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"disabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"elementAttrChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"exportChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"legendChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"loadingIndicatorChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"marginChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"maxBubbleSizeChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"minBubbleSizeChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"negativesAsZeroesChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"paletteChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"paletteExtensionModeChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"panesChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"pathModifiedChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"pointSelectionModeChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"redrawOnResizeChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"resizePanesOnZoomChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"resolveLabelOverlappingChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"rotatedChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"rtlEnabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"scrollBarChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"seriesChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"seriesSelectionModeChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"seriesTemplateChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"sizeChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"stickyHoveringChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"synchronizeMultiAxesChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"themeChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"titleChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"tooltipChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"valueAxisChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxChartComponent.prototype, \"zoomAndPanChange\", void 0);\n\n  __decorate([ContentChildren(DxiAnnotationComponent), __metadata(\"design:type\", QueryList), __metadata(\"design:paramtypes\", [Object])], DxChartComponent.prototype, \"annotationsChildren\", null);\n\n  __decorate([ContentChildren(DxiPaneComponent), __metadata(\"design:type\", QueryList), __metadata(\"design:paramtypes\", [Object])], DxChartComponent.prototype, \"panesChildren\", null);\n\n  __decorate([ContentChildren(DxiSeriesComponent), __metadata(\"design:type\", QueryList), __metadata(\"design:paramtypes\", [Object])], DxChartComponent.prototype, \"seriesChildren\", null);\n\n  __decorate([ContentChildren(DxiValueAxisComponent), __metadata(\"design:type\", QueryList), __metadata(\"design:paramtypes\", [Object])], DxChartComponent.prototype, \"valueAxisChildren\", null);\n\n  DxChartComponent = __decorate([__param(7, Inject(PLATFORM_ID)), __metadata(\"design:paramtypes\", [ElementRef, NgZone, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, TransferState, Object])], DxChartComponent);\n  return DxChartComponent;\n})();\nvar DxChartModule = /*#__PURE__*/(function () {\n  var DxChartModule = /*#__PURE__*/_createClass(function DxChartModule() {\n    _classCallCheck(this, DxChartModule);\n  });\n\n  DxChartModule.ɵfac = function DxChartModule_Factory(t) {\n    return new (t || DxChartModule)();\n  };\n\n  DxChartModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: DxChartModule\n  });\n  DxChartModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[DxoAdaptiveLayoutModule, DxoAnimationModule, DxiAnnotationModule, DxoBorderModule, DxoFontModule, DxoImageModule, DxoShadowModule, DxoArgumentAxisModule, DxoAggregationIntervalModule, DxiBreakModule, DxoBreakStyleModule, DxiConstantLineModule, DxoLabelModule, DxoConstantLineStyleModule, DxoGridModule, DxoFormatModule, DxoMinorGridModule, DxoMinorTickModule, DxoMinorTickIntervalModule, DxoMinVisualRangeLengthModule, DxiStripModule, DxoStripStyleModule, DxoTickModule, DxoTickIntervalModule, DxoTitleModule, DxoCommonAnnotationSettingsModule, DxoCommonAxisSettingsModule, DxoCommonPaneSettingsModule, DxoCommonSeriesSettingsModule, DxoAggregationModule, DxoAreaModule, DxoHoverStyleModule, DxoHatchingModule, DxoConnectorModule, DxoPointModule, DxoHeightModule, DxoUrlModule, DxoWidthModule, DxoSelectionStyleModule, DxoReductionModule, DxoValueErrorBarModule, DxoBarModule, DxoBubbleModule, DxoCandlestickModule, DxoFullstackedareaModule, DxoFullstackedbarModule, DxoFullstackedlineModule, DxoFullstackedsplineModule, DxoFullstackedsplineareaModule, DxoArgumentFormatModule, DxoLineModule, DxoRangeareaModule, DxoRangebarModule, DxoScatterModule, DxoSplineModule, DxoSplineareaModule, DxoStackedareaModule, DxoStackedbarModule, DxoStackedlineModule, DxoStackedsplineModule, DxoStackedsplineareaModule, DxoStepareaModule, DxoSteplineModule, DxoStockModule, DxoCrosshairModule, DxoHorizontalLineModule, DxoVerticalLineModule, DxoDataPrepareSettingsModule, DxoExportModule, DxoLegendModule, DxoMarginModule, DxoSubtitleModule, DxoLoadingIndicatorModule, DxiPaneModule, DxoScrollBarModule, DxiSeriesModule, DxoSeriesTemplateModule, DxoSizeModule, DxoTooltipModule, DxiValueAxisModule, DxoZoomAndPanModule, DxoDragBoxStyleModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxoAdaptiveLayoutModule, DxoAnimationModule, DxiAnnotationModule, DxoBorderModule, DxoFontModule, DxoImageModule, DxoShadowModule, DxoArgumentAxisModule, DxoAggregationIntervalModule, DxiBreakModule, DxoBreakStyleModule, DxiConstantLineModule, DxoLabelModule, DxoConstantLineStyleModule, DxoGridModule, DxoFormatModule, DxoMinorGridModule, DxoMinorTickModule, DxoMinorTickIntervalModule, DxoMinVisualRangeLengthModule, DxiStripModule, DxoStripStyleModule, DxoTickModule, DxoTickIntervalModule, DxoTitleModule, DxoCommonAnnotationSettingsModule, DxoCommonAxisSettingsModule, DxoCommonPaneSettingsModule, DxoCommonSeriesSettingsModule, DxoAggregationModule, DxoAreaModule, DxoHoverStyleModule, DxoHatchingModule, DxoConnectorModule, DxoPointModule, DxoHeightModule, DxoUrlModule, DxoWidthModule, DxoSelectionStyleModule, DxoReductionModule, DxoValueErrorBarModule, DxoBarModule, DxoBubbleModule, DxoCandlestickModule, DxoFullstackedareaModule, DxoFullstackedbarModule, DxoFullstackedlineModule, DxoFullstackedsplineModule, DxoFullstackedsplineareaModule, DxoArgumentFormatModule, DxoLineModule, DxoRangeareaModule, DxoRangebarModule, DxoScatterModule, DxoSplineModule, DxoSplineareaModule, DxoStackedareaModule, DxoStackedbarModule, DxoStackedlineModule, DxoStackedsplineModule, DxoStackedsplineareaModule, DxoStepareaModule, DxoSteplineModule, DxoStockModule, DxoCrosshairModule, DxoHorizontalLineModule, DxoVerticalLineModule, DxoDataPrepareSettingsModule, DxoExportModule, DxoLegendModule, DxoMarginModule, DxoSubtitleModule, DxoLoadingIndicatorModule, DxiPaneModule, DxoScrollBarModule, DxiSeriesModule, DxoSeriesTemplateModule, DxoSizeModule, DxoTooltipModule, DxiValueAxisModule, DxoZoomAndPanModule, DxoDragBoxStyleModule, DxTemplateModule]\n  });\n  return DxChartModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxChartModule, {\n    declarations: function declarations() {\n      return [DxChartComponent];\n    },\n    imports: function imports() {\n      return [DxoAdaptiveLayoutModule, DxoAnimationModule, DxiAnnotationModule, DxoBorderModule, DxoFontModule, DxoImageModule, DxoShadowModule, DxoArgumentAxisModule, DxoAggregationIntervalModule, DxiBreakModule, DxoBreakStyleModule, DxiConstantLineModule, DxoLabelModule, DxoConstantLineStyleModule, DxoGridModule, DxoFormatModule, DxoMinorGridModule, DxoMinorTickModule, DxoMinorTickIntervalModule, DxoMinVisualRangeLengthModule, DxiStripModule, DxoStripStyleModule, DxoTickModule, DxoTickIntervalModule, DxoTitleModule, DxoCommonAnnotationSettingsModule, DxoCommonAxisSettingsModule, DxoCommonPaneSettingsModule, DxoCommonSeriesSettingsModule, DxoAggregationModule, DxoAreaModule, DxoHoverStyleModule, DxoHatchingModule, DxoConnectorModule, DxoPointModule, DxoHeightModule, DxoUrlModule, DxoWidthModule, DxoSelectionStyleModule, DxoReductionModule, DxoValueErrorBarModule, DxoBarModule, DxoBubbleModule, DxoCandlestickModule, DxoFullstackedareaModule, DxoFullstackedbarModule, DxoFullstackedlineModule, DxoFullstackedsplineModule, DxoFullstackedsplineareaModule, DxoArgumentFormatModule, DxoLineModule, DxoRangeareaModule, DxoRangebarModule, DxoScatterModule, DxoSplineModule, DxoSplineareaModule, DxoStackedareaModule, DxoStackedbarModule, DxoStackedlineModule, DxoStackedsplineModule, DxoStackedsplineareaModule, DxoStepareaModule, DxoSteplineModule, DxoStockModule, DxoCrosshairModule, DxoHorizontalLineModule, DxoVerticalLineModule, DxoDataPrepareSettingsModule, DxoExportModule, DxoLegendModule, DxoMarginModule, DxoSubtitleModule, DxoLoadingIndicatorModule, DxiPaneModule, DxoScrollBarModule, DxiSeriesModule, DxoSeriesTemplateModule, DxoSizeModule, DxoTooltipModule, DxiValueAxisModule, DxoZoomAndPanModule, DxoDragBoxStyleModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule];\n    },\n    exports: function exports() {\n      return [DxChartComponent, DxoAdaptiveLayoutModule, DxoAnimationModule, DxiAnnotationModule, DxoBorderModule, DxoFontModule, DxoImageModule, DxoShadowModule, DxoArgumentAxisModule, DxoAggregationIntervalModule, DxiBreakModule, DxoBreakStyleModule, DxiConstantLineModule, DxoLabelModule, DxoConstantLineStyleModule, DxoGridModule, DxoFormatModule, DxoMinorGridModule, DxoMinorTickModule, DxoMinorTickIntervalModule, DxoMinVisualRangeLengthModule, DxiStripModule, DxoStripStyleModule, DxoTickModule, DxoTickIntervalModule, DxoTitleModule, DxoCommonAnnotationSettingsModule, DxoCommonAxisSettingsModule, DxoCommonPaneSettingsModule, DxoCommonSeriesSettingsModule, DxoAggregationModule, DxoAreaModule, DxoHoverStyleModule, DxoHatchingModule, DxoConnectorModule, DxoPointModule, DxoHeightModule, DxoUrlModule, DxoWidthModule, DxoSelectionStyleModule, DxoReductionModule, DxoValueErrorBarModule, DxoBarModule, DxoBubbleModule, DxoCandlestickModule, DxoFullstackedareaModule, DxoFullstackedbarModule, DxoFullstackedlineModule, DxoFullstackedsplineModule, DxoFullstackedsplineareaModule, DxoArgumentFormatModule, DxoLineModule, DxoRangeareaModule, DxoRangebarModule, DxoScatterModule, DxoSplineModule, DxoSplineareaModule, DxoStackedareaModule, DxoStackedbarModule, DxoStackedlineModule, DxoStackedsplineModule, DxoStackedsplineareaModule, DxoStepareaModule, DxoSteplineModule, DxoStockModule, DxoCrosshairModule, DxoHorizontalLineModule, DxoVerticalLineModule, DxoDataPrepareSettingsModule, DxoExportModule, DxoLegendModule, DxoMarginModule, DxoSubtitleModule, DxoLoadingIndicatorModule, DxiPaneModule, DxoScrollBarModule, DxiSeriesModule, DxoSeriesTemplateModule, DxoSizeModule, DxoTooltipModule, DxiValueAxisModule, DxoZoomAndPanModule, DxoDragBoxStyleModule, DxTemplateModule];\n    }\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DxChartComponent, DxChartModule }; //# sourceMappingURL=devextreme-angular-ui-chart.js.map","map":null,"metadata":{},"sourceType":"module"}