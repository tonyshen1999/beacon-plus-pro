{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/view_model/time_panel_data_generator.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"allDay\", \"startDate\", \"endDate\", \"groups\", \"groupIndex\", \"isFirstGroupCell\", \"isLastGroupCell\", \"index\"];\nimport { getDisplayedRowCount } from \"../../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\nimport { getTimePanelCellText } from \"../../../../renovation/ui/scheduler/view_model/to_test/views/utils/week\";\nexport var TimePanelDataGenerator = /*#__PURE__*/function () {\n  function TimePanelDataGenerator(viewDataGenerator) {\n    _classCallCheck(this, TimePanelDataGenerator);\n\n    this._viewDataGenerator = viewDataGenerator;\n  }\n\n  _createClass(TimePanelDataGenerator, [{\n    key: \"getCompleteTimePanelMap\",\n    value: function getCompleteTimePanelMap(options, completeViewDataMap) {\n      var startViewDate = options.startViewDate,\n          cellDuration = options.cellDuration,\n          startDayHour = options.startDayHour,\n          isVerticalGrouping = options.isVerticalGrouping,\n          intervalCount = options.intervalCount,\n          currentDate = options.currentDate,\n          viewType = options.viewType,\n          hoursInterval = options.hoursInterval,\n          endDayHour = options.endDayHour;\n\n      var rowCountInGroup = this._viewDataGenerator.getRowCount({\n        intervalCount: intervalCount,\n        currentDate: currentDate,\n        viewType: viewType,\n        hoursInterval: hoursInterval,\n        startDayHour: startDayHour,\n        endDayHour: endDayHour\n      });\n\n      var cellCountInGroupRow = this._viewDataGenerator.getCellCount({\n        intervalCount: intervalCount,\n        currentDate: currentDate,\n        viewType: viewType,\n        hoursInterval: hoursInterval,\n        startDayHour: startDayHour,\n        endDayHour: endDayHour\n      });\n\n      var allDayRowsCount = 0;\n      return completeViewDataMap.map(function (row, index) {\n        var _row$ = row[0],\n            allDay = _row$.allDay,\n            startDate = _row$.startDate,\n            groups = _row$.groups,\n            groupIndex = _row$.groupIndex,\n            isFirstGroupCell = _row$.isFirstGroupCell,\n            isLastGroupCell = _row$.isLastGroupCell,\n            cellIndex = _row$.index,\n            restCellProps = _objectWithoutPropertiesLoose(_row$, _excluded);\n\n        if (allDay) {\n          allDayRowsCount += 1;\n        }\n\n        var timeIndex = (index - allDayRowsCount) % rowCountInGroup;\n        return _extends({}, restCellProps, {\n          startDate: startDate,\n          allDay: allDay,\n          text: getTimePanelCellText(timeIndex, startDate, startViewDate, cellDuration, startDayHour),\n          groups: isVerticalGrouping ? groups : void 0,\n          groupIndex: isVerticalGrouping ? groupIndex : void 0,\n          isFirstGroupCell: isVerticalGrouping && isFirstGroupCell,\n          isLastGroupCell: isVerticalGrouping && isLastGroupCell,\n          index: Math.floor(cellIndex / cellCountInGroupRow)\n        });\n      });\n    }\n  }, {\n    key: \"generateTimePanelData\",\n    value: function generateTimePanelData(completeTimePanelMap, options) {\n      var startRowIndex = options.startRowIndex,\n          rowCount = options.rowCount,\n          topVirtualRowHeight = options.topVirtualRowHeight,\n          bottomVirtualRowHeight = options.bottomVirtualRowHeight,\n          isGroupedAllDayPanel = options.isGroupedAllDayPanel,\n          isVerticalGrouping = options.isVerticalGrouping,\n          isAllDayPanelVisible = options.isAllDayPanelVisible;\n      var indexDifference = isVerticalGrouping || !isAllDayPanelVisible ? 0 : 1;\n      var correctedStartRowIndex = startRowIndex + indexDifference;\n      var displayedRowCount = getDisplayedRowCount(rowCount, completeTimePanelMap);\n      var timePanelMap = completeTimePanelMap.slice(correctedStartRowIndex, correctedStartRowIndex + displayedRowCount);\n      var timePanelData = {\n        topVirtualRowHeight: topVirtualRowHeight,\n        bottomVirtualRowHeight: bottomVirtualRowHeight,\n        isGroupedAllDayPanel: isGroupedAllDayPanel\n      };\n\n      var _this$_generateTimePa = this._generateTimePanelDataFromMap(timePanelMap, isGroupedAllDayPanel),\n          groupedData = _this$_generateTimePa.previousGroupedData;\n\n      timePanelData.groupedData = groupedData;\n      return timePanelData;\n    }\n  }, {\n    key: \"_generateTimePanelDataFromMap\",\n    value: function _generateTimePanelDataFromMap(timePanelMap, isGroupedAllDayPanel) {\n      return timePanelMap.reduce(function (_ref, cellData) {\n        var previousGroupIndex = _ref.previousGroupIndex,\n            previousGroupedData = _ref.previousGroupedData;\n        var currentGroupIndex = cellData.groupIndex;\n\n        if (currentGroupIndex !== previousGroupIndex) {\n          previousGroupedData.push({\n            dateTable: [],\n            isGroupedAllDayPanel: isGroupedAllDayPanel,\n            groupIndex: currentGroupIndex\n          });\n        }\n\n        if (cellData.allDay) {\n          previousGroupedData[previousGroupedData.length - 1].allDayPanel = cellData;\n        } else {\n          previousGroupedData[previousGroupedData.length - 1].dateTable.push(cellData);\n        }\n\n        return {\n          previousGroupIndex: currentGroupIndex,\n          previousGroupedData: previousGroupedData\n        };\n      }, {\n        previousGroupIndex: -1,\n        previousGroupedData: []\n      });\n    }\n  }]);\n\n  return TimePanelDataGenerator;\n}();","map":null,"metadata":{},"sourceType":"module"}