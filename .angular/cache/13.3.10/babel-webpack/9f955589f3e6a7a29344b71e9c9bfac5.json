{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/ui/number_box/number_box.spins.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport TextEditorButton from \"../text_box/texteditor_button_collection/button\";\nimport SpinButton from \"./number_box.spin\";\nimport { addNamespace } from \"../../events/utils/index\";\nimport pointer from \"../../events/pointer\";\nimport { extend } from \"../../core/utils/extend\";\nvar SPIN_CLASS = \"dx-numberbox-spin\";\nvar SPIN_CONTAINER_CLASS = \"dx-numberbox-spin-container\";\nvar SPIN_TOUCH_FRIENDLY_CLASS = \"dx-numberbox-spin-touch-friendly\";\n\nvar SpinButtons = /*#__PURE__*/function (_TextEditorButton) {\n  _inherits(SpinButtons, _TextEditorButton);\n\n  var _super = _createSuper(SpinButtons);\n\n  function SpinButtons() {\n    _classCallCheck(this, SpinButtons);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SpinButtons, [{\n    key: \"_attachEvents\",\n    value: function _attachEvents(instance, $spinContainer) {\n      var editor = this.editor;\n      var eventName = addNamespace(pointer.down, editor.NAME);\n      var $spinContainerChildren = $spinContainer.children();\n\n      var pointerDownAction = editor._createAction(function (e) {\n        return editor._spinButtonsPointerDownHandler(e);\n      });\n\n      eventsEngine.off($spinContainer, eventName);\n      eventsEngine.on($spinContainer, eventName, function (e) {\n        return pointerDownAction({\n          event: e\n        });\n      });\n      SpinButton.getInstance($spinContainerChildren.eq(0)).option(\"onChange\", function (e) {\n        return editor._spinUpChangeHandler(e);\n      });\n      SpinButton.getInstance($spinContainerChildren.eq(1)).option(\"onChange\", function (e) {\n        return editor._spinDownChangeHandler(e);\n      });\n    }\n  }, {\n    key: \"_create\",\n    value: function _create() {\n      var editor = this.editor;\n      var $spinContainer = $(\"<div>\").addClass(SPIN_CONTAINER_CLASS);\n      var $spinUp = $(\"<div>\").appendTo($spinContainer);\n      var $spinDown = $(\"<div>\").appendTo($spinContainer);\n\n      var options = this._getOptions();\n\n      this._addToContainer($spinContainer);\n\n      editor._createComponent($spinUp, SpinButton, extend({\n        direction: \"up\"\n      }, options));\n\n      editor._createComponent($spinDown, SpinButton, extend({\n        direction: \"down\"\n      }, options));\n\n      this._legacyRender(editor.$element(), this._isTouchFriendly(), options.visible);\n\n      return {\n        instance: $spinContainer,\n        $element: $spinContainer\n      };\n    }\n  }, {\n    key: \"_getOptions\",\n    value: function _getOptions() {\n      var editor = this.editor;\n\n      var visible = this._isVisible();\n\n      var disabled = editor.option(\"disabled\");\n      return {\n        visible: visible,\n        disabled: disabled\n      };\n    }\n  }, {\n    key: \"_isVisible\",\n    value: function _isVisible() {\n      var editor = this.editor;\n      return _get(_getPrototypeOf(SpinButtons.prototype), \"_isVisible\", this).call(this) && editor.option(\"showSpinButtons\");\n    }\n  }, {\n    key: \"_isTouchFriendly\",\n    value: function _isTouchFriendly() {\n      var editor = this.editor;\n      return editor.option(\"showSpinButtons\") && editor.option(\"useLargeSpinButtons\");\n    }\n  }, {\n    key: \"_legacyRender\",\n    value: function _legacyRender($editor, isTouchFriendly, isVisible) {\n      $editor.toggleClass(SPIN_TOUCH_FRIENDLY_CLASS, isTouchFriendly);\n      $editor.toggleClass(SPIN_CLASS, isVisible);\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var shouldUpdate = _get(_getPrototypeOf(SpinButtons.prototype), \"update\", this).call(this);\n\n      if (shouldUpdate) {\n        var editor = this.editor,\n            instance = this.instance;\n        var $editor = editor.$element();\n\n        var isVisible = this._isVisible();\n\n        var isTouchFriendly = this._isTouchFriendly();\n\n        var $spinButtons = instance.children();\n        var spinUp = SpinButton.getInstance($spinButtons.eq(0));\n        var spinDown = SpinButton.getInstance($spinButtons.eq(1));\n\n        var options = this._getOptions();\n\n        spinUp.option(options);\n        spinDown.option(options);\n\n        this._legacyRender($editor, isTouchFriendly, isVisible);\n      }\n    }\n  }]);\n\n  return SpinButtons;\n}(TextEditorButton);\n\nexport { SpinButtons as default };","map":null,"metadata":{},"sourceType":"module"}