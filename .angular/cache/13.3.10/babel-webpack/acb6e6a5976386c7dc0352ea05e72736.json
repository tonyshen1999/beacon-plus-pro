{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/dialog.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getHeight, getWidth } from \"../core/utils/size\";\nimport $ from \"../core/renderer\";\nimport { Component } from \"../core/component\";\nimport Action from \"../core/action\";\nimport devices from \"../core/devices\";\nimport config from \"../core/config\";\nimport { resetActiveElement } from \"../core/utils/dom\";\nimport { Deferred } from \"../core/utils/deferred\";\nimport { isPlainObject } from \"../core/utils/type\";\nimport { each } from \"../core/utils/iterator\";\nimport { extend } from \"../core/utils/extend\";\nimport { getWindow } from \"../core/utils/window\";\nimport eventsEngine from \"../events/core/events_engine\";\nimport { value as getViewport } from \"../core/utils/view_port\";\nimport messageLocalization from \"../localization/message\";\nimport errors from \"./widget/ui.errors\";\nimport Popup from \"./popup\";\nimport { ensureDefined } from \"../core/utils/common\";\nvar window = getWindow();\nvar DEFAULT_BUTTON = {\n  text: \"OK\",\n  onClick: function onClick() {\n    return true;\n  }\n};\nvar DX_DIALOG_CLASSNAME = \"dx-dialog\";\nvar DX_DIALOG_WRAPPER_CLASSNAME = \"\".concat(DX_DIALOG_CLASSNAME, \"-wrapper\");\nvar DX_DIALOG_ROOT_CLASSNAME = \"\".concat(DX_DIALOG_CLASSNAME, \"-root\");\nvar DX_DIALOG_CONTENT_CLASSNAME = \"\".concat(DX_DIALOG_CLASSNAME, \"-content\");\nvar DX_DIALOG_MESSAGE_CLASSNAME = \"\".concat(DX_DIALOG_CLASSNAME, \"-message\");\nvar DX_DIALOG_BUTTONS_CLASSNAME = \"\".concat(DX_DIALOG_CLASSNAME, \"-buttons\");\nvar DX_DIALOG_BUTTON_CLASSNAME = \"\".concat(DX_DIALOG_CLASSNAME, \"-button\");\nvar DX_BUTTON_CLASSNAME = \"dx-button\";\nexport var FakeDialogComponent = Component.inherit({\n  ctor: function ctor(element, options) {\n    this.callBase(options);\n  },\n  _defaultOptionsRules: function _defaultOptionsRules() {\n    return this.callBase().concat([{\n      device: {\n        platform: \"ios\"\n      },\n      options: {\n        width: 276\n      }\n    }]);\n  }\n});\nexport var custom = function custom(options) {\n  var _options$title;\n\n  var deferred = new Deferred();\n  var defaultOptions = new FakeDialogComponent().option();\n  options = extend(defaultOptions, options);\n  var $element = $(\"<div>\").addClass(DX_DIALOG_CLASSNAME).appendTo(getViewport());\n  var isMessageDefined = (\"message\" in options);\n  var isMessageHtmlDefined = (\"messageHtml\" in options);\n\n  if (isMessageDefined) {\n    errors.log(\"W1013\");\n  }\n\n  var messageHtml = String(isMessageHtmlDefined ? options.messageHtml : options.message);\n  var $message = $(\"<div>\").addClass(DX_DIALOG_MESSAGE_CLASSNAME).html(messageHtml);\n  var popupToolbarItems = [];\n  each(options.buttons || [DEFAULT_BUTTON], function () {\n    var action = new Action(this.onClick, {\n      context: popupInstance\n    });\n    popupToolbarItems.push({\n      toolbar: \"bottom\",\n      location: devices.current().android ? \"after\" : \"center\",\n      widget: \"dxButton\",\n      options: extend({}, this, {\n        onClick: function onClick() {\n          var result = action.execute.apply(action, arguments);\n          hide(result);\n        }\n      })\n    });\n  });\n  var popupInstance = new Popup($element, extend({\n    title: null !== (_options$title = options.title) && void 0 !== _options$title ? _options$title : \"\",\n    showTitle: ensureDefined(options.showTitle, true),\n    dragEnabled: ensureDefined(options.dragEnabled, true),\n    height: \"auto\",\n    width: options.width,\n    showCloseButton: options.showCloseButton || false,\n    ignoreChildEvents: false,\n    onContentReady: function onContentReady(args) {\n      args.component.$content().addClass(DX_DIALOG_CONTENT_CLASSNAME).append($message);\n    },\n    onShowing: function onShowing(e) {\n      e.component.bottomToolbar().addClass(DX_DIALOG_BUTTONS_CLASSNAME).find(\".\".concat(DX_BUTTON_CLASSNAME)).addClass(DX_DIALOG_BUTTON_CLASSNAME);\n      resetActiveElement();\n    },\n    onShown: function onShown(e) {\n      var $firstButton = e.component.bottomToolbar().find(\".\".concat(DX_BUTTON_CLASSNAME)).first();\n      eventsEngine.trigger($firstButton, \"focus\");\n    },\n    onHiding: function onHiding() {\n      deferred.reject();\n    },\n    toolbarItems: popupToolbarItems,\n    animation: {\n      show: {\n        type: \"pop\",\n        duration: 400\n      },\n      hide: {\n        type: \"pop\",\n        duration: 400,\n        to: {\n          opacity: 0,\n          scale: 0\n        },\n        from: {\n          opacity: 1,\n          scale: 1\n        }\n      }\n    },\n    rtlEnabled: config().rtlEnabled,\n    position: {\n      boundaryOffset: {\n        h: 10,\n        v: 0\n      }\n    }\n  }, options.popupOptions));\n  popupInstance.$wrapper().addClass(DX_DIALOG_WRAPPER_CLASSNAME);\n\n  if (options.position) {\n    popupInstance.option(\"position\", options.position);\n  }\n\n  popupInstance.$wrapper().addClass(DX_DIALOG_ROOT_CLASSNAME);\n\n  function hide(value) {\n    deferred.resolve(value);\n    popupInstance.hide().done(function () {\n      popupInstance.$element().remove();\n    });\n  }\n\n  return {\n    show: function show() {\n      if (\"android\" === devices.real().platform) {\n        var isPortrait = getHeight(window) > getWidth(window);\n        var width = isPortrait ? \"80%\" : \"60%\";\n        popupInstance.option({\n          width: width\n        });\n      }\n\n      popupInstance.show();\n      return deferred.promise();\n    },\n    hide: hide\n  };\n};\nexport var alert = function alert(messageHtml) {\n  var title = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : \"\";\n  var showTitle = arguments.length > 2 ? arguments[2] : void 0;\n  var options = isPlainObject(messageHtml) ? messageHtml : {\n    title: title,\n    messageHtml: messageHtml,\n    showTitle: showTitle,\n    dragEnabled: showTitle\n  };\n  return custom(options).show();\n};\nexport var confirm = function confirm(messageHtml) {\n  var title = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : \"\";\n  var showTitle = arguments.length > 2 ? arguments[2] : void 0;\n  var options = isPlainObject(messageHtml) ? messageHtml : {\n    title: title,\n    messageHtml: messageHtml,\n    showTitle: showTitle,\n    buttons: [{\n      text: messageLocalization.format(\"Yes\"),\n      onClick: function onClick() {\n        return true;\n      }\n    }, {\n      text: messageLocalization.format(\"No\"),\n      onClick: function onClick() {\n        return false;\n      }\n    }],\n    dragEnabled: showTitle\n  };\n  return custom(options).show();\n};","map":null,"metadata":{},"sourceType":"module"}