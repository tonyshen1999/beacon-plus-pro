{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scroll_view/ui.scrollbar.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport domAdapter from \"../../core/dom_adapter\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport readyCallback from \"../../core/utils/ready_callbacks\";\nimport { move } from \"../../animation/translator\";\nimport Widget from \"../widget/ui.widget\";\nimport { addNamespace } from \"../../events/utils/index\";\nimport { deferRenderer } from \"../../core/utils/common\";\nimport { isPlainObject } from \"../../core/utils/type\";\nimport { extend } from \"../../core/utils/extend\";\nimport pointerEvents from \"../../events/pointer\";\nvar SCROLLBAR = \"dxScrollbar\";\nvar SCROLLABLE_SCROLLBAR_CLASS = \"dx-scrollable-scrollbar\";\nvar SCROLLABLE_SCROLLBAR_ACTIVE_CLASS = \"\".concat(SCROLLABLE_SCROLLBAR_CLASS, \"-active\");\nvar SCROLLABLE_SCROLL_CLASS = \"dx-scrollable-scroll\";\nvar SCROLLABLE_SCROLL_CONTENT_CLASS = \"dx-scrollable-scroll-content\";\nvar HOVER_ENABLED_STATE = \"dx-scrollbar-hoverable\";\nvar HORIZONTAL = \"horizontal\";\nvar THUMB_MIN_SIZE = 15;\nvar SCROLLBAR_VISIBLE = {\n  onScroll: \"onScroll\",\n  onHover: \"onHover\",\n  always: \"always\",\n  never: \"never\"\n};\nvar activeScrollbar = null;\nvar Scrollbar = Widget.inherit({\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      direction: null,\n      visible: false,\n      activeStateEnabled: false,\n      visibilityMode: SCROLLBAR_VISIBLE.onScroll,\n      containerSize: 0,\n      contentSize: 0,\n      expandable: true,\n      scaleRatio: 1\n    });\n  },\n  _init: function _init() {\n    this.callBase();\n    this._isHovered = false;\n  },\n  _initMarkup: function _initMarkup() {\n    this._renderThumb();\n\n    this.callBase();\n  },\n  _render: function _render() {\n    this.callBase();\n\n    this._renderDirection();\n\n    this._update();\n\n    this._attachPointerDownHandler();\n\n    this.option(\"hoverStateEnabled\", this._isHoverMode());\n    this.$element().toggleClass(HOVER_ENABLED_STATE, this.option(\"hoverStateEnabled\"));\n  },\n  _renderThumb: function _renderThumb() {\n    this._$thumb = $(\"<div>\").addClass(SCROLLABLE_SCROLL_CLASS);\n    $(\"<div>\").addClass(SCROLLABLE_SCROLL_CONTENT_CLASS).appendTo(this._$thumb);\n    this.$element().addClass(SCROLLABLE_SCROLLBAR_CLASS).append(this._$thumb);\n  },\n  isThumb: function isThumb($element) {\n    return !!this.$element().find($element).length;\n  },\n  _isHoverMode: function _isHoverMode() {\n    var visibilityMode = this.option(\"visibilityMode\");\n    return (visibilityMode === SCROLLBAR_VISIBLE.onHover || visibilityMode === SCROLLBAR_VISIBLE.always) && this.option(\"expandable\");\n  },\n  _renderDirection: function _renderDirection() {\n    var direction = this.option(\"direction\");\n    this.$element().addClass(\"dx-scrollbar-\" + direction);\n    this._dimension = direction === HORIZONTAL ? \"width\" : \"height\";\n    this._prop = direction === HORIZONTAL ? \"left\" : \"top\";\n  },\n  _attachPointerDownHandler: function _attachPointerDownHandler() {\n    eventsEngine.on(this._$thumb, addNamespace(pointerEvents.down, SCROLLBAR), this.feedbackOn.bind(this));\n  },\n  feedbackOn: function feedbackOn() {\n    this.$element().addClass(SCROLLABLE_SCROLLBAR_ACTIVE_CLASS);\n    activeScrollbar = this;\n  },\n  feedbackOff: function feedbackOff() {\n    this.$element().removeClass(SCROLLABLE_SCROLLBAR_ACTIVE_CLASS);\n    activeScrollbar = null;\n  },\n  cursorEnter: function cursorEnter() {\n    this._isHovered = true;\n\n    if (this._needScrollbar()) {\n      this.option(\"visible\", true);\n    }\n  },\n  cursorLeave: function cursorLeave() {\n    this._isHovered = false;\n    this.option(\"visible\", false);\n  },\n  _renderDimensions: function _renderDimensions() {\n    this._$thumb.css({\n      width: this.option(\"width\"),\n      height: this.option(\"height\")\n    });\n  },\n  _toggleVisibility: function _toggleVisibility(visible) {\n    if (this.option(\"visibilityMode\") === SCROLLBAR_VISIBLE.onScroll) {\n      this._$thumb.css(\"opacity\");\n    }\n\n    visible = this._adjustVisibility(visible);\n    this.option().visible = visible;\n\n    this._$thumb.toggleClass(\"dx-state-invisible\", !visible);\n  },\n  _adjustVisibility: function _adjustVisibility(visible) {\n    if (this._baseContainerToContentRatio && !this._needScrollbar()) {\n      return false;\n    }\n\n    switch (this.option(\"visibilityMode\")) {\n      case SCROLLBAR_VISIBLE.onScroll:\n        break;\n\n      case SCROLLBAR_VISIBLE.onHover:\n        visible = visible || !!this._isHovered;\n        break;\n\n      case SCROLLBAR_VISIBLE.never:\n        visible = false;\n        break;\n\n      case SCROLLBAR_VISIBLE.always:\n        visible = true;\n    }\n\n    return visible;\n  },\n  moveTo: function moveTo(location) {\n    if (this._isHidden()) {\n      return;\n    }\n\n    if (isPlainObject(location)) {\n      location = location[this._prop] || 0;\n    }\n\n    var scrollBarLocation = {};\n    scrollBarLocation[this._prop] = this._calculateScrollBarPosition(location);\n    move(this._$thumb, scrollBarLocation);\n  },\n  _calculateScrollBarPosition: function _calculateScrollBarPosition(location) {\n    return -location * this._thumbRatio;\n  },\n  _update: function _update() {\n    var containerSize = Math.round(this.option(\"containerSize\"));\n    var contentSize = Math.round(this.option(\"contentSize\"));\n    var baseContainerSize = Math.round(this.option(\"baseContainerSize\"));\n    var baseContentSize = Math.round(this.option(\"baseContentSize\"));\n\n    if (isNaN(baseContainerSize)) {\n      baseContainerSize = containerSize;\n      baseContentSize = contentSize;\n    }\n\n    this._baseContainerToContentRatio = baseContentSize ? baseContainerSize / baseContentSize : baseContainerSize;\n    this._realContainerToContentRatio = contentSize ? containerSize / contentSize : containerSize;\n    var thumbSize = Math.round(Math.max(Math.round(containerSize * this._realContainerToContentRatio), THUMB_MIN_SIZE));\n    this._thumbRatio = (containerSize - thumbSize) / (this.option(\"scaleRatio\") * (contentSize - containerSize));\n    this.option(this._dimension, thumbSize / this.option(\"scaleRatio\"));\n    this.$element().css(\"display\", this._needScrollbar() ? \"\" : \"none\");\n  },\n  _isHidden: function _isHidden() {\n    return this.option(\"visibilityMode\") === SCROLLBAR_VISIBLE.never;\n  },\n  _needScrollbar: function _needScrollbar() {\n    return !this._isHidden() && this._baseContainerToContentRatio < 1;\n  },\n  containerToContentRatio: function containerToContentRatio() {\n    return this._realContainerToContentRatio;\n  },\n  _normalizeSize: function _normalizeSize(size) {\n    return isPlainObject(size) ? size[this._dimension] || 0 : size;\n  },\n  _clean: function _clean() {\n    this.callBase();\n\n    if (this === activeScrollbar) {\n      activeScrollbar = null;\n    }\n\n    eventsEngine.off(this._$thumb, \".\" + SCROLLBAR);\n  },\n  _optionChanged: function _optionChanged(args) {\n    if (this._isHidden()) {\n      return;\n    }\n\n    switch (args.name) {\n      case \"containerSize\":\n      case \"contentSize\":\n        this.option()[args.name] = this._normalizeSize(args.value);\n\n        this._update();\n\n        break;\n\n      case \"baseContentSize\":\n      case \"baseContainerSize\":\n        this._update();\n\n        break;\n\n      case \"visibilityMode\":\n      case \"direction\":\n        this._invalidate();\n\n        break;\n\n      case \"scaleRatio\":\n        this._update();\n\n        break;\n\n      default:\n        this.callBase.apply(this, arguments);\n    }\n  },\n  update: deferRenderer(function () {\n    this._adjustVisibility() && this.option(\"visible\", true);\n  })\n});\nreadyCallback.add(function () {\n  eventsEngine.subscribeGlobal(domAdapter.getDocument(), addNamespace(pointerEvents.up, SCROLLBAR), function () {\n    if (activeScrollbar) {\n      activeScrollbar.feedbackOff();\n    }\n  });\n});\nexport default Scrollbar;","map":null,"metadata":{},"sourceType":"module"}