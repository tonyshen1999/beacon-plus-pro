{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/subscribes.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { isPlainObject } from \"../../core/utils/type\";\nimport dateUtils from \"../../core/utils/date\";\nimport { each } from \"../../core/utils/iterator\";\nimport { extend } from \"../../core/utils/extend\";\nimport { AGENDA_LAST_IN_DATE_APPOINTMENT_CLASS } from \"./classes\";\nimport { utils } from \"./utils\";\nimport { createAppointmentAdapter } from \"./appointmentAdapter\";\nimport { getFormatType, formatDates } from \"./appointments/textUtils\";\nvar toMs = dateUtils.dateToMilliseconds;\nvar subscribes = {\n  isCurrentViewAgenda: function isCurrentViewAgenda() {\n    return \"agenda\" === this.currentViewType;\n  },\n  currentViewUpdated: function currentViewUpdated(currentView) {\n    this.option(\"currentView\", currentView);\n  },\n  currentDateUpdated: function currentDateUpdated(date) {\n    this.option(\"currentDate\", date);\n  },\n  getOption: function getOption(name) {\n    return this.option(name);\n  },\n  getWorkspaceOption: function getWorkspaceOption(name) {\n    return this.getWorkSpace().option(name);\n  },\n  isVirtualScrolling: function isVirtualScrolling() {\n    return this.isVirtualScrolling();\n  },\n  setCellDataCacheAlias: function setCellDataCacheAlias(appointment, geometry) {\n    this._workSpace.setCellDataCacheAlias(appointment, geometry);\n  },\n  isGroupedByDate: function isGroupedByDate() {\n    return this.getWorkSpace().isGroupedByDate();\n  },\n  showAppointmentTooltip: function showAppointmentTooltip(options) {\n    var targetedAppointment = this.getTargetedAppointment(options.data, options.target);\n    this.showAppointmentTooltip(options.data, options.target, targetedAppointment);\n  },\n  hideAppointmentTooltip: function hideAppointmentTooltip() {\n    this.hideAppointmentTooltip();\n  },\n  showEditAppointmentPopup: function showEditAppointmentPopup(options) {\n    var targetedData = this.getTargetedAppointment(options.data, options.target);\n    this.showAppointmentPopup(options.data, false, targetedData);\n  },\n  updateAppointmentAfterResize: function updateAppointmentAfterResize(options) {\n    var info = utils.dataAccessors.getAppointmentInfo(options.$appointment);\n    var exceptionDate = info.sourceAppointment.exceptionDate;\n\n    this._checkRecurringAppointment(options.target, options.data, exceptionDate, function () {\n      this._updateAppointment(options.target, options.data, function () {\n        this._appointments.moveAppointmentBack();\n      });\n    }.bind(this));\n  },\n  getUpdatedData: function getUpdatedData(rawAppointment) {\n    return this._getUpdatedData(rawAppointment);\n  },\n  updateAppointmentAfterDrag: function updateAppointmentAfterDrag(_ref) {\n    var event = _ref.event,\n        element = _ref.element,\n        rawAppointment = _ref.rawAppointment,\n        coordinates = _ref.coordinates;\n    var info = utils.dataAccessors.getAppointmentInfo(element);\n    var appointment = createAppointmentAdapter(rawAppointment, this._dataAccessors, this.timeZoneCalculator);\n    var targetedAppointment = createAppointmentAdapter(extend({}, rawAppointment, this._getUpdatedData(rawAppointment)), this._dataAccessors, this.timeZoneCalculator);\n    var targetedRawAppointment = targetedAppointment.source();\n\n    var newCellIndex = this._workSpace.getDroppableCellIndex();\n\n    var oldCellIndex = this._workSpace.getCellIndexByCoordinates(coordinates);\n\n    var becomeAllDay = targetedAppointment.allDay;\n    var wasAllDay = appointment.allDay;\n    var movedBetweenAllDayAndSimple = this._workSpace.supportAllDayRow() && (wasAllDay && !becomeAllDay || !wasAllDay && becomeAllDay);\n\n    if (newCellIndex !== oldCellIndex || movedBetweenAllDayAndSimple) {\n      this._checkRecurringAppointment(rawAppointment, targetedRawAppointment, info.sourceAppointment.exceptionDate, function () {\n        this._updateAppointment(rawAppointment, targetedRawAppointment, function () {\n          this._appointments.moveAppointmentBack(event);\n        }, event);\n      }.bind(this), void 0, void 0, event);\n    } else {\n      this._appointments.moveAppointmentBack(event);\n    }\n  },\n  onDeleteButtonPress: function onDeleteButtonPress(options) {\n    var targetedData = this.getTargetedAppointment(options.data, $(options.target));\n    this.checkAndDeleteAppointment(options.data, targetedData);\n    this.hideAppointmentTooltip();\n  },\n  getTextAndFormatDate: function getTextAndFormatDate(appointmentRaw, targetedAppointmentRaw, format) {\n    var appointmentAdapter = createAppointmentAdapter(appointmentRaw, this._dataAccessors, this.timeZoneCalculator);\n    var targetedAdapter = createAppointmentAdapter(targetedAppointmentRaw || appointmentRaw, this._dataAccessors, this.timeZoneCalculator);\n    var startDate = this.timeZoneCalculator.createDate(targetedAdapter.startDate, {\n      path: \"toGrid\"\n    });\n    var endDate = this.timeZoneCalculator.createDate(targetedAdapter.endDate, {\n      path: \"toGrid\"\n    });\n    var formatType = format || getFormatType(startDate, endDate, targetedAdapter.allDay, \"month\" !== this.currentViewType);\n    return {\n      text: targetedAdapter.text || appointmentAdapter.text,\n      formatDate: formatDates(startDate, endDate, formatType)\n    };\n  },\n  _createAppointmentTitle: function _createAppointmentTitle(data) {\n    if (isPlainObject(data)) {\n      return data.text;\n    }\n\n    return String(data);\n  },\n  getResizableAppointmentArea: function getResizableAppointmentArea(options) {\n    var allDay = options.allDay;\n\n    var groups = this._getCurrentViewOption(\"groups\");\n\n    if (groups && groups.length) {\n      if (allDay || this.getLayoutManager().getRenderingStrategyInstance()._needHorizontalGroupBounds()) {\n        var horizontalGroupBounds = this._workSpace.getGroupBounds(options.coordinates);\n\n        return {\n          left: horizontalGroupBounds.left,\n          right: horizontalGroupBounds.right,\n          top: 0,\n          bottom: 0\n        };\n      }\n\n      if (this.getLayoutManager().getRenderingStrategyInstance()._needVerticalGroupBounds(allDay) && this._workSpace._isVerticalGroupedWorkSpace()) {\n        var verticalGroupBounds = this._workSpace.getGroupBounds(options.coordinates);\n\n        return {\n          left: 0,\n          right: 0,\n          top: verticalGroupBounds.top,\n          bottom: verticalGroupBounds.bottom\n        };\n      }\n    }\n  },\n  needRecalculateResizableArea: function needRecalculateResizableArea() {\n    return this.getWorkSpace().needRecalculateResizableArea();\n  },\n  getAppointmentGeometry: function getAppointmentGeometry(settings) {\n    return this.getLayoutManager().getRenderingStrategyInstance().getAppointmentGeometry(settings);\n  },\n  isAllDay: function isAllDay(appointmentData) {\n    return this.getLayoutManager().getRenderingStrategyInstance().isAllDay(appointmentData);\n  },\n  getDeltaTime: function getDeltaTime(e, initialSize, itemData) {\n    return this.getLayoutManager().getRenderingStrategyInstance().getDeltaTime(e, initialSize, itemData);\n  },\n  getDropDownAppointmentWidth: function getDropDownAppointmentWidth(isAllDay) {\n    return this.getLayoutManager().getRenderingStrategyInstance().getDropDownAppointmentWidth(this._getViewCountConfig().intervalCount, isAllDay);\n  },\n  getDropDownAppointmentHeight: function getDropDownAppointmentHeight() {\n    return this.getLayoutManager().getRenderingStrategyInstance().getDropDownAppointmentHeight();\n  },\n  getCellWidth: function getCellWidth() {\n    return this.getWorkSpace().getCellWidth();\n  },\n  getCellHeight: function getCellHeight() {\n    return this.getWorkSpace().getCellHeight();\n  },\n  getMaxAppointmentCountPerCellByType: function getMaxAppointmentCountPerCellByType(isAllDay) {\n    return this.getRenderingStrategyInstance()._getMaxAppointmentCountPerCellByType(isAllDay);\n  },\n  needCorrectAppointmentDates: function needCorrectAppointmentDates() {\n    return this.getRenderingStrategyInstance().needCorrectAppointmentDates();\n  },\n  getRenderingStrategyDirection: function getRenderingStrategyDirection() {\n    return this.getRenderingStrategyInstance().getDirection();\n  },\n  updateAppointmentStartDate: function updateAppointmentStartDate(options) {\n    var appointment = options.appointment;\n\n    var firstViewDate = this._workSpace.getStartViewDate();\n\n    var startDate = new Date(options.startDate);\n\n    var startDayHour = this._getCurrentViewOption(\"startDayHour\");\n\n    var updatedStartDate;\n\n    if (this.appointmentTakesAllDay(appointment)) {\n      updatedStartDate = dateUtils.normalizeDate(startDate, firstViewDate);\n    } else {\n      if (startDate < firstViewDate) {\n        startDate = firstViewDate;\n      }\n\n      updatedStartDate = dateUtils.normalizeDate(options.startDate, new Date(startDate));\n    }\n\n    return dateUtils.roundDateByStartDayHour(updatedStartDate, startDayHour);\n  },\n  updateAppointmentEndDate: function updateAppointmentEndDate(options) {\n    var endDate = options.endDate;\n\n    var endDayHour = this._getCurrentViewOption(\"endDayHour\");\n\n    var startDayHour = this._getCurrentViewOption(\"startDayHour\");\n\n    var updatedEndDate = endDate;\n\n    if (endDate.getHours() >= endDayHour) {\n      updatedEndDate.setHours(endDayHour, 0, 0, 0);\n    } else if (!options.isSameDate && startDayHour > 0 && 60 * endDate.getHours() + endDate.getMinutes() < 60 * startDayHour) {\n      updatedEndDate = new Date(updatedEndDate.getTime() - toMs(\"day\"));\n      updatedEndDate.setHours(endDayHour, 0, 0, 0);\n    }\n\n    return updatedEndDate;\n  },\n  renderCompactAppointments: function renderCompactAppointments(options) {\n    this._compactAppointmentsHelper.render(options);\n  },\n  clearCompactAppointments: function clearCompactAppointments() {\n    this._compactAppointmentsHelper.clear();\n  },\n  supportCompactDropDownAppointments: function supportCompactDropDownAppointments() {\n    return this.getLayoutManager().getRenderingStrategyInstance().supportCompactDropDownAppointments();\n  },\n  getGroupCount: function getGroupCount() {\n    return this._workSpace._getGroupCount();\n  },\n  mapAppointmentFields: function mapAppointmentFields(config) {\n    var itemData = config.itemData,\n        itemElement = config.itemElement,\n        targetedAppointment = config.targetedAppointment;\n    var targetedData = targetedAppointment || this.getTargetedAppointment(itemData, itemElement);\n    return {\n      appointmentData: config.itemData,\n      appointmentElement: config.itemElement,\n      targetedAppointmentData: targetedData\n    };\n  },\n  dayHasAppointment: function dayHasAppointment(day, appointment, trimTime) {\n    return this.dayHasAppointment(day, appointment, trimTime);\n  },\n  getLayoutManager: function getLayoutManager() {\n    return this._layoutManager;\n  },\n  getAgendaVerticalStepHeight: function getAgendaVerticalStepHeight() {\n    return this.getWorkSpace().getAgendaVerticalStepHeight();\n  },\n  getAgendaDuration: function getAgendaDuration() {\n    return this._getCurrentViewOption(\"agendaDuration\");\n  },\n  getStartViewDate: function getStartViewDate() {\n    return this.getStartViewDate();\n  },\n  getEndViewDate: function getEndViewDate() {\n    return this.getEndViewDate();\n  },\n  forceMaxAppointmentPerCell: function forceMaxAppointmentPerCell() {\n    return this.forceMaxAppointmentPerCell();\n  },\n  onAgendaReady: function onAgendaReady(rows) {\n    var $appts = this.getAppointmentsInstance()._itemElements();\n\n    var total = 0;\n\n    var applyClass = function applyClass(_, count) {\n      var index = count + total - 1;\n      $appts.eq(index).addClass(AGENDA_LAST_IN_DATE_APPOINTMENT_CLASS);\n      total += count;\n    };\n\n    for (var i = 0; i < rows.length; i++) {\n      each(rows[i], applyClass);\n    }\n  },\n  getTimezone: function getTimezone() {\n    return this._getTimezoneOffsetByOption();\n  },\n  getTargetedAppointmentData: function getTargetedAppointmentData(appointment, element) {\n    return this.getTargetedAppointment(appointment, element);\n  },\n  getEndDayHour: function getEndDayHour() {\n    return this._workSpace.option(\"endDayHour\") || this.option(\"endDayHour\");\n  },\n  getStartDayHour: function getStartDayHour() {\n    return this._workSpace.option(\"startDayHour\") || this.option(\"startDayHour\");\n  },\n  isAdaptive: function isAdaptive() {\n    return this.option(\"adaptivityEnabled\");\n  },\n  removeDroppableCellClass: function removeDroppableCellClass() {\n    this._workSpace.removeDroppableCellClass();\n  }\n};\nexport default subscribes;","map":null,"metadata":{},"sourceType":"module"}