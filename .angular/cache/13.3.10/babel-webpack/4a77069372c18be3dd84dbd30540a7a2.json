{"ast":null,"code":"/**\r\n * DevExtreme (esm/exporter/excel_creator.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport Class from \"../core/class\";\nimport { getWindow } from \"../core/utils/window\";\nimport { isDefined, isString, isDate, isBoolean, isObject, isFunction } from \"../core/utils/type\";\nimport { extend } from \"../core/utils/extend\";\nimport errors from \"../ui/widget/ui.errors\";\nimport { encodeHtml } from \"../core/utils/string\";\nimport JSZip from \"jszip\";\nimport { MIME_TYPES } from \"./file_saver\";\nimport excelFormatConverter from \"./excel_format_converter\";\nimport ExcelFile from \"./excel/excel.file\";\nimport { Deferred } from \"../core/utils/deferred\";\nvar XML_TAG = '<?xml version=\"1.0\" encoding=\"utf-8\"?>';\nvar GROUP_SHEET_PR_XML = '<sheetPr><outlinePr summaryBelow=\"0\"/></sheetPr>';\nvar SINGLE_SHEET_PR_XML = \"<sheetPr/>\";\nvar BASE_STYLE_XML2 = '<borders count=\"1\"><border><left style=\"thin\"><color rgb=\"FFD3D3D3\"/></left><right style=\"thin\"><color rgb=\"FFD3D3D3\"/></right><top style=\"thin\"><color rgb=\"FFD3D3D3\"/></top><bottom style=\"thin\"><color rgb=\"FFD3D3D3\"/></bottom></border></borders><cellStyleXfs count=\"1\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\"/></cellStyleXfs>';\nvar OPEN_XML_FORMAT_URL = \"http://schemas.openxmlformats.org\";\nvar RELATIONSHIP_PART_NAME = \"rels\";\nvar XL_FOLDER_NAME = \"xl\";\nvar WORKBOOK_FILE_NAME = \"workbook.xml\";\nvar CONTENTTYPES_FILE_NAME = \"[Content_Types].xml\";\nvar SHAREDSTRING_FILE_NAME = \"sharedStrings.xml\";\nvar STYLE_FILE_NAME = \"styles.xml\";\nvar WORKSHEETS_FOLDER = \"worksheets\";\nvar WORKSHEET_FILE_NAME = \"sheet1.xml\";\nvar WORKSHEET_HEADER_XML = '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><worksheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\">';\nvar VALID_TYPES = {\n  boolean: \"b\",\n  date: \"d\",\n  number: \"n\",\n  string: \"s\"\n};\nvar EXCEL_START_TIME = Date.UTC(1899, 11, 30);\nvar DAYS_COUNT_BEFORE_29_FEB_1900 = 60;\nvar MAX_DIGIT_WIDTH_IN_PIXELS = 7;\nvar UNSUPPORTED_FORMAT_MAPPING = {\n  quarter: \"shortDate\",\n  quarterAndYear: \"shortDate\",\n  minute: \"longTime\",\n  millisecond: \"longTime\"\n};\nexport var ExcelCreator = Class.inherit({\n  _getXMLTag: function _getXMLTag(tagName, attributes, content) {\n    var result = \"<\" + tagName;\n    var i;\n    var length = attributes.length;\n    var attr;\n\n    for (i = 0; i < length; i++) {\n      attr = attributes[i];\n\n      if (void 0 !== attr.value) {\n        result = result + \" \" + attr.name + '=\"' + attr.value + '\"';\n      }\n    }\n\n    return isDefined(content) ? result + \">\" + content + \"</\" + tagName + \">\" : result + \" />\";\n  },\n  _convertToExcelCellRef: function _convertToExcelCellRef(zeroBasedRowIndex, zeroBasedCellIndex) {\n    var columnName = \"\";\n    var charCode;\n    var isCellIndexFound;\n\n    while (!isCellIndexFound) {\n      charCode = 65 + (zeroBasedCellIndex >= 26 ? zeroBasedCellIndex % 26 : Math.ceil(zeroBasedCellIndex));\n      columnName = String.fromCharCode(charCode) + columnName;\n\n      if (zeroBasedCellIndex >= 26) {\n        zeroBasedCellIndex = Math.floor(zeroBasedCellIndex / 26) - 1;\n      } else {\n        isCellIndexFound = true;\n      }\n    }\n\n    return columnName + (zeroBasedRowIndex + 1);\n  },\n  _convertToExcelCellRefAndTrackMaxIndex: function _convertToExcelCellRefAndTrackMaxIndex(rowIndex, cellIndex) {\n    if (this._maxRowIndex < Number(rowIndex)) {\n      this._maxRowIndex = Number(rowIndex);\n    }\n\n    if (this._maxColumnIndex < Number(cellIndex)) {\n      this._maxColumnIndex = Number(cellIndex);\n    }\n\n    return this._convertToExcelCellRef(rowIndex, cellIndex);\n  },\n  _getDataType: function _getDataType(dataType) {\n    return VALID_TYPES[dataType] || VALID_TYPES.string;\n  },\n  _tryGetExcelCellDataType: function _tryGetExcelCellDataType(object) {\n    if (isDefined(object)) {\n      if (\"number\" === typeof object) {\n        if (isFinite(object)) {\n          return VALID_TYPES.number;\n        } else {\n          return VALID_TYPES.string;\n        }\n      } else if (isString(object)) {\n        return VALID_TYPES.string;\n      } else if (isDate(object)) {\n        return VALID_TYPES.number;\n      } else if (isBoolean(object)) {\n        return VALID_TYPES.boolean;\n      }\n    }\n  },\n  _formatObjectConverter: function _formatObjectConverter(format, dataType) {\n    var result = {\n      format: format,\n      precision: format && format.precision,\n      dataType: dataType\n    };\n\n    if (isObject(format)) {\n      return extend(result, format, {\n        format: format.formatter || format.type,\n        currency: format.currency\n      });\n    }\n\n    return result;\n  },\n  _tryConvertToExcelNumberFormat: function _tryConvertToExcelNumberFormat(format, dataType) {\n    var newFormat = this._formatObjectConverter(format, dataType);\n\n    format = newFormat.format;\n    var currency = newFormat.currency;\n    dataType = newFormat.dataType;\n\n    if (isDefined(format) && \"date\" === dataType) {\n      format = UNSUPPORTED_FORMAT_MAPPING[format && format.type || format] || format;\n    }\n\n    return excelFormatConverter.convertFormat(format, newFormat.precision, dataType, currency);\n  },\n  _appendString: function _appendString(value) {\n    if (isDefined(value)) {\n      value = String(value);\n\n      if (value.length) {\n        value = encodeHtml(value);\n\n        if (void 0 === this._stringHash[value]) {\n          this._stringHash[value] = this._stringArray.length;\n\n          this._stringArray.push(value);\n        }\n\n        return this._stringHash[value];\n      }\n    }\n  },\n  _tryGetExcelDateValue: function _tryGetExcelDateValue(date) {\n    var days;\n    var totalTime;\n\n    if (isDate(date)) {\n      days = Math.floor((Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()) - EXCEL_START_TIME) / 864e5);\n\n      if (days < DAYS_COUNT_BEFORE_29_FEB_1900) {\n        days--;\n      }\n\n      totalTime = (3600 * date.getHours() + 60 * date.getMinutes() + date.getSeconds()) / 86400;\n      return days + totalTime;\n    }\n  },\n  _prepareValue: function _prepareValue(rowIndex, cellIndex) {\n    var dataProvider = this._dataProvider;\n\n    var _ref2 = dataProvider.getCellData(rowIndex, cellIndex) || {},\n        cellSourceData = _ref2.cellSourceData;\n\n    var _ref3 = dataProvider.getCellData(rowIndex, cellIndex) || {},\n        value = _ref3.value;\n\n    var sourceValue;\n\n    var type = this._getDataType(dataProvider.getCellType(rowIndex, cellIndex));\n\n    if (type === VALID_TYPES.date && !isDate(value)) {\n      type = VALID_TYPES.string;\n    }\n\n    switch (type) {\n      case VALID_TYPES.string:\n        sourceValue = value;\n        value = this._appendString(value);\n        break;\n\n      case VALID_TYPES.date:\n        sourceValue = value;\n        value = this._tryGetExcelDateValue(value);\n        type = VALID_TYPES.number;\n    }\n\n    return {\n      value: value,\n      type: type,\n      sourceValue: sourceValue,\n      cellSourceData: cellSourceData\n    };\n  },\n  _callCustomizeExcelCell: function _callCustomizeExcelCell(_ref) {\n    var dataProvider = _ref.dataProvider,\n        value = _ref.value,\n        style = _ref.style,\n        sourceData = _ref.sourceData;\n    var styleCopy = ExcelFile.copyCellFormat(style);\n    var args = {\n      value: value,\n      numberFormat: styleCopy.numberFormat,\n      clearStyle: function clearStyle() {\n        this.horizontalAlignment = null;\n        this.verticalAlignment = null;\n        this.wrapTextEnabled = null;\n        this.font = null;\n        this.numberFormat = null;\n      }\n    };\n\n    if (isDefined(styleCopy)) {\n      if (isDefined(styleCopy.alignment)) {\n        args.horizontalAlignment = styleCopy.alignment.horizontal;\n        args.verticalAlignment = styleCopy.alignment.vertical;\n        args.wrapTextEnabled = styleCopy.alignment.wrapText;\n      }\n\n      args.backgroundColor = styleCopy.backgroundColor;\n      args.fillPatternType = styleCopy.fillPatternType;\n      args.fillPatternColor = styleCopy.fillPatternColor;\n      args.font = styleCopy.font;\n    }\n\n    dataProvider.customizeExcelCell(args, sourceData);\n    var newStyle = styleCopy || {};\n    newStyle.font = args.font;\n    newStyle.alignment = newStyle.alignment || {};\n    newStyle.alignment.horizontal = args.horizontalAlignment;\n    newStyle.alignment.vertical = args.verticalAlignment;\n    newStyle.alignment.wrapText = args.wrapTextEnabled;\n    newStyle.backgroundColor = args.backgroundColor;\n    newStyle.fillPatternType = args.fillPatternType;\n    newStyle.fillPatternColor = args.fillPatternColor;\n    newStyle.numberFormat = args.numberFormat;\n    return {\n      value: args.value,\n      style: newStyle\n    };\n  },\n  _getDataArray: function _getDataArray() {\n    var rowIndex;\n    var cellIndex;\n    var cellsArray;\n    var cellData;\n    var result = [];\n    var dataProvider = this._dataProvider;\n    var rowsLength = dataProvider.getRowsCount();\n    var columns = dataProvider.getColumns();\n    var cellsLength;\n\n    for (rowIndex = 0; rowIndex < rowsLength; rowIndex++) {\n      cellsArray = [];\n      cellsLength = columns.length;\n\n      for (cellIndex = 0; cellIndex !== cellsLength; cellIndex++) {\n        cellData = this._prepareValue(rowIndex, cellIndex);\n        var styleArrayIndex = dataProvider.getStyleId(rowIndex, cellIndex);\n        var cellStyleId = this._styleArrayIndexToCellStyleIdMap[styleArrayIndex];\n\n        if (dataProvider.hasCustomizeExcelCell && dataProvider.hasCustomizeExcelCell()) {\n          var value = cellData.sourceValue || cellData.value;\n\n          var modifiedExcelCell = this._callCustomizeExcelCell({\n            dataProvider: dataProvider,\n            value: value,\n            style: this._styleArray[styleArrayIndex],\n            sourceData: cellData.cellSourceData\n          });\n\n          if (modifiedExcelCell.value !== value) {\n            if (typeof modifiedExcelCell.value !== typeof value || \"number\" === typeof modifiedExcelCell.value && !isFinite(modifiedExcelCell.value)) {\n              var cellDataType = this._tryGetExcelCellDataType(modifiedExcelCell.value);\n\n              if (isDefined(cellDataType)) {\n                cellData.type = cellDataType;\n              }\n            }\n\n            switch (cellData.type) {\n              case VALID_TYPES.string:\n                cellData.value = this._appendString(modifiedExcelCell.value);\n                break;\n\n              case VALID_TYPES.date:\n                cellData.value = modifiedExcelCell.value;\n                break;\n\n              case VALID_TYPES.number:\n                var newValue = modifiedExcelCell.value;\n\n                var excelDateValue = this._tryGetExcelDateValue(newValue);\n\n                if (isDefined(excelDateValue)) {\n                  newValue = excelDateValue;\n                }\n\n                cellData.value = newValue;\n                break;\n\n              default:\n                cellData.value = modifiedExcelCell.value;\n            }\n          }\n\n          cellStyleId = this._excelFile.registerCellFormat(modifiedExcelCell.style);\n        }\n\n        cellsArray.push({\n          style: cellStyleId,\n          value: cellData.value,\n          type: cellData.type\n        });\n      }\n\n      if (!this._needSheetPr && dataProvider.getGroupLevel(rowIndex) > 0) {\n        this._needSheetPr = true;\n      }\n\n      result.push(cellsArray);\n    }\n\n    return result;\n  },\n  _calculateWidth: function _calculateWidth(pixelsWidth) {\n    pixelsWidth = parseInt(pixelsWidth, 10);\n\n    if (!pixelsWidth || pixelsWidth < 5) {\n      pixelsWidth = 100;\n    }\n\n    return Math.min(255, Math.floor((pixelsWidth - 5) / MAX_DIGIT_WIDTH_IN_PIXELS * 100 + .5) / 100);\n  },\n  _prepareStyleData: function _prepareStyleData() {\n    var _this = this;\n\n    var that = this;\n\n    var styles = that._dataProvider.getStyles();\n\n    that._dataProvider.getColumns().forEach(function (column) {\n      that._colsArray.push(that._calculateWidth(column.width));\n    });\n\n    var fonts = [{\n      size: 11,\n      color: {\n        theme: 1\n      },\n      name: \"Calibri\",\n      family: 2,\n      scheme: \"minor\",\n      bold: false\n    }, {\n      size: 11,\n      color: {\n        theme: 1\n      },\n      name: \"Calibri\",\n      family: 2,\n      scheme: \"minor\",\n      bold: true\n    }];\n\n    this._excelFile.registerFont(fonts[0]);\n\n    this._excelFile.registerFont(fonts[1]);\n\n    styles.forEach(function (style) {\n      var numberFormat = that._tryConvertToExcelNumberFormat(style.format, style.dataType);\n\n      if (!isDefined(numberFormat)) {\n        numberFormat = 0;\n      }\n\n      that._styleArray.push({\n        font: fonts[Number(!!style.bold)],\n        numberFormat: numberFormat,\n        alignment: {\n          vertical: \"top\",\n          wrapText: !!style.wrapText,\n          horizontal: style.alignment || \"left\"\n        }\n      });\n    });\n    that._styleArrayIndexToCellStyleIdMap = that._styleArray.map(function (item) {\n      return _this._excelFile.registerCellFormat(item);\n    });\n  },\n  _prepareCellData: function _prepareCellData() {\n    this._cellsArray = this._getDataArray();\n  },\n  _createXMLRelationships: function _createXMLRelationships(xmlRelationships) {\n    return this._getXMLTag(\"Relationships\", [{\n      name: \"xmlns\",\n      value: OPEN_XML_FORMAT_URL + \"/package/2006/relationships\"\n    }], xmlRelationships);\n  },\n  _createXMLRelationship: function _createXMLRelationship(id, type, target) {\n    return this._getXMLTag(\"Relationship\", [{\n      name: \"Id\",\n      value: \"rId\" + id\n    }, {\n      name: \"Type\",\n      value: OPEN_XML_FORMAT_URL + \"/officeDocument/2006/relationships/\" + type\n    }, {\n      name: \"Target\",\n      value: target\n    }]);\n  },\n  _getWorkbookContent: function _getWorkbookContent() {\n    return XML_TAG + this._getXMLTag(\"workbook\", [{\n      name: \"xmlns:r\",\n      value: OPEN_XML_FORMAT_URL + \"/officeDocument/2006/relationships\"\n    }, {\n      name: \"xmlns\",\n      value: OPEN_XML_FORMAT_URL + \"/spreadsheetml/2006/main\"\n    }], '<bookViews><workbookView xWindow=\"0\" yWindow=\"0\" windowWidth=\"0\" windowHeight=\"0\"/></bookViews><sheets><sheet name=\"Sheet\" sheetId=\"1\" r:id=\"rId1\" /></sheets><definedNames><definedName name=\"_xlnm.Print_Titles\" localSheetId=\"0\">Sheet!$1:$1</definedName><definedName name=\"_xlnm._FilterDatabase\" hidden=\"0\" localSheetId=\"0\">Sheet!$A$1:$F$6332</definedName></definedNames>');\n  },\n  _getContentTypesContent: function _getContentTypesContent() {\n    return XML_TAG + '<Types xmlns=\"' + OPEN_XML_FORMAT_URL + '/package/2006/content-types\"><Default Extension=\"rels\" ContentType=\"application/vnd.openxmlformats-package.relationships+xml\" /><Default Extension=\"xml\" ContentType=\"application/xml\" /><Override PartName=\"/xl/worksheets/sheet1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\" /><Override PartName=\"/xl/styles.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\" /><Override PartName=\"/xl/sharedStrings.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml\" /><Override PartName=\"/xl/workbook.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\" /></Types>';\n  },\n  _generateStylesXML: function _generateStylesXML() {\n    var folder = this._zip.folder(XL_FOLDER_NAME);\n\n    var XML = \"\";\n    XML += this._excelFile.generateNumberFormatsXml();\n    XML += this._excelFile.generateFontsXml();\n    XML += this._excelFile.generateFillsXml();\n    XML += BASE_STYLE_XML2;\n    XML += this._excelFile.generateCellFormatsXml();\n    XML += this._getXMLTag(\"cellStyles\", [{\n      name: \"count\",\n      value: 1\n    }], this._getXMLTag(\"cellStyle\", [{\n      name: \"name\",\n      value: \"Normal\"\n    }, {\n      name: \"xfId\",\n      value: 0\n    }, {\n      name: \"builtinId\",\n      value: 0\n    }]));\n    XML = XML_TAG + this._getXMLTag(\"styleSheet\", [{\n      name: \"xmlns\",\n      value: OPEN_XML_FORMAT_URL + \"/spreadsheetml/2006/main\"\n    }], XML);\n    folder.file(STYLE_FILE_NAME, XML);\n    this._styleArray = [];\n  },\n  _generateStringsXML: function _generateStringsXML() {\n    var folder = this._zip.folder(XL_FOLDER_NAME);\n\n    var stringIndex;\n    var stringsLength = this._stringArray.length;\n    var sharedStringXml = XML_TAG;\n\n    for (stringIndex = 0; stringIndex < stringsLength; stringIndex++) {\n      this._stringArray[stringIndex] = this._getXMLTag(\"si\", [], this._getXMLTag(\"t\", [], this._stringArray[stringIndex]));\n    }\n\n    sharedStringXml += this._getXMLTag(\"sst\", [{\n      name: \"xmlns\",\n      value: OPEN_XML_FORMAT_URL + \"/spreadsheetml/2006/main\"\n    }, {\n      name: \"count\",\n      value: this._stringArray.length\n    }, {\n      name: \"uniqueCount\",\n      value: this._stringArray.length\n    }], this._stringArray.join(\"\"));\n    folder.file(SHAREDSTRING_FILE_NAME, sharedStringXml);\n    this._stringArray = [];\n  },\n  _getPaneXML: function _getPaneXML() {\n    var attributes = [{\n      name: \"activePane\",\n      value: \"bottomLeft\"\n    }, {\n      name: \"state\",\n      value: \"frozen\"\n    }];\n\n    var frozenArea = this._dataProvider.getFrozenArea();\n\n    if (!(frozenArea.x || frozenArea.y)) {\n      return \"\";\n    }\n\n    if (frozenArea.x) {\n      attributes.push({\n        name: \"xSplit\",\n        value: frozenArea.x\n      });\n    }\n\n    if (frozenArea.y) {\n      attributes.push({\n        name: \"ySplit\",\n        value: frozenArea.y\n      });\n    }\n\n    attributes.push({\n      name: \"topLeftCell\",\n      value: this._convertToExcelCellRefAndTrackMaxIndex(frozenArea.y, frozenArea.x)\n    });\n    return this._getXMLTag(\"pane\", attributes);\n  },\n  _getAutoFilterXML: function _getAutoFilterXML(maxCellIndex) {\n    if (this._options.autoFilterEnabled) {\n      return '<autoFilter ref=\"A' + this._dataProvider.getHeaderRowCount() + \":\" + maxCellIndex + '\" />';\n    }\n\n    return \"\";\n  },\n  _getIgnoredErrorsXML: function _getIgnoredErrorsXML(maxCellIndex) {\n    if (this._options.ignoreErrors) {\n      return '<ignoredErrors><ignoredError sqref=\"A1:' + maxCellIndex + '\" numberStoredAsText=\"1\" /></ignoredErrors>';\n    }\n\n    return \"\";\n  },\n  _generateWorksheetXML: function _generateWorksheetXML() {\n    var colIndex;\n    var rowIndex;\n    var cellData;\n    var xmlCells;\n    var xmlRows = [];\n    var rowsLength = this._cellsArray.length;\n    var cellsLength;\n    var colsLength = this._colsArray.length;\n    var rSpans = \"1:\" + colsLength;\n    var headerRowCount = this._dataProvider.getHeaderRowCount ? this._dataProvider.getHeaderRowCount() : 1;\n    var xmlResult = [WORKSHEET_HEADER_XML];\n    xmlResult.push(this._needSheetPr ? GROUP_SHEET_PR_XML : SINGLE_SHEET_PR_XML);\n    xmlResult.push('<dimension ref=\"A1:C1\"/>');\n    xmlResult.push(\"<sheetViews><sheetView \");\n    xmlResult.push(this._rtlEnabled ? 'rightToLeft=\"1\" ' : \"\");\n    xmlResult.push('tabSelected=\"1\" workbookViewId=\"0\">');\n    xmlResult.push(this._getPaneXML());\n    xmlResult.push(\"</sheetView></sheetViews>\");\n    xmlResult.push('<sheetFormatPr defaultRowHeight=\"15\"');\n    xmlResult.push(' outlineLevelRow=\"' + (this._dataProvider.getRowsCount() > 0 ? this._dataProvider.getGroupLevel(0) : 0) + '\"');\n    xmlResult.push(' x14ac:dyDescent=\"0.25\"/>');\n\n    for (colIndex = 0; colIndex < colsLength; colIndex++) {\n      this._colsArray[colIndex] = this._getXMLTag(\"col\", [{\n        name: \"width\",\n        value: this._colsArray[colIndex]\n      }, {\n        name: \"min\",\n        value: Number(colIndex) + 1\n      }, {\n        name: \"max\",\n        value: Number(colIndex) + 1\n      }, {\n        name: \"customWidth\",\n        value: 1\n      }]);\n    }\n\n    xmlResult.push(this._getXMLTag(\"cols\", [], this._colsArray.join(\"\")) + \"<sheetData>\");\n\n    for (rowIndex = 0; rowIndex < rowsLength; rowIndex++) {\n      xmlCells = [];\n      cellsLength = this._cellsArray[rowIndex].length;\n\n      for (colIndex = 0; colIndex < cellsLength; colIndex++) {\n        rowIndex = Number(rowIndex);\n        cellData = this._cellsArray[rowIndex][colIndex];\n        xmlCells.push(this._getXMLTag(\"c\", [{\n          name: \"r\",\n          value: this._convertToExcelCellRefAndTrackMaxIndex(rowIndex, colIndex)\n        }, {\n          name: \"s\",\n          value: cellData.style\n        }, {\n          name: \"t\",\n          value: cellData.type\n        }], isDefined(cellData.value) ? this._getXMLTag(\"v\", [], cellData.value) : null));\n      }\n\n      xmlRows.push(this._getXMLTag(\"row\", [{\n        name: \"r\",\n        value: Number(rowIndex) + 1\n      }, {\n        name: \"spans\",\n        value: rSpans\n      }, {\n        name: \"outlineLevel\",\n        value: rowIndex >= headerRowCount ? this._dataProvider.getGroupLevel(rowIndex) : 0\n      }, {\n        name: \"x14ac:dyDescent\",\n        value: \"0.25\"\n      }], xmlCells.join(\"\")));\n      this._cellsArray[rowIndex] = null;\n\n      if (xmlRows.length > 1e4) {\n        xmlResult.push(xmlRows.join(\"\"));\n        xmlRows = [];\n      }\n    }\n\n    xmlResult.push(xmlRows.join(\"\"));\n    xmlRows = [];\n\n    var rightBottomCellRef = this._convertToExcelCellRef(this._maxRowIndex, this._maxColumnIndex);\n\n    xmlResult.push(\"</sheetData>\" + this._getAutoFilterXML(rightBottomCellRef) + this._generateMergingXML() + this._getIgnoredErrorsXML(rightBottomCellRef) + \"</worksheet>\");\n\n    this._zip.folder(XL_FOLDER_NAME).folder(WORKSHEETS_FOLDER).file(WORKSHEET_FILE_NAME, xmlResult.join(\"\"));\n\n    this._colsArray = [];\n    this._cellsArray = [];\n    xmlResult = [];\n  },\n  _generateMergingXML: function _generateMergingXML() {\n    var k;\n    var l;\n    var cellIndex;\n    var rowIndex;\n    var rowsLength = isDefined(this._dataProvider.getHeaderRowCount) ? this._dataProvider.getHeaderRowCount() : this._dataProvider.getRowsCount();\n\n    var columnsLength = this._dataProvider.getColumns().length;\n\n    var usedArea = [];\n    var mergeArray = [];\n    var mergeIndex;\n    var mergeXML = \"\";\n\n    for (rowIndex = 0; rowIndex < rowsLength; rowIndex++) {\n      for (cellIndex = 0; cellIndex !== columnsLength; cellIndex++) {\n        if (!isDefined(usedArea[rowIndex]) || !isDefined(usedArea[rowIndex][cellIndex])) {\n          var cellMerge = this._dataProvider.getCellMerging(rowIndex, cellIndex);\n\n          if (cellMerge.colspan || cellMerge.rowspan) {\n            mergeArray.push({\n              start: this._convertToExcelCellRefAndTrackMaxIndex(rowIndex, cellIndex),\n              end: this._convertToExcelCellRefAndTrackMaxIndex(rowIndex + (cellMerge.rowspan || 0), cellIndex + (cellMerge.colspan || 0))\n            });\n\n            for (k = rowIndex; k <= rowIndex + cellMerge.rowspan || 0; k++) {\n              for (l = cellIndex; l <= cellIndex + cellMerge.colspan || 0; l++) {\n                if (!isDefined(usedArea[k])) {\n                  usedArea[k] = [];\n                }\n\n                usedArea[k][l] = true;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    var mergeArrayLength = mergeArray.length;\n\n    for (mergeIndex = 0; mergeIndex < mergeArrayLength; mergeIndex++) {\n      mergeXML += this._getXMLTag(\"mergeCell\", [{\n        name: \"ref\",\n        value: mergeArray[mergeIndex].start + \":\" + mergeArray[mergeIndex].end\n      }]);\n    }\n\n    return mergeXML.length ? this._getXMLTag(\"mergeCells\", [{\n      name: \"count\",\n      value: mergeArrayLength\n    }], mergeXML) : \"\";\n  },\n  _generateCommonXML: function _generateCommonXML() {\n    var relsFileContent = XML_TAG + this._createXMLRelationships(this._createXMLRelationship(1, \"officeDocument\", \"xl/\" + WORKBOOK_FILE_NAME));\n\n    var folder = this._zip.folder(XL_FOLDER_NAME);\n\n    var relsXML = XML_TAG;\n\n    this._zip.folder(\"_\" + RELATIONSHIP_PART_NAME).file(\".\" + RELATIONSHIP_PART_NAME, relsFileContent);\n\n    var xmlRelationships = this._createXMLRelationship(1, \"worksheet\", \"worksheets/\" + WORKSHEET_FILE_NAME) + this._createXMLRelationship(2, \"styles\", STYLE_FILE_NAME) + this._createXMLRelationship(3, \"sharedStrings\", SHAREDSTRING_FILE_NAME);\n\n    relsXML += this._createXMLRelationships(xmlRelationships);\n    folder.folder(\"_\" + RELATIONSHIP_PART_NAME).file(WORKBOOK_FILE_NAME + \".rels\", relsXML);\n    folder.file(WORKBOOK_FILE_NAME, this._getWorkbookContent());\n\n    this._zip.file(CONTENTTYPES_FILE_NAME, this._getContentTypesContent());\n  },\n  _generateContent: function _generateContent() {\n    this._prepareStyleData();\n\n    this._prepareCellData();\n\n    this._generateWorkXML();\n\n    this._generateCommonXML();\n  },\n  _generateWorkXML: function _generateWorkXML() {\n    this._generateStylesXML();\n\n    this._generateStringsXML();\n\n    this._generateWorksheetXML();\n  },\n  ctor: function ctor(dataProvider, options) {\n    this._rtlEnabled = options && !!options.rtlEnabled;\n    this._options = options;\n    this._maxRowIndex = 0;\n    this._maxColumnIndex = 0;\n    this._stringArray = [];\n    this._stringHash = {};\n    this._styleArray = [];\n    this._colsArray = [];\n    this._cellsArray = [];\n    this._needSheetPr = false;\n    this._dataProvider = dataProvider;\n    this._excelFile = new ExcelFile();\n\n    if (isDefined(ExcelCreator.JSZip)) {\n      this._zip = new ExcelCreator.JSZip();\n    } else {\n      this._zip = null;\n    }\n  },\n  _checkZipState: function _checkZipState() {\n    if (!this._zip) {\n      throw errors.Error(\"E1041\", \"JSZip\");\n    }\n  },\n  ready: function ready() {\n    return this._dataProvider.ready();\n  },\n  getData: function getData(isBlob) {\n    var options = {\n      type: isBlob ? \"blob\" : \"base64\",\n      compression: \"DEFLATE\",\n      mimeType: MIME_TYPES.EXCEL\n    };\n    var deferred = new Deferred();\n\n    this._checkZipState();\n\n    this._generateContent();\n\n    if (this._zip.generateAsync) {\n      this._zip.generateAsync(options).then(deferred.resolve);\n    } else {\n      deferred.resolve(this._zip.generate(options));\n    }\n\n    return deferred;\n  }\n});\nExcelCreator.JSZip = JSZip;\nexport function getData(data, options) {\n  var excelCreator = new ExcelCreator(data, options);\n\n  excelCreator._checkZipState();\n\n  return excelCreator.ready().then(function () {\n    return excelCreator.getData(isFunction(getWindow().Blob));\n  });\n}","map":null,"metadata":{},"sourceType":"module"}