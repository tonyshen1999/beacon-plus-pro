{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.rows.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { getHeight, getOuterHeight, getWidth } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport { getWindow, hasWindow } from \"../../core/utils/window\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { deferRender, deferUpdate } from \"../../core/utils/common\";\nimport { setHeight } from \"../../core/utils/style\";\nimport { isDefined, isNumeric, isString } from \"../../core/utils/type\";\nimport { each } from \"../../core/utils/iterator\";\nimport { extend } from \"../../core/utils/extend\";\nimport { getBoundingRect, getDefaultAlignment } from \"../../core/utils/position\";\nimport { isEmpty } from \"../../core/utils/string\";\nimport { compileGetter } from \"../../core/utils/data\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nimport { ColumnsView } from \"./ui.grid_core.columns_view\";\nimport Scrollable from \"../scroll_view/ui.scrollable\";\nimport { removeEvent } from \"../../events/remove\";\nimport messageLocalization from \"../../localization/message\";\nimport browser from \"../../core/utils/browser\";\nvar ROWS_VIEW_CLASS = \"rowsview\";\nvar CONTENT_CLASS = \"content\";\nvar NOWRAP_CLASS = \"nowrap\";\nvar GROUP_ROW_CLASS = \"dx-group-row\";\nvar GROUP_CELL_CLASS = \"dx-group-cell\";\nvar DATA_ROW_CLASS = \"dx-data-row\";\nvar FREE_SPACE_CLASS = \"dx-freespace-row\";\nvar ROW_LINES_CLASS = \"dx-row-lines\";\nvar COLUMN_LINES_CLASS = \"dx-column-lines\";\nvar ROW_ALTERNATION_CLASS = \"dx-row-alt\";\nvar LAST_ROW_BORDER = \"dx-last-row-border\";\nvar EMPTY_CLASS = \"dx-empty\";\nvar ROW_INSERTED_ANIMATION_CLASS = \"row-inserted-animation\";\nvar LOADPANEL_HIDE_TIMEOUT = 200;\n\nfunction getMaxHorizontalScrollOffset(scrollable) {\n  return scrollable ? Math.round(scrollable.scrollWidth() - scrollable.clientWidth()) : 0;\n}\n\nexport var rowsModule = {\n  defaultOptions: function defaultOptions() {\n    return {\n      hoverStateEnabled: false,\n      scrolling: {\n        useNative: \"auto\"\n      },\n      loadPanel: {\n        enabled: \"auto\",\n        text: messageLocalization.format(\"Loading\"),\n        width: 200,\n        height: 90,\n        showIndicator: true,\n        indicatorSrc: \"\",\n        showPane: true\n      },\n      dataRowTemplate: null,\n      columnAutoWidth: false,\n      noDataText: messageLocalization.format(\"dxDataGrid-noDataText\"),\n      wordWrapEnabled: false,\n      showColumnLines: true,\n      showRowLines: false,\n      rowAlternationEnabled: false,\n      activeStateEnabled: false,\n      twoWayBindingEnabled: true\n    };\n  },\n  views: {\n    rowsView: ColumnsView.inherit(function () {\n      var defaultCellTemplate = function defaultCellTemplate($container, options) {\n        var isDataTextEmpty = isEmpty(options.text) && \"data\" === options.rowType;\n        var text = options.text;\n        var container = $container.get(0);\n\n        if (isDataTextEmpty) {\n          gridCoreUtils.setEmptyText($container);\n        } else if (options.column.encodeHtml) {\n          container.textContent = text;\n        } else {\n          container.innerHTML = text;\n        }\n      };\n\n      return {\n        _getDefaultTemplate: function _getDefaultTemplate(column) {\n          switch (column.command) {\n            case \"empty\":\n              return function (container) {\n                container.html(\"&nbsp;\");\n              };\n\n            default:\n              return defaultCellTemplate;\n          }\n        },\n        _getDefaultGroupTemplate: function _getDefaultGroupTemplate(column) {\n          var summaryTexts = this.option(\"summary.texts\");\n          return function ($container, options) {\n            var data = options.data;\n            var text = options.column.caption + \": \" + options.text;\n            var container = $container.get(0);\n\n            if (options.summaryItems && options.summaryItems.length) {\n              text += \" \" + gridCoreUtils.getGroupRowSummaryText(options.summaryItems, summaryTexts);\n            }\n\n            if (data) {\n              if (options.groupContinuedMessage && options.groupContinuesMessage) {\n                text += \" (\" + options.groupContinuedMessage + \". \" + options.groupContinuesMessage + \")\";\n              } else if (options.groupContinuesMessage) {\n                text += \" (\" + options.groupContinuesMessage + \")\";\n              } else if (options.groupContinuedMessage) {\n                text += \" (\" + options.groupContinuedMessage + \")\";\n              }\n            }\n\n            $container.addClass(GROUP_CELL_CLASS);\n\n            if (column.encodeHtml) {\n              container.textContent = text;\n            } else {\n              container.innerHTML = text;\n            }\n          };\n        },\n        _update: function _update() {},\n        _getCellTemplate: function _getCellTemplate(options) {\n          var column = options.column;\n          var template;\n\n          if (\"group\" === options.rowType && isDefined(column.groupIndex) && !column.showWhenGrouped && !column.command) {\n            template = column.groupCellTemplate || {\n              allowRenderToDetachedContainer: true,\n              render: this._getDefaultGroupTemplate(column)\n            };\n          } else if ((\"data\" === options.rowType || column.command) && column.cellTemplate) {\n            template = column.cellTemplate;\n          } else {\n            template = {\n              allowRenderToDetachedContainer: true,\n              render: this._getDefaultTemplate(column)\n            };\n          }\n\n          return template;\n        },\n        _createRow: function _createRow(row) {\n          var $row = this.callBase.apply(this, arguments);\n\n          if (row) {\n            var isGroup = \"group\" === row.rowType;\n            var isDataRow = \"data\" === row.rowType;\n            isDataRow && $row.addClass(DATA_ROW_CLASS);\n            isDataRow && this.option(\"showRowLines\") && $row.addClass(ROW_LINES_CLASS);\n            this.option(\"showColumnLines\") && $row.addClass(COLUMN_LINES_CLASS);\n\n            if (false === row.visible) {\n              $row.hide();\n            }\n\n            if (isGroup) {\n              $row.addClass(GROUP_ROW_CLASS);\n              var isRowExpanded = row.isExpanded;\n              this.setAria(\"role\", \"row\", $row);\n              this.setAria(\"expanded\", isDefined(isRowExpanded) && isRowExpanded.toString(), $row);\n            }\n          }\n\n          return $row;\n        },\n        _rowPrepared: function _rowPrepared($row, rowOptions, row) {\n          var _this = this;\n\n          if (\"data\" === rowOptions.rowType) {\n            if (this.option(\"rowAlternationEnabled\")) {\n              this._isAltRow(row) && $row.addClass(ROW_ALTERNATION_CLASS);\n              rowOptions.watch && rowOptions.watch(function () {\n                return _this._isAltRow(row);\n              }, function (value) {\n                $row.toggleClass(ROW_ALTERNATION_CLASS, value);\n              });\n            }\n\n            this._setAriaRowIndex(rowOptions, $row);\n\n            rowOptions.watch && rowOptions.watch(function () {\n              return rowOptions.rowIndex;\n            }, function () {\n              return _this._setAriaRowIndex(rowOptions, $row);\n            });\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        _setAriaRowIndex: function _setAriaRowIndex(row, $row) {\n          var component = this.component;\n          var isPagerMode = \"standard\" === component.option(\"scrolling.mode\") && !gridCoreUtils.isVirtualRowRendering(component);\n          var rowIndex = row.rowIndex + 1;\n\n          if (isPagerMode) {\n            rowIndex = component.pageIndex() * component.pageSize() + rowIndex;\n          } else {\n            rowIndex += this._dataController.getRowIndexOffset();\n          }\n\n          this.setAria(\"rowindex\", rowIndex, $row);\n        },\n        _afterRowPrepared: function _afterRowPrepared(e) {\n          var _this2 = this;\n\n          var arg = e.args[0];\n          var dataController = this._dataController;\n          var row = dataController.getVisibleRows()[arg.rowIndex];\n          var watch = this.option(\"integrationOptions.watchMethod\");\n\n          if (!arg.data || \"data\" !== arg.rowType || arg.isNewRow || !this.option(\"twoWayBindingEnabled\") || !watch || !row) {\n            return;\n          }\n\n          var dispose = watch(function () {\n            return dataController.generateDataValues(arg.data, arg.columns);\n          }, function () {\n            dataController.repaintRows([row.rowIndex], _this2.option(\"repaintChangesOnly\"));\n          }, {\n            deep: true,\n            skipImmediate: true\n          });\n          eventsEngine.on(arg.rowElement, removeEvent, dispose);\n        },\n        _renderScrollable: function _renderScrollable(force) {\n          var $element = this.element();\n\n          if (!$element.children().length) {\n            $element.append(\"<div>\");\n          }\n\n          if (force || !this._loadPanel) {\n            this._renderLoadPanel($element, $element.parent(), this._dataController.isLocalStore());\n          }\n\n          if ((force || !this.getScrollable()) && this._dataController.isLoaded()) {\n            var columns = this.getColumns();\n            var allColumnsHasWidth = true;\n\n            for (var i = 0; i < columns.length; i++) {\n              if (!columns[i].width && !columns[i].minWidth) {\n                allColumnsHasWidth = false;\n                break;\n              }\n            }\n\n            if (this.option(\"columnAutoWidth\") || this._hasHeight || allColumnsHasWidth || this._columnsController._isColumnFixing()) {\n              this._renderScrollableCore($element);\n            }\n          }\n        },\n        _handleScroll: function _handleScroll(e) {\n          var rtlEnabled = this.option(\"rtlEnabled\");\n          var isNativeScrolling = e.component.option(\"useNative\");\n          this._scrollTop = e.scrollOffset.top;\n          this._scrollLeft = e.scrollOffset.left;\n          var scrollLeft = e.scrollOffset.left;\n\n          if (rtlEnabled) {\n            this._scrollRight = getMaxHorizontalScrollOffset(e.component) - this._scrollLeft;\n\n            if (isNativeScrolling) {\n              scrollLeft = -this._scrollRight;\n            }\n\n            if (!this.isScrollbarVisible(true)) {\n              this._scrollLeft = -1;\n            }\n          }\n\n          this.scrollChanged.fire(_extends({}, e.scrollOffset, {\n            left: scrollLeft\n          }), this.name);\n        },\n        _renderScrollableCore: function _renderScrollableCore($element) {\n          var dxScrollableOptions = this._createScrollableOptions();\n\n          var scrollHandler = this._handleScroll.bind(this);\n\n          dxScrollableOptions.onScroll = scrollHandler;\n          this._scrollable = this._createComponent($element, Scrollable, dxScrollableOptions);\n          this._scrollableContainer = this._scrollable && $(this._scrollable.container());\n        },\n        _renderLoadPanel: gridCoreUtils.renderLoadPanel,\n        _renderContent: function _renderContent(contentElement, tableElement) {\n          contentElement.empty().append(tableElement);\n          return this._findContentElement();\n        },\n        _updateContent: function _updateContent(newTableElement, change) {\n          var that = this;\n          var tableElement = that.getTableElement();\n\n          var contentElement = that._findContentElement();\n\n          var changeType = change && change.changeType;\n          var executors = [];\n          var highlightChanges = this.option(\"highlightChanges\");\n          var rowInsertedClass = this.addWidgetPrefix(ROW_INSERTED_ANIMATION_CLASS);\n\n          switch (changeType) {\n            case \"update\":\n              each(change.rowIndices, function (index, rowIndex) {\n                var $newRowElement = that._getRowElements(newTableElement).eq(index);\n\n                var changeType = change.changeTypes && change.changeTypes[index];\n                var item = change.items && change.items[index];\n                executors.push(function () {\n                  var $rowsElement = that._getRowElements();\n\n                  var $rowElement = $rowsElement.eq(rowIndex);\n\n                  switch (changeType) {\n                    case \"update\":\n                      if (item) {\n                        var columnIndices = change.columnIndices && change.columnIndices[index];\n\n                        if (isDefined(item.visible) && item.visible !== $rowElement.is(\":visible\")) {\n                          $rowElement.toggle(item.visible);\n                        } else if (columnIndices) {\n                          that._updateCells($rowElement, $newRowElement, columnIndices);\n                        } else {\n                          $rowElement.replaceWith($newRowElement);\n                        }\n                      }\n\n                      break;\n\n                    case \"insert\":\n                      if (!$rowsElement.length) {\n                        if (tableElement) {\n                          var target = $newRowElement.is(\"tbody\") ? tableElement : tableElement.children(\"tbody\");\n                          $newRowElement.prependTo(target);\n                        }\n                      } else if ($rowElement.length) {\n                        $newRowElement.insertBefore($rowElement);\n                      } else {\n                        $newRowElement.insertAfter($rowsElement.last());\n                      }\n\n                      if (highlightChanges && change.isLiveUpdate) {\n                        $newRowElement.addClass(rowInsertedClass);\n                      }\n\n                      break;\n\n                    case \"remove\":\n                      $rowElement.remove();\n                  }\n                });\n              });\n              each(executors, function () {\n                this();\n              });\n              newTableElement.remove();\n              break;\n\n            default:\n              that.setTableElement(newTableElement);\n              contentElement.addClass(that.addWidgetPrefix(CONTENT_CLASS));\n\n              that._renderContent(contentElement, newTableElement);\n\n          }\n        },\n        _createEmptyRow: function _createEmptyRow(className, isFixed, height) {\n          var $cell;\n\n          var $row = this._createRow();\n\n          var columns = isFixed ? this.getFixedColumns() : this.getColumns();\n          $row.addClass(className).toggleClass(COLUMN_LINES_CLASS, this.option(\"showColumnLines\"));\n\n          for (var i = 0; i < columns.length; i++) {\n            $cell = this._createCell({\n              column: columns[i],\n              rowType: \"freeSpace\",\n              columnIndex: i,\n              columns: columns\n            });\n            isNumeric(height) && $cell.css(\"height\", height);\n            $row.append($cell);\n          }\n\n          this.setAria(\"role\", \"presentation\", $row);\n          return $row;\n        },\n        _appendEmptyRow: function _appendEmptyRow($table, $emptyRow, location) {\n          var $tBodies = this._getBodies($table);\n\n          var isTableContainer = !$tBodies.length || $emptyRow.is(\"tbody\");\n          var $container = isTableContainer ? $table : $tBodies;\n\n          if (\"top\" === location) {\n            $container.first().prepend($emptyRow);\n\n            if (isTableContainer) {\n              var $colgroup = $container.children(\"colgroup\");\n              $container.prepend($colgroup);\n            }\n          } else {\n            $container.last().append($emptyRow);\n          }\n        },\n        _renderFreeSpaceRow: function _renderFreeSpaceRow($tableElement) {\n          var $freeSpaceRowElement = this._createEmptyRow(FREE_SPACE_CLASS);\n\n          $freeSpaceRowElement = this._wrapRowIfNeed($tableElement, $freeSpaceRowElement);\n\n          this._appendEmptyRow($tableElement, $freeSpaceRowElement);\n        },\n        _checkRowKeys: function _checkRowKeys(options) {\n          var that = this;\n\n          var rows = that._getRows(options);\n\n          var keyExpr = that._dataController.store() && that._dataController.store().key();\n\n          keyExpr && rows.some(function (row) {\n            if (\"data\" === row.rowType && void 0 === row.key) {\n              that._dataController.fireError(\"E1046\", keyExpr);\n\n              return true;\n            }\n          });\n        },\n        _needUpdateRowHeight: function _needUpdateRowHeight(itemsCount) {\n          return itemsCount > 0 && !this._rowHeight;\n        },\n        _getRowsHeight: function _getRowsHeight($tableElement) {\n          var $rowElements = $tableElement.children(\"tbody\").children().not(\".dx-virtual-row\").not(\".\" + FREE_SPACE_CLASS);\n          return $rowElements.toArray().reduce(function (sum, row) {\n            return sum + getBoundingRect(row).height;\n          }, 0);\n        },\n        _updateRowHeight: function _updateRowHeight() {\n          var $tableElement = this.getTableElement();\n\n          var itemsCount = this._dataController.items().length;\n\n          if ($tableElement && this._needUpdateRowHeight(itemsCount)) {\n            var rowsHeight = this._getRowsHeight($tableElement);\n\n            this._rowHeight = rowsHeight / itemsCount;\n          }\n        },\n        _findContentElement: function _findContentElement() {\n          var $content = this.element();\n          var scrollable = this.getScrollable();\n\n          if ($content) {\n            if (scrollable) {\n              $content = $(scrollable.content());\n            }\n\n            return $content.children().first();\n          }\n        },\n        _getRowElements: function _getRowElements(tableElement) {\n          var $rows = this.callBase(tableElement);\n          return $rows && $rows.not(\".\" + FREE_SPACE_CLASS);\n        },\n        _getFreeSpaceRowElements: function _getFreeSpaceRowElements($table) {\n          var tableElements = $table || this.getTableElements();\n          return tableElements && tableElements.children(\"tbody\").children(\".\" + FREE_SPACE_CLASS);\n        },\n        _getNoDataText: function _getNoDataText() {\n          return this.option(\"noDataText\");\n        },\n        _rowClick: function _rowClick(e) {\n          var item = this._dataController.items()[e.rowIndex] || {};\n          this.executeAction(\"onRowClick\", extend({\n            evaluate: function evaluate(expr) {\n              var getter = compileGetter(expr);\n              return getter(item.data);\n            }\n          }, e, item));\n        },\n        _rowDblClick: function _rowDblClick(e) {\n          var item = this._dataController.items()[e.rowIndex] || {};\n          this.executeAction(\"onRowDblClick\", extend({}, e, item));\n        },\n        _getColumnsCountBeforeGroups: function _getColumnsCountBeforeGroups(columns) {\n          for (var i = 0; i < columns.length; i++) {\n            if (\"groupExpand\" === columns[i].type) {\n              return i;\n            }\n          }\n\n          return 0;\n        },\n        _getGroupCellOptions: function _getGroupCellOptions(options) {\n          var columnsCountBeforeGroups = this._getColumnsCountBeforeGroups(options.columns);\n\n          var columnIndex = (options.row.groupIndex || 0) + columnsCountBeforeGroups;\n          return {\n            columnIndex: columnIndex,\n            colspan: options.columns.length - columnIndex - 1\n          };\n        },\n        _renderCells: function _renderCells($row, options) {\n          if (\"group\" === options.row.rowType) {\n            this._renderGroupedCells($row, options);\n          } else if (options.row.values) {\n            this.callBase($row, options);\n          }\n        },\n        _renderGroupedCells: function _renderGroupedCells($row, options) {\n          var row = options.row;\n          var expandColumn;\n          var columns = options.columns;\n          var rowIndex = row.rowIndex;\n          var isExpanded;\n\n          var groupCellOptions = this._getGroupCellOptions(options);\n\n          for (var i = 0; i <= groupCellOptions.columnIndex; i++) {\n            if (i === groupCellOptions.columnIndex && columns[i].allowCollapsing && \"infinite\" !== options.scrollingMode) {\n              isExpanded = !!row.isExpanded;\n              expandColumn = columns[i];\n            } else {\n              isExpanded = null;\n              expandColumn = {\n                command: \"expand\",\n                cssClass: columns[i].cssClass\n              };\n            }\n\n            if (this._needRenderCell(i, options.columnIndices)) {\n              this._renderCell($row, {\n                value: isExpanded,\n                row: row,\n                rowIndex: rowIndex,\n                column: expandColumn,\n                columnIndex: i,\n                columnIndices: options.columnIndices\n              });\n            }\n          }\n\n          var groupColumnAlignment = getDefaultAlignment(this.option(\"rtlEnabled\"));\n          var groupColumn = extend({}, columns[groupCellOptions.columnIndex], {\n            command: null,\n            type: null,\n            cssClass: null,\n            width: null,\n            showWhenGrouped: false,\n            alignment: groupColumnAlignment\n          });\n\n          if (groupCellOptions.colspan > 1) {\n            groupColumn.colspan = groupCellOptions.colspan;\n          }\n\n          if (this._needRenderCell(groupCellOptions.columnIndex + 1, options.columnIndices)) {\n            this._renderCell($row, {\n              value: row.values[row.groupIndex],\n              row: row,\n              rowIndex: rowIndex,\n              column: groupColumn,\n              columnIndex: groupCellOptions.columnIndex + 1,\n              columnIndices: options.columnIndices\n            });\n          }\n        },\n        _renderRows: function _renderRows($table, options) {\n          var scrollingMode = this.option(\"scrolling.mode\");\n          this.callBase($table, extend({\n            scrollingMode: scrollingMode\n          }, options));\n\n          this._checkRowKeys(options.change);\n\n          this._renderFreeSpaceRow($table);\n\n          if (!this._hasHeight) {\n            this.updateFreeSpaceRowHeight($table);\n          }\n        },\n        _renderDataRowByTemplate: function _renderDataRowByTemplate($table, options, dataRowTemplate) {\n          var row = options.row;\n          var rowOptions = extend({\n            columns: options.columns\n          }, row);\n\n          var $tbody = this._createRow(row, \"tbody\");\n\n          $tbody.appendTo($table);\n          this.renderTemplate($tbody, dataRowTemplate, rowOptions, true, options.change);\n\n          this._rowPrepared($tbody, rowOptions, options.row);\n        },\n        _renderRow: function _renderRow($table, options) {\n          var row = options.row;\n          var rowTemplate = this.option().rowTemplate;\n          var dataRowTemplate = this.option(\"dataRowTemplate\");\n\n          if (\"data\" === row.rowType && dataRowTemplate) {\n            this._renderDataRowByTemplate($table, options, dataRowTemplate);\n          } else if ((\"data\" === row.rowType || \"group\" === row.rowType) && !isDefined(row.groupIndex) && rowTemplate) {\n            this.renderTemplate($table, rowTemplate, extend({\n              columns: options.columns\n            }, row), true);\n          } else {\n            this.callBase($table, options);\n          }\n        },\n        _renderTable: function _renderTable(options) {\n          var that = this;\n          var $table = that.callBase(options);\n\n          if (!isDefined(that.getTableElement())) {\n            that.setTableElement($table);\n\n            that._renderScrollable(true);\n\n            that.resizeCompleted.add(function resizeCompletedHandler() {\n              var scrollableInstance = that.getScrollable();\n\n              if (scrollableInstance && that.element().closest(getWindow().document).length) {\n                that.resizeCompleted.remove(resizeCompletedHandler);\n\n                scrollableInstance._visibilityChanged(true);\n              }\n            });\n          } else {\n            that._renderScrollable();\n          }\n\n          return $table;\n        },\n        _createTable: function _createTable() {\n          var $table = this.callBase.apply(this, arguments);\n\n          if (this.option().rowTemplate || this.option().dataRowTemplate) {\n            $table.appendTo(this.component.$element());\n          }\n\n          return $table;\n        },\n        _renderCore: function _renderCore(change) {\n          var $element = this.element();\n          $element.addClass(this.addWidgetPrefix(ROWS_VIEW_CLASS)).toggleClass(this.addWidgetPrefix(NOWRAP_CLASS), !this.option(\"wordWrapEnabled\"));\n          $element.toggleClass(EMPTY_CLASS, this._dataController.isEmpty());\n          this.setAria(\"role\", \"presentation\", $element);\n\n          var $table = this._renderTable({\n            change: change\n          });\n\n          this._updateContent($table, change);\n\n          this.callBase(change);\n          this._lastColumnWidths = null;\n        },\n        _getRows: function _getRows(change) {\n          return change && change.items || this._dataController.items();\n        },\n        _getCellOptions: function _getCellOptions(options) {\n          var column = options.column;\n          var row = options.row;\n          var data = row.data;\n          var summaryCells = row && row.summaryCells;\n          var value = options.value;\n          var displayValue = gridCoreUtils.getDisplayValue(column, value, data, row.rowType);\n          var parameters = this.callBase(options);\n          parameters.value = value;\n          parameters.oldValue = options.oldValue;\n          parameters.displayValue = displayValue;\n          parameters.row = row;\n          parameters.key = row.key;\n          parameters.data = data;\n          parameters.rowType = row.rowType;\n          parameters.values = row.values;\n          parameters.text = !column.command ? gridCoreUtils.formatValue(displayValue, column) : \"\";\n          parameters.rowIndex = row.rowIndex;\n          parameters.summaryItems = summaryCells && summaryCells[options.columnIndex];\n          parameters.resized = column.resizedCallbacks;\n\n          if (isDefined(column.groupIndex) && !column.command) {\n            var groupingTextsOptions = this.option(\"grouping.texts\");\n            var scrollingMode = this.option(\"scrolling.mode\");\n\n            if (\"virtual\" !== scrollingMode && \"infinite\" !== scrollingMode) {\n              parameters.groupContinuesMessage = data && data.isContinuationOnNextPage && groupingTextsOptions && groupingTextsOptions.groupContinuesMessage;\n              parameters.groupContinuedMessage = data && data.isContinuation && groupingTextsOptions && groupingTextsOptions.groupContinuedMessage;\n            }\n          }\n\n          return parameters;\n        },\n        _setRowsOpacityCore: function _setRowsOpacityCore($rows, visibleColumns, columnIndex, value) {\n          var columnsController = this._columnsController;\n          var columns = columnsController.getColumns();\n          var column = columns && columns[columnIndex];\n          var columnID = column && column.isBand && column.index;\n          each($rows, function (rowIndex, row) {\n            if (!$(row).hasClass(GROUP_ROW_CLASS)) {\n              for (var i = 0; i < visibleColumns.length; i++) {\n                if (isNumeric(columnID) && columnsController.isParentBandColumn(visibleColumns[i].index, columnID) || visibleColumns[i].index === columnIndex) {\n                  $rows.eq(rowIndex).children().eq(i).css({\n                    opacity: value\n                  });\n\n                  if (!isNumeric(columnID)) {\n                    break;\n                  }\n                }\n              }\n            }\n          });\n        },\n        _getDevicePixelRatio: function _getDevicePixelRatio() {\n          return getWindow().devicePixelRatio;\n        },\n        renderNoDataText: gridCoreUtils.renderNoDataText,\n        getCellOptions: function getCellOptions(rowIndex, columnIdentifier) {\n          var rowOptions = this._dataController.items()[rowIndex];\n\n          var cellOptions;\n          var column;\n\n          if (rowOptions) {\n            if (isString(columnIdentifier)) {\n              column = this._columnsController.columnOption(columnIdentifier);\n            } else {\n              column = this._columnsController.getVisibleColumns()[columnIdentifier];\n            }\n\n            if (column) {\n              cellOptions = this._getCellOptions({\n                value: column.calculateCellValue(rowOptions.data),\n                rowIndex: rowOptions.rowIndex,\n                row: rowOptions,\n                column: column\n              });\n            }\n          }\n\n          return cellOptions;\n        },\n        getRow: function getRow(index) {\n          if (index >= 0) {\n            var rows = this._getRowElements();\n\n            if (rows.length > index) {\n              return $(rows[index]);\n            }\n          }\n        },\n        updateFreeSpaceRowHeight: function updateFreeSpaceRowHeight($table) {\n          var _this3 = this;\n\n          var dataController = this._dataController;\n          var itemCount = dataController.items(true).length;\n\n          var contentElement = this._findContentElement();\n\n          var freeSpaceRowElements = this._getFreeSpaceRowElements($table);\n\n          if (freeSpaceRowElements && contentElement && dataController.totalCount() >= 0) {\n            var isFreeSpaceRowVisible = false;\n\n            if (itemCount > 0) {\n              if (!this._hasHeight) {\n                var freeSpaceRowCount = dataController.pageSize() - itemCount;\n                var scrollingMode = this.option(\"scrolling.mode\");\n\n                if (freeSpaceRowCount > 0 && dataController.pageCount() > 1 && \"virtual\" !== scrollingMode && \"infinite\" !== scrollingMode) {\n                  setHeight(freeSpaceRowElements, freeSpaceRowCount * this._rowHeight);\n                  isFreeSpaceRowVisible = true;\n                }\n\n                if (!isFreeSpaceRowVisible && $table) {\n                  setHeight(freeSpaceRowElements, 0);\n                } else {\n                  freeSpaceRowElements.toggle(isFreeSpaceRowVisible);\n                }\n\n                this._updateLastRowBorder(isFreeSpaceRowVisible);\n              } else {\n                freeSpaceRowElements.hide();\n                deferUpdate(function () {\n                  var scrollbarWidth = _this3.getScrollbarWidth(true);\n\n                  var elementHeightWithoutScrollbar = getHeight(_this3.element()) - scrollbarWidth;\n                  var contentHeight = getOuterHeight(contentElement);\n                  var showFreeSpaceRow = elementHeightWithoutScrollbar - contentHeight > 0;\n\n                  var rowsHeight = _this3._getRowsHeight(contentElement.children().first());\n\n                  var $tableElement = $table || _this3.getTableElements();\n\n                  var borderTopWidth = Math.ceil(parseFloat($tableElement.css(\"borderTopWidth\")));\n\n                  var heightCorrection = _this3._getHeightCorrection();\n\n                  var resultHeight = elementHeightWithoutScrollbar - rowsHeight - borderTopWidth - heightCorrection;\n\n                  if (showFreeSpaceRow) {\n                    deferRender(function () {\n                      freeSpaceRowElements.css(\"height\", resultHeight);\n                      isFreeSpaceRowVisible = true;\n                      freeSpaceRowElements.show();\n                    });\n                  }\n\n                  deferRender(function () {\n                    return _this3._updateLastRowBorder(isFreeSpaceRowVisible);\n                  });\n                });\n              }\n            } else {\n              freeSpaceRowElements.css(\"height\", 0);\n              freeSpaceRowElements.show();\n\n              this._updateLastRowBorder(true);\n            }\n          }\n        },\n        _getHeightCorrection: function _getHeightCorrection() {\n          var isZoomedWebkit = browser.webkit && this._getDevicePixelRatio() >= 2;\n          var isChromeLatest = browser.chrome && browser.version >= 91;\n          var hasExtraBorderTop = browser.mozilla && browser.version >= 70 && !this.option(\"showRowLines\");\n          return isZoomedWebkit || hasExtraBorderTop || isChromeLatest ? 1 : 0;\n        },\n        _columnOptionChanged: function _columnOptionChanged(e) {\n          var optionNames = e.optionNames;\n\n          if (e.changeTypes.grouping) {\n            return;\n          }\n\n          if (optionNames.width || optionNames.visibleWidth) {\n            this.callBase(e);\n\n            this._fireColumnResizedCallbacks();\n          }\n        },\n        getScrollable: function getScrollable() {\n          return this._scrollable;\n        },\n        init: function init() {\n          var that = this;\n          var dataController = that.getController(\"data\");\n          that.callBase();\n          that._editorFactoryController = that.getController(\"editorFactory\");\n          that._rowHeight = 0;\n          that._scrollTop = 0;\n          that._scrollLeft = -1;\n          that._scrollRight = 0;\n          that._hasHeight = false;\n          dataController.loadingChanged.add(function (isLoading, messageText) {\n            that.setLoading(isLoading, messageText);\n          });\n          dataController.dataSourceChanged.add(function () {\n            if (that._scrollLeft >= 0) {\n              that._handleScroll({\n                component: that.getScrollable(),\n                scrollOffset: {\n                  top: that._scrollTop,\n                  left: that._scrollLeft\n                }\n              });\n            }\n          });\n        },\n        _handleDataChanged: function _handleDataChanged(change) {\n          switch (change.changeType) {\n            case \"refresh\":\n            case \"prepend\":\n            case \"append\":\n            case \"update\":\n              this.render(null, change);\n              break;\n\n            default:\n              this._update(change);\n\n          }\n        },\n        publicMethods: function publicMethods() {\n          return [\"isScrollbarVisible\", \"getTopVisibleRowData\", \"getScrollbarWidth\", \"getCellElement\", \"getRowElement\", \"getScrollable\"];\n        },\n        contentWidth: function contentWidth() {\n          return getWidth(this.element()) - this.getScrollbarWidth();\n        },\n        getScrollbarWidth: function getScrollbarWidth(isHorizontal) {\n          var scrollableContainer = this._scrollableContainer && this._scrollableContainer.get(0);\n\n          var scrollbarWidth = 0;\n\n          if (scrollableContainer) {\n            if (!isHorizontal) {\n              scrollbarWidth = scrollableContainer.clientWidth ? scrollableContainer.offsetWidth - scrollableContainer.clientWidth : 0;\n            } else {\n              scrollbarWidth = scrollableContainer.clientHeight ? scrollableContainer.offsetHeight - scrollableContainer.clientHeight : 0;\n              scrollbarWidth += (that = this, scrollable = that.getScrollable(), scrollable ? Math.ceil(parseFloat($(scrollable.content()).css(\"paddingBottom\"))) : 0);\n            }\n          }\n\n          var that, scrollable;\n          return scrollbarWidth > 0 ? scrollbarWidth : 0;\n        },\n        _fireColumnResizedCallbacks: function _fireColumnResizedCallbacks() {\n          var lastColumnWidths = this._lastColumnWidths || [];\n          var columnWidths = [];\n          var columns = this.getColumns();\n\n          for (var i = 0; i < columns.length; i++) {\n            columnWidths[i] = columns[i].visibleWidth;\n\n            if (columns[i].resizedCallbacks && !isDefined(columns[i].groupIndex) && lastColumnWidths[i] !== columnWidths[i]) {\n              columns[i].resizedCallbacks.fire(columnWidths[i]);\n            }\n          }\n\n          this._lastColumnWidths = columnWidths;\n        },\n        _updateLastRowBorder: function _updateLastRowBorder(isFreeSpaceRowVisible) {\n          if (this.option(\"showBorders\") && this.option(\"showRowLines\") && !isFreeSpaceRowVisible) {\n            this.element().addClass(LAST_ROW_BORDER);\n          } else {\n            this.element().removeClass(LAST_ROW_BORDER);\n          }\n        },\n        _updateScrollable: function _updateScrollable() {\n          var dxScrollable = Scrollable.getInstance(this.element());\n\n          if (dxScrollable) {\n            dxScrollable.update();\n\n            this._updateHorizontalScrollPosition();\n          }\n        },\n        _updateHorizontalScrollPosition: function _updateHorizontalScrollPosition() {\n          var scrollable = this.getScrollable();\n          var scrollLeft = scrollable && scrollable.scrollOffset().left;\n          var rtlEnabled = this.option(\"rtlEnabled\");\n\n          if (rtlEnabled) {\n            var maxHorizontalScrollOffset = getMaxHorizontalScrollOffset(scrollable);\n            var scrollRight = maxHorizontalScrollOffset - scrollLeft;\n\n            if (scrollRight !== this._scrollRight) {\n              this._scrollLeft = maxHorizontalScrollOffset - this._scrollRight;\n            }\n          }\n\n          if (this._scrollLeft >= 0 && scrollLeft !== this._scrollLeft) {\n            scrollable.scrollTo({\n              x: this._scrollLeft\n            });\n          }\n        },\n        _resizeCore: function _resizeCore() {\n          var that = this;\n\n          that._fireColumnResizedCallbacks();\n\n          that._updateRowHeight();\n\n          deferRender(function () {\n            that._renderScrollable();\n\n            that.renderNoDataText();\n            that.updateFreeSpaceRowHeight();\n            deferUpdate(function () {\n              that._updateScrollable();\n            });\n          });\n        },\n        scrollTo: function scrollTo(location) {\n          var $element = this.element();\n          var dxScrollable = $element && Scrollable.getInstance($element);\n\n          if (dxScrollable) {\n            dxScrollable.scrollTo(location);\n          }\n        },\n        height: function height(_height, hasHeight) {\n          var that = this;\n          var $element = this.element();\n\n          if (0 === arguments.length) {\n            return $element ? getOuterHeight($element, true) : 0;\n          }\n\n          that._hasHeight = void 0 === hasHeight ? \"auto\" !== _height : hasHeight;\n\n          if (isDefined(_height) && $element) {\n            setHeight($element, _height);\n          }\n        },\n        setLoading: function setLoading(isLoading, messageText) {\n          var loadPanel = this._loadPanel;\n          var dataController = this._dataController;\n          var loadPanelOptions = this.option(\"loadPanel\") || {};\n          var animation = dataController.isLoaded() ? loadPanelOptions.animation : null;\n          var $element = this.element();\n\n          if (!hasWindow()) {\n            return;\n          }\n\n          if (!loadPanel && void 0 !== messageText && dataController.isLocalStore() && \"auto\" === loadPanelOptions.enabled && $element) {\n            this._renderLoadPanel($element, $element.parent());\n\n            loadPanel = this._loadPanel;\n          }\n\n          if (loadPanel) {\n            var visibilityOptions = {\n              message: messageText || loadPanelOptions.text,\n              animation: animation,\n              visible: isLoading\n            };\n\n            if (isLoading) {\n              visibilityOptions.position = gridCoreUtils.calculateLoadPanelPosition($element);\n            }\n\n            clearTimeout(this._hideLoadingTimeoutID);\n\n            if (loadPanel.option(\"visible\") && !isLoading) {\n              this._hideLoadingTimeoutID = setTimeout(function () {\n                loadPanel.option(visibilityOptions);\n              }, LOADPANEL_HIDE_TIMEOUT);\n            } else {\n              loadPanel.option(visibilityOptions);\n            }\n          }\n        },\n        setRowsOpacity: function setRowsOpacity(columnIndex, value) {\n          var $rows = this._getRowElements().not(\".\" + GROUP_ROW_CLASS) || [];\n\n          this._setRowsOpacityCore($rows, this.getColumns(), columnIndex, value);\n        },\n        _getCellElementsCore: function _getCellElementsCore(rowIndex) {\n          var $cells = this.callBase.apply(this, arguments);\n\n          if ($cells) {\n            var groupCellIndex = $cells.filter(\".\" + GROUP_CELL_CLASS).index();\n\n            if (groupCellIndex >= 0 && $cells.length > groupCellIndex + 1) {\n              return $cells.slice(0, groupCellIndex + 1);\n            }\n          }\n\n          return $cells;\n        },\n        _getBoundaryVisibleItemIndex: function _getBoundaryVisibleItemIndex(isTop, isFloor) {\n          var itemIndex = 0;\n          var prevOffset = 0;\n          var offset = 0;\n          var viewportBoundary = this._scrollTop;\n\n          var $contentElement = this._findContentElement();\n\n          var contentElementOffsetTop = $contentElement && $contentElement.offset().top;\n          var dataController = this.getController(\"data\");\n          var items = dataController.items();\n          var tableElement = this.getTableElement();\n\n          if (items.length && tableElement) {\n            var rowElements = this._getRowElements(tableElement).filter(\":visible\");\n\n            if (!isTop) {\n              var height = this._hasHeight ? getOuterHeight(this.element()) : $(getWindow()).outerHeight();\n              viewportBoundary += height;\n            }\n\n            for (itemIndex = 0; itemIndex < items.length; itemIndex++) {\n              prevOffset = offset;\n              var $rowElement = $(rowElements).eq(itemIndex);\n\n              if ($rowElement.length) {\n                offset = $rowElement.offset();\n                offset = (isTop ? offset.top : offset.top + getOuterHeight($rowElement)) - contentElementOffsetTop;\n\n                if (offset > viewportBoundary) {\n                  if (itemIndex) {\n                    if (isFloor || 2 * viewportBoundary < Math.round(offset + prevOffset)) {\n                      itemIndex--;\n                    }\n                  }\n\n                  break;\n                }\n              }\n            }\n\n            if (itemIndex && itemIndex === items.length) {\n              itemIndex--;\n            }\n          }\n\n          return itemIndex;\n        },\n        getTopVisibleItemIndex: function getTopVisibleItemIndex(isFloor) {\n          return this._getBoundaryVisibleItemIndex(true, isFloor);\n        },\n        getBottomVisibleItemIndex: function getBottomVisibleItemIndex(isFloor) {\n          return this._getBoundaryVisibleItemIndex(false, isFloor);\n        },\n        getTopVisibleRowData: function getTopVisibleRowData() {\n          var itemIndex = this.getTopVisibleItemIndex();\n\n          var items = this._dataController.items();\n\n          if (items[itemIndex]) {\n            return items[itemIndex].data;\n          }\n        },\n        _scrollToElement: function _scrollToElement($element, offset) {\n          var scrollable = this.getScrollable();\n          scrollable && scrollable.scrollToElement($element, offset);\n        },\n        optionChanged: function optionChanged(args) {\n          this.callBase(args);\n\n          switch (args.name) {\n            case \"wordWrapEnabled\":\n            case \"showColumnLines\":\n            case \"showRowLines\":\n            case \"rowAlternationEnabled\":\n            case \"rowTemplate\":\n            case \"dataRowTemplate\":\n            case \"twoWayBindingEnabled\":\n              this._invalidate(true, true);\n\n              args.handled = true;\n              break;\n\n            case \"scrolling\":\n              this._rowHeight = null;\n              this._tableElement = null;\n              args.handled = true;\n              break;\n\n            case \"rtlEnabled\":\n              this._rowHeight = null;\n              this._tableElement = null;\n              break;\n\n            case \"loadPanel\":\n              this._tableElement = null;\n\n              this._invalidate(true, \"loadPanel.enabled\" !== args.fullName);\n\n              args.handled = true;\n              break;\n\n            case \"noDataText\":\n              this.renderNoDataText();\n              args.handled = true;\n          }\n        },\n        dispose: function dispose() {\n          clearTimeout(this._hideLoadingTimeoutID);\n          this._scrollable && this._scrollable.dispose();\n        },\n        setScrollerSpacing: function setScrollerSpacing() {},\n        _restoreErrorRow: function _restoreErrorRow() {}\n      };\n    }())\n  }\n};","map":null,"metadata":{},"sourceType":"module"}