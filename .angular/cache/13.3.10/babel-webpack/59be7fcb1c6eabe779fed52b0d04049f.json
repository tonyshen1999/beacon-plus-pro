{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/**\r\n * DevExtreme (esm/ui/gantt/ui.gantt.treelist.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getHeight } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport dxTreeList from \"../tree_list\";\nimport { getBoundingRect } from \"../../core/utils/position\";\nimport { isDefined } from \"../../core/utils/type\";\nimport { GanttHelper } from \"./ui.gantt.helper\";\nvar GANTT_TASKS = \"tasks\";\nvar GANTT_COLLAPSABLE_ROW = \"dx-gantt-collapsable-row\";\nvar GANTT_DEFAULT_ROW_HEIGHT = 34;\nexport var GanttTreeList = /*#__PURE__*/function () {\n  function GanttTreeList(gantt) {\n    _classCallCheck(this, GanttTreeList);\n\n    this._gantt = gantt;\n    this._$treeList = this._gantt._$treeList;\n  }\n\n  _createClass(GanttTreeList, [{\n    key: \"getTreeList\",\n    value: function getTreeList() {\n      var _this = this;\n\n      var _this$_gantt$option = this._gantt.option(GANTT_TASKS),\n          keyExpr = _this$_gantt$option.keyExpr,\n          parentIdExpr = _this$_gantt$option.parentIdExpr;\n\n      this._treeList = this._gantt._createComponent(this._$treeList, dxTreeList, {\n        dataSource: this._gantt._tasksRaw,\n        keyExpr: keyExpr,\n        parentIdExpr: parentIdExpr,\n        columns: this.getColumns(),\n        columnResizingMode: \"nextColumn\",\n        height: this._getHeight(),\n        width: this._gantt.option(\"taskListWidth\"),\n        selection: {\n          mode: GanttHelper.getSelectionMode(this._gantt.option(\"allowSelection\"))\n        },\n        selectedRowKeys: GanttHelper.getArrayFromOneElement(this._gantt.option(\"selectedRowKey\")),\n        sorting: this._gantt.option(\"sorting\"),\n        filterRow: this._gantt.option(\"filterRow\"),\n        headerFilter: this._gantt.option(\"headerFilter\"),\n        scrolling: {\n          showScrollbar: \"onHover\",\n          mode: \"virtual\"\n        },\n        allowColumnResizing: true,\n        autoExpandAll: true,\n        showRowLines: this._gantt.option(\"showRowLines\"),\n        rootValue: this._gantt.option(\"rootValue\"),\n        onContentReady: function onContentReady(e) {\n          _this._onContentReady(e);\n        },\n        onSelectionChanged: function onSelectionChanged(e) {\n          _this._onSelectionChanged(e);\n        },\n        onRowCollapsed: function onRowCollapsed(e) {\n          _this._onRowCollapsed(e);\n        },\n        onRowExpanded: function onRowExpanded(e) {\n          _this._onRowExpanded(e);\n        },\n        onRowPrepared: function onRowPrepared(e) {\n          _this._onRowPrepared(e);\n        },\n        onContextMenuPreparing: function onContextMenuPreparing(e) {\n          _this._onContextMenuPreparing(e);\n        },\n        onRowClick: function onRowClick(e) {\n          _this.onRowClick(e);\n        },\n        onRowDblClick: function onRowDblClick(e) {\n          _this.onRowDblClick(e);\n        }\n      });\n      return this._treeList;\n    }\n  }, {\n    key: \"onAfterTreeListCreate\",\n    value: function onAfterTreeListCreate() {\n      if (this._postponedGanttInitRequired) {\n        this._initGanttOnContentReady({\n          component: this._treeList\n        });\n\n        delete this._postponedGanttInitRequired;\n      }\n    }\n  }, {\n    key: \"_onContentReady\",\n    value: function _onContentReady(e) {\n      var hasTreeList = !!this._treeList;\n\n      if (hasTreeList) {\n        this._initGanttOnContentReady(e);\n      } else {\n        this._postponedGanttInitRequired = true;\n      }\n    }\n  }, {\n    key: \"_initGanttOnContentReady\",\n    value: function _initGanttOnContentReady(e) {\n      if (e.component.getDataSource()) {\n        this._gantt._initGanttView();\n\n        this._initScrollSync(e.component);\n      }\n\n      this._gantt._sortAndFilter();\n\n      this._gantt._sizeHelper.updateGanttRowHeights();\n    }\n  }, {\n    key: \"_onSelectionChanged\",\n    value: function _onSelectionChanged(e) {\n      var selectedRowKey = e.currentSelectedRowKeys[0];\n\n      this._gantt._setGanttViewOption(\"selectedRowKey\", selectedRowKey);\n\n      this._gantt._setOptionWithoutOptionChange(\"selectedRowKey\", selectedRowKey);\n\n      this._gantt._actionsManager.raiseSelectionChangedAction(selectedRowKey);\n    }\n  }, {\n    key: \"_onRowCollapsed\",\n    value: function _onRowCollapsed(e) {\n      this._gantt._onTreeListRowExpandChanged(e, false);\n    }\n  }, {\n    key: \"_onRowExpanded\",\n    value: function _onRowExpanded(e) {\n      this._gantt._onTreeListRowExpandChanged(e, true);\n    }\n  }, {\n    key: \"_onRowPrepared\",\n    value: function _onRowPrepared(e) {\n      if (\"data\" === e.rowType && e.node.children.length > 0) {\n        $(e.rowElement).addClass(GANTT_COLLAPSABLE_ROW);\n      }\n    }\n  }, {\n    key: \"_onContextMenuPreparing\",\n    value: function _onContextMenuPreparing(e) {\n      var _e$row, _e$row2;\n\n      if (\"header\" === e.target) {\n        return;\n      }\n\n      if (\"data\" === (null === (_e$row = e.row) || void 0 === _e$row ? void 0 : _e$row.rowType)) {\n        this.setOption(\"selectedRowKeys\", [e.row.data[this._gantt.option(\"tasks.keyExpr\")]]);\n      }\n\n      e.items = [];\n      var info = {\n        cancel: false,\n        event: e.event,\n        type: \"task\",\n        key: null === (_e$row2 = e.row) || void 0 === _e$row2 ? void 0 : _e$row2.key,\n        position: {\n          x: e.event.pageX,\n          y: e.event.pageY\n        }\n      };\n\n      this._gantt._showPopupMenu(info);\n    }\n  }, {\n    key: \"_getHeight\",\n    value: function _getHeight() {\n      if (getHeight(this._$treeList)) {\n        return getHeight(this._$treeList);\n      }\n\n      this._gantt._hasHeight = isDefined(this._gantt.option(\"height\")) && \"\" !== this._gantt.option(\"height\");\n      return this._gantt._hasHeight ? \"100%\" : \"\";\n    }\n  }, {\n    key: \"_initScrollSync\",\n    value: function _initScrollSync(treeList) {\n      var _this2 = this;\n\n      var treeListScrollable = treeList.getScrollable();\n\n      if (treeListScrollable) {\n        treeListScrollable.off(\"scroll\");\n        treeListScrollable.on(\"scroll\", function (e) {\n          _this2._onScroll(e);\n        });\n      }\n    }\n  }, {\n    key: \"_onScroll\",\n    value: function _onScroll(treeListScrollView) {\n      var ganttViewTaskAreaContainer = this._gantt._ganttView.getTaskAreaContainer();\n\n      if (ganttViewTaskAreaContainer.scrollTop !== treeListScrollView.component.scrollTop()) {\n        ganttViewTaskAreaContainer.scrollTop = treeListScrollView.component.scrollTop();\n      }\n    }\n  }, {\n    key: \"_correctRowsViewRowHeight\",\n    value: function _correctRowsViewRowHeight(height) {\n      var view = this._treeList._views && this._treeList._views.rowsView;\n\n      if ((null === view || void 0 === view ? void 0 : view._rowHeight) !== height) {\n        view._rowHeight = height;\n      }\n    }\n  }, {\n    key: \"_skipUpdateTreeListDataSource\",\n    value: function _skipUpdateTreeListDataSource() {\n      return this._gantt.option(\"validation.autoUpdateParentTasks\");\n    }\n  }, {\n    key: \"selectRows\",\n    value: function selectRows(keys) {\n      this.setOption(\"selectedRowKeys\", keys);\n    }\n  }, {\n    key: \"scrollBy\",\n    value: function scrollBy(scrollTop) {\n      var treeListScrollable = this._treeList.getScrollable();\n\n      if (treeListScrollable) {\n        var diff = scrollTop - treeListScrollable.scrollTop();\n\n        if (0 !== diff) {\n          treeListScrollable.scrollBy({\n            left: 0,\n            top: diff\n          });\n        }\n      }\n    }\n  }, {\n    key: \"updateDataSource\",\n    value: function updateDataSource(data) {\n      var forceUpdate = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : false;\n      var forceCustomData = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : false;\n      var expandedRowKeys = this.getOption(\"expandedRowKeys\");\n\n      if (!this._skipUpdateTreeListDataSource() || forceUpdate) {\n        this.setOption(\"dataSource\", data);\n      } else if (forceCustomData) {\n        var _data = this._treeList.option(\"dataSource\");\n\n        this._gantt._onParentTasksRecalculated(_data);\n      }\n\n      this.setOption(\"expandedRowKeys\", expandedRowKeys);\n    }\n  }, {\n    key: \"onRowClick\",\n    value: function onRowClick(e) {\n      this._gantt._actionsManager.raiseTaskClickAction(e.key, e.event);\n    }\n  }, {\n    key: \"onRowDblClick\",\n    value: function onRowDblClick(e) {\n      if (this._gantt._actionsManager.raiseTaskDblClickAction(e.key, e.event)) {\n        this._gantt._ganttView._ganttViewCore.showTaskEditDialog();\n      }\n    }\n  }, {\n    key: \"getOffsetHeight\",\n    value: function getOffsetHeight() {\n      return this._gantt._treeList._$element.get(0).offsetHeight;\n    }\n  }, {\n    key: \"getRowHeight\",\n    value: function getRowHeight() {\n      var $row = this._treeList._$element.find(\".dx-data-row\");\n\n      var height = $row.length ? getBoundingRect($row.last().get(0)).height : GANTT_DEFAULT_ROW_HEIGHT;\n\n      if (!height) {\n        height = GANTT_DEFAULT_ROW_HEIGHT;\n      }\n\n      this._correctRowsViewRowHeight(height);\n\n      return height;\n    }\n  }, {\n    key: \"getHeaderHeight\",\n    value: function getHeaderHeight() {\n      return getBoundingRect(this._treeList._$element.find(\".dx-treelist-headers\").get(0)).height;\n    }\n  }, {\n    key: \"getColumns\",\n    value: function getColumns() {\n      var columns = this._gantt.option(\"columns\");\n\n      if (columns) {\n        for (var i = 0; i < columns.length; i++) {\n          var column = columns[i];\n\n          var isKeyColumn = column.dataField === this._gantt.option(\"\".concat(GANTT_TASKS, \".keyExpr\")) || column.dataField === this._gantt.option(\"\".concat(GANTT_TASKS, \".parentIdExpr\"));\n\n          if (isKeyColumn && !column.dataType) {\n            column.dataType = \"object\";\n          }\n        }\n      }\n\n      return columns;\n    }\n  }, {\n    key: \"getSievedItems\",\n    value: function getSievedItems() {\n      var rootNode = this._treeList.getRootNode();\n\n      if (!rootNode) {\n        return;\n      }\n\n      var resultArray = [];\n      GanttHelper.convertTreeToList(rootNode, resultArray);\n      var getters = GanttHelper.compileGettersByOption(this._gantt.option(GANTT_TASKS));\n\n      var validatedData = this._gantt._validateSourceData(GANTT_TASKS, resultArray);\n\n      var mappedData = validatedData.map(GanttHelper.prepareMapHandler(getters));\n      return mappedData;\n    }\n  }, {\n    key: \"setOption\",\n    value: function setOption(optionName, value) {\n      this._treeList && this._treeList.option(optionName, value);\n    }\n  }, {\n    key: \"getOption\",\n    value: function getOption(optionName) {\n      return this._treeList.option(optionName);\n    }\n  }, {\n    key: \"onTaskInserted\",\n    value: function onTaskInserted(insertedId, parentId) {\n      if (isDefined(parentId)) {\n        var expandedRowKeys = this.getOption(\"expandedRowKeys\");\n\n        if (-1 === expandedRowKeys.indexOf(parentId)) {\n          expandedRowKeys.push(parentId);\n          this.setOption(\"expandedRowKeys\", expandedRowKeys);\n        }\n      }\n\n      this.selectRows(GanttHelper.getArrayFromOneElement(insertedId));\n      this.setOption(\"focusedRowKey\", insertedId);\n    }\n  }, {\n    key: \"getDataSource\",\n    value: function getDataSource() {\n      var _this$_treeList;\n\n      return null === (_this$_treeList = this._treeList) || void 0 === _this$_treeList ? void 0 : _this$_treeList.getDataSource();\n    }\n  }]);\n\n  return GanttTreeList;\n}();","map":null,"metadata":{},"sourceType":"module"}