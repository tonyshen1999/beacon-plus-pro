{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __decorate, __metadata, __param } from 'tslib';\nimport { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, ContentChildren, QueryList, Component, NgModule } from '@angular/core';\nimport DxVectorMap from 'devextreme/viz/vector_map';\nimport { DxComponent, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxiAnnotationComponent, DxiLayerComponent, DxiLegendComponent, DxiAnnotationModule, DxoBorderModule, DxoFontModule, DxoImageModule, DxoShadowModule, DxoBackgroundModule, DxoCommonAnnotationSettingsModule, DxoControlBarModule, DxoExportModule, DxiLayerModule, DxoLabelModule, DxiLegendModule, DxoMarginModule, DxoSourceModule, DxoTitleModule, DxoSubtitleModule, DxoLoadingIndicatorModule, DxoProjectionModule, DxoSizeModule, DxoTooltipModule } from 'devextreme-angular/ui/nested';\n/*!\r\n * devextreme-angular\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\n/**\r\n * The VectorMap is a UI component that visualizes geographical locations. This UI component represents a geographical map that contains areas and markers. Areas embody continents and countries. Markers flag specific points on the map, for example, towns, cities or capitals.\r\n\r\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'devextreme-angular/core';\nimport * as ɵngcc2 from '@angular/platform-browser';\nvar DxVectorMapComponent = /*#__PURE__*/(function () {\n  var DxVectorMapComponent = /*#__PURE__*/function (_DxComponent) {\n    _inherits(DxVectorMapComponent, _DxComponent);\n\n    var _super = _createSuper(DxVectorMapComponent);\n\n    function DxVectorMapComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\n      var _this;\n\n      _classCallCheck(this, DxVectorMapComponent);\n\n      _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n      _this._watcherHelper = _watcherHelper;\n      _this._idh = _idh;\n\n      _this._createEventEmitters([{\n        subscribe: 'centerChanged',\n        emit: 'onCenterChanged'\n      }, {\n        subscribe: 'click',\n        emit: 'onClick'\n      }, {\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'drawn',\n        emit: 'onDrawn'\n      }, {\n        subscribe: 'exported',\n        emit: 'onExported'\n      }, {\n        subscribe: 'exporting',\n        emit: 'onExporting'\n      }, {\n        subscribe: 'fileSaving',\n        emit: 'onFileSaving'\n      }, {\n        subscribe: 'incidentOccurred',\n        emit: 'onIncidentOccurred'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        subscribe: 'selectionChanged',\n        emit: 'onSelectionChanged'\n      }, {\n        subscribe: 'tooltipHidden',\n        emit: 'onTooltipHidden'\n      }, {\n        subscribe: 'tooltipShown',\n        emit: 'onTooltipShown'\n      }, {\n        subscribe: 'zoomFactorChanged',\n        emit: 'onZoomFactorChanged'\n      }, {\n        emit: 'annotationsChange'\n      }, {\n        emit: 'backgroundChange'\n      }, {\n        emit: 'boundsChange'\n      }, {\n        emit: 'centerChange'\n      }, {\n        emit: 'commonAnnotationSettingsChange'\n      }, {\n        emit: 'controlBarChange'\n      }, {\n        emit: 'customizeAnnotationChange'\n      }, {\n        emit: 'disabledChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'exportChange'\n      }, {\n        emit: 'layersChange'\n      }, {\n        emit: 'legendsChange'\n      }, {\n        emit: 'loadingIndicatorChange'\n      }, {\n        emit: 'maxZoomFactorChange'\n      }, {\n        emit: 'panningEnabledChange'\n      }, {\n        emit: 'pathModifiedChange'\n      }, {\n        emit: 'projectionChange'\n      }, {\n        emit: 'redrawOnResizeChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'sizeChange'\n      }, {\n        emit: 'themeChange'\n      }, {\n        emit: 'titleChange'\n      }, {\n        emit: 'tooltipChange'\n      }, {\n        emit: 'touchEnabledChange'\n      }, {\n        emit: 'wheelEnabledChange'\n      }, {\n        emit: 'zoomFactorChange'\n      }, {\n        emit: 'zoomingEnabledChange'\n      }]);\n\n      _this._idh.setHost(_assertThisInitialized(_this));\n\n      optionHost.setHost(_assertThisInitialized(_this));\n      return _this;\n    }\n    /**\r\n     * Specifies the annotation collection.\r\n    \r\n     */\n\n\n    _createClass(DxVectorMapComponent, [{\n      key: \"annotations\",\n      get: function get() {\n        return this._getOption('annotations');\n      },\n      set: function set(value) {\n        this._setOption('annotations', value);\n      }\n      /**\r\n       * Specifies the properties for the map background.\r\n      \r\n       */\n\n    }, {\n      key: \"background\",\n      get: function get() {\n        return this._getOption('background');\n      },\n      set: function set(value) {\n        this._setOption('background', value);\n      }\n      /**\r\n       * Specifies the positioning of a map in geographical coordinates.\r\n      \r\n       */\n\n    }, {\n      key: \"bounds\",\n      get: function get() {\n        return this._getOption('bounds');\n      },\n      set: function set(value) {\n        this._setOption('bounds', value);\n      }\n      /**\r\n       * Specifies the geographical coordinates of the center for a map.\r\n      \r\n       */\n\n    }, {\n      key: \"center\",\n      get: function get() {\n        return this._getOption('center');\n      },\n      set: function set(value) {\n        this._setOption('center', value);\n      }\n      /**\r\n       * Specifies settings common for all annotations in the VectorMap.\r\n      \r\n       */\n\n    }, {\n      key: \"commonAnnotationSettings\",\n      get: function get() {\n        return this._getOption('commonAnnotationSettings');\n      },\n      set: function set(value) {\n        this._setOption('commonAnnotationSettings', value);\n      }\n      /**\r\n       * Configures the control bar.\r\n      \r\n       */\n\n    }, {\n      key: \"controlBar\",\n      get: function get() {\n        return this._getOption('controlBar');\n      },\n      set: function set(value) {\n        this._setOption('controlBar', value);\n      }\n      /**\r\n       * Customizes an individual annotation.\r\n      \r\n       */\n\n    }, {\n      key: \"customizeAnnotation\",\n      get: function get() {\n        return this._getOption('customizeAnnotation');\n      },\n      set: function set(value) {\n        this._setOption('customizeAnnotation', value);\n      }\n      /**\r\n       * Specifies whether the UI component responds to user interaction.\r\n      \r\n       */\n\n    }, {\n      key: \"disabled\",\n      get: function get() {\n        return this._getOption('disabled');\n      },\n      set: function set(value) {\n        this._setOption('disabled', value);\n      }\n      /**\r\n       * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n      \r\n       */\n\n    }, {\n      key: \"elementAttr\",\n      get: function get() {\n        return this._getOption('elementAttr');\n      },\n      set: function set(value) {\n        this._setOption('elementAttr', value);\n      }\n      /**\r\n       * Configures the exporting and printing features.\r\n      \r\n       */\n\n    }, {\n      key: \"export\",\n      get: function get() {\n        return this._getOption('export');\n      },\n      set: function set(value) {\n        this._setOption('export', value);\n      }\n      /**\r\n       * Specifies properties for VectorMap UI component layers.\r\n      \r\n       */\n\n    }, {\n      key: \"layers\",\n      get: function get() {\n        return this._getOption('layers');\n      },\n      set: function set(value) {\n        this._setOption('layers', value);\n      }\n      /**\r\n       * Configures map legends.\r\n      \r\n       */\n\n    }, {\n      key: \"legends\",\n      get: function get() {\n        return this._getOption('legends');\n      },\n      set: function set(value) {\n        this._setOption('legends', value);\n      }\n      /**\r\n       * Configures the loading indicator.\r\n      \r\n       */\n\n    }, {\n      key: \"loadingIndicator\",\n      get: function get() {\n        return this._getOption('loadingIndicator');\n      },\n      set: function set(value) {\n        this._setOption('loadingIndicator', value);\n      }\n      /**\r\n       * Specifies a map&apos;s maximum zoom factor.\r\n      \r\n       */\n\n    }, {\n      key: \"maxZoomFactor\",\n      get: function get() {\n        return this._getOption('maxZoomFactor');\n      },\n      set: function set(value) {\n        this._setOption('maxZoomFactor', value);\n      }\n      /**\r\n       * Disables the panning capability.\r\n      \r\n       */\n\n    }, {\n      key: \"panningEnabled\",\n      get: function get() {\n        return this._getOption('panningEnabled');\n      },\n      set: function set(value) {\n        this._setOption('panningEnabled', value);\n      }\n      /**\r\n       * Notifies the UI component that it is embedded into an HTML page that uses a tag modifying the path.\r\n      \r\n       */\n\n    }, {\n      key: \"pathModified\",\n      get: function get() {\n        return this._getOption('pathModified');\n      },\n      set: function set(value) {\n        this._setOption('pathModified', value);\n      }\n      /**\r\n       * Specifies the map projection.\r\n      \r\n       */\n\n    }, {\n      key: \"projection\",\n      get: function get() {\n        return this._getOption('projection');\n      },\n      set: function set(value) {\n        this._setOption('projection', value);\n      }\n      /**\r\n       * Specifies whether to redraw the UI component when the size of the parent browser window changes or a mobile device rotates.\r\n      \r\n       */\n\n    }, {\n      key: \"redrawOnResize\",\n      get: function get() {\n        return this._getOption('redrawOnResize');\n      },\n      set: function set(value) {\n        this._setOption('redrawOnResize', value);\n      }\n      /**\r\n       * Switches the UI component to a right-to-left representation.\r\n      \r\n       */\n\n    }, {\n      key: \"rtlEnabled\",\n      get: function get() {\n        return this._getOption('rtlEnabled');\n      },\n      set: function set(value) {\n        this._setOption('rtlEnabled', value);\n      }\n      /**\r\n       * Specifies the UI component&apos;s size in pixels.\r\n      \r\n       */\n\n    }, {\n      key: \"size\",\n      get: function get() {\n        return this._getOption('size');\n      },\n      set: function set(value) {\n        this._setOption('size', value);\n      }\n      /**\r\n       * Sets the name of the theme the UI component uses.\r\n      \r\n       */\n\n    }, {\n      key: \"theme\",\n      get: function get() {\n        return this._getOption('theme');\n      },\n      set: function set(value) {\n        this._setOption('theme', value);\n      }\n      /**\r\n       * Configures the UI component&apos;s title.\r\n      \r\n       */\n\n    }, {\n      key: \"title\",\n      get: function get() {\n        return this._getOption('title');\n      },\n      set: function set(value) {\n        this._setOption('title', value);\n      }\n      /**\r\n       * Configures tooltips.\r\n      \r\n       */\n\n    }, {\n      key: \"tooltip\",\n      get: function get() {\n        return this._getOption('tooltip');\n      },\n      set: function set(value) {\n        this._setOption('tooltip', value);\n      }\n      /**\r\n       * Specifies whether the map should respond to touch gestures.\r\n      \r\n       */\n\n    }, {\n      key: \"touchEnabled\",\n      get: function get() {\n        return this._getOption('touchEnabled');\n      },\n      set: function set(value) {\n        this._setOption('touchEnabled', value);\n      }\n      /**\r\n       * Specifies whether or not the map should respond when a user rolls the mouse wheel.\r\n      \r\n       */\n\n    }, {\n      key: \"wheelEnabled\",\n      get: function get() {\n        return this._getOption('wheelEnabled');\n      },\n      set: function set(value) {\n        this._setOption('wheelEnabled', value);\n      }\n      /**\r\n       * Specifies a number that is used to zoom a map initially.\r\n      \r\n       */\n\n    }, {\n      key: \"zoomFactor\",\n      get: function get() {\n        return this._getOption('zoomFactor');\n      },\n      set: function set(value) {\n        this._setOption('zoomFactor', value);\n      }\n      /**\r\n       * Disables the zooming capability.\r\n      \r\n       */\n\n    }, {\n      key: \"zoomingEnabled\",\n      get: function get() {\n        return this._getOption('zoomingEnabled');\n      },\n      set: function set(value) {\n        this._setOption('zoomingEnabled', value);\n      }\n    }, {\n      key: \"annotationsChildren\",\n      get: function get() {\n        return this._getOption('annotations');\n      },\n      set: function set(value) {\n        this.setChildren('annotations', value);\n      }\n    }, {\n      key: \"layersChildren\",\n      get: function get() {\n        return this._getOption('layers');\n      },\n      set: function set(value) {\n        this.setChildren('layers', value);\n      }\n    }, {\n      key: \"legendsChildren\",\n      get: function get() {\n        return this._getOption('legends');\n      },\n      set: function set(value) {\n        this.setChildren('legends', value);\n      }\n    }, {\n      key: \"_createInstance\",\n      value: function _createInstance(element, options) {\n        return new DxVectorMap(element, options);\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._destroyWidget();\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        _get(_getPrototypeOf(DxVectorMapComponent.prototype), \"ngOnChanges\", this).call(this, changes);\n\n        this.setupChanges('annotations', changes);\n        this.setupChanges('bounds', changes);\n        this.setupChanges('center', changes);\n        this.setupChanges('layers', changes);\n        this.setupChanges('legends', changes);\n      }\n    }, {\n      key: \"setupChanges\",\n      value: function setupChanges(prop, changes) {\n        if (!(prop in this._optionsToUpdate)) {\n          this._idh.setup(prop, changes);\n        }\n      }\n    }, {\n      key: \"ngDoCheck\",\n      value: function ngDoCheck() {\n        this._idh.doCheck('annotations');\n\n        this._idh.doCheck('bounds');\n\n        this._idh.doCheck('center');\n\n        this._idh.doCheck('layers');\n\n        this._idh.doCheck('legends');\n\n        this._watcherHelper.checkWatchers();\n\n        _get(_getPrototypeOf(DxVectorMapComponent.prototype), \"ngDoCheck\", this).call(this);\n\n        _get(_getPrototypeOf(DxVectorMapComponent.prototype), \"clearChangedOptions\", this).call(this);\n      }\n    }, {\n      key: \"_setOption\",\n      value: function _setOption(name, value) {\n        var isSetup = this._idh.setupSingle(name, value);\n\n        var isChanged = this._idh.getChanges(name, value) !== null;\n\n        if (isSetup || isChanged) {\n          _get(_getPrototypeOf(DxVectorMapComponent.prototype), \"_setOption\", this).call(this, name, value);\n        }\n      }\n    }]);\n\n    return DxVectorMapComponent;\n  }(DxComponent);\n\n  DxVectorMapComponent.ɵfac = function DxVectorMapComponent_Factory(t) {\n    return new (t || DxVectorMapComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DxTemplateHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.WatcherHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IterableDifferHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TransferState), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n\n  DxVectorMapComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: DxVectorMapComponent,\n    selectors: [[\"dx-vector-map\"]],\n    contentQueries: function DxVectorMapComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, DxiAnnotationComponent, 4);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, DxiLayerComponent, 4);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, DxiLegendComponent, 4);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.annotationsChildren = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.layersChildren = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.legendsChildren = _t);\n      }\n    },\n    inputs: {\n      annotations: \"annotations\",\n      background: \"background\",\n      bounds: \"bounds\",\n      center: \"center\",\n      commonAnnotationSettings: \"commonAnnotationSettings\",\n      controlBar: \"controlBar\",\n      customizeAnnotation: \"customizeAnnotation\",\n      disabled: \"disabled\",\n      elementAttr: \"elementAttr\",\n      export: \"export\",\n      layers: \"layers\",\n      legends: \"legends\",\n      loadingIndicator: \"loadingIndicator\",\n      maxZoomFactor: \"maxZoomFactor\",\n      panningEnabled: \"panningEnabled\",\n      pathModified: \"pathModified\",\n      projection: \"projection\",\n      redrawOnResize: \"redrawOnResize\",\n      rtlEnabled: \"rtlEnabled\",\n      size: \"size\",\n      theme: \"theme\",\n      title: \"title\",\n      tooltip: \"tooltip\",\n      touchEnabled: \"touchEnabled\",\n      wheelEnabled: \"wheelEnabled\",\n      zoomFactor: \"zoomFactor\",\n      zoomingEnabled: \"zoomingEnabled\"\n    },\n    outputs: {\n      onCenterChanged: \"onCenterChanged\",\n      onClick: \"onClick\",\n      onDisposing: \"onDisposing\",\n      onDrawn: \"onDrawn\",\n      onExported: \"onExported\",\n      onExporting: \"onExporting\",\n      onFileSaving: \"onFileSaving\",\n      onIncidentOccurred: \"onIncidentOccurred\",\n      onInitialized: \"onInitialized\",\n      onOptionChanged: \"onOptionChanged\",\n      onSelectionChanged: \"onSelectionChanged\",\n      onTooltipHidden: \"onTooltipHidden\",\n      onTooltipShown: \"onTooltipShown\",\n      onZoomFactorChanged: \"onZoomFactorChanged\",\n      annotationsChange: \"annotationsChange\",\n      backgroundChange: \"backgroundChange\",\n      boundsChange: \"boundsChange\",\n      centerChange: \"centerChange\",\n      commonAnnotationSettingsChange: \"commonAnnotationSettingsChange\",\n      controlBarChange: \"controlBarChange\",\n      customizeAnnotationChange: \"customizeAnnotationChange\",\n      disabledChange: \"disabledChange\",\n      elementAttrChange: \"elementAttrChange\",\n      exportChange: \"exportChange\",\n      layersChange: \"layersChange\",\n      legendsChange: \"legendsChange\",\n      loadingIndicatorChange: \"loadingIndicatorChange\",\n      maxZoomFactorChange: \"maxZoomFactorChange\",\n      panningEnabledChange: \"panningEnabledChange\",\n      pathModifiedChange: \"pathModifiedChange\",\n      projectionChange: \"projectionChange\",\n      redrawOnResizeChange: \"redrawOnResizeChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      sizeChange: \"sizeChange\",\n      themeChange: \"themeChange\",\n      titleChange: \"titleChange\",\n      tooltipChange: \"tooltipChange\",\n      touchEnabledChange: \"touchEnabledChange\",\n      wheelEnabledChange: \"wheelEnabledChange\",\n      zoomFactorChange: \"zoomFactorChange\",\n      zoomingEnabledChange: \"zoomingEnabledChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function DxVectorMapComponent_Template(rf, ctx) {},\n    styles: [\"[_nghost-%COMP%] {  display: block; }\"]\n  });\n\n  __decorate([Input(), __metadata(\"design:type\", Array), __metadata(\"design:paramtypes\", [Array])], DxVectorMapComponent.prototype, \"annotations\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxVectorMapComponent.prototype, \"background\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Array), __metadata(\"design:paramtypes\", [Array])], DxVectorMapComponent.prototype, \"bounds\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Array), __metadata(\"design:paramtypes\", [Array])], DxVectorMapComponent.prototype, \"center\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxVectorMapComponent.prototype, \"commonAnnotationSettings\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxVectorMapComponent.prototype, \"controlBar\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Function])], DxVectorMapComponent.prototype, \"customizeAnnotation\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxVectorMapComponent.prototype, \"disabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxVectorMapComponent.prototype, \"elementAttr\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxVectorMapComponent.prototype, \"export\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Array), __metadata(\"design:paramtypes\", [Array])], DxVectorMapComponent.prototype, \"layers\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Array), __metadata(\"design:paramtypes\", [Array])], DxVectorMapComponent.prototype, \"legends\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxVectorMapComponent.prototype, \"loadingIndicator\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], DxVectorMapComponent.prototype, \"maxZoomFactor\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxVectorMapComponent.prototype, \"panningEnabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxVectorMapComponent.prototype, \"pathModified\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxVectorMapComponent.prototype, \"projection\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxVectorMapComponent.prototype, \"redrawOnResize\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxVectorMapComponent.prototype, \"rtlEnabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxVectorMapComponent.prototype, \"size\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxVectorMapComponent.prototype, \"theme\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxVectorMapComponent.prototype, \"title\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxVectorMapComponent.prototype, \"tooltip\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxVectorMapComponent.prototype, \"touchEnabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxVectorMapComponent.prototype, \"wheelEnabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], DxVectorMapComponent.prototype, \"zoomFactor\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxVectorMapComponent.prototype, \"zoomingEnabled\", null);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxVectorMapComponent.prototype, \"onCenterChanged\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxVectorMapComponent.prototype, \"onClick\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxVectorMapComponent.prototype, \"onDisposing\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxVectorMapComponent.prototype, \"onDrawn\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxVectorMapComponent.prototype, \"onExported\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxVectorMapComponent.prototype, \"onExporting\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxVectorMapComponent.prototype, \"onFileSaving\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxVectorMapComponent.prototype, \"onIncidentOccurred\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxVectorMapComponent.prototype, \"onInitialized\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxVectorMapComponent.prototype, \"onOptionChanged\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxVectorMapComponent.prototype, \"onSelectionChanged\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxVectorMapComponent.prototype, \"onTooltipHidden\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxVectorMapComponent.prototype, \"onTooltipShown\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxVectorMapComponent.prototype, \"onZoomFactorChanged\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxVectorMapComponent.prototype, \"annotationsChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxVectorMapComponent.prototype, \"backgroundChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxVectorMapComponent.prototype, \"boundsChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxVectorMapComponent.prototype, \"centerChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxVectorMapComponent.prototype, \"commonAnnotationSettingsChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxVectorMapComponent.prototype, \"controlBarChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxVectorMapComponent.prototype, \"customizeAnnotationChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxVectorMapComponent.prototype, \"disabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxVectorMapComponent.prototype, \"elementAttrChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxVectorMapComponent.prototype, \"exportChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxVectorMapComponent.prototype, \"layersChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxVectorMapComponent.prototype, \"legendsChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxVectorMapComponent.prototype, \"loadingIndicatorChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxVectorMapComponent.prototype, \"maxZoomFactorChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxVectorMapComponent.prototype, \"panningEnabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxVectorMapComponent.prototype, \"pathModifiedChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxVectorMapComponent.prototype, \"projectionChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxVectorMapComponent.prototype, \"redrawOnResizeChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxVectorMapComponent.prototype, \"rtlEnabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxVectorMapComponent.prototype, \"sizeChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxVectorMapComponent.prototype, \"themeChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxVectorMapComponent.prototype, \"titleChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxVectorMapComponent.prototype, \"tooltipChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxVectorMapComponent.prototype, \"touchEnabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxVectorMapComponent.prototype, \"wheelEnabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxVectorMapComponent.prototype, \"zoomFactorChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxVectorMapComponent.prototype, \"zoomingEnabledChange\", void 0);\n\n  __decorate([ContentChildren(DxiAnnotationComponent), __metadata(\"design:type\", QueryList), __metadata(\"design:paramtypes\", [Object])], DxVectorMapComponent.prototype, \"annotationsChildren\", null);\n\n  __decorate([ContentChildren(DxiLayerComponent), __metadata(\"design:type\", QueryList), __metadata(\"design:paramtypes\", [Object])], DxVectorMapComponent.prototype, \"layersChildren\", null);\n\n  __decorate([ContentChildren(DxiLegendComponent), __metadata(\"design:type\", QueryList), __metadata(\"design:paramtypes\", [Object])], DxVectorMapComponent.prototype, \"legendsChildren\", null);\n\n  DxVectorMapComponent = __decorate([__param(7, Inject(PLATFORM_ID)), __metadata(\"design:paramtypes\", [ElementRef, NgZone, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, TransferState, Object])], DxVectorMapComponent);\n  return DxVectorMapComponent;\n})();\nvar DxVectorMapModule = /*#__PURE__*/(function () {\n  var DxVectorMapModule = /*#__PURE__*/_createClass(function DxVectorMapModule() {\n    _classCallCheck(this, DxVectorMapModule);\n  });\n\n  DxVectorMapModule.ɵfac = function DxVectorMapModule_Factory(t) {\n    return new (t || DxVectorMapModule)();\n  };\n\n  DxVectorMapModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: DxVectorMapModule\n  });\n  DxVectorMapModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[DxiAnnotationModule, DxoBorderModule, DxoFontModule, DxoImageModule, DxoShadowModule, DxoBackgroundModule, DxoCommonAnnotationSettingsModule, DxoControlBarModule, DxoExportModule, DxiLayerModule, DxoLabelModule, DxiLegendModule, DxoMarginModule, DxoSourceModule, DxoTitleModule, DxoSubtitleModule, DxoLoadingIndicatorModule, DxoProjectionModule, DxoSizeModule, DxoTooltipModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxiAnnotationModule, DxoBorderModule, DxoFontModule, DxoImageModule, DxoShadowModule, DxoBackgroundModule, DxoCommonAnnotationSettingsModule, DxoControlBarModule, DxoExportModule, DxiLayerModule, DxoLabelModule, DxiLegendModule, DxoMarginModule, DxoSourceModule, DxoTitleModule, DxoSubtitleModule, DxoLoadingIndicatorModule, DxoProjectionModule, DxoSizeModule, DxoTooltipModule, DxTemplateModule]\n  });\n  return DxVectorMapModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxVectorMapModule, {\n    declarations: function declarations() {\n      return [DxVectorMapComponent];\n    },\n    imports: function imports() {\n      return [DxiAnnotationModule, DxoBorderModule, DxoFontModule, DxoImageModule, DxoShadowModule, DxoBackgroundModule, DxoCommonAnnotationSettingsModule, DxoControlBarModule, DxoExportModule, DxiLayerModule, DxoLabelModule, DxiLegendModule, DxoMarginModule, DxoSourceModule, DxoTitleModule, DxoSubtitleModule, DxoLoadingIndicatorModule, DxoProjectionModule, DxoSizeModule, DxoTooltipModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule];\n    },\n    exports: function exports() {\n      return [DxVectorMapComponent, DxiAnnotationModule, DxoBorderModule, DxoFontModule, DxoImageModule, DxoShadowModule, DxoBackgroundModule, DxoCommonAnnotationSettingsModule, DxoControlBarModule, DxoExportModule, DxiLayerModule, DxoLabelModule, DxiLegendModule, DxoMarginModule, DxoSourceModule, DxoTitleModule, DxoSubtitleModule, DxoLoadingIndicatorModule, DxoProjectionModule, DxoSizeModule, DxoTooltipModule, DxTemplateModule];\n    }\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DxVectorMapComponent, DxVectorMapModule }; //# sourceMappingURL=devextreme-angular-ui-vector-map.js.map","map":null,"metadata":{},"sourceType":"module"}