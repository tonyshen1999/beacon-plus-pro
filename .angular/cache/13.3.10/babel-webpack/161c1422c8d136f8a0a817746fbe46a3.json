{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/widget/utils.ink_ripple.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getOuterWidth, getOuterHeight } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nvar INKRIPPLE_CLASS = \"dx-inkripple\";\nvar INKRIPPLE_WAVE_CLASS = \"dx-inkripple-wave\";\nvar INKRIPPLE_SHOWING_CLASS = \"dx-inkripple-showing\";\nvar INKRIPPLE_HIDING_CLASS = \"dx-inkripple-hiding\";\nvar DEFAULT_WAVE_SIZE_COEFFICIENT = 2;\nvar MAX_WAVE_SIZE = 4e3;\nvar ANIMATION_DURATION = 300;\nvar HOLD_ANIMATION_DURATION = 1e3;\nvar DEFAULT_WAVE_INDEX = 0;\nexport var initConfig = function initConfig() {\n  var config = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n  var useHoldAnimation = config.useHoldAnimation,\n      waveSizeCoefficient = config.waveSizeCoefficient,\n      isCentered = config.isCentered,\n      wavesNumber = config.wavesNumber;\n  return {\n    waveSizeCoefficient: waveSizeCoefficient || DEFAULT_WAVE_SIZE_COEFFICIENT,\n    isCentered: isCentered || false,\n    wavesNumber: wavesNumber || 1,\n    durations: getDurations(null !== useHoldAnimation && void 0 !== useHoldAnimation ? useHoldAnimation : true)\n  };\n};\nexport var render = function render(args) {\n  var config = initConfig(args);\n  return {\n    showWave: showWave.bind(this, config),\n    hideWave: hideWave.bind(this, config)\n  };\n};\n\nvar getInkRipple = function getInkRipple(element) {\n  var result = element.children(\".\" + INKRIPPLE_CLASS);\n\n  if (0 === result.length) {\n    result = $(\"<div>\").addClass(INKRIPPLE_CLASS).appendTo(element);\n  }\n\n  return result;\n};\n\nvar getWaves = function getWaves(element, wavesNumber) {\n  var inkRipple = getInkRipple($(element));\n  var result = inkRipple.children(\".\" + INKRIPPLE_WAVE_CLASS).toArray();\n\n  for (var i = result.length; i < wavesNumber; i++) {\n    var $currentWave = $(\"<div>\").appendTo(inkRipple).addClass(INKRIPPLE_WAVE_CLASS);\n    result.push($currentWave[0]);\n  }\n\n  return $(result);\n};\n\nvar getWaveStyleConfig = function getWaveStyleConfig(args, config) {\n  var element = $(config.element);\n  var elementWidth = getOuterWidth(element);\n  var elementHeight = getOuterHeight(element);\n  var elementDiagonal = parseInt(Math.sqrt(elementWidth * elementWidth + elementHeight * elementHeight));\n  var waveSize = Math.min(MAX_WAVE_SIZE, parseInt(elementDiagonal * args.waveSizeCoefficient));\n  var left;\n  var top;\n\n  if (args.isCentered) {\n    left = (elementWidth - waveSize) / 2;\n    top = (elementHeight - waveSize) / 2;\n  } else {\n    var event = config.event;\n    var position = element.offset();\n    var x = event.pageX - position.left;\n    var y = event.pageY - position.top;\n    left = x - waveSize / 2;\n    top = y - waveSize / 2;\n  }\n\n  return {\n    left: left,\n    top: top,\n    height: waveSize,\n    width: waveSize\n  };\n};\n\nexport function showWave(args, config) {\n  var $wave = getWaves(config.element, args.wavesNumber).eq(config.wave || DEFAULT_WAVE_INDEX);\n  args.hidingTimeout && clearTimeout(args.hidingTimeout);\n  hideSelectedWave($wave);\n  $wave.css(getWaveStyleConfig(args, config));\n  args.showingTimeout = setTimeout(showingWaveHandler.bind(this, args, $wave), 0);\n}\n\nfunction showingWaveHandler(args, $wave) {\n  var durationCss = args.durations.showingScale + \"ms\";\n  $wave.addClass(INKRIPPLE_SHOWING_CLASS).css(\"transitionDuration\", durationCss);\n}\n\nfunction getDurations(useHoldAnimation) {\n  return {\n    showingScale: useHoldAnimation ? HOLD_ANIMATION_DURATION : ANIMATION_DURATION,\n    hidingScale: ANIMATION_DURATION,\n    hidingOpacity: ANIMATION_DURATION\n  };\n}\n\nfunction hideSelectedWave($wave) {\n  $wave.removeClass(INKRIPPLE_HIDING_CLASS).css(\"transitionDuration\", \"\");\n}\n\nexport function hideWave(args, config) {\n  args.showingTimeout && clearTimeout(args.showingTimeout);\n  var $wave = getWaves(config.element, config.wavesNumber).eq(config.wave || DEFAULT_WAVE_INDEX);\n  var durations = args.durations;\n  var durationCss = durations.hidingScale + \"ms, \" + durations.hidingOpacity + \"ms\";\n  $wave.addClass(INKRIPPLE_HIDING_CLASS).removeClass(INKRIPPLE_SHOWING_CLASS).css(\"transitionDuration\", durationCss);\n  var animationDuration = Math.max(durations.hidingScale, durations.hidingOpacity);\n  args.hidingTimeout = setTimeout(hideSelectedWave.bind(this, $wave), animationDuration);\n}","map":null,"metadata":{},"sourceType":"module"}