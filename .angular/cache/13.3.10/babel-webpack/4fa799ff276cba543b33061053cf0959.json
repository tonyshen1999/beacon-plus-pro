{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/polar_chart.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { noop } from \"../core/utils/common\";\nimport registerComponent from \"../core/component_registrator\";\nimport { extend } from \"../core/utils/extend\";\nimport { normalizeAngle, convertPolarToXY } from \"./core/utils\";\nimport { AdvancedChart } from \"./chart_components/advanced_chart\";\nimport { isDefined } from \"../core/utils/type\";\nvar DEFAULT_PANE_NAME = \"default\";\nvar DOUBLE_PI_ANGLE = 360;\nvar dxPolarChart = AdvancedChart.inherit({\n  _themeSection: \"polar\",\n  _createPanes: function _createPanes() {\n    this.callBase();\n    return [{\n      name: DEFAULT_PANE_NAME\n    }];\n  },\n  _checkPaneName: function _checkPaneName() {\n    return true;\n  },\n  _getAxisRenderingOptions: function _getAxisRenderingOptions(typeSelector) {\n    var isArgumentAxis = \"argumentAxis\" === typeSelector;\n    var type = isArgumentAxis ? \"circular\" : \"linear\";\n    var useSpiderWeb = this.option(\"useSpiderWeb\");\n\n    if (useSpiderWeb) {\n      type += \"Spider\";\n    }\n\n    return {\n      axisType: \"polarAxes\",\n      drawingType: type\n    };\n  },\n  _executeAppendBeforeSeries: function _executeAppendBeforeSeries(append) {\n    append();\n  },\n  _prepareAxisOptions: function _prepareAxisOptions(typeSelector, axisOptions) {\n    var isArgumentAxis = \"argumentAxis\" === typeSelector;\n    var themeManager = this._themeManager;\n    var axisUserOptions = this.option(\"argumentAxis\");\n    var argumentAxisOptions = themeManager.getOptions(\"argumentAxis\", axisUserOptions) || {};\n    var startAngle = isFinite(argumentAxisOptions.startAngle) ? normalizeAngle(argumentAxisOptions.startAngle) : 0;\n    return {\n      type: this.option(\"useSpiderWeb\") && isArgumentAxis ? \"discrete\" : axisOptions.type,\n      isHorizontal: true,\n      showCustomBoundaryTicks: isArgumentAxis,\n      startAngle: startAngle,\n      endAngle: startAngle + 360\n    };\n  },\n  _optionChangesMap: {\n    useSpiderWeb: \"AXES_AND_PANES\"\n  },\n  _getExtraOptions: function _getExtraOptions() {\n    return {\n      spiderWidget: this.option(\"useSpiderWeb\")\n    };\n  },\n  _prepareToRender: function _prepareToRender() {\n    this._appendAxesGroups();\n\n    return {};\n  },\n  _calcCanvas: function _calcCanvas() {\n    var canvas = extend({}, this._canvas);\n    var argumentAxis = this.getArgumentAxis();\n    var margins = argumentAxis.getMargins();\n    Object.keys(margins).forEach(function (margin) {\n      return canvas[margin] = canvas[\"original\".concat(margin[0].toUpperCase()).concat(margin.slice(1))] + margins[margin];\n    });\n    return canvas;\n  },\n  _renderAxes: function _renderAxes(drawOptions) {\n    var valueAxis = this._getValueAxis();\n\n    var argumentAxis = this.getArgumentAxis();\n    argumentAxis.draw(this._canvas);\n    valueAxis.setSpiderTicks(argumentAxis.getSpiderTicks());\n\n    var canvas = this._calcCanvas();\n\n    argumentAxis.updateSize(canvas);\n    valueAxis.draw(canvas);\n    return canvas;\n  },\n  _getValueAxis: function _getValueAxis() {\n    return this._valueAxes[0];\n  },\n  _shrinkAxes: function _shrinkAxes(sizeStorage) {\n    var valueAxis = this._getValueAxis();\n\n    var argumentAxis = this.getArgumentAxis();\n\n    if (sizeStorage && (sizeStorage.width || sizeStorage.height)) {\n      argumentAxis.hideOuterElements();\n\n      var canvas = this._calcCanvas();\n\n      argumentAxis.updateSize(canvas);\n      valueAxis.updateSize(canvas);\n    }\n  },\n  checkForMoreSpaceForPanesCanvas: function checkForMoreSpaceForPanesCanvas() {\n    return this.layoutManager.needMoreSpaceForPanesCanvas([{\n      canvas: this.getArgumentAxis().getCanvas()\n    }], this._isRotated());\n  },\n  _getLayoutTargets: function _getLayoutTargets() {\n    return [{\n      canvas: this._canvas\n    }];\n  },\n  _getSeriesForPane: function _getSeriesForPane() {\n    return this.series;\n  },\n  _applyClipRects: function _applyClipRects() {\n    var canvasClipRectID = this._getCanvasClipRectID();\n\n    this._createClipPathForPane();\n\n    this.getArgumentAxis().applyClipRects(this._getElementsClipRectID(), canvasClipRectID);\n\n    this._getValueAxis().applyClipRects(this._getElementsClipRectID(), canvasClipRectID);\n  },\n  _createClipPathForPane: function _createClipPathForPane() {\n    var valueAxis = this._getValueAxis();\n\n    var center = valueAxis.getCenter();\n    var radius = valueAxis.getRadius();\n    var panesClipRects = this._panesClipRects;\n    center = {\n      x: Math.round(center.x),\n      y: Math.round(center.y)\n    };\n\n    this._createClipCircle(panesClipRects.fixed, center.x, center.y, radius);\n\n    this._createClipCircle(panesClipRects.base, center.x, center.y, radius);\n\n    if (this.series.some(function (s) {\n      return s.areErrorBarsVisible();\n    })) {\n      this._createClipCircle(panesClipRects.wide, center.x, center.y, radius);\n    } else {\n      panesClipRects.wide[0] = null;\n    }\n  },\n  _createClipCircle: function _createClipCircle(clipArray, left, top, radius) {\n    var clipCircle = clipArray[0];\n\n    if (!clipCircle) {\n      clipCircle = this._renderer.clipCircle(left, top, radius);\n      clipArray[0] = clipCircle;\n    } else {\n      clipCircle.attr({\n        cx: left,\n        cy: top,\n        r: radius\n      });\n    }\n  },\n  _applyExtraSettings: function _applyExtraSettings(series) {\n    var wideClipRect = this._panesClipRects.wide[0];\n    series.setClippingParams(this._panesClipRects.base[0].id, wideClipRect && wideClipRect.id, false, false);\n  },\n  getActualAngle: function getActualAngle(angle) {\n    return this.getArgumentAxis().getOptions().inverted ? DOUBLE_PI_ANGLE - angle : angle;\n  },\n  getXYFromPolar: function getXYFromPolar(angle, radius, argument, value) {\n    var layoutInfo = {\n      angle: void 0,\n      radius: void 0,\n      x: void 0,\n      y: void 0\n    };\n\n    if (!isDefined(angle) && !isDefined(radius) && !isDefined(argument) && !isDefined(value)) {\n      return layoutInfo;\n    }\n\n    var argAxis = this.getArgumentAxis();\n    var startAngle = argAxis.getAngles()[0];\n    var argAngle;\n    var translatedRadius;\n\n    if (isDefined(argument)) {\n      argAngle = argAxis.getTranslator().translate(argument);\n    } else if (isFinite(angle)) {\n      argAngle = this.getActualAngle(angle);\n    } else if (!isDefined(angle)) {\n      argAngle = 0;\n    }\n\n    if (isDefined(value)) {\n      translatedRadius = this.getValueAxis().getTranslator().translate(value);\n    } else if (isFinite(radius)) {\n      translatedRadius = radius;\n    } else if (!isDefined(radius)) {\n      translatedRadius = argAxis.getRadius();\n    }\n\n    if (isDefined(argAngle) && isDefined(translatedRadius)) {\n      var coords = convertPolarToXY(argAxis.getCenter(), startAngle, argAngle, translatedRadius);\n      extend(layoutInfo, coords, {\n        angle: argAxis.getTranslatedAngle(argAngle),\n        radius: translatedRadius\n      });\n    }\n\n    return layoutInfo;\n  },\n  _applyPointMarkersAutoHiding: noop,\n  _createScrollBar: noop,\n  _isRotated: noop,\n  _getCrosshairOptions: noop,\n  _isLegendInside: noop\n});\nimport { plugins } from \"./core/annotations\";\ndxPolarChart.addPlugin(plugins.core);\ndxPolarChart.addPlugin(plugins.polarChart);\nregisterComponent(\"dxPolarChart\", dxPolarChart);\nexport default dxPolarChart;","map":null,"metadata":{},"sourceType":"module"}