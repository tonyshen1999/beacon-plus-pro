{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/diagram/ui.diagram.menu_helper.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { getImageContainer } from \"../../core/utils/icon\";\nvar DIAGRAM_CONTEXT_MENU_CLASS = \"dx-diagram-contextmenu\";\nvar DiagramMenuHelper = {\n  getContextMenuItemTemplate: function getContextMenuItemTemplate(contextMenu, itemData, itemIndex, itemElement) {\n    var $itemElement = $(itemElement);\n    $itemElement.empty();\n    var itemKey = void 0 !== itemData.rootCommand ? itemData.rootCommand : -1;\n\n    if (itemData.icon && !itemData.checked) {\n      var $iconElement = getImageContainer(itemData.icon);\n      $itemElement.append($iconElement);\n    } else if (contextMenu._menuHasCheckedItems && true === contextMenu._menuHasCheckedItems[itemKey]) {\n      var $checkElement = getImageContainer(\"check\");\n      $checkElement.css(\"visibility\", !itemData.checked ? \"hidden\" : \"visible\");\n      $itemElement.append($checkElement);\n    }\n\n    $itemElement.append('<span class=\"dx-menu-item-text\">' + itemData.text + \"</span>\");\n\n    if (Array.isArray(itemData.items) && itemData.items.length > 0) {\n      $itemElement.append('<span class=\"dx-menu-item-popout-container\"><div class=\"dx-menu-item-popout\"></div></span>');\n    }\n  },\n  getContextMenuCssClass: function getContextMenuCssClass() {\n    return DIAGRAM_CONTEXT_MENU_CLASS;\n  },\n  onContextMenuItemClick: function onContextMenuItemClick(widget, itemData, actionHandler) {\n    if ((void 0 !== itemData.command || void 0 !== itemData.name) && (!Array.isArray(itemData.items) || !itemData.items.length)) {\n      var parameter = DiagramMenuHelper.getItemCommandParameter(widget, itemData);\n      actionHandler.call(this, itemData.command, itemData.name, parameter);\n    } else if (void 0 !== itemData.rootCommand && void 0 !== itemData.value) {\n      var _parameter = DiagramMenuHelper.getItemCommandParameter(widget, itemData, itemData.value);\n\n      actionHandler.call(this, itemData.rootCommand, void 0, _parameter);\n    }\n  },\n  getItemValue: function getItemValue(item) {\n    return \"object\" === typeof item.value ? JSON.stringify(item.value) : item.value;\n  },\n  getItemOptionText: function getItemOptionText(contextMenu, indexPath) {\n    if (contextMenu) {\n      indexPath = indexPath.slice();\n\n      var parentItemOptionText = this._getParentItemOptionText(indexPath);\n\n      if (contextMenu._originalItemsInfo && contextMenu._originalItemsInfo[parentItemOptionText]) {\n        indexPath[indexPath.length - 1] += contextMenu._originalItemsInfo[parentItemOptionText].indexPathCorrection;\n      }\n    }\n\n    return this._getItemOptionTextCore(indexPath);\n  },\n  _getParentItemOptionText: function _getParentItemOptionText(indexPath) {\n    var parentIndexPath = indexPath.slice(0, indexPath.length - 1);\n    return this._getItemOptionTextCore(parentIndexPath);\n  },\n  _getItemOptionTextCore: function _getItemOptionTextCore(indexPath) {\n    return indexPath.reduce(function (r, i) {\n      return r + \"items[\".concat(i, \"].\");\n    }, \"\");\n  },\n  getItemCommandParameter: function getItemCommandParameter(widget, item, value) {\n    if (item.getParameter) {\n      return item.getParameter(widget);\n    }\n\n    return value;\n  },\n  updateContextMenuItems: function updateContextMenuItems(contextMenu, itemOptionText, rootCommandKey, items) {\n    var _this = this;\n\n    if (!contextMenu._originalItemsInfo) {\n      contextMenu._originalItemsInfo = {};\n    }\n\n    if (!contextMenu._originalItemsInfo[itemOptionText]) {\n      contextMenu._originalItemsInfo[itemOptionText] = {\n        items: contextMenu.option(itemOptionText + \"items\") || []\n      };\n    }\n\n    items = items.map(function (item) {\n      return {\n        value: _this.getItemValue(item),\n        text: item.text,\n        checked: item.checked,\n        widget: contextMenu,\n        rootCommand: rootCommandKey\n      };\n    });\n    var originalItems = contextMenu._originalItemsInfo[itemOptionText].items;\n    contextMenu.option(itemOptionText + \"items\", items.concat(originalItems));\n\n    if (contextMenu._originalItemsInfo[itemOptionText] && originalItems.length) {\n      contextMenu._originalItemsInfo[itemOptionText].indexPathCorrection = items.length;\n    }\n  },\n  updateContextMenuItemVisible: function updateContextMenuItemVisible(contextMenu, itemOptionText, visible) {\n    contextMenu.option(itemOptionText + \"visible\", visible);\n  },\n  updateContextMenuItemValue: function updateContextMenuItemValue(contextMenu, itemOptionText, rootCommandKey, value) {\n    var items = contextMenu.option(itemOptionText + \"items\");\n\n    if (\"boolean\" === typeof value && (!items || !items.length)) {\n      this._setContextMenuHasCheckedItems(contextMenu, -1);\n\n      contextMenu.option(itemOptionText + \"checked\", value);\n    } else if (void 0 !== value) {\n      this._setContextMenuHasCheckedItems(contextMenu, rootCommandKey);\n\n      if (Array.isArray(items)) {\n        items.forEach(function (item, index) {\n          item.checked = item.value === value;\n        });\n      }\n    }\n  },\n  _setContextMenuHasCheckedItems: function _setContextMenuHasCheckedItems(contextMenu, key) {\n    if (!contextMenu._menuHasCheckedItems) {\n      contextMenu._menuHasCheckedItems = {};\n    }\n\n    contextMenu._menuHasCheckedItems[key] = true;\n  }\n};\nexport default DiagramMenuHelper;","map":null,"metadata":{},"sourceType":"module"}