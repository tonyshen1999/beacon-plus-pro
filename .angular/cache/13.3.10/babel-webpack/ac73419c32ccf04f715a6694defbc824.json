{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/core/title.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { isString as _isString } from \"../../core/utils/type\";\nimport { extend } from \"../../core/utils/extend\";\nimport { patchFontOptions as _patchFontOptions, enumParser } from \"./utils\";\nimport { LayoutElement } from \"./layout_element\";\nvar _Number = Number;\nvar parseHorizontalAlignment = enumParser([\"left\", \"center\", \"right\"]);\nvar parseVerticalAlignment = enumParser([\"top\", \"bottom\"]);\nvar DEFAULT_MARGIN = 10;\n\nfunction hasText(text) {\n  return !!(text && String(text).length > 0);\n}\n\nfunction processTitleLength(elem, text, width, options, placeholderSize) {\n  if (elem.attr({\n    text: text\n  }).setMaxSize(width, placeholderSize, options).textChanged) {\n    elem.setTitle(text);\n  }\n}\n\nfunction pickMarginValue(value) {\n  return value >= 0 ? _Number(value) : DEFAULT_MARGIN;\n}\n\nfunction validateMargin(margin) {\n  var result;\n\n  if (margin >= 0) {\n    result = {\n      left: _Number(margin),\n      top: _Number(margin),\n      right: _Number(margin),\n      bottom: _Number(margin)\n    };\n  } else {\n    margin = margin || {};\n    result = {\n      left: pickMarginValue(margin.left),\n      top: pickMarginValue(margin.top),\n      right: pickMarginValue(margin.right),\n      bottom: pickMarginValue(margin.bottom)\n    };\n  }\n\n  return result;\n}\n\nfunction checkRect(rect, boundingRect) {\n  return rect[2] - rect[0] < boundingRect.width || rect[3] - rect[1] < boundingRect.height;\n}\n\nexport var Title = function Title(params) {\n  this._params = params;\n  this._group = params.renderer.g().attr({\n    class: params.cssClass\n  }).linkOn(params.root || params.renderer.root, \"title\");\n  this._hasText = false;\n};\nextend(Title.prototype, LayoutElement.prototype, {\n  dispose: function dispose() {\n    this._group.linkRemove();\n\n    this._group.linkOff();\n\n    if (this._titleElement) {\n      this._clipRect.dispose();\n\n      this._titleElement = this._subtitleElement = this._clipRect = null;\n    }\n\n    this._params = this._group = this._options = null;\n  },\n  _updateOptions: function _updateOptions(options) {\n    this._options = options;\n    this._options.horizontalAlignment = parseHorizontalAlignment(options.horizontalAlignment, \"center\");\n    this._options.verticalAlignment = parseVerticalAlignment(options.verticalAlignment, \"top\");\n    this._options.margin = validateMargin(options.margin);\n  },\n  _updateStructure: function _updateStructure() {\n    var renderer = this._params.renderer;\n    var group = this._group;\n    var options = this._options;\n    var align = options.horizontalAlignment;\n\n    if (!this._titleElement) {\n      this._titleElement = renderer.text().append(group);\n      this._subtitleElement = renderer.text();\n      this._clipRect = renderer.clipRect();\n      group.attr({\n        \"clip-path\": this._clipRect.id\n      });\n    }\n\n    this._titleElement.attr({\n      align: align,\n      class: options.cssClass\n    });\n\n    this._subtitleElement.attr({\n      align: align,\n      class: options.subtitle.cssClass\n    });\n\n    group.linkAppend();\n    hasText(options.subtitle.text) ? this._subtitleElement.append(group) : this._subtitleElement.remove();\n  },\n  _updateTexts: function _updateTexts() {\n    var options = this._options;\n    var subtitleOptions = options.subtitle;\n    var titleElement = this._titleElement;\n    var subtitleElement = this._subtitleElement;\n    var titleBox;\n    titleElement.attr({\n      text: \"A\",\n      y: 0\n    }).css(_patchFontOptions(options.font));\n    titleBox = titleElement.getBBox();\n    this._baseLineCorrection = titleBox.height + titleBox.y;\n    titleElement.attr({\n      text: options.text\n    });\n    titleBox = titleElement.getBBox();\n    var y = -titleBox.y;\n    titleElement.attr({\n      y: y\n    });\n\n    if (hasText(subtitleOptions.text)) {\n      subtitleElement.attr({\n        text: subtitleOptions.text,\n        y: 0\n      }).css(_patchFontOptions(subtitleOptions.font));\n    }\n  },\n  _shiftSubtitle: function _shiftSubtitle() {\n    var titleBox = this._titleElement.getBBox();\n\n    var element = this._subtitleElement;\n    var offset = this._options.subtitle.offset;\n    element.move(0, titleBox.y + titleBox.height - element.getBBox().y - offset);\n  },\n  _updateBoundingRectAlignment: function _updateBoundingRectAlignment() {\n    var boundingRect = this._boundingRect;\n    var options = this._options;\n    boundingRect.verticalAlignment = options.verticalAlignment;\n    boundingRect.horizontalAlignment = options.horizontalAlignment;\n    boundingRect.cutLayoutSide = options.verticalAlignment;\n    boundingRect.cutSide = \"vertical\";\n    boundingRect.position = {\n      horizontal: options.horizontalAlignment,\n      vertical: options.verticalAlignment\n    };\n  },\n  hasText: function hasText() {\n    return this._hasText;\n  },\n  update: function update(themeOptions, userOptions) {\n    var options = extend(true, {}, themeOptions, processTitleOptions(userOptions));\n\n    var _hasText = hasText(options.text);\n\n    var isLayoutChanged = _hasText || _hasText !== this._hasText;\n    this._baseLineCorrection = 0;\n\n    this._updateOptions(options);\n\n    this._boundingRect = {};\n\n    if (_hasText) {\n      this._updateStructure();\n\n      this._updateTexts();\n    } else {\n      this._group.linkRemove();\n    }\n\n    this._updateBoundingRect();\n\n    this._updateBoundingRectAlignment();\n\n    this._hasText = _hasText;\n    return isLayoutChanged;\n  },\n  draw: function draw(width, height) {\n    if (this._hasText) {\n      this._group.linkAppend();\n\n      this._correctTitleLength(width);\n\n      if (this._group.getBBox().height > height) {\n        this.freeSpace();\n      }\n    }\n\n    return this;\n  },\n  _correctTitleLength: function _correctTitleLength(width) {\n    var options = this._options;\n    var margin = options.margin;\n    var maxWidth = width - margin.left - margin.right;\n    var placeholderSize = options.placeholderSize;\n    processTitleLength(this._titleElement, options.text, maxWidth, options, placeholderSize);\n\n    if (this._subtitleElement) {\n      if (_Number(placeholderSize) > 0) {\n        placeholderSize -= this._titleElement.getBBox().height;\n      }\n\n      processTitleLength(this._subtitleElement, options.subtitle.text, maxWidth, options.subtitle, placeholderSize);\n\n      this._shiftSubtitle();\n    }\n\n    this._updateBoundingRect();\n\n    var _this$getCorrectedLay = this.getCorrectedLayoutOptions(),\n        x = _this$getCorrectedLay.x,\n        y = _this$getCorrectedLay.y,\n        height = _this$getCorrectedLay.height;\n\n    this._clipRect.attr({\n      x: x,\n      y: y,\n      width: width,\n      height: height\n    });\n  },\n  getLayoutOptions: function getLayoutOptions() {\n    return this._boundingRect || null;\n  },\n  shift: function shift(x, y) {\n    var box = this.getLayoutOptions();\n\n    this._group.move(x - box.x, y - box.y);\n\n    return this;\n  },\n  _updateBoundingRect: function _updateBoundingRect() {\n    var options = this._options;\n    var margin = options.margin;\n    var boundingRect = this._boundingRect;\n    var box = this._hasText ? this._group.getBBox() : {\n      width: 0,\n      height: 0,\n      x: 0,\n      y: 0,\n      isEmpty: true\n    };\n\n    if (!box.isEmpty) {\n      box.height += margin.top + margin.bottom - this._baseLineCorrection;\n      box.width += margin.left + margin.right;\n      box.x -= margin.left;\n      box.y += this._baseLineCorrection - margin.top;\n    }\n\n    if (options.placeholderSize > 0) {\n      box.height = options.placeholderSize;\n    }\n\n    boundingRect.height = box.height;\n    boundingRect.width = box.width;\n    boundingRect.x = box.x;\n    boundingRect.y = box.y;\n  },\n  getCorrectedLayoutOptions: function getCorrectedLayoutOptions() {\n    var srcBox = this.getLayoutOptions();\n    var correction = this._baseLineCorrection;\n    return extend({}, srcBox, {\n      y: srcBox.y - correction,\n      height: srcBox.height + correction\n    });\n  },\n  layoutOptions: function layoutOptions() {\n    if (!this._hasText) {\n      return null;\n    }\n\n    return {\n      horizontalAlignment: this._boundingRect.horizontalAlignment,\n      verticalAlignment: this._boundingRect.verticalAlignment,\n      priority: 0\n    };\n  },\n  measure: function measure(size) {\n    this.draw(size[0], size[1]);\n    return [this._boundingRect.width, this._boundingRect.height];\n  },\n  move: function move(rect, fitRect) {\n    var boundingRect = this._boundingRect;\n\n    if (checkRect(rect, boundingRect)) {\n      this.shift(fitRect[0], fitRect[1]);\n    } else {\n      this.shift(Math.round(rect[0]), Math.round(rect[1]));\n    }\n  },\n  freeSpace: function freeSpace() {\n    this._params.incidentOccurred(\"W2103\");\n\n    this._group.linkRemove();\n\n    this._boundingRect.width = this._boundingRect.height = 0;\n  },\n  getOptions: function getOptions() {\n    return this._options;\n  },\n  changeLink: function changeLink(root) {\n    this._group.linkRemove();\n\n    this._group.linkOn(root, \"title\");\n  }\n});\n\nfunction processTitleOptions(options) {\n  var newOptions = _isString(options) ? {\n    text: options\n  } : options || {};\n  newOptions.subtitle = _isString(newOptions.subtitle) ? {\n    text: newOptions.subtitle\n  } : newOptions.subtitle || {};\n  return newOptions;\n}\n\nexport var plugin = {\n  name: \"title\",\n  init: function init() {\n    this._title = new Title({\n      renderer: this._renderer,\n      cssClass: this._rootClassPrefix + \"-title\",\n      incidentOccurred: this._incidentOccurred\n    });\n\n    this._layout.add(this._title);\n  },\n  dispose: function dispose() {\n    this._title.dispose();\n\n    this._title = null;\n  },\n  customize: function customize(constructor) {\n    constructor.addChange({\n      code: \"TITLE\",\n      handler: function handler() {\n        if (this._title.update(this._themeManager.theme(\"title\"), this.option(\"title\"))) {\n          this._change([\"LAYOUT\"]);\n        }\n      },\n      isThemeDependent: true,\n      option: \"title\",\n      isOptionChange: true\n    });\n  },\n  fontFields: [\"title.font\", \"title.subtitle.font\"]\n};","map":null,"metadata":{},"sourceType":"module"}