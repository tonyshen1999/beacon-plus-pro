{"ast":null,"code":"import _defineProperty from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.notification_manager.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport Guid from \"../../core/guid\";\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport { getImageContainer } from \"../../core/utils/icon\";\nimport FileManagerProgressPanel from \"./ui.file_manager.notification.progress_panel\";\nvar FILE_MANAGER_PROGRESS_BOX_CLASS = \"dx-filemanager-progress-box\";\nvar FILE_MANAGER_PROGRESS_BOX_ERROR_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_BOX_CLASS, \"-error\");\nvar FILE_MANAGER_PROGRESS_BOX_IMAGE_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_BOX_CLASS, \"-image\");\nvar FILE_MANAGER_PROGRESS_BOX_WRAPPER_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_BOX_CLASS, \"-wrapper\");\nvar FILE_MANAGER_PROGRESS_BOX_COMMON_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_BOX_CLASS, \"-common\");\nvar MANAGER_ID_NAME = \"__operationInfoManager\";\nvar ACTION_PROGRESS_STATUS = {\n  default: \"default\",\n  progress: \"progress\",\n  error: \"error\",\n  success: \"success\"\n};\n\nvar NotificationManagerBase = /*#__PURE__*/function () {\n  function NotificationManagerBase(_ref) {\n    _classCallCheck(this, NotificationManagerBase);\n\n    var onActionProgressStatusChanged = _ref.onActionProgressStatusChanged,\n        isActual = _ref.isActual;\n    this._id = new Guid().toString();\n    this._isActual = isActual || false;\n    this._actionProgressStatus = ACTION_PROGRESS_STATUS.default;\n    this._raiseActionProgress = onActionProgressStatusChanged;\n  }\n\n  _createClass(NotificationManagerBase, [{\n    key: \"getId\",\n    value: function getId() {\n      return this._id;\n    }\n  }, {\n    key: \"isActual\",\n    value: function isActual() {\n      return this._isActual;\n    }\n  }, {\n    key: \"createErrorDetailsProgressBox\",\n    value: function createErrorDetailsProgressBox($container, item, errorText) {\n      var detailsItem = this._createDetailsItem($container, item);\n\n      this.renderError(detailsItem.$wrapper, errorText);\n    }\n  }, {\n    key: \"renderError\",\n    value: function renderError($container, errorText) {\n      $(\"<div>\").text(errorText).addClass(FILE_MANAGER_PROGRESS_BOX_ERROR_CLASS).appendTo($container);\n    }\n  }, {\n    key: \"isActionProgressStatusDefault\",\n    value: function isActionProgressStatusDefault() {\n      return this._actionProgressStatus === ACTION_PROGRESS_STATUS.default;\n    }\n  }, {\n    key: \"_createDetailsItem\",\n    value: function _createDetailsItem($container, item) {\n      var $detailsItem = $(\"<div>\").appendTo($container);\n      return this._createProgressBox($detailsItem, {\n        commonText: item.commonText,\n        imageUrl: item.imageUrl\n      });\n    }\n  }, {\n    key: \"_createProgressBox\",\n    value: function _createProgressBox($container, options) {\n      $container.addClass(FILE_MANAGER_PROGRESS_BOX_CLASS);\n\n      if (options.imageUrl) {\n        getImageContainer(options.imageUrl).addClass(FILE_MANAGER_PROGRESS_BOX_IMAGE_CLASS).appendTo($container);\n      }\n\n      var $wrapper = $(\"<div>\").addClass(FILE_MANAGER_PROGRESS_BOX_WRAPPER_CLASS).appendTo($container);\n      var $commonText = $(\"<div>\").addClass(FILE_MANAGER_PROGRESS_BOX_COMMON_CLASS).text(options.commonText).appendTo($wrapper);\n      return {\n        $commonText: $commonText,\n        $element: $container,\n        $wrapper: $wrapper\n      };\n    }\n  }]);\n\n  return NotificationManagerBase;\n}();\n\nvar NotificationManagerStub = /*#__PURE__*/function (_NotificationManagerB) {\n  _inherits(NotificationManagerStub, _NotificationManagerB);\n\n  var _super = _createSuper(NotificationManagerStub);\n\n  function NotificationManagerStub() {\n    _classCallCheck(this, NotificationManagerStub);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(NotificationManagerStub, [{\n    key: \"addOperation\",\n    value: function addOperation() {\n      return _defineProperty({}, MANAGER_ID_NAME, this._id);\n    }\n  }, {\n    key: \"addOperationDetails\",\n    value: function addOperationDetails() {}\n  }, {\n    key: \"updateOperationItemProgress\",\n    value: function updateOperationItemProgress() {}\n  }, {\n    key: \"completeOperationItem\",\n    value: function completeOperationItem() {}\n  }, {\n    key: \"completeOperation\",\n    value: function completeOperation() {}\n  }, {\n    key: \"completeSingleOperationWithError\",\n    value: function completeSingleOperationWithError() {}\n  }, {\n    key: \"addOperationDetailsError\",\n    value: function addOperationDetailsError() {}\n  }, {\n    key: \"handleDimensionChanged\",\n    value: function handleDimensionChanged() {\n      return false;\n    }\n  }, {\n    key: \"ensureProgressPanelCreated\",\n    value: function ensureProgressPanelCreated() {}\n  }, {\n    key: \"tryHideActionProgress\",\n    value: function tryHideActionProgress() {\n      this._updateActionProgress(\"\", ACTION_PROGRESS_STATUS.default);\n    }\n  }, {\n    key: \"updateActionProgressStatus\",\n    value: function updateActionProgressStatus() {\n      this._updateActionProgress(\"\", ACTION_PROGRESS_STATUS.default);\n    }\n  }, {\n    key: \"_updateActionProgress\",\n    value: function _updateActionProgress(message, status) {\n      if (status !== ACTION_PROGRESS_STATUS.default && status !== ACTION_PROGRESS_STATUS.progress) {\n        return;\n      }\n\n      this._actionProgressStatus = status;\n\n      this._raiseActionProgress(message, status);\n    }\n  }, {\n    key: \"hasNoOperations\",\n    value: function hasNoOperations() {\n      return true;\n    }\n  }, {\n    key: \"_operationInProgressCount\",\n    get: function get() {\n      return 0;\n    },\n    set: function set(value) {}\n  }, {\n    key: \"_failedOperationCount\",\n    get: function get() {\n      return 0;\n    },\n    set: function set(value) {}\n  }]);\n\n  return NotificationManagerStub;\n}(NotificationManagerBase);\n\nvar NotificationManager = /*#__PURE__*/function (_NotificationManagerB2) {\n  _inherits(NotificationManager, _NotificationManagerB2);\n\n  var _super2 = _createSuper(NotificationManager);\n\n  function NotificationManager(options) {\n    var _this;\n\n    _classCallCheck(this, NotificationManager);\n\n    _this = _super2.call(this, options);\n    _this._failedOperationCount = 0;\n    _this._operationInProgressCount = 0;\n    return _this;\n  }\n\n  _createClass(NotificationManager, [{\n    key: \"addOperation\",\n    value: function addOperation(processingMessage, allowCancel, allowProgressAutoUpdate) {\n      this._operationInProgressCount++;\n\n      var operationInfo = this._progressPanel.addOperation(processingMessage, allowCancel, allowProgressAutoUpdate);\n\n      operationInfo[MANAGER_ID_NAME] = this._id;\n\n      this._updateActionProgress(processingMessage, ACTION_PROGRESS_STATUS.progress);\n\n      return operationInfo;\n    }\n  }, {\n    key: \"addOperationDetails\",\n    value: function addOperationDetails(operationInfo, details, showCloseButton) {\n      this._progressPanel.addOperationDetails(operationInfo, details, showCloseButton);\n    }\n  }, {\n    key: \"updateOperationItemProgress\",\n    value: function updateOperationItemProgress(operationInfo, itemIndex, itemProgress, commonProgress) {\n      this._progressPanel.updateOperationItemProgress(operationInfo, itemIndex, itemProgress, commonProgress);\n    }\n  }, {\n    key: \"completeOperationItem\",\n    value: function completeOperationItem(operationInfo, itemIndex, commonProgress) {\n      this._progressPanel.completeOperationItem(operationInfo, itemIndex, commonProgress);\n    }\n  }, {\n    key: \"completeOperation\",\n    value: function completeOperation(operationInfo, commonText, isError, statusText) {\n      this._operationInProgressCount--;\n\n      if (isError) {\n        this._failedOperationCount++;\n      }\n\n      this._progressPanel.completeOperation(operationInfo, commonText, isError, statusText);\n    }\n  }, {\n    key: \"completeSingleOperationWithError\",\n    value: function completeSingleOperationWithError(operationInfo, errorInfo) {\n      this._progressPanel.completeSingleOperationWithError(operationInfo, errorInfo.detailErrorText);\n\n      this._notifyError(errorInfo);\n    }\n  }, {\n    key: \"addOperationDetailsError\",\n    value: function addOperationDetailsError(operationInfo, errorInfo) {\n      this._progressPanel.addOperationDetailsError(operationInfo, errorInfo.itemIndex, errorInfo.detailErrorText);\n\n      this._notifyError(errorInfo);\n    }\n  }, {\n    key: \"handleDimensionChanged\",\n    value: function handleDimensionChanged() {\n      if (this._progressPanel) {\n        this._progressPanel.$element().detach();\n      }\n\n      return true;\n    }\n  }, {\n    key: \"ensureProgressPanelCreated\",\n    value: function ensureProgressPanelCreated(container, options) {\n      var _this2 = this;\n\n      if (!this._progressPanel) {\n        var $progressPanelElement = $(\"<div>\").appendTo(container);\n\n        var ProgressPanelClass = this._getProgressPanelComponent();\n\n        this._progressPanel = new ProgressPanelClass($progressPanelElement, extend({}, options, {\n          onOperationClosed: function onOperationClosed(_ref2) {\n            var info = _ref2.info;\n            return _this2._onProgressPanelOperationClosed(info);\n          }\n        }));\n      } else {\n        this._progressPanel.$element().appendTo(container);\n      }\n    }\n  }, {\n    key: \"_getProgressPanelComponent\",\n    value: function _getProgressPanelComponent() {\n      return FileManagerProgressPanel;\n    }\n  }, {\n    key: \"_onProgressPanelOperationClosed\",\n    value: function _onProgressPanelOperationClosed(operationInfo) {\n      if (operationInfo.hasError) {\n        this._failedOperationCount--;\n        this.tryHideActionProgress();\n      }\n    }\n  }, {\n    key: \"tryHideActionProgress\",\n    value: function tryHideActionProgress() {\n      if (this.hasNoOperations()) {\n        this._updateActionProgress(\"\", ACTION_PROGRESS_STATUS.default);\n      }\n    }\n  }, {\n    key: \"updateActionProgressStatus\",\n    value: function updateActionProgressStatus(operationInfo) {\n      if (operationInfo) {\n        var status = 0 === this._failedOperationCount ? ACTION_PROGRESS_STATUS.success : ACTION_PROGRESS_STATUS.error;\n\n        this._updateActionProgress(\"\", status);\n      }\n    }\n  }, {\n    key: \"_notifyError\",\n    value: function _notifyError(errorInfo) {\n      var status = this.hasNoOperations() ? ACTION_PROGRESS_STATUS.default : ACTION_PROGRESS_STATUS.error;\n\n      this._updateActionProgress(errorInfo.commonErrorText, status);\n    }\n  }, {\n    key: \"_updateActionProgress\",\n    value: function _updateActionProgress(message, status) {\n      this._actionProgressStatus = status;\n\n      this._raiseActionProgress(message, status);\n    }\n  }, {\n    key: \"hasNoOperations\",\n    value: function hasNoOperations() {\n      return 0 === this._operationInProgressCount && 0 === this._failedOperationCount;\n    }\n  }, {\n    key: \"_operationInProgressCount\",\n    get: function get() {\n      return this._operationInProgressCountInternal;\n    },\n    set: function set(value) {\n      this._operationInProgressCountInternal = value;\n    }\n  }, {\n    key: \"_failedOperationCount\",\n    get: function get() {\n      return this._failedOperationCountInternal;\n    },\n    set: function set(value) {\n      this._failedOperationCountInternal = value;\n    }\n  }]);\n\n  return NotificationManager;\n}(NotificationManagerBase);\n\nexport { NotificationManager, NotificationManagerStub, MANAGER_ID_NAME };","map":null,"metadata":{},"sourceType":"module"}