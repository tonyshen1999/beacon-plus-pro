{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.work_space.grouped.strategy.vertical.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getBoundingRect } from \"../../../core/utils/position\";\nimport { Cache } from \"./cache\";\nimport { FIRST_GROUP_CELL_CLASS, LAST_GROUP_CELL_CLASS } from \"../classes\";\nimport { calculateDayDuration, getVerticalGroupCountClass } from \"../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\nvar DATE_HEADER_OFFSET = 10;\nvar WORK_SPACE_BORDER = 1;\n\nvar VerticalGroupedStrategy = /*#__PURE__*/function () {\n  function VerticalGroupedStrategy(workSpace) {\n    _classCallCheck(this, VerticalGroupedStrategy);\n\n    this._workSpace = workSpace;\n    this.cache = new Cache();\n  }\n\n  _createClass(VerticalGroupedStrategy, [{\n    key: \"prepareCellIndexes\",\n    value: function prepareCellIndexes(cellCoordinates, groupIndex, inAllDayRow) {\n      var rowIndex = cellCoordinates.rowIndex + groupIndex * this._workSpace._getRowCount();\n\n      if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\n        rowIndex += groupIndex;\n\n        if (!inAllDayRow) {\n          rowIndex += 1;\n        }\n      }\n\n      return {\n        rowIndex: rowIndex,\n        columnIndex: cellCoordinates.columnIndex\n      };\n    }\n  }, {\n    key: \"getGroupIndex\",\n    value: function getGroupIndex(rowIndex) {\n      return Math.floor(rowIndex / this._workSpace._getRowCount());\n    }\n  }, {\n    key: \"calculateHeaderCellRepeatCount\",\n    value: function calculateHeaderCellRepeatCount() {\n      return 1;\n    }\n  }, {\n    key: \"insertAllDayRowsIntoDateTable\",\n    value: function insertAllDayRowsIntoDateTable() {\n      return this._workSpace.option(\"showAllDayPanel\");\n    }\n  }, {\n    key: \"getTotalCellCount\",\n    value: function getTotalCellCount() {\n      return this._workSpace._getCellCount();\n    }\n  }, {\n    key: \"getTotalRowCount\",\n    value: function getTotalRowCount() {\n      return this._workSpace._getRowCount() * this._workSpace._getGroupCount();\n    }\n  }, {\n    key: \"calculateTimeCellRepeatCount\",\n    value: function calculateTimeCellRepeatCount() {\n      return this._workSpace._getGroupCount() || 1;\n    }\n  }, {\n    key: \"getWorkSpaceMinWidth\",\n    value: function getWorkSpaceMinWidth() {\n      var minWidth = this._workSpace._getWorkSpaceWidth();\n\n      var workspaceContainerWidth = getBoundingRect(this._workSpace.$element().get(0)).width - this._workSpace.getTimePanelWidth() - this._workSpace.getGroupTableWidth() - 2 * WORK_SPACE_BORDER;\n\n      if (minWidth < workspaceContainerWidth) {\n        minWidth = workspaceContainerWidth;\n      }\n\n      return minWidth;\n    }\n  }, {\n    key: \"getAllDayOffset\",\n    value: function getAllDayOffset() {\n      return 0;\n    }\n  }, {\n    key: \"getGroupCountClass\",\n    value: function getGroupCountClass(groups) {\n      return getVerticalGroupCountClass(groups);\n    }\n  }, {\n    key: \"getLeftOffset\",\n    value: function getLeftOffset() {\n      return this._workSpace.getTimePanelWidth() + this._workSpace.getGroupTableWidth();\n    }\n  }, {\n    key: \"getGroupBoundsOffset\",\n    value: function getGroupBoundsOffset(cellCount, $cells, cellWidth, coordinates) {\n      var _this = this;\n\n      var groupIndex = coordinates.groupIndex;\n      return this.cache.get(\"groupBoundsOffset\".concat(groupIndex), function () {\n        var startOffset = $cells.eq(0).offset().left;\n        var endOffset = $cells.eq(cellCount - 1).offset().left + cellWidth;\n\n        var startDayHour = _this._workSpace.option(\"startDayHour\");\n\n        var endDayHour = _this._workSpace.option(\"endDayHour\");\n\n        var hoursInterval = _this._workSpace.option(\"hoursInterval\");\n\n        var dayHeight = calculateDayDuration(startDayHour, endDayHour) / hoursInterval * _this._workSpace.getCellHeight();\n\n        var scrollTop = _this.getScrollableScrollTop();\n\n        var topOffset = groupIndex * dayHeight + getBoundingRect(_this._workSpace._$thead.get(0)).height + _this._workSpace.option(\"getHeaderHeight\")() + DATE_HEADER_OFFSET - scrollTop;\n\n        if (_this._workSpace.option(\"showAllDayPanel\") && _this._workSpace.supportAllDayRow()) {\n          topOffset += _this._workSpace.getCellHeight() * (groupIndex + 1);\n        }\n\n        var bottomOffset = topOffset + dayHeight;\n        return _this._groupBoundsOffset = {\n          left: startOffset,\n          right: endOffset,\n          top: topOffset,\n          bottom: bottomOffset\n        };\n      });\n    }\n  }, {\n    key: \"shiftIndicator\",\n    value: function shiftIndicator($indicator, height, rtlOffset, i) {\n      var offset = this._workSpace.getIndicatorOffset(0);\n\n      var tableOffset = this._workSpace.option(\"crossScrollingEnabled\") ? 0 : this._workSpace.getGroupTableWidth();\n      var horizontalOffset = rtlOffset ? rtlOffset - offset : offset;\n      var verticalOffset = this._workSpace._getRowCount() * this._workSpace.getCellHeight() * i;\n\n      if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\n        verticalOffset += this._workSpace.getAllDayHeight() * (i + 1);\n      }\n\n      $indicator.css(\"left\", horizontalOffset + tableOffset);\n      $indicator.css(\"top\", height + verticalOffset);\n    }\n  }, {\n    key: \"getShaderOffset\",\n    value: function getShaderOffset(i, width) {\n      var offset = this._workSpace.option(\"crossScrollingEnabled\") ? 0 : this._workSpace.getGroupTableWidth();\n      return this._workSpace.option(\"rtlEnabled\") ? getBoundingRect(this._$container.get(0)).width - offset - this._workSpace.getWorkSpaceLeftOffset() - width : offset;\n    }\n  }, {\n    key: \"getShaderTopOffset\",\n    value: function getShaderTopOffset(i) {\n      return 0;\n    }\n  }, {\n    key: \"getShaderHeight\",\n    value: function getShaderHeight() {\n      var height = this._workSpace.getIndicationHeight();\n\n      if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\n        height += this._workSpace.getCellHeight();\n      }\n\n      return height;\n    }\n  }, {\n    key: \"getShaderMaxHeight\",\n    value: function getShaderMaxHeight() {\n      var height = this._workSpace._getRowCount() * this._workSpace.getCellHeight();\n\n      if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\n        height += this._workSpace.getCellHeight();\n      }\n\n      return height;\n    }\n  }, {\n    key: \"getShaderWidth\",\n    value: function getShaderWidth() {\n      return this._workSpace.getIndicationWidth(0);\n    }\n  }, {\n    key: \"getScrollableScrollTop\",\n    value: function getScrollableScrollTop() {\n      return this._workSpace.getScrollable().scrollTop();\n    }\n  }, {\n    key: \"addAdditionalGroupCellClasses\",\n    value: function addAdditionalGroupCellClasses(cellClass, index, i, j) {\n      cellClass = this._addLastGroupCellClass(cellClass, i + 1);\n      return this._addFirstGroupCellClass(cellClass, i + 1);\n    }\n  }, {\n    key: \"_addLastGroupCellClass\",\n    value: function _addLastGroupCellClass(cellClass, index) {\n      if (index % this._workSpace._getRowCount() === 0) {\n        return \"\".concat(cellClass, \" \").concat(LAST_GROUP_CELL_CLASS);\n      }\n\n      return cellClass;\n    }\n  }, {\n    key: \"_addFirstGroupCellClass\",\n    value: function _addFirstGroupCellClass(cellClass, index) {\n      if ((index - 1) % this._workSpace._getRowCount() === 0) {\n        return \"\".concat(cellClass, \" \").concat(FIRST_GROUP_CELL_CLASS);\n      }\n\n      return cellClass;\n    }\n  }]);\n\n  return VerticalGroupedStrategy;\n}();\n\nexport default VerticalGroupedStrategy;","map":null,"metadata":{},"sourceType":"module"}