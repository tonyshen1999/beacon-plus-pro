{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/ui/html_editor/modules/resizing.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../../core/renderer\";\nimport eventsEngine from \"../../../events/core/events_engine\";\nimport { name as ClickEvent } from \"../../../events/click\";\nimport { addNamespace, normalizeKeyName } from \"../../../events/utils/index\";\nimport { move } from \"../../../animation/translator\";\nimport devices from \"../../../core/devices\";\nimport Resizable from \"../../resizable\";\nimport { getBoundingRect } from \"../../../core/utils/position\";\nimport Quill from \"devextreme-quill\";\nimport BaseModule from \"./base\";\nimport { getHeight, getOuterHeight, getOuterWidth, getWidth } from \"../../../core/utils/size\";\nvar DX_RESIZE_FRAME_CLASS = \"dx-resize-frame\";\nvar DX_TOUCH_DEVICE_CLASS = \"dx-touch-device\";\nvar MODULE_NAMESPACE = \"dxHtmlResizingModule\";\nvar KEYDOWN_EVENT = addNamespace(\"keydown\", MODULE_NAMESPACE);\nvar SCROLL_EVENT = addNamespace(\"scroll\", MODULE_NAMESPACE);\nvar MOUSEDOWN_EVENT = addNamespace(\"mousedown\", MODULE_NAMESPACE);\nvar FRAME_PADDING = 1;\n\nvar ResizingModule = /*#__PURE__*/function (_BaseModule) {\n  _inherits(ResizingModule, _BaseModule);\n\n  var _super = _createSuper(ResizingModule);\n\n  function ResizingModule(quill, options) {\n    var _this;\n\n    _classCallCheck(this, ResizingModule);\n\n    _this = _super.call(this, quill, options);\n    _this.allowedTargets = options.allowedTargets || [\"image\"];\n    _this.enabled = !!options.enabled;\n    _this._hideFrameWithContext = _this.hideFrame.bind(_assertThisInitialized(_this));\n    _this._framePositionChangedHandler = _this._prepareFramePositionChangedHandler();\n\n    if (_this.enabled) {\n      _this._attachEvents();\n\n      _this._createResizeFrame();\n    }\n\n    return _this;\n  }\n\n  _createClass(ResizingModule, [{\n    key: \"_attachEvents\",\n    value: function _attachEvents() {\n      eventsEngine.on(this.quill.root, addNamespace(ClickEvent, MODULE_NAMESPACE), this._clickHandler.bind(this));\n      eventsEngine.on(this.quill.root, SCROLL_EVENT, this._framePositionChangedHandler);\n      this.editorInstance.on(\"focusOut\", this._hideFrameWithContext);\n      this.quill.on(\"text-change\", this._framePositionChangedHandler);\n    }\n  }, {\n    key: \"_detachEvents\",\n    value: function _detachEvents() {\n      eventsEngine.off(this.quill.root, MODULE_NAMESPACE);\n      this.editorInstance.off(\"focusOut\", this._hideFrameWithContext);\n      this.quill.off(\"text-change\", this._framePositionChangedHandler);\n    }\n  }, {\n    key: \"_clickHandler\",\n    value: function _clickHandler(e) {\n      if (this._isAllowedTarget(e.target)) {\n        if (this._$target === e.target) {\n          return;\n        }\n\n        this._$target = e.target;\n        var $target = $(this._$target);\n        var minWidth = Math.max(getOuterWidth($target) - getWidth($target), this.resizable.option(\"minWidth\"));\n        var minHeight = Math.max(getOuterHeight($target) - getHeight($target), this.resizable.option(\"minHeight\"));\n        this.resizable.option({\n          minWidth: minWidth,\n          minHeight: minHeight\n        });\n        this.updateFramePosition();\n        this.showFrame();\n\n        this._adjustSelection();\n      } else if (this._$target) {\n        this.hideFrame();\n      }\n    }\n  }, {\n    key: \"_prepareFramePositionChangedHandler\",\n    value: function _prepareFramePositionChangedHandler(e) {\n      var _this2 = this;\n\n      return function () {\n        if (_this2._$target) {\n          _this2.updateFramePosition();\n        }\n      };\n    }\n  }, {\n    key: \"_adjustSelection\",\n    value: function _adjustSelection() {\n      if (!this.quill.getSelection()) {\n        this.quill.setSelection(0, 0);\n      }\n    }\n  }, {\n    key: \"_isAllowedTarget\",\n    value: function _isAllowedTarget(targetElement) {\n      return this._isImage(targetElement);\n    }\n  }, {\n    key: \"_isImage\",\n    value: function _isImage(targetElement) {\n      return -1 !== this.allowedTargets.indexOf(\"image\") && \"IMG\" === targetElement.tagName.toUpperCase();\n    }\n  }, {\n    key: \"showFrame\",\n    value: function showFrame() {\n      this._$resizeFrame.show();\n\n      eventsEngine.on(this.quill.root, KEYDOWN_EVENT, this._handleFrameKeyDown.bind(this));\n    }\n  }, {\n    key: \"_handleFrameKeyDown\",\n    value: function _handleFrameKeyDown(e) {\n      var keyName = normalizeKeyName(e);\n\n      if (\"del\" === keyName || \"backspace\" === keyName) {\n        this._deleteImage();\n      }\n\n      this.hideFrame();\n    }\n  }, {\n    key: \"hideFrame\",\n    value: function hideFrame() {\n      this._$target = null;\n\n      this._$resizeFrame.hide();\n\n      eventsEngine.off(this.quill.root, KEYDOWN_EVENT);\n    }\n  }, {\n    key: \"updateFramePosition\",\n    value: function updateFramePosition() {\n      var _getBoundingRect = getBoundingRect(this._$target),\n          height = _getBoundingRect.height,\n          width = _getBoundingRect.width,\n          targetTop = _getBoundingRect.top,\n          targetLeft = _getBoundingRect.left;\n\n      var _getBoundingRect2 = getBoundingRect(this.quill.root),\n          containerTop = _getBoundingRect2.top,\n          containerLeft = _getBoundingRect2.left;\n\n      var borderWidth = this._getBorderWidth();\n\n      this._$resizeFrame.css({\n        height: height,\n        width: width,\n        padding: FRAME_PADDING,\n        top: targetTop - containerTop - borderWidth - FRAME_PADDING,\n        left: targetLeft - containerLeft - borderWidth - FRAME_PADDING\n      });\n\n      move(this._$resizeFrame, {\n        left: 0,\n        top: 0\n      });\n    }\n  }, {\n    key: \"_getBorderWidth\",\n    value: function _getBorderWidth() {\n      return parseInt(this._$resizeFrame.css(\"borderTopWidth\"));\n    }\n  }, {\n    key: \"_createResizeFrame\",\n    value: function _createResizeFrame() {\n      var _this3 = this;\n\n      if (this._$resizeFrame) {\n        return;\n      }\n\n      var _devices$current = devices.current(),\n          deviceType = _devices$current.deviceType;\n\n      this._$resizeFrame = $(\"<div>\").addClass(DX_RESIZE_FRAME_CLASS).toggleClass(DX_TOUCH_DEVICE_CLASS, \"desktop\" !== deviceType).appendTo(this.editorInstance._getQuillContainer()).hide();\n      eventsEngine.on(this._$resizeFrame, MOUSEDOWN_EVENT, function (e) {\n        e.preventDefault();\n      });\n      this.resizable = this.editorInstance._createComponent(this._$resizeFrame, Resizable, {\n        _keepAspectRatio: true,\n        onResize: function onResize(e) {\n          if (!_this3._$target) {\n            return;\n          }\n\n          $(_this3._$target).attr({\n            height: e.height,\n            width: e.width\n          });\n\n          _this3.updateFramePosition();\n        }\n      });\n    }\n  }, {\n    key: \"_deleteImage\",\n    value: function _deleteImage() {\n      if (this._isAllowedTarget(this._$target)) {\n        var _Quill$find;\n\n        null === (_Quill$find = Quill.find(this._$target)) || void 0 === _Quill$find ? void 0 : _Quill$find.deleteAt(0);\n      }\n    }\n  }, {\n    key: \"option\",\n    value: function option(_option, value) {\n      if (\"mediaResizing\" === _option) {\n        this.handleOptionChangeValue(value);\n        return;\n      }\n\n      if (\"enabled\" === _option) {\n        this.enabled = value;\n        value ? this._attachEvents() : this._detachEvents();\n      } else if (\"allowedTargets\" === _option && Array.isArray(value)) {\n        this.allowedTargets = value;\n      }\n    }\n  }, {\n    key: \"clean\",\n    value: function clean() {\n      this._detachEvents();\n\n      this._$resizeFrame.remove();\n\n      this._$resizeFrame = void 0;\n    }\n  }]);\n\n  return ResizingModule;\n}(BaseModule);\n\nexport { ResizingModule as default };","map":null,"metadata":{},"sourceType":"module"}