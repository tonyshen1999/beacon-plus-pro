{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/appointmentAdapter.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { extend } from \"../../core/utils/extend\";\nimport errors from \"../widget/ui.errors\";\nimport { deepExtendArraySafe } from \"../../core/utils/object\";\nimport { getRecurrenceProcessor } from \"./recurrence\";\nimport { ExpressionUtils } from \"./expressionUtils\";\nvar PROPERTY_NAMES = {\n  startDate: \"startDate\",\n  endDate: \"endDate\",\n  allDay: \"allDay\",\n  text: \"text\",\n  description: \"description\",\n  startDateTimeZone: \"startDateTimeZone\",\n  endDateTimeZone: \"endDateTimeZone\",\n  recurrenceRule: \"recurrenceRule\",\n  recurrenceException: \"recurrenceException\",\n  disabled: \"disabled\"\n};\n\nvar AppointmentAdapter = /*#__PURE__*/function () {\n  function AppointmentAdapter(rawAppointment, dataAccessors, timeZoneCalculator, options) {\n    _classCallCheck(this, AppointmentAdapter);\n\n    this.rawAppointment = rawAppointment;\n    this.dataAccessors = dataAccessors;\n    this.timeZoneCalculator = timeZoneCalculator;\n    this.options = options;\n  }\n\n  _createClass(AppointmentAdapter, [{\n    key: \"duration\",\n    get: function get() {\n      return this.endDate ? this.endDate - this.startDate : 0;\n    }\n  }, {\n    key: \"startDate\",\n    get: function get() {\n      var result = this.getField(PROPERTY_NAMES.startDate);\n      return void 0 === result ? result : new Date(result);\n    },\n    set: function set(value) {\n      this.setField(PROPERTY_NAMES.startDate, value);\n    }\n  }, {\n    key: \"endDate\",\n    get: function get() {\n      var result = this.getField(PROPERTY_NAMES.endDate);\n      return void 0 === result ? result : new Date(result);\n    },\n    set: function set(value) {\n      this.setField(PROPERTY_NAMES.endDate, value);\n    }\n  }, {\n    key: \"allDay\",\n    get: function get() {\n      return this.getField(PROPERTY_NAMES.allDay);\n    },\n    set: function set(value) {\n      this.setField(PROPERTY_NAMES.allDay, value);\n    }\n  }, {\n    key: \"text\",\n    get: function get() {\n      return this.getField(PROPERTY_NAMES.text);\n    },\n    set: function set(value) {\n      this.setField(PROPERTY_NAMES.text, value);\n    }\n  }, {\n    key: \"description\",\n    get: function get() {\n      return this.getField(PROPERTY_NAMES.description);\n    },\n    set: function set(value) {\n      this.setField(PROPERTY_NAMES.description, value);\n    }\n  }, {\n    key: \"startDateTimeZone\",\n    get: function get() {\n      return this.getField(PROPERTY_NAMES.startDateTimeZone);\n    }\n  }, {\n    key: \"endDateTimeZone\",\n    get: function get() {\n      return this.getField(PROPERTY_NAMES.endDateTimeZone);\n    }\n  }, {\n    key: \"recurrenceRule\",\n    get: function get() {\n      return this.getField(PROPERTY_NAMES.recurrenceRule);\n    },\n    set: function set(value) {\n      this.setField(PROPERTY_NAMES.recurrenceRule, value);\n    }\n  }, {\n    key: \"recurrenceException\",\n    get: function get() {\n      return this.getField(PROPERTY_NAMES.recurrenceException);\n    },\n    set: function set(value) {\n      this.setField(PROPERTY_NAMES.recurrenceException, value);\n    }\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return !!this.getField(PROPERTY_NAMES.disabled);\n    }\n  }, {\n    key: \"isRecurrent\",\n    get: function get() {\n      return getRecurrenceProcessor().isValidRecurrenceRule(this.recurrenceRule);\n    }\n  }, {\n    key: \"getField\",\n    value: function getField(property) {\n      return ExpressionUtils.getField(this.dataAccessors, property, this.rawAppointment);\n    }\n  }, {\n    key: \"setField\",\n    value: function setField(property, value) {\n      return ExpressionUtils.setField(this.dataAccessors, property, this.rawAppointment, value);\n    }\n  }, {\n    key: \"calculateStartDate\",\n    value: function calculateStartDate(pathTimeZoneConversion) {\n      if (!this.startDate || isNaN(this.startDate.getTime())) {\n        throw errors.Error(\"E1032\", this.text);\n      }\n\n      return this.calculateDate(this.startDate, this.startDateTimeZone, pathTimeZoneConversion);\n    }\n  }, {\n    key: \"calculateEndDate\",\n    value: function calculateEndDate(pathTimeZoneConversion) {\n      return this.calculateDate(this.endDate, this.endDateTimeZone, pathTimeZoneConversion);\n    }\n  }, {\n    key: \"calculateDate\",\n    value: function calculateDate(date, appointmentTimeZone, pathTimeZoneConversion) {\n      if (!date) {\n        return;\n      }\n\n      return this.timeZoneCalculator.createDate(date, {\n        appointmentTimeZone: appointmentTimeZone,\n        path: pathTimeZoneConversion\n      });\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var options = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : void 0;\n      var result = new AppointmentAdapter(deepExtendArraySafe({}, this.rawAppointment), this.dataAccessors, this.timeZoneCalculator, options);\n\n      if (null !== options && void 0 !== options && options.pathTimeZone) {\n        result.startDate = result.calculateStartDate(options.pathTimeZone);\n        result.endDate = result.calculateEndDate(options.pathTimeZone);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"source\",\n    value: function source() {\n      var serializeDate = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : false;\n\n      if (serializeDate) {\n        var clonedAdapter = this.clone();\n        clonedAdapter.startDate = this.startDate;\n        clonedAdapter.endDate = this.endDate;\n        return clonedAdapter.source();\n      }\n\n      return extend({}, this.rawAppointment);\n    }\n  }]);\n\n  return AppointmentAdapter;\n}();\n\nexport default AppointmentAdapter;\nexport var createAppointmentAdapter = function createAppointmentAdapter(rawAppointment, dataAccessors, timeZoneCalculator, options) {\n  return new AppointmentAdapter(rawAppointment, dataAccessors, timeZoneCalculator, options);\n};","map":null,"metadata":{},"sourceType":"module"}