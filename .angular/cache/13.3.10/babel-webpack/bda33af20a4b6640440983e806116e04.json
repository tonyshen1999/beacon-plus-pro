{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/validator.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { data as elementData } from \"../core/element_data\";\nimport Callbacks from \"../core/utils/callbacks\";\nimport errors from \"./widget/ui.errors\";\nimport DOMComponent from \"../core/dom_component\";\nimport { extend } from \"../core/utils/extend\";\nimport { map } from \"../core/utils/iterator\";\nimport ValidationEngine from \"./validation_engine\";\nimport DefaultAdapter from \"./validation/default_adapter\";\nimport registerComponent from \"../core/component_registrator\";\nimport { Deferred } from \"../core/utils/deferred\";\nimport Guid from \"../core/guid\";\nvar VALIDATOR_CLASS = \"dx-validator\";\nvar VALIDATION_STATUS_VALID = \"valid\";\nvar VALIDATION_STATUS_INVALID = \"invalid\";\nvar VALIDATION_STATUS_PENDING = \"pending\";\nvar Validator = DOMComponent.inherit({\n  _initOptions: function _initOptions(options) {\n    this.callBase.apply(this, arguments);\n    this.option(ValidationEngine.initValidationOptions(options));\n  },\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      validationRules: []\n    });\n  },\n  _init: function _init() {\n    this.callBase();\n\n    this._initGroupRegistration();\n\n    this.focused = Callbacks();\n\n    this._initAdapter();\n\n    this._validationInfo = {\n      result: null,\n      deferred: null,\n      skipValidation: false\n    };\n  },\n  _initGroupRegistration: function _initGroupRegistration() {\n    var group = this._findGroup();\n\n    if (!this._groupWasInit) {\n      this.on(\"disposing\", function (args) {\n        ValidationEngine.removeRegisteredValidator(args.component._validationGroup, args.component);\n      });\n    }\n\n    if (!this._groupWasInit || this._validationGroup !== group) {\n      ValidationEngine.removeRegisteredValidator(this._validationGroup, this);\n      this._groupWasInit = true;\n      this._validationGroup = group;\n      ValidationEngine.registerValidatorInGroup(group, this);\n    }\n  },\n  _setOptionsByReference: function _setOptionsByReference() {\n    this.callBase();\n    extend(this._optionsByReference, {\n      validationGroup: true\n    });\n  },\n  _getEditor: function _getEditor() {\n    var element = this.$element()[0];\n    return elementData(element, \"dx-validation-target\");\n  },\n  _initAdapter: function _initAdapter() {\n    var _this = this;\n\n    var dxStandardEditor = this._getEditor();\n\n    var adapter = this.option(\"adapter\");\n\n    if (!adapter) {\n      if (dxStandardEditor) {\n        adapter = new DefaultAdapter(dxStandardEditor, this);\n        adapter.validationRequestsCallbacks.push(function (args) {\n          if (_this._validationInfo.skipValidation) {\n            return;\n          }\n\n          _this.validate(args);\n        });\n        this.option(\"adapter\", adapter);\n        return;\n      }\n\n      throw errors.Error(\"E0120\");\n    }\n\n    var callbacks = adapter.validationRequestsCallbacks;\n\n    if (callbacks) {\n      callbacks.push(function (args) {\n        _this.validate(args);\n      });\n    }\n  },\n  _toggleRTLDirection: function _toggleRTLDirection(isRtl) {\n    var _this$option$editor$o, _this$option, _this$option$editor;\n\n    var rtlEnabled = null !== (_this$option$editor$o = null === (_this$option = this.option(\"adapter\")) || void 0 === _this$option ? void 0 : null === (_this$option$editor = _this$option.editor) || void 0 === _this$option$editor ? void 0 : _this$option$editor.option(\"rtlEnabled\")) && void 0 !== _this$option$editor$o ? _this$option$editor$o : isRtl;\n    this.callBase(rtlEnabled);\n  },\n  _initMarkup: function _initMarkup() {\n    this.$element().addClass(VALIDATOR_CLASS);\n    this.callBase();\n  },\n  _render: function _render() {\n    this.callBase();\n\n    this._toggleAccessibilityAttributes();\n  },\n  _toggleAccessibilityAttributes: function _toggleAccessibilityAttributes() {\n    var dxStandardEditor = this._getEditor();\n\n    if (dxStandardEditor) {\n      var rules = this.option(\"validationRules\") || [];\n      var isRequired = rules.some(function (_ref) {\n        var type = _ref.type;\n        return \"required\" === type;\n      }) || null;\n\n      if (dxStandardEditor.isInitialized()) {\n        dxStandardEditor.setAria(\"required\", isRequired);\n      }\n\n      dxStandardEditor.option(\"_onMarkupRendered\", function () {\n        dxStandardEditor.setAria(\"required\", isRequired);\n      });\n    }\n  },\n  _visibilityChanged: function _visibilityChanged(visible) {\n    if (visible) {\n      this._initGroupRegistration();\n    }\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"validationGroup\":\n        this._initGroupRegistration();\n\n        return;\n\n      case \"validationRules\":\n        this._resetValidationRules();\n\n        this._toggleAccessibilityAttributes();\n\n        void 0 !== this.option(\"isValid\") && this.validate();\n        return;\n\n      case \"adapter\":\n        this._initAdapter();\n\n        break;\n\n      case \"isValid\":\n      case \"validationStatus\":\n        this.option(ValidationEngine.synchronizeValidationOptions(args, this.option()));\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  _getValidationRules: function _getValidationRules() {\n    var _this2 = this;\n\n    if (!this._validationRules) {\n      this._validationRules = map(this.option(\"validationRules\"), function (rule, index) {\n        return extend({}, rule, {\n          validator: _this2,\n          index: index\n        });\n      });\n    }\n\n    return this._validationRules;\n  },\n  _findGroup: function _findGroup() {\n    var $element = this.$element();\n    return this.option(\"validationGroup\") || ValidationEngine.findGroup($element, this._modelByElement($element));\n  },\n  _resetValidationRules: function _resetValidationRules() {\n    delete this._validationRules;\n  },\n  validate: function validate(args) {\n    var _this3 = this;\n\n    var adapter = this.option(\"adapter\");\n    var name = this.option(\"name\");\n    var bypass = adapter.bypass && adapter.bypass();\n    var value = args && void 0 !== args.value ? args.value : adapter.getValue();\n    var currentError = adapter.getCurrentValidationError && adapter.getCurrentValidationError();\n\n    var rules = this._getValidationRules();\n\n    var currentResult = this._validationInfo && this._validationInfo.result;\n\n    if (currentResult && currentResult.status === VALIDATION_STATUS_PENDING && currentResult.value === value) {\n      return extend({}, currentResult);\n    }\n\n    var result;\n\n    if (bypass) {\n      result = {\n        isValid: true,\n        status: VALIDATION_STATUS_VALID\n      };\n    } else if (currentError && currentError.editorSpecific) {\n      currentError.validator = this;\n      result = {\n        isValid: false,\n        status: VALIDATION_STATUS_INVALID,\n        brokenRule: currentError,\n        brokenRules: [currentError]\n      };\n    } else {\n      result = ValidationEngine.validate(value, rules, name);\n    }\n\n    result.id = new Guid().toString();\n\n    this._applyValidationResult(result, adapter);\n\n    result.complete && result.complete.then(function (res) {\n      if (res.id === _this3._validationInfo.result.id) {\n        _this3._applyValidationResult(res, adapter);\n      }\n    });\n    return extend({}, this._validationInfo.result);\n  },\n  reset: function reset() {\n    var adapter = this.option(\"adapter\");\n    var result = {\n      id: null,\n      isValid: true,\n      brokenRule: null,\n      brokenRules: null,\n      pendingRules: null,\n      status: VALIDATION_STATUS_VALID,\n      complete: null\n    };\n    this._validationInfo.skipValidation = true;\n    adapter.reset();\n    this._validationInfo.skipValidation = false;\n\n    this._resetValidationRules();\n\n    this._applyValidationResult(result, adapter);\n  },\n  _updateValidationResult: function _updateValidationResult(result) {\n    if (!this._validationInfo.result || this._validationInfo.result.id !== result.id) {\n      var complete = this._validationInfo.deferred && this._validationInfo.result.complete;\n      this._validationInfo.result = extend({}, result, {\n        complete: complete\n      });\n    } else {\n      for (var prop in result) {\n        if (\"id\" !== prop && \"complete\" !== prop) {\n          this._validationInfo.result[prop] = result[prop];\n        }\n      }\n    }\n  },\n  _applyValidationResult: function _applyValidationResult(result, adapter) {\n    var validatedAction = this._createActionByOption(\"onValidated\", {\n      excludeValidators: [\"readOnly\"]\n    });\n\n    result.validator = this;\n\n    this._updateValidationResult(result);\n\n    adapter.applyValidationResults && adapter.applyValidationResults(this._validationInfo.result);\n    this.option({\n      validationStatus: this._validationInfo.result.status\n    });\n\n    if (this._validationInfo.result.status === VALIDATION_STATUS_PENDING) {\n      if (!this._validationInfo.deferred) {\n        this._validationInfo.deferred = new Deferred();\n        this._validationInfo.result.complete = this._validationInfo.deferred.promise();\n      }\n\n      this._eventsStrategy.fireEvent(\"validating\", [this._validationInfo.result]);\n\n      return;\n    }\n\n    if (this._validationInfo.result.status !== VALIDATION_STATUS_PENDING) {\n      validatedAction(result);\n\n      if (this._validationInfo.deferred) {\n        this._validationInfo.deferred.resolve(result);\n\n        this._validationInfo.deferred = null;\n      }\n    }\n  },\n  focus: function focus() {\n    var adapter = this.option(\"adapter\");\n    adapter && adapter.focus && adapter.focus();\n  },\n  _useTemplates: function _useTemplates() {\n    return false;\n  }\n});\nregisterComponent(\"dxValidator\", Validator);\nexport default Validator;","map":null,"metadata":{},"sourceType":"module"}