{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __decorate, __metadata, __param } from 'tslib';\nimport { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { forwardRef, ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, HostListener, Component, NgModule } from '@angular/core';\nimport DxRangeSelector from 'devextreme/viz/range_selector';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { DxComponent, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxoBackgroundModule, DxoImageModule, DxoBehaviorModule, DxoChartModule, DxoCommonSeriesSettingsModule, DxoAggregationModule, DxoAreaModule, DxoBorderModule, DxoHoverStyleModule, DxoHatchingModule, DxoLabelModule, DxoConnectorModule, DxoPointModule, DxoHeightModule, DxoUrlModule, DxoWidthModule, DxoSelectionStyleModule, DxoReductionModule, DxoValueErrorBarModule, DxoBarModule, DxoBubbleModule, DxoCandlestickModule, DxoFullstackedareaModule, DxoFullstackedbarModule, DxoFullstackedlineModule, DxoFullstackedsplineModule, DxoFullstackedsplineareaModule, DxoArgumentFormatModule, DxoFontModule, DxoFormatModule, DxoLineModule, DxoRangeareaModule, DxoRangebarModule, DxoScatterModule, DxoSplineModule, DxoSplineareaModule, DxoStackedareaModule, DxoStackedbarModule, DxoStackedlineModule, DxoStackedsplineModule, DxoStackedsplineareaModule, DxoStepareaModule, DxoSteplineModule, DxoStockModule, DxoDataPrepareSettingsModule, DxiSeriesModule, DxoSeriesTemplateModule, DxoValueAxisModule, DxoExportModule, DxoIndentModule, DxoLoadingIndicatorModule, DxoMarginModule, DxoScaleModule, DxoAggregationIntervalModule, DxiBreakModule, DxoBreakStyleModule, DxoMarkerModule, DxoMaxRangeModule, DxoMinorTickModule, DxoMinorTickIntervalModule, DxoMinRangeModule, DxoTickModule, DxoTickIntervalModule, DxoShutterModule, DxoSizeModule, DxoSliderHandleModule, DxoSliderMarkerModule, DxoTitleModule, DxoSubtitleModule } from 'devextreme-angular/ui/nested';\n/*!\r\n * devextreme-angular\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'devextreme-angular/core';\nimport * as ɵngcc2 from '@angular/platform-browser';\nvar CUSTOM_VALUE_ACCESSOR_PROVIDER = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return DxRangeSelectorComponent;\n  }),\n  multi: true\n};\n/**\r\n * The RangeSelector is a UI component that allows a user to select a range of values on a scale.\r\n\r\n */\n\nvar DxRangeSelectorComponent = /*#__PURE__*/(function () {\n  var DxRangeSelectorComponent = /*#__PURE__*/function (_DxComponent) {\n    _inherits(DxRangeSelectorComponent, _DxComponent);\n\n    var _super = _createSuper(DxRangeSelectorComponent);\n\n    function DxRangeSelectorComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\n      var _this;\n\n      _classCallCheck(this, DxRangeSelectorComponent);\n\n      _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n      _this._watcherHelper = _watcherHelper;\n      _this._idh = _idh;\n\n      _this.touched = function (_) {};\n\n      _this._createEventEmitters([{\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'drawn',\n        emit: 'onDrawn'\n      }, {\n        subscribe: 'exported',\n        emit: 'onExported'\n      }, {\n        subscribe: 'exporting',\n        emit: 'onExporting'\n      }, {\n        subscribe: 'fileSaving',\n        emit: 'onFileSaving'\n      }, {\n        subscribe: 'incidentOccurred',\n        emit: 'onIncidentOccurred'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        subscribe: 'valueChanged',\n        emit: 'onValueChanged'\n      }, {\n        emit: 'backgroundChange'\n      }, {\n        emit: 'behaviorChange'\n      }, {\n        emit: 'chartChange'\n      }, {\n        emit: 'containerBackgroundColorChange'\n      }, {\n        emit: 'dataSourceChange'\n      }, {\n        emit: 'dataSourceFieldChange'\n      }, {\n        emit: 'disabledChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'exportChange'\n      }, {\n        emit: 'indentChange'\n      }, {\n        emit: 'loadingIndicatorChange'\n      }, {\n        emit: 'marginChange'\n      }, {\n        emit: 'pathModifiedChange'\n      }, {\n        emit: 'redrawOnResizeChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'scaleChange'\n      }, {\n        emit: 'selectedRangeColorChange'\n      }, {\n        emit: 'selectedRangeUpdateModeChange'\n      }, {\n        emit: 'shutterChange'\n      }, {\n        emit: 'sizeChange'\n      }, {\n        emit: 'sliderHandleChange'\n      }, {\n        emit: 'sliderMarkerChange'\n      }, {\n        emit: 'themeChange'\n      }, {\n        emit: 'titleChange'\n      }, {\n        emit: 'valueChange'\n      }, {\n        emit: 'onBlur'\n      }]);\n\n      _this._idh.setHost(_assertThisInitialized(_this));\n\n      optionHost.setHost(_assertThisInitialized(_this));\n      return _this;\n    }\n    /**\r\n     * Specifies the properties for the range selector&apos;s background.\r\n    \r\n     */\n\n\n    _createClass(DxRangeSelectorComponent, [{\n      key: \"background\",\n      get: function get() {\n        return this._getOption('background');\n      },\n      set: function set(value) {\n        this._setOption('background', value);\n      }\n      /**\r\n       * Specifies the RangeSelector&apos;s behavior properties.\r\n      \r\n       */\n\n    }, {\n      key: \"behavior\",\n      get: function get() {\n        return this._getOption('behavior');\n      },\n      set: function set(value) {\n        this._setOption('behavior', value);\n      }\n      /**\r\n       * Specifies the properties required to display a chart as the range selector&apos;s background.\r\n      \r\n       */\n\n    }, {\n      key: \"chart\",\n      get: function get() {\n        return this._getOption('chart');\n      },\n      set: function set(value) {\n        this._setOption('chart', value);\n      }\n      /**\r\n       * Specifies the color of the parent page element.\r\n      \r\n       */\n\n    }, {\n      key: \"containerBackgroundColor\",\n      get: function get() {\n        return this._getOption('containerBackgroundColor');\n      },\n      set: function set(value) {\n        this._setOption('containerBackgroundColor', value);\n      }\n      /**\r\n       * Specifies a data source for the scale values and for the chart at the background.\r\n      \r\n       */\n\n    }, {\n      key: \"dataSource\",\n      get: function get() {\n        return this._getOption('dataSource');\n      },\n      set: function set(value) {\n        this._setOption('dataSource', value);\n      }\n      /**\r\n       * Specifies the data source field that provides data for the scale.\r\n      \r\n       */\n\n    }, {\n      key: \"dataSourceField\",\n      get: function get() {\n        return this._getOption('dataSourceField');\n      },\n      set: function set(value) {\n        this._setOption('dataSourceField', value);\n      }\n      /**\r\n       * Specifies whether the UI component responds to user interaction.\r\n      \r\n       */\n\n    }, {\n      key: \"disabled\",\n      get: function get() {\n        return this._getOption('disabled');\n      },\n      set: function set(value) {\n        this._setOption('disabled', value);\n      }\n      /**\r\n       * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n      \r\n       */\n\n    }, {\n      key: \"elementAttr\",\n      get: function get() {\n        return this._getOption('elementAttr');\n      },\n      set: function set(value) {\n        this._setOption('elementAttr', value);\n      }\n      /**\r\n       * Configures the exporting and printing features.\r\n      \r\n       */\n\n    }, {\n      key: \"export\",\n      get: function get() {\n        return this._getOption('export');\n      },\n      set: function set(value) {\n        this._setOption('export', value);\n      }\n      /**\r\n       * Range selector&apos;s indent properties.\r\n      \r\n       */\n\n    }, {\n      key: \"indent\",\n      get: function get() {\n        return this._getOption('indent');\n      },\n      set: function set(value) {\n        this._setOption('indent', value);\n      }\n      /**\r\n       * Configures the loading indicator.\r\n      \r\n       */\n\n    }, {\n      key: \"loadingIndicator\",\n      get: function get() {\n        return this._getOption('loadingIndicator');\n      },\n      set: function set(value) {\n        this._setOption('loadingIndicator', value);\n      }\n      /**\r\n       * Generates space around the UI component.\r\n      \r\n       */\n\n    }, {\n      key: \"margin\",\n      get: function get() {\n        return this._getOption('margin');\n      },\n      set: function set(value) {\n        this._setOption('margin', value);\n      }\n      /**\r\n       * Notifies the UI component that it is embedded into an HTML page that uses a tag modifying the path.\r\n      \r\n       */\n\n    }, {\n      key: \"pathModified\",\n      get: function get() {\n        return this._getOption('pathModified');\n      },\n      set: function set(value) {\n        this._setOption('pathModified', value);\n      }\n      /**\r\n       * Specifies whether to redraw the UI component when the size of the parent browser window changes or a mobile device rotates.\r\n      \r\n       */\n\n    }, {\n      key: \"redrawOnResize\",\n      get: function get() {\n        return this._getOption('redrawOnResize');\n      },\n      set: function set(value) {\n        this._setOption('redrawOnResize', value);\n      }\n      /**\r\n       * Switches the UI component to a right-to-left representation.\r\n      \r\n       */\n\n    }, {\n      key: \"rtlEnabled\",\n      get: function get() {\n        return this._getOption('rtlEnabled');\n      },\n      set: function set(value) {\n        this._setOption('rtlEnabled', value);\n      }\n      /**\r\n       * Specifies properties of the range selector&apos;s scale.\r\n      \r\n       */\n\n    }, {\n      key: \"scale\",\n      get: function get() {\n        return this._getOption('scale');\n      },\n      set: function set(value) {\n        this._setOption('scale', value);\n      }\n      /**\r\n       * Specifies the color of the selected range.\r\n      \r\n       */\n\n    }, {\n      key: \"selectedRangeColor\",\n      get: function get() {\n        return this._getOption('selectedRangeColor');\n      },\n      set: function set(value) {\n        this._setOption('selectedRangeColor', value);\n      }\n      /**\r\n       * Specifies how the selected range should behave when data is updated. Applies only when the RangeSelector is bound to a data source.\r\n      \r\n       */\n\n    }, {\n      key: \"selectedRangeUpdateMode\",\n      get: function get() {\n        return this._getOption('selectedRangeUpdateMode');\n      },\n      set: function set(value) {\n        this._setOption('selectedRangeUpdateMode', value);\n      }\n      /**\r\n       * Specifies range selector shutter properties.\r\n      \r\n       */\n\n    }, {\n      key: \"shutter\",\n      get: function get() {\n        return this._getOption('shutter');\n      },\n      set: function set(value) {\n        this._setOption('shutter', value);\n      }\n      /**\r\n       * Specifies the UI component&apos;s size in pixels.\r\n      \r\n       */\n\n    }, {\n      key: \"size\",\n      get: function get() {\n        return this._getOption('size');\n      },\n      set: function set(value) {\n        this._setOption('size', value);\n      }\n      /**\r\n       * Specifies the appearance of the range selector&apos;s slider handles.\r\n      \r\n       */\n\n    }, {\n      key: \"sliderHandle\",\n      get: function get() {\n        return this._getOption('sliderHandle');\n      },\n      set: function set(value) {\n        this._setOption('sliderHandle', value);\n      }\n      /**\r\n       * Defines the properties of the range selector slider markers.\r\n      \r\n       */\n\n    }, {\n      key: \"sliderMarker\",\n      get: function get() {\n        return this._getOption('sliderMarker');\n      },\n      set: function set(value) {\n        this._setOption('sliderMarker', value);\n      }\n      /**\r\n       * Sets the name of the theme the UI component uses.\r\n      \r\n       */\n\n    }, {\n      key: \"theme\",\n      get: function get() {\n        return this._getOption('theme');\n      },\n      set: function set(value) {\n        this._setOption('theme', value);\n      }\n      /**\r\n       * Configures the UI component&apos;s title.\r\n      \r\n       */\n\n    }, {\n      key: \"title\",\n      get: function get() {\n        return this._getOption('title');\n      },\n      set: function set(value) {\n        this._setOption('title', value);\n      }\n      /**\r\n       * The selected range (initial or current). Equals the entire scale when not set.\r\n      \r\n       */\n\n    }, {\n      key: \"value\",\n      get: function get() {\n        return this._getOption('value');\n      },\n      set: function set(value) {\n        this._setOption('value', value);\n      }\n    }, {\n      key: \"change\",\n      value: function change(_) {}\n    }, {\n      key: \"_createInstance\",\n      value: function _createInstance(element, options) {\n        return new DxRangeSelector(element, options);\n      }\n    }, {\n      key: \"writeValue\",\n      value: function writeValue(value) {\n        this.eventHelper.lockedValueChangeEvent = true;\n        this.value = value;\n        this.eventHelper.lockedValueChangeEvent = false;\n      }\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        this.change = fn;\n      }\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(fn) {\n        this.touched = fn;\n      }\n    }, {\n      key: \"_createWidget\",\n      value: function _createWidget(element) {\n        var _this2 = this;\n\n        _get(_getPrototypeOf(DxRangeSelectorComponent.prototype), \"_createWidget\", this).call(this, element);\n\n        this.instance.on('focusOut', function (e) {\n          _this2.eventHelper.fireNgEvent('onBlur', [e]);\n        });\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._destroyWidget();\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        _get(_getPrototypeOf(DxRangeSelectorComponent.prototype), \"ngOnChanges\", this).call(this, changes);\n\n        this.setupChanges('dataSource', changes);\n        this.setupChanges('value', changes);\n      }\n    }, {\n      key: \"setupChanges\",\n      value: function setupChanges(prop, changes) {\n        if (!(prop in this._optionsToUpdate)) {\n          this._idh.setup(prop, changes);\n        }\n      }\n    }, {\n      key: \"ngDoCheck\",\n      value: function ngDoCheck() {\n        this._idh.doCheck('dataSource');\n\n        this._idh.doCheck('value');\n\n        this._watcherHelper.checkWatchers();\n\n        _get(_getPrototypeOf(DxRangeSelectorComponent.prototype), \"ngDoCheck\", this).call(this);\n\n        _get(_getPrototypeOf(DxRangeSelectorComponent.prototype), \"clearChangedOptions\", this).call(this);\n      }\n    }, {\n      key: \"_setOption\",\n      value: function _setOption(name, value) {\n        var isSetup = this._idh.setupSingle(name, value);\n\n        var isChanged = this._idh.getChanges(name, value) !== null;\n\n        if (isSetup || isChanged) {\n          _get(_getPrototypeOf(DxRangeSelectorComponent.prototype), \"_setOption\", this).call(this, name, value);\n        }\n      }\n    }]);\n\n    return DxRangeSelectorComponent;\n  }(DxComponent);\n\n  DxRangeSelectorComponent.ɵfac = function DxRangeSelectorComponent_Factory(t) {\n    return new (t || DxRangeSelectorComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DxTemplateHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.WatcherHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IterableDifferHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TransferState), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n\n  DxRangeSelectorComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: DxRangeSelectorComponent,\n    selectors: [[\"dx-range-selector\"]],\n    hostBindings: function DxRangeSelectorComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"onBlur\", function DxRangeSelectorComponent_onBlur_HostBindingHandler($event) {\n          return ctx.touched($event);\n        })(\"valueChange\", function DxRangeSelectorComponent_valueChange_HostBindingHandler($event) {\n          return ctx.change($event);\n        });\n      }\n    },\n    inputs: {\n      background: \"background\",\n      behavior: \"behavior\",\n      chart: \"chart\",\n      containerBackgroundColor: \"containerBackgroundColor\",\n      dataSource: \"dataSource\",\n      dataSourceField: \"dataSourceField\",\n      disabled: \"disabled\",\n      elementAttr: \"elementAttr\",\n      export: \"export\",\n      indent: \"indent\",\n      loadingIndicator: \"loadingIndicator\",\n      margin: \"margin\",\n      pathModified: \"pathModified\",\n      redrawOnResize: \"redrawOnResize\",\n      rtlEnabled: \"rtlEnabled\",\n      scale: \"scale\",\n      selectedRangeColor: \"selectedRangeColor\",\n      selectedRangeUpdateMode: \"selectedRangeUpdateMode\",\n      shutter: \"shutter\",\n      size: \"size\",\n      sliderHandle: \"sliderHandle\",\n      sliderMarker: \"sliderMarker\",\n      theme: \"theme\",\n      title: \"title\",\n      value: \"value\"\n    },\n    outputs: {\n      onDisposing: \"onDisposing\",\n      onDrawn: \"onDrawn\",\n      onExported: \"onExported\",\n      onExporting: \"onExporting\",\n      onFileSaving: \"onFileSaving\",\n      onIncidentOccurred: \"onIncidentOccurred\",\n      onInitialized: \"onInitialized\",\n      onOptionChanged: \"onOptionChanged\",\n      onValueChanged: \"onValueChanged\",\n      backgroundChange: \"backgroundChange\",\n      behaviorChange: \"behaviorChange\",\n      chartChange: \"chartChange\",\n      containerBackgroundColorChange: \"containerBackgroundColorChange\",\n      dataSourceChange: \"dataSourceChange\",\n      dataSourceFieldChange: \"dataSourceFieldChange\",\n      disabledChange: \"disabledChange\",\n      elementAttrChange: \"elementAttrChange\",\n      exportChange: \"exportChange\",\n      indentChange: \"indentChange\",\n      loadingIndicatorChange: \"loadingIndicatorChange\",\n      marginChange: \"marginChange\",\n      pathModifiedChange: \"pathModifiedChange\",\n      redrawOnResizeChange: \"redrawOnResizeChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      scaleChange: \"scaleChange\",\n      selectedRangeColorChange: \"selectedRangeColorChange\",\n      selectedRangeUpdateModeChange: \"selectedRangeUpdateModeChange\",\n      shutterChange: \"shutterChange\",\n      sizeChange: \"sizeChange\",\n      sliderHandleChange: \"sliderHandleChange\",\n      sliderMarkerChange: \"sliderMarkerChange\",\n      themeChange: \"themeChange\",\n      titleChange: \"titleChange\",\n      valueChange: \"valueChange\",\n      onBlur: \"onBlur\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, CUSTOM_VALUE_ACCESSOR_PROVIDER, NestedOptionHost, IterableDifferHelper]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function DxRangeSelectorComponent_Template(rf, ctx) {},\n    styles: [\"[_nghost-%COMP%] {  display: block; }\"]\n  });\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxRangeSelectorComponent.prototype, \"background\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxRangeSelectorComponent.prototype, \"behavior\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxRangeSelectorComponent.prototype, \"chart\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxRangeSelectorComponent.prototype, \"containerBackgroundColor\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxRangeSelectorComponent.prototype, \"dataSource\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxRangeSelectorComponent.prototype, \"dataSourceField\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxRangeSelectorComponent.prototype, \"disabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxRangeSelectorComponent.prototype, \"elementAttr\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxRangeSelectorComponent.prototype, \"export\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxRangeSelectorComponent.prototype, \"indent\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxRangeSelectorComponent.prototype, \"loadingIndicator\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxRangeSelectorComponent.prototype, \"margin\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxRangeSelectorComponent.prototype, \"pathModified\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxRangeSelectorComponent.prototype, \"redrawOnResize\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxRangeSelectorComponent.prototype, \"rtlEnabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxRangeSelectorComponent.prototype, \"scale\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxRangeSelectorComponent.prototype, \"selectedRangeColor\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxRangeSelectorComponent.prototype, \"selectedRangeUpdateMode\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxRangeSelectorComponent.prototype, \"shutter\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxRangeSelectorComponent.prototype, \"size\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxRangeSelectorComponent.prototype, \"sliderHandle\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxRangeSelectorComponent.prototype, \"sliderMarker\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxRangeSelectorComponent.prototype, \"theme\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxRangeSelectorComponent.prototype, \"title\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxRangeSelectorComponent.prototype, \"value\", null);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSelectorComponent.prototype, \"onDisposing\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSelectorComponent.prototype, \"onDrawn\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSelectorComponent.prototype, \"onExported\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSelectorComponent.prototype, \"onExporting\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSelectorComponent.prototype, \"onFileSaving\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSelectorComponent.prototype, \"onIncidentOccurred\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSelectorComponent.prototype, \"onInitialized\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSelectorComponent.prototype, \"onOptionChanged\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSelectorComponent.prototype, \"onValueChanged\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSelectorComponent.prototype, \"backgroundChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSelectorComponent.prototype, \"behaviorChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSelectorComponent.prototype, \"chartChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSelectorComponent.prototype, \"containerBackgroundColorChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSelectorComponent.prototype, \"dataSourceChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSelectorComponent.prototype, \"dataSourceFieldChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSelectorComponent.prototype, \"disabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSelectorComponent.prototype, \"elementAttrChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSelectorComponent.prototype, \"exportChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSelectorComponent.prototype, \"indentChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSelectorComponent.prototype, \"loadingIndicatorChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSelectorComponent.prototype, \"marginChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSelectorComponent.prototype, \"pathModifiedChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSelectorComponent.prototype, \"redrawOnResizeChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSelectorComponent.prototype, \"rtlEnabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSelectorComponent.prototype, \"scaleChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSelectorComponent.prototype, \"selectedRangeColorChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSelectorComponent.prototype, \"selectedRangeUpdateModeChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSelectorComponent.prototype, \"shutterChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSelectorComponent.prototype, \"sizeChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSelectorComponent.prototype, \"sliderHandleChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSelectorComponent.prototype, \"sliderMarkerChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSelectorComponent.prototype, \"themeChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSelectorComponent.prototype, \"titleChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSelectorComponent.prototype, \"valueChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSelectorComponent.prototype, \"onBlur\", void 0);\n\n  __decorate([HostListener('valueChange', ['$event']), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], DxRangeSelectorComponent.prototype, \"change\", null);\n\n  __decorate([HostListener('onBlur', ['$event']), __metadata(\"design:type\", Object)], DxRangeSelectorComponent.prototype, \"touched\", void 0);\n\n  DxRangeSelectorComponent = __decorate([__param(7, Inject(PLATFORM_ID)), __metadata(\"design:paramtypes\", [ElementRef, NgZone, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, TransferState, Object])], DxRangeSelectorComponent);\n  return DxRangeSelectorComponent;\n})();\nvar DxRangeSelectorModule = /*#__PURE__*/(function () {\n  var DxRangeSelectorModule = /*#__PURE__*/_createClass(function DxRangeSelectorModule() {\n    _classCallCheck(this, DxRangeSelectorModule);\n  });\n\n  DxRangeSelectorModule.ɵfac = function DxRangeSelectorModule_Factory(t) {\n    return new (t || DxRangeSelectorModule)();\n  };\n\n  DxRangeSelectorModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: DxRangeSelectorModule\n  });\n  DxRangeSelectorModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[DxoBackgroundModule, DxoImageModule, DxoBehaviorModule, DxoChartModule, DxoCommonSeriesSettingsModule, DxoAggregationModule, DxoAreaModule, DxoBorderModule, DxoHoverStyleModule, DxoHatchingModule, DxoLabelModule, DxoConnectorModule, DxoPointModule, DxoHeightModule, DxoUrlModule, DxoWidthModule, DxoSelectionStyleModule, DxoReductionModule, DxoValueErrorBarModule, DxoBarModule, DxoBubbleModule, DxoCandlestickModule, DxoFullstackedareaModule, DxoFullstackedbarModule, DxoFullstackedlineModule, DxoFullstackedsplineModule, DxoFullstackedsplineareaModule, DxoArgumentFormatModule, DxoFontModule, DxoFormatModule, DxoLineModule, DxoRangeareaModule, DxoRangebarModule, DxoScatterModule, DxoSplineModule, DxoSplineareaModule, DxoStackedareaModule, DxoStackedbarModule, DxoStackedlineModule, DxoStackedsplineModule, DxoStackedsplineareaModule, DxoStepareaModule, DxoSteplineModule, DxoStockModule, DxoDataPrepareSettingsModule, DxiSeriesModule, DxoSeriesTemplateModule, DxoValueAxisModule, DxoExportModule, DxoIndentModule, DxoLoadingIndicatorModule, DxoMarginModule, DxoScaleModule, DxoAggregationIntervalModule, DxiBreakModule, DxoBreakStyleModule, DxoMarkerModule, DxoMaxRangeModule, DxoMinorTickModule, DxoMinorTickIntervalModule, DxoMinRangeModule, DxoTickModule, DxoTickIntervalModule, DxoShutterModule, DxoSizeModule, DxoSliderHandleModule, DxoSliderMarkerModule, DxoTitleModule, DxoSubtitleModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxoBackgroundModule, DxoImageModule, DxoBehaviorModule, DxoChartModule, DxoCommonSeriesSettingsModule, DxoAggregationModule, DxoAreaModule, DxoBorderModule, DxoHoverStyleModule, DxoHatchingModule, DxoLabelModule, DxoConnectorModule, DxoPointModule, DxoHeightModule, DxoUrlModule, DxoWidthModule, DxoSelectionStyleModule, DxoReductionModule, DxoValueErrorBarModule, DxoBarModule, DxoBubbleModule, DxoCandlestickModule, DxoFullstackedareaModule, DxoFullstackedbarModule, DxoFullstackedlineModule, DxoFullstackedsplineModule, DxoFullstackedsplineareaModule, DxoArgumentFormatModule, DxoFontModule, DxoFormatModule, DxoLineModule, DxoRangeareaModule, DxoRangebarModule, DxoScatterModule, DxoSplineModule, DxoSplineareaModule, DxoStackedareaModule, DxoStackedbarModule, DxoStackedlineModule, DxoStackedsplineModule, DxoStackedsplineareaModule, DxoStepareaModule, DxoSteplineModule, DxoStockModule, DxoDataPrepareSettingsModule, DxiSeriesModule, DxoSeriesTemplateModule, DxoValueAxisModule, DxoExportModule, DxoIndentModule, DxoLoadingIndicatorModule, DxoMarginModule, DxoScaleModule, DxoAggregationIntervalModule, DxiBreakModule, DxoBreakStyleModule, DxoMarkerModule, DxoMaxRangeModule, DxoMinorTickModule, DxoMinorTickIntervalModule, DxoMinRangeModule, DxoTickModule, DxoTickIntervalModule, DxoShutterModule, DxoSizeModule, DxoSliderHandleModule, DxoSliderMarkerModule, DxoTitleModule, DxoSubtitleModule, DxTemplateModule]\n  });\n  return DxRangeSelectorModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxRangeSelectorModule, {\n    declarations: function declarations() {\n      return [DxRangeSelectorComponent];\n    },\n    imports: function imports() {\n      return [DxoBackgroundModule, DxoImageModule, DxoBehaviorModule, DxoChartModule, DxoCommonSeriesSettingsModule, DxoAggregationModule, DxoAreaModule, DxoBorderModule, DxoHoverStyleModule, DxoHatchingModule, DxoLabelModule, DxoConnectorModule, DxoPointModule, DxoHeightModule, DxoUrlModule, DxoWidthModule, DxoSelectionStyleModule, DxoReductionModule, DxoValueErrorBarModule, DxoBarModule, DxoBubbleModule, DxoCandlestickModule, DxoFullstackedareaModule, DxoFullstackedbarModule, DxoFullstackedlineModule, DxoFullstackedsplineModule, DxoFullstackedsplineareaModule, DxoArgumentFormatModule, DxoFontModule, DxoFormatModule, DxoLineModule, DxoRangeareaModule, DxoRangebarModule, DxoScatterModule, DxoSplineModule, DxoSplineareaModule, DxoStackedareaModule, DxoStackedbarModule, DxoStackedlineModule, DxoStackedsplineModule, DxoStackedsplineareaModule, DxoStepareaModule, DxoSteplineModule, DxoStockModule, DxoDataPrepareSettingsModule, DxiSeriesModule, DxoSeriesTemplateModule, DxoValueAxisModule, DxoExportModule, DxoIndentModule, DxoLoadingIndicatorModule, DxoMarginModule, DxoScaleModule, DxoAggregationIntervalModule, DxiBreakModule, DxoBreakStyleModule, DxoMarkerModule, DxoMaxRangeModule, DxoMinorTickModule, DxoMinorTickIntervalModule, DxoMinRangeModule, DxoTickModule, DxoTickIntervalModule, DxoShutterModule, DxoSizeModule, DxoSliderHandleModule, DxoSliderMarkerModule, DxoTitleModule, DxoSubtitleModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule];\n    },\n    exports: function exports() {\n      return [DxRangeSelectorComponent, DxoBackgroundModule, DxoImageModule, DxoBehaviorModule, DxoChartModule, DxoCommonSeriesSettingsModule, DxoAggregationModule, DxoAreaModule, DxoBorderModule, DxoHoverStyleModule, DxoHatchingModule, DxoLabelModule, DxoConnectorModule, DxoPointModule, DxoHeightModule, DxoUrlModule, DxoWidthModule, DxoSelectionStyleModule, DxoReductionModule, DxoValueErrorBarModule, DxoBarModule, DxoBubbleModule, DxoCandlestickModule, DxoFullstackedareaModule, DxoFullstackedbarModule, DxoFullstackedlineModule, DxoFullstackedsplineModule, DxoFullstackedsplineareaModule, DxoArgumentFormatModule, DxoFontModule, DxoFormatModule, DxoLineModule, DxoRangeareaModule, DxoRangebarModule, DxoScatterModule, DxoSplineModule, DxoSplineareaModule, DxoStackedareaModule, DxoStackedbarModule, DxoStackedlineModule, DxoStackedsplineModule, DxoStackedsplineareaModule, DxoStepareaModule, DxoSteplineModule, DxoStockModule, DxoDataPrepareSettingsModule, DxiSeriesModule, DxoSeriesTemplateModule, DxoValueAxisModule, DxoExportModule, DxoIndentModule, DxoLoadingIndicatorModule, DxoMarginModule, DxoScaleModule, DxoAggregationIntervalModule, DxiBreakModule, DxoBreakStyleModule, DxoMarkerModule, DxoMaxRangeModule, DxoMinorTickModule, DxoMinorTickIntervalModule, DxoMinRangeModule, DxoTickModule, DxoTickIntervalModule, DxoShutterModule, DxoSizeModule, DxoSliderHandleModule, DxoSliderMarkerModule, DxoTitleModule, DxoSubtitleModule, DxTemplateModule];\n    }\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DxRangeSelectorComponent, DxRangeSelectorModule }; //# sourceMappingURL=devextreme-angular-ui-range-selector.js.map","map":null,"metadata":{},"sourceType":"module"}