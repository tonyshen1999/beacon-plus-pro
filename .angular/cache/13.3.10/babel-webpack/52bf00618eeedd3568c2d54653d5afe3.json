{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/sparklines/bullet.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { each } from \"../../core/utils/iterator\";\nimport BaseSparkline from \"./base_sparkline\";\nimport componentRegistrator from \"../../core/component_registrator\";\nvar TARGET_MIN_Y = .02;\nvar TARGET_MAX_Y = .98;\nvar BAR_VALUE_MIN_Y = .1;\nvar BAR_VALUE_MAX_Y = .9;\nvar DEFAULT_CANVAS_WIDTH = 300;\nvar DEFAULT_CANVAS_HEIGHT = 30;\nvar DEFAULT_HORIZONTAL_MARGIN = 1;\nvar DEFAULT_VERTICAL_MARGIN = 2;\nvar _Number = Number;\nvar _isFinite = isFinite;\nvar dxBullet = BaseSparkline.inherit({\n  _rootClassPrefix: \"dxb\",\n  _rootClass: \"dxb-bullet\",\n  _themeSection: \"bullet\",\n  _defaultSize: {\n    width: DEFAULT_CANVAS_WIDTH,\n    height: DEFAULT_CANVAS_HEIGHT,\n    left: DEFAULT_HORIZONTAL_MARGIN,\n    right: DEFAULT_HORIZONTAL_MARGIN,\n    top: DEFAULT_VERTICAL_MARGIN,\n    bottom: DEFAULT_VERTICAL_MARGIN\n  },\n  _disposeWidgetElements: function _disposeWidgetElements() {\n    delete this._zeroLevelPath;\n    delete this._targetPath;\n    delete this._barValuePath;\n  },\n  _cleanWidgetElements: function _cleanWidgetElements() {\n    this._zeroLevelPath.remove();\n\n    this._targetPath.remove();\n\n    this._barValuePath.remove();\n  },\n  _drawWidgetElements: function _drawWidgetElements() {\n    this._drawBullet();\n\n    this._drawn();\n  },\n  _createHtmlElements: function _createHtmlElements() {\n    var renderer = this._renderer;\n    this._zeroLevelPath = renderer.path(void 0, \"line\").attr({\n      class: \"dxb-zero-level\",\n      \"stroke-linecap\": \"square\"\n    });\n    this._targetPath = renderer.path(void 0, \"line\").attr({\n      class: \"dxb-target\",\n      \"stroke-linecap\": \"square\"\n    });\n    this._barValuePath = renderer.path(void 0, \"line\").attr({\n      class: \"dxb-bar-value\",\n      \"stroke-linecap\": \"square\"\n    });\n  },\n  _prepareOptions: function _prepareOptions() {\n    var options;\n    var startScaleValue;\n    var endScaleValue;\n    var level;\n    var value;\n    var target;\n    this._allOptions = options = this.callBase();\n    var isValueUndefined = void 0 === this._allOptions.value;\n    var isTargetUndefined = void 0 === this._allOptions.target;\n    this._tooltipEnabled = !(isValueUndefined && isTargetUndefined);\n\n    if (isValueUndefined) {\n      this._allOptions.value = 0;\n    }\n\n    if (isTargetUndefined) {\n      this._allOptions.target = 0;\n    }\n\n    options.value = value = _Number(options.value);\n    options.target = target = _Number(options.target);\n\n    if (void 0 === this._allOptions.startScaleValue) {\n      this._allOptions.startScaleValue = target < value ? target : value;\n      this._allOptions.startScaleValue = this._allOptions.startScaleValue < 0 ? this._allOptions.startScaleValue : 0;\n    }\n\n    if (void 0 === this._allOptions.endScaleValue) {\n      this._allOptions.endScaleValue = target > value ? target : value;\n    }\n\n    options.startScaleValue = startScaleValue = _Number(options.startScaleValue);\n    options.endScaleValue = endScaleValue = _Number(options.endScaleValue);\n\n    if (endScaleValue < startScaleValue) {\n      level = endScaleValue;\n      this._allOptions.endScaleValue = startScaleValue;\n      this._allOptions.startScaleValue = level;\n      this._allOptions.inverted = true;\n    }\n  },\n  _updateRange: function _updateRange() {\n    var options = this._allOptions;\n    this._ranges = {\n      arg: {\n        invert: options.rtlEnabled ? !options.inverted : options.inverted,\n        min: options.startScaleValue,\n        max: options.endScaleValue,\n        axisType: \"continuous\",\n        dataType: \"numeric\"\n      },\n      val: {\n        min: 0,\n        max: 1,\n        axisType: \"continuous\",\n        dataType: \"numeric\"\n      }\n    };\n  },\n  _drawBullet: function _drawBullet() {\n    var options = this._allOptions;\n    var isValidBounds = options.startScaleValue !== options.endScaleValue;\n\n    var isValidMin = _isFinite(options.startScaleValue);\n\n    var isValidMax = _isFinite(options.endScaleValue);\n\n    var isValidValue = _isFinite(options.value);\n\n    var isValidTarget = _isFinite(options.target);\n\n    if (isValidBounds && isValidMax && isValidMin && isValidTarget && isValidValue) {\n      this._drawBarValue();\n\n      this._drawTarget();\n\n      this._drawZeroLevel();\n    }\n  },\n  _getTargetParams: function _getTargetParams() {\n    var options = this._allOptions;\n\n    var translatorY = this._valueAxis.getTranslator();\n\n    var x = this._argumentAxis.getTranslator().translate(options.target);\n\n    return {\n      points: [x, translatorY.translate(TARGET_MIN_Y), x, translatorY.translate(TARGET_MAX_Y)],\n      stroke: options.targetColor,\n      \"stroke-width\": options.targetWidth\n    };\n  },\n  _getBarValueParams: function _getBarValueParams() {\n    var options = this._allOptions;\n\n    var translatorX = this._argumentAxis.getTranslator();\n\n    var translatorY = this._valueAxis.getTranslator();\n\n    var startLevel = options.startScaleValue;\n    var endLevel = options.endScaleValue;\n    var value = options.value;\n    var y2 = translatorY.translate(BAR_VALUE_MIN_Y);\n    var y1 = translatorY.translate(BAR_VALUE_MAX_Y);\n    var x1;\n    var x2;\n\n    if (value > 0) {\n      x1 = startLevel <= 0 ? 0 : startLevel;\n      x2 = value >= endLevel ? endLevel : value < x1 ? x1 : value;\n    } else {\n      x1 = endLevel >= 0 ? 0 : endLevel;\n      x2 = value < startLevel ? startLevel : value > x1 ? x1 : value;\n    }\n\n    x1 = translatorX.translate(x1);\n    x2 = translatorX.translate(x2);\n    return {\n      points: [x1, y1, x2, y1, x2, y2, x1, y2],\n      fill: options.color\n    };\n  },\n  _getCorrectCanvas: function _getCorrectCanvas() {\n    return this._canvas;\n  },\n  _getZeroLevelParams: function _getZeroLevelParams() {\n    var translatorY = this._valueAxis.getTranslator();\n\n    var x = this._argumentAxis.getTranslator().translate(0);\n\n    return {\n      points: [x, translatorY.translate(TARGET_MIN_Y), x, translatorY.translate(TARGET_MAX_Y)],\n      stroke: this._allOptions.targetColor,\n      \"stroke-width\": 1\n    };\n  },\n  _drawZeroLevel: function _drawZeroLevel() {\n    var options = this._allOptions;\n\n    if (0 > options.endScaleValue || 0 < options.startScaleValue || !options.showZeroLevel) {\n      return;\n    }\n\n    this._zeroLevelPath.attr(this._getZeroLevelParams()).sharp().append(this._renderer.root);\n  },\n  _drawTarget: function _drawTarget() {\n    var options = this._allOptions;\n    var target = options.target;\n\n    if (target > options.endScaleValue || target < options.startScaleValue || !options.showTarget) {\n      return;\n    }\n\n    this._targetPath.attr(this._getTargetParams()).sharp().append(this._renderer.root);\n  },\n  _drawBarValue: function _drawBarValue() {\n    this._barValuePath.attr(this._getBarValueParams()).append(this._renderer.root);\n  },\n  _getTooltipCoords: function _getTooltipCoords() {\n    var canvas = this._canvas;\n\n    var rootOffset = this._renderer.getRootOffset();\n\n    var bBox = this._barValuePath.getBBox();\n\n    return {\n      x: bBox.x + bBox.width / 2 + rootOffset.left,\n      y: canvas.height / 2 + rootOffset.top\n    };\n  },\n  _getTooltipData: function _getTooltipData() {\n    var tooltip = this._tooltip;\n    var options = this._allOptions;\n    var value = options.value;\n    var target = options.target;\n    var valueText = tooltip.formatValue(value);\n    var targetText = tooltip.formatValue(target);\n    return {\n      originalValue: value,\n      originalTarget: target,\n      value: valueText,\n      target: targetText,\n      valueText: [\"Actual Value:\", valueText, \"Target Value:\", targetText]\n    };\n  },\n  _isTooltipEnabled: function _isTooltipEnabled() {\n    return this._tooltipEnabled;\n  }\n});\neach([\"color\", \"targetColor\", \"targetWidth\", \"showTarget\", \"showZeroLevel\", \"value\", \"target\", \"startScaleValue\", \"endScaleValue\"], function (_, name) {\n  dxBullet.prototype._optionChangesMap[name] = \"OPTIONS\";\n});\ncomponentRegistrator(\"dxBullet\", dxBullet);\nexport default dxBullet;","map":null,"metadata":{},"sourceType":"module"}