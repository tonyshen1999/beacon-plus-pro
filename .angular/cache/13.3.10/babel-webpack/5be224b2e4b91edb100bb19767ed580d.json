{"ast":null,"code":"/**\r\n * DevExtreme (esm/data/data_source/utils.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"items\"];\nimport ajaxUtils from \"../../core/utils/ajax\";\nimport Store from \"../abstract_store\";\nimport ArrayStore from \"../array_store\";\nimport { each, map } from \"../../core/utils/iterator\";\nimport CustomStore from \"../custom_store\";\nimport { extend } from \"../../core/utils/extend\";\nimport { isPlainObject } from \"../../core/utils/type\";\nimport { normalizeSortingInfo } from \"../utils\";\nexport var CANCELED_TOKEN = \"canceled\";\nexport var isPending = function isPending(deferred) {\n  return \"pending\" === deferred.state();\n};\nexport var normalizeStoreLoadOptionAccessorArguments = function normalizeStoreLoadOptionAccessorArguments(originalArguments) {\n  switch (originalArguments.length) {\n    case 0:\n      return;\n\n    case 1:\n      return originalArguments[0];\n  }\n\n  return [].slice.call(originalArguments);\n};\n\nvar mapGroup = function mapGroup(group, level, mapper) {\n  return map(group, function (item) {\n    var restItem = _objectWithoutPropertiesLoose(item, _excluded);\n\n    return _extends({}, restItem, {\n      items: mapRecursive(item.items, level - 1, mapper)\n    });\n  });\n};\n\nvar mapRecursive = function mapRecursive(items, level, mapper) {\n  if (!Array.isArray(items)) {\n    return items;\n  }\n\n  return level ? mapGroup(items, level, mapper) : map(items, mapper);\n};\n\nexport var mapDataRespectingGrouping = function mapDataRespectingGrouping(items, mapper, groupInfo) {\n  var level = groupInfo ? normalizeSortingInfo(groupInfo).length : 0;\n  return mapRecursive(items, level, mapper);\n};\nexport var normalizeLoadResult = function normalizeLoadResult(data, extra) {\n  var _data;\n\n  if (null !== (_data = data) && void 0 !== _data && _data.data) {\n    extra = data;\n    data = data.data;\n  }\n\n  if (!Array.isArray(data)) {\n    data = [data];\n  }\n\n  return {\n    data: data,\n    extra: extra\n  };\n};\n\nvar createCustomStoreFromLoadFunc = function createCustomStoreFromLoadFunc(options) {\n  var storeConfig = {};\n  each([\"useDefaultSearch\", \"key\", \"load\", \"loadMode\", \"cacheRawData\", \"byKey\", \"lookup\", \"totalCount\", \"insert\", \"update\", \"remove\"], function () {\n    storeConfig[this] = options[this];\n    delete options[this];\n  });\n  return new CustomStore(storeConfig);\n};\n\nvar createStoreFromConfig = function createStoreFromConfig(storeConfig) {\n  var alias = storeConfig.type;\n  delete storeConfig.type;\n  return Store.create(alias, storeConfig);\n};\n\nvar createCustomStoreFromUrl = function createCustomStoreFromUrl(url, normalizationOptions) {\n  return new CustomStore({\n    load: function load() {\n      return ajaxUtils.sendRequest({\n        url: url,\n        dataType: \"json\"\n      });\n    },\n    loadMode: null === normalizationOptions || void 0 === normalizationOptions ? void 0 : normalizationOptions.fromUrlLoadMode\n  });\n};\n\nexport var normalizeDataSourceOptions = function normalizeDataSourceOptions(options, normalizationOptions) {\n  var store;\n\n  if (\"string\" === typeof options) {\n    options = {\n      paginate: false,\n      store: createCustomStoreFromUrl(options, normalizationOptions)\n    };\n  }\n\n  if (void 0 === options) {\n    options = [];\n  }\n\n  if (Array.isArray(options) || options instanceof Store) {\n    options = {\n      store: options\n    };\n  } else {\n    options = extend({}, options);\n  }\n\n  if (void 0 === options.store) {\n    options.store = [];\n  }\n\n  store = options.store;\n\n  if (\"load\" in options) {\n    store = createCustomStoreFromLoadFunc(options);\n  } else if (Array.isArray(store)) {\n    store = new ArrayStore(store);\n  } else if (isPlainObject(store)) {\n    store = createStoreFromConfig(extend({}, store));\n  }\n\n  options.store = store;\n  return options;\n};","map":null,"metadata":{},"sourceType":"module"}