{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/shaders/ui.scheduler.current_time_shader.vertical.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { setHeight, setWidth } from \"../../../core/utils/size\";\nimport $ from \"../../../core/renderer\";\nimport CurrentTimeShader from \"../shaders/ui.scheduler.current_time_shader\";\nvar DATE_TIME_SHADER_ALL_DAY_CLASS = \"dx-scheduler-date-time-shader-all-day\";\nvar DATE_TIME_SHADER_TOP_CLASS = \"dx-scheduler-date-time-shader-top\";\nvar DATE_TIME_SHADER_BOTTOM_CLASS = \"dx-scheduler-date-time-shader-bottom\";\n\nvar VerticalCurrentTimeShader = /*#__PURE__*/function (_CurrentTimeShader) {\n  _inherits(VerticalCurrentTimeShader, _CurrentTimeShader);\n\n  var _super = _createSuper(VerticalCurrentTimeShader);\n\n  function VerticalCurrentTimeShader() {\n    _classCallCheck(this, VerticalCurrentTimeShader);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(VerticalCurrentTimeShader, [{\n    key: \"renderShader\",\n    value: function renderShader() {\n      var shaderHeight = this._getShaderHeight();\n\n      var maxHeight = this._getShaderMaxHeight();\n\n      var isSolidShader = shaderHeight > maxHeight;\n\n      if (shaderHeight > maxHeight) {\n        shaderHeight = maxHeight;\n      }\n\n      setHeight(this._$shader, shaderHeight);\n      var groupCount = this._workSpace._getGroupCount() || 1;\n\n      if (this._workSpace.isGroupedByDate()) {\n        this._renderGroupedByDateShaderParts(groupCount, shaderHeight, maxHeight, isSolidShader);\n      } else {\n        this._renderShaderParts(groupCount, shaderHeight, maxHeight, isSolidShader);\n      }\n    }\n  }, {\n    key: \"_renderShaderParts\",\n    value: function _renderShaderParts(groupCount, shaderHeight, maxHeight, isSolidShader) {\n      for (var i = 0; i < groupCount; i++) {\n        var shaderWidth = this._getShaderWidth(i);\n\n        this._renderTopShader(this._$shader, shaderHeight, shaderWidth, i);\n\n        !isSolidShader && this._renderBottomShader(this._$shader, maxHeight, shaderHeight, shaderWidth, i);\n\n        this._renderAllDayShader(shaderWidth, i);\n      }\n    }\n  }, {\n    key: \"_renderGroupedByDateShaderParts\",\n    value: function _renderGroupedByDateShaderParts(groupCount, shaderHeight, maxHeight, isSolidShader) {\n      var shaderWidth = this._getShaderWidth(0);\n\n      var bottomShaderWidth = shaderWidth - this._workSpace.getCellWidth();\n\n      if (shaderHeight < 0) {\n        shaderHeight = 0;\n        bottomShaderWidth = shaderWidth;\n      }\n\n      this._renderTopShader(this._$shader, shaderHeight, shaderWidth * groupCount, 0);\n\n      !isSolidShader && this._renderBottomShader(this._$shader, maxHeight, shaderHeight, bottomShaderWidth * groupCount + this._workSpace.getCellWidth(), 0);\n\n      this._renderAllDayShader(shaderWidth * groupCount, 0);\n    }\n  }, {\n    key: \"_renderTopShader\",\n    value: function _renderTopShader($shader, height, width, i) {\n      this._$topShader = $(\"<div>\").addClass(DATE_TIME_SHADER_TOP_CLASS);\n\n      if (width) {\n        setWidth(this._$topShader, width);\n      }\n\n      if (height) {\n        setHeight(this._$topShader, height);\n      }\n\n      this._$topShader.css(\"marginTop\", this._getShaderTopOffset(i));\n\n      this._$topShader.css(\"left\", this._getShaderOffset(i, width));\n\n      $shader.append(this._$topShader);\n    }\n  }, {\n    key: \"_renderBottomShader\",\n    value: function _renderBottomShader($shader, maxHeight, height, width, i) {\n      this._$bottomShader = $(\"<div>\").addClass(DATE_TIME_SHADER_BOTTOM_CLASS);\n      var shaderWidth = height < 0 ? width : width - this._workSpace.getCellWidth();\n      var shaderHeight = height < 0 ? maxHeight : maxHeight - height;\n      setWidth(this._$bottomShader, shaderWidth);\n      setHeight(this._$bottomShader, shaderHeight);\n\n      this._$bottomShader.css(\"left\", this._getShaderOffset(i, width - this._workSpace.getCellWidth()));\n\n      $shader.append(this._$bottomShader);\n    }\n  }, {\n    key: \"_renderAllDayShader\",\n    value: function _renderAllDayShader(shaderWidth, i) {\n      if (this._workSpace.option(\"showAllDayPanel\")) {\n        this._$allDayIndicator = $(\"<div>\").addClass(DATE_TIME_SHADER_ALL_DAY_CLASS);\n        setHeight(this._$allDayIndicator, this._workSpace.getAllDayHeight());\n        setWidth(this._$allDayIndicator, shaderWidth);\n\n        this._$allDayIndicator.css(\"left\", this._getShaderOffset(i, shaderWidth));\n\n        this._workSpace._$allDayPanel.prepend(this._$allDayIndicator);\n      }\n    }\n  }, {\n    key: \"_getShaderOffset\",\n    value: function _getShaderOffset(i, width) {\n      return this._workSpace.getGroupedStrategy().getShaderOffset(i, width);\n    }\n  }, {\n    key: \"_getShaderTopOffset\",\n    value: function _getShaderTopOffset(i) {\n      return this._workSpace.getGroupedStrategy().getShaderTopOffset(i);\n    }\n  }, {\n    key: \"_getShaderHeight\",\n    value: function _getShaderHeight(i, width) {\n      return this._workSpace.getGroupedStrategy().getShaderHeight();\n    }\n  }, {\n    key: \"_getShaderMaxHeight\",\n    value: function _getShaderMaxHeight(i, width) {\n      return this._workSpace.getGroupedStrategy().getShaderMaxHeight();\n    }\n  }, {\n    key: \"_getShaderWidth\",\n    value: function _getShaderWidth(i) {\n      return this._workSpace.getGroupedStrategy().getShaderWidth(i);\n    }\n  }, {\n    key: \"clean\",\n    value: function clean() {\n      _get(_getPrototypeOf(VerticalCurrentTimeShader.prototype), \"clean\", this).call(this);\n\n      this._workSpace && this._workSpace._$allDayPanel && this._workSpace._$allDayPanel.find(\".\" + DATE_TIME_SHADER_ALL_DAY_CLASS).remove();\n    }\n  }]);\n\n  return VerticalCurrentTimeShader;\n}(CurrentTimeShader);\n\nexport default VerticalCurrentTimeShader;","map":null,"metadata":{},"sourceType":"module"}