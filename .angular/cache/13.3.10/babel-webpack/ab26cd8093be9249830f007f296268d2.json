{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/pivot_grid/ui.pivot_grid.utils.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { isNumeric, isDefined, type } from \"../../core/utils/type\";\nimport coreAjaxUtils from \"../../core/utils/ajax\";\nimport { compileGetter } from \"../../core/utils/data\";\nimport { each, map } from \"../../core/utils/iterator\";\nimport { extend } from \"../../core/utils/extend\";\nimport localizationDate from \"../../localization/date\";\nimport formatHelper from \"../../format_helper\";\nimport { DataSource } from \"../../data/data_source/data_source\";\nimport ArrayStore from \"../../data/array_store\";\nimport { when, Deferred } from \"../../core/utils/deferred\";\nexport var setFieldProperty = function setFieldProperty(field, property, value, isInitialization) {\n  var initProperties = field._initProperties = field._initProperties || {};\n  var initValue = isInitialization ? value : field[property];\n\n  if (!Object.prototype.hasOwnProperty.call(initProperties, property) || isInitialization) {\n    initProperties[property] = initValue;\n  }\n\n  field[property] = value;\n};\nexport function sendRequest(options) {\n  return coreAjaxUtils.sendRequest(options);\n}\nvar foreachTreeAsyncDate = new Date();\n\nfunction createForeachTreeFunc(isAsync) {\n  return function foreachTreeFunc(items, callback, parentAtFirst, members, index, isChildrenProcessing) {\n    members = members || [];\n    items = items || [];\n    var i;\n    var deferred;\n    index = index || 0;\n\n    function createForeachTreeAsyncHandler(deferred, i, isChildrenProcessing) {\n      when(foreachTreeFunc(items, callback, parentAtFirst, members, i, isChildrenProcessing)).done(deferred.resolve);\n    }\n\n    for (i = index; i < items.length; i++) {\n      if (isAsync && i > index && i % 1e4 === 0 && new Date() - foreachTreeAsyncDate >= 300) {\n        foreachTreeAsyncDate = new Date();\n        deferred = new Deferred();\n        setTimeout(createForeachTreeAsyncHandler(deferred, i, false), 0);\n        return deferred;\n      }\n\n      var item = items[i];\n\n      if (!isChildrenProcessing) {\n        members.unshift(item);\n\n        if (parentAtFirst && false === callback(members, i)) {\n          return;\n        }\n\n        if (item.children) {\n          var childrenDeferred = foreachTreeFunc(item.children, callback, parentAtFirst, members);\n\n          if (isAsync && childrenDeferred) {\n            deferred = new Deferred();\n            childrenDeferred.done(createForeachTreeAsyncHandler(deferred, i, true));\n            return deferred;\n          }\n        }\n      }\n\n      isChildrenProcessing = false;\n\n      if (!parentAtFirst && false === callback(members, i)) {\n        return;\n      }\n\n      members.shift();\n\n      if (items[i] !== item) {\n        i--;\n      }\n    }\n  };\n}\n\nexport var foreachTree = createForeachTreeFunc(false);\nexport var foreachTreeAsync = createForeachTreeFunc(true);\nexport function findField(fields, id) {\n  if (fields && isDefined(id)) {\n    for (var i = 0; i < fields.length; i++) {\n      var field = fields[i];\n\n      if (field.name === id || field.caption === id || field.dataField === id || field.index === id) {\n        return i;\n      }\n    }\n  }\n\n  return -1;\n}\nexport function formatValue(value, options) {\n  var valueText = value === value && formatHelper.format(value, options.format);\n  var formatObject = {\n    value: value,\n    valueText: valueText || \"\"\n  };\n  return options.customizeText ? options.customizeText.call(options, formatObject) : formatObject.valueText;\n}\nexport function getCompareFunction(valueSelector) {\n  return function (a, b) {\n    var result = 0;\n    var valueA = valueSelector(a);\n    var valueB = valueSelector(b);\n    var aIsDefined = isDefined(valueA);\n    var bIsDefined = isDefined(valueB);\n\n    if (aIsDefined && bIsDefined) {\n      if (valueA > valueB) {\n        result = 1;\n      } else if (valueA < valueB) {\n        result = -1;\n      }\n    }\n\n    if (aIsDefined && !bIsDefined) {\n      result = 1;\n    }\n\n    if (!aIsDefined && bIsDefined) {\n      result = -1;\n    }\n\n    return result;\n  };\n}\nexport function createPath(items) {\n  var result = [];\n\n  for (var i = items.length - 1; i >= 0; i--) {\n    result.push(items[i].key || items[i].value);\n  }\n\n  return result;\n}\nexport function foreachDataLevel(data, callback, index, childrenField) {\n  index = index || 0;\n  childrenField = childrenField || \"children\";\n\n  if (data.length) {\n    callback(data, index);\n  }\n\n  for (var i = 0; i < data.length; i++) {\n    var item = data[i];\n\n    if (item[childrenField] && item[childrenField].length) {\n      foreachDataLevel(item[childrenField], callback, index + 1, childrenField);\n    }\n  }\n}\nexport function mergeArraysByMaxValue(values1, values2) {\n  var result = [];\n\n  for (var i = 0; i < values1.length; i++) {\n    result.push(Math.max(values1[i] || 0, values2[i] || 0));\n  }\n\n  return result;\n}\nexport function getExpandedLevel(options, axisName) {\n  var dimensions = options[axisName];\n  var expandLevel = 0;\n  var expandedPaths = (\"columns\" === axisName ? options.columnExpandedPaths : options.rowExpandedPaths) || [];\n\n  if (options.headerName === axisName) {\n    expandLevel = options.path.length;\n  } else if (options.headerName && options.headerName !== axisName && options.oppositePath) {\n    expandLevel = options.oppositePath.length;\n  } else {\n    each(expandedPaths, function (_, path) {\n      expandLevel = Math.max(expandLevel, path.length);\n    });\n  }\n\n  while (dimensions[expandLevel + 1] && dimensions[expandLevel].expanded) {\n    expandLevel++;\n  }\n\n  return expandLevel;\n}\n\nfunction createGroupFields(item) {\n  return map([\"year\", \"quarter\", \"month\"], function (value, index) {\n    return extend({}, item, {\n      groupInterval: value,\n      groupIndex: index\n    });\n  });\n}\n\nfunction parseFields(dataSource, fieldsList, path, fieldsDataType) {\n  var result = [];\n  Object.keys(fieldsList || []).forEach(function (field) {\n    if (field && 0 === field.indexOf(\"__\")) {\n      return;\n    }\n\n    var dataIndex = 1;\n    var currentPath = path.length ? path + \".\" + field : field;\n    var dataType = fieldsDataType[currentPath];\n    var getter = compileGetter(currentPath);\n    var value = fieldsList[field];\n    var items;\n\n    while (!isDefined(value) && dataSource[dataIndex]) {\n      value = getter(dataSource[dataIndex]);\n      dataIndex++;\n    }\n\n    if (!dataType && isDefined(value)) {\n      dataType = type(value);\n    }\n\n    items = [{\n      dataField: currentPath,\n      dataType: dataType,\n      groupName: \"date\" === dataType ? field : void 0,\n      groupInterval: void 0,\n      displayFolder: path\n    }];\n\n    if (\"date\" === dataType) {\n      items = items.concat(createGroupFields(items[0]));\n    } else if (\"object\" === dataType) {\n      items = parseFields(dataSource, value, currentPath, fieldsDataType);\n    }\n\n    result.push.apply(result, items);\n  });\n  return result;\n}\n\nexport function discoverObjectFields(items, fields) {\n  var fieldsDataType = getFieldsDataType(fields);\n  return parseFields(items, items[0], \"\", fieldsDataType);\n}\nexport function getFieldsDataType(fields) {\n  var result = {};\n  each(fields, function (_, field) {\n    result[field.dataField] = result[field.dataField] || field.dataType;\n  });\n  return result;\n}\nvar DATE_INTERVAL_FORMATS = {\n  month: function month(value) {\n    return localizationDate.getMonthNames()[value - 1];\n  },\n  quarter: function quarter(value) {\n    return localizationDate.format(new Date(2e3, 3 * value - 1), \"quarter\");\n  },\n  dayOfWeek: function dayOfWeek(value) {\n    return localizationDate.getDayNames()[value];\n  }\n};\nexport function setDefaultFieldValueFormatting(field) {\n  if (\"date\" === field.dataType) {\n    if (!field.format) {\n      setFieldProperty(field, \"format\", DATE_INTERVAL_FORMATS[field.groupInterval]);\n    }\n  } else if (\"number\" === field.dataType) {\n    var groupInterval = isNumeric(field.groupInterval) && field.groupInterval > 0 && field.groupInterval;\n\n    if (groupInterval && !field.customizeText) {\n      setFieldProperty(field, \"customizeText\", function (formatObject) {\n        var secondValue = formatObject.value + groupInterval;\n        var secondValueText = formatHelper.format(secondValue, field.format);\n        return formatObject.valueText && secondValueText ? formatObject.valueText + \" - \" + secondValueText : \"\";\n      });\n    }\n  }\n}\nexport function getFiltersByPath(fields, path) {\n  var result = [];\n  path = path || [];\n\n  for (var i = 0; i < path.length; i++) {\n    result.push(extend({}, fields[i], {\n      groupIndex: null,\n      groupName: null,\n      filterType: \"include\",\n      filterValues: [path[i]]\n    }));\n  }\n\n  return result;\n}\nexport var storeDrillDownMixin = {\n  createDrillDownDataSource: function createDrillDownDataSource(descriptions, params) {\n    var items = this.getDrillDownItems(descriptions, params);\n\n    function createCustomStoreMethod(methodName) {\n      return function (options) {\n        var d;\n\n        if (void 0) {\n          d = (void 0)[methodName](options);\n        } else {\n          d = new Deferred();\n          when(items).done(function (data) {\n            var arrayStore = new ArrayStore(data);\n            arrayStore[methodName](options).done(d.resolve).fail(d.reject);\n          }).fail(d.reject);\n        }\n\n        return d;\n      };\n    }\n\n    var dataSource = new DataSource({\n      load: createCustomStoreMethod(\"load\"),\n      totalCount: createCustomStoreMethod(\"totalCount\"),\n      key: this.key()\n    });\n    return dataSource;\n  }\n};\nexport function capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}","map":null,"metadata":{},"sourceType":"module"}