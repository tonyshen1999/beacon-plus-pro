{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/text_area.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../core/renderer\";\nimport eventsEngine from \"../events/core/events_engine\";\nimport { noop, ensureDefined } from \"../core/utils/common\";\nimport { getWindow, hasWindow } from \"../core/utils/window\";\nimport registerComponent from \"../core/component_registrator\";\nimport { extend } from \"../core/utils/extend\";\nimport { isDefined } from \"../core/utils/type\";\nimport { addNamespace, eventData } from \"../events/utils/index\";\nimport pointerEvents from \"../events/pointer\";\nimport scrollEvents from \"../events/gesture/emitter.gesture.scroll\";\nimport { getVerticalOffsets, getElementBoxParams, parseHeight, getOuterHeight } from \"../core/utils/size\";\nimport { allowScroll, prepareScrollData } from \"./text_box/utils.scroll\";\nimport TextBox from \"./text_box\";\nvar TEXTAREA_CLASS = \"dx-textarea\";\nvar TEXTEDITOR_INPUT_CLASS = \"dx-texteditor-input\";\nvar TEXTEDITOR_INPUT_CLASS_AUTO_RESIZE = \"dx-texteditor-input-auto-resize\";\nvar TextArea = TextBox.inherit({\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      spellcheck: true,\n      minHeight: void 0,\n      maxHeight: void 0,\n      autoResizeEnabled: false\n    });\n  },\n  _initMarkup: function _initMarkup() {\n    this.$element().addClass(TEXTAREA_CLASS);\n    this.callBase();\n    this.setAria(\"multiline\", \"true\");\n  },\n  _renderContentImpl: function _renderContentImpl() {\n    this._updateInputHeight();\n\n    this.callBase();\n  },\n  _renderInput: function _renderInput() {\n    this.callBase();\n\n    this._renderScrollHandler();\n  },\n  _createInput: function _createInput() {\n    var $input = $(\"<textarea>\");\n\n    this._applyInputAttributes($input, this.option(\"inputAttr\"));\n\n    this._updateInputAutoResizeAppearance($input);\n\n    return $input;\n  },\n  _applyInputAttributes: function _applyInputAttributes($input, customAttributes) {\n    $input.attr(customAttributes).addClass(TEXTEDITOR_INPUT_CLASS);\n  },\n  _renderScrollHandler: function _renderScrollHandler() {\n    this._eventY = 0;\n\n    var $input = this._input();\n\n    var initScrollData = prepareScrollData($input, true);\n    eventsEngine.on($input, addNamespace(scrollEvents.init, this.NAME), initScrollData, noop);\n    eventsEngine.on($input, addNamespace(pointerEvents.down, this.NAME), this._pointerDownHandler.bind(this));\n    eventsEngine.on($input, addNamespace(pointerEvents.move, this.NAME), this._pointerMoveHandler.bind(this));\n  },\n  _pointerDownHandler: function _pointerDownHandler(e) {\n    this._eventY = eventData(e).y;\n  },\n  _pointerMoveHandler: function _pointerMoveHandler(e) {\n    var currentEventY = eventData(e).y;\n    var delta = this._eventY - currentEventY;\n\n    if (allowScroll(this._input(), delta)) {\n      e.isScrollingEvent = true;\n      e.stopPropagation();\n    }\n\n    this._eventY = currentEventY;\n  },\n  _renderDimensions: function _renderDimensions() {\n    var $element = this.$element();\n    var element = $element.get(0);\n\n    var width = this._getOptionValue(\"width\", element);\n\n    var height = this._getOptionValue(\"height\", element);\n\n    var minHeight = this.option(\"minHeight\");\n    var maxHeight = this.option(\"maxHeight\");\n    $element.css({\n      minHeight: void 0 !== minHeight ? minHeight : \"\",\n      maxHeight: void 0 !== maxHeight ? maxHeight : \"\",\n      width: width,\n      height: height\n    });\n  },\n  _resetDimensions: function _resetDimensions() {\n    this.$element().css({\n      height: \"\",\n      minHeight: \"\",\n      maxHeight: \"\"\n    });\n  },\n  _renderEvents: function _renderEvents() {\n    if (this.option(\"autoResizeEnabled\")) {\n      eventsEngine.on(this._input(), addNamespace(\"input paste\", this.NAME), this._updateInputHeight.bind(this));\n    }\n\n    this.callBase();\n  },\n  _refreshEvents: function _refreshEvents() {\n    eventsEngine.off(this._input(), addNamespace(\"input paste\", this.NAME));\n    this.callBase();\n  },\n  _getHeightDifference: function _getHeightDifference($input) {\n    return getVerticalOffsets(this._$element.get(0), false) + getVerticalOffsets(this._$textEditorContainer.get(0), false) + getVerticalOffsets(this._$textEditorInputContainer.get(0), false) + getElementBoxParams(\"height\", getWindow().getComputedStyle($input.get(0))).margin;\n  },\n  _updateInputHeight: function _updateInputHeight() {\n    if (!hasWindow()) {\n      return;\n    }\n\n    var $input = this._input();\n\n    var height = this.option(\"height\");\n    var autoHeightResizing = void 0 === height && this.option(\"autoResizeEnabled\");\n    var shouldCalculateInputHeight = autoHeightResizing || void 0 === height && this.option(\"minHeight\");\n\n    if (!shouldCalculateInputHeight) {\n      $input.css(\"height\", \"\");\n      return;\n    }\n\n    this._resetDimensions();\n\n    this._$element.css(\"height\", getOuterHeight(this._$element));\n\n    $input.css(\"height\", 0);\n\n    var heightDifference = this._getHeightDifference($input);\n\n    this._renderDimensions();\n\n    var minHeight = this._getBoundaryHeight(\"minHeight\");\n\n    var maxHeight = this._getBoundaryHeight(\"maxHeight\");\n\n    var inputHeight = $input[0].scrollHeight;\n\n    if (void 0 !== minHeight) {\n      inputHeight = Math.max(inputHeight, minHeight - heightDifference);\n    }\n\n    if (void 0 !== maxHeight) {\n      var adjustedMaxHeight = maxHeight - heightDifference;\n      var needScroll = inputHeight > adjustedMaxHeight;\n      inputHeight = Math.min(inputHeight, adjustedMaxHeight);\n\n      this._updateInputAutoResizeAppearance($input, !needScroll);\n    }\n\n    $input.css(\"height\", inputHeight);\n\n    if (autoHeightResizing) {\n      this._$element.css(\"height\", \"auto\");\n    }\n  },\n  _getBoundaryHeight: function _getBoundaryHeight(optionName) {\n    var boundaryValue = this.option(optionName);\n\n    if (isDefined(boundaryValue)) {\n      return \"number\" === typeof boundaryValue ? boundaryValue : parseHeight(boundaryValue, this.$element().get(0).parentElement);\n    }\n  },\n  _renderInputType: noop,\n  _visibilityChanged: function _visibilityChanged(visible) {\n    if (visible) {\n      this._updateInputHeight();\n    }\n  },\n  _updateInputAutoResizeAppearance: function _updateInputAutoResizeAppearance($input, isAutoResizeEnabled) {\n    if ($input) {\n      var autoResizeEnabled = ensureDefined(isAutoResizeEnabled, this.option(\"autoResizeEnabled\"));\n      $input.toggleClass(TEXTEDITOR_INPUT_CLASS_AUTO_RESIZE, autoResizeEnabled);\n    }\n  },\n  _dimensionChanged: function _dimensionChanged() {\n    if (this.option(\"visible\")) {\n      this._updateInputHeight();\n    }\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"autoResizeEnabled\":\n        this._updateInputAutoResizeAppearance(this._input(), args.value);\n\n        this._refreshEvents();\n\n        this._updateInputHeight();\n\n        break;\n\n      case \"value\":\n      case \"height\":\n        this.callBase(args);\n\n        this._updateInputHeight();\n\n        break;\n\n      case \"minHeight\":\n      case \"maxHeight\":\n        this._renderDimensions();\n\n        this._updateInputHeight();\n\n        break;\n\n      case \"visible\":\n        this.callBase(args);\n        args.value && this._updateInputHeight();\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  }\n});\nregisterComponent(\"dxTextArea\", TextArea);\nexport default TextArea;","map":null,"metadata":{},"sourceType":"module"}