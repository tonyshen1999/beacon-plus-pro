{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __decorate, __metadata, __param } from 'tslib';\nimport { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { forwardRef, ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, HostListener, Component, NgModule } from '@angular/core';\nimport DxRangeSlider from 'devextreme/ui/range_slider';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { DxComponent, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxoLabelModule, DxoFormatModule, DxoTooltipModule } from 'devextreme-angular/ui/nested';\n/*!\r\n * devextreme-angular\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'devextreme-angular/core';\nimport * as ɵngcc2 from '@angular/platform-browser';\nvar CUSTOM_VALUE_ACCESSOR_PROVIDER = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return DxRangeSliderComponent;\n  }),\n  multi: true\n};\n/**\r\n * The RangeSlider is a UI component that allows an end user to choose a range of numeric values.\r\n\r\n */\n\nvar DxRangeSliderComponent = /*#__PURE__*/(function () {\n  var DxRangeSliderComponent = /*#__PURE__*/function (_DxComponent) {\n    _inherits(DxRangeSliderComponent, _DxComponent);\n\n    var _super = _createSuper(DxRangeSliderComponent);\n\n    function DxRangeSliderComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\n      var _this;\n\n      _classCallCheck(this, DxRangeSliderComponent);\n\n      _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n      _this._watcherHelper = _watcherHelper;\n      _this._idh = _idh;\n\n      _this.touched = function (_) {};\n\n      _this._createEventEmitters([{\n        subscribe: 'contentReady',\n        emit: 'onContentReady'\n      }, {\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        subscribe: 'valueChanged',\n        emit: 'onValueChanged'\n      }, {\n        emit: 'accessKeyChange'\n      }, {\n        emit: 'activeStateEnabledChange'\n      }, {\n        emit: 'disabledChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'endChange'\n      }, {\n        emit: 'endNameChange'\n      }, {\n        emit: 'focusStateEnabledChange'\n      }, {\n        emit: 'heightChange'\n      }, {\n        emit: 'hintChange'\n      }, {\n        emit: 'hoverStateEnabledChange'\n      }, {\n        emit: 'isValidChange'\n      }, {\n        emit: 'keyStepChange'\n      }, {\n        emit: 'labelChange'\n      }, {\n        emit: 'maxChange'\n      }, {\n        emit: 'minChange'\n      }, {\n        emit: 'readOnlyChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'showRangeChange'\n      }, {\n        emit: 'startChange'\n      }, {\n        emit: 'startNameChange'\n      }, {\n        emit: 'stepChange'\n      }, {\n        emit: 'tabIndexChange'\n      }, {\n        emit: 'tooltipChange'\n      }, {\n        emit: 'validationErrorChange'\n      }, {\n        emit: 'validationErrorsChange'\n      }, {\n        emit: 'validationMessageModeChange'\n      }, {\n        emit: 'validationStatusChange'\n      }, {\n        emit: 'valueChange'\n      }, {\n        emit: 'visibleChange'\n      }, {\n        emit: 'widthChange'\n      }, {\n        emit: 'onBlur'\n      }]);\n\n      _this._idh.setHost(_assertThisInitialized(_this));\n\n      optionHost.setHost(_assertThisInitialized(_this));\n      return _this;\n    }\n    /**\r\n     * Specifies the shortcut key that sets focus on the UI component.\r\n    \r\n     */\n\n\n    _createClass(DxRangeSliderComponent, [{\n      key: \"accessKey\",\n      get: function get() {\n        return this._getOption('accessKey');\n      },\n      set: function set(value) {\n        this._setOption('accessKey', value);\n      }\n      /**\r\n       * Specifies whether or not the UI component changes its state when interacting with a user.\r\n      \r\n       */\n\n    }, {\n      key: \"activeStateEnabled\",\n      get: function get() {\n        return this._getOption('activeStateEnabled');\n      },\n      set: function set(value) {\n        this._setOption('activeStateEnabled', value);\n      }\n      /**\r\n       * Specifies whether the UI component responds to user interaction.\r\n      \r\n       */\n\n    }, {\n      key: \"disabled\",\n      get: function get() {\n        return this._getOption('disabled');\n      },\n      set: function set(value) {\n        this._setOption('disabled', value);\n      }\n      /**\r\n       * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n      \r\n       */\n\n    }, {\n      key: \"elementAttr\",\n      get: function get() {\n        return this._getOption('elementAttr');\n      },\n      set: function set(value) {\n        this._setOption('elementAttr', value);\n      }\n      /**\r\n       * The right edge of the interval currently selected using the range slider.\r\n      \r\n       */\n\n    }, {\n      key: \"end\",\n      get: function get() {\n        return this._getOption('end');\n      },\n      set: function set(value) {\n        this._setOption('end', value);\n      }\n      /**\r\n       * The value to be assigned to the name attribute of the underlying `` element.\r\n      \r\n       */\n\n    }, {\n      key: \"endName\",\n      get: function get() {\n        return this._getOption('endName');\n      },\n      set: function set(value) {\n        this._setOption('endName', value);\n      }\n      /**\r\n       * Specifies whether the UI component can be focused using keyboard navigation.\r\n      \r\n       */\n\n    }, {\n      key: \"focusStateEnabled\",\n      get: function get() {\n        return this._getOption('focusStateEnabled');\n      },\n      set: function set(value) {\n        this._setOption('focusStateEnabled', value);\n      }\n      /**\r\n       * Specifies the UI component&apos;s height.\r\n      \r\n       */\n\n    }, {\n      key: \"height\",\n      get: function get() {\n        return this._getOption('height');\n      },\n      set: function set(value) {\n        this._setOption('height', value);\n      }\n      /**\r\n       * Specifies text for a hint that appears when a user pauses on the UI component.\r\n      \r\n       */\n\n    }, {\n      key: \"hint\",\n      get: function get() {\n        return this._getOption('hint');\n      },\n      set: function set(value) {\n        this._setOption('hint', value);\n      }\n      /**\r\n       * Specifies whether the UI component changes its state when a user pauses on it.\r\n      \r\n       */\n\n    }, {\n      key: \"hoverStateEnabled\",\n      get: function get() {\n        return this._getOption('hoverStateEnabled');\n      },\n      set: function set(value) {\n        this._setOption('hoverStateEnabled', value);\n      }\n      /**\r\n       * Specifies or indicates whether the editor&apos;s value is valid.\r\n      \r\n       */\n\n    }, {\n      key: \"isValid\",\n      get: function get() {\n        return this._getOption('isValid');\n      },\n      set: function set(value) {\n        this._setOption('isValid', value);\n      }\n      /**\r\n       * Specifies the step by which a handle moves when a user presses Page Up or Page Down.\r\n      \r\n       */\n\n    }, {\n      key: \"keyStep\",\n      get: function get() {\n        return this._getOption('keyStep');\n      },\n      set: function set(value) {\n        this._setOption('keyStep', value);\n      }\n      /**\r\n       * Configures the labels displayed at the min and max values.\r\n      \r\n       */\n\n    }, {\n      key: \"label\",\n      get: function get() {\n        return this._getOption('label');\n      },\n      set: function set(value) {\n        this._setOption('label', value);\n      }\n      /**\r\n       * The maximum value the UI component can accept.\r\n      \r\n       */\n\n    }, {\n      key: \"max\",\n      get: function get() {\n        return this._getOption('max');\n      },\n      set: function set(value) {\n        this._setOption('max', value);\n      }\n      /**\r\n       * The minimum value the UI component can accept.\r\n      \r\n       */\n\n    }, {\n      key: \"min\",\n      get: function get() {\n        return this._getOption('min');\n      },\n      set: function set(value) {\n        this._setOption('min', value);\n      }\n      /**\r\n       * Specifies whether the editor is read-only.\r\n      \r\n       */\n\n    }, {\n      key: \"readOnly\",\n      get: function get() {\n        return this._getOption('readOnly');\n      },\n      set: function set(value) {\n        this._setOption('readOnly', value);\n      }\n      /**\r\n       * Switches the UI component to a right-to-left representation.\r\n      \r\n       */\n\n    }, {\n      key: \"rtlEnabled\",\n      get: function get() {\n        return this._getOption('rtlEnabled');\n      },\n      set: function set(value) {\n        this._setOption('rtlEnabled', value);\n      }\n      /**\r\n       * Specifies whether to highlight the selected range.\r\n      \r\n       */\n\n    }, {\n      key: \"showRange\",\n      get: function get() {\n        return this._getOption('showRange');\n      },\n      set: function set(value) {\n        this._setOption('showRange', value);\n      }\n      /**\r\n       * The left edge of the interval currently selected using the range slider.\r\n      \r\n       */\n\n    }, {\n      key: \"start\",\n      get: function get() {\n        return this._getOption('start');\n      },\n      set: function set(value) {\n        this._setOption('start', value);\n      }\n      /**\r\n       * The value to be assigned to the name attribute of the underlying `` element.\r\n      \r\n       */\n\n    }, {\n      key: \"startName\",\n      get: function get() {\n        return this._getOption('startName');\n      },\n      set: function set(value) {\n        this._setOption('startName', value);\n      }\n      /**\r\n       * Specifies the step by which the UI component&apos;s value changes when a user drags a handler.\r\n      \r\n       */\n\n    }, {\n      key: \"step\",\n      get: function get() {\n        return this._getOption('step');\n      },\n      set: function set(value) {\n        this._setOption('step', value);\n      }\n      /**\r\n       * Specifies the number of the element when the Tab key is used for navigating.\r\n      \r\n       */\n\n    }, {\n      key: \"tabIndex\",\n      get: function get() {\n        return this._getOption('tabIndex');\n      },\n      set: function set(value) {\n        this._setOption('tabIndex', value);\n      }\n      /**\r\n       * Configures a tooltip.\r\n      \r\n       */\n\n    }, {\n      key: \"tooltip\",\n      get: function get() {\n        return this._getOption('tooltip');\n      },\n      set: function set(value) {\n        this._setOption('tooltip', value);\n      }\n      /**\r\n       * Information on the broken validation rule. Contains the first item from the validationErrors array.\r\n      \r\n       */\n\n    }, {\n      key: \"validationError\",\n      get: function get() {\n        return this._getOption('validationError');\n      },\n      set: function set(value) {\n        this._setOption('validationError', value);\n      }\n      /**\r\n       * An array of the validation rules that failed.\r\n      \r\n       */\n\n    }, {\n      key: \"validationErrors\",\n      get: function get() {\n        return this._getOption('validationErrors');\n      },\n      set: function set(value) {\n        this._setOption('validationErrors', value);\n      }\n      /**\r\n       * Specifies how the message about the validation rules that are not satisfied by this editor&apos;s value is displayed.\r\n      \r\n       */\n\n    }, {\n      key: \"validationMessageMode\",\n      get: function get() {\n        return this._getOption('validationMessageMode');\n      },\n      set: function set(value) {\n        this._setOption('validationMessageMode', value);\n      }\n      /**\r\n       * Indicates or specifies the current validation status.\r\n      \r\n       */\n\n    }, {\n      key: \"validationStatus\",\n      get: function get() {\n        return this._getOption('validationStatus');\n      },\n      set: function set(value) {\n        this._setOption('validationStatus', value);\n      }\n      /**\r\n       * Specifies the UI component&apos;s value.\r\n      \r\n       */\n\n    }, {\n      key: \"value\",\n      get: function get() {\n        return this._getOption('value');\n      },\n      set: function set(value) {\n        this._setOption('value', value);\n      }\n      /**\r\n       * Specifies whether the UI component is visible.\r\n      \r\n       */\n\n    }, {\n      key: \"visible\",\n      get: function get() {\n        return this._getOption('visible');\n      },\n      set: function set(value) {\n        this._setOption('visible', value);\n      }\n      /**\r\n       * Specifies the UI component&apos;s width.\r\n      \r\n       */\n\n    }, {\n      key: \"width\",\n      get: function get() {\n        return this._getOption('width');\n      },\n      set: function set(value) {\n        this._setOption('width', value);\n      }\n    }, {\n      key: \"change\",\n      value: function change(_) {}\n    }, {\n      key: \"_createInstance\",\n      value: function _createInstance(element, options) {\n        return new DxRangeSlider(element, options);\n      }\n    }, {\n      key: \"writeValue\",\n      value: function writeValue(value) {\n        this.eventHelper.lockedValueChangeEvent = true;\n        this.value = value;\n        this.eventHelper.lockedValueChangeEvent = false;\n      }\n    }, {\n      key: \"setDisabledState\",\n      value: function setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n      }\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        this.change = fn;\n      }\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(fn) {\n        this.touched = fn;\n      }\n    }, {\n      key: \"_createWidget\",\n      value: function _createWidget(element) {\n        var _this2 = this;\n\n        _get(_getPrototypeOf(DxRangeSliderComponent.prototype), \"_createWidget\", this).call(this, element);\n\n        this.instance.on('focusOut', function (e) {\n          _this2.eventHelper.fireNgEvent('onBlur', [e]);\n        });\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._destroyWidget();\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        _get(_getPrototypeOf(DxRangeSliderComponent.prototype), \"ngOnChanges\", this).call(this, changes);\n\n        this.setupChanges('validationErrors', changes);\n        this.setupChanges('value', changes);\n      }\n    }, {\n      key: \"setupChanges\",\n      value: function setupChanges(prop, changes) {\n        if (!(prop in this._optionsToUpdate)) {\n          this._idh.setup(prop, changes);\n        }\n      }\n    }, {\n      key: \"ngDoCheck\",\n      value: function ngDoCheck() {\n        this._idh.doCheck('validationErrors');\n\n        this._idh.doCheck('value');\n\n        this._watcherHelper.checkWatchers();\n\n        _get(_getPrototypeOf(DxRangeSliderComponent.prototype), \"ngDoCheck\", this).call(this);\n\n        _get(_getPrototypeOf(DxRangeSliderComponent.prototype), \"clearChangedOptions\", this).call(this);\n      }\n    }, {\n      key: \"_setOption\",\n      value: function _setOption(name, value) {\n        var isSetup = this._idh.setupSingle(name, value);\n\n        var isChanged = this._idh.getChanges(name, value) !== null;\n\n        if (isSetup || isChanged) {\n          _get(_getPrototypeOf(DxRangeSliderComponent.prototype), \"_setOption\", this).call(this, name, value);\n        }\n      }\n    }]);\n\n    return DxRangeSliderComponent;\n  }(DxComponent);\n\n  DxRangeSliderComponent.ɵfac = function DxRangeSliderComponent_Factory(t) {\n    return new (t || DxRangeSliderComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DxTemplateHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.WatcherHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IterableDifferHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TransferState), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n\n  DxRangeSliderComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: DxRangeSliderComponent,\n    selectors: [[\"dx-range-slider\"]],\n    hostBindings: function DxRangeSliderComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"onBlur\", function DxRangeSliderComponent_onBlur_HostBindingHandler($event) {\n          return ctx.touched($event);\n        })(\"valueChange\", function DxRangeSliderComponent_valueChange_HostBindingHandler($event) {\n          return ctx.change($event);\n        });\n      }\n    },\n    inputs: {\n      accessKey: \"accessKey\",\n      activeStateEnabled: \"activeStateEnabled\",\n      disabled: \"disabled\",\n      elementAttr: \"elementAttr\",\n      end: \"end\",\n      endName: \"endName\",\n      focusStateEnabled: \"focusStateEnabled\",\n      height: \"height\",\n      hint: \"hint\",\n      hoverStateEnabled: \"hoverStateEnabled\",\n      isValid: \"isValid\",\n      keyStep: \"keyStep\",\n      label: \"label\",\n      max: \"max\",\n      min: \"min\",\n      readOnly: \"readOnly\",\n      rtlEnabled: \"rtlEnabled\",\n      showRange: \"showRange\",\n      start: \"start\",\n      startName: \"startName\",\n      step: \"step\",\n      tabIndex: \"tabIndex\",\n      tooltip: \"tooltip\",\n      validationError: \"validationError\",\n      validationErrors: \"validationErrors\",\n      validationMessageMode: \"validationMessageMode\",\n      validationStatus: \"validationStatus\",\n      value: \"value\",\n      visible: \"visible\",\n      width: \"width\"\n    },\n    outputs: {\n      onContentReady: \"onContentReady\",\n      onDisposing: \"onDisposing\",\n      onInitialized: \"onInitialized\",\n      onOptionChanged: \"onOptionChanged\",\n      onValueChanged: \"onValueChanged\",\n      accessKeyChange: \"accessKeyChange\",\n      activeStateEnabledChange: \"activeStateEnabledChange\",\n      disabledChange: \"disabledChange\",\n      elementAttrChange: \"elementAttrChange\",\n      endChange: \"endChange\",\n      endNameChange: \"endNameChange\",\n      focusStateEnabledChange: \"focusStateEnabledChange\",\n      heightChange: \"heightChange\",\n      hintChange: \"hintChange\",\n      hoverStateEnabledChange: \"hoverStateEnabledChange\",\n      isValidChange: \"isValidChange\",\n      keyStepChange: \"keyStepChange\",\n      labelChange: \"labelChange\",\n      maxChange: \"maxChange\",\n      minChange: \"minChange\",\n      readOnlyChange: \"readOnlyChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      showRangeChange: \"showRangeChange\",\n      startChange: \"startChange\",\n      startNameChange: \"startNameChange\",\n      stepChange: \"stepChange\",\n      tabIndexChange: \"tabIndexChange\",\n      tooltipChange: \"tooltipChange\",\n      validationErrorChange: \"validationErrorChange\",\n      validationErrorsChange: \"validationErrorsChange\",\n      validationMessageModeChange: \"validationMessageModeChange\",\n      validationStatusChange: \"validationStatusChange\",\n      valueChange: \"valueChange\",\n      visibleChange: \"visibleChange\",\n      widthChange: \"widthChange\",\n      onBlur: \"onBlur\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, CUSTOM_VALUE_ACCESSOR_PROVIDER, NestedOptionHost, IterableDifferHelper]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function DxRangeSliderComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxRangeSliderComponent.prototype, \"accessKey\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxRangeSliderComponent.prototype, \"activeStateEnabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxRangeSliderComponent.prototype, \"disabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxRangeSliderComponent.prototype, \"elementAttr\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], DxRangeSliderComponent.prototype, \"end\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxRangeSliderComponent.prototype, \"endName\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxRangeSliderComponent.prototype, \"focusStateEnabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxRangeSliderComponent.prototype, \"height\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxRangeSliderComponent.prototype, \"hint\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxRangeSliderComponent.prototype, \"hoverStateEnabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxRangeSliderComponent.prototype, \"isValid\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], DxRangeSliderComponent.prototype, \"keyStep\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxRangeSliderComponent.prototype, \"label\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], DxRangeSliderComponent.prototype, \"max\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], DxRangeSliderComponent.prototype, \"min\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxRangeSliderComponent.prototype, \"readOnly\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxRangeSliderComponent.prototype, \"rtlEnabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxRangeSliderComponent.prototype, \"showRange\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], DxRangeSliderComponent.prototype, \"start\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxRangeSliderComponent.prototype, \"startName\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], DxRangeSliderComponent.prototype, \"step\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], DxRangeSliderComponent.prototype, \"tabIndex\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxRangeSliderComponent.prototype, \"tooltip\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxRangeSliderComponent.prototype, \"validationError\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Array), __metadata(\"design:paramtypes\", [Array])], DxRangeSliderComponent.prototype, \"validationErrors\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxRangeSliderComponent.prototype, \"validationMessageMode\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxRangeSliderComponent.prototype, \"validationStatus\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Array), __metadata(\"design:paramtypes\", [Array])], DxRangeSliderComponent.prototype, \"value\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxRangeSliderComponent.prototype, \"visible\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxRangeSliderComponent.prototype, \"width\", null);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSliderComponent.prototype, \"onContentReady\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSliderComponent.prototype, \"onDisposing\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSliderComponent.prototype, \"onInitialized\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSliderComponent.prototype, \"onOptionChanged\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSliderComponent.prototype, \"onValueChanged\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSliderComponent.prototype, \"accessKeyChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSliderComponent.prototype, \"activeStateEnabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSliderComponent.prototype, \"disabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSliderComponent.prototype, \"elementAttrChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSliderComponent.prototype, \"endChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSliderComponent.prototype, \"endNameChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSliderComponent.prototype, \"focusStateEnabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSliderComponent.prototype, \"heightChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSliderComponent.prototype, \"hintChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSliderComponent.prototype, \"hoverStateEnabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSliderComponent.prototype, \"isValidChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSliderComponent.prototype, \"keyStepChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSliderComponent.prototype, \"labelChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSliderComponent.prototype, \"maxChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSliderComponent.prototype, \"minChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSliderComponent.prototype, \"readOnlyChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSliderComponent.prototype, \"rtlEnabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSliderComponent.prototype, \"showRangeChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSliderComponent.prototype, \"startChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSliderComponent.prototype, \"startNameChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSliderComponent.prototype, \"stepChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSliderComponent.prototype, \"tabIndexChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSliderComponent.prototype, \"tooltipChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSliderComponent.prototype, \"validationErrorChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSliderComponent.prototype, \"validationErrorsChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSliderComponent.prototype, \"validationMessageModeChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSliderComponent.prototype, \"validationStatusChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSliderComponent.prototype, \"valueChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSliderComponent.prototype, \"visibleChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSliderComponent.prototype, \"widthChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxRangeSliderComponent.prototype, \"onBlur\", void 0);\n\n  __decorate([HostListener('valueChange', ['$event']), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], DxRangeSliderComponent.prototype, \"change\", null);\n\n  __decorate([HostListener('onBlur', ['$event']), __metadata(\"design:type\", Object)], DxRangeSliderComponent.prototype, \"touched\", void 0);\n\n  DxRangeSliderComponent = __decorate([__param(7, Inject(PLATFORM_ID)), __metadata(\"design:paramtypes\", [ElementRef, NgZone, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, TransferState, Object])], DxRangeSliderComponent);\n  return DxRangeSliderComponent;\n})();\nvar DxRangeSliderModule = /*#__PURE__*/(function () {\n  var DxRangeSliderModule = /*#__PURE__*/_createClass(function DxRangeSliderModule() {\n    _classCallCheck(this, DxRangeSliderModule);\n  });\n\n  DxRangeSliderModule.ɵfac = function DxRangeSliderModule_Factory(t) {\n    return new (t || DxRangeSliderModule)();\n  };\n\n  DxRangeSliderModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: DxRangeSliderModule\n  });\n  DxRangeSliderModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[DxoLabelModule, DxoFormatModule, DxoTooltipModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxoLabelModule, DxoFormatModule, DxoTooltipModule, DxTemplateModule]\n  });\n  return DxRangeSliderModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxRangeSliderModule, {\n    declarations: function declarations() {\n      return [DxRangeSliderComponent];\n    },\n    imports: function imports() {\n      return [DxoLabelModule, DxoFormatModule, DxoTooltipModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule];\n    },\n    exports: function exports() {\n      return [DxRangeSliderComponent, DxoLabelModule, DxoFormatModule, DxoTooltipModule, DxTemplateModule];\n    }\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DxRangeSliderComponent, DxRangeSliderModule }; //# sourceMappingURL=devextreme-angular-ui-range-slider.js.map","map":null,"metadata":{},"sourceType":"module"}