{"ast":null,"code":"/**\r\n * DevExtreme (esm/events/contextmenu.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../core/renderer\";\nimport eventsEngine from \"../events/core/events_engine\";\nimport { touch } from \"../core/utils/support\";\nimport devices from \"../core/devices\";\nimport Class from \"../core/class\";\nimport registerEvent from \"./core/event_registrator\";\nimport { addNamespace, fireEvent, isMouseEvent } from \"./utils/index\";\nimport holdEvent from \"./hold\";\nvar CONTEXTMENU_NAMESPACE = \"dxContexMenu\";\nvar CONTEXTMENU_NAMESPACED_EVENT_NAME = addNamespace(\"contextmenu\", CONTEXTMENU_NAMESPACE);\nvar HOLD_NAMESPACED_EVENT_NAME = addNamespace(holdEvent.name, CONTEXTMENU_NAMESPACE);\nvar CONTEXTMENU_EVENT_NAME = \"dxcontextmenu\";\nvar ContextMenu = Class.inherit({\n  setup: function setup(element) {\n    var $element = $(element);\n    eventsEngine.on($element, CONTEXTMENU_NAMESPACED_EVENT_NAME, this._contextMenuHandler.bind(this));\n\n    if (touch || devices.isSimulator()) {\n      eventsEngine.on($element, HOLD_NAMESPACED_EVENT_NAME, this._holdHandler.bind(this));\n    }\n  },\n  _holdHandler: function _holdHandler(e) {\n    if (isMouseEvent(e) && !devices.isSimulator()) {\n      return;\n    }\n\n    this._fireContextMenu(e);\n  },\n  _contextMenuHandler: function _contextMenuHandler(e) {\n    this._fireContextMenu(e);\n  },\n  _fireContextMenu: function _fireContextMenu(e) {\n    return fireEvent({\n      type: CONTEXTMENU_EVENT_NAME,\n      originalEvent: e\n    });\n  },\n  teardown: function teardown(element) {\n    eventsEngine.off(element, \".\" + CONTEXTMENU_NAMESPACE);\n  }\n});\nregisterEvent(CONTEXTMENU_EVENT_NAME, new ContextMenu());\nexport var name = CONTEXTMENU_EVENT_NAME;","map":null,"metadata":{},"sourceType":"module"}