{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/ui/diagram/ui.diagram.toolbox.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getHeight, setHeight, getOuterHeight } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport { hasWindow, getWindow } from \"../../core/utils/window\";\nimport { Deferred } from \"../../core/utils/deferred\";\nimport messageLocalization from \"../../localization/message\";\nimport TextBox from \"../text_box\";\nimport Accordion from \"../accordion\";\nimport ScrollView from \"../scroll_view\";\nimport Tooltip from \"../tooltip\";\nimport { getDiagram } from \"./diagram.importer\";\nimport DiagramFloatingPanel from \"./ui.diagram.floating_panel\";\nvar DIAGRAM_TOOLBOX_MIN_HEIGHT = 130;\nvar DIAGRAM_TOOLBOX_POPUP_CLASS = \"dx-diagram-toolbox-popup\";\nvar DIAGRAM_TOOLBOX_PANEL_CLASS = \"dx-diagram-toolbox-panel\";\nvar DIAGRAM_TOOLBOX_INPUT_CONTAINER_CLASS = \"dx-diagram-toolbox-input-container\";\nvar DIAGRAM_TOOLBOX_INPUT_CLASS = \"dx-diagram-toolbox-input\";\nvar DIAGRAM_TOOLTIP_DATATOGGLE = \"shape-toolbox-tooltip\";\nvar DIAGRAM_SKIP_GESTURE_CLASS = \"dx-skip-gesture-event\";\n\nvar DiagramToolbox = /*#__PURE__*/function (_DiagramFloatingPanel) {\n  _inherits(DiagramToolbox, _DiagramFloatingPanel);\n\n  var _super = _createSuper(DiagramToolbox);\n\n  function DiagramToolbox() {\n    _classCallCheck(this, DiagramToolbox);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DiagramToolbox, [{\n    key: \"_init\",\n    value: function _init() {\n      _get(_getPrototypeOf(DiagramToolbox.prototype), \"_init\", this).call(this);\n\n      this._toolboxes = [];\n      this._filterText = \"\";\n\n      this._createOnShapeCategoryRenderedAction();\n\n      this._createOnFilterChangedAction();\n    }\n  }, {\n    key: \"_getPopupClass\",\n    value: function _getPopupClass() {\n      return DIAGRAM_TOOLBOX_POPUP_CLASS;\n    }\n  }, {\n    key: \"_getPopupHeight\",\n    value: function _getPopupHeight() {\n      return this.isMobileView() ? \"100%\" : _get(_getPrototypeOf(DiagramToolbox.prototype), \"_getPopupHeight\", this).call(this);\n    }\n  }, {\n    key: \"_getPopupMaxHeight\",\n    value: function _getPopupMaxHeight() {\n      return this.isMobileView() ? \"100%\" : _get(_getPrototypeOf(DiagramToolbox.prototype), \"_getPopupMaxHeight\", this).call(this);\n    }\n  }, {\n    key: \"_getPopupMinHeight\",\n    value: function _getPopupMinHeight() {\n      return DIAGRAM_TOOLBOX_MIN_HEIGHT;\n    }\n  }, {\n    key: \"_getPopupPosition\",\n    value: function _getPopupPosition() {\n      var $parent = this.option(\"offsetParent\");\n      var position = {\n        my: \"left top\",\n        at: \"left top\",\n        of: $parent\n      };\n\n      if (!this.isMobileView()) {\n        return extend(position, {\n          offset: this.option(\"offsetX\") + \" \" + this.option(\"offsetY\")\n        });\n      }\n\n      return position;\n    }\n  }, {\n    key: \"_getPopupAnimation\",\n    value: function _getPopupAnimation() {\n      var $parent = this.option(\"offsetParent\");\n\n      if (this.isMobileView()) {\n        return {\n          hide: this._getPopupSlideAnimationObject({\n            direction: \"left\",\n            from: {\n              position: {\n                my: \"left top\",\n                at: \"left top\",\n                of: $parent\n              }\n            },\n            to: {\n              position: {\n                my: \"right top\",\n                at: \"left top\",\n                of: $parent\n              }\n            }\n          }),\n          show: this._getPopupSlideAnimationObject({\n            direction: \"right\",\n            from: {\n              position: {\n                my: \"right top\",\n                at: \"left top\",\n                of: $parent\n              }\n            },\n            to: {\n              position: {\n                my: \"left top\",\n                at: \"left top\",\n                of: $parent\n              }\n            }\n          })\n        };\n      }\n\n      return _get(_getPrototypeOf(DiagramToolbox.prototype), \"_getPopupAnimation\", this).call(this);\n    }\n  }, {\n    key: \"_getPopupOptions\",\n    value: function _getPopupOptions() {\n      var options = _get(_getPrototypeOf(DiagramToolbox.prototype), \"_getPopupOptions\", this).call(this);\n\n      if (!this.isMobileView()) {\n        return extend(options, {\n          showTitle: true,\n          toolbarItems: [{\n            widget: \"dxButton\",\n            location: \"center\",\n            options: {\n              activeStateEnabled: false,\n              focusStateEnabled: false,\n              hoverStateEnabled: false,\n              icon: \"diagram-toolbox-drag\",\n              stylingMode: \"outlined\",\n              type: \"normal\"\n            }\n          }]\n        });\n      }\n\n      return options;\n    }\n  }, {\n    key: \"_renderPopupContent\",\n    value: function _renderPopupContent($parent) {\n      var panelHeight = \"100%\";\n\n      if (this.option(\"showSearch\")) {\n        var $inputContainer = $(\"<div>\").addClass(DIAGRAM_TOOLBOX_INPUT_CONTAINER_CLASS).appendTo($parent);\n\n        this._updateElementWidth($inputContainer);\n\n        this._renderSearchInput($inputContainer);\n\n        if (hasWindow()) {\n          panelHeight = \"calc(100% - \" + getHeight(this._searchInput.$element()) + \"px)\";\n        }\n      }\n\n      var $panel = $(\"<div>\").addClass(DIAGRAM_TOOLBOX_PANEL_CLASS).appendTo($parent);\n      setHeight($panel, panelHeight);\n\n      this._updateElementWidth($panel);\n\n      this._renderScrollView($panel);\n    }\n  }, {\n    key: \"_updateElementWidth\",\n    value: function _updateElementWidth($element) {\n      if (void 0 !== this.option(\"toolboxWidth\")) {\n        $element.css(\"width\", this.option(\"toolboxWidth\"));\n      }\n    }\n  }, {\n    key: \"updateMaxHeight\",\n    value: function updateMaxHeight() {\n      if (this.isMobileView()) {\n        return;\n      }\n\n      var maxHeight = 6;\n\n      if (this._popup) {\n        var $title = this._getPopupTitle();\n\n        maxHeight += getOuterHeight($title);\n      }\n\n      if (this._accordion) {\n        maxHeight += getOuterHeight(this._accordion.$element());\n      }\n\n      if (this._searchInput) {\n        maxHeight += getOuterHeight(this._searchInput.$element());\n      }\n\n      this.option(\"maxHeight\", maxHeight);\n    }\n  }, {\n    key: \"_renderSearchInput\",\n    value: function _renderSearchInput($parent) {\n      var _this = this;\n\n      var $input = $(\"<div>\").addClass(DIAGRAM_TOOLBOX_INPUT_CLASS).appendTo($parent);\n      this._searchInput = this._createComponent($input, TextBox, {\n        stylingMode: \"outlined\",\n        placeholder: messageLocalization.format(\"dxDiagram-uiSearch\"),\n        onValueChanged: function onValueChanged(data) {\n          _this._onInputChanged(data.value);\n        },\n        valueChangeEvent: \"keyup\",\n        buttons: [{\n          name: \"search\",\n          location: \"after\",\n          options: {\n            activeStateEnabled: false,\n            focusStateEnabled: false,\n            hoverStateEnabled: false,\n            icon: \"search\",\n            stylingMode: \"outlined\",\n            type: \"normal\",\n            onClick: function onClick() {\n              _this._searchInput.focus();\n            }\n          }\n        }]\n      });\n    }\n  }, {\n    key: \"_renderScrollView\",\n    value: function _renderScrollView($parent) {\n      var $scrollViewWrapper = $(\"<div>\").appendTo($parent);\n      this._scrollView = this._createComponent($scrollViewWrapper, ScrollView);\n      var $accordion = $(\"<div>\").appendTo(this._scrollView.content());\n\n      this._updateElementWidth($accordion);\n\n      this._renderAccordion($accordion);\n    }\n  }, {\n    key: \"_getAccordionDataSource\",\n    value: function _getAccordionDataSource() {\n      var _this2 = this;\n\n      var result = [];\n      var toolboxGroups = this.option(\"toolboxGroups\");\n\n      for (var i = 0; i < toolboxGroups.length; i++) {\n        var category = toolboxGroups[i].category;\n        var title = toolboxGroups[i].title;\n        var groupObj = {\n          category: category,\n          title: title || category,\n          expanded: toolboxGroups[i].expanded,\n          displayMode: toolboxGroups[i].displayMode,\n          shapes: toolboxGroups[i].shapes,\n          onTemplate: function onTemplate(widget, $element, data) {\n            var $toolboxElement = $($element);\n\n            _this2._onShapeCategoryRenderedAction({\n              category: data.category,\n              displayMode: data.displayMode,\n              dataToggle: DIAGRAM_TOOLTIP_DATATOGGLE,\n              shapes: data.shapes,\n              $element: $toolboxElement\n            });\n\n            _this2._toolboxes.push($toolboxElement);\n\n            if (\"\" !== _this2._filterText) {\n              _this2._onFilterChangedAction({\n                text: _this2._filterText,\n                filteringToolboxes: _this2._toolboxes.length - 1\n              });\n            }\n\n            _this2._createTooltips($toolboxElement);\n          }\n        };\n        result.push(groupObj);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_createTooltips\",\n    value: function _createTooltips($toolboxElement) {\n      var _this3 = this;\n\n      if (this._isTouchMode()) {\n        return;\n      }\n\n      var targets = $toolboxElement.find('[data-toggle=\"' + DIAGRAM_TOOLTIP_DATATOGGLE + '\"]');\n      var $container = this.$element();\n      targets.each(function (index, element) {\n        var $target = $(element);\n        var title = $target.attr(\"title\");\n\n        if (title) {\n          var $tooltip = $(\"<div>\").text(title).appendTo($container);\n\n          _this3._createComponent($tooltip, Tooltip, {\n            target: $target.get(0),\n            showEvent: \"mouseenter\",\n            hideEvent: \"mouseleave\",\n            position: \"top\",\n            animation: {\n              show: {\n                type: \"fade\",\n                from: 0,\n                to: 1,\n                delay: 500\n              },\n              hide: {\n                type: \"fade\",\n                from: 1,\n                to: 0,\n                delay: 100\n              }\n            }\n          });\n        }\n      });\n    }\n  }, {\n    key: \"_isTouchMode\",\n    value: function _isTouchMode() {\n      var _getDiagram = getDiagram(),\n          Browser = _getDiagram.Browser;\n\n      if (Browser.TouchUI) {\n        return true;\n      }\n\n      if (!hasWindow()) {\n        return false;\n      }\n\n      var window = getWindow();\n      return window.navigator && window.navigator.maxTouchPoints > 0;\n    }\n  }, {\n    key: \"_renderAccordion\",\n    value: function _renderAccordion($container) {\n      var _this4 = this;\n\n      this._accordion = this._createComponent($container, Accordion, {\n        multiple: true,\n        animationDuration: 0,\n        activeStateEnabled: false,\n        focusStateEnabled: false,\n        hoverStateEnabled: false,\n        collapsible: true,\n        displayExpr: \"title\",\n        dataSource: this._getAccordionDataSource(),\n        disabled: this.option(\"disabled\"),\n        itemTemplate: function itemTemplate(data, index, $element) {\n          data.onTemplate(_this4, $element, data);\n        },\n        onSelectionChanged: function onSelectionChanged(e) {\n          _this4._updateScrollAnimateSubscription(e.component);\n        },\n        onContentReady: function onContentReady(e) {\n          e.component.option(\"selectedItems\", []);\n          var items = e.component.option(\"dataSource\");\n\n          for (var i = 0; i < items.length; i++) {\n            if (false === items[i].expanded) {\n              e.component.collapseItem(i);\n            } else if (true === items[i].expanded) {\n              e.component.expandItem(i);\n            }\n          }\n\n          if (items.length && void 0 === items[0].expanded) {\n            e.component.expandItem(0);\n          }\n\n          _this4._updateScrollAnimateSubscription(e.component);\n        }\n      });\n    }\n  }, {\n    key: \"_updateScrollAnimateSubscription\",\n    value: function _updateScrollAnimateSubscription(component) {\n      var _this5 = this;\n\n      component._deferredAnimate = new Deferred();\n\n      component._deferredAnimate.done(function () {\n        _this5.updateMaxHeight();\n\n        _this5._scrollView.update();\n\n        _this5._updateScrollAnimateSubscription(component);\n      });\n    }\n  }, {\n    key: \"_raiseToolboxDragStart\",\n    value: function _raiseToolboxDragStart() {\n      this._scrollView.$element().addClass(DIAGRAM_SKIP_GESTURE_CLASS);\n    }\n  }, {\n    key: \"_raiseToolboxDragEnd\",\n    value: function _raiseToolboxDragEnd() {\n      this._scrollView.$element().removeClass(DIAGRAM_SKIP_GESTURE_CLASS);\n    }\n  }, {\n    key: \"_onInputChanged\",\n    value: function _onInputChanged(text) {\n      this._filterText = text;\n\n      this._onFilterChangedAction({\n        text: this._filterText,\n        filteringToolboxes: this._toolboxes.map(function ($element, index) {\n          return index;\n        })\n      });\n\n      this.updateTooltips();\n      this.updateMaxHeight();\n\n      this._scrollView.update();\n    }\n  }, {\n    key: \"updateFilter\",\n    value: function updateFilter() {\n      this._onInputChanged(this._filterText);\n    }\n  }, {\n    key: \"updateTooltips\",\n    value: function updateTooltips() {\n      var _this6 = this;\n\n      this._toolboxes.forEach(function ($element) {\n        var $tooltipContainer = $($element);\n\n        _this6._createTooltips($tooltipContainer);\n      });\n    }\n  }, {\n    key: \"_createOnShapeCategoryRenderedAction\",\n    value: function _createOnShapeCategoryRenderedAction() {\n      this._onShapeCategoryRenderedAction = this._createActionByOption(\"onShapeCategoryRendered\");\n    }\n  }, {\n    key: \"_createOnFilterChangedAction\",\n    value: function _createOnFilterChangedAction() {\n      this._onFilterChangedAction = this._createActionByOption(\"onFilterChanged\");\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function _optionChanged(args) {\n      switch (args.name) {\n        case \"onShapeCategoryRendered\":\n          this._createOnShapeCategoryRenderedAction();\n\n          break;\n\n        case \"onFilterChanged\":\n          this._createOnFilterChangedAction();\n\n          break;\n\n        case \"showSearch\":\n        case \"toolboxWidth\":\n          this._invalidate();\n\n          break;\n\n        case \"toolboxGroups\":\n          this._accordion.option(\"dataSource\", this._getAccordionDataSource());\n\n          break;\n\n        default:\n          _get(_getPrototypeOf(DiagramToolbox.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }]);\n\n  return DiagramToolbox;\n}(DiagramFloatingPanel);\n\nexport default DiagramToolbox;","map":null,"metadata":{},"sourceType":"module"}