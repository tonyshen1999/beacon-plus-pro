{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/view_model/date_header_data_generator.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"startDate\", \"endDate\", \"isFirstGroupCell\", \"isLastGroupCell\"];\nimport dateUtils from \"../../../../core/utils/date\";\nimport { getGroupCount } from \"../../resources/utils\";\nimport { getHeaderCellText, formatWeekdayAndDay, getHorizontalGroupCount, getTotalCellCountByCompleteData, getDisplayedCellCount } from \"../../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\nexport var DateHeaderDataGenerator = /*#__PURE__*/function () {\n  function DateHeaderDataGenerator(viewDataGenerator) {\n    _classCallCheck(this, DateHeaderDataGenerator);\n\n    this._viewDataGenerator = viewDataGenerator;\n  }\n\n  _createClass(DateHeaderDataGenerator, [{\n    key: \"getCompleteDateHeaderMap\",\n    value: function getCompleteDateHeaderMap(options, completeViewDataMap) {\n      var isGenerateWeekDaysHeaderData = options.isGenerateWeekDaysHeaderData;\n      var result = [];\n\n      if (isGenerateWeekDaysHeaderData) {\n        var weekDaysRow = this._generateWeekDaysHeaderRowMap(options, completeViewDataMap);\n\n        result.push(weekDaysRow);\n      }\n\n      var dateRow = this._generateHeaderDateRow(options, completeViewDataMap);\n\n      result.push(dateRow);\n      return result;\n    }\n  }, {\n    key: \"_generateWeekDaysHeaderRowMap\",\n    value: function _generateWeekDaysHeaderRowMap(options, completeViewDataMap) {\n      var isGroupedByDate = options.isGroupedByDate,\n          groups = options.groups,\n          groupOrientation = options.groupOrientation,\n          startDayHour = options.startDayHour,\n          endDayHour = options.endDayHour,\n          hoursInterval = options.hoursInterval,\n          isHorizontalGrouping = options.isHorizontalGrouping,\n          intervalCount = options.intervalCount;\n\n      var cellCountInDay = this._viewDataGenerator.getCellCountInDay(startDayHour, endDayHour, hoursInterval);\n\n      var horizontalGroupCount = getHorizontalGroupCount(groups, groupOrientation);\n      var index = completeViewDataMap[0][0].allDay ? 1 : 0;\n      var colSpan = isGroupedByDate ? horizontalGroupCount * cellCountInDay : cellCountInDay;\n      var groupCount = getGroupCount(groups);\n      var datesRepeatCount = isHorizontalGrouping && !isGroupedByDate ? groupCount : 1;\n      var daysInGroup = this._viewDataGenerator.daysInInterval * intervalCount;\n      var daysInView = daysInGroup * datesRepeatCount;\n      var weekDaysRow = [];\n\n      for (var dayIndex = 0; dayIndex < daysInView; dayIndex += 1) {\n        var cell = completeViewDataMap[index][dayIndex * colSpan];\n        weekDaysRow.push(_extends({}, cell, {\n          colSpan: colSpan,\n          text: formatWeekdayAndDay(cell.startDate),\n          isFirstGroupCell: false,\n          isLastGroupCell: false\n        }));\n      }\n\n      return weekDaysRow;\n    }\n  }, {\n    key: \"_generateHeaderDateRow\",\n    value: function _generateHeaderDateRow(options, completeViewDataMap) {\n      var today = options.today,\n          isGroupedByDate = options.isGroupedByDate,\n          groupOrientation = options.groupOrientation,\n          groups = options.groups,\n          headerCellTextFormat = options.headerCellTextFormat,\n          getDateForHeaderText = options.getDateForHeaderText,\n          interval = options.interval,\n          startViewDate = options.startViewDate,\n          startDayHour = options.startDayHour,\n          endDayHour = options.endDayHour,\n          hoursInterval = options.hoursInterval,\n          intervalCount = options.intervalCount,\n          currentDate = options.currentDate,\n          viewType = options.viewType;\n      var horizontalGroupCount = getHorizontalGroupCount(groups, groupOrientation);\n      var index = completeViewDataMap[0][0].allDay ? 1 : 0;\n      var colSpan = isGroupedByDate ? horizontalGroupCount : 1;\n      var isVerticalGrouping = \"vertical\" === groupOrientation;\n\n      var cellCountInGroupRow = this._viewDataGenerator.getCellCount({\n        intervalCount: intervalCount,\n        currentDate: currentDate,\n        viewType: viewType,\n        hoursInterval: hoursInterval,\n        startDayHour: startDayHour,\n        endDayHour: endDayHour\n      });\n\n      var cellCountInDay = this._viewDataGenerator.getCellCountInDay(startDayHour, endDayHour, hoursInterval);\n\n      var slicedByColumnsData = isGroupedByDate ? completeViewDataMap[index].filter(function (_, columnIndex) {\n        return columnIndex % horizontalGroupCount === 0;\n      }) : completeViewDataMap[index];\n      return slicedByColumnsData.map(function (_ref, index) {\n        var startDate = _ref.startDate,\n            isFirstGroupCell = _ref.isFirstGroupCell,\n            isLastGroupCell = _ref.isLastGroupCell,\n            restProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n        var text = getHeaderCellText(index % cellCountInGroupRow, startDate, headerCellTextFormat, getDateForHeaderText, {\n          interval: interval,\n          startViewDate: startViewDate,\n          startDayHour: startDayHour,\n          cellCountInDay: cellCountInDay\n        });\n        return _extends({}, restProps, {\n          startDate: startDate,\n          text: text,\n          today: dateUtils.sameDate(startDate, today),\n          colSpan: colSpan,\n          isFirstGroupCell: isGroupedByDate || isFirstGroupCell && !isVerticalGrouping,\n          isLastGroupCell: isGroupedByDate || isLastGroupCell && !isVerticalGrouping\n        });\n      });\n    }\n  }, {\n    key: \"generateDateHeaderData\",\n    value: function generateDateHeaderData(completeDateHeaderMap, completeViewDataMap, options) {\n      var isGenerateWeekDaysHeaderData = options.isGenerateWeekDaysHeaderData,\n          cellWidth = options.cellWidth,\n          isProvideVirtualCellsWidth = options.isProvideVirtualCellsWidth,\n          startDayHour = options.startDayHour,\n          endDayHour = options.endDayHour,\n          hoursInterval = options.hoursInterval;\n      var dataMap = [];\n      var weekDayRowConfig = {};\n      var validCellWidth = cellWidth || 0;\n\n      if (isGenerateWeekDaysHeaderData) {\n        weekDayRowConfig = this._generateDateHeaderDataRow(options, completeDateHeaderMap, completeViewDataMap, this._viewDataGenerator.getCellCountInDay(startDayHour, endDayHour, hoursInterval), 0, validCellWidth);\n        dataMap.push(weekDayRowConfig.dateRow);\n      }\n\n      var datesRowConfig = this._generateDateHeaderDataRow(options, completeDateHeaderMap, completeViewDataMap, 1, isGenerateWeekDaysHeaderData ? 1 : 0, validCellWidth);\n\n      dataMap.push(datesRowConfig.dateRow);\n      return {\n        dataMap: dataMap,\n        leftVirtualCellWidth: isProvideVirtualCellsWidth ? datesRowConfig.leftVirtualCellWidth : void 0,\n        rightVirtualCellWidth: isProvideVirtualCellsWidth ? datesRowConfig.rightVirtualCellWidth : void 0,\n        leftVirtualCellCount: datesRowConfig.leftVirtualCellCount,\n        rightVirtualCellCount: datesRowConfig.rightVirtualCellCount,\n        weekDayLeftVirtualCellWidth: weekDayRowConfig.leftVirtualCellWidth,\n        weekDayRightVirtualCellWidth: weekDayRowConfig.rightVirtualCellWidth,\n        weekDayLeftVirtualCellCount: weekDayRowConfig.leftVirtualCellCount,\n        weekDayRightVirtualCellCount: weekDayRowConfig.rightVirtualCellCount\n      };\n    }\n  }, {\n    key: \"_generateDateHeaderDataRow\",\n    value: function _generateDateHeaderDataRow(options, completeDateHeaderMap, completeViewDataMap, baseColSpan, rowIndex, cellWidth) {\n      var startCellIndex = options.startCellIndex,\n          cellCount = options.cellCount,\n          isProvideVirtualCellsWidth = options.isProvideVirtualCellsWidth,\n          groups = options.groups,\n          groupOrientation = options.groupOrientation,\n          isGroupedByDate = options.isGroupedByDate;\n      var horizontalGroupCount = getHorizontalGroupCount(groups, groupOrientation);\n      var colSpan = isGroupedByDate ? horizontalGroupCount * baseColSpan : baseColSpan;\n      var leftVirtualCellCount = Math.floor(startCellIndex / colSpan);\n      var displayedCellCount = getDisplayedCellCount(cellCount, completeViewDataMap);\n      var actualCellCount = Math.ceil((startCellIndex + displayedCellCount) / colSpan);\n      var totalCellCount = getTotalCellCountByCompleteData(completeViewDataMap);\n      var dateRow = completeDateHeaderMap[rowIndex].slice(leftVirtualCellCount, actualCellCount);\n      var finalLeftVirtualCellCount = leftVirtualCellCount * colSpan;\n      var finalLeftVirtualCellWidth = finalLeftVirtualCellCount * cellWidth;\n      var finalRightVirtualCellCount = totalCellCount - actualCellCount * colSpan;\n      var finalRightVirtualCellWidth = finalRightVirtualCellCount * cellWidth;\n      return {\n        dateRow: dateRow,\n        leftVirtualCellCount: finalLeftVirtualCellCount,\n        leftVirtualCellWidth: isProvideVirtualCellsWidth ? finalLeftVirtualCellWidth : void 0,\n        rightVirtualCellCount: finalRightVirtualCellCount,\n        rightVirtualCellWidth: isProvideVirtualCellsWidth ? finalRightVirtualCellWidth : void 0\n      };\n    }\n  }]);\n\n  return DateHeaderDataGenerator;\n}();","map":null,"metadata":{},"sourceType":"module"}