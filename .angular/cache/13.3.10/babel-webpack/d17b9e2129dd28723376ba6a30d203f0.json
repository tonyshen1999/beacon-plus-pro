{"ast":null,"code":"import _defineProperty from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n\n/**\r\n * DevExtreme (esm/viz/range_selector/tracker.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport eventsEngine from \"../../events/core/events_engine\";\nimport pointerEvents from \"../../events/pointer\";\nimport { getWindow } from \"../../core/utils/window\";\nimport domAdapter from \"../../core/dom_adapter\";\nimport { each } from \"../../core/utils/iterator\";\nimport { pointerEvents as msPointerEnabled } from \"../../core/utils/support\";\nvar MIN_MANUAL_SELECTING_WIDTH = 10;\nvar window = getWindow();\n\nfunction isLeftButtonPressed(event) {\n  var e = event || window.event;\n  var originalEvent = e.originalEvent;\n  var touches = e.touches;\n  var pointerType = originalEvent ? originalEvent.pointerType : false;\n  var eventTouches = originalEvent ? originalEvent.touches : false;\n  var isMSPointerLeftClick = originalEvent && void 0 !== pointerType && (pointerType === (originalEvent.MSPOINTER_TYPE_TOUCH || \"touch\") || pointerType === (originalEvent.MSPOINTER_TYPE_MOUSE || \"mouse\") && 1 === originalEvent.buttons);\n  var isTouches = touches && touches.length > 0 || eventTouches && eventTouches.length > 0;\n  return 1 === e.which || isMSPointerLeftClick || isTouches;\n}\n\nfunction isMultiTouches(event) {\n  var originalEvent = event.originalEvent;\n  var touches = event.touches;\n  var eventTouches = originalEvent && originalEvent.touches;\n  return touches && touches.length > 1 || eventTouches && eventTouches.length > 1 || null;\n}\n\nfunction preventDefault(e) {\n  if (!isMultiTouches(e)) {\n    e.preventDefault();\n  }\n}\n\nfunction stopPropagationAndPreventDefault(e) {\n  if (!isMultiTouches(e)) {\n    e.stopPropagation();\n    e.preventDefault();\n  }\n}\n\nfunction isTouchEventArgs(e) {\n  return e && e.type && 0 === e.type.indexOf(\"touch\");\n}\n\nfunction getEventPageX(event) {\n  var originalEvent = event.originalEvent;\n  var result = 0;\n\n  if (event.pageX) {\n    result = event.pageX;\n  } else if (originalEvent && originalEvent.pageX) {\n    result = originalEvent.pageX;\n  }\n\n  if (originalEvent && originalEvent.touches) {\n    if (originalEvent.touches.length > 0) {\n      result = originalEvent.touches[0].pageX;\n    } else if (originalEvent.changedTouches.length > 0) {\n      result = originalEvent.changedTouches[0].pageX;\n    }\n  }\n\n  return result;\n}\n\nfunction initializeAreaEvents(controller, area, state, getRootOffsetLeft) {\n  var _docEvents;\n\n  var isTouchEvent;\n  var isActive = false;\n  var initialPosition;\n  var movingHandler = null;\n  var docEvents = (_docEvents = {}, _defineProperty(_docEvents, pointerEvents.move, function (e) {\n    var position;\n    var offset;\n\n    if (isTouchEvent !== isTouchEventArgs(e)) {\n      return;\n    }\n\n    if (!isLeftButtonPressed(e)) {\n      cancel(e);\n    }\n\n    if (isActive) {\n      position = getEventPageX(e);\n      offset = getRootOffsetLeft();\n\n      if (movingHandler) {\n        movingHandler(position - offset, e);\n      } else if (state.manualRangeSelectionEnabled && Math.abs(initialPosition - position) >= MIN_MANUAL_SELECTING_WIDTH) {\n        movingHandler = controller.placeSliderAndBeginMoving(initialPosition - offset, position - offset, e);\n      }\n    }\n  }), _defineProperty(_docEvents, pointerEvents.up, function (e) {\n    var position;\n\n    if (isActive) {\n      position = getEventPageX(e);\n\n      if (!movingHandler && state.moveSelectedRangeByClick && Math.abs(initialPosition - position) < MIN_MANUAL_SELECTING_WIDTH) {\n        controller.moveSelectedArea(position - getRootOffsetLeft(), e);\n      }\n\n      cancel(e);\n    }\n  }), _docEvents);\n\n  function cancel(e) {\n    if (isActive) {\n      isActive = false;\n\n      if (movingHandler) {\n        movingHandler.complete(e);\n        movingHandler = null;\n      }\n    }\n  }\n\n  area.on(pointerEvents.down, function (e) {\n    if (!state.enabled || !isLeftButtonPressed(e) || isActive) {\n      return;\n    }\n\n    isActive = true;\n    isTouchEvent = isTouchEventArgs(e);\n    initialPosition = getEventPageX(e);\n  });\n  return docEvents;\n}\n\nfunction initializeSelectedAreaEvents(controller, area, state, getRootOffsetLeft) {\n  var _docEvents2;\n\n  var isTouchEvent;\n  var isActive = false;\n  var movingHandler = null;\n  var docEvents = (_docEvents2 = {}, _defineProperty(_docEvents2, pointerEvents.move, function (e) {\n    if (isTouchEvent !== isTouchEventArgs(e)) {\n      return;\n    }\n\n    if (!isLeftButtonPressed(e)) {\n      cancel(e);\n    }\n\n    if (isActive) {\n      preventDefault(e);\n      movingHandler(getEventPageX(e) - getRootOffsetLeft(), e);\n    }\n  }), _defineProperty(_docEvents2, pointerEvents.up, cancel), _docEvents2);\n\n  function cancel(e) {\n    if (isActive) {\n      isActive = false;\n      movingHandler.complete(e);\n      movingHandler = null;\n    }\n  }\n\n  area.on(pointerEvents.down, function (e) {\n    if (!state.enabled || !isLeftButtonPressed(e) || isActive) {\n      return;\n    }\n\n    isActive = true;\n    isTouchEvent = isTouchEventArgs(e);\n    movingHandler = controller.beginSelectedAreaMoving(getEventPageX(e) - getRootOffsetLeft());\n    stopPropagationAndPreventDefault(e);\n  });\n  return docEvents;\n}\n\nfunction initializeSliderEvents(controller, sliders, state, getRootOffsetLeft) {\n  var _docEvents3;\n\n  var isTouchEvent;\n  var isActive = false;\n  var movingHandler = null;\n  var docEvents = (_docEvents3 = {}, _defineProperty(_docEvents3, pointerEvents.move, function (e) {\n    if (isTouchEvent !== isTouchEventArgs(e)) {\n      return;\n    }\n\n    if (!isLeftButtonPressed(e)) {\n      cancel(e);\n    }\n\n    if (isActive) {\n      preventDefault(e);\n      movingHandler(getEventPageX(e) - getRootOffsetLeft(), e);\n    }\n  }), _defineProperty(_docEvents3, pointerEvents.up, cancel), _docEvents3);\n  each(sliders, function (i, slider) {\n    var _slider$on;\n\n    slider.on((_slider$on = {}, _defineProperty(_slider$on, pointerEvents.down, function (e) {\n      if (!state.enabled || !isLeftButtonPressed(e) || isActive) {\n        return;\n      }\n\n      isActive = true;\n      isTouchEvent = isTouchEventArgs(e);\n      movingHandler = controller.beginSliderMoving(i, getEventPageX(e) - getRootOffsetLeft());\n      stopPropagationAndPreventDefault(e);\n    }), _defineProperty(_slider$on, pointerEvents.move, function () {\n      if (!movingHandler) {\n        controller.foregroundSlider(i);\n      }\n    }), _slider$on));\n  });\n\n  function cancel(e) {\n    if (isActive) {\n      isActive = false;\n      movingHandler.complete(e);\n      movingHandler = null;\n    }\n  }\n\n  return docEvents;\n}\n\nexport function Tracker(params) {\n  var state = this._state = {};\n  var targets = params.controller.getTrackerTargets();\n\n  if (msPointerEnabled) {\n    params.renderer.root.css({\n      msTouchAction: \"pinch-zoom\"\n    });\n  }\n\n  this._docEvents = [initializeSelectedAreaEvents(params.controller, targets.selectedArea, state, getRootOffsetLeft), initializeAreaEvents(params.controller, targets.area, state, getRootOffsetLeft), initializeSliderEvents(params.controller, targets.sliders, state, getRootOffsetLeft)];\n  each(this._docEvents, function (_, events) {\n    eventsEngine.on(domAdapter.getDocument(), events);\n  });\n\n  function getRootOffsetLeft() {\n    return params.renderer.getRootOffset().left;\n  }\n}\nTracker.prototype = {\n  constructor: Tracker,\n  dispose: function dispose() {\n    each(this._docEvents, function (_, events) {\n      eventsEngine.off(domAdapter.getDocument(), events);\n    });\n  },\n  update: function update(enabled, behavior) {\n    var state = this._state;\n    state.enabled = enabled;\n    state.moveSelectedRangeByClick = behavior.moveSelectedRangeByClick;\n    state.manualRangeSelectionEnabled = behavior.manualRangeSelectionEnabled;\n  }\n};","map":null,"metadata":{},"sourceType":"module"}