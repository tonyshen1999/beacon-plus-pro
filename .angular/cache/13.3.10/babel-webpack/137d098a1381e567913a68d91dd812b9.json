{"ast":null,"code":"import _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/**\r\n * DevExtreme (esm/ui/gantt/ui.gantt.bars.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport ToolbarMenu from \"../toolbar\";\nimport ContextMenu from \"../context_menu\";\nimport messageLocalization from \"../../localization/message\";\nimport { extend } from \"../../core/utils/extend\";\nvar TOOLBAR_SEPARATOR_CLASS = \"dx-gantt-toolbar-separator\";\nvar COMMANDS = {\n  createTask: 0,\n  createSubTask: 1,\n  removeTask: 2,\n  removeDependency: 3,\n  taskInformation: 4,\n  taskAddContextItem: 5,\n  undo: 6,\n  redo: 7,\n  zoomIn: 8,\n  zoomOut: 9,\n  fullScreen: 10,\n  collapseAll: 11,\n  expandAll: 12,\n  resourceManager: 13,\n  toggleResources: 14,\n  toggleDependencies: 15\n};\n\nvar Bar = /*#__PURE__*/function () {\n  function Bar(element, owner) {\n    _classCallCheck(this, Bar);\n\n    this._element = element;\n    this._owner = owner;\n    this._items = [];\n\n    this._createControl();\n  }\n\n  _createClass(Bar, [{\n    key: \"createItems\",\n    value: function createItems(items) {\n      this._cache = null;\n      this._items = this._createItemsCore(items);\n\n      this._menu.option(\"items\", this._items);\n    }\n  }, {\n    key: \"_createItemsCore\",\n    value: function _createItemsCore(items) {\n      var _this = this;\n\n      return items.map(function (item) {\n        var result;\n\n        if (\"string\" === typeof item) {\n          result = _this._createItemByText(item);\n        } else {\n          result = item.name ? extend(_this._createItemByText(item.name), item) : extend(_this._getDefaultItemOptions(), item);\n        }\n\n        if (item.items) {\n          result.items = _this._createItemsCore(item.items);\n        }\n\n        return result;\n      });\n    }\n  }, {\n    key: \"_createItemByText\",\n    value: function _createItemByText(text) {\n      switch (text.toLowerCase()) {\n        case \"separator\":\n          return this._createSeparator();\n\n        case \"undo\":\n          return this._createDefaultItem(COMMANDS.undo, messageLocalization.format(\"dxGantt-undo\"), this._getIcon(\"undo\"));\n\n        case \"redo\":\n          return this._createDefaultItem(COMMANDS.redo, messageLocalization.format(\"dxGantt-redo\"), this._getIcon(\"redo\"));\n\n        case \"expandall\":\n          return this._createDefaultItem(COMMANDS.expandAll, messageLocalization.format(\"dxGantt-expandAll\"), this._getIcon(\"expand\"));\n\n        case \"collapseall\":\n          return this._createDefaultItem(COMMANDS.collapseAll, messageLocalization.format(\"dxGantt-collapseAll\"), this._getIcon(\"collapse\"));\n\n        case \"addtask\":\n          return this._createDefaultItem(COMMANDS.createTask, messageLocalization.format(\"dxGantt-addNewTask\"), this._getIcon(\"add\"));\n\n        case \"addsubtask\":\n          return this._createDefaultItem(COMMANDS.createSubTask, messageLocalization.format(\"dxGantt-contextMenuNewSubtask\"), this._getIcon(\"add-sub-task\"));\n\n        case \"deletetask\":\n          return this._createDefaultItem(COMMANDS.removeTask, messageLocalization.format(\"dxGantt-deleteSelectedTask\"), this._getIcon(\"delete\"));\n\n        case \"deletedependency\":\n          return this._createDefaultItem(COMMANDS.removeDependency, messageLocalization.format(\"dxGantt-contextMenuDeleteDependency\"), this._getIcon(\"delete-dependency\"));\n\n        case \"zoomin\":\n          return this._createDefaultItem(COMMANDS.zoomIn, messageLocalization.format(\"dxGantt-zoomIn\"), this._getIcon(\"zoom-in\"));\n\n        case \"zoomout\":\n          return this._createDefaultItem(COMMANDS.zoomOut, messageLocalization.format(\"dxGantt-zoomOut\"), this._getIcon(\"zoom-out\"));\n\n        case \"fullscreen\":\n          return this._createDefaultItem(COMMANDS.fullScreen, messageLocalization.format(\"dxGantt-fullScreen\"), this._getIcon(\"full-screen\"));\n\n        case \"taskdetails\":\n          return this._createDefaultItem(COMMANDS.taskInformation, messageLocalization.format(\"dxGantt-dialogTaskDetailsTitle\") + \"...\", this._getIcon(\"task-details\"));\n\n        case \"resourcemanager\":\n          return this._createDefaultItem(COMMANDS.resourceManager, messageLocalization.format(\"dxGantt-dialogResourceManagerTitle\"), this._getIcon(\"resource-manager\"));\n\n        case \"showresources\":\n          return this._createDefaultItem(COMMANDS.toggleResources, messageLocalization.format(\"dxGantt-showResources\"), this._getIcon(\"toggle-resources\"));\n\n        case \"showdependencies\":\n          return this._createDefaultItem(COMMANDS.toggleDependencies, messageLocalization.format(\"dxGantt-showDependencies\"), this._getIcon(\"toggle-dependencies\"));\n\n        default:\n          return extend(this._getDefaultItemOptions(), {\n            options: {\n              text: text\n            }\n          });\n      }\n    }\n  }, {\n    key: \"_getDefaultItemOptions\",\n    value: function _getDefaultItemOptions() {\n      return {};\n    }\n  }, {\n    key: \"_getItemsCache\",\n    value: function _getItemsCache() {\n      if (!this._cache) {\n        this._cache = {};\n\n        this._fillCache(this._items);\n      }\n\n      return this._cache;\n    }\n  }, {\n    key: \"_fillCache\",\n    value: function _fillCache(items) {\n      var _this2 = this;\n\n      items.forEach(function (item) {\n        var key = item.commandId;\n\n        if (void 0 !== key) {\n          if (!_this2._cache[key]) {\n            _this2._cache[key] = [];\n          }\n\n          _this2._cache[key].push(item);\n        }\n\n        if (item.items) {\n          _this2._fillCache(item.items);\n        }\n      });\n    }\n  }, {\n    key: \"_getIcon\",\n    value: function _getIcon(name) {\n      return \"dx-gantt-i dx-gantt-i-\" + name;\n    }\n  }, {\n    key: \"getCommandKeys\",\n    value: function getCommandKeys() {\n      var itemsCache = this._getItemsCache();\n\n      var result = [];\n\n      for (var itemKey in itemsCache) {\n        result.push(parseInt(itemKey));\n      }\n\n      return result;\n    }\n  }, {\n    key: \"setItemEnabled\",\n    value: function setItemEnabled(key, enabled) {\n      var itemsCache = this._getItemsCache();\n\n      itemsCache[key].forEach(function (item) {\n        item.disabled = !enabled;\n      });\n    }\n  }, {\n    key: \"setItemVisible\",\n    value: function setItemVisible(key, visible) {\n      var itemsCache = this._getItemsCache();\n\n      itemsCache[key].forEach(function (item) {\n        item.visible = visible;\n      });\n    }\n  }, {\n    key: \"setItemValue\",\n    value: function setItemValue(_key, _value) {}\n  }, {\n    key: \"setEnabled\",\n    value: function setEnabled(enabled) {\n      this._menu.option(\"disabled\", !enabled);\n    }\n  }, {\n    key: \"updateItemsList\",\n    value: function updateItemsList() {}\n  }, {\n    key: \"isVisible\",\n    value: function isVisible() {\n      return true;\n    }\n  }, {\n    key: \"isContextMenu\",\n    value: function isContextMenu() {\n      return false;\n    }\n  }, {\n    key: \"completeUpdate\",\n    value: function completeUpdate() {}\n  }]);\n\n  return Bar;\n}();\n\nexport var GanttToolbar = /*#__PURE__*/function (_Bar) {\n  _inherits(GanttToolbar, _Bar);\n\n  var _super = _createSuper(GanttToolbar);\n\n  function GanttToolbar() {\n    _classCallCheck(this, GanttToolbar);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(GanttToolbar, [{\n    key: \"_createControl\",\n    value: function _createControl() {\n      var _this3 = this;\n\n      this._menu = this._owner._createComponent(this._element, ToolbarMenu, {\n        onItemClick: function onItemClick(e) {\n          var commandId = e.itemData.commandId;\n\n          if (void 0 !== commandId) {\n            _this3._executeCommand(e.itemData.commandId);\n          }\n        }\n      });\n    }\n  }, {\n    key: \"_executeCommand\",\n    value: function _executeCommand(commandId) {\n      switch (commandId) {\n        case COMMANDS.toggleResources:\n          this._owner.option(\"showResources\", !this._owner.option(\"showResources\"));\n\n          break;\n\n        case COMMANDS.toggleDependencies:\n          this._owner.option(\"showDependencies\", !this._owner.option(\"showDependencies\"));\n\n          break;\n\n        default:\n          this._owner._executeCoreCommand(commandId);\n\n      }\n    }\n  }, {\n    key: \"_createDefaultItem\",\n    value: function _createDefaultItem(commandId, hint, icon) {\n      return {\n        commandId: commandId,\n        disabled: true,\n        widget: \"dxButton\",\n        location: \"before\",\n        options: {\n          icon: icon,\n          stylingMode: \"text\",\n          hint: hint\n        }\n      };\n    }\n  }, {\n    key: \"_createSeparator\",\n    value: function _createSeparator() {\n      return {\n        location: \"before\",\n        template: function template(_data, _index, element) {\n          $(element).addClass(TOOLBAR_SEPARATOR_CLASS);\n        }\n      };\n    }\n  }, {\n    key: \"_getDefaultItemOptions\",\n    value: function _getDefaultItemOptions() {\n      return {\n        location: \"before\",\n        widget: \"dxButton\"\n      };\n    }\n  }, {\n    key: \"completeUpdate\",\n    value: function completeUpdate() {\n      this._menu.option(\"items\", this._items);\n    }\n  }]);\n\n  return GanttToolbar;\n}(Bar);\nexport var GanttContextMenuBar = /*#__PURE__*/function (_Bar2) {\n  _inherits(GanttContextMenuBar, _Bar2);\n\n  var _super2 = _createSuper(GanttContextMenuBar);\n\n  function GanttContextMenuBar() {\n    _classCallCheck(this, GanttContextMenuBar);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(GanttContextMenuBar, [{\n    key: \"_createControl\",\n    value: function _createControl() {\n      var _this4 = this;\n\n      this._menu = this._owner._createComponent(this._element, ContextMenu, {\n        showEvent: void 0,\n        onItemClick: function onItemClick(e) {\n          if (void 0 !== e.itemData.commandId) {\n            _this4._owner._executeCoreCommand(e.itemData.commandId);\n          } else if (void 0 !== e.itemData.name) {\n            _this4._owner._actionsManager.raiseCustomCommand(e.itemData.name);\n          }\n        }\n      });\n    }\n  }, {\n    key: \"createItems\",\n    value: function createItems(items) {\n      if (!items || 0 === items.length) {\n        items = this._getDefaultItems();\n      }\n\n      _get(_getPrototypeOf(GanttContextMenuBar.prototype), \"createItems\", this).call(this, items);\n    }\n  }, {\n    key: \"_getDefaultItems\",\n    value: function _getDefaultItems() {\n      return [{\n        text: messageLocalization.format(\"dxGantt-dialogButtonAdd\"),\n        commandId: COMMANDS.taskAddContextItem,\n        icon: this._getIcon(\"add\"),\n        items: [{\n          text: messageLocalization.format(\"dxGantt-contextMenuNewTask\"),\n          commandId: COMMANDS.createTask,\n          icon: this._getIcon(\"add-task\")\n        }, {\n          text: messageLocalization.format(\"dxGantt-contextMenuNewSubtask\"),\n          commandId: COMMANDS.createSubTask,\n          icon: this._getIcon(\"add-sub-task\")\n        }]\n      }, {\n        text: messageLocalization.format(\"dxGantt-dialogTaskDetailsTitle\") + \"...\",\n        commandId: COMMANDS.taskInformation,\n        icon: this._getIcon(\"task-details\")\n      }, {\n        text: messageLocalization.format(\"dxGantt-contextMenuDeleteTask\"),\n        commandId: COMMANDS.removeTask,\n        icon: this._getIcon(\"delete\")\n      }, {\n        text: messageLocalization.format(\"dxGantt-contextMenuDeleteDependency\"),\n        commandId: COMMANDS.removeDependency,\n        icon: this._getIcon(\"delete-dependency\")\n      }];\n    }\n  }, {\n    key: \"_createDefaultItem\",\n    value: function _createDefaultItem(commandId, text, icon) {\n      return {\n        commandId: commandId,\n        text: text,\n        icon: icon\n      };\n    }\n  }, {\n    key: \"show\",\n    value: function show(point, items) {\n      this._menu.option(\"items\", items || this._items);\n\n      this._menu.option(\"position.offset\", {\n        x: point.x,\n        y: point.y\n      });\n\n      this._menu.option(\"position.collision\", \"fit\");\n\n      this._menu.show();\n    }\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      this._menu.hide();\n    }\n  }, {\n    key: \"isContextMenu\",\n    value: function isContextMenu() {\n      return true;\n    }\n  }]);\n\n  return GanttContextMenuBar;\n}(Bar);","map":null,"metadata":{},"sourceType":"module"}