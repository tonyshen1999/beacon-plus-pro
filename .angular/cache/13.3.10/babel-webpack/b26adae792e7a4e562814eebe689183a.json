{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid.core.virtual_data_loader.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { Deferred, when } from \"../../core/utils/deferred\";\nimport { isObject, isString } from \"../../core/utils/type\";\nvar LEGACY_SCROLLING_MODE = \"scrolling.legacyMode\";\n\nvar needTwoPagesLoading = function needTwoPagesLoading(that) {\n  return that.option(\"scrolling.loadTwoPagesOnStart\") || that._controller.isVirtual() || that._controller.getViewportItemIndex() > 0;\n};\n\nvar getBeginPageIndex = function getBeginPageIndex(that) {\n  return that._cache.length ? that._cache[0].pageIndex : -1;\n};\n\nvar getEndPageIndex = function getEndPageIndex(that) {\n  return that._cache.length ? that._cache[that._cache.length - 1].pageIndex : -1;\n};\n\nvar fireChanged = function fireChanged(that, changed, args) {\n  that._isChangedFiring = true;\n  changed(args);\n  that._isChangedFiring = false;\n};\n\nvar processDelayChanged = function processDelayChanged(that, changed, args) {\n  if (that._isDelayChanged) {\n    that._isDelayChanged = false;\n    fireChanged(that, changed, args);\n    return true;\n  }\n};\n\nvar getViewportPageCount = function getViewportPageCount(that) {\n  var pageSize = that._dataOptions.pageSize();\n\n  var preventPreload = that.option(\"scrolling.preventPreload\");\n\n  if (preventPreload) {\n    return 0;\n  }\n\n  var realViewportSize = that._controller.viewportSize();\n\n  if (that._controller.isVirtualMode() && that.option(\"scrolling.removeInvisiblePages\")) {\n    realViewportSize = 0;\n\n    var viewportSize = that._controller.viewportSize() * that._controller.viewportItemSize();\n\n    var offset = that._controller.getContentOffset();\n\n    var position = that._controller.getViewportPosition();\n\n    var virtualItemsCount = that._controller.virtualItemsCount();\n\n    var totalItemsCount = that._dataOptions.totalItemsCount();\n\n    for (var itemIndex = virtualItemsCount.begin; itemIndex < totalItemsCount; itemIndex++) {\n      if (offset >= position + viewportSize) {\n        break;\n      }\n\n      var itemSize = that._controller.getItemSizes()[itemIndex] || that._controller.viewportItemSize();\n\n      offset += itemSize;\n\n      if (offset >= position) {\n        realViewportSize++;\n      }\n    }\n  }\n\n  return pageSize && realViewportSize > 0 ? Math.ceil(realViewportSize / pageSize) : 1;\n};\n\nvar getPreloadPageCount = function getPreloadPageCount(that, previous) {\n  var preloadEnabled = that.option(\"scrolling.preloadEnabled\");\n  var pageCount = getViewportPageCount(that);\n\n  var isAppendMode = that._controller.isAppendMode();\n\n  if (pageCount) {\n    if (previous) {\n      pageCount = preloadEnabled ? 1 : 0;\n    } else {\n      if (preloadEnabled) {\n        pageCount++;\n      }\n\n      if (isAppendMode || !needTwoPagesLoading(that)) {\n        pageCount--;\n      }\n    }\n  }\n\n  return pageCount;\n};\n\nvar getPageIndexForLoad = function getPageIndexForLoad(that) {\n  var result = -1;\n  var beginPageIndex = getBeginPageIndex(that);\n  var dataOptions = that._dataOptions;\n\n  if (beginPageIndex < 0) {\n    result = that._pageIndex;\n  } else if (!that._cache[that._pageIndex - beginPageIndex]) {\n    result = that._pageIndex;\n  } else if (beginPageIndex >= 0 && that._controller.viewportSize() >= 0) {\n    if (beginPageIndex > 0) {\n      var needToLoadPageBeforeLast = getEndPageIndex(that) + 1 === dataOptions.pageCount() && that._cache.length < getPreloadPageCount(that) + 1;\n      var needToLoadPrevPage = needToLoadPageBeforeLast || that._pageIndex === beginPageIndex && getPreloadPageCount(that, true);\n\n      if (needToLoadPrevPage) {\n        result = beginPageIndex - 1;\n      }\n    }\n\n    if (result < 0) {\n      var needToLoadNextPage = beginPageIndex + that._cache.length <= that._pageIndex + getPreloadPageCount(that);\n\n      if (needToLoadNextPage) {\n        result = beginPageIndex + that._cache.length;\n      }\n    }\n  }\n\n  if (that._loadingPageIndexes[result]) {\n    result = -1;\n  }\n\n  return result;\n};\n\nvar loadCore = function loadCore(that, pageIndex) {\n  var dataOptions = that._dataOptions;\n\n  if (pageIndex === that.pageIndex() || !dataOptions.isLoading() && pageIndex < dataOptions.pageCount() || !dataOptions.hasKnownLastPage() && pageIndex === dataOptions.pageCount()) {\n    dataOptions.pageIndex(pageIndex);\n    that._loadingPageIndexes[pageIndex] = true;\n    return when(dataOptions.load()).always(function () {\n      that._loadingPageIndexes[pageIndex] = false;\n    });\n  }\n};\n\nvar processChanged = function processChanged(that, changed, changeType, isDelayChanged, removeCacheItem) {\n  var dataOptions = that._dataOptions;\n  var items = dataOptions.items().slice();\n  var change = isObject(changeType) ? changeType : void 0;\n  var isPrepend = \"prepend\" === changeType;\n  var viewportItems = dataOptions.viewportItems();\n\n  if (changeType && isString(changeType) && !that._isDelayChanged) {\n    change = {\n      changeType: changeType,\n      items: items\n    };\n\n    if (removeCacheItem) {\n      change.removeCount = removeCacheItem.itemsCount;\n\n      if (change.removeCount && dataOptions.correctCount) {\n        change.removeCount = dataOptions.correctCount(viewportItems, change.removeCount, isPrepend);\n      }\n    }\n  }\n\n  var removeItemCount = removeCacheItem ? removeCacheItem.itemsLength : 0;\n\n  if (removeItemCount && dataOptions.correctCount) {\n    removeItemCount = dataOptions.correctCount(viewportItems, removeItemCount, isPrepend);\n  }\n\n  if (\"append\" === changeType) {\n    viewportItems.push.apply(viewportItems, items);\n\n    if (removeCacheItem) {\n      viewportItems.splice(0, removeItemCount);\n    }\n  } else if (isPrepend) {\n    viewportItems.unshift.apply(viewportItems, items);\n\n    if (removeCacheItem) {\n      viewportItems.splice(-removeItemCount);\n    }\n  } else {\n    that._dataOptions.viewportItems(items);\n  }\n\n  dataOptions.updateLoading();\n  that._lastPageIndex = that.pageIndex();\n  that._isDelayChanged = isDelayChanged;\n\n  if (!isDelayChanged) {\n    fireChanged(that, changed, change);\n  }\n};\n\nexport var VirtualDataLoader = /*#__PURE__*/function () {\n  function VirtualDataLoader(controller, dataOptions) {\n    _classCallCheck(this, VirtualDataLoader);\n\n    this._controller = controller;\n    this._dataOptions = dataOptions;\n    this._pageIndex = this._lastPageIndex = dataOptions.pageIndex();\n    this._cache = [];\n    this._loadingPageIndexes = {};\n  }\n\n  _createClass(VirtualDataLoader, [{\n    key: \"option\",\n    value: function option() {\n      return this._controller.option.apply(this._controller, arguments);\n    }\n  }, {\n    key: \"viewportItemIndexChanged\",\n    value: function viewportItemIndexChanged(itemIndex) {\n      var pageSize = this._dataOptions.pageSize();\n\n      var pageCount = this._dataOptions.pageCount();\n\n      var virtualMode = this._controller.isVirtualMode();\n\n      var appendMode = this._controller.isAppendMode();\n\n      var totalItemsCount = this._dataOptions.totalItemsCount();\n\n      var newPageIndex;\n\n      if (pageSize && (virtualMode || appendMode) && totalItemsCount >= 0) {\n        var viewportSize = this._controller.viewportSize();\n\n        if (viewportSize && itemIndex + viewportSize >= totalItemsCount && !this._controller.isVirtual()) {\n          if (this._dataOptions.hasKnownLastPage()) {\n            newPageIndex = pageCount - 1;\n            var lastPageSize = totalItemsCount % pageSize;\n\n            if (newPageIndex > 0 && lastPageSize > 0 && lastPageSize < viewportSize) {\n              newPageIndex--;\n            }\n          } else {\n            newPageIndex = pageCount;\n          }\n        } else {\n          newPageIndex = Math.floor(itemIndex / pageSize);\n          var maxPageIndex = pageCount - 1;\n          newPageIndex = Math.max(newPageIndex, 0);\n          newPageIndex = Math.min(newPageIndex, maxPageIndex);\n        }\n\n        this.pageIndex(newPageIndex);\n        return this.load();\n      }\n    }\n  }, {\n    key: \"pageIndex\",\n    value: function pageIndex(_pageIndex) {\n      var isVirtualMode = this._controller.isVirtualMode();\n\n      var isAppendMode = this._controller.isAppendMode();\n\n      if (false !== this.option(LEGACY_SCROLLING_MODE) && (isVirtualMode || isAppendMode)) {\n        if (void 0 !== _pageIndex) {\n          this._pageIndex = _pageIndex;\n        }\n\n        return this._pageIndex;\n      } else {\n        return this._dataOptions.pageIndex(_pageIndex);\n      }\n    }\n  }, {\n    key: \"beginPageIndex\",\n    value: function beginPageIndex(defaultPageIndex) {\n      var beginPageIndex = getBeginPageIndex(this);\n\n      if (beginPageIndex < 0) {\n        beginPageIndex = void 0 !== defaultPageIndex ? defaultPageIndex : this.pageIndex();\n      }\n\n      return beginPageIndex;\n    }\n  }, {\n    key: \"endPageIndex\",\n    value: function endPageIndex() {\n      var endPageIndex = getEndPageIndex(this);\n      return endPageIndex > 0 ? endPageIndex : this._lastPageIndex;\n    }\n  }, {\n    key: \"pageSize\",\n    value: function pageSize() {\n      return this._dataOptions.pageSize();\n    }\n  }, {\n    key: \"load\",\n    value: function load() {\n      var _this = this;\n\n      var dataOptions = this._dataOptions;\n      var result;\n\n      var isVirtualMode = this._controller.isVirtualMode();\n\n      var isAppendMode = this._controller.isAppendMode();\n\n      if (false !== this.option(LEGACY_SCROLLING_MODE) && (isVirtualMode || isAppendMode)) {\n        var pageIndexForLoad = getPageIndexForLoad(this);\n\n        if (pageIndexForLoad >= 0) {\n          var loadResult = loadCore(this, pageIndexForLoad);\n\n          if (loadResult) {\n            result = new Deferred();\n            loadResult.done(function () {\n              var delayDeferred = _this._delayDeferred;\n\n              if (delayDeferred) {\n                delayDeferred.done(result.resolve).fail(result.reject);\n              } else {\n                result.resolve();\n              }\n            }).fail(result.reject);\n            dataOptions.updateLoading();\n          }\n        }\n      } else {\n        result = dataOptions.load();\n      }\n\n      if (!result && this._lastPageIndex !== this.pageIndex()) {\n        this._dataOptions.onChanged({\n          changeType: \"pageIndex\"\n        });\n      }\n\n      return result || new Deferred().resolve();\n    }\n  }, {\n    key: \"loadIfNeed\",\n    value: function loadIfNeed() {\n      var isVirtualMode = this._controller.isVirtualMode();\n\n      var isAppendMode = this._controller.isAppendMode();\n\n      if ((isVirtualMode || isAppendMode) && !this._dataOptions.isLoading() && (!this._isChangedFiring || this._controller.isVirtual())) {\n        var position = this._controller.getViewportPosition();\n\n        if (position > 0) {\n          this._controller._setViewportPositionCore(position);\n        } else {\n          this.load();\n        }\n      }\n    }\n  }, {\n    key: \"handleDataChanged\",\n    value: function handleDataChanged(callBase, e) {\n      var _this2 = this;\n\n      var dataOptions = this._dataOptions;\n      var lastCacheLength = this._cache.length;\n      var changeType;\n      var removeInvisiblePages;\n\n      var isVirtualMode = this._controller.isVirtualMode();\n\n      var isAppendMode = this._controller.isAppendMode();\n\n      if (e && e.changes) {\n        fireChanged(this, callBase, e);\n      } else if (false !== this.option(LEGACY_SCROLLING_MODE) && (isVirtualMode || isAppendMode)) {\n        var beginPageIndex = getBeginPageIndex(this);\n\n        if (beginPageIndex >= 0) {\n          if (isVirtualMode && beginPageIndex + this._cache.length !== dataOptions.pageIndex() && beginPageIndex - 1 !== dataOptions.pageIndex()) {\n            lastCacheLength = 0;\n            this._cache = [];\n          }\n\n          if (isAppendMode) {\n            if (0 === dataOptions.pageIndex()) {\n              this._cache = [];\n            } else if (dataOptions.pageIndex() < getEndPageIndex(this)) {\n              fireChanged(this, callBase, {\n                changeType: \"append\",\n                items: []\n              });\n              return;\n            }\n          }\n        }\n\n        var cacheItem = {\n          pageIndex: dataOptions.pageIndex(),\n          itemsLength: dataOptions.items(true).length,\n          itemsCount: this.itemsCount(true)\n        };\n\n        if (this.option(\"scrolling.removeInvisiblePages\") && isVirtualMode) {\n          removeInvisiblePages = this._cache.length > Math.max(getPreloadPageCount(this) + (this.option(\"scrolling.preloadEnabled\") ? 1 : 0), 2);\n        } else {\n          processDelayChanged(this, callBase, {\n            isDelayed: true\n          });\n        }\n\n        var removeCacheItem;\n\n        if (beginPageIndex === dataOptions.pageIndex() + 1) {\n          if (removeInvisiblePages) {\n            removeCacheItem = this._cache.pop();\n          }\n\n          changeType = \"prepend\";\n\n          this._cache.unshift(cacheItem);\n        } else {\n          if (removeInvisiblePages) {\n            removeCacheItem = this._cache.shift();\n          }\n\n          changeType = \"append\";\n\n          this._cache.push(cacheItem);\n        }\n\n        var isDelayChanged = isVirtualMode && 0 === lastCacheLength && needTwoPagesLoading(this);\n        processChanged(this, callBase, this._cache.length > 1 ? changeType : void 0, isDelayChanged, removeCacheItem);\n        this._delayDeferred = this.load().done(function () {\n          if (processDelayChanged(_this2, callBase)) {\n            _this2.load();\n          }\n        });\n      } else {\n        processChanged(this, callBase, e);\n      }\n    }\n  }, {\n    key: \"getDelayDeferred\",\n    value: function getDelayDeferred() {\n      return this._delayDeferred;\n    }\n  }, {\n    key: \"itemsCount\",\n    value: function itemsCount(isBase) {\n      var itemsCount = 0;\n\n      var isVirtualMode = this._controller.isVirtualMode();\n\n      if (!isBase && isVirtualMode) {\n        this._cache.forEach(function (cacheItem) {\n          itemsCount += cacheItem.itemsCount;\n        });\n      } else {\n        itemsCount = this._dataOptions.itemsCount();\n      }\n\n      return itemsCount;\n    }\n  }, {\n    key: \"virtualItemsCount\",\n    value: function virtualItemsCount() {\n      var pageIndex = getBeginPageIndex(this);\n\n      if (pageIndex < 0) {\n        pageIndex = this._dataOptions.pageIndex();\n      }\n\n      var beginItemsCount = pageIndex * this._dataOptions.pageSize();\n\n      var itemsCount = this._cache.length * this._dataOptions.pageSize();\n\n      var endItemsCount = Math.max(0, this._dataOptions.totalItemsCount() - itemsCount - beginItemsCount);\n      return {\n        begin: beginItemsCount,\n        end: endItemsCount\n      };\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this._loadingPageIndexes = {};\n      this._cache = [];\n    }\n  }]);\n\n  return VirtualDataLoader;\n}();","map":null,"metadata":{},"sourceType":"module"}