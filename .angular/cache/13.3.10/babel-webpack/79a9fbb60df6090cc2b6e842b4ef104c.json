{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/core/loading_indicator.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { patchFontOptions as _patchFontOptions } from \"./utils\";\nvar STATE_HIDDEN = 0;\nvar STATE_SHOWN = 1;\nvar ANIMATION_EASING = \"linear\";\nvar ANIMATION_DURATION = 400;\nvar LOADING_INDICATOR_READY = \"loadingIndicatorReady\";\nexport var LoadingIndicator = function LoadingIndicator(parameters) {\n  var renderer = parameters.renderer;\n  this._group = renderer.g().attr({\n    class: \"dx-loading-indicator\"\n  }).linkOn(renderer.root, {\n    name: \"loading-indicator\",\n    after: \"peripheral\"\n  });\n  this._rect = renderer.rect().attr({\n    opacity: 0\n  }).append(this._group);\n  this._text = renderer.text().attr({\n    align: \"center\"\n  }).append(this._group);\n\n  this._createStates(parameters.eventTrigger, this._group, renderer.root, parameters.notify);\n};\nLoadingIndicator.prototype = {\n  constructor: LoadingIndicator,\n  _createStates: function _createStates(eventTrigger, group, root, notify) {\n    this._states = [{\n      opacity: 0,\n      start: function start() {\n        notify(false);\n      },\n      complete: function complete() {\n        group.linkRemove();\n        root.css({\n          \"pointer-events\": \"\"\n        });\n        eventTrigger(LOADING_INDICATOR_READY);\n      }\n    }, {\n      opacity: .85,\n      start: function start() {\n        group.linkAppend();\n        root.css({\n          \"pointer-events\": \"none\"\n        });\n        notify(true);\n      },\n      complete: function complete() {\n        eventTrigger(LOADING_INDICATOR_READY);\n      }\n    }];\n    this._state = STATE_HIDDEN;\n  },\n  setSize: function setSize(size) {\n    var width = size.width;\n    var height = size.height;\n\n    this._rect.attr({\n      width: width,\n      height: height\n    });\n\n    this._text.attr({\n      x: width / 2,\n      y: height / 2\n    });\n  },\n  setOptions: function setOptions(options) {\n    this._rect.attr({\n      fill: options.backgroundColor\n    });\n\n    this._text.css(_patchFontOptions(options.font)).attr({\n      text: options.text,\n      class: options.cssClass\n    });\n\n    this[options.show ? \"show\" : \"hide\"]();\n  },\n  dispose: function dispose() {\n    this._group.linkRemove().linkOff();\n\n    this._group = this._rect = this._text = this._states = null;\n  },\n  _transit: function _transit(stateId) {\n    var state;\n\n    if (this._state !== stateId) {\n      this._state = stateId;\n      this._isHiding = false;\n      state = this._states[stateId];\n\n      this._rect.stopAnimation().animate({\n        opacity: state.opacity\n      }, {\n        complete: state.complete,\n        easing: ANIMATION_EASING,\n        duration: ANIMATION_DURATION,\n        unstoppable: true\n      });\n\n      this._noHiding = true;\n      state.start();\n      this._noHiding = false;\n    }\n  },\n  show: function show() {\n    this._transit(STATE_SHOWN);\n  },\n  hide: function hide() {\n    this._transit(STATE_HIDDEN);\n  },\n  scheduleHiding: function scheduleHiding() {\n    if (!this._noHiding) {\n      this._isHiding = true;\n    }\n  },\n  fulfillHiding: function fulfillHiding() {\n    if (this._isHiding) {\n      this.hide();\n    }\n  }\n};\nexport var plugin = {\n  name: \"loading_indicator\",\n  init: function init() {\n    var that = this;\n    that._loadingIndicator = new LoadingIndicator({\n      eventTrigger: that._eventTrigger,\n      renderer: that._renderer,\n      notify: function notify(state) {\n        that._skipLoadingIndicatorOptions = true;\n        that.option(\"loadingIndicator\", {\n          show: state\n        });\n        that._skipLoadingIndicatorOptions = false;\n\n        if (state) {\n          that._stopCurrentHandling();\n        }\n      }\n    });\n\n    that._scheduleLoadingIndicatorHiding();\n  },\n  dispose: function dispose() {\n    this._loadingIndicator.dispose();\n\n    this._loadingIndicator = null;\n  },\n  members: {\n    _scheduleLoadingIndicatorHiding: function _scheduleLoadingIndicatorHiding() {\n      this._loadingIndicator.scheduleHiding();\n    },\n    _fulfillLoadingIndicatorHiding: function _fulfillLoadingIndicatorHiding() {\n      this._loadingIndicator.fulfillHiding();\n    },\n    showLoadingIndicator: function showLoadingIndicator() {\n      this._loadingIndicator.show();\n    },\n    hideLoadingIndicator: function hideLoadingIndicator() {\n      this._loadingIndicator.hide();\n    },\n    _onBeginUpdate: function _onBeginUpdate() {\n      if (!this._optionChangedLocker) {\n        this._scheduleLoadingIndicatorHiding();\n      }\n    }\n  },\n  extenders: {\n    _dataSourceLoadingChangedHandler: function _dataSourceLoadingChangedHandler(isLoading) {\n      if (isLoading && (this._options.silent(\"loadingIndicator\") || {}).enabled) {\n        this._loadingIndicator.show();\n      }\n    },\n    _setContentSize: function _setContentSize() {\n      this._loadingIndicator.setSize(this._canvas);\n    },\n    endUpdate: function endUpdate() {\n      if (this._initialized && this._dataIsReady()) {\n        this._fulfillLoadingIndicatorHiding();\n      }\n    }\n  },\n  customize: function customize(constructor) {\n    var proto = constructor.prototype;\n\n    if (proto._dataSourceChangedHandler) {\n      var _dataSourceChangedHandler = proto._dataSourceChangedHandler;\n\n      proto._dataSourceChangedHandler = function () {\n        this._scheduleLoadingIndicatorHiding();\n\n        _dataSourceChangedHandler.apply(this, arguments);\n      };\n    }\n\n    constructor.addChange({\n      code: \"LOADING_INDICATOR\",\n      handler: function handler() {\n        if (!this._skipLoadingIndicatorOptions) {\n          this._loadingIndicator.setOptions(this._getOption(\"loadingIndicator\"));\n        }\n\n        this._scheduleLoadingIndicatorHiding();\n      },\n      isThemeDependent: true,\n      option: \"loadingIndicator\",\n      isOptionChange: true\n    });\n    proto._eventsMap.onLoadingIndicatorReady = {\n      name: \"loadingIndicatorReady\"\n    };\n    var _drawn = proto._drawn;\n\n    proto._drawn = function () {\n      _drawn.apply(this, arguments);\n\n      if (this._dataIsReady()) {\n        this._fulfillLoadingIndicatorHiding();\n      }\n    };\n  },\n  fontFields: [\"loadingIndicator.font\"]\n};","map":null,"metadata":{},"sourceType":"module"}