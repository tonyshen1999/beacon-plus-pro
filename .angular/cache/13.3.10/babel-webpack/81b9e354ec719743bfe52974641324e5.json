{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/hierarchical_collection/ui.data_converter.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport Class from \"../../core/class\";\nimport { extend } from \"../../core/utils/extend\";\nimport errors from \"../../ui/widget/ui.errors\";\nimport { each } from \"../../core/utils/iterator\";\nimport { isDefined, isPrimitive } from \"../../core/utils/type\";\nvar DataConverter = Class.inherit({\n  ctor: function ctor() {\n    this._dataStructure = [];\n    this._itemsCount = 0;\n    this._visibleItemsCount = 0;\n  },\n  _indexByKey: {},\n  _convertItemsToNodes: function _convertItemsToNodes(items, parentKey) {\n    var that = this;\n    each(items, function (_, item) {\n      var parentId = isDefined(parentKey) ? parentKey : that._getParentId(item);\n\n      var node = that._convertItemToNode(item, parentId);\n\n      that._dataStructure.push(node);\n\n      that._checkForDuplicateId(node.internalFields.key);\n\n      that._indexByKey[node.internalFields.key] = that._dataStructure.length - 1;\n\n      if (that._itemHasChildren(item)) {\n        that._convertItemsToNodes(that._dataAccessors.getters.items(item), node.internalFields.key);\n      }\n    });\n  },\n  _checkForDuplicateId: function _checkForDuplicateId(key) {\n    if (isDefined(this._indexByKey[key])) {\n      throw errors.Error(\"E1040\", key);\n    }\n  },\n  _getParentId: function _getParentId(item) {\n    return \"plain\" === this._dataType ? this._dataAccessors.getters.parentKey(item) : void 0;\n  },\n  _itemHasChildren: function _itemHasChildren(item) {\n    if (\"plain\" === this._dataType) {\n      return;\n    }\n\n    var items = this._dataAccessors.getters.items(item);\n\n    return items && items.length;\n  },\n  _getUniqueKey: function _getUniqueKey(item) {\n    var keyGetter = this._dataAccessors.getters.key;\n    var itemKey = keyGetter(item);\n    var isCorrectKey = keyGetter && (itemKey || 0 === itemKey) && isPrimitive(itemKey);\n    return isCorrectKey ? itemKey : this.getItemsCount();\n  },\n  _convertItemToNode: function _convertItemToNode(item, parentKey) {\n    this._itemsCount++;\n    false !== item.visible && this._visibleItemsCount++;\n    var node = {\n      internalFields: {\n        disabled: this._dataAccessors.getters.disabled(item, {\n          defaultValue: false\n        }),\n        expanded: this._dataAccessors.getters.expanded(item, {\n          defaultValue: false\n        }),\n        selected: this._dataAccessors.getters.selected(item, {\n          defaultValue: false\n        }),\n        key: this._getUniqueKey(item),\n        parentKey: isDefined(parentKey) ? parentKey : this._rootValue,\n        item: this._makeObjectFromPrimitive(item),\n        childrenKeys: []\n      }\n    };\n    extend(node, item);\n    delete node.items;\n    return node;\n  },\n  setChildrenKeys: function setChildrenKeys() {\n    var that = this;\n    each(this._dataStructure, function (_, node) {\n      if (node.internalFields.parentKey === that._rootValue) {\n        return;\n      }\n\n      var parent = that.getParentNode(node);\n      parent && parent.internalFields.childrenKeys.push(node.internalFields.key);\n    });\n  },\n  _makeObjectFromPrimitive: function _makeObjectFromPrimitive(item) {\n    if (isPrimitive(item)) {\n      var key = item;\n      item = {};\n\n      this._dataAccessors.setters.key(item, key);\n    }\n\n    return item;\n  },\n  _convertToPublicNode: function _convertToPublicNode(node, parent) {\n    if (!node) {\n      return null;\n    }\n\n    var publicNode = {\n      text: this._dataAccessors.getters.display(node),\n      key: node.internalFields.key,\n      selected: node.internalFields.selected,\n      expanded: node.internalFields.expanded,\n      disabled: node.internalFields.disabled,\n      parent: parent || null,\n      itemData: node.internalFields.item,\n      children: [],\n      items: []\n    };\n\n    if (publicNode.parent) {\n      publicNode.parent.children.push(publicNode);\n      publicNode.parent.items.push(publicNode);\n    }\n\n    return publicNode;\n  },\n  convertToPublicNodes: function convertToPublicNodes(data, parent) {\n    if (!data.length) {\n      return [];\n    }\n\n    var that = this;\n    var publicNodes = [];\n    each(data, function (_, node) {\n      node = isPrimitive(node) ? that._getByKey(node) : node;\n\n      var publicNode = that._convertToPublicNode(node, parent);\n\n      publicNode.children = that.convertToPublicNodes(node.internalFields.childrenKeys, publicNode);\n      publicNodes.push(publicNode);\n      node.internalFields.publicNode = publicNode;\n    });\n    return publicNodes;\n  },\n  setDataAccessors: function setDataAccessors(accessors) {\n    this._dataAccessors = accessors;\n  },\n  _getByKey: function _getByKey(key) {\n    return this._dataStructure[this.getIndexByKey(key)] || null;\n  },\n  getParentNode: function getParentNode(node) {\n    return this._getByKey(node.internalFields.parentKey);\n  },\n  getByKey: function getByKey(data, key) {\n    if (null === key || void 0 === key) {\n      return null;\n    }\n\n    var result = null;\n    var that = this;\n\n    var getByKey = function getByKey(data, key) {\n      each(data, function (_, element) {\n        var currentElementKey = element.internalFields && element.internalFields.key || that._dataAccessors.getters.key(element);\n\n        if (currentElementKey.toString() === key.toString()) {\n          result = element;\n          return false;\n        }\n      });\n      return result;\n    };\n\n    return getByKey(data, key);\n  },\n  getItemsCount: function getItemsCount() {\n    return this._itemsCount;\n  },\n  getVisibleItemsCount: function getVisibleItemsCount() {\n    return this._visibleItemsCount;\n  },\n  updateIndexByKey: function updateIndexByKey() {\n    var that = this;\n    this._indexByKey = {};\n    each(this._dataStructure, function (index, node) {\n      that._checkForDuplicateId(node.internalFields.key);\n\n      that._indexByKey[node.internalFields.key] = index;\n    });\n  },\n  updateChildrenKeys: function updateChildrenKeys() {\n    this._indexByKey = {};\n    this.removeChildrenKeys();\n    this.updateIndexByKey();\n    this.setChildrenKeys();\n  },\n  removeChildrenKeys: function removeChildrenKeys() {\n    this._indexByKey = {};\n    each(this._dataStructure, function (index, node) {\n      node.internalFields.childrenKeys = [];\n    });\n  },\n  getIndexByKey: function getIndexByKey(key) {\n    return this._indexByKey[key];\n  },\n  createPlainStructure: function createPlainStructure(items, rootValue, dataType) {\n    this._itemsCount = 0;\n    this._visibleItemsCount = 0;\n    this._rootValue = rootValue;\n    this._dataType = dataType;\n    this._indexByKey = {};\n\n    this._convertItemsToNodes(items);\n\n    this.setChildrenKeys();\n    return this._dataStructure;\n  }\n});\nexport default DataConverter;","map":null,"metadata":{},"sourceType":"module"}