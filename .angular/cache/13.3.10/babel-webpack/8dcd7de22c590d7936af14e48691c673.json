{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/range_selector/series_data_source.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { Series } from \"../series/base_series\";\nimport { SeriesFamily } from \"../core/series_family\";\nimport { isNumeric, isDate, isDefined } from \"../../core/utils/type\";\nimport { extend } from \"../../core/utils/extend\";\nimport { inArray } from \"../../core/utils/array\";\nimport { each } from \"../../core/utils/iterator\";\nimport { mergeMarginOptions, processSeriesTemplate } from \"../core/utils\";\nimport { Range } from \"../translators/range\";\nimport { validateData } from \"../components/data_validator\";\nimport { ThemeManager as ChartThemeManager } from \"../components/chart_theme_manager\";\n\nvar createThemeManager = function createThemeManager(chartOptions) {\n  return new ChartThemeManager({\n    options: chartOptions,\n    themeSection: \"rangeSelector.chart\",\n    fontFields: [\"commonSeriesSettings.label.font\"]\n  });\n};\n\nvar processSeriesFamilies = function processSeriesFamilies(series, minBubbleSize, maxBubbleSize, barOptions, negativesAsZeroes) {\n  var families = [];\n  var types = [];\n  each(series, function (i, item) {\n    if (-1 === inArray(item.type, types)) {\n      types.push(item.type);\n    }\n  });\n  each(types, function (_, type) {\n    var family = new SeriesFamily({\n      type: type,\n      minBubbleSize: minBubbleSize,\n      maxBubbleSize: maxBubbleSize,\n      barGroupPadding: barOptions.barGroupPadding,\n      barGroupWidth: barOptions.barGroupWidth,\n      negativesAsZeroes: negativesAsZeroes\n    });\n    family.add(series);\n    family.adjustSeriesValues();\n    families.push(family);\n  });\n  return families;\n};\n\nexport var SeriesDataSource = function SeriesDataSource(options) {\n  var themeManager = this._themeManager = createThemeManager(options.chart);\n  themeManager.setTheme(options.chart.theme);\n  var topIndent = themeManager.getOptions(\"topIndent\");\n  var bottomIndent = themeManager.getOptions(\"bottomIndent\");\n  this._indent = {\n    top: topIndent >= 0 && topIndent < 1 ? topIndent : 0,\n    bottom: bottomIndent >= 0 && bottomIndent < 1 ? bottomIndent : 0\n  };\n  this._valueAxis = themeManager.getOptions(\"valueAxisRangeSelector\") || {};\n  this._hideChart = false;\n  this._series = this._calculateSeries(options);\n  this._seriesFamilies = [];\n};\nSeriesDataSource.prototype = {\n  constructor: SeriesDataSource,\n  _calculateSeries: function _calculateSeries(options) {\n    var series = [];\n    var particularSeriesOptions;\n    var seriesTheme;\n    var data = options.dataSource || [];\n    var parsedData;\n    var chartThemeManager = this._themeManager;\n    var seriesTemplate = chartThemeManager.getOptions(\"seriesTemplate\");\n    var allSeriesOptions = seriesTemplate ? processSeriesTemplate(seriesTemplate, data) : options.chart.series;\n    var dataSourceField;\n    var valueAxis = this._valueAxis;\n    var i;\n    var newSeries;\n    var groupsData;\n\n    if (options.dataSource && !allSeriesOptions) {\n      dataSourceField = options.dataSourceField || \"arg\";\n      allSeriesOptions = {\n        argumentField: dataSourceField,\n        valueField: dataSourceField\n      };\n      this._hideChart = true;\n    }\n\n    allSeriesOptions = Array.isArray(allSeriesOptions) ? allSeriesOptions : allSeriesOptions ? [allSeriesOptions] : [];\n\n    for (i = 0; i < allSeriesOptions.length; i++) {\n      particularSeriesOptions = extend(true, {}, allSeriesOptions[i]);\n      particularSeriesOptions.rotated = false;\n      seriesTheme = chartThemeManager.getOptions(\"series\", particularSeriesOptions, allSeriesOptions.length);\n      seriesTheme.argumentField = seriesTheme.argumentField || options.dataSourceField;\n\n      if (!seriesTheme.name) {\n        seriesTheme.name = \"Series \" + (i + 1).toString();\n      }\n\n      if (data && data.length > 0) {\n        newSeries = new Series({\n          renderer: options.renderer,\n          argumentAxis: options.argumentAxis,\n          valueAxis: options.valueAxis,\n          incidentOccurred: options.incidentOccurred\n        }, seriesTheme);\n        series.push(newSeries);\n      }\n    }\n\n    if (series.length) {\n      groupsData = {\n        groups: [{\n          series: series,\n          valueAxis: options.valueAxis,\n          valueOptions: {\n            type: valueAxis.type,\n            valueType: dataSourceField ? options.valueType : valueAxis.valueType\n          }\n        }],\n        argumentOptions: {\n          categories: options.categories,\n          argumentType: options.valueType,\n          type: options.axisType\n        }\n      };\n      parsedData = validateData(data, groupsData, options.incidentOccurred, chartThemeManager.getOptions(\"dataPrepareSettings\"));\n      this.argCategories = groupsData.categories;\n\n      for (i = 0; i < series.length; i++) {\n        series[i].updateData(parsedData[series[i].getArgumentField()]);\n      }\n    }\n\n    return series;\n  },\n  createPoints: function createPoints() {\n    if (0 === this._series.length) {\n      return;\n    }\n\n    var series = this._series;\n    var viewport = new Range();\n    var axis = series[0].getArgumentAxis();\n    var themeManager = this._themeManager;\n    var negativesAsZeroes = themeManager.getOptions(\"negativesAsZeroes\");\n    var negativesAsZeros = themeManager.getOptions(\"negativesAsZeros\");\n    series.forEach(function (s) {\n      viewport.addRange(s.getArgumentRange());\n    });\n    axis.getTranslator().updateBusinessRange(viewport);\n    series.forEach(function (s) {\n      s.createPoints();\n    });\n    this._seriesFamilies = processSeriesFamilies(series, themeManager.getOptions(\"minBubbleSize\"), themeManager.getOptions(\"maxBubbleSize\"), {\n      barGroupPadding: themeManager.getOptions(\"barGroupPadding\"),\n      barGroupWidth: themeManager.getOptions(\"barGroupWidth\")\n    }, isDefined(negativesAsZeroes) ? negativesAsZeroes : negativesAsZeros);\n  },\n  adjustSeriesDimensions: function adjustSeriesDimensions() {\n    each(this._seriesFamilies, function (_, family) {\n      family.adjustSeriesDimensions();\n    });\n  },\n  getBoundRange: function getBoundRange() {\n    var rangeData;\n    var valueAxis = this._valueAxis;\n    var valRange = new Range({\n      min: valueAxis.min,\n      minVisible: valueAxis.min,\n      max: valueAxis.max,\n      maxVisible: valueAxis.max,\n      axisType: valueAxis.type,\n      base: valueAxis.logarithmBase\n    });\n    var argRange = new Range({});\n    var rangeYSize;\n    var rangeVisibleSizeY;\n    var minIndent;\n    var maxIndent;\n    each(this._series, function (_, series) {\n      rangeData = series.getRangeData();\n      valRange.addRange(rangeData.val);\n      argRange.addRange(rangeData.arg);\n    });\n\n    if (!valRange.isEmpty() && !argRange.isEmpty()) {\n      minIndent = valueAxis.inverted ? this._indent.top : this._indent.bottom;\n      maxIndent = valueAxis.inverted ? this._indent.bottom : this._indent.top;\n      rangeYSize = valRange.max - valRange.min;\n      rangeVisibleSizeY = (isNumeric(valRange.maxVisible) ? valRange.maxVisible : valRange.max) - (isNumeric(valRange.minVisible) ? valRange.minVisible : valRange.min);\n\n      if (isDate(valRange.min)) {\n        valRange.min = new Date(valRange.min.valueOf() - rangeYSize * minIndent);\n      } else {\n        valRange.min -= rangeYSize * minIndent;\n      }\n\n      if (isDate(valRange.max)) {\n        valRange.max = new Date(valRange.max.valueOf() + rangeYSize * maxIndent);\n      } else {\n        valRange.max += rangeYSize * maxIndent;\n      }\n\n      if (isNumeric(rangeVisibleSizeY)) {\n        valRange.maxVisible = valRange.maxVisible ? valRange.maxVisible + rangeVisibleSizeY * maxIndent : void 0;\n        valRange.minVisible = valRange.minVisible ? valRange.minVisible - rangeVisibleSizeY * minIndent : void 0;\n      }\n\n      valRange.invert = valueAxis.inverted;\n    }\n\n    return {\n      arg: argRange,\n      val: valRange\n    };\n  },\n  getMarginOptions: function getMarginOptions(canvas) {\n    var bubbleSize = Math.min(canvas.width, canvas.height) * this._themeManager.getOptions(\"maxBubbleSize\");\n\n    return this._series.reduce(function (marginOptions, series) {\n      var seriesOptions = series.getMarginOptions();\n\n      if (true === seriesOptions.processBubbleSize) {\n        seriesOptions.size = bubbleSize;\n      }\n\n      return mergeMarginOptions(marginOptions, seriesOptions);\n    }, {});\n  },\n  getSeries: function getSeries() {\n    return this._series;\n  },\n  isEmpty: function isEmpty() {\n    return 0 === this.getSeries().length;\n  },\n  isShowChart: function isShowChart() {\n    return !this._hideChart;\n  },\n  getCalculatedValueType: function getCalculatedValueType() {\n    var series = this._series[0];\n    return null === series || void 0 === series ? void 0 : series.argumentType;\n  },\n  getThemeManager: function getThemeManager() {\n    return this._themeManager;\n  }\n};","map":null,"metadata":{},"sourceType":"module"}