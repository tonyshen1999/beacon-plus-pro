{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/data_grid/ui.data_grid.grouping.core.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport Class from \"../../core/class\";\nimport gridCore from \"./ui.data_grid.core\";\nimport { normalizeSortingInfo } from \"../../data/utils\";\nimport { when } from \"../../core/utils/deferred\";\nexport function createOffsetFilter(path, storeLoadOptions, lastLevelOnly) {\n  var groups = normalizeSortingInfo(storeLoadOptions.group);\n  var filter = [];\n\n  for (var i = lastLevelOnly ? path.length - 1 : 0; i < path.length; i++) {\n    var filterElement = [];\n\n    for (var j = 0; j <= i; j++) {\n      var selector = groups[j].selector;\n\n      if (i === j && (null === path[j] || false === path[j] || true === path[j])) {\n        if (false === path[j]) {\n          filterElement.push([selector, \"=\", groups[j].desc ? true : null]);\n        } else if (path[j] ? !groups[j].desc : groups[j].desc) {\n          filterElement.push([selector, \"<>\", path[j]]);\n        } else {\n          filterElement.push([selector, \"<>\", null]);\n          filterElement.push([selector, \"=\", null]);\n        }\n      } else {\n        var currentFilter = [selector, i === j ? groups[j].desc ? \">\" : \"<\" : \"=\", path[j]];\n\n        if (\"<\" === currentFilter[1]) {\n          filterElement.push([currentFilter, \"or\", [selector, \"=\", null]]);\n        } else {\n          filterElement.push(currentFilter);\n        }\n      }\n    }\n\n    filter.push(gridCore.combineFilters(filterElement));\n  }\n\n  filter = gridCore.combineFilters(filter, \"or\");\n  return gridCore.combineFilters([filter, storeLoadOptions.filter]);\n}\nexport var GroupingHelper = Class.inherit(function () {\n  var findGroupInfoByKey = function findGroupInfoByKey(groupsInfo, key) {\n    var hash = groupsInfo.hash;\n    return hash && hash[JSON.stringify(key)];\n  };\n\n  var getGroupInfoIndexByOffset = function getGroupInfoIndexByOffset(groupsInfo, offset) {\n    var leftIndex = 0;\n    var rightIndex = groupsInfo.length - 1;\n\n    if (!groupsInfo.length) {\n      return 0;\n    }\n\n    do {\n      var middleIndex = rightIndex + leftIndex >> 1;\n\n      if (groupsInfo[middleIndex].offset > offset) {\n        rightIndex = middleIndex;\n      } else {\n        leftIndex = middleIndex;\n      }\n    } while (rightIndex - leftIndex > 1);\n\n    var index;\n\n    for (index = leftIndex; index <= rightIndex; index++) {\n      if (groupsInfo[index].offset > offset) {\n        break;\n      }\n    }\n\n    return index;\n  };\n\n  return {\n    ctor: function ctor(dataSourceAdapter) {\n      this._dataSource = dataSourceAdapter;\n      this.reset();\n    },\n    reset: function reset() {\n      this._groupsInfo = [];\n      this._totalCountCorrection = 0;\n    },\n    totalCountCorrection: function totalCountCorrection() {\n      return this._totalCountCorrection;\n    },\n    updateTotalItemsCount: function updateTotalItemsCount(totalCountCorrection) {\n      this._totalCountCorrection = totalCountCorrection || 0;\n    },\n    isGroupItemCountable: function isGroupItemCountable(item) {\n      return !this._isVirtualPaging() || !item.isContinuation;\n    },\n    _isVirtualPaging: function _isVirtualPaging() {\n      var scrollingMode = this._dataSource.option(\"scrolling.mode\");\n\n      return \"virtual\" === scrollingMode || \"infinite\" === scrollingMode;\n    },\n    itemsCount: function itemsCount() {\n      var dataSourceAdapter = this._dataSource;\n      var dataSource = dataSourceAdapter._dataSource;\n      var groupCount = gridCore.normalizeSortingInfo(dataSource.group() || []).length;\n\n      var itemsCount = function calculateItemsCount(that, items, groupsCount) {\n        var result = 0;\n\n        if (items) {\n          if (!groupsCount) {\n            result = items.length;\n          } else {\n            for (var i = 0; i < items.length; i++) {\n              if (that.isGroupItemCountable(items[i])) {\n                result++;\n              }\n\n              result += calculateItemsCount(that, items[i].items, groupsCount - 1);\n            }\n          }\n        }\n\n        return result;\n      }(this, dataSource.items(), groupCount);\n\n      return itemsCount;\n    },\n    foreachGroups: function foreachGroups(callback, childrenAtFirst, foreachCollapsedGroups, updateOffsets, updateParentOffsets) {\n      var that = this;\n      return function foreachGroupsCore(groupsInfo, callback, childrenAtFirst, parents) {\n        var callbackResults = [];\n\n        function executeCallback(callback, data, parents, callbackResults) {\n          var callbackResult = data && callback(data, parents);\n          callbackResult && callbackResults.push(callbackResult);\n          return callbackResult;\n        }\n\n        for (var i = 0; i < groupsInfo.length; i++) {\n          parents.push(groupsInfo[i].data);\n\n          if (!childrenAtFirst && false === executeCallback(callback, groupsInfo[i].data, parents, callbackResults)) {\n            return false;\n          }\n\n          if (!groupsInfo[i].data || groupsInfo[i].data.isExpanded || foreachCollapsedGroups) {\n            var children = groupsInfo[i].children;\n            var callbackResult = children.length && foreachGroupsCore(children, callback, childrenAtFirst, parents);\n            callbackResult && callbackResults.push(callbackResult);\n\n            if (false === callbackResult) {\n              return false;\n            }\n          }\n\n          if (childrenAtFirst && false === executeCallback(callback, groupsInfo[i].data, parents, callbackResults)) {\n            return false;\n          }\n\n          if (!groupsInfo[i].data || groupsInfo[i].data.offset !== groupsInfo[i].offset) {\n            updateOffsets = true;\n          }\n\n          parents.pop();\n        }\n\n        var currentParents = updateParentOffsets && parents.slice(0);\n        return updateOffsets && when.apply($, callbackResults).always(function () {\n          that._updateGroupInfoOffsets(groupsInfo, currentParents);\n        });\n      }(that._groupsInfo, callback, childrenAtFirst, []);\n    },\n    _updateGroupInfoOffsets: function _updateGroupInfoOffsets(groupsInfo, parents) {\n      parents = parents || [];\n\n      for (var index = 0; index < groupsInfo.length; index++) {\n        var groupInfo = groupsInfo[index];\n\n        if (groupInfo.data && groupInfo.data.offset !== groupInfo.offset) {\n          groupInfo.offset = groupInfo.data.offset;\n\n          for (var parentIndex = 0; parentIndex < parents.length; parentIndex++) {\n            parents[parentIndex].offset = groupInfo.offset;\n          }\n        }\n      }\n\n      groupsInfo.sort(function (a, b) {\n        return a.offset - b.offset;\n      });\n    },\n    findGroupInfo: function findGroupInfo(path) {\n      var groupInfo;\n      var groupsInfo = this._groupsInfo;\n\n      for (var pathIndex = 0; groupsInfo && pathIndex < path.length; pathIndex++) {\n        groupInfo = findGroupInfoByKey(groupsInfo, path[pathIndex]);\n        groupsInfo = groupInfo && groupInfo.children;\n      }\n\n      return groupInfo && groupInfo.data;\n    },\n    addGroupInfo: function addGroupInfo(groupInfoData) {\n      var groupInfo;\n      var path = groupInfoData.path;\n      var groupsInfo = this._groupsInfo;\n\n      for (var pathIndex = 0; pathIndex < path.length; pathIndex++) {\n        groupInfo = findGroupInfoByKey(groupsInfo, path[pathIndex]);\n\n        if (!groupInfo) {\n          groupInfo = {\n            key: path[pathIndex],\n            offset: groupInfoData.offset,\n            data: {\n              offset: groupInfoData.offset,\n              isExpanded: true,\n              path: path.slice(0, pathIndex + 1)\n            },\n            children: []\n          };\n          var index = getGroupInfoIndexByOffset(groupsInfo, groupInfoData.offset);\n          groupsInfo.splice(index, 0, groupInfo);\n          groupsInfo.hash = groupsInfo.hash || {};\n          groupsInfo.hash[JSON.stringify(groupInfo.key)] = groupInfo;\n        }\n\n        if (pathIndex === path.length - 1) {\n          groupInfo.data = groupInfoData;\n\n          if (groupInfo.offset !== groupInfoData.offset) {\n            this._updateGroupInfoOffsets(groupsInfo);\n          }\n        }\n\n        groupsInfo = groupInfo.children;\n      }\n    },\n    allowCollapseAll: function allowCollapseAll() {\n      return true;\n    },\n    refresh: function refresh(options) {\n      var storeLoadOptions = options.storeLoadOptions;\n      var groups = normalizeSortingInfo(storeLoadOptions.group || []);\n      var oldGroups = \"_group\" in this ? normalizeSortingInfo(this._group || []) : groups;\n      var groupsCount = Math.min(oldGroups.length, groups.length);\n      this._group = storeLoadOptions.group;\n\n      for (var groupIndex = 0; groupIndex < groupsCount; groupIndex++) {\n        if (oldGroups[groupIndex].selector !== groups[groupIndex].selector) {\n          groupsCount = groupIndex;\n          break;\n        }\n      }\n\n      if (!groupsCount) {\n        this.reset();\n      } else {\n        !function cleanGroupsInfo(groupsInfo, groupIndex, groupsCount) {\n          for (var i = 0; i < groupsInfo.length; i++) {\n            if (groupIndex + 1 >= groupsCount) {\n              groupsInfo[i].children = [];\n            } else {\n              cleanGroupsInfo(groupsInfo[i].children, groupIndex + 1, groupsCount);\n            }\n          }\n        }(this._groupsInfo, 0, groupsCount);\n      }\n    },\n    handleDataLoading: function handleDataLoading() {},\n    handleDataLoaded: function handleDataLoaded(options, callBase) {\n      callBase(options);\n    },\n    handleDataLoadedCore: function handleDataLoadedCore(options, callBase) {\n      callBase(options);\n    }\n  };\n}());","map":null,"metadata":{},"sourceType":"module"}