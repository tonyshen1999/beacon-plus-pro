{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/date_box/ui.date_box.mask.parts.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getPatternSetters } from \"../../localization/ldml/date.parser\";\nimport { extend } from \"../../core/utils/extend\";\nimport { fitIntoRange } from \"../../core/utils/math\";\nimport { noop } from \"../../core/utils/common\";\n\nvar monthGetter = function monthGetter(date) {\n  return date.getMonth() + 1;\n};\n\nvar monthSetter = function monthSetter(date, value) {\n  var day = date.getDate();\n  var monthLimits = getLimits(\"M\", date);\n  var newValue = fitIntoRange(parseInt(value), monthLimits.min, monthLimits.max);\n  date.setMonth(newValue - 1, 1);\n\n  var _getLimits = getLimits(\"dM\", date),\n      min = _getLimits.min,\n      max = _getLimits.max;\n\n  var newDay = fitIntoRange(day, min, max);\n  date.setDate(newDay);\n};\n\nvar PATTERN_GETTERS = {\n  a: function a(date) {\n    return date.getHours() < 12 ? 0 : 1;\n  },\n  E: \"getDay\",\n  y: \"getFullYear\",\n  M: monthGetter,\n  L: monthGetter,\n  d: \"getDate\",\n  H: \"getHours\",\n  h: \"getHours\",\n  m: \"getMinutes\",\n  s: \"getSeconds\",\n  S: \"getMilliseconds\"\n};\nvar PATTERN_SETTERS = extend({}, getPatternSetters(), {\n  a: function a(date, value) {\n    var hours = date.getHours();\n    var current = hours >= 12;\n\n    if (current === !!parseInt(value)) {\n      return;\n    }\n\n    date.setHours((hours + 12) % 24);\n  },\n  d: function d(date, value) {\n    var lastDayInMonth = getLimits(\"dM\", date).max;\n\n    if (value > lastDayInMonth) {\n      date.setMonth(date.getMonth() + 1);\n    }\n\n    date.setDate(value);\n  },\n  h: function h(date, value) {\n    var isPM = date.getHours() >= 12;\n    date.setHours(+value % 12 + (isPM ? 12 : 0));\n  },\n  M: monthSetter,\n  L: monthSetter,\n  E: function E(date, value) {\n    if (value < 0) {\n      return;\n    }\n\n    date.setDate(date.getDate() - date.getDay() + parseInt(value));\n  },\n  y: function y(date, value) {\n    var currentYear = date.getFullYear();\n    var valueLength = String(value).length;\n    var maxLimitLength = String(getLimits(\"y\", date).max).length;\n    var newValue = parseInt(String(currentYear).substr(0, maxLimitLength - valueLength) + value);\n    date.setFullYear(newValue);\n  }\n});\n\nvar getPatternGetter = function getPatternGetter(patternChar) {\n  return PATTERN_GETTERS[patternChar] || function () {\n    return patternChar;\n  };\n};\n\nexport var renderDateParts = function renderDateParts(text, regExpInfo) {\n  var result = regExpInfo.regexp.exec(text);\n  var start = 0;\n  var end = 0;\n  var sections = [];\n\n  var _loop = function _loop(i) {\n    start = end;\n    end = start + result[i].length;\n    var pattern = regExpInfo.patterns[i - 1].replace(/^'|'$/g, \"\");\n    var getter = getPatternGetter(pattern[0]);\n    sections.push({\n      index: i - 1,\n      isStub: pattern === result[i],\n      caret: {\n        start: start,\n        end: end\n      },\n      pattern: pattern,\n      text: result[i],\n      limits: function limits() {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return getLimits.apply(void 0, [pattern[0]].concat(args));\n      },\n      setter: PATTERN_SETTERS[pattern[0]] || noop,\n      getter: getter\n    });\n  };\n\n  for (var i = 1; i < result.length; i++) {\n    _loop(i);\n  }\n\n  return sections;\n};\n\nvar getLimits = function getLimits(pattern, date, forcedPattern) {\n  var limits = {\n    y: {\n      min: 0,\n      max: 9999\n    },\n    M: {\n      min: 1,\n      max: 12\n    },\n    L: {\n      min: 1,\n      max: 12\n    },\n    d: {\n      min: 1,\n      max: 31\n    },\n    dM: {\n      min: 1,\n      max: new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate()\n    },\n    E: {\n      min: 0,\n      max: 6\n    },\n    H: {\n      min: 0,\n      max: 23\n    },\n    h: {\n      min: 0,\n      max: 23\n    },\n    m: {\n      min: 0,\n      max: 59\n    },\n    s: {\n      min: 0,\n      max: 59\n    },\n    S: {\n      min: 0,\n      max: 999\n    },\n    a: {\n      min: 0,\n      max: 1\n    }\n  };\n  return limits[forcedPattern || pattern] || limits.getAmPm;\n};\n\nexport var getDatePartIndexByPosition = function getDatePartIndexByPosition(dateParts, position) {\n  for (var i = 0; i < dateParts.length; i++) {\n    var caretInGroup = dateParts[i].caret.end >= position;\n\n    if (!dateParts[i].isStub && caretInGroup) {\n      return i;\n    }\n  }\n\n  return null;\n};","map":null,"metadata":{},"sourceType":"module"}