{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/validation_summary.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport registerComponent from \"../core/component_registrator\";\nimport eventsEngine from \"../events/core/events_engine\";\nimport { grep } from \"../core/utils/common\";\nimport { extend } from \"../core/utils/extend\";\nimport { each, map } from \"../core/utils/iterator\";\nimport ValidationEngine from \"./validation_engine\";\nimport CollectionWidget from \"./collection/ui.collection_widget.edit\";\nvar VALIDATION_SUMMARY_CLASS = \"dx-validationsummary\";\nvar ITEM_CLASS = VALIDATION_SUMMARY_CLASS + \"-item\";\nvar ITEM_DATA_KEY = VALIDATION_SUMMARY_CLASS + \"-item-data\";\nvar ValidationSummary = CollectionWidget.inherit({\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      focusStateEnabled: false,\n      noDataText: null\n    });\n  },\n  _setOptionsByReference: function _setOptionsByReference() {\n    this.callBase();\n    extend(this._optionsByReference, {\n      validationGroup: true\n    });\n  },\n  _init: function _init() {\n    this.callBase();\n\n    this._initGroupRegistration();\n  },\n  _initGroupRegistration: function _initGroupRegistration() {\n    var $element = this.$element();\n    var group = this.option(\"validationGroup\") || ValidationEngine.findGroup($element, this._modelByElement($element));\n    var groupConfig = ValidationEngine.addGroup(group);\n\n    this._unsubscribeGroup();\n\n    this._groupWasInit = true;\n    this._validationGroup = group;\n    this.groupSubscription = this._groupValidationHandler.bind(this);\n    groupConfig.on(\"validated\", this.groupSubscription);\n  },\n  _unsubscribeGroup: function _unsubscribeGroup() {\n    var groupConfig = ValidationEngine.getGroupConfig(this._validationGroup);\n    groupConfig && groupConfig.off(\"validated\", this.groupSubscription);\n  },\n  _getOrderedItems: function _getOrderedItems(validators, items) {\n    var orderedItems = [];\n    each(validators, function (_, validator) {\n      var foundItems = grep(items, function (item) {\n        if (item.validator === validator) {\n          return true;\n        }\n      });\n\n      if (foundItems.length) {\n        orderedItems = orderedItems.concat(foundItems);\n      }\n    });\n    return orderedItems;\n  },\n  _groupValidationHandler: function _groupValidationHandler(params) {\n    var _this = this;\n\n    var items = this._getOrderedItems(params.validators, map(params.brokenRules, function (rule) {\n      return {\n        text: rule.message,\n        validator: rule.validator,\n        index: rule.index\n      };\n    }));\n\n    this.validators = params.validators;\n    each(this.validators, function (_, validator) {\n      if (validator._validationSummary !== _this) {\n        var handler = _this._itemValidationHandler.bind(_this);\n\n        validator.on(\"validated\", handler);\n        validator.on(\"disposing\", function () {\n          validator.off(\"validated\", handler);\n          validator._validationSummary = null;\n          handler = null;\n        });\n        validator._validationSummary = _this;\n      }\n    });\n    this.option(\"items\", items);\n  },\n  _itemValidationHandler: function _itemValidationHandler(_ref) {\n    var isValid = _ref.isValid,\n        validator = _ref.validator,\n        brokenRules = _ref.brokenRules;\n    var items = this.option(\"items\");\n    var itemsChanged = false;\n    var itemIndex = 0;\n\n    var _loop = function _loop() {\n      var item = items[itemIndex];\n\n      if (item.validator === validator) {\n        var foundRule = grep(brokenRules || [], function (rule) {\n          return rule.index === item.index;\n        })[0];\n\n        if (isValid || !foundRule) {\n          items.splice(itemIndex, 1);\n          itemsChanged = true;\n          return \"continue\";\n        }\n\n        if (foundRule.message !== item.text) {\n          item.text = foundRule.message;\n          itemsChanged = true;\n        }\n      }\n\n      itemIndex++;\n    };\n\n    while (itemIndex < items.length) {\n      var _ret = _loop();\n\n      if (\"continue\" === _ret) {\n        continue;\n      }\n    }\n\n    each(brokenRules, function (_, rule) {\n      var foundItem = grep(items, function (item) {\n        return item.validator === validator && item.index === rule.index;\n      })[0];\n\n      if (!foundItem) {\n        items.push({\n          text: rule.message,\n          validator: validator,\n          index: rule.index\n        });\n        itemsChanged = true;\n      }\n    });\n\n    if (itemsChanged) {\n      items = this._getOrderedItems(this.validators, items);\n      this.option(\"items\", items);\n    }\n  },\n  _initMarkup: function _initMarkup() {\n    this.$element().addClass(VALIDATION_SUMMARY_CLASS);\n    this.callBase();\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"validationGroup\":\n        this._initGroupRegistration();\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  _itemClass: function _itemClass() {\n    return ITEM_CLASS;\n  },\n  _itemDataKey: function _itemDataKey() {\n    return ITEM_DATA_KEY;\n  },\n  _postprocessRenderItem: function _postprocessRenderItem(params) {\n    eventsEngine.on(params.itemElement, \"click\", function () {\n      params.itemData.validator && params.itemData.validator.focus && params.itemData.validator.focus();\n    });\n  },\n  _dispose: function _dispose() {\n    this.callBase();\n\n    this._unsubscribeGroup();\n  }\n});\nregisterComponent(\"dxValidationSummary\", ValidationSummary);\nexport default ValidationSummary;","map":null,"metadata":{},"sourceType":"module"}