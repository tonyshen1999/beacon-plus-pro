{"ast":null,"code":"import _defineProperty from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.notification.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getWidth } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport { isFunction } from \"../../core/utils/type\";\nimport { Deferred } from \"../../core/utils/deferred\";\nimport { getWindow, hasWindow } from \"../../core/utils/window\";\nimport Widget from \"../widget/ui.widget\";\nimport Popup from \"../popup\";\nimport Drawer from \"../drawer/ui.drawer\";\nimport { NotificationManager, NotificationManagerStub, MANAGER_ID_NAME } from \"./ui.file_manager.notification_manager\";\nvar window = getWindow();\nvar ADAPTIVE_STATE_SCREEN_WIDTH = 1e3;\nvar FILE_MANAGER_NOTIFICATION_CLASS = \"dx-filemanager-notification\";\nvar FILE_MANAGER_NOTIFICATION_DRAWER_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_CLASS, \"-drawer\");\nvar FILE_MANAGER_NOTIFICATION_DRAWER_PANEL_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_DRAWER_CLASS, \"-panel\");\nvar FILE_MANAGER_NOTIFICATION_POPUP_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_CLASS, \"-popup\");\nvar FILE_MANAGER_NOTIFICATION_POPUP_ERROR_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_CLASS, \"-popup-error\");\nvar FILE_MANAGER_NOTIFICATION_COMMON_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_CLASS, \"-common\");\nvar FILE_MANAGER_NOTIFICATION_SEPARATOR_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_CLASS, \"-separator\");\nvar FILE_MANAGER_NOTIFICATION_DETAILS_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_CLASS, \"-details\");\nvar FILE_MANAGER_NOTIFICATION_COMMON_NO_ITEM_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_CLASS, \"-common-no-item\");\n\nvar FileManagerNotificationControl = /*#__PURE__*/function (_Widget) {\n  _inherits(FileManagerNotificationControl, _Widget);\n\n  var _super = _createSuper(FileManagerNotificationControl);\n\n  function FileManagerNotificationControl() {\n    _classCallCheck(this, FileManagerNotificationControl);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FileManagerNotificationControl, [{\n    key: \"_initMarkup\",\n    value: function _initMarkup() {\n      var _this = this;\n\n      _get(_getPrototypeOf(FileManagerNotificationControl.prototype), \"_initMarkup\", this).call(this);\n\n      this._initActions();\n\n      this._isInAdaptiveState = this._isSmallScreen();\n      this._managerMap = {};\n      this._notificationManagerStubId = null;\n\n      this._setNotificationManager();\n\n      var $progressPanelContainer = this.option(\"progressPanelContainer\");\n      var $progressDrawer = $(\"<div>\").addClass(FILE_MANAGER_NOTIFICATION_DRAWER_CLASS).appendTo($progressPanelContainer);\n      $(\"<div>\").addClass(FILE_MANAGER_NOTIFICATION_DRAWER_PANEL_CLASS).appendTo($progressDrawer);\n      var drawerOptions = extend({\n        opened: false,\n        position: \"right\",\n        template: function template(container) {\n          return _this._ensureProgressPanelCreated(container);\n        }\n      }, this._getProgressDrawerAdaptiveOptions());\n      this._progressDrawer = this._createComponent($progressDrawer, Drawer, drawerOptions);\n      var $drawerContent = $progressDrawer.find(\".\".concat(FILE_MANAGER_NOTIFICATION_DRAWER_PANEL_CLASS)).first();\n      var contentRenderer = this.option(\"contentTemplate\");\n\n      if (isFunction(contentRenderer)) {\n        contentRenderer($drawerContent, this);\n      }\n    }\n  }, {\n    key: \"_setNotificationManager\",\n    value: function _setNotificationManager(options) {\n      options = extend({\n        onActionProgressStatusChanged: this._raiseActionProgress.bind(this)\n      }, options);\n\n      if (!this._notificationManagerStubId) {\n        var stubManager = new NotificationManagerStub(options);\n        this._notificationManagerStubId = stubManager.getId();\n        this._managerMap[this._notificationManagerStubId] = stubManager;\n      }\n\n      if (!this._isProgressDrawerDisabled()) {\n        var notificationManagerComponent = this._getProgressManagerComponent();\n\n        options.isActual = true;\n        var defaultManager = new notificationManagerComponent(options);\n        this._managerMap[defaultManager.getId()] = defaultManager;\n      }\n    }\n  }, {\n    key: \"_getNotificationManager\",\n    value: function _getNotificationManager(operationInfo) {\n      var actualManagerId = (null === operationInfo || void 0 === operationInfo ? void 0 : operationInfo[MANAGER_ID_NAME]) || this._getActualNotificationManagerId();\n\n      return this._managerMap[actualManagerId] || this._managerMap[this._notificationManagerStubId];\n    }\n  }, {\n    key: \"_clearManagerMap\",\n    value: function _clearManagerMap() {\n      var stubManager = this._managerMap[this._notificationManagerStubId];\n      delete this._managerMap;\n      this._managerMap = _defineProperty({}, this._notificationManagerStubId, stubManager);\n    }\n  }, {\n    key: \"_getActualNotificationManagerId\",\n    value: function _getActualNotificationManagerId() {\n      var _this2 = this;\n\n      return Object.keys(this._managerMap).filter(function (managerId) {\n        return _this2._managerMap[managerId].isActual();\n      })[0];\n    }\n  }, {\n    key: \"tryShowProgressPanel\",\n    value: function tryShowProgressPanel() {\n      var _this3 = this;\n\n      var promise = new Deferred();\n\n      var notificationManager = this._getNotificationManager();\n\n      if (notificationManager.isActionProgressStatusDefault() || this._isProgressDrawerOpened() || this._isProgressDrawerDisabled()) {\n        return promise.resolve().promise();\n      }\n\n      setTimeout(function () {\n        _this3._progressDrawer.show().done(promise.resolve);\n\n        _this3._hidePopup();\n\n        notificationManager.tryHideActionProgress();\n      });\n      return promise.promise();\n    }\n  }, {\n    key: \"addOperation\",\n    value: function addOperation(processingMessage, allowCancel, allowProgressAutoUpdate) {\n      var notificationManager = this._getNotificationManager();\n\n      return notificationManager.addOperation(processingMessage, allowCancel, allowProgressAutoUpdate);\n    }\n  }, {\n    key: \"addOperationDetails\",\n    value: function addOperationDetails(operationInfo, details, showCloseButton) {\n      var notificationManager = this._getNotificationManager(operationInfo);\n\n      notificationManager.addOperationDetails(operationInfo, details, showCloseButton);\n    }\n  }, {\n    key: \"updateOperationItemProgress\",\n    value: function updateOperationItemProgress(operationInfo, itemIndex, itemProgress, commonProgress) {\n      var notificationManager = this._getNotificationManager(operationInfo);\n\n      notificationManager.updateOperationItemProgress(operationInfo, itemIndex, itemProgress, commonProgress);\n    }\n  }, {\n    key: \"completeOperationItem\",\n    value: function completeOperationItem(operationInfo, itemIndex, commonProgress) {\n      var notificationManager = this._getNotificationManager(operationInfo);\n\n      notificationManager.completeOperationItem(operationInfo, itemIndex, commonProgress);\n    }\n  }, {\n    key: \"completeOperation\",\n    value: function completeOperation(operationInfo, commonText, isError, statusText) {\n      var notificationManager = this._getNotificationManager(operationInfo);\n\n      if (!isError) {\n        this._showPopup(commonText);\n      }\n\n      notificationManager.completeOperation(operationInfo, commonText, isError, statusText);\n\n      if (!this._isProgressDrawerOpened() || !notificationManager.hasNoOperations()) {\n        notificationManager.updateActionProgressStatus(operationInfo);\n      } else {\n        notificationManager.tryHideActionProgress();\n      }\n    }\n  }, {\n    key: \"completeSingleOperationWithError\",\n    value: function completeSingleOperationWithError(operationInfo, errorInfo) {\n      var notificationManager = this._getNotificationManager(operationInfo);\n\n      notificationManager.completeSingleOperationWithError(operationInfo, errorInfo);\n\n      this._showPopupError(errorInfo);\n    }\n  }, {\n    key: \"addOperationDetailsError\",\n    value: function addOperationDetailsError(operationInfo, errorInfo) {\n      var notificationManager = this._getNotificationManager(operationInfo);\n\n      notificationManager.addOperationDetailsError(operationInfo, errorInfo);\n\n      this._showPopupError(errorInfo);\n    }\n  }, {\n    key: \"_hideProgressPanel\",\n    value: function _hideProgressPanel() {\n      var _this4 = this;\n\n      setTimeout(function () {\n        return _this4._progressDrawer.hide();\n      });\n    }\n  }, {\n    key: \"_isSmallScreen\",\n    value: function _isSmallScreen() {\n      if (!hasWindow()) {\n        return false;\n      }\n\n      return getWidth(window) <= ADAPTIVE_STATE_SCREEN_WIDTH;\n    }\n  }, {\n    key: \"_dimensionChanged\",\n    value: function _dimensionChanged(dimension) {\n      if (!(dimension && \"height\" === dimension)) {\n        this._checkAdaptiveState();\n      }\n    }\n  }, {\n    key: \"_checkAdaptiveState\",\n    value: function _checkAdaptiveState() {\n      var oldState = this._isInAdaptiveState;\n      this._isInAdaptiveState = this._isSmallScreen();\n\n      if (oldState !== this._isInAdaptiveState && this._progressDrawer) {\n        var notificationManager = this._getNotificationManager();\n\n        if (notificationManager.handleDimensionChanged()) {\n          var options = this._getProgressDrawerAdaptiveOptions();\n\n          this._progressDrawer.option(options);\n        }\n      }\n    }\n  }, {\n    key: \"_getProgressDrawerAdaptiveOptions\",\n    value: function _getProgressDrawerAdaptiveOptions() {\n      if (this._isInAdaptiveState) {\n        return {\n          openedStateMode: \"overlap\",\n          shading: true,\n          closeOnOutsideClick: true\n        };\n      } else {\n        return {\n          openedStateMode: \"shrink\",\n          shading: false,\n          closeOnOutsideClick: false\n        };\n      }\n    }\n  }, {\n    key: \"_ensureProgressPanelCreated\",\n    value: function _ensureProgressPanelCreated(container) {\n      var _this5 = this;\n\n      var notificationManager = this._getNotificationManager();\n\n      notificationManager.ensureProgressPanelCreated(container, {\n        onOperationCanceled: function onOperationCanceled(_ref) {\n          var info = _ref.info;\n          return _this5._raiseOperationCanceled(info);\n        },\n        onOperationItemCanceled: function onOperationItemCanceled(_ref2) {\n          var item = _ref2.item,\n              itemIndex = _ref2.itemIndex;\n          return _this5._raiseOperationItemCanceled(item, itemIndex);\n        },\n        onPanelClosed: function onPanelClosed() {\n          return _this5._hideProgressPanel();\n        }\n      });\n    }\n  }, {\n    key: \"_getProgressManagerComponent\",\n    value: function _getProgressManagerComponent() {\n      return NotificationManager;\n    }\n  }, {\n    key: \"_isProgressDrawerDisabled\",\n    value: function _isProgressDrawerDisabled() {\n      return !this.option(\"showProgressPanel\");\n    }\n  }, {\n    key: \"_isProgressDrawerOpened\",\n    value: function _isProgressDrawerOpened() {\n      return this._progressDrawer.option(\"opened\");\n    }\n  }, {\n    key: \"_hidePopup\",\n    value: function _hidePopup(forceHide) {\n      if (!this.option(\"showNotificationPopup\") && !forceHide) {\n        return;\n      }\n\n      this._getNotificationPopup().hide();\n    }\n  }, {\n    key: \"_showPopup\",\n    value: function _showPopup(content, errorMode) {\n      if (this._isProgressDrawerOpened() || !this.option(\"showNotificationPopup\")) {\n        return;\n      }\n\n      this._getNotificationPopup().$wrapper().toggleClass(FILE_MANAGER_NOTIFICATION_POPUP_ERROR_CLASS, !!errorMode);\n\n      this._getNotificationPopup().option(\"contentTemplate\", content);\n\n      if (!this._getNotificationPopup().option(\"visible\")) {\n        this._getNotificationPopup().show();\n      }\n    }\n  }, {\n    key: \"_showPopupError\",\n    value: function _showPopupError(errorInfo) {\n      if (!this.option(\"showNotificationPopup\")) {\n        return;\n      }\n\n      var notificationManager = this._getNotificationManager();\n\n      var $content = $(\"<div>\");\n      var $message = $(\"<div>\").addClass(FILE_MANAGER_NOTIFICATION_COMMON_CLASS).text(errorInfo.commonErrorText);\n      var $separator = $(\"<div>\").addClass(FILE_MANAGER_NOTIFICATION_SEPARATOR_CLASS);\n      $(\"<div>\").appendTo($separator);\n      var $details = $(\"<div>\").addClass(FILE_MANAGER_NOTIFICATION_DETAILS_CLASS);\n\n      if (errorInfo.item) {\n        notificationManager.createErrorDetailsProgressBox($details, errorInfo.item, errorInfo.detailErrorText);\n      } else {\n        $message.addClass(FILE_MANAGER_NOTIFICATION_COMMON_NO_ITEM_CLASS);\n        notificationManager.renderError($details, errorInfo.detailErrorText);\n      }\n\n      $content.append($message, $separator, $details);\n\n      this._showPopup($content, true);\n    }\n  }, {\n    key: \"_getNotificationPopup\",\n    value: function _getNotificationPopup() {\n      if (!this._notificationPopup) {\n        var $popup = $(\"<div>\").addClass(FILE_MANAGER_NOTIFICATION_POPUP_CLASS).appendTo(this.$element());\n        this._notificationPopup = this._createComponent($popup, Popup, {\n          container: this.$element(),\n          width: \"auto\",\n          height: \"auto\",\n          showTitle: false,\n          dragEnabled: false,\n          shading: false,\n          visible: false,\n          closeOnOutsideClick: true,\n          animation: {\n            duration: 0\n          },\n          position: {\n            my: \"right top\",\n            at: \"right top\",\n            of: this.option(\"positionTarget\"),\n            offset: \"-10 -5\"\n          }\n        });\n      }\n\n      return this._notificationPopup;\n    }\n  }, {\n    key: \"_raiseActionProgress\",\n    value: function _raiseActionProgress(message, status) {\n      this._actions.onActionProgress({\n        message: message,\n        status: status\n      });\n    }\n  }, {\n    key: \"_raiseOperationCanceled\",\n    value: function _raiseOperationCanceled(info) {\n      this._actions.onOperationCanceled({\n        info: info\n      });\n    }\n  }, {\n    key: \"_raiseOperationItemCanceled\",\n    value: function _raiseOperationItemCanceled(item, index) {\n      this._actions.onOperationItemCanceled({\n        item: item,\n        itemIndex: index\n      });\n    }\n  }, {\n    key: \"_initActions\",\n    value: function _initActions() {\n      this._actions = {\n        onActionProgress: this._createActionByOption(\"onActionProgress\"),\n        onOperationCanceled: this._createActionByOption(\"onOperationCanceled\"),\n        onOperationItemCanceled: this._createActionByOption(\"onOperationItemCanceled\")\n      };\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function _getDefaultOptions() {\n      return extend(_get(_getPrototypeOf(FileManagerNotificationControl.prototype), \"_getDefaultOptions\", this).call(this), {\n        progressPanelContainer: null,\n        contentTemplate: null,\n        onActionProgress: null,\n        onOperationCanceled: null,\n        onOperationItemCanceled: null,\n        showProgressPanel: true,\n        showNotificationPopup: true\n      });\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function _optionChanged(args) {\n      var name = args.name;\n\n      switch (name) {\n        case \"progressPanelContainer\":\n        case \"contentTemplate\":\n          break;\n\n        case \"showProgressPanel\":\n          this._setNotificationManager();\n\n          this._getNotificationManager().updateActionProgressStatus();\n\n          if (!args.value) {\n            this._hideProgressPanel();\n\n            this._clearManagerMap();\n          }\n\n          this._progressDrawer.repaint();\n\n          break;\n\n        case \"showNotificationPopup\":\n          if (!args.value) {\n            this._hidePopup(true);\n          }\n\n          break;\n\n        case \"onActionProgress\":\n        case \"onOperationCanceled\":\n        case \"onOperationItemCanceled\":\n          this._actions[name] = this._createActionByOption(name);\n          break;\n\n        default:\n          _get(_getPrototypeOf(FileManagerNotificationControl.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }]);\n\n  return FileManagerNotificationControl;\n}(Widget);\n\nexport { FileManagerNotificationControl as default };","map":null,"metadata":{},"sourceType":"module"}