{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/pivot_grid/ui.pivot_grid.headers_area.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { setWidth, setHeight } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport { isDefined } from \"../../core/utils/type\";\nimport { inArray } from \"../../core/utils/array\";\nimport { each } from \"../../core/utils/iterator\";\nimport { AreaItem } from \"./ui.pivot_grid.area_item\";\nvar PIVOTGRID_AREA_CLASS = \"dx-pivotgrid-area\";\nvar PIVOTGRID_AREA_COLUMN_CLASS = \"dx-pivotgrid-horizontal-headers\";\nvar PIVOTGRID_AREA_ROW_CLASS = \"dx-pivotgrid-vertical-headers\";\nvar PIVOTGRID_TOTAL_CLASS = \"dx-total\";\nvar PIVOTGRID_GRAND_TOTAL_CLASS = \"dx-grandtotal\";\nvar PIVOTGRID_ROW_TOTAL_CLASS = \"dx-row-total\";\nvar PIVOTGRID_EXPANDED_CLASS = \"dx-pivotgrid-expanded\";\nvar PIVOTGRID_COLLAPSED_CLASS = \"dx-pivotgrid-collapsed\";\nvar PIVOTGRID_LAST_CELL_CLASS = \"dx-last-cell\";\nvar PIVOTGRID_VERTICAL_SCROLL_CLASS = \"dx-vertical-scroll\";\nvar PIVOTGRID_EXPAND_BORDER = \"dx-expand-border\";\n\nfunction getCellPath(tableElement, cell) {\n  if (cell) {\n    var data = tableElement.data().data;\n    var rowIndex = cell.parentNode.rowIndex;\n    var cellIndex = cell.cellIndex;\n    return data[rowIndex] && data[rowIndex][cellIndex] && data[rowIndex][cellIndex].path;\n  }\n}\n\nexport var HorizontalHeadersArea = AreaItem.inherit({\n  ctor: function ctor(component) {\n    this.callBase(component);\n    this._scrollBarWidth = 0;\n  },\n  _getAreaName: function _getAreaName() {\n    return \"column\";\n  },\n  _getAreaClassName: function _getAreaClassName() {\n    return PIVOTGRID_AREA_COLUMN_CLASS;\n  },\n  _createGroupElement: function _createGroupElement() {\n    return $(\"<div>\").addClass(this._getAreaClassName()).addClass(PIVOTGRID_AREA_CLASS);\n  },\n  _applyCustomStyles: function _applyCustomStyles(options) {\n    var cssArray = options.cssArray;\n    var cell = options.cell;\n    var rowsCount = options.rowsCount;\n    var classArray = options.classArray;\n\n    if (options.cellIndex === options.cellsCount - 1) {\n      cssArray.push((options.rtlEnabled ? \"border-left:\" : \"border-right:\") + \"0px\");\n    }\n\n    if (cell.rowspan === rowsCount - options.rowIndex || options.rowIndex + 1 === rowsCount) {\n      cssArray.push(\"border-bottom-width:0px\");\n    }\n\n    if (\"T\" === cell.type || \"GT\" === cell.type) {\n      classArray.push(PIVOTGRID_ROW_TOTAL_CLASS);\n    }\n\n    if (\"T\" === options.cell.type) {\n      classArray.push(PIVOTGRID_TOTAL_CLASS);\n    }\n\n    if (\"GT\" === options.cell.type) {\n      classArray.push(PIVOTGRID_GRAND_TOTAL_CLASS);\n    }\n\n    if (isDefined(cell.expanded)) {\n      classArray.push(cell.expanded ? PIVOTGRID_EXPANDED_CLASS : PIVOTGRID_COLLAPSED_CLASS);\n    }\n\n    this.callBase(options);\n  },\n  _getMainElementMarkup: function _getMainElementMarkup() {\n    return \"<thead class='\" + this._getAreaClassName() + \"'>\";\n  },\n  _getCloseMainElementMarkup: function _getCloseMainElementMarkup() {\n    return \"</thead>\";\n  },\n  setVirtualContentParams: function setVirtualContentParams(params) {\n    this.callBase(params);\n\n    this._setTableCss({\n      left: params.left,\n      top: 0\n    });\n\n    this._virtualContentWidth = params.width;\n  },\n  hasScroll: function hasScroll() {\n    var tableWidth = this._virtualContent ? this._virtualContentWidth : this._tableWidth;\n    var groupWidth = this.getGroupWidth();\n\n    if (groupWidth && tableWidth) {\n      return tableWidth - groupWidth >= 1;\n    }\n\n    return false;\n  },\n  renderScrollable: function renderScrollable() {\n    this._groupElement.dxScrollable({\n      useNative: false,\n      useSimulatedScrollbar: false,\n      showScrollbar: \"never\",\n      bounceEnabled: false,\n      direction: \"horizontal\",\n      updateManually: true\n    });\n  },\n  processScrollBarSpacing: function processScrollBarSpacing(scrollBarWidth) {\n    var groupAlignment = this.option(\"rtlEnabled\") ? \"right\" : \"left\";\n    var groupWidth = this.getGroupWidth();\n\n    if (groupWidth) {\n      this.setGroupWidth(groupWidth - scrollBarWidth);\n    }\n\n    if (this._scrollBarWidth) {\n      this._groupElement.next().remove();\n    }\n\n    this._groupElement.toggleClass(PIVOTGRID_VERTICAL_SCROLL_CLASS, scrollBarWidth > 0);\n\n    setWidth(this._groupElement.css(\"float\", groupAlignment), this.getGroupHeight());\n    this._scrollBarWidth = scrollBarWidth;\n  },\n  getScrollPath: function getScrollPath(offset) {\n    var tableElement = this.tableElement();\n    var cell;\n    offset -= parseInt(tableElement[0].style.left, 10) || 0;\n    each(tableElement.find(\"td\"), function (_, td) {\n      if (1 === td.colSpan && td.offsetLeft <= offset && td.offsetWidth + td.offsetLeft > offset) {\n        cell = td;\n        return false;\n      }\n    });\n    return getCellPath(tableElement, cell);\n  },\n  _moveFakeTable: function _moveFakeTable(scrollPos) {\n    this._moveFakeTableHorizontally(scrollPos);\n\n    this.callBase();\n  }\n});\nexport var VerticalHeadersArea = HorizontalHeadersArea.inherit({\n  _getAreaClassName: function _getAreaClassName() {\n    return PIVOTGRID_AREA_ROW_CLASS;\n  },\n  _applyCustomStyles: function _applyCustomStyles(options) {\n    this.callBase(options);\n\n    if (options.cellIndex === options.cellsCount - 1) {\n      options.classArray.push(PIVOTGRID_LAST_CELL_CLASS);\n    }\n\n    if (options.rowIndex === options.rowsCount - 1) {\n      options.cssArray.push(\"border-bottom: 0px\");\n    }\n\n    if (options.cell.isWhiteSpace) {\n      options.classArray.push(\"dx-white-space-column\");\n    }\n  },\n  _getAreaName: function _getAreaName() {\n    return \"row\";\n  },\n  setVirtualContentParams: function setVirtualContentParams(params) {\n    this.callBase(params);\n\n    this._setTableCss({\n      top: params.top,\n      left: 0\n    });\n\n    this._virtualContentHeight = params.height;\n  },\n  hasScroll: function hasScroll() {\n    var tableHeight = this._virtualContent ? this._virtualContentHeight : this._tableHeight;\n    var groupHeight = this.getGroupHeight();\n\n    if (groupHeight && tableHeight) {\n      return tableHeight - groupHeight >= 1;\n    }\n\n    return false;\n  },\n  renderScrollable: function renderScrollable() {\n    this._groupElement.dxScrollable({\n      useNative: false,\n      useSimulatedScrollbar: false,\n      showScrollbar: \"never\",\n      bounceEnabled: false,\n      direction: \"vertical\",\n      updateManually: true\n    });\n  },\n  processScrollBarSpacing: function processScrollBarSpacing(scrollBarWidth) {\n    var groupHeight = this.getGroupHeight();\n\n    if (groupHeight) {\n      this.setGroupHeight(groupHeight - scrollBarWidth);\n    }\n\n    if (this._scrollBarWidth) {\n      this._groupElement.next().remove();\n    }\n\n    if (scrollBarWidth) {\n      var $div = $(\"<div>\");\n      setWidth($div, \"100%\");\n      setHeight($div, scrollBarWidth - 1);\n\n      this._groupElement.after($div);\n    }\n\n    this._scrollBarWidth = scrollBarWidth;\n  },\n  getScrollPath: function getScrollPath(offset) {\n    var tableElement = this.tableElement();\n    var cell;\n    offset -= parseInt(tableElement[0].style.top, 10) || 0;\n    each(tableElement.find(\"tr\"), function (_, tr) {\n      var td = tr.childNodes[tr.childNodes.length - 1];\n\n      if (td && 1 === td.rowSpan && td.offsetTop <= offset && td.offsetHeight + td.offsetTop > offset) {\n        cell = td;\n        return false;\n      }\n    });\n    return getCellPath(tableElement, cell);\n  },\n  _moveFakeTable: function _moveFakeTable(scrollPos) {\n    this._moveFakeTableTop(scrollPos);\n\n    this.callBase();\n  },\n  _getRowClassNames: function _getRowClassNames(rowIndex, cell, rowClassNames) {\n    if (0 !== rowIndex & cell.expanded && -1 === inArray(PIVOTGRID_EXPAND_BORDER, rowClassNames)) {\n      rowClassNames.push(PIVOTGRID_EXPAND_BORDER);\n    }\n  },\n  _getMainElementMarkup: function _getMainElementMarkup() {\n    return \"<tbody class='\" + this._getAreaClassName() + \"'>\";\n  },\n  _getCloseMainElementMarkup: function _getCloseMainElementMarkup() {\n    return \"</tbody>\";\n  },\n  updateColspans: function updateColspans(columnCount) {\n    var rows = this.tableElement()[0].rows;\n    var columnOffset = 0;\n    var columnOffsetResetIndexes = [];\n\n    if (this.getColumnsCount() - columnCount > 0) {\n      return;\n    }\n\n    for (var i = 0; i < rows.length; i++) {\n      for (var j = 0; j < rows[i].cells.length; j++) {\n        var cell = rows[i].cells[j];\n        var rowSpan = cell.rowSpan;\n\n        if (columnOffsetResetIndexes[i]) {\n          columnOffset -= columnOffsetResetIndexes[i];\n          columnOffsetResetIndexes[i] = 0;\n        }\n\n        var diff = columnCount - (columnOffset + cell.colSpan);\n\n        if (j === rows[i].cells.length - 1 && diff > 0) {\n          cell.colSpan = cell.colSpan + diff;\n        }\n\n        columnOffsetResetIndexes[i + rowSpan] = (columnOffsetResetIndexes[i + rowSpan] || 0) + cell.colSpan;\n        columnOffset += cell.colSpan;\n      }\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"module"}