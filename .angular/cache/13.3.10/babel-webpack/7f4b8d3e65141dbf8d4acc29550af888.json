{"ast":null,"code":"import _defineProperty from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/tooltip_strategies/tooltipStrategyBase.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport Button from \"../../button\";\nimport { FunctionTemplate } from \"../../../core/templates/function_template\";\nimport $ from \"../../../core/renderer\";\nimport List from \"../../list/ui.list.edit\";\nvar TOOLTIP_APPOINTMENT_ITEM = \"dx-tooltip-appointment-item\";\nvar TOOLTIP_APPOINTMENT_ITEM_CONTENT = TOOLTIP_APPOINTMENT_ITEM + \"-content\";\nvar TOOLTIP_APPOINTMENT_ITEM_CONTENT_SUBJECT = TOOLTIP_APPOINTMENT_ITEM + \"-content-subject\";\nvar TOOLTIP_APPOINTMENT_ITEM_CONTENT_DATE = TOOLTIP_APPOINTMENT_ITEM + \"-content-date\";\nvar TOOLTIP_APPOINTMENT_ITEM_MARKER = TOOLTIP_APPOINTMENT_ITEM + \"-marker\";\nvar TOOLTIP_APPOINTMENT_ITEM_MARKER_BODY = TOOLTIP_APPOINTMENT_ITEM + \"-marker-body\";\nvar TOOLTIP_APPOINTMENT_ITEM_DELETE_BUTTON_CONTAINER = TOOLTIP_APPOINTMENT_ITEM + \"-delete-button-container\";\nvar TOOLTIP_APPOINTMENT_ITEM_DELETE_BUTTON = TOOLTIP_APPOINTMENT_ITEM + \"-delete-button\";\nexport var TooltipStrategyBase = /*#__PURE__*/function () {\n  function TooltipStrategyBase(options) {\n    _classCallCheck(this, TooltipStrategyBase);\n\n    this._tooltip = null;\n    this._options = options;\n    this._extraOptions = null;\n  }\n\n  _createClass(TooltipStrategyBase, [{\n    key: \"show\",\n    value: function show(target, dataList, extraOptions) {\n      if (this._canShowTooltip(dataList)) {\n        this.hide();\n        this._extraOptions = extraOptions;\n\n        this._showCore(target, dataList);\n      }\n    }\n  }, {\n    key: \"_showCore\",\n    value: function _showCore(target, dataList) {\n      if (!this._tooltip) {\n        this._tooltip = this._createTooltip(target, dataList);\n      } else {\n        this._shouldUseTarget() && this._tooltip.option(\"target\", target);\n\n        this._list.option(\"dataSource\", dataList);\n      }\n\n      this._prepareBeforeVisibleChanged(dataList);\n\n      this._tooltip.option(\"visible\", true);\n    }\n  }, {\n    key: \"_prepareBeforeVisibleChanged\",\n    value: function _prepareBeforeVisibleChanged(dataList) {}\n  }, {\n    key: \"_getContentTemplate\",\n    value: function _getContentTemplate(dataList) {\n      var _this = this;\n\n      return function (container) {\n        var listElement = $(\"<div>\");\n        $(container).append(listElement);\n        _this._list = _this._createList(listElement, dataList);\n      };\n    }\n  }, {\n    key: \"isAlreadyShown\",\n    value: function isAlreadyShown(target) {\n      if (this._tooltip && this._tooltip.option(\"visible\")) {\n        return this._tooltip.option(\"target\")[0] === target[0];\n      }\n    }\n  }, {\n    key: \"_onShown\",\n    value: function _onShown() {\n      this._list.option(\"focusStateEnabled\", this._extraOptions.focusStateEnabled);\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {}\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      if (this._tooltip) {\n        this._tooltip.option(\"visible\", false);\n      }\n    }\n  }, {\n    key: \"_shouldUseTarget\",\n    value: function _shouldUseTarget() {\n      return true;\n    }\n  }, {\n    key: \"_createTooltip\",\n    value: function _createTooltip() {}\n  }, {\n    key: \"_canShowTooltip\",\n    value: function _canShowTooltip(dataList) {\n      if (!dataList.length) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"_createListOption\",\n    value: function _createListOption(dataList) {\n      var _this2 = this;\n\n      return {\n        dataSource: dataList,\n        onContentReady: this._onListRender.bind(this),\n        onItemClick: function onItemClick(e) {\n          return _this2._onListItemClick(e);\n        },\n        itemTemplate: function itemTemplate(item, index) {\n          return _this2._renderTemplate(item.appointment, item.targetedAppointment, index, item.color);\n        },\n        _swipeEnabled: false,\n        pageLoadMode: \"scrollBottom\"\n      };\n    }\n  }, {\n    key: \"_onListRender\",\n    value: function _onListRender() {}\n  }, {\n    key: \"_createTooltipElement\",\n    value: function _createTooltipElement(wrapperClass) {\n      return $(\"<div>\").appendTo(this._options.container).addClass(wrapperClass);\n    }\n  }, {\n    key: \"_createList\",\n    value: function _createList(listElement, dataList) {\n      return this._options.createComponent(listElement, List, this._createListOption(dataList));\n    }\n  }, {\n    key: \"_renderTemplate\",\n    value: function _renderTemplate(appointment, targetedAppointment, index, color) {\n      var itemListContent = this._createItemListContent(appointment, targetedAppointment, color);\n\n      this._options.addDefaultTemplates(_defineProperty({}, this._getItemListTemplateName(), new FunctionTemplate(function (options) {\n        var $container = $(options.container);\n        $container.append(itemListContent);\n        return $container;\n      })));\n\n      var template = this._options.getAppointmentTemplate(this._getItemListTemplateName() + \"Template\");\n\n      return this._createFunctionTemplate(template, appointment, targetedAppointment, index);\n    }\n  }, {\n    key: \"_createFunctionTemplate\",\n    value: function _createFunctionTemplate(template, data, targetData, index) {\n      var isEmptyDropDownAppointmentTemplate = this._isEmptyDropDownAppointmentTemplate();\n\n      return new FunctionTemplate(function (options) {\n        return template.render({\n          model: isEmptyDropDownAppointmentTemplate ? {\n            appointmentData: data,\n            targetedAppointmentData: targetData\n          } : data,\n          container: options.container,\n          index: index\n        });\n      });\n    }\n  }, {\n    key: \"_getItemListTemplateName\",\n    value: function _getItemListTemplateName() {\n      return this._isEmptyDropDownAppointmentTemplate() ? \"appointmentTooltip\" : \"dropDownAppointment\";\n    }\n  }, {\n    key: \"_isEmptyDropDownAppointmentTemplate\",\n    value: function _isEmptyDropDownAppointmentTemplate() {\n      return !this._extraOptions.dropDownAppointmentTemplate || \"dropDownAppointment\" === this._extraOptions.dropDownAppointmentTemplate;\n    }\n  }, {\n    key: \"_onListItemClick\",\n    value: function _onListItemClick(e) {\n      this.hide();\n      this._extraOptions.clickEvent && this._extraOptions.clickEvent(e);\n\n      this._options.showAppointmentPopup(e.itemData.appointment, false, e.itemData.targetedAppointment);\n    }\n  }, {\n    key: \"_createItemListContent\",\n    value: function _createItemListContent(appointment, targetedAppointment, color) {\n      var editing = this._extraOptions.editing;\n      var $itemElement = $(\"<div>\").addClass(TOOLTIP_APPOINTMENT_ITEM);\n      $itemElement.append(this._createItemListMarker(color));\n      $itemElement.append(this._createItemListInfo(this._options.createFormattedDateText(appointment, targetedAppointment)));\n\n      var disabled = this._options.getAppointmentDisabled(appointment);\n\n      if (!disabled && (editing && true === editing.allowDeleting || true === editing)) {\n        $itemElement.append(this._createDeleteButton(appointment, targetedAppointment));\n      }\n\n      return $itemElement;\n    }\n  }, {\n    key: \"_createItemListMarker\",\n    value: function _createItemListMarker(color) {\n      var $marker = $(\"<div>\").addClass(TOOLTIP_APPOINTMENT_ITEM_MARKER);\n      var $markerBody = $(\"<div>\").addClass(TOOLTIP_APPOINTMENT_ITEM_MARKER_BODY);\n      $marker.append($markerBody);\n      color && color.done(function (value) {\n        return $markerBody.css(\"background\", value);\n      });\n      return $marker;\n    }\n  }, {\n    key: \"_createItemListInfo\",\n    value: function _createItemListInfo(object) {\n      var result = $(\"<div>\").addClass(TOOLTIP_APPOINTMENT_ITEM_CONTENT);\n      var $title = $(\"<div>\").addClass(TOOLTIP_APPOINTMENT_ITEM_CONTENT_SUBJECT).text(object.text);\n      var $date = $(\"<div>\").addClass(TOOLTIP_APPOINTMENT_ITEM_CONTENT_DATE).text(object.formatDate);\n      return result.append($title).append($date);\n    }\n  }, {\n    key: \"_createDeleteButton\",\n    value: function _createDeleteButton(appointment, targetedAppointment) {\n      var _this3 = this;\n\n      var $container = $(\"<div>\").addClass(TOOLTIP_APPOINTMENT_ITEM_DELETE_BUTTON_CONTAINER);\n      var $deleteButton = $(\"<div>\").addClass(TOOLTIP_APPOINTMENT_ITEM_DELETE_BUTTON);\n      $container.append($deleteButton);\n\n      this._options.createComponent($deleteButton, Button, {\n        icon: \"trash\",\n        stylingMode: \"text\",\n        onClick: function onClick(e) {\n          _this3.hide();\n\n          e.event.stopPropagation();\n\n          _this3._options.checkAndDeleteAppointment(appointment, targetedAppointment);\n        }\n      });\n\n      return $container;\n    }\n  }]);\n\n  return TooltipStrategyBase;\n}();","map":null,"metadata":{},"sourceType":"module"}