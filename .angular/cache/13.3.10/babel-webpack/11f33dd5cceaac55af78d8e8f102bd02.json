{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.adaptivity.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getWidth } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { addNamespace } from \"../../events/utils/index\";\nimport { name as clickEventName } from \"../../events/click\";\nimport { isDefined, isString } from \"../../core/utils/type\";\nimport Guid from \"../../core/guid\";\nimport modules from \"./ui.grid_core.modules\";\nimport Form from \"../form\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nimport { isMaterial } from \"../themes\";\nimport { getWindow } from \"../../core/utils/window\";\nimport { equalByValue } from \"../../core/utils/common\";\nimport { each } from \"../../core/utils/iterator\";\nimport { extend } from \"../../core/utils/extend\";\nimport { Deferred, when } from \"../../core/utils/deferred\";\nimport messageLocalization from \"../../localization/message\";\nvar COLUMN_HEADERS_VIEW = \"columnHeadersView\";\nvar ROWS_VIEW = \"rowsView\";\nvar FOOTER_VIEW = \"footerView\";\nvar COLUMN_VIEWS = [COLUMN_HEADERS_VIEW, ROWS_VIEW, FOOTER_VIEW];\nvar ADAPTIVE_NAMESPACE = \"dxDataGridAdaptivity\";\nvar HIDDEN_COLUMNS_WIDTH = \"adaptiveHidden\";\nvar ADAPTIVE_ROW_TYPE = \"detailAdaptive\";\nvar FORM_ITEM_CONTENT_CLASS = \"dx-field-item-content\";\nvar FORM_ITEM_MODIFIED = \"dx-item-modified\";\nvar HIDDEN_COLUMN_CLASS = \"hidden-column\";\nvar ADAPTIVE_COLUMN_BUTTON_CLASS = \"adaptive-more\";\nvar ADAPTIVE_COLUMN_NAME_CLASS = \"dx-command-adaptive\";\nvar COMMAND_ADAPTIVE_HIDDEN_CLASS = \"dx-command-adaptive-hidden\";\nvar ADAPTIVE_DETAIL_ROW_CLASS = \"dx-adaptive-detail-row\";\nvar ADAPTIVE_ITEM_TEXT_CLASS = \"dx-adaptive-item-text\";\nvar MASTER_DETAIL_CELL_CLASS = \"dx-master-detail-cell\";\nvar LAST_DATA_CELL_CLASS = \"dx-last-data-cell\";\nvar ADAPTIVE_COLUMN_NAME = \"adaptive\";\nvar EDIT_MODE_BATCH = \"batch\";\nvar EDIT_MODE_ROW = \"row\";\nvar EDIT_MODE_FORM = \"form\";\nvar EDIT_MODE_POPUP = \"popup\";\nvar REVERT_TOOLTIP_CLASS = \"revert-tooltip\";\nvar GROUP_CELL_CLASS = \"dx-group-cell\";\nvar GROUP_ROW_CLASS = \"dx-group-row\";\nvar EXPAND_ARIA_NAME = \"dxDataGrid-ariaAdaptiveExpand\";\nvar COLLAPSE_ARIA_NAME = \"dxDataGrid-ariaAdaptiveCollapse\";\nvar LEGACY_SCROLLING_MODE = \"scrolling.legacyMode\";\n\nfunction getColumnId(that, column) {\n  return that._columnsController.getColumnId(column);\n}\n\nfunction getDataCellElements($row) {\n  return $row.find(\"td:not(.dx-datagrid-hidden-column):not([class*='dx-command-'])\");\n}\n\nfunction adaptiveCellTemplate(container, options) {\n  var $adaptiveColumnButton;\n  var $container = $(container);\n  var adaptiveColumnsController = options.component.getController(\"adaptiveColumns\");\n\n  if (\"data\" === options.rowType) {\n    $adaptiveColumnButton = $(\"<span>\").addClass(adaptiveColumnsController.addWidgetPrefix(ADAPTIVE_COLUMN_BUTTON_CLASS));\n    eventsEngine.on($adaptiveColumnButton, addNamespace(clickEventName, ADAPTIVE_NAMESPACE), adaptiveColumnsController.createAction(function () {\n      adaptiveColumnsController.toggleExpandAdaptiveDetailRow(options.key);\n    }));\n    $adaptiveColumnButton.appendTo($container);\n  } else {\n    gridCoreUtils.setEmptyText($container);\n  }\n}\n\nvar AdaptiveColumnsController = modules.ViewController.inherit({\n  _isRowEditMode: function _isRowEditMode() {\n    var editMode = this._getEditMode();\n\n    return editMode === EDIT_MODE_ROW;\n  },\n  _isItemModified: function _isItemModified(item, cellOptions) {\n    var columnIndex = this._columnsController.getVisibleIndex(item.column.index);\n\n    var rowIndex = this._dataController.getRowIndexByKey(cellOptions.key);\n\n    var row = this._dataController.items()[rowIndex + 1];\n\n    return row && row.modifiedValues && isDefined(row.modifiedValues[columnIndex]);\n  },\n  _renderFormViewTemplate: function _renderFormViewTemplate(item, cellOptions, $container) {\n    var column = item.column;\n    var focusAction = this.createAction(function () {\n      eventsEngine.trigger($container, clickEventName);\n    });\n    var value = column.calculateCellValue(cellOptions.data);\n    var displayValue = gridCoreUtils.getDisplayValue(column, value, cellOptions.data, cellOptions.rowType);\n    var text = gridCoreUtils.formatValue(displayValue, column);\n\n    var isCellOrBatchEditMode = this._editingController.isCellOrBatchEditMode();\n\n    var rowsView = this._rowsView;\n\n    if (column.allowEditing && this.getController(\"keyboardNavigation\").isKeyboardEnabled()) {\n      $container.attr(\"tabIndex\", this.option(\"tabIndex\"));\n\n      if (isCellOrBatchEditMode) {\n        eventsEngine.off($container, \"focus\", focusAction);\n        eventsEngine.on($container, \"focus\", focusAction);\n      }\n    }\n\n    if (column.cellTemplate) {\n      var templateOptions = extend({}, cellOptions, {\n        value: value,\n        displayValue: displayValue,\n        text: text,\n        column: column\n      });\n      var isDomElement = !!$container.closest(getWindow().document).length;\n      rowsView.renderTemplate($container, column.cellTemplate, templateOptions, isDomElement).done(function () {\n        rowsView._cellPrepared($container, cellOptions);\n      });\n    } else {\n      var container = $container.get(0);\n\n      if (column.encodeHtml) {\n        container.textContent = text;\n      } else {\n        container.innerHTML = text;\n      }\n\n      $container.addClass(ADAPTIVE_ITEM_TEXT_CLASS);\n\n      if (!isDefined(text) || \"\" === text) {\n        $container.html(\"&nbsp;\");\n      }\n\n      if (!this._isRowEditMode()) {\n        if (this._isItemModified(item, cellOptions)) {\n          $container.addClass(FORM_ITEM_MODIFIED);\n        }\n      }\n\n      rowsView._cellPrepared($container, cellOptions);\n    }\n  },\n  _getTemplate: function _getTemplate(item, cellOptions) {\n    var that = this;\n    var column = item.column;\n    var editingController = this.getController(\"editing\");\n    return function (options, container) {\n      var $container = $(container);\n\n      var columnIndex = that._columnsController.getVisibleIndex(column.index);\n\n      var templateOptions = extend({}, cellOptions);\n\n      var renderFormTemplate = function renderFormTemplate() {\n        var isItemEdited = that._isItemEdited(item);\n\n        templateOptions.value = cellOptions.row.values[columnIndex];\n\n        if (isItemEdited || column.showEditorAlways) {\n          editingController.renderFormEditTemplate(templateOptions, item, options, $container, !isItemEdited);\n        } else {\n          templateOptions.column = column;\n          templateOptions.columnIndex = columnIndex;\n\n          that._renderFormViewTemplate(item, templateOptions, $container);\n        }\n      };\n\n      renderFormTemplate();\n      templateOptions.watch && templateOptions.watch(function () {\n        return {\n          isItemEdited: that._isItemEdited(item),\n          value: cellOptions.row.values[columnIndex]\n        };\n      }, function () {\n        $container.contents().remove();\n        $container.removeClass(ADAPTIVE_ITEM_TEXT_CLASS);\n        renderFormTemplate();\n      });\n    };\n  },\n  _isVisibleColumnsValid: function _isVisibleColumnsValid(visibleColumns) {\n    if (visibleColumns < 2) {\n      return false;\n    }\n\n    if (visibleColumns.length - function () {\n      var result = 0;\n\n      for (var j = 0; j < visibleColumns.length; j++) {\n        var visibleColumn = visibleColumns[j];\n\n        if (visibleColumn.command) {\n          result++;\n        }\n      }\n\n      return result;\n    }() <= 1) {\n      return false;\n    }\n\n    return true;\n  },\n  _calculatePercentWidths: function _calculatePercentWidths(widths, visibleColumns) {\n    var that = this;\n    var percentWidths = 0;\n    visibleColumns.forEach(function (item, index) {\n      if (widths[index] !== HIDDEN_COLUMNS_WIDTH) {\n        percentWidths += that._getItemPercentWidth(item);\n      }\n    });\n    return percentWidths;\n  },\n  _isPercentWidth: function _isPercentWidth(width) {\n    return isString(width) && \"%\" === width.slice(-1);\n  },\n  _isColumnHidden: function _isColumnHidden(column) {\n    return this._hiddenColumns.filter(function (hiddenColumn) {\n      return hiddenColumn.index === column.index;\n    }).length > 0;\n  },\n  _getAverageColumnsWidth: function _getAverageColumnsWidth(containerWidth, columns, columnsCanFit) {\n    var that = this;\n    var fixedColumnsWidth = 0;\n    var columnsWithoutFixedWidthCount = 0;\n    columns.forEach(function (column) {\n      if (!that._isColumnHidden(column)) {\n        var width = column.width;\n\n        if (isDefined(width) && !isNaN(parseFloat(width))) {\n          fixedColumnsWidth += that._isPercentWidth(width) ? that._calculatePercentWidth({\n            visibleIndex: column.visibleIndex,\n            columnsCount: columns.length,\n            columnsCanFit: columnsCanFit,\n            bestFitWidth: column.bestFitWidth,\n            columnWidth: width,\n            containerWidth: containerWidth\n          }) : parseFloat(width);\n        } else {\n          columnsWithoutFixedWidthCount++;\n        }\n      }\n    });\n    return (containerWidth - fixedColumnsWidth) / columnsWithoutFixedWidthCount;\n  },\n  _calculateColumnWidth: function _calculateColumnWidth(column, containerWidth, contentColumns, columnsCanFit) {\n    var columnId = getColumnId(this, column);\n\n    var widthOption = this._columnsController.columnOption(columnId, \"width\");\n\n    var bestFitWidth = this._columnsController.columnOption(columnId, \"bestFitWidth\");\n\n    var columnsCount = contentColumns.length;\n    var colWidth;\n\n    if (widthOption && \"auto\" !== widthOption) {\n      if (this._isPercentWidth(widthOption)) {\n        colWidth = this._calculatePercentWidth({\n          visibleIndex: column.visibleIndex,\n          columnsCount: columnsCount,\n          columnsCanFit: columnsCanFit,\n          bestFitWidth: bestFitWidth,\n          columnWidth: widthOption,\n          containerWidth: containerWidth\n        });\n      } else {\n        return parseFloat(widthOption);\n      }\n    } else {\n      var columnAutoWidth = this.option(\"columnAutoWidth\");\n      colWidth = columnAutoWidth || !!column.command ? bestFitWidth : this._getAverageColumnsWidth(containerWidth, contentColumns, columnsCanFit);\n    }\n\n    return colWidth;\n  },\n  _calculatePercentWidth: function _calculatePercentWidth(options) {\n    var columnFitted = options.visibleIndex < options.columnsCount - 1 && options.columnsCanFit;\n    var partialWidth = options.containerWidth * parseFloat(options.columnWidth) / 100;\n    var resultWidth = options.columnsCanFit && partialWidth < options.bestFitWidth ? options.bestFitWidth : partialWidth;\n    return columnFitted ? options.containerWidth * parseFloat(options.columnWidth) / 100 : resultWidth;\n  },\n  _getNotTruncatedColumnWidth: function _getNotTruncatedColumnWidth(column, containerWidth, contentColumns, columnsCanFit) {\n    var columnId = getColumnId(this, column);\n\n    var widthOption = this._columnsController.columnOption(columnId, \"width\");\n\n    var bestFitWidth = this._columnsController.columnOption(columnId, \"bestFitWidth\");\n\n    if (widthOption && \"auto\" !== widthOption && !this._isPercentWidth(widthOption)) {\n      return parseFloat(widthOption);\n    }\n\n    var colWidth = this._calculateColumnWidth(column, containerWidth, contentColumns, columnsCanFit);\n\n    return colWidth < bestFitWidth ? null : colWidth;\n  },\n  _getItemPercentWidth: function _getItemPercentWidth(item) {\n    var result = 0;\n\n    if (item.width && this._isPercentWidth(item.width)) {\n      result = parseFloat(item.width);\n    }\n\n    return result;\n  },\n  _getCommandColumnsWidth: function _getCommandColumnsWidth() {\n    var that = this;\n\n    var columns = that._columnsController.getVisibleColumns();\n\n    var colWidth = 0;\n    each(columns, function (index, column) {\n      if (column.index < 0 || column.command) {\n        colWidth += that._columnsController.columnOption(getColumnId(that, column), \"bestFitWidth\") || 0;\n      }\n    });\n    return colWidth;\n  },\n  _isItemEdited: function _isItemEdited(item) {\n    if (this.isFormOrPopupEditMode()) {\n      return false;\n    }\n\n    if (this._isRowEditMode()) {\n      var editRowKey = this.option(\"editing.editRowKey\");\n\n      if (equalByValue(editRowKey, this._dataController.adaptiveExpandedKey())) {\n        return true;\n      }\n    } else {\n      var rowIndex = this._dataController.getRowIndexByKey(this._dataController.adaptiveExpandedKey()) + 1;\n\n      var columnIndex = this._columnsController.getVisibleIndex(item.column.index);\n\n      return this._editingController.isEditCell(rowIndex, columnIndex);\n    }\n  },\n  _getFormItemsByHiddenColumns: function _getFormItemsByHiddenColumns(hiddenColumns) {\n    var items = [];\n    each(hiddenColumns, function (_, column) {\n      items.push({\n        column: column,\n        name: column.name,\n        dataField: column.dataField,\n        visibleIndex: column.visibleIndex\n      });\n    });\n    return items;\n  },\n  _getAdaptiveColumnVisibleIndex: function _getAdaptiveColumnVisibleIndex(visibleColumns) {\n    for (var i = 0; i < visibleColumns.length; i++) {\n      var column = visibleColumns[i];\n\n      if (column.command === ADAPTIVE_COLUMN_NAME) {\n        return i;\n      }\n    }\n  },\n  _hideAdaptiveColumn: function _hideAdaptiveColumn(resultWidths, visibleColumns) {\n    var visibleIndex = this._getAdaptiveColumnVisibleIndex(visibleColumns);\n\n    if (isDefined(visibleIndex)) {\n      resultWidths[visibleIndex] = HIDDEN_COLUMNS_WIDTH;\n\n      this._hideVisibleColumn({\n        isCommandColumn: true,\n        visibleIndex: visibleIndex\n      });\n    }\n  },\n  _showHiddenCellsInView: function _showHiddenCellsInView(_ref) {\n    var $cells = _ref.$cells,\n        isCommandColumn = _ref.isCommandColumn;\n    var cssClassNameToRemove = isCommandColumn ? COMMAND_ADAPTIVE_HIDDEN_CLASS : this.addWidgetPrefix(HIDDEN_COLUMN_CLASS);\n    $cells.removeClass(cssClassNameToRemove);\n  },\n  _showHiddenColumns: function _showHiddenColumns() {\n    for (var i = 0; i < COLUMN_VIEWS.length; i++) {\n      var view = this.getView(COLUMN_VIEWS[i]);\n\n      if (view && view.isVisible() && view.element()) {\n        var viewName = view.name;\n        var $hiddenCommandCells = view.element().find(\".\" + COMMAND_ADAPTIVE_HIDDEN_CLASS);\n\n        this._showHiddenCellsInView({\n          viewName: viewName,\n          $cells: $hiddenCommandCells,\n          isCommandColumn: true\n        });\n\n        var $hiddenCells = view.element().find(\".\" + this.addWidgetPrefix(HIDDEN_COLUMN_CLASS));\n\n        this._showHiddenCellsInView({\n          viewName: viewName,\n          $cells: $hiddenCells\n        });\n      }\n    }\n  },\n  _isCellValid: function _isCellValid($cell) {\n    return $cell && $cell.length && !$cell.hasClass(MASTER_DETAIL_CELL_CLASS) && !$cell.hasClass(GROUP_CELL_CLASS);\n  },\n  _hideVisibleColumn: function _hideVisibleColumn(_ref2) {\n    var isCommandColumn = _ref2.isCommandColumn,\n        visibleIndex = _ref2.visibleIndex;\n    var that = this;\n    COLUMN_VIEWS.forEach(function (viewName) {\n      var view = that.getView(viewName);\n      view && that._hideVisibleColumnInView({\n        view: view,\n        isCommandColumn: isCommandColumn,\n        visibleIndex: visibleIndex\n      });\n    });\n  },\n  _hideVisibleColumnInView: function _hideVisibleColumnInView(_ref3) {\n    var view = _ref3.view,\n        isCommandColumn = _ref3.isCommandColumn,\n        visibleIndex = _ref3.visibleIndex;\n    var viewName = view.name;\n    var $cellElement;\n\n    var column = this._columnsController.getVisibleColumns()[visibleIndex];\n\n    var editFormRowIndex = this._editingController && this._editingController.getEditFormRowIndex();\n\n    if (view && view.isVisible() && column) {\n      var rowsCount = view.getRowsCount();\n\n      var $rowElements = view._getRowElements();\n\n      for (var rowIndex = 0; rowIndex < rowsCount; rowIndex++) {\n        var cancelClassAdding = rowIndex === editFormRowIndex && viewName === ROWS_VIEW && \"popup\" !== this.option(\"editing.mode\");\n\n        if (!cancelClassAdding) {\n          var currentVisibleIndex = viewName === COLUMN_HEADERS_VIEW ? this._columnsController.getVisibleIndex(column.index, rowIndex) : visibleIndex;\n\n          if (currentVisibleIndex >= 0) {\n            var $rowElement = $rowElements.eq(rowIndex);\n            $cellElement = this._findCellElementInRow($rowElement, currentVisibleIndex);\n            this._isCellValid($cellElement) && this._hideVisibleCellInView({\n              viewName: viewName,\n              isCommandColumn: isCommandColumn,\n              $cell: $cellElement\n            });\n          }\n        }\n      }\n    }\n  },\n  _findCellElementInRow: function _findCellElementInRow($rowElement, visibleColumnIndex) {\n    var $rowCells = $rowElement.children();\n    var visibleIndex = visibleColumnIndex;\n    var cellIsInsideGroup = false;\n\n    if ($rowElement.hasClass(GROUP_ROW_CLASS)) {\n      var $groupCell = $rowElement.find(\".\".concat(GROUP_CELL_CLASS));\n      var colSpan = $groupCell.attr(\"colspan\");\n\n      if ($groupCell.length && isDefined(colSpan)) {\n        var groupCellLength = parseInt(colSpan);\n        var endGroupIndex = $groupCell.index() + groupCellLength - 1;\n\n        if (visibleColumnIndex > endGroupIndex) {\n          visibleIndex = visibleColumnIndex - groupCellLength + 1;\n        } else {\n          cellIsInsideGroup = true;\n        }\n      }\n    }\n\n    var $cellElement = !cellIsInsideGroup ? $rowCells.eq(visibleIndex) : void 0;\n    return $cellElement;\n  },\n  _hideVisibleCellInView: function _hideVisibleCellInView(_ref4) {\n    var $cell = _ref4.$cell,\n        isCommandColumn = _ref4.isCommandColumn;\n    var cssClassNameToAdd = isCommandColumn ? COMMAND_ADAPTIVE_HIDDEN_CLASS : this.addWidgetPrefix(HIDDEN_COLUMN_CLASS);\n    $cell.addClass(cssClassNameToAdd);\n  },\n  _getEditMode: function _getEditMode() {\n    return this._editingController.getEditMode();\n  },\n  isFormOrPopupEditMode: function isFormOrPopupEditMode() {\n    var editMode = this._getEditMode();\n\n    return editMode === EDIT_MODE_FORM || editMode === EDIT_MODE_POPUP;\n  },\n  hideRedundantColumns: function hideRedundantColumns(resultWidths, visibleColumns, hiddenQueue) {\n    this._hiddenColumns = [];\n\n    if (this._isVisibleColumnsValid(visibleColumns) && hiddenQueue.length) {\n      var totalWidth = 0;\n      var $rootElement = this.component.$element();\n\n      var rootElementWidth = getWidth($rootElement) - this._getCommandColumnsWidth();\n\n      var getVisibleContentColumns = function () {\n        var _this = this;\n\n        return visibleColumns.filter(function (item) {\n          return !item.command && 0 === _this._hiddenColumns.filter(function (i) {\n            return i.index === item.index;\n          }).length;\n        });\n      }.bind(this);\n\n      var visibleContentColumns = getVisibleContentColumns();\n      var contentColumnsCount = visibleContentColumns.length;\n      var i;\n      var hasHiddenColumns;\n      var needHideColumn;\n\n      do {\n        needHideColumn = false;\n        totalWidth = 0;\n\n        var percentWidths = this._calculatePercentWidths(resultWidths, visibleColumns);\n\n        var columnsCanFit = percentWidths < 100 && 0 !== percentWidths;\n\n        for (i = 0; i < visibleColumns.length; i++) {\n          var visibleColumn = visibleColumns[i];\n\n          var columnWidth = this._getNotTruncatedColumnWidth(visibleColumn, rootElementWidth, visibleContentColumns, columnsCanFit);\n\n          var columnId = getColumnId(this, visibleColumn);\n\n          var widthOption = this._columnsController.columnOption(columnId, \"width\");\n\n          var minWidth = this._columnsController.columnOption(columnId, \"minWidth\");\n\n          var columnBestFitWidth = this._columnsController.columnOption(columnId, \"bestFitWidth\");\n\n          if (resultWidths[i] === HIDDEN_COLUMNS_WIDTH) {\n            hasHiddenColumns = true;\n            continue;\n          }\n\n          if (!columnWidth && !visibleColumn.command && !visibleColumn.fixed) {\n            needHideColumn = true;\n            break;\n          }\n\n          if (!widthOption || \"auto\" === widthOption) {\n            columnWidth = Math.max(columnBestFitWidth || 0, minWidth || 0);\n          }\n\n          if (visibleColumn.command !== ADAPTIVE_COLUMN_NAME || hasHiddenColumns) {\n            totalWidth += columnWidth;\n          }\n        }\n\n        needHideColumn = needHideColumn || totalWidth > getWidth($rootElement);\n\n        if (needHideColumn) {\n          var column = hiddenQueue.pop();\n\n          var visibleIndex = this._columnsController.getVisibleIndex(column.index);\n\n          rootElementWidth += this._calculateColumnWidth(column, rootElementWidth, visibleContentColumns, columnsCanFit);\n\n          this._hideVisibleColumn({\n            visibleIndex: visibleIndex\n          });\n\n          resultWidths[visibleIndex] = HIDDEN_COLUMNS_WIDTH;\n\n          this._hiddenColumns.push(column);\n\n          visibleContentColumns = getVisibleContentColumns();\n        }\n      } while (needHideColumn && visibleContentColumns.length > 1 && hiddenQueue.length);\n\n      if (contentColumnsCount === visibleContentColumns.length) {\n        this._hideAdaptiveColumn(resultWidths, visibleColumns);\n      }\n    } else {\n      this._hideAdaptiveColumn(resultWidths, visibleColumns);\n    }\n  },\n  getItemContentByColumnIndex: function getItemContentByColumnIndex(visibleColumnIndex) {\n    var $itemContent;\n\n    for (var i = 0; i < this._$itemContents.length; i++) {\n      $itemContent = this._$itemContents.eq(i);\n      var item = $itemContent.data(\"dx-form-item\");\n\n      if (item && item.column && this._columnsController.getVisibleIndex(item.column.index) === visibleColumnIndex) {\n        return $itemContent;\n      }\n    }\n  },\n  toggleExpandAdaptiveDetailRow: function toggleExpandAdaptiveDetailRow(key, alwaysExpanded) {\n    if (!(this.isFormOrPopupEditMode() && this._editingController.isEditing())) {\n      this.getController(\"data\").toggleExpandAdaptiveDetailRow(key, alwaysExpanded);\n    }\n  },\n  createFormByHiddenColumns: function createFormByHiddenColumns(container, options) {\n    var that = this;\n    var $container = $(container);\n    var userFormOptions = {\n      items: that._getFormItemsByHiddenColumns(that._hiddenColumns),\n      formID: \"dx-\" + new Guid()\n    };\n    var defaultFormOptions = isMaterial() ? {\n      colCount: 2\n    } : {};\n    this.executeAction(\"onAdaptiveDetailRowPreparing\", {\n      formOptions: userFormOptions\n    });\n    that._$itemContents = null;\n    that._form = that._createComponent($(\"<div>\").appendTo($container), Form, extend(defaultFormOptions, userFormOptions, {\n      customizeItem: function customizeItem(item) {\n        var column = item.column || that._columnsController.columnOption(item.name || item.dataField);\n\n        if (column) {\n          item.label = item.label || {};\n          item.label.text = item.label.text || column.caption;\n          item.column = column;\n          item.template = that._getTemplate(item, options, that.updateForm.bind(that));\n        }\n\n        userFormOptions.customizeItem && userFormOptions.customizeItem.call(this, item);\n      },\n      onContentReady: function onContentReady(e) {\n        userFormOptions.onContentReady && userFormOptions.onContentReady.call(this, e);\n        that._$itemContents = $container.find(\".\" + FORM_ITEM_CONTENT_CLASS);\n      }\n    }));\n  },\n  hasAdaptiveDetailRowExpanded: function hasAdaptiveDetailRowExpanded() {\n    return isDefined(this._dataController.adaptiveExpandedKey());\n  },\n  updateForm: function updateForm(hiddenColumns) {\n    if (this.hasAdaptiveDetailRowExpanded()) {\n      if (this._form && isDefined(this._form._contentReadyAction)) {\n        if (hiddenColumns && hiddenColumns.length) {\n          this._form.option(\"items\", this._getFormItemsByHiddenColumns(hiddenColumns));\n        } else {\n          this._form.repaint();\n        }\n      }\n    }\n  },\n  updateHidingQueue: function updateHidingQueue(columns) {\n    var hideableColumns = columns.filter(function (column) {\n      return column.visible && !column.type && !column.fixed && !(isDefined(column.groupIndex) && column.groupIndex >= 0);\n    });\n    var columnsHasHidingPriority;\n    var i;\n    this._hidingColumnsQueue = [];\n\n    if (this.option(\"allowColumnResizing\") && \"widget\" === this.option(\"columnResizingMode\")) {\n      return this._hidingColumnsQueue;\n    }\n\n    for (i = 0; i < hideableColumns.length; i++) {\n      if (isDefined(hideableColumns[i].hidingPriority) && hideableColumns[i].hidingPriority >= 0) {\n        columnsHasHidingPriority = true;\n        this._hidingColumnsQueue[hideableColumns[i].hidingPriority] = hideableColumns[i];\n      }\n    }\n\n    if (columnsHasHidingPriority) {\n      this._hidingColumnsQueue.reverse();\n    } else if (this.option(\"columnHidingEnabled\")) {\n      for (i = 0; i < hideableColumns.length; i++) {\n        var visibleIndex = this._columnsController.getVisibleIndex(hideableColumns[i].index);\n\n        this._hidingColumnsQueue[visibleIndex] = hideableColumns[i];\n      }\n    }\n\n    this._hidingColumnsQueue = this._hidingColumnsQueue.filter(Object);\n    return this._hidingColumnsQueue;\n  },\n  getHiddenColumns: function getHiddenColumns() {\n    return this._hiddenColumns;\n  },\n  hasHiddenColumns: function hasHiddenColumns() {\n    return this._hiddenColumns.length > 0;\n  },\n  getHidingColumnsQueue: function getHidingColumnsQueue() {\n    return this._hidingColumnsQueue;\n  },\n  init: function init() {\n    var that = this;\n    that._columnsController = that.getController(\"columns\");\n    that._dataController = that.getController(\"data\");\n    that._rowsView = that.getView(\"rowsView\");\n\n    that._columnsController.addCommandColumn({\n      type: ADAPTIVE_COLUMN_NAME,\n      command: ADAPTIVE_COLUMN_NAME,\n      visible: true,\n      adaptiveHidden: true,\n      cssClass: ADAPTIVE_COLUMN_NAME_CLASS,\n      alignment: \"center\",\n      width: \"auto\",\n      cellTemplate: adaptiveCellTemplate,\n      fixedPosition: \"right\"\n    });\n\n    that._columnsController.columnsChanged.add(function () {\n      var isAdaptiveVisible = !!that.updateHidingQueue(that._columnsController.getColumns()).length;\n\n      that._columnsController.columnOption(\"command:adaptive\", \"adaptiveHidden\", !isAdaptiveVisible, true);\n    });\n\n    that._editingController = that.getController(\"editing\");\n    that._hidingColumnsQueue = [];\n    that._hiddenColumns = [];\n    that.createAction(\"onAdaptiveDetailRowPreparing\");\n    that.callBase();\n  },\n  optionChanged: function optionChanged(args) {\n    if (\"columnHidingEnabled\" === args.name) {\n      this._columnsController.columnOption(\"command:adaptive\", \"adaptiveHidden\", !args.value);\n    }\n\n    this.callBase(args);\n  },\n  publicMethods: function publicMethods() {\n    return [\"isAdaptiveDetailRowExpanded\", \"expandAdaptiveDetailRow\", \"collapseAdaptiveDetailRow\"];\n  },\n  isAdaptiveDetailRowExpanded: function isAdaptiveDetailRowExpanded(key) {\n    return this._dataController.adaptiveExpandedKey() && equalByValue(this._dataController.adaptiveExpandedKey(), key);\n  },\n  expandAdaptiveDetailRow: function expandAdaptiveDetailRow(key) {\n    if (!this.hasAdaptiveDetailRowExpanded()) {\n      this.toggleExpandAdaptiveDetailRow(key);\n    }\n  },\n  collapseAdaptiveDetailRow: function collapseAdaptiveDetailRow() {\n    if (this.hasAdaptiveDetailRowExpanded()) {\n      this.toggleExpandAdaptiveDetailRow();\n    }\n  },\n  updateCommandAdaptiveAriaLabel: function updateCommandAdaptiveAriaLabel(key, label) {\n    var rowIndex = this._dataController.getRowIndexByKey(key);\n\n    if (-1 === rowIndex) {\n      return;\n    }\n\n    var $row = $(this.component.getRowElement(rowIndex));\n    this.setCommandAdaptiveAriaLabel($row, label);\n  },\n  setCommandAdaptiveAriaLabel: function setCommandAdaptiveAriaLabel($row, labelName) {\n    var $adaptiveCommand = $row.find(\".dx-command-adaptive\");\n    $adaptiveCommand.attr(\"aria-label\", messageLocalization.format(labelName));\n  }\n});\nexport var adaptivityModule = {\n  defaultOptions: function defaultOptions() {\n    return {\n      columnHidingEnabled: false,\n      onAdaptiveDetailRowPreparing: null\n    };\n  },\n  controllers: {\n    adaptiveColumns: AdaptiveColumnsController\n  },\n  extenders: {\n    views: {\n      rowsView: {\n        _getCellTemplate: function _getCellTemplate(options) {\n          var that = this;\n          var column = options.column;\n\n          if (options.rowType === ADAPTIVE_ROW_TYPE && \"detail\" === column.command) {\n            return function (container, options) {\n              that._adaptiveColumnsController.createFormByHiddenColumns($(container), options);\n            };\n          }\n\n          return that.callBase(options);\n        },\n        _createRow: function _createRow(row) {\n          var $row = this.callBase.apply(this, arguments);\n\n          if (row && row.rowType === ADAPTIVE_ROW_TYPE && row.key === this._dataController.adaptiveExpandedKey()) {\n            $row.addClass(ADAPTIVE_DETAIL_ROW_CLASS);\n          }\n\n          return $row;\n        },\n        _renderCells: function _renderCells($row, options) {\n          this.callBase($row, options);\n          var adaptiveColumnsController = this._adaptiveColumnsController;\n          var hidingColumnsQueueLength = adaptiveColumnsController.getHidingColumnsQueue().length;\n          var hiddenColumnsLength = adaptiveColumnsController.getHiddenColumns().length;\n\n          if (hidingColumnsQueueLength && !hiddenColumnsLength) {\n            getDataCellElements($row).last().addClass(LAST_DATA_CELL_CLASS);\n          }\n\n          if (\"data\" === options.row.rowType) {\n            adaptiveColumnsController.setCommandAdaptiveAriaLabel($row, EXPAND_ARIA_NAME);\n          }\n        },\n        _getColumnIndexByElementCore: function _getColumnIndexByElementCore($element) {\n          var $itemContent = $element.closest(\".\" + FORM_ITEM_CONTENT_CLASS);\n\n          if ($itemContent.length && $itemContent.closest(this.component.$element()).length) {\n            var formItem = $itemContent.length ? $itemContent.first().data(\"dx-form-item\") : null;\n            return formItem && formItem.column && this._columnsController.getVisibleIndex(formItem.column.index);\n          } else {\n            return this.callBase($element);\n          }\n        },\n        _cellPrepared: function _cellPrepared($cell, options) {\n          this.callBase.apply(this, arguments);\n\n          if (options.row.rowType !== ADAPTIVE_ROW_TYPE && options.column.visibleWidth === HIDDEN_COLUMNS_WIDTH) {\n            $cell.addClass(this.addWidgetPrefix(HIDDEN_COLUMN_CLASS));\n          }\n        },\n        _getCellElement: function _getCellElement(rowIndex, columnIdentifier) {\n          var item = this._dataController.items()[rowIndex];\n\n          if (item && item.rowType === ADAPTIVE_ROW_TYPE) {\n            return this._adaptiveColumnsController.getItemContentByColumnIndex(columnIdentifier);\n          } else {\n            return this.callBase.apply(this, arguments);\n          }\n        },\n        getContextMenuItems: function getContextMenuItems(options) {\n          if (options.row && \"detailAdaptive\" === options.row.rowType) {\n            var view = this.component.getView(\"columnHeadersView\");\n            var formItem = $(options.targetElement).closest(\".dx-field-item-label\").next().data(\"dx-form-item\");\n            options.column = formItem ? formItem.column : options.column;\n            return view.getContextMenuItems && view.getContextMenuItems(options);\n          }\n\n          return this.callBase && this.callBase(options);\n        },\n        isClickableElement: function isClickableElement($target) {\n          var isClickable = this.callBase ? this.callBase($target) : false;\n          return isClickable || !!$target.closest(\".\" + ADAPTIVE_COLUMN_NAME_CLASS).length;\n        },\n        init: function init() {\n          this.callBase();\n          this._adaptiveColumnsController = this.getController(\"adaptiveColumns\");\n        }\n      }\n    },\n    controllers: {\n      export: {\n        _updateColumnWidth: function _updateColumnWidth(column, width) {\n          this.callBase(column, column.visibleWidth === HIDDEN_COLUMNS_WIDTH ? column.bestFitWidth : width);\n        }\n      },\n      columnsResizer: {\n        _pointCreated: function _pointCreated(point, cellsLength, columns) {\n          var result = this.callBase(point, cellsLength, columns);\n          var currentColumn = columns[point.columnIndex] || {};\n\n          var nextColumnIndex = this._getNextColumnIndex(point.columnIndex);\n\n          var nextColumn = columns[nextColumnIndex] || {};\n          var hasHiddenColumnsOnly = nextColumnIndex !== point.columnIndex + 1 && nextColumn.command;\n          var hasAdaptiveHiddenWidth = currentColumn.visibleWidth === HIDDEN_COLUMNS_WIDTH || hasHiddenColumnsOnly;\n          return result || hasAdaptiveHiddenWidth;\n        },\n        _getNextColumnIndex: function _getNextColumnIndex(currentColumnIndex) {\n          var visibleColumns = this._columnsController.getVisibleColumns();\n\n          var index = this.callBase(currentColumnIndex);\n\n          while (visibleColumns[index] && visibleColumns[index].visibleWidth === HIDDEN_COLUMNS_WIDTH) {\n            index++;\n          }\n\n          return index;\n        }\n      },\n      draggingHeader: {\n        _pointCreated: function _pointCreated(point, columns, location, sourceColumn) {\n          var result = this.callBase(point, columns, location, sourceColumn);\n          var column = columns[point.columnIndex - 1] || {};\n          var hasAdaptiveHiddenWidth = column.visibleWidth === HIDDEN_COLUMNS_WIDTH;\n          return result || hasAdaptiveHiddenWidth;\n        }\n      },\n      editing: {\n        _isRowEditMode: function _isRowEditMode() {\n          return this.getEditMode() === EDIT_MODE_ROW;\n        },\n        _getFormEditItemTemplate: function _getFormEditItemTemplate(cellOptions, column) {\n          if (this.getEditMode() !== EDIT_MODE_ROW && \"detailAdaptive\" === cellOptions.rowType) {\n            cellOptions.columnIndex = this._columnsController.getVisibleIndex(column.index);\n            return this.getColumnTemplate(cellOptions);\n          }\n\n          return this.callBase(cellOptions, column);\n        },\n        _closeEditItem: function _closeEditItem($targetElement) {\n          var $itemContents = $targetElement.closest(\".\" + FORM_ITEM_CONTENT_CLASS);\n          var rowIndex = this._dataController.getRowIndexByKey(this._dataController.adaptiveExpandedKey()) + 1;\n          var formItem = $itemContents.length ? $itemContents.first().data(\"dx-form-item\") : null;\n\n          var columnIndex = formItem && formItem.column && this._columnsController.getVisibleIndex(formItem.column.index);\n\n          if (!this.isEditCell(rowIndex, columnIndex)) {\n            this.callBase($targetElement);\n          }\n        },\n        _beforeUpdateItems: function _beforeUpdateItems(rowIndices, rowIndex) {\n          if (!this._adaptiveController.isFormOrPopupEditMode() && this._adaptiveController.hasHiddenColumns()) {\n            var items = this._dataController.items();\n\n            var item = items[rowIndex];\n            var oldExpandRowIndex = gridCoreUtils.getIndexByKey(this._dataController.adaptiveExpandedKey(), items);\n            this._isForceRowAdaptiveExpand = !this._adaptiveController.hasAdaptiveDetailRowExpanded();\n\n            if (oldExpandRowIndex >= 0) {\n              rowIndices.push(oldExpandRowIndex + 1);\n            }\n\n            rowIndices.push(rowIndex + 1);\n\n            this._dataController.adaptiveExpandedKey(item.key);\n          }\n        },\n        _afterInsertRow: function _afterInsertRow(key) {\n          this.callBase.apply(this, arguments);\n\n          if (this._adaptiveController.hasHiddenColumns()) {\n            this._adaptiveController.toggleExpandAdaptiveDetailRow(key, this.isRowEditMode());\n\n            this._isForceRowAdaptiveExpand = true;\n          }\n        },\n        _collapseAdaptiveDetailRow: function _collapseAdaptiveDetailRow() {\n          if (this._isRowEditMode() && this._isForceRowAdaptiveExpand) {\n            this._adaptiveController.collapseAdaptiveDetailRow();\n\n            this._isForceRowAdaptiveExpand = false;\n          }\n        },\n        _cancelEditAdaptiveDetailRow: function _cancelEditAdaptiveDetailRow() {\n          if (this._adaptiveController.hasHiddenColumns()) {\n            this._collapseAdaptiveDetailRow();\n          }\n        },\n        _afterSaveEditData: function _afterSaveEditData() {\n          var _this2 = this;\n\n          this.callBase.apply(this, arguments);\n          var deferred = new Deferred();\n\n          if (this._isRowEditMode() && this._adaptiveController.hasHiddenColumns()) {\n            when(this.getController(\"validating\").validate(true)).done(function (isValid) {\n              if (isValid) {\n                _this2._cancelEditAdaptiveDetailRow();\n              }\n\n              deferred.resolve();\n            });\n          } else {\n            deferred.resolve();\n          }\n\n          return deferred.promise();\n        },\n        _beforeCancelEditData: function _beforeCancelEditData() {\n          this.callBase();\n\n          this._cancelEditAdaptiveDetailRow();\n        },\n        _getRowIndicesForCascadeUpdating: function _getRowIndicesForCascadeUpdating(row) {\n          var rowIndices = this.callBase.apply(this, arguments);\n\n          if (this._adaptiveController.isAdaptiveDetailRowExpanded(row.key)) {\n            rowIndices.push(row.rowType === ADAPTIVE_ROW_TYPE ? row.rowIndex - 1 : row.rowIndex + 1);\n          }\n\n          return rowIndices;\n        },\n        _beforeCloseEditCellInBatchMode: function _beforeCloseEditCellInBatchMode(rowIndices) {\n          var expandedKey = this._dataController._adaptiveExpandedKey;\n\n          if (expandedKey) {\n            var rowIndex = gridCoreUtils.getIndexByKey(expandedKey, this._dataController.items());\n\n            if (rowIndex > -1) {\n              rowIndices.unshift(rowIndex);\n            }\n          }\n        },\n        editRow: function editRow(rowIndex) {\n          if (this._adaptiveController.isFormOrPopupEditMode()) {\n            this._adaptiveController.collapseAdaptiveDetailRow();\n          }\n\n          this.callBase(rowIndex);\n        },\n        deleteRow: function deleteRow(rowIndex) {\n          var rowKey = this._dataController.getKeyByRowIndex(rowIndex);\n\n          if (this.getEditMode() === EDIT_MODE_BATCH && this._adaptiveController.isAdaptiveDetailRowExpanded(rowKey)) {\n            this._adaptiveController.collapseAdaptiveDetailRow();\n          }\n\n          this.callBase(rowIndex);\n        },\n        init: function init() {\n          this.callBase();\n          this._adaptiveController = this.getController(\"adaptiveColumns\");\n        }\n      },\n      resizing: {\n        _needBestFit: function _needBestFit() {\n          return this.callBase() || !!this._adaptiveColumnsController.getHidingColumnsQueue().length;\n        },\n        _correctColumnWidths: function _correctColumnWidths(resultWidths, visibleColumns) {\n          var adaptiveController = this._adaptiveColumnsController;\n          var oldHiddenColumns = adaptiveController.getHiddenColumns();\n          var hidingColumnsQueue = adaptiveController.updateHidingQueue(this._columnsController.getColumns());\n          adaptiveController.hideRedundantColumns(resultWidths, visibleColumns, hidingColumnsQueue);\n          var hiddenColumns = adaptiveController.getHiddenColumns();\n\n          if (adaptiveController.hasAdaptiveDetailRowExpanded()) {\n            if (oldHiddenColumns.length !== hiddenColumns.length) {\n              adaptiveController.updateForm(hiddenColumns);\n            }\n          }\n\n          !hiddenColumns.length && adaptiveController.collapseAdaptiveDetailRow();\n          return this.callBase.apply(this, arguments);\n        },\n        _toggleBestFitMode: function _toggleBestFitMode(isBestFit) {\n          isBestFit && this._adaptiveColumnsController._showHiddenColumns();\n          this.callBase(isBestFit);\n        },\n        _needStretch: function _needStretch() {\n          var adaptiveColumnsController = this._adaptiveColumnsController;\n          return this.callBase.apply(this, arguments) || adaptiveColumnsController.getHidingColumnsQueue().length || adaptiveColumnsController.hasHiddenColumns();\n        },\n        init: function init() {\n          this._adaptiveColumnsController = this.getController(\"adaptiveColumns\");\n          this.callBase();\n        },\n        dispose: function dispose() {\n          this.callBase.apply(this, arguments);\n          clearTimeout(this._updateScrollableTimeoutID);\n        }\n      },\n      data: {\n        _processItems: function _processItems(items, change) {\n          var changeType = change.changeType;\n          items = this.callBase.apply(this, arguments);\n\n          if (\"loadingAll\" === changeType || !isDefined(this._adaptiveExpandedKey)) {\n            return items;\n          }\n\n          var expandRowIndex = gridCoreUtils.getIndexByKey(this._adaptiveExpandedKey, items);\n          var newMode = false === this.option(LEGACY_SCROLLING_MODE);\n\n          if (expandRowIndex >= 0) {\n            var item = items[expandRowIndex];\n            items.splice(expandRowIndex + 1, 0, {\n              visible: true,\n              rowType: ADAPTIVE_ROW_TYPE,\n              key: item.key,\n              data: item.data,\n              node: item.node,\n              modifiedValues: item.modifiedValues,\n              isNewRow: item.isNewRow,\n              values: item.values\n            });\n          } else if (\"refresh\" === changeType && !(newMode && change.repaintChangesOnly)) {\n            this._adaptiveExpandedKey = void 0;\n          }\n\n          return items;\n        },\n        _getRowIndicesForExpand: function _getRowIndicesForExpand(key) {\n          var rowIndices = this.callBase.apply(this, arguments);\n\n          if (this.getController(\"adaptiveColumns\").isAdaptiveDetailRowExpanded(key)) {\n            var lastRowIndex = rowIndices[rowIndices.length - 1];\n            rowIndices.push(lastRowIndex + 1);\n          }\n\n          return rowIndices;\n        },\n        adaptiveExpandedKey: function adaptiveExpandedKey(value) {\n          if (isDefined(value)) {\n            this._adaptiveExpandedKey = value;\n          } else {\n            return this._adaptiveExpandedKey;\n          }\n        },\n        toggleExpandAdaptiveDetailRow: function toggleExpandAdaptiveDetailRow(key, alwaysExpanded) {\n          var oldExpandLoadedRowIndex = gridCoreUtils.getIndexByKey(this._adaptiveExpandedKey, this._items);\n          var newExpandLoadedRowIndex = gridCoreUtils.getIndexByKey(key, this._items);\n\n          if (oldExpandLoadedRowIndex >= 0 && oldExpandLoadedRowIndex === newExpandLoadedRowIndex && !alwaysExpanded) {\n            key = void 0;\n            newExpandLoadedRowIndex = -1;\n          }\n\n          var oldKey = this._adaptiveExpandedKey;\n          this._adaptiveExpandedKey = key;\n\n          if (oldExpandLoadedRowIndex >= 0) {\n            oldExpandLoadedRowIndex++;\n          }\n\n          if (newExpandLoadedRowIndex >= 0) {\n            newExpandLoadedRowIndex++;\n          }\n\n          var rowIndexDelta = this.getRowIndexDelta();\n          this.updateItems({\n            allowInvisibleRowIndices: true,\n            changeType: \"update\",\n            rowIndices: [oldExpandLoadedRowIndex - rowIndexDelta, newExpandLoadedRowIndex - rowIndexDelta]\n          });\n          var adaptiveColumnsController = this.getController(\"adaptiveColumns\");\n          adaptiveColumnsController.updateCommandAdaptiveAriaLabel(key, COLLAPSE_ARIA_NAME);\n          adaptiveColumnsController.updateCommandAdaptiveAriaLabel(oldKey, EXPAND_ARIA_NAME);\n        },\n        init: function init() {\n          this.callBase();\n          this._adaptiveExpandedKey = void 0;\n        }\n      },\n      editorFactory: {\n        _getFocusCellSelector: function _getFocusCellSelector() {\n          return this.callBase() + \", .dx-adaptive-detail-row .dx-field-item > .dx-field-item-content\";\n        },\n        _getTooltipsSelector: function _getTooltipsSelector() {\n          return this.callBase() + \", .dx-field-item-content .\" + this.addWidgetPrefix(REVERT_TOOLTIP_CLASS);\n        }\n      },\n      columns: {\n        _isColumnVisible: function _isColumnVisible(column) {\n          return this.callBase(column) && !column.adaptiveHidden;\n        }\n      },\n      keyboardNavigation: {\n        _isCellValid: function _isCellValid($cell) {\n          return this.callBase.apply(this, arguments) && !$cell.hasClass(this.addWidgetPrefix(HIDDEN_COLUMN_CLASS));\n        },\n        _processNextCellInMasterDetail: function _processNextCellInMasterDetail($nextCell) {\n          this.callBase($nextCell);\n\n          var isCellOrBatchMode = this._editingController.isCellOrBatchEditMode();\n\n          if (!this._isInsideEditForm($nextCell) && $nextCell && isCellOrBatchMode) {\n            eventsEngine.on($nextCell, \"focus\", function focusHandler() {\n              eventsEngine.off($nextCell, \"focus\", focusHandler);\n              eventsEngine.trigger($nextCell, \"dxclick\");\n            });\n          }\n        },\n        _handleTabKeyOnMasterDetailCell: function _handleTabKeyOnMasterDetailCell(eventTarget, direction) {\n          var result = this.callBase(eventTarget, direction);\n\n          var $currentCell = this._getFocusedCell();\n\n          var $row = $currentCell && $currentCell.parent();\n\n          if (!result && $row && $row.length) {\n            var $dataCells = getDataCellElements($row);\n            var $targetCell = \"next\" === direction ? $dataCells.last() : $dataCells.first();\n            var rowIndex = $row.get(0).rowIndex;\n            var adaptiveController = this._adaptiveController;\n\n            var key = this._dataController.getKeyByRowIndex(\"next\" === direction ? rowIndex : rowIndex - 1);\n\n            var isCellElementsEquals = $currentCell && $targetCell && $currentCell.get(0) === $targetCell.get(0);\n            return adaptiveController.isAdaptiveDetailRowExpanded(key) && isCellElementsEquals;\n          }\n\n          return result;\n        },\n        init: function init() {\n          this.callBase();\n          this._adaptiveController = this.getController(\"adaptiveColumns\");\n        }\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}