{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/filter_builder/filter_builder.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport domAdapter from \"../../core/dom_adapter\";\nimport Class from \"../../core/class\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport Widget from \"../widget/ui.widget\";\nimport registerComponent from \"../../core/component_registrator\";\nimport { extend } from \"../../core/utils/extend\";\nimport messageLocalization from \"../../localization/message\";\nimport { when } from \"../../core/utils/deferred\";\nimport { isDefined } from \"../../core/utils/type\";\nimport TreeView from \"../tree_view\";\nimport Popup from \"../popup\";\nimport { getElementMaxHeightByWindow } from \"../overlay/utils\";\nimport EditorFactoryMixin from \"../shared/ui.editor_factory_mixin\";\nimport { normalizeKeyName } from \"../../events/utils/index\";\nimport { renderValueText, getFilterExpression as _getFilterExpression, getNormalizedFilter, getNormalizedFields, getMergedOperations, convertToInnerStructure, getGroupCriteria, isGroup, isCondition, removeItem, createEmptyGroup, addItem, createCondition, getGroupMenuItem, setGroupValue, getCustomOperation, getAvailableOperations, getOperationFromAvailable, getOperationValue, updateConditionByOperation, getItems, getField, getCaptionWithParents, getDefaultOperation, getGroupValue, getCurrentLookupValueText, getCurrentValueText } from \"./utils\";\nvar FILTER_BUILDER_CLASS = \"dx-filterbuilder\";\nvar FILTER_BUILDER_GROUP_CLASS = FILTER_BUILDER_CLASS + \"-group\";\nvar FILTER_BUILDER_GROUP_ITEM_CLASS = FILTER_BUILDER_GROUP_CLASS + \"-item\";\nvar FILTER_BUILDER_GROUP_CONTENT_CLASS = FILTER_BUILDER_GROUP_CLASS + \"-content\";\nvar FILTER_BUILDER_GROUP_OPERATIONS_CLASS = FILTER_BUILDER_GROUP_CLASS + \"-operations\";\nvar FILTER_BUILDER_GROUP_OPERATION_CLASS = FILTER_BUILDER_GROUP_CLASS + \"-operation\";\nvar FILTER_BUILDER_ACTION_CLASS = FILTER_BUILDER_CLASS + \"-action\";\nvar FILTER_BUILDER_IMAGE_CLASS = FILTER_BUILDER_ACTION_CLASS + \"-icon\";\nvar FILTER_BUILDER_IMAGE_ADD_CLASS = \"dx-icon-plus\";\nvar FILTER_BUILDER_IMAGE_REMOVE_CLASS = \"dx-icon-remove\";\nvar FILTER_BUILDER_ITEM_TEXT_CLASS = FILTER_BUILDER_CLASS + \"-text\";\nvar FILTER_BUILDER_ITEM_FIELD_CLASS = FILTER_BUILDER_CLASS + \"-item-field\";\nvar FILTER_BUILDER_ITEM_OPERATION_CLASS = FILTER_BUILDER_CLASS + \"-item-operation\";\nvar FILTER_BUILDER_ITEM_VALUE_CLASS = FILTER_BUILDER_CLASS + \"-item-value\";\nvar FILTER_BUILDER_ITEM_VALUE_TEXT_CLASS = FILTER_BUILDER_CLASS + \"-item-value-text\";\nvar FILTER_BUILDER_OVERLAY_CLASS = FILTER_BUILDER_CLASS + \"-overlay\";\nvar FILTER_BUILDER_FILTER_OPERATIONS_CLASS = FILTER_BUILDER_CLASS + \"-operations\";\nvar FILTER_BUILDER_FIELDS_CLASS = FILTER_BUILDER_CLASS + \"-fields\";\nvar FILTER_BUILDER_ADD_CONDITION_CLASS = FILTER_BUILDER_CLASS + \"-add-condition\";\nvar ACTIVE_CLASS = \"dx-state-active\";\nvar FILTER_BUILDER_MENU_CUSTOM_OPERATION_CLASS = FILTER_BUILDER_CLASS + \"-menu-custom-operation\";\nvar SOURCE = \"filterBuilder\";\nvar DISABLED_STATE_CLASS = \"dx-state-disabled\";\nvar TAB_KEY = \"tab\";\nvar ENTER_KEY = \"enter\";\nvar ESCAPE_KEY = \"escape\";\nvar ACTIONS = [{\n  name: \"onEditorPreparing\",\n  config: {\n    excludeValidators: [\"disabled\", \"readOnly\"],\n    category: \"rendering\"\n  }\n}, {\n  name: \"onEditorPrepared\",\n  config: {\n    excludeValidators: [\"disabled\", \"readOnly\"],\n    category: \"rendering\"\n  }\n}, {\n  name: \"onValueChanged\",\n  config: {\n    excludeValidators: [\"disabled\", \"readOnly\"]\n  }\n}];\nvar OPERATORS = {\n  and: \"and\",\n  or: \"or\",\n  notAnd: \"!and\",\n  notOr: \"!or\"\n};\nvar EditorFactory = Class.inherit(EditorFactoryMixin);\nvar FilterBuilder = Widget.inherit({\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      onEditorPreparing: null,\n      onEditorPrepared: null,\n      onValueChanged: null,\n      fields: [],\n      groupOperations: [\"and\", \"or\", \"notAnd\", \"notOr\"],\n      maxGroupLevel: void 0,\n      value: null,\n      allowHierarchicalFields: false,\n      groupOperationDescriptions: {\n        and: messageLocalization.format(\"dxFilterBuilder-and\"),\n        or: messageLocalization.format(\"dxFilterBuilder-or\"),\n        notAnd: messageLocalization.format(\"dxFilterBuilder-notAnd\"),\n        notOr: messageLocalization.format(\"dxFilterBuilder-notOr\")\n      },\n      customOperations: [],\n      closePopupOnTargetScroll: true,\n      filterOperationDescriptions: {\n        between: messageLocalization.format(\"dxFilterBuilder-filterOperationBetween\"),\n        equal: messageLocalization.format(\"dxFilterBuilder-filterOperationEquals\"),\n        notEqual: messageLocalization.format(\"dxFilterBuilder-filterOperationNotEquals\"),\n        lessThan: messageLocalization.format(\"dxFilterBuilder-filterOperationLess\"),\n        lessThanOrEqual: messageLocalization.format(\"dxFilterBuilder-filterOperationLessOrEquals\"),\n        greaterThan: messageLocalization.format(\"dxFilterBuilder-filterOperationGreater\"),\n        greaterThanOrEqual: messageLocalization.format(\"dxFilterBuilder-filterOperationGreaterOrEquals\"),\n        startsWith: messageLocalization.format(\"dxFilterBuilder-filterOperationStartsWith\"),\n        contains: messageLocalization.format(\"dxFilterBuilder-filterOperationContains\"),\n        notContains: messageLocalization.format(\"dxFilterBuilder-filterOperationNotContains\"),\n        endsWith: messageLocalization.format(\"dxFilterBuilder-filterOperationEndsWith\"),\n        isBlank: messageLocalization.format(\"dxFilterBuilder-filterOperationIsBlank\"),\n        isNotBlank: messageLocalization.format(\"dxFilterBuilder-filterOperationIsNotBlank\")\n      }\n    });\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"closePopupOnTargetScroll\":\n        break;\n\n      case \"onEditorPreparing\":\n      case \"onEditorPrepared\":\n      case \"onValueChanged\":\n        this._initActions();\n\n        break;\n\n      case \"customOperations\":\n        this._initCustomOperations();\n\n        this._invalidate();\n\n        break;\n\n      case \"fields\":\n      case \"maxGroupLevel\":\n      case \"groupOperations\":\n      case \"allowHierarchicalFields\":\n      case \"groupOperationDescriptions\":\n      case \"filterOperationDescriptions\":\n        this._invalidate();\n\n        break;\n\n      case \"value\":\n        if (args.value !== args.previousValue) {\n          var disableInvalidateForValue = this._disableInvalidateForValue;\n\n          if (!disableInvalidateForValue) {\n            this._initModel();\n\n            this._invalidate();\n          }\n\n          this._disableInvalidateForValue = false;\n          this.executeAction(\"onValueChanged\", {\n            value: args.value,\n            previousValue: args.previousValue\n          });\n          this._disableInvalidateForValue = disableInvalidateForValue;\n        }\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  getFilterExpression: function getFilterExpression() {\n    var fields = this._getNormalizedFields();\n\n    var value = extend(true, [], this._model);\n    return _getFilterExpression(getNormalizedFilter(value), fields, this._customOperations, SOURCE);\n  },\n  _getNormalizedFields: function _getNormalizedFields() {\n    return getNormalizedFields(this.option(\"fields\"));\n  },\n  _updateFilter: function _updateFilter() {\n    this._disableInvalidateForValue = true;\n    var value = extend(true, [], this._model);\n    var normalizedValue = getNormalizedFilter(value);\n    var oldValue = getNormalizedFilter(this._getModel(this.option(\"value\")));\n\n    if (JSON.stringify(oldValue) !== JSON.stringify(normalizedValue)) {\n      this.option(\"value\", normalizedValue);\n    }\n\n    this._disableInvalidateForValue = false;\n\n    this._fireContentReadyAction();\n  },\n  _init: function _init() {\n    this._initCustomOperations();\n\n    this._initModel();\n\n    this._initEditorFactory();\n\n    this._initActions();\n\n    this.callBase();\n  },\n  _initEditorFactory: function _initEditorFactory() {\n    this._editorFactory = new EditorFactory();\n  },\n  _initCustomOperations: function _initCustomOperations() {\n    this._customOperations = getMergedOperations(this.option(\"customOperations\"), this.option(\"filterOperationDescriptions.between\"), this);\n  },\n  _getDefaultGroupOperation: function _getDefaultGroupOperation() {\n    var _this$option$, _this$option;\n\n    return null !== (_this$option$ = null === (_this$option = this.option(\"groupOperations\")) || void 0 === _this$option ? void 0 : _this$option[0]) && void 0 !== _this$option$ ? _this$option$ : OPERATORS.and;\n  },\n  _getModel: function _getModel(value) {\n    return convertToInnerStructure(value, this._customOperations, this._getDefaultGroupOperation());\n  },\n  _initModel: function _initModel() {\n    this._model = this._getModel(this.option(\"value\"));\n  },\n  _initActions: function _initActions() {\n    var that = this;\n    that._actions = {};\n    ACTIONS.forEach(function (action) {\n      var actionConfig = extend({}, action.config);\n      that._actions[action.name] = that._createActionByOption(action.name, actionConfig);\n    });\n  },\n  executeAction: function executeAction(actionName, options) {\n    var action = this._actions[actionName];\n    return action && action(options);\n  },\n  _initMarkup: function _initMarkup() {\n    this.$element().addClass(FILTER_BUILDER_CLASS);\n    this.callBase();\n\n    this._createGroupElementByCriteria(this._model).appendTo(this.$element());\n  },\n  _createConditionElement: function _createConditionElement(condition, parent) {\n    return $(\"<div>\").addClass(FILTER_BUILDER_GROUP_CLASS).append(this._createConditionItem(condition, parent));\n  },\n  _createGroupElementByCriteria: function _createGroupElementByCriteria(criteria, parent) {\n    var groupLevel = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0;\n\n    var $group = this._createGroupElement(criteria, parent, groupLevel);\n\n    var $groupContent = $group.find(\".\" + FILTER_BUILDER_GROUP_CONTENT_CLASS);\n    var groupCriteria = getGroupCriteria(criteria);\n\n    for (var i = 0; i < groupCriteria.length; i++) {\n      var innerCriteria = groupCriteria[i];\n\n      if (isGroup(innerCriteria)) {\n        this._createGroupElementByCriteria(innerCriteria, criteria, groupLevel + 1).appendTo($groupContent);\n      } else if (isCondition(innerCriteria)) {\n        this._createConditionElement(innerCriteria, criteria).appendTo($groupContent);\n      }\n    }\n\n    return $group;\n  },\n  _createGroupElement: function _createGroupElement(criteria, parent, groupLevel) {\n    var _this = this;\n\n    var $groupItem = $(\"<div>\").addClass(FILTER_BUILDER_GROUP_ITEM_CLASS);\n    var $groupContent = $(\"<div>\").addClass(FILTER_BUILDER_GROUP_CONTENT_CLASS);\n    var $group = $(\"<div>\").addClass(FILTER_BUILDER_GROUP_CLASS).append($groupItem).append($groupContent);\n\n    if (null != parent) {\n      this._createRemoveButton(function () {\n        removeItem(parent, criteria);\n        $group.remove();\n\n        _this._updateFilter();\n      }).appendTo($groupItem);\n    }\n\n    this._createGroupOperationButton(criteria).appendTo($groupItem);\n\n    this._createAddButton(function () {\n      var newGroup = createEmptyGroup(_this._getDefaultGroupOperation());\n      addItem(newGroup, criteria);\n\n      _this._createGroupElement(newGroup, criteria, groupLevel + 1).appendTo($groupContent);\n\n      _this._updateFilter();\n    }, function () {\n      var field = _this.option(\"fields\")[0];\n\n      var newCondition = createCondition(field, _this._customOperations);\n      addItem(newCondition, criteria);\n\n      _this._createConditionElement(newCondition, criteria).appendTo($groupContent);\n\n      _this._updateFilter();\n    }, groupLevel).appendTo($groupItem);\n\n    return $group;\n  },\n  _createButton: function _createButton(caption) {\n    return $(\"<div>\").text(caption);\n  },\n  _createGroupOperationButton: function _createGroupOperationButton(criteria) {\n    var _this2 = this;\n\n    var groupOperations = this._getGroupOperations(criteria);\n\n    var groupMenuItem = getGroupMenuItem(criteria, groupOperations);\n    var caption = groupMenuItem.text;\n    var $operationButton = groupOperations && groupOperations.length < 2 ? this._createButton(caption).addClass(DISABLED_STATE_CLASS) : this._createButtonWithMenu({\n      caption: caption,\n      menu: {\n        items: groupOperations,\n        displayExpr: \"text\",\n        keyExpr: \"value\",\n        onItemClick: function onItemClick(e) {\n          if (groupMenuItem !== e.itemData) {\n            setGroupValue(criteria, e.itemData.value);\n            $operationButton.text(e.itemData.text);\n            groupMenuItem = e.itemData;\n\n            _this2._updateFilter();\n          }\n        },\n        onContentReady: function onContentReady(e) {\n          e.component.selectItem(groupMenuItem);\n        },\n        cssClass: FILTER_BUILDER_GROUP_OPERATIONS_CLASS\n      }\n    });\n    return $operationButton.addClass(FILTER_BUILDER_ITEM_TEXT_CLASS).addClass(FILTER_BUILDER_GROUP_OPERATION_CLASS).attr(\"tabindex\", 0);\n  },\n  _createButtonWithMenu: function _createButtonWithMenu(options) {\n    var that = this;\n\n    var removeMenu = function removeMenu() {\n      that.$element().find(\".\" + ACTIVE_CLASS).removeClass(ACTIVE_CLASS);\n      that.$element().find(\".dx-overlay .dx-treeview\").remove();\n      that.$element().find(\".dx-overlay\").remove();\n    };\n\n    var rtlEnabled = this.option(\"rtlEnabled\");\n    var position = rtlEnabled ? \"right\" : \"left\";\n\n    var $button = this._createButton(options.caption);\n\n    extend(options.menu, {\n      focusStateEnabled: true,\n      selectionMode: \"single\",\n      onItemClick: (handler = options.menu.onItemClick, function (e) {\n        handler(e);\n\n        if (\"dxclick\" === e.event.type) {\n          removeMenu();\n        }\n      }),\n      onHiding: function onHiding(e) {\n        $button.removeClass(ACTIVE_CLASS);\n      },\n      position: {\n        my: position + \" top\",\n        at: position + \" bottom\",\n        offset: \"0 1\",\n        of: $button,\n        collision: \"flip\"\n      },\n      animation: null,\n      onHidden: function onHidden() {\n        removeMenu();\n      },\n      cssClass: FILTER_BUILDER_OVERLAY_CLASS + \" \" + options.menu.cssClass,\n      rtlEnabled: rtlEnabled\n    });\n    var handler;\n    options.popup = {\n      onShown: function onShown(info) {\n        var treeViewElement = $(info.component.content()).find(\".dx-treeview\");\n        var treeView = treeViewElement.dxTreeView(\"instance\");\n        eventsEngine.on(treeViewElement, \"keyup keydown\", function (e) {\n          var keyName = normalizeKeyName(e);\n\n          if (\"keydown\" === e.type && keyName === TAB_KEY || \"keyup\" === e.type && (keyName === ESCAPE_KEY || keyName === ENTER_KEY)) {\n            info.component.hide();\n            eventsEngine.trigger(options.menu.position.of, \"focus\");\n          }\n        });\n        treeView.focus();\n        treeView.option(\"focusedElement\", null);\n      }\n    };\n\n    this._subscribeOnClickAndEnterKey($button, function () {\n      removeMenu();\n\n      that._createPopupWithTreeView(options, that.$element());\n\n      $button.addClass(ACTIVE_CLASS);\n    });\n\n    return $button;\n  },\n  _hasValueButton: function _hasValueButton(condition) {\n    var customOperation = getCustomOperation(this._customOperations, condition[1]);\n    return customOperation ? false !== customOperation.hasValue : null !== condition[2];\n  },\n  _createOperationButtonWithMenu: function _createOperationButtonWithMenu(condition, field) {\n    var _this3 = this;\n\n    var that = this;\n    var availableOperations = getAvailableOperations(field, this.option(\"filterOperationDescriptions\"), this._customOperations);\n    var currentOperation = getOperationFromAvailable(getOperationValue(condition), availableOperations);\n\n    var $operationButton = this._createButtonWithMenu({\n      caption: currentOperation.text,\n      menu: {\n        items: availableOperations,\n        displayExpr: \"text\",\n        onItemRendered: function onItemRendered(e) {\n          e.itemData.isCustom && $(e.itemElement).addClass(FILTER_BUILDER_MENU_CUSTOM_OPERATION_CLASS);\n        },\n        onContentReady: function onContentReady(e) {\n          e.component.selectItem(currentOperation);\n        },\n        onItemClick: function onItemClick(e) {\n          if (currentOperation !== e.itemData) {\n            currentOperation = e.itemData;\n            updateConditionByOperation(condition, currentOperation.value, that._customOperations);\n            var $valueButton = $operationButton.siblings().filter(\".\" + FILTER_BUILDER_ITEM_VALUE_CLASS);\n\n            if (that._hasValueButton(condition)) {\n              if (0 !== $valueButton.length) {\n                $valueButton.remove();\n              }\n\n              that._createValueButton(condition, field).appendTo($operationButton.parent());\n            } else {\n              $valueButton.remove();\n            }\n\n            $operationButton.html(currentOperation.text);\n\n            _this3._updateFilter();\n          }\n        },\n        cssClass: FILTER_BUILDER_FILTER_OPERATIONS_CLASS\n      }\n    }).addClass(FILTER_BUILDER_ITEM_TEXT_CLASS).addClass(FILTER_BUILDER_ITEM_OPERATION_CLASS).attr(\"tabindex\", 0);\n\n    return $operationButton;\n  },\n  _createOperationAndValueButtons: function _createOperationAndValueButtons(condition, field, $item) {\n    this._createOperationButtonWithMenu(condition, field).appendTo($item);\n\n    if (this._hasValueButton(condition)) {\n      this._createValueButton(condition, field).appendTo($item);\n    }\n  },\n  _createFieldButtonWithMenu: function _createFieldButtonWithMenu(fields, condition, field) {\n    var _this4 = this;\n\n    var that = this;\n    var allowHierarchicalFields = this.option(\"allowHierarchicalFields\");\n    var items = getItems(fields, allowHierarchicalFields);\n    var item = getField(field.name || field.dataField, items);\n\n    var getFullCaption = function getFullCaption(item, items) {\n      return allowHierarchicalFields ? getCaptionWithParents(item, items) : item.caption;\n    };\n\n    var $fieldButton = this._createButtonWithMenu({\n      caption: getFullCaption(item, items),\n      menu: {\n        items: items,\n        dataStructure: \"plain\",\n        keyExpr: \"id\",\n        parentId: \"parentId\",\n        displayExpr: \"caption\",\n        onItemClick: function onItemClick(e) {\n          if (item !== e.itemData) {\n            item = e.itemData;\n            condition[0] = item.name || item.dataField;\n            condition[2] = \"object\" === item.dataType ? null : \"\";\n            updateConditionByOperation(condition, getDefaultOperation(item), that._customOperations);\n            $fieldButton.siblings().filter(\".\" + FILTER_BUILDER_ITEM_TEXT_CLASS).remove();\n\n            that._createOperationAndValueButtons(condition, item, $fieldButton.parent());\n\n            var caption = getFullCaption(item, e.component.option(\"items\"));\n            $fieldButton.html(caption);\n\n            _this4._updateFilter();\n          }\n        },\n        onContentReady: function onContentReady(e) {\n          e.component.selectItem(item);\n        },\n        cssClass: FILTER_BUILDER_FIELDS_CLASS\n      }\n    }).addClass(FILTER_BUILDER_ITEM_TEXT_CLASS).addClass(FILTER_BUILDER_ITEM_FIELD_CLASS).attr(\"tabindex\", 0);\n\n    return $fieldButton;\n  },\n  _createConditionItem: function _createConditionItem(condition, parent) {\n    var _this5 = this;\n\n    var $item = $(\"<div>\").addClass(FILTER_BUILDER_GROUP_ITEM_CLASS);\n\n    var fields = this._getNormalizedFields();\n\n    var field = getField(condition[0], fields);\n\n    this._createRemoveButton(function () {\n      removeItem(parent, condition);\n      var isSingleChild = 1 === $item.parent().children().length;\n\n      if (isSingleChild) {\n        $item.parent().remove();\n      } else {\n        $item.remove();\n      }\n\n      _this5._updateFilter();\n    }).appendTo($item);\n\n    this._createFieldButtonWithMenu(fields, condition, field).appendTo($item);\n\n    this._createOperationAndValueButtons(condition, field, $item);\n\n    return $item;\n  },\n  _getGroupOperations: function _getGroupOperations(criteria) {\n    var groupOperations = this.option(\"groupOperations\");\n    var groupOperationDescriptions = this.option(\"groupOperationDescriptions\");\n\n    if (!groupOperations || !groupOperations.length) {\n      groupOperations = [getGroupValue(criteria).replace(\"!\", \"not\")];\n    }\n\n    return groupOperations.map(function (operation) {\n      return {\n        text: groupOperationDescriptions[operation],\n        value: OPERATORS[operation]\n      };\n    });\n  },\n  _createRemoveButton: function _createRemoveButton(handler) {\n    var $removeButton = $(\"<div>\").addClass(FILTER_BUILDER_IMAGE_CLASS).addClass(FILTER_BUILDER_IMAGE_REMOVE_CLASS).addClass(FILTER_BUILDER_ACTION_CLASS).attr(\"tabindex\", 0);\n\n    this._subscribeOnClickAndEnterKey($removeButton, handler);\n\n    return $removeButton;\n  },\n  _createAddButton: function _createAddButton(addGroupHandler, addConditionHandler, groupLevel) {\n    var $button;\n    var maxGroupLevel = this.option(\"maxGroupLevel\");\n\n    if (isDefined(maxGroupLevel) && groupLevel >= maxGroupLevel) {\n      $button = this._createButton();\n\n      this._subscribeOnClickAndEnterKey($button, addConditionHandler);\n    } else {\n      $button = this._createButtonWithMenu({\n        menu: {\n          items: [{\n            caption: messageLocalization.format(\"dxFilterBuilder-addCondition\"),\n            click: addConditionHandler\n          }, {\n            caption: messageLocalization.format(\"dxFilterBuilder-addGroup\"),\n            click: addGroupHandler\n          }],\n          displayExpr: \"caption\",\n          onItemClick: function onItemClick(e) {\n            e.itemData.click();\n          },\n          cssClass: FILTER_BUILDER_ADD_CONDITION_CLASS\n        }\n      });\n    }\n\n    return $button.addClass(FILTER_BUILDER_IMAGE_CLASS).addClass(FILTER_BUILDER_IMAGE_ADD_CLASS).addClass(FILTER_BUILDER_ACTION_CLASS).attr(\"tabindex\", 0);\n  },\n  _createValueText: function _createValueText(item, field, $container) {\n    var that = this;\n    var $text = $(\"<div>\").html(\"&nbsp;\").addClass(FILTER_BUILDER_ITEM_VALUE_TEXT_CLASS).attr(\"tabindex\", 0).appendTo($container);\n    var value = item[2];\n    var customOperation = getCustomOperation(that._customOperations, item[1]);\n\n    if (!customOperation && field.lookup) {\n      getCurrentLookupValueText(field, value, function (result) {\n        renderValueText($text, result);\n      });\n    } else {\n      when(getCurrentValueText(field, value, customOperation)).done(function (result) {\n        renderValueText($text, result, customOperation);\n      });\n    }\n\n    that._subscribeOnClickAndEnterKey($text, function (e) {\n      if (\"keyup\" === e.type) {\n        e.stopPropagation();\n      }\n\n      that._createValueEditorWithEvents(item, field, $container);\n    });\n\n    return $text;\n  },\n  _updateConditionValue: function _updateConditionValue(item, value, callback) {\n    var areValuesDifferent = item[2] !== value;\n\n    if (areValuesDifferent) {\n      item[2] = value;\n    }\n\n    callback();\n\n    this._updateFilter();\n  },\n  _addDocumentKeyUp: function _addDocumentKeyUp($editor, handler) {\n    var isComposing = false;\n    var hasCompositionJustEnded = false;\n    var document = domAdapter.getDocument();\n\n    var documentKeyUpHandler = function documentKeyUpHandler(e) {\n      if (isComposing || hasCompositionJustEnded) {\n        hasCompositionJustEnded = false;\n        return;\n      }\n\n      handler(e);\n    };\n\n    eventsEngine.on(document, \"keyup\", documentKeyUpHandler);\n    var input = $editor.find(\"input\");\n    eventsEngine.on(input, \"compositionstart\", function () {\n      isComposing = true;\n    });\n    eventsEngine.on(input, \"compositionend\", function () {\n      isComposing = false;\n      hasCompositionJustEnded = true;\n    });\n    eventsEngine.on(input, \"keydown\", function (event) {\n      if (229 !== event.which) {\n        hasCompositionJustEnded = false;\n      }\n    });\n    this._documentKeyUpHandler = documentKeyUpHandler;\n  },\n  _addDocumentClick: function _addDocumentClick($editor, closeEditorFunc) {\n    var _this6 = this;\n\n    var document = domAdapter.getDocument();\n\n    var documentClickHandler = function documentClickHandler(e) {\n      if (!_this6._isFocusOnEditorParts($editor, e.target)) {\n        eventsEngine.trigger($editor.find(\"input\"), \"change\");\n        closeEditorFunc();\n      }\n    };\n\n    eventsEngine.on(document, \"dxpointerdown\", documentClickHandler);\n    this._documentClickHandler = documentClickHandler;\n  },\n  _isFocusOnEditorParts: function _isFocusOnEditorParts($editor, target) {\n    var activeElement = target || domAdapter.getActiveElement();\n    return $(activeElement).closest($editor.children()).length || $(activeElement).closest(\".dx-dropdowneditor-overlay\").length;\n  },\n  _removeEvents: function _removeEvents() {\n    var document = domAdapter.getDocument();\n    isDefined(this._documentKeyUpHandler) && eventsEngine.off(document, \"keyup\", this._documentKeyUpHandler);\n    isDefined(this._documentClickHandler) && eventsEngine.off(document, \"dxpointerdown\", this._documentClickHandler);\n  },\n  _dispose: function _dispose() {\n    this._removeEvents();\n\n    this.callBase();\n  },\n  _createValueEditorWithEvents: function _createValueEditorWithEvents(item, field, $container) {\n    var _this7 = this;\n\n    var value = item[2];\n\n    var createValueText = function createValueText() {\n      $container.empty();\n\n      _this7._removeEvents();\n\n      return _this7._createValueText(item, field, $container);\n    };\n\n    var closeEditor = function closeEditor() {\n      _this7._updateConditionValue(item, value, function () {\n        createValueText();\n      });\n    };\n\n    var options = {\n      value: \"\" === value ? null : value,\n      filterOperation: getOperationValue(item),\n      setValue: function setValue(data) {\n        value = null === data ? \"\" : data;\n      },\n      closeEditor: closeEditor,\n      text: $container.text()\n    };\n    $container.empty();\n\n    var $editor = this._createValueEditor($container, field, options);\n\n    eventsEngine.trigger($editor.find(\"input\").not(\":hidden\").eq(0), \"focus\");\n\n    this._removeEvents();\n\n    this._addDocumentClick($editor, closeEditor);\n\n    this._addDocumentKeyUp($editor, function (e) {\n      var keyName = normalizeKeyName(e);\n\n      if (keyName === TAB_KEY) {\n        if (_this7._isFocusOnEditorParts($editor)) {\n          return;\n        }\n\n        _this7._updateConditionValue(item, value, function () {\n          createValueText();\n\n          if (e.shiftKey) {\n            eventsEngine.trigger($container.prev(), \"focus\");\n          }\n        });\n      }\n\n      if (keyName === ESCAPE_KEY) {\n        eventsEngine.trigger(createValueText(), \"focus\");\n      }\n\n      if (keyName === ENTER_KEY) {\n        _this7._updateConditionValue(item, value, function () {\n          eventsEngine.trigger(createValueText(), \"focus\");\n        });\n      }\n    });\n\n    this._fireContentReadyAction();\n  },\n  _createValueButton: function _createValueButton(item, field) {\n    var $valueButton = $(\"<div>\").addClass(FILTER_BUILDER_ITEM_TEXT_CLASS).addClass(FILTER_BUILDER_ITEM_VALUE_CLASS);\n\n    this._createValueText(item, field, $valueButton);\n\n    return $valueButton;\n  },\n  _createValueEditor: function _createValueEditor($container, field, options) {\n    var $editor = $(\"<div>\").attr(\"tabindex\", 0).appendTo($container);\n    var customOperation = getCustomOperation(this._customOperations, options.filterOperation);\n    var editorTemplate = customOperation && customOperation.editorTemplate ? customOperation.editorTemplate : field.editorTemplate;\n\n    if (editorTemplate) {\n      var template = this._getTemplate(editorTemplate);\n\n      template.render({\n        model: extend({\n          field: field\n        }, options),\n        container: $editor\n      });\n    } else {\n      this._editorFactory.createEditor.call(this, $editor, extend({}, field, options, {\n        parentType: SOURCE\n      }));\n    }\n\n    return $editor;\n  },\n  _createPopupWithTreeView: function _createPopupWithTreeView(options, $container) {\n    var that = this;\n    var $popup = $(\"<div>\").addClass(options.menu.cssClass).appendTo($container);\n\n    this._createComponent($popup, Popup, {\n      wrapperAttr: {\n        class: options.menu.cssClass\n      },\n      onHiding: options.menu.onHiding,\n      onHidden: options.menu.onHidden,\n      rtlEnabled: options.menu.rtlEnabled,\n      position: options.menu.position,\n      animation: options.menu.animation,\n      contentTemplate: function contentTemplate(contentElement) {\n        var $menuContainer = $(\"<div>\").appendTo(contentElement);\n\n        that._createComponent($menuContainer, TreeView, options.menu);\n\n        this.repaint();\n      },\n      _ignoreFunctionValueDeprecation: true,\n      maxHeight: function maxHeight() {\n        return getElementMaxHeightByWindow(options.menu.position.of);\n      },\n      visible: true,\n      focusStateEnabled: false,\n      hideOnParentScroll: this.option(\"closePopupOnTargetScroll\"),\n      closeOnOutsideClick: true,\n      onShown: options.popup.onShown,\n      shading: false,\n      width: \"auto\",\n      height: \"auto\",\n      showTitle: false\n    });\n  },\n  _subscribeOnClickAndEnterKey: function _subscribeOnClickAndEnterKey($button, handler) {\n    eventsEngine.on($button, \"dxclick\", handler);\n    eventsEngine.on($button, \"keyup\", function (e) {\n      if (normalizeKeyName(e) === ENTER_KEY) {\n        handler(e);\n      }\n    });\n  }\n});\nregisterComponent(\"dxFilterBuilder\", FilterBuilder);\nexport default FilterBuilder;","map":null,"metadata":{},"sourceType":"module"}