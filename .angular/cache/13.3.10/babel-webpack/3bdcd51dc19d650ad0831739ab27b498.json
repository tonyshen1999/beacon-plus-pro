{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/map/provider.dynamic.google.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { getWindow } from \"../../core/utils/window\";\nvar window = getWindow();\nimport { noop } from \"../../core/utils/common\";\nimport devices from \"../../core/devices\";\nimport Promise from \"../../core/polyfills/promise\";\nimport { extend } from \"../../core/utils/extend\";\nimport { map } from \"../../core/utils/iterator\";\nimport DynamicProvider from \"./provider.dynamic\";\nimport errors from \"../widget/ui.errors\";\nimport Color from \"../../color\";\nimport ajax from \"../../core/utils/ajax\";\nimport { isDefined } from \"../../core/utils/type\";\nvar GOOGLE_MAP_READY = \"_googleScriptReady\";\nvar GOOGLE_URL = \"https://maps.googleapis.com/maps/api/js?callback=\" + GOOGLE_MAP_READY;\nvar INFO_WINDOW_CLASS = \"gm-style-iw\";\nvar CustomMarker;\n\nvar initCustomMarkerClass = function initCustomMarkerClass() {\n  CustomMarker = function CustomMarker(options) {\n    this._position = options.position;\n    this._offset = options.offset;\n    this._$overlayContainer = $(\"<div>\").css({\n      position: \"absolute\",\n      display: \"none\",\n      cursor: \"pointer\"\n    }).append(options.html);\n    this.setMap(options.map);\n  };\n\n  CustomMarker.prototype = new google.maps.OverlayView();\n\n  CustomMarker.prototype.onAdd = function () {\n    var $pane = $(this.getPanes().overlayMouseTarget);\n    $pane.append(this._$overlayContainer);\n    this._clickListener = google.maps.event.addDomListener(this._$overlayContainer.get(0), \"click\", function (e) {\n      google.maps.event.trigger(this, \"click\");\n      e.preventDefault();\n    }.bind(this));\n    this.draw();\n  };\n\n  CustomMarker.prototype.onRemove = function () {\n    google.maps.event.removeListener(this._clickListener);\n\n    this._$overlayContainer.remove();\n  };\n\n  CustomMarker.prototype.draw = function () {\n    var position = this.getProjection().fromLatLngToDivPixel(this._position);\n\n    this._$overlayContainer.css({\n      left: position.x + this._offset.left,\n      top: position.y + this._offset.top,\n      display: \"block\"\n    });\n  };\n};\n\nvar googleMapsLoaded = function googleMapsLoaded() {\n  return window.google && window.google.maps;\n};\n\nvar googleMapsLoader;\nvar GoogleProvider = DynamicProvider.inherit({\n  _mapType: function _mapType(type) {\n    var mapTypes = {\n      hybrid: google.maps.MapTypeId.HYBRID,\n      roadmap: google.maps.MapTypeId.ROADMAP,\n      satellite: google.maps.MapTypeId.SATELLITE\n    };\n    return mapTypes[type] || mapTypes.hybrid;\n  },\n  _movementMode: function _movementMode(type) {\n    var movementTypes = {\n      driving: google.maps.TravelMode.DRIVING,\n      walking: google.maps.TravelMode.WALKING\n    };\n    return movementTypes[type] || movementTypes.driving;\n  },\n  _resolveLocation: function _resolveLocation(location) {\n    return new Promise(function (resolve) {\n      var latLng = this._getLatLng(location);\n\n      if (latLng) {\n        resolve(new google.maps.LatLng(latLng.lat, latLng.lng));\n      } else {\n        this._geocodeLocation(location).then(function (geocodedLocation) {\n          resolve(geocodedLocation);\n        });\n      }\n    }.bind(this));\n  },\n  _geocodedLocations: {},\n  _geocodeLocationImpl: function _geocodeLocationImpl(location) {\n    return new Promise(function (resolve) {\n      if (!isDefined(location)) {\n        resolve(new google.maps.LatLng(0, 0));\n        return;\n      }\n\n      var geocoder = new google.maps.Geocoder();\n      geocoder.geocode({\n        address: location\n      }, function (results, status) {\n        if (status === google.maps.GeocoderStatus.OK) {\n          resolve(results[0].geometry.location);\n        } else {\n          errors.log(\"W1006\", status);\n          resolve(new google.maps.LatLng(0, 0));\n        }\n      });\n    });\n  },\n  _normalizeLocation: function _normalizeLocation(location) {\n    return {\n      lat: location.lat(),\n      lng: location.lng()\n    };\n  },\n  _normalizeLocationRect: function _normalizeLocationRect(locationRect) {\n    return {\n      northEast: this._normalizeLocation(locationRect.getNorthEast()),\n      southWest: this._normalizeLocation(locationRect.getSouthWest())\n    };\n  },\n  _loadImpl: function _loadImpl() {\n    return new Promise(function (resolve) {\n      if (googleMapsLoaded()) {\n        resolve();\n      } else {\n        if (!googleMapsLoader) {\n          googleMapsLoader = this._loadMapScript();\n        }\n\n        googleMapsLoader.then(function () {\n          if (googleMapsLoaded()) {\n            resolve();\n            return;\n          }\n\n          this._loadMapScript().then(resolve);\n        }.bind(this));\n      }\n    }.bind(this)).then(function () {\n      initCustomMarkerClass();\n    });\n  },\n  _loadMapScript: function _loadMapScript() {\n    return new Promise(function (resolve) {\n      var key = this._keyOption(\"google\");\n\n      window[GOOGLE_MAP_READY] = resolve;\n      ajax.sendRequest({\n        url: GOOGLE_URL + (key ? \"&key=\" + key : \"\"),\n        dataType: \"script\"\n      });\n    }.bind(this)).then(function () {\n      try {\n        delete window[GOOGLE_MAP_READY];\n      } catch (e) {\n        window[GOOGLE_MAP_READY] = void 0;\n      }\n    });\n  },\n  _init: function _init() {\n    return new Promise(function (resolve) {\n      this._resolveLocation(this._option(\"center\")).then(function (center) {\n        var showDefaultUI = this._option(\"controls\");\n\n        this._map = new google.maps.Map(this._$container[0], {\n          zoom: this._option(\"zoom\"),\n          center: center,\n          disableDefaultUI: !showDefaultUI\n        });\n        var listener = google.maps.event.addListener(this._map, \"idle\", function () {\n          resolve(listener);\n        });\n      }.bind(this));\n    }.bind(this)).then(function (listener) {\n      google.maps.event.removeListener(listener);\n    });\n  },\n  _attachHandlers: function _attachHandlers() {\n    this._boundsChangeListener = google.maps.event.addListener(this._map, \"bounds_changed\", this._boundsChangeHandler.bind(this));\n    this._clickListener = google.maps.event.addListener(this._map, \"click\", this._clickActionHandler.bind(this));\n  },\n  _boundsChangeHandler: function _boundsChangeHandler() {\n    var bounds = this._map.getBounds();\n\n    this._option(\"bounds\", this._normalizeLocationRect(bounds));\n\n    var center = this._map.getCenter();\n\n    this._option(\"center\", this._normalizeLocation(center));\n\n    if (!this._preventZoomChangeEvent) {\n      this._option(\"zoom\", this._map.getZoom());\n    }\n  },\n  _clickActionHandler: function _clickActionHandler(e) {\n    this._fireClickAction({\n      location: this._normalizeLocation(e.latLng)\n    });\n  },\n  updateDimensions: function updateDimensions() {\n    var center = this._option(\"center\");\n\n    google.maps.event.trigger(this._map, \"resize\");\n\n    this._option(\"center\", center);\n\n    return this.updateCenter();\n  },\n  updateMapType: function updateMapType() {\n    this._map.setMapTypeId(this._mapType(this._option(\"type\")));\n\n    return Promise.resolve();\n  },\n  updateBounds: function updateBounds() {\n    return Promise.all([this._resolveLocation(this._option(\"bounds.northEast\")), this._resolveLocation(this._option(\"bounds.southWest\"))]).then(function (result) {\n      var bounds = new google.maps.LatLngBounds();\n      bounds.extend(result[0]);\n      bounds.extend(result[1]);\n\n      this._map.fitBounds(bounds);\n    }.bind(this));\n  },\n  updateCenter: function updateCenter() {\n    return this._resolveLocation(this._option(\"center\")).then(function (center) {\n      this._map.setCenter(center);\n\n      this._option(\"center\", this._normalizeLocation(center));\n    }.bind(this));\n  },\n  updateZoom: function updateZoom() {\n    this._map.setZoom(this._option(\"zoom\"));\n\n    return Promise.resolve();\n  },\n  updateControls: function updateControls() {\n    var showDefaultUI = this._option(\"controls\");\n\n    this._map.setOptions({\n      disableDefaultUI: !showDefaultUI\n    });\n\n    return Promise.resolve();\n  },\n  isEventsCanceled: function isEventsCanceled(e) {\n    var gestureHandling = this._map && this._map.get(\"gestureHandling\");\n\n    var isInfoWindowContent = $(e.target).closest(\".\".concat(INFO_WINDOW_CLASS)).length > 0;\n\n    if (isInfoWindowContent || \"desktop\" !== devices.real().deviceType && \"cooperative\" === gestureHandling) {\n      return false;\n    }\n\n    return this.callBase();\n  },\n  _renderMarker: function _renderMarker(options) {\n    return this._resolveLocation(options.location).then(function (location) {\n      var marker;\n\n      if (options.html) {\n        marker = new CustomMarker({\n          map: this._map,\n          position: location,\n          html: options.html,\n          offset: extend({\n            top: 0,\n            left: 0\n          }, options.htmlOffset)\n        });\n      } else {\n        marker = new google.maps.Marker({\n          position: location,\n          map: this._map,\n          icon: options.iconSrc || this._option(\"markerIconSrc\")\n        });\n      }\n\n      var infoWindow = this._renderTooltip(marker, options.tooltip);\n\n      var listener;\n\n      if (options.onClick || options.tooltip) {\n        var markerClickAction = this._mapWidget._createAction(options.onClick || noop);\n\n        var markerNormalizedLocation = this._normalizeLocation(location);\n\n        listener = google.maps.event.addListener(marker, \"click\", function () {\n          markerClickAction({\n            location: markerNormalizedLocation\n          });\n\n          if (infoWindow) {\n            infoWindow.open(this._map, marker);\n          }\n        }.bind(this));\n      }\n\n      return {\n        location: location,\n        marker: marker,\n        listener: listener\n      };\n    }.bind(this));\n  },\n  _renderTooltip: function _renderTooltip(marker, options) {\n    if (!options) {\n      return;\n    }\n\n    options = this._parseTooltipOptions(options);\n    var infoWindow = new google.maps.InfoWindow({\n      content: options.text\n    });\n\n    if (options.visible) {\n      infoWindow.open(this._map, marker);\n    }\n\n    return infoWindow;\n  },\n  _destroyMarker: function _destroyMarker(marker) {\n    marker.marker.setMap(null);\n\n    if (marker.listener) {\n      google.maps.event.removeListener(marker.listener);\n    }\n  },\n  _renderRoute: function _renderRoute(options) {\n    return Promise.all(map(options.locations, function (point) {\n      return this._resolveLocation(point);\n    }.bind(this))).then(function (locations) {\n      return new Promise(function (resolve) {\n        var origin = locations.shift();\n        var destination = locations.pop();\n        var waypoints = map(locations, function (location) {\n          return {\n            location: location,\n            stopover: true\n          };\n        });\n        var request = {\n          origin: origin,\n          destination: destination,\n          waypoints: waypoints,\n          optimizeWaypoints: true,\n          travelMode: this._movementMode(options.mode)\n        };\n        new google.maps.DirectionsService().route(request, function (response, status) {\n          if (status === google.maps.DirectionsStatus.OK) {\n            var color = new Color(options.color || this._defaultRouteColor()).toHex();\n            var directionOptions = {\n              directions: response,\n              map: this._map,\n              suppressMarkers: true,\n              preserveViewport: true,\n              polylineOptions: {\n                strokeWeight: options.weight || this._defaultRouteWeight(),\n                strokeOpacity: options.opacity || this._defaultRouteOpacity(),\n                strokeColor: color\n              }\n            };\n            var route = new google.maps.DirectionsRenderer(directionOptions);\n            var bounds = response.routes[0].bounds;\n            resolve({\n              instance: route,\n              northEast: bounds.getNorthEast(),\n              southWest: bounds.getSouthWest()\n            });\n          } else {\n            errors.log(\"W1006\", status);\n            resolve({\n              instance: new google.maps.DirectionsRenderer({})\n            });\n          }\n        }.bind(this));\n      }.bind(this));\n    }.bind(this));\n  },\n  _destroyRoute: function _destroyRoute(routeObject) {\n    routeObject.instance.setMap(null);\n  },\n  _fitBounds: function _fitBounds() {\n    this._updateBounds();\n\n    if (this._bounds && this._option(\"autoAdjust\")) {\n      var zoomBeforeFitting = this._map.getZoom();\n\n      this._preventZoomChangeEvent = true;\n\n      this._map.fitBounds(this._bounds);\n\n      this._boundsChangeHandler();\n\n      var zoomAfterFitting = this._map.getZoom();\n\n      if (zoomBeforeFitting < zoomAfterFitting) {\n        this._map.setZoom(zoomBeforeFitting);\n      } else {\n        this._option(\"zoom\", zoomAfterFitting);\n      }\n\n      delete this._preventZoomChangeEvent;\n    }\n\n    return Promise.resolve();\n  },\n  _extendBounds: function _extendBounds(location) {\n    if (this._bounds) {\n      this._bounds.extend(location);\n    } else {\n      this._bounds = new google.maps.LatLngBounds();\n\n      this._bounds.extend(location);\n    }\n  },\n  clean: function clean() {\n    if (this._map) {\n      google.maps.event.removeListener(this._boundsChangeListener);\n      google.maps.event.removeListener(this._clickListener);\n\n      this._clearMarkers();\n\n      this._clearRoutes();\n\n      delete this._map;\n\n      this._$container.empty();\n    }\n\n    return Promise.resolve();\n  }\n});\nexport default GoogleProvider;","map":null,"metadata":{},"sourceType":"module"}