{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __decorate, __metadata, __param } from 'tslib';\nimport { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, ContentChildren, QueryList, Component, NgModule } from '@angular/core';\nimport DxAccordion from 'devextreme/ui/accordion';\nimport { DxComponent, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxiItemComponent, DxiItemModule } from 'devextreme-angular/ui/nested';\n/*!\r\n * devextreme-angular\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\n/**\r\n * The Accordion UI component contains several panels displayed one under another. These panels can be collapsed or expanded by an end user, which makes this UI component very useful for presenting information in a limited amount of space.\r\n\r\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'devextreme-angular/core';\nimport * as ɵngcc2 from '@angular/platform-browser';\nvar DxAccordionComponent = /*#__PURE__*/(function () {\n  var DxAccordionComponent = /*#__PURE__*/function (_DxComponent) {\n    _inherits(DxAccordionComponent, _DxComponent);\n\n    var _super = _createSuper(DxAccordionComponent);\n\n    function DxAccordionComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\n      var _this;\n\n      _classCallCheck(this, DxAccordionComponent);\n\n      _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n      _this._watcherHelper = _watcherHelper;\n      _this._idh = _idh;\n\n      _this._createEventEmitters([{\n        subscribe: 'contentReady',\n        emit: 'onContentReady'\n      }, {\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'itemClick',\n        emit: 'onItemClick'\n      }, {\n        subscribe: 'itemContextMenu',\n        emit: 'onItemContextMenu'\n      }, {\n        subscribe: 'itemHold',\n        emit: 'onItemHold'\n      }, {\n        subscribe: 'itemRendered',\n        emit: 'onItemRendered'\n      }, {\n        subscribe: 'itemTitleClick',\n        emit: 'onItemTitleClick'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        subscribe: 'selectionChanged',\n        emit: 'onSelectionChanged'\n      }, {\n        emit: 'accessKeyChange'\n      }, {\n        emit: 'activeStateEnabledChange'\n      }, {\n        emit: 'animationDurationChange'\n      }, {\n        emit: 'collapsibleChange'\n      }, {\n        emit: 'dataSourceChange'\n      }, {\n        emit: 'deferRenderingChange'\n      }, {\n        emit: 'disabledChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'focusStateEnabledChange'\n      }, {\n        emit: 'heightChange'\n      }, {\n        emit: 'hintChange'\n      }, {\n        emit: 'hoverStateEnabledChange'\n      }, {\n        emit: 'itemHoldTimeoutChange'\n      }, {\n        emit: 'itemsChange'\n      }, {\n        emit: 'itemTemplateChange'\n      }, {\n        emit: 'itemTitleTemplateChange'\n      }, {\n        emit: 'keyExprChange'\n      }, {\n        emit: 'multipleChange'\n      }, {\n        emit: 'noDataTextChange'\n      }, {\n        emit: 'repaintChangesOnlyChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'selectedIndexChange'\n      }, {\n        emit: 'selectedItemChange'\n      }, {\n        emit: 'selectedItemKeysChange'\n      }, {\n        emit: 'selectedItemsChange'\n      }, {\n        emit: 'tabIndexChange'\n      }, {\n        emit: 'visibleChange'\n      }, {\n        emit: 'widthChange'\n      }]);\n\n      _this._idh.setHost(_assertThisInitialized(_this));\n\n      optionHost.setHost(_assertThisInitialized(_this));\n      return _this;\n    }\n    /**\r\n     * Specifies the shortcut key that sets focus on the UI component.\r\n    \r\n     */\n\n\n    _createClass(DxAccordionComponent, [{\n      key: \"accessKey\",\n      get: function get() {\n        return this._getOption('accessKey');\n      },\n      set: function set(value) {\n        this._setOption('accessKey', value);\n      }\n      /**\r\n       * Specifies whether or not the UI component changes its state when interacting with a user.\r\n      \r\n       */\n\n    }, {\n      key: \"activeStateEnabled\",\n      get: function get() {\n        return this._getOption('activeStateEnabled');\n      },\n      set: function set(value) {\n        this._setOption('activeStateEnabled', value);\n      }\n      /**\r\n       * A number specifying the time in milliseconds spent on the animation of the expanding or collapsing of a panel.\r\n      \r\n       */\n\n    }, {\n      key: \"animationDuration\",\n      get: function get() {\n        return this._getOption('animationDuration');\n      },\n      set: function set(value) {\n        this._setOption('animationDuration', value);\n      }\n      /**\r\n       * Specifies whether all items can be collapsed or whether at least one item must always be expanded.\r\n      \r\n       */\n\n    }, {\n      key: \"collapsible\",\n      get: function get() {\n        return this._getOption('collapsible');\n      },\n      set: function set(value) {\n        this._setOption('collapsible', value);\n      }\n      /**\r\n       * Binds the UI component to data.\r\n      \r\n       */\n\n    }, {\n      key: \"dataSource\",\n      get: function get() {\n        return this._getOption('dataSource');\n      },\n      set: function set(value) {\n        this._setOption('dataSource', value);\n      }\n      /**\r\n       * Specifies whether to render the panel&apos;s content when it is displayed. If false, the content is rendered immediately.\r\n      \r\n       */\n\n    }, {\n      key: \"deferRendering\",\n      get: function get() {\n        return this._getOption('deferRendering');\n      },\n      set: function set(value) {\n        this._setOption('deferRendering', value);\n      }\n      /**\r\n       * Specifies whether the UI component responds to user interaction.\r\n      \r\n       */\n\n    }, {\n      key: \"disabled\",\n      get: function get() {\n        return this._getOption('disabled');\n      },\n      set: function set(value) {\n        this._setOption('disabled', value);\n      }\n      /**\r\n       * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n      \r\n       */\n\n    }, {\n      key: \"elementAttr\",\n      get: function get() {\n        return this._getOption('elementAttr');\n      },\n      set: function set(value) {\n        this._setOption('elementAttr', value);\n      }\n      /**\r\n       * Specifies whether the UI component can be focused using keyboard navigation.\r\n      \r\n       */\n\n    }, {\n      key: \"focusStateEnabled\",\n      get: function get() {\n        return this._getOption('focusStateEnabled');\n      },\n      set: function set(value) {\n        this._setOption('focusStateEnabled', value);\n      }\n      /**\r\n       * Specifies the UI component&apos;s height.\r\n      \r\n       */\n\n    }, {\n      key: \"height\",\n      get: function get() {\n        return this._getOption('height');\n      },\n      set: function set(value) {\n        this._setOption('height', value);\n      }\n      /**\r\n       * Specifies text for a hint that appears when a user pauses on the UI component.\r\n      \r\n       */\n\n    }, {\n      key: \"hint\",\n      get: function get() {\n        return this._getOption('hint');\n      },\n      set: function set(value) {\n        this._setOption('hint', value);\n      }\n      /**\r\n       * Specifies whether the UI component changes its state when a user pauses on it.\r\n      \r\n       */\n\n    }, {\n      key: \"hoverStateEnabled\",\n      get: function get() {\n        return this._getOption('hoverStateEnabled');\n      },\n      set: function set(value) {\n        this._setOption('hoverStateEnabled', value);\n      }\n      /**\r\n       * The time period in milliseconds before the onItemHold event is raised.\r\n      \r\n       */\n\n    }, {\n      key: \"itemHoldTimeout\",\n      get: function get() {\n        return this._getOption('itemHoldTimeout');\n      },\n      set: function set(value) {\n        this._setOption('itemHoldTimeout', value);\n      }\n      /**\r\n       * An array of items displayed by the UI component.\r\n      \r\n       */\n\n    }, {\n      key: \"items\",\n      get: function get() {\n        return this._getOption('items');\n      },\n      set: function set(value) {\n        this._setOption('items', value);\n      }\n      /**\r\n       * Specifies a custom template for items.\r\n      \r\n       */\n\n    }, {\n      key: \"itemTemplate\",\n      get: function get() {\n        return this._getOption('itemTemplate');\n      },\n      set: function set(value) {\n        this._setOption('itemTemplate', value);\n      }\n      /**\r\n       * Specifies a custom template for item titles.\r\n      \r\n       */\n\n    }, {\n      key: \"itemTitleTemplate\",\n      get: function get() {\n        return this._getOption('itemTitleTemplate');\n      },\n      set: function set(value) {\n        this._setOption('itemTitleTemplate', value);\n      }\n      /**\r\n       * Specifies the key property that provides key values to access data items. Each key value must be unique.\r\n      \r\n       */\n\n    }, {\n      key: \"keyExpr\",\n      get: function get() {\n        return this._getOption('keyExpr');\n      },\n      set: function set(value) {\n        this._setOption('keyExpr', value);\n      }\n      /**\r\n       * Specifies whether the UI component can expand several items or only a single item at once.\r\n      \r\n       */\n\n    }, {\n      key: \"multiple\",\n      get: function get() {\n        return this._getOption('multiple');\n      },\n      set: function set(value) {\n        this._setOption('multiple', value);\n      }\n      /**\r\n       * Specifies the text or HTML markup displayed by the UI component if the item collection is empty.\r\n      \r\n       */\n\n    }, {\n      key: \"noDataText\",\n      get: function get() {\n        return this._getOption('noDataText');\n      },\n      set: function set(value) {\n        this._setOption('noDataText', value);\n      }\n      /**\r\n       * Specifies whether to repaint only those elements whose data changed.\r\n      \r\n       */\n\n    }, {\n      key: \"repaintChangesOnly\",\n      get: function get() {\n        return this._getOption('repaintChangesOnly');\n      },\n      set: function set(value) {\n        this._setOption('repaintChangesOnly', value);\n      }\n      /**\r\n       * Switches the UI component to a right-to-left representation.\r\n      \r\n       */\n\n    }, {\n      key: \"rtlEnabled\",\n      get: function get() {\n        return this._getOption('rtlEnabled');\n      },\n      set: function set(value) {\n        this._setOption('rtlEnabled', value);\n      }\n      /**\r\n       * The index number of the currently expanded item.\r\n      \r\n       */\n\n    }, {\n      key: \"selectedIndex\",\n      get: function get() {\n        return this._getOption('selectedIndex');\n      },\n      set: function set(value) {\n        this._setOption('selectedIndex', value);\n      }\n      /**\r\n       * The selected item object.\r\n      \r\n       */\n\n    }, {\n      key: \"selectedItem\",\n      get: function get() {\n        return this._getOption('selectedItem');\n      },\n      set: function set(value) {\n        this._setOption('selectedItem', value);\n      }\n      /**\r\n       * Specifies an array of currently selected item keys.\r\n      \r\n       */\n\n    }, {\n      key: \"selectedItemKeys\",\n      get: function get() {\n        return this._getOption('selectedItemKeys');\n      },\n      set: function set(value) {\n        this._setOption('selectedItemKeys', value);\n      }\n      /**\r\n       * An array of currently selected item objects.\r\n      \r\n       */\n\n    }, {\n      key: \"selectedItems\",\n      get: function get() {\n        return this._getOption('selectedItems');\n      },\n      set: function set(value) {\n        this._setOption('selectedItems', value);\n      }\n      /**\r\n       * Specifies the number of the element when the Tab key is used for navigating.\r\n      \r\n       */\n\n    }, {\n      key: \"tabIndex\",\n      get: function get() {\n        return this._getOption('tabIndex');\n      },\n      set: function set(value) {\n        this._setOption('tabIndex', value);\n      }\n      /**\r\n       * Specifies whether the UI component is visible.\r\n      \r\n       */\n\n    }, {\n      key: \"visible\",\n      get: function get() {\n        return this._getOption('visible');\n      },\n      set: function set(value) {\n        this._setOption('visible', value);\n      }\n      /**\r\n       * Specifies the UI component&apos;s width.\r\n      \r\n       */\n\n    }, {\n      key: \"width\",\n      get: function get() {\n        return this._getOption('width');\n      },\n      set: function set(value) {\n        this._setOption('width', value);\n      }\n    }, {\n      key: \"itemsChildren\",\n      get: function get() {\n        return this._getOption('items');\n      },\n      set: function set(value) {\n        this.setChildren('items', value);\n      }\n    }, {\n      key: \"_createInstance\",\n      value: function _createInstance(element, options) {\n        return new DxAccordion(element, options);\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._destroyWidget();\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        _get(_getPrototypeOf(DxAccordionComponent.prototype), \"ngOnChanges\", this).call(this, changes);\n\n        this.setupChanges('dataSource', changes);\n        this.setupChanges('items', changes);\n        this.setupChanges('selectedItemKeys', changes);\n        this.setupChanges('selectedItems', changes);\n      }\n    }, {\n      key: \"setupChanges\",\n      value: function setupChanges(prop, changes) {\n        if (!(prop in this._optionsToUpdate)) {\n          this._idh.setup(prop, changes);\n        }\n      }\n    }, {\n      key: \"ngDoCheck\",\n      value: function ngDoCheck() {\n        this._idh.doCheck('dataSource');\n\n        this._idh.doCheck('items');\n\n        this._idh.doCheck('selectedItemKeys');\n\n        this._idh.doCheck('selectedItems');\n\n        this._watcherHelper.checkWatchers();\n\n        _get(_getPrototypeOf(DxAccordionComponent.prototype), \"ngDoCheck\", this).call(this);\n\n        _get(_getPrototypeOf(DxAccordionComponent.prototype), \"clearChangedOptions\", this).call(this);\n      }\n    }, {\n      key: \"_setOption\",\n      value: function _setOption(name, value) {\n        var isSetup = this._idh.setupSingle(name, value);\n\n        var isChanged = this._idh.getChanges(name, value) !== null;\n\n        if (isSetup || isChanged) {\n          _get(_getPrototypeOf(DxAccordionComponent.prototype), \"_setOption\", this).call(this, name, value);\n        }\n      }\n    }]);\n\n    return DxAccordionComponent;\n  }(DxComponent);\n\n  DxAccordionComponent.ɵfac = function DxAccordionComponent_Factory(t) {\n    return new (t || DxAccordionComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DxTemplateHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.WatcherHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IterableDifferHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TransferState), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n\n  DxAccordionComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: DxAccordionComponent,\n    selectors: [[\"dx-accordion\"]],\n    contentQueries: function DxAccordionComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, DxiItemComponent, 4);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.itemsChildren = _t);\n      }\n    },\n    inputs: {\n      accessKey: \"accessKey\",\n      activeStateEnabled: \"activeStateEnabled\",\n      animationDuration: \"animationDuration\",\n      collapsible: \"collapsible\",\n      dataSource: \"dataSource\",\n      deferRendering: \"deferRendering\",\n      disabled: \"disabled\",\n      elementAttr: \"elementAttr\",\n      focusStateEnabled: \"focusStateEnabled\",\n      height: \"height\",\n      hint: \"hint\",\n      hoverStateEnabled: \"hoverStateEnabled\",\n      itemHoldTimeout: \"itemHoldTimeout\",\n      items: \"items\",\n      itemTemplate: \"itemTemplate\",\n      itemTitleTemplate: \"itemTitleTemplate\",\n      keyExpr: \"keyExpr\",\n      multiple: \"multiple\",\n      noDataText: \"noDataText\",\n      repaintChangesOnly: \"repaintChangesOnly\",\n      rtlEnabled: \"rtlEnabled\",\n      selectedIndex: \"selectedIndex\",\n      selectedItem: \"selectedItem\",\n      selectedItemKeys: \"selectedItemKeys\",\n      selectedItems: \"selectedItems\",\n      tabIndex: \"tabIndex\",\n      visible: \"visible\",\n      width: \"width\"\n    },\n    outputs: {\n      onContentReady: \"onContentReady\",\n      onDisposing: \"onDisposing\",\n      onInitialized: \"onInitialized\",\n      onItemClick: \"onItemClick\",\n      onItemContextMenu: \"onItemContextMenu\",\n      onItemHold: \"onItemHold\",\n      onItemRendered: \"onItemRendered\",\n      onItemTitleClick: \"onItemTitleClick\",\n      onOptionChanged: \"onOptionChanged\",\n      onSelectionChanged: \"onSelectionChanged\",\n      accessKeyChange: \"accessKeyChange\",\n      activeStateEnabledChange: \"activeStateEnabledChange\",\n      animationDurationChange: \"animationDurationChange\",\n      collapsibleChange: \"collapsibleChange\",\n      dataSourceChange: \"dataSourceChange\",\n      deferRenderingChange: \"deferRenderingChange\",\n      disabledChange: \"disabledChange\",\n      elementAttrChange: \"elementAttrChange\",\n      focusStateEnabledChange: \"focusStateEnabledChange\",\n      heightChange: \"heightChange\",\n      hintChange: \"hintChange\",\n      hoverStateEnabledChange: \"hoverStateEnabledChange\",\n      itemHoldTimeoutChange: \"itemHoldTimeoutChange\",\n      itemsChange: \"itemsChange\",\n      itemTemplateChange: \"itemTemplateChange\",\n      itemTitleTemplateChange: \"itemTitleTemplateChange\",\n      keyExprChange: \"keyExprChange\",\n      multipleChange: \"multipleChange\",\n      noDataTextChange: \"noDataTextChange\",\n      repaintChangesOnlyChange: \"repaintChangesOnlyChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      selectedIndexChange: \"selectedIndexChange\",\n      selectedItemChange: \"selectedItemChange\",\n      selectedItemKeysChange: \"selectedItemKeysChange\",\n      selectedItemsChange: \"selectedItemsChange\",\n      tabIndexChange: \"tabIndexChange\",\n      visibleChange: \"visibleChange\",\n      widthChange: \"widthChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function DxAccordionComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxAccordionComponent.prototype, \"accessKey\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxAccordionComponent.prototype, \"activeStateEnabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], DxAccordionComponent.prototype, \"animationDuration\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxAccordionComponent.prototype, \"collapsible\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxAccordionComponent.prototype, \"dataSource\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxAccordionComponent.prototype, \"deferRendering\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxAccordionComponent.prototype, \"disabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxAccordionComponent.prototype, \"elementAttr\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxAccordionComponent.prototype, \"focusStateEnabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxAccordionComponent.prototype, \"height\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxAccordionComponent.prototype, \"hint\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxAccordionComponent.prototype, \"hoverStateEnabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], DxAccordionComponent.prototype, \"itemHoldTimeout\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Array), __metadata(\"design:paramtypes\", [Array])], DxAccordionComponent.prototype, \"items\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxAccordionComponent.prototype, \"itemTemplate\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxAccordionComponent.prototype, \"itemTitleTemplate\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxAccordionComponent.prototype, \"keyExpr\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxAccordionComponent.prototype, \"multiple\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxAccordionComponent.prototype, \"noDataText\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxAccordionComponent.prototype, \"repaintChangesOnly\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxAccordionComponent.prototype, \"rtlEnabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], DxAccordionComponent.prototype, \"selectedIndex\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxAccordionComponent.prototype, \"selectedItem\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Array), __metadata(\"design:paramtypes\", [Array])], DxAccordionComponent.prototype, \"selectedItemKeys\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Array), __metadata(\"design:paramtypes\", [Array])], DxAccordionComponent.prototype, \"selectedItems\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], DxAccordionComponent.prototype, \"tabIndex\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxAccordionComponent.prototype, \"visible\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxAccordionComponent.prototype, \"width\", null);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxAccordionComponent.prototype, \"onContentReady\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxAccordionComponent.prototype, \"onDisposing\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxAccordionComponent.prototype, \"onInitialized\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxAccordionComponent.prototype, \"onItemClick\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxAccordionComponent.prototype, \"onItemContextMenu\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxAccordionComponent.prototype, \"onItemHold\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxAccordionComponent.prototype, \"onItemRendered\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxAccordionComponent.prototype, \"onItemTitleClick\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxAccordionComponent.prototype, \"onOptionChanged\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxAccordionComponent.prototype, \"onSelectionChanged\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxAccordionComponent.prototype, \"accessKeyChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxAccordionComponent.prototype, \"activeStateEnabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxAccordionComponent.prototype, \"animationDurationChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxAccordionComponent.prototype, \"collapsibleChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxAccordionComponent.prototype, \"dataSourceChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxAccordionComponent.prototype, \"deferRenderingChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxAccordionComponent.prototype, \"disabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxAccordionComponent.prototype, \"elementAttrChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxAccordionComponent.prototype, \"focusStateEnabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxAccordionComponent.prototype, \"heightChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxAccordionComponent.prototype, \"hintChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxAccordionComponent.prototype, \"hoverStateEnabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxAccordionComponent.prototype, \"itemHoldTimeoutChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxAccordionComponent.prototype, \"itemsChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxAccordionComponent.prototype, \"itemTemplateChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxAccordionComponent.prototype, \"itemTitleTemplateChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxAccordionComponent.prototype, \"keyExprChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxAccordionComponent.prototype, \"multipleChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxAccordionComponent.prototype, \"noDataTextChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxAccordionComponent.prototype, \"repaintChangesOnlyChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxAccordionComponent.prototype, \"rtlEnabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxAccordionComponent.prototype, \"selectedIndexChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxAccordionComponent.prototype, \"selectedItemChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxAccordionComponent.prototype, \"selectedItemKeysChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxAccordionComponent.prototype, \"selectedItemsChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxAccordionComponent.prototype, \"tabIndexChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxAccordionComponent.prototype, \"visibleChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxAccordionComponent.prototype, \"widthChange\", void 0);\n\n  __decorate([ContentChildren(DxiItemComponent), __metadata(\"design:type\", QueryList), __metadata(\"design:paramtypes\", [Object])], DxAccordionComponent.prototype, \"itemsChildren\", null);\n\n  DxAccordionComponent = __decorate([__param(7, Inject(PLATFORM_ID)), __metadata(\"design:paramtypes\", [ElementRef, NgZone, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, TransferState, Object])], DxAccordionComponent);\n  return DxAccordionComponent;\n})();\nvar DxAccordionModule = /*#__PURE__*/(function () {\n  var DxAccordionModule = /*#__PURE__*/_createClass(function DxAccordionModule() {\n    _classCallCheck(this, DxAccordionModule);\n  });\n\n  DxAccordionModule.ɵfac = function DxAccordionModule_Factory(t) {\n    return new (t || DxAccordionModule)();\n  };\n\n  DxAccordionModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: DxAccordionModule\n  });\n  DxAccordionModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[DxiItemModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxiItemModule, DxTemplateModule]\n  });\n  return DxAccordionModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxAccordionModule, {\n    declarations: function declarations() {\n      return [DxAccordionComponent];\n    },\n    imports: function imports() {\n      return [DxiItemModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule];\n    },\n    exports: function exports() {\n      return [DxAccordionComponent, DxiItemModule, DxTemplateModule];\n    }\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DxAccordionComponent, DxAccordionModule }; //# sourceMappingURL=devextreme-angular-ui-accordion.js.map","map":null,"metadata":{},"sourceType":"module"}