{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/ui/html_editor/modules/tableResizing.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getOuterWidth, getOuterHeight, getHeight } from \"../../../core/utils/size\";\nimport $ from \"../../../core/renderer\";\nimport eventsEngine from \"../../../events/core/events_engine\";\nimport { isDefined } from \"../../../core/utils/type\";\nimport { addNamespace } from \"../../../events/utils/index\";\nimport _windowResizeCallbacks from \"../../../core/utils/resize_callbacks\";\nimport { move } from \"../../../animation/translator\";\nimport { getBoundingRect } from \"../../../core/utils/position\";\nimport BaseModule from \"./base\";\nimport Draggable from \"../../draggable\";\nimport { each } from \"../../../core/utils/iterator\";\nimport { getWindow, hasWindow } from \"../../../core/utils/window\";\nimport { extend } from \"../../../core/utils/extend\";\nimport { setLineElementsFormat, getLineElements, getAutoSizedElements, getColumnElements, unfixTableWidth } from \"../utils/table_helper\";\nvar DX_COLUMN_RESIZE_FRAME_CLASS = \"dx-table-resize-frame\";\nvar DX_COLUMN_RESIZER_CLASS = \"dx-htmleditor-column-resizer\";\nvar DX_ROW_RESIZER_CLASS = \"dx-htmleditor-row-resizer\";\nvar DEFAULTS = {\n  minColumnWidth: 40,\n  minRowHeight: 24\n};\nvar DRAGGABLE_ELEMENT_OFFSET = 2;\nvar ROUGH_OFFSET = 3;\nvar MODULE_NAMESPACE = \"dxHtmlTableResizingModule\";\nvar POINTERDOWN_EVENT = addNamespace(\"dxpointerdown\", MODULE_NAMESPACE);\nvar SCROLL_EVENT = addNamespace(\"scroll\", MODULE_NAMESPACE);\n\nvar TableResizingModule = /*#__PURE__*/function (_BaseModule) {\n  _inherits(TableResizingModule, _BaseModule);\n\n  var _super = _createSuper(TableResizingModule);\n\n  function TableResizingModule(quill, options) {\n    var _this;\n\n    _classCallCheck(this, TableResizingModule);\n\n    _this = _super.call(this, quill, options);\n    _this.enabled = !!options.enabled;\n    _this._tableResizeFrames = [];\n    _this._minColumnWidth = _this._minSizeLimit(\"minColumnWidth\", options.minColumnWidth);\n    _this._minRowHeight = _this._minSizeLimit(\"minRowHeight\", options.minRowHeight);\n    _this._quillContainer = _this.editorInstance._getQuillContainer();\n    _this._tableData = [];\n\n    if (_this.enabled) {\n      _this._applyResizing();\n    }\n\n    return _this;\n  }\n\n  _createClass(TableResizingModule, [{\n    key: \"_applyResizing\",\n    value: function _applyResizing(forcedStart) {\n      if (forcedStart) {\n        this._applyResizingImpl();\n      } else {\n        this.editorInstance.addContentInitializedCallback(this._applyResizingImpl.bind(this));\n      }\n\n      this.addCleanCallback(this.clean.bind(this));\n      this._resizeHandlerWithContext = _windowResizeCallbacks.add(this._resizeHandler.bind(this));\n    }\n  }, {\n    key: \"_minSizeLimit\",\n    value: function _minSizeLimit(propertyName, newValue) {\n      return isDefined(newValue) ? Math.max(newValue, 0) : DEFAULTS[propertyName];\n    }\n  }, {\n    key: \"_applyResizingImpl\",\n    value: function _applyResizingImpl() {\n      var $tables = this._findTables();\n\n      if ($tables.length) {\n        this._fixTablesWidths($tables);\n\n        this._createResizeFrames($tables);\n\n        this._updateFramesPositions();\n\n        this._updateFramesSeparators();\n      }\n\n      this._attachEvents();\n    }\n  }, {\n    key: \"_attachEvents\",\n    value: function _attachEvents() {\n      eventsEngine.on(this.editorInstance._getContent(), SCROLL_EVENT, this._updateFramesPositions.bind(this));\n      this.quill.on(\"text-change\", this._getQuillTextChangeHandler());\n    }\n  }, {\n    key: \"_detachEvents\",\n    value: function _detachEvents() {\n      eventsEngine.off(this.editorInstance._getContent(), MODULE_NAMESPACE);\n      this.quill.off(\"text-change\", this._quillTextChangeHandler);\n    }\n  }, {\n    key: \"_getQuillTextChangeHandler\",\n    value: function _getQuillTextChangeHandler(delta, oldContent, source) {\n      var _this2 = this;\n\n      return function (delta, oldContent, source) {\n        if (_this2._isTableChanging()) {\n          var $tables = _this2._findTables();\n\n          _this2._removeResizeFrames();\n\n          if (\"api\" === source) {\n            _this2._fixTablesWidths($tables);\n          }\n\n          _this2._updateTablesColumnsWidth($tables);\n\n          _this2._createResizeFrames($tables);\n\n          _this2._updateFramesPositions();\n\n          _this2._updateFramesSeparators();\n        } else {\n          _this2._updateFramesPositions();\n\n          if (!_this2._isDragging) {\n            _this2._updateFramesSeparators();\n          }\n        }\n      };\n    }\n  }, {\n    key: \"_getFrameForTable\",\n    value: function _getFrameForTable($table) {\n      var _this$_framesForTable;\n\n      return null === (_this$_framesForTable = this._framesForTables) || void 0 === _this$_framesForTable ? void 0 : _this$_framesForTable.get($table.get(0));\n    }\n  }, {\n    key: \"_resizeHandler\",\n    value: function _resizeHandler() {\n      var _this3 = this;\n\n      this._windowResizeTimeout = setTimeout(function () {\n        var $tables = _this3._findTables();\n\n        each($tables, function (index, table) {\n          var $table = $(table);\n          var frame = _this3._tableResizeFrames[index];\n          var actualTableWidth = getOuterWidth($table);\n\n          var lastTableWidth = _this3._tableLastWidth(frame);\n\n          if (Math.abs(actualTableWidth - lastTableWidth) > 1) {\n            _this3._tableLastWidth(frame, actualTableWidth);\n\n            _this3._updateColumnsWidth($table, index);\n          }\n        });\n\n        _this3._updateFramesPositions();\n\n        _this3._updateFramesSeparators();\n      });\n    }\n  }, {\n    key: \"_findTables\",\n    value: function _findTables() {\n      return $(this._quillContainer).find(\"table\");\n    }\n  }, {\n    key: \"_getWidthStyleValue\",\n    value: function _getWidthStyleValue($element) {\n      var styleValue = $element[0].style.width;\n      return \"\" !== styleValue ? parseInt(styleValue) : void 0;\n    }\n  }, {\n    key: \"_tableLastWidth\",\n    value: function _tableLastWidth(frame, newValue) {\n      if (isDefined(newValue)) {\n        frame.lastWidth = newValue;\n      } else {\n        return null === frame || void 0 === frame ? void 0 : frame.lastWidth;\n      }\n    }\n  }, {\n    key: \"_fixTablesWidths\",\n    value: function _fixTablesWidths($tables) {\n      var _this4 = this;\n\n      each($tables, function (index, table) {\n        var $table = $(table);\n\n        var $columnElements = _this4._getTableDeterminantElements($table, \"horizontal\");\n\n        if (!_this4._tableResizeFrames[index]) {\n          _this4._tableResizeFrames[index] = {\n            lastWidth: void 0\n          };\n        }\n\n        var frame = _this4._getFrameForTable($table);\n\n        if (!frame) {\n          _this4._tableResizeFrames.push({\n            $table: $table\n          });\n        }\n\n        if (0 === getAutoSizedElements($table).length) {\n          var _this$_tableLastWidth;\n\n          var _this4$_getColumnElem = _this4._getColumnElementsSum($columnElements),\n              columnsSum = _this4$_getColumnElem.columnsSum;\n\n          unfixTableWidth($table, {\n            quill: _this4.quill\n          });\n          var tableWidth = null !== (_this$_tableLastWidth = _this4._tableLastWidth(frame)) && void 0 !== _this$_tableLastWidth ? _this$_tableLastWidth : getOuterWidth($table);\n\n          if (frame) {\n            _this4._tableLastWidth(frame, Math.max(columnsSum, tableWidth));\n          }\n        }\n      });\n    }\n  }, {\n    key: \"_createResizeFrames\",\n    value: function _createResizeFrames($tables) {\n      var _this5 = this;\n\n      this._framesForTables = new Map();\n      $tables.each(function (index, table) {\n        var _this$_tableResizeFra;\n\n        var $table = $(table);\n        var $lastTable = null === (_this$_tableResizeFra = _this5._tableResizeFrames[index]) || void 0 === _this$_tableResizeFra ? void 0 : _this$_tableResizeFra.$table;\n        var $tableLastWidth = _this5._tableResizeFrames[index].lastWidth;\n        _this5._tableResizeFrames[index] = {\n          $frame: _this5._createTableResizeFrame(table),\n          $table: $table,\n          index: index,\n          lastWidth: $lastTable && table === $lastTable.get(0) ? $tableLastWidth : void 0,\n          columnsCount: _this5._getTableDeterminantElements($table, \"horizontal\").length,\n          rowsCount: _this5._getTableDeterminantElements($table, \"vertical\").length\n        };\n\n        _this5._framesForTables.set(table, _this5._tableResizeFrames[index]);\n      });\n      this._tableResizeFrames.length = $tables.length;\n    }\n  }, {\n    key: \"_isTableChanging\",\n    value: function _isTableChanging() {\n      var _this6 = this;\n\n      var $tables = this._findTables();\n\n      var result = false;\n\n      if ($tables.length !== this._tableResizeFrames.length) {\n        result = true;\n      } else {\n        each($tables, function (index, table) {\n          var $table = $(table);\n          var frame = _this6._tableResizeFrames[index];\n\n          var isColumnsCountChanged = (null === frame || void 0 === frame ? void 0 : frame.columnsCount) !== _this6._getTableDeterminantElements($table, \"horizontal\").length;\n\n          var isRowCountChanged = (null === frame || void 0 === frame ? void 0 : frame.rowsCount) !== _this6._getTableDeterminantElements($table, \"vertical\").length;\n\n          if (isColumnsCountChanged || isRowCountChanged) {\n            result = true;\n            return false;\n          }\n        });\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_removeResizeFrames\",\n    value: function _removeResizeFrames(clearArray) {\n      var _this7 = this;\n\n      var _this$_framesForTable2;\n\n      each(this._tableResizeFrames, function (index, resizeFrame) {\n        if (resizeFrame.$frame) {\n          var _resizeFrame$$frame;\n\n          var resizerElementsSelector = \".\".concat(DX_COLUMN_RESIZER_CLASS, \", .\").concat(DX_ROW_RESIZER_CLASS);\n\n          _this7._detachSeparatorEvents(null === (_resizeFrame$$frame = resizeFrame.$frame) || void 0 === _resizeFrame$$frame ? void 0 : _resizeFrame$$frame.find(resizerElementsSelector));\n\n          resizeFrame.$frame.remove();\n        }\n      });\n      null === (_this$_framesForTable2 = this._framesForTables) || void 0 === _this$_framesForTable2 ? void 0 : _this$_framesForTable2.clear();\n\n      if (clearArray) {\n        this._tableResizeFrames = [];\n      }\n    }\n  }, {\n    key: \"_detachSeparatorEvents\",\n    value: function _detachSeparatorEvents($lineSeparators) {\n      $lineSeparators.each(function (i, $lineSeparator) {\n        eventsEngine.off($lineSeparator, POINTERDOWN_EVENT);\n      });\n    }\n  }, {\n    key: \"_createTableResizeFrame\",\n    value: function _createTableResizeFrame() {\n      return $(\"<div>\").addClass(DX_COLUMN_RESIZE_FRAME_CLASS).appendTo(this._quillContainer);\n    }\n  }, {\n    key: \"_updateFramesPositions\",\n    value: function _updateFramesPositions() {\n      var _this8 = this;\n\n      each(this._tableResizeFrames, function (index, tableResizeFrame) {\n        _this8._updateFramePosition(tableResizeFrame.$table, tableResizeFrame.$frame);\n      });\n    }\n  }, {\n    key: \"_updateFramePosition\",\n    value: function _updateFramePosition($table, $frame) {\n      var _getBoundingRect = getBoundingRect($table.get(0)),\n          height = _getBoundingRect.height,\n          width = _getBoundingRect.width,\n          targetTop = _getBoundingRect.top,\n          targetLeft = _getBoundingRect.left;\n\n      var _getBoundingRect2 = getBoundingRect(this.quill.root),\n          containerTop = _getBoundingRect2.top,\n          containerLeft = _getBoundingRect2.left;\n\n      $frame.css({\n        height: height,\n        width: width,\n        top: targetTop - containerTop,\n        left: targetLeft - containerLeft\n      });\n      move($frame, {\n        left: 0,\n        top: 0\n      });\n    }\n  }, {\n    key: \"_updateFramesSeparators\",\n    value: function _updateFramesSeparators(direction) {\n      var _this9 = this;\n\n      each(this._tableResizeFrames, function (index, frame) {\n        if (direction) {\n          _this9._updateFrameSeparators(frame, direction);\n        } else {\n          _this9._updateFrameSeparators(frame, \"vertical\");\n\n          _this9._updateFrameSeparators(frame, \"horizontal\");\n        }\n      });\n    }\n  }, {\n    key: \"_isDraggable\",\n    value: function _isDraggable($element) {\n      return $element.hasClass(\"dx-draggable\") && $element.is(\":visible\");\n    }\n  }, {\n    key: \"_removeDraggable\",\n    value: function _removeDraggable($currentLineSeparator, lineResizerClass) {\n      if (this._isDraggable($currentLineSeparator)) {\n        var draggable = $($currentLineSeparator).dxDraggable(\"instance\");\n        draggable.dispose();\n        $($currentLineSeparator).addClass(lineResizerClass);\n      }\n    }\n  }, {\n    key: \"_getDirectionInfo\",\n    value: function _getDirectionInfo(direction) {\n      if (\"vertical\" === direction) {\n        return {\n          lineResizerClass: DX_ROW_RESIZER_CLASS,\n          sizeFunction: function sizeFunction(x) {\n            return getOuterHeight(x);\n          },\n          positionCoordinate: \"top\",\n          positionStyleProperty: \"height\",\n          positionCoordinateName: \"y\"\n        };\n      } else {\n        return {\n          lineResizerClass: DX_COLUMN_RESIZER_CLASS,\n          sizeFunction: function sizeFunction(x) {\n            return getOuterWidth(x);\n          },\n          positionCoordinate: this.editorInstance.option(\"rtlEnabled\") ? \"right\" : \"left\",\n          positionStyleProperty: \"width\",\n          positionCoordinateName: \"x\"\n        };\n      }\n    }\n  }, {\n    key: \"_getSize\",\n    value: function _getSize($element, directionInfo) {\n      return directionInfo.sizeFunction($element);\n    }\n  }, {\n    key: \"_updateFrameSeparators\",\n    value: function _updateFrameSeparators(frame, direction) {\n      var $determinantElements = this._getTableDeterminantElements(frame.$table, direction);\n\n      var determinantElementsCount = $determinantElements.length;\n      var determinantElementsSeparatorsCount = determinantElementsCount - 1;\n\n      var directionInfo = this._getDirectionInfo(direction);\n\n      var lineSeparators = frame.$frame.find(\".\".concat(directionInfo.lineResizerClass));\n      var styleOptions = {\n        transform: \"none\"\n      };\n      var currentPosition = 0;\n\n      for (var i = 0; i <= determinantElementsSeparatorsCount; i++) {\n        currentPosition += this._getSize($determinantElements.eq(i), directionInfo);\n\n        if (!isDefined(lineSeparators[i])) {\n          lineSeparators[i] = $(\"<div>\").addClass(directionInfo.lineResizerClass).appendTo(frame.$frame).get(0);\n        }\n\n        var $currentLineSeparator = $(lineSeparators[i]);\n\n        this._removeDraggable($currentLineSeparator, directionInfo.lineResizerClass);\n\n        styleOptions[directionInfo.positionCoordinate] = currentPosition - DRAGGABLE_ELEMENT_OFFSET;\n        $($currentLineSeparator).css(styleOptions);\n        var attachSeparatorData = {\n          lineSeparator: lineSeparators[i],\n          index: i,\n          $determinantElements: $determinantElements,\n          frame: frame,\n          direction: direction\n        };\n\n        this._attachColumnSeparatorEvents(attachSeparatorData);\n      }\n    }\n  }, {\n    key: \"_getTableDeterminantElements\",\n    value: function _getTableDeterminantElements($table, direction) {\n      if (\"vertical\" === direction) {\n        return $table.find(\"th:first-child, td:first-child\");\n      } else {\n        return getColumnElements($table);\n      }\n    }\n  }, {\n    key: \"_attachColumnSeparatorEvents\",\n    value: function _attachColumnSeparatorEvents(options) {\n      var _this10 = this;\n\n      eventsEngine.on(options.lineSeparator, POINTERDOWN_EVENT, function () {\n        _this10._createDraggableElement(options);\n      });\n    }\n  }, {\n    key: \"_dragStartHandler\",\n    value: function _dragStartHandler(_ref) {\n      var $determinantElements = _ref.$determinantElements,\n          index = _ref.index,\n          frame = _ref.frame,\n          direction = _ref.direction,\n          lineSeparator = _ref.lineSeparator;\n\n      var directionInfo = this._getDirectionInfo(direction);\n\n      this._isDragging = true;\n\n      this._fixColumnsWidth(frame.$table);\n\n      this._startLineSize = parseInt(this._getSize($($determinantElements[index]), directionInfo));\n      this._startTableWidth = getOuterWidth(frame.$table);\n      this._startLineSeparatorPosition = parseInt($(lineSeparator).css(directionInfo.positionCoordinate));\n      this._nextLineSize = 0;\n\n      if ($determinantElements[index + 1]) {\n        this._nextLineSize = parseInt(this._getSize($($determinantElements[index + 1]), directionInfo));\n      } else if (\"horizontal\" === direction) {\n        unfixTableWidth(frame.$table, {\n          quill: this.quill\n        });\n      }\n    }\n  }, {\n    key: \"_shouldRevertOffset\",\n    value: function _shouldRevertOffset(direction) {\n      return \"horizontal\" === direction && this.editorInstance.option(\"rtlEnabled\");\n    }\n  }, {\n    key: \"_isNextColumnWidthEnough\",\n    value: function _isNextColumnWidthEnough(nextColumnNewSize, $nextColumnElement, eventOffset) {\n      if (!this._nextLineSize) {\n        return true;\n      } else if (nextColumnNewSize >= this._minColumnWidth) {\n        var isWidthIncreased = this._nextColumnOffsetLimit ? eventOffset < this._nextColumnOffsetLimit : eventOffset < 0;\n        var isWidthLimited = Math.abs(this._getWidthStyleValue($nextColumnElement) - getOuterWidth($nextColumnElement)) > ROUGH_OFFSET;\n        return isWidthIncreased || !isWidthLimited;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_shouldSetNextColumnWidth\",\n    value: function _shouldSetNextColumnWidth(nextColumnNewSize) {\n      return this._nextLineSize && nextColumnNewSize > 0;\n    }\n  }, {\n    key: \"_horizontalDragHandler\",\n    value: function _horizontalDragHandler(_ref2) {\n      var currentLineNewSize = _ref2.currentLineNewSize,\n          directionInfo = _ref2.directionInfo,\n          eventOffset = _ref2.eventOffset,\n          $determinantElements = _ref2.$determinantElements,\n          index = _ref2.index,\n          frame = _ref2.frame;\n      var nextColumnNewSize = this._nextLineSize && this._nextLineSize - eventOffset;\n      var isCurrentColumnWidthEnough = currentLineNewSize >= this._minColumnWidth;\n      var $lineElements = getLineElements(frame.$table, index);\n      var $nextLineElements = getLineElements(frame.$table, index + 1);\n      var realWidthDiff = getOuterWidth($lineElements.eq(0)) - currentLineNewSize;\n\n      if (isCurrentColumnWidthEnough) {\n        if (this._isNextColumnWidthEnough(nextColumnNewSize, $determinantElements.eq(index + 1), eventOffset)) {\n          setLineElementsFormat(this, {\n            elements: $lineElements,\n            property: directionInfo.positionStyleProperty,\n            value: currentLineNewSize\n          });\n\n          if (this._shouldSetNextColumnWidth(nextColumnNewSize)) {\n            setLineElementsFormat(this, {\n              elements: $nextLineElements,\n              property: directionInfo.positionStyleProperty,\n              value: nextColumnNewSize\n            });\n          }\n\n          var isTableWidthChanged = Math.abs(this._startTableWidth - getOuterWidth(frame.$table)) < ROUGH_OFFSET;\n          var shouldRevertNewValue = Math.abs(realWidthDiff) > ROUGH_OFFSET || !this._nextLineSize && isTableWidthChanged;\n\n          if (shouldRevertNewValue) {\n            setLineElementsFormat(this, {\n              elements: $lineElements,\n              property: directionInfo.positionStyleProperty,\n              value: getOuterWidth($lineElements.eq(0))\n            });\n            nextColumnNewSize += currentLineNewSize - getOuterWidth($lineElements.eq(0));\n\n            if (this._shouldSetNextColumnWidth(nextColumnNewSize)) {\n              setLineElementsFormat(this, {\n                elements: $nextLineElements,\n                property: directionInfo.positionStyleProperty,\n                value: nextColumnNewSize\n              });\n            }\n          }\n        } else {\n          this._nextColumnOffsetLimit = this._nextColumnOffsetLimit || eventOffset;\n        }\n      }\n\n      this._$highlightedElement.css(directionInfo.positionCoordinate, this._startLineSeparatorPosition + eventOffset + realWidthDiff + \"px\");\n    }\n  }, {\n    key: \"_verticalDragHandler\",\n    value: function _verticalDragHandler(_ref3) {\n      var currentLineNewSize = _ref3.currentLineNewSize,\n          directionInfo = _ref3.directionInfo,\n          eventOffset = _ref3.eventOffset,\n          $determinantElements = _ref3.$determinantElements,\n          index = _ref3.index,\n          frame = _ref3.frame;\n      var newHeight = Math.max(currentLineNewSize, this._minRowHeight);\n      var $lineElements = getLineElements(frame.$table, index, \"vertical\");\n      setLineElementsFormat(this, {\n        elements: $lineElements,\n        property: directionInfo.positionStyleProperty,\n        value: newHeight\n      });\n      var rowHeightDiff = getOuterHeight($determinantElements.eq(index)) - currentLineNewSize;\n\n      this._$highlightedElement.css(directionInfo.positionCoordinate, this._startLineSeparatorPosition + eventOffset + rowHeightDiff + \"px\");\n    }\n  }, {\n    key: \"_dragMoveHandler\",\n    value: function _dragMoveHandler(event, _ref4) {\n      var $determinantElements = _ref4.$determinantElements,\n          index = _ref4.index,\n          frame = _ref4.frame,\n          direction = _ref4.direction;\n\n      var directionInfo = this._getDirectionInfo(direction);\n\n      var eventOffset = event.offset[directionInfo.positionCoordinateName];\n\n      this.editorInstance._saveValueChangeEvent(event);\n\n      if (this._shouldRevertOffset(direction)) {\n        eventOffset = -eventOffset;\n      }\n\n      var currentLineNewSize = this._startLineSize + eventOffset;\n\n      if (\"horizontal\" === direction) {\n        this._horizontalDragHandler({\n          currentLineNewSize: currentLineNewSize,\n          directionInfo: directionInfo,\n          eventOffset: eventOffset,\n          $determinantElements: $determinantElements,\n          index: index,\n          frame: frame\n        });\n      } else {\n        this._verticalDragHandler({\n          currentLineNewSize: currentLineNewSize,\n          directionInfo: directionInfo,\n          eventOffset: eventOffset,\n          $determinantElements: $determinantElements,\n          index: index,\n          frame: frame\n        });\n      }\n\n      this._updateFramePosition(frame.$table, frame.$frame);\n    }\n  }, {\n    key: \"_dragEndHandler\",\n    value: function _dragEndHandler(options) {\n      var _this$_$highlightedEl;\n\n      null === (_this$_$highlightedEl = this._$highlightedElement) || void 0 === _this$_$highlightedEl ? void 0 : _this$_$highlightedEl.remove();\n      this._isDragging = void 0;\n      this._nextColumnOffsetLimit = void 0;\n\n      this._tableLastWidth(options.frame, getOuterWidth(options.frame.$table));\n\n      this._updateFramesPositions();\n\n      this._updateFramesSeparators();\n    }\n  }, {\n    key: \"_isLastColumnResizing\",\n    value: function _isLastColumnResizing(_ref5) {\n      var $determinantElements = _ref5.$determinantElements,\n          index = _ref5.index;\n      return !isDefined($determinantElements[index + 1]);\n    }\n  }, {\n    key: \"_getBoundaryConfig\",\n    value: function _getBoundaryConfig(options) {\n      var result = {};\n\n      if (\"vertical\" === options.direction) {\n        result.boundary = options.frame.$table;\n        result.boundOffset = {\n          bottom: hasWindow() ? -getHeight(getWindow()) : -getOuterHeight(this._quillContainer),\n          top: 0,\n          left: 0,\n          right: 0\n        };\n      } else if (!this._isLastColumnResizing(options)) {\n        result.boundary = options.frame.$table;\n      } else {\n        var $content = this.editorInstance._getContent();\n\n        result.boundary = $content;\n        result.boundOffset = {\n          bottom: 0,\n          top: 0,\n          left: $content.css(\"paddingLeft\"),\n          right: $content.css(\"paddingRight\")\n        };\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_createDraggableElement\",\n    value: function _createDraggableElement(options) {\n      var _this11 = this;\n\n      var _this$_$highlightedEl2;\n\n      var boundaryConfig = this._getBoundaryConfig(options);\n\n      var directionClass = \"vertical\" === options.direction ? \"dx-htmleditor-highlighted-row\" : \"dx-htmleditor-highlighted-column\";\n      null === (_this$_$highlightedEl2 = this._$highlightedElement) || void 0 === _this$_$highlightedEl2 ? void 0 : _this$_$highlightedEl2.remove();\n      this._$highlightedElement = $(\"<div>\").addClass(\"\".concat(directionClass)).insertAfter($(options.lineSeparator));\n      var config = {\n        contentTemplate: null,\n        allowMoveByClick: false,\n        dragDirection: options.direction,\n        onDragMove: function onDragMove(_ref6) {\n          var component = _ref6.component,\n              event = _ref6.event;\n\n          _this11._dragMoveHandler(event, options);\n        },\n        onDragStart: function onDragStart() {\n          _this11._dragStartHandler(options);\n        },\n        onDragEnd: function onDragEnd() {\n          _this11._dragEndHandler(options);\n        }\n      };\n      extend(config, boundaryConfig);\n      this._currentDraggableElement = this.editorInstance._createComponent(options.lineSeparator, Draggable, config);\n    }\n  }, {\n    key: \"_fixColumnsWidth\",\n    value: function _fixColumnsWidth($table) {\n      var _this12 = this;\n\n      var determinantElements = this._getTableDeterminantElements($table);\n\n      each(determinantElements, function (index, element) {\n        var columnWidth = getOuterWidth(element);\n        var $lineElements = getLineElements($table, index);\n        setLineElementsFormat(_this12, {\n          elements: $lineElements,\n          property: \"width\",\n          value: Math.max(columnWidth, _this12._minColumnWidth)\n        });\n      });\n    }\n  }, {\n    key: \"_getColumnElementsSum\",\n    value: function _getColumnElementsSum(columnElements) {\n      var _this13 = this;\n\n      var columnsWidths = [];\n      var columnsSum = 0;\n      each(columnElements, function (index, element) {\n        var $element = $(element);\n        var columnWidth = _this13._getWidthStyleValue($element) || getOuterWidth($element);\n        columnsWidths[index] = Math.max(columnWidth, _this13._minColumnWidth);\n        columnsSum += columnsWidths[index];\n      });\n      return {\n        columnsWidths: columnsWidths,\n        columnsSum: columnsSum\n      };\n    }\n  }, {\n    key: \"_setColumnsRatioWidth\",\n    value: function _setColumnsRatioWidth(columnElements, ratio, columnsWidths, $table) {\n      var _this14 = this;\n\n      each(columnElements, function (index) {\n        var $lineElements = getLineElements($table, index);\n        var resultWidth;\n\n        if (ratio > 0) {\n          resultWidth = _this14._minColumnWidth + Math.round((columnsWidths[index] - _this14._minColumnWidth) * ratio);\n        } else {\n          resultWidth = _this14._minColumnWidth;\n        }\n\n        setLineElementsFormat(_this14, {\n          elements: $lineElements,\n          property: \"width\",\n          value: resultWidth\n        });\n      });\n    }\n  }, {\n    key: \"_updateColumnsWidth\",\n    value: function _updateColumnsWidth($table, frameIndex) {\n      var determinantElements = this._getTableDeterminantElements($table);\n\n      var frame = this._tableResizeFrames[frameIndex];\n\n      if (!frame) {\n        this._tableResizeFrames[frameIndex] = {};\n      }\n\n      frame = this._tableResizeFrames[frameIndex];\n      var tableWidth = this._tableLastWidth(frame) || getOuterWidth($table);\n      var ratio;\n\n      var _this$_getColumnEleme = this._getColumnElementsSum(determinantElements),\n          columnsWidths = _this$_getColumnEleme.columnsWidths,\n          columnsSum = _this$_getColumnEleme.columnsSum;\n\n      var minWidthForColumns = determinantElements.length * this._minColumnWidth;\n\n      if (columnsSum > minWidthForColumns) {\n        ratio = (tableWidth - minWidthForColumns) / (columnsSum - minWidthForColumns);\n      } else {\n        ratio = -1;\n      }\n\n      this._tableLastWidth(frame, ratio > 0 ? tableWidth : minWidthForColumns);\n\n      this._setColumnsRatioWidth(determinantElements, ratio, columnsWidths, $table);\n    }\n  }, {\n    key: \"_updateTablesColumnsWidth\",\n    value: function _updateTablesColumnsWidth($tables) {\n      var _this15 = this;\n\n      each($tables, function (index, table) {\n        _this15._updateColumnsWidth($(table), index);\n      });\n    }\n  }, {\n    key: \"option\",\n    value: function option(_option, value) {\n      if (\"tableResizing\" === _option) {\n        this.handleOptionChangeValue(value);\n        return;\n      }\n\n      if (\"enabled\" === _option) {\n        this.enabled = value;\n        value ? this._applyResizing(true) : this.clean();\n      } else if ([\"minColumnWidth\", \"minRowHeight\"].includes(_option)) {\n        this[\"_\".concat(_option)] = this._minSizeLimit(_option, value);\n      }\n    }\n  }, {\n    key: \"clean\",\n    value: function clean() {\n      this._removeResizeFrames(true);\n\n      this._detachEvents();\n\n      _windowResizeCallbacks.remove(this._resizeHandlerWithContext);\n\n      clearTimeout(this._windowResizeTimeout);\n      this._resizeHandlerWithContext = void 0;\n      this._isDragging = void 0;\n      this._startTableWidth = void 0;\n      clearTimeout(this._attachResizerTimeout);\n    }\n  }]);\n\n  return TableResizingModule;\n}(BaseModule);\n\nexport { TableResizingModule as default };","map":null,"metadata":{},"sourceType":"module"}