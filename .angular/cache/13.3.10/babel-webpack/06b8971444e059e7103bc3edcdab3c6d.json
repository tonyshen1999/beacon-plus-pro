{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/collection/ui.collection_widget.base.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getOuterWidth } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { ensureDefined, deferRenderer, noop } from \"../../core/utils/common\";\nimport { findTemplates } from \"../../core/utils/template_manager\";\nimport { getPublicElement } from \"../../core/element\";\nimport domAdapter from \"../../core/dom_adapter\";\nimport { isPlainObject, isFunction, isDefined } from \"../../core/utils/type\";\nimport { when } from \"../../core/utils/deferred\";\nimport { extend } from \"../../core/utils/extend\";\nimport { inArray } from \"../../core/utils/array\";\nimport { each } from \"../../core/utils/iterator\";\nimport Action from \"../../core/action\";\nimport Guid from \"../../core/guid\";\nimport Widget from \"../widget/ui.widget\";\nimport { addNamespace, isCommandKeyPressed } from \"../../events/utils/index\";\nimport pointerEvents from \"../../events/pointer\";\nimport DataHelperMixin from \"../../data_helper\";\nimport CollectionWidgetItem from \"./item\";\nimport { focusable } from \"../widget/selectors\";\nimport messageLocalization from \"../../localization/message\";\nimport holdEvent from \"../../events/hold\";\nimport { compileGetter } from \"../../core/utils/data\";\nimport { name as clickEventName } from \"../../events/click\";\nimport { name as contextMenuEventName } from \"../../events/contextmenu\";\nimport { BindableTemplate } from \"../../core/templates/bindable_template\";\nvar COLLECTION_CLASS = \"dx-collection\";\nvar ITEM_CLASS = \"dx-item\";\nvar CONTENT_CLASS_POSTFIX = \"-content\";\nvar ITEM_CONTENT_PLACEHOLDER_CLASS = \"dx-item-content-placeholder\";\nvar ITEM_DATA_KEY = \"dxItemData\";\nvar ITEM_INDEX_KEY = \"dxItemIndex\";\nvar ITEM_TEMPLATE_ID_PREFIX = \"tmpl-\";\nvar ITEMS_OPTIONS_NAME = \"dxItem\";\nvar SELECTED_ITEM_CLASS = \"dx-item-selected\";\nvar ITEM_RESPONSE_WAIT_CLASS = \"dx-item-response-wait\";\nvar EMPTY_COLLECTION = \"dx-empty-collection\";\nvar TEMPLATE_WRAPPER_CLASS = \"dx-template-wrapper\";\nvar ITEM_PATH_REGEX = /^([^.]+\\[\\d+\\]\\.)+([\\w.]+)$/;\nvar ANONYMOUS_TEMPLATE_NAME = \"item\";\nvar FOCUS_UP = \"up\";\nvar FOCUS_DOWN = \"down\";\nvar FOCUS_LEFT = \"left\";\nvar FOCUS_RIGHT = \"right\";\nvar FOCUS_PAGE_UP = \"pageup\";\nvar FOCUS_PAGE_DOWN = \"pagedown\";\nvar FOCUS_LAST = \"last\";\nvar FOCUS_FIRST = \"first\";\nvar CollectionWidget = Widget.inherit({\n  _activeStateUnit: \".\" + ITEM_CLASS,\n  _supportedKeys: function _supportedKeys() {\n    var enter = function enter(e) {\n      var $itemElement = $(this.option(\"focusedElement\"));\n\n      if (!$itemElement.length) {\n        return;\n      }\n\n      this._itemClickHandler(extend({}, e, {\n        target: $itemElement.get(0),\n        currentTarget: $itemElement.get(0)\n      }));\n    };\n\n    var move = function move(location, e) {\n      if (!isCommandKeyPressed(e)) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this._moveFocus(location, e);\n      }\n    };\n\n    return extend(this.callBase(), {\n      space: function space(e) {\n        e.preventDefault();\n        enter.call(this, e);\n      },\n      enter: enter,\n      leftArrow: move.bind(this, FOCUS_LEFT),\n      rightArrow: move.bind(this, FOCUS_RIGHT),\n      upArrow: move.bind(this, FOCUS_UP),\n      downArrow: move.bind(this, FOCUS_DOWN),\n      pageUp: move.bind(this, FOCUS_UP),\n      pageDown: move.bind(this, FOCUS_DOWN),\n      home: move.bind(this, FOCUS_FIRST),\n      end: move.bind(this, FOCUS_LAST)\n    });\n  },\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      selectOnFocus: false,\n      loopItemFocus: true,\n      items: [],\n      itemTemplate: \"item\",\n      onItemRendered: null,\n      onItemClick: null,\n      onItemHold: null,\n      itemHoldTimeout: 750,\n      onItemContextMenu: null,\n      onFocusedItemChanged: null,\n      noDataText: messageLocalization.format(\"dxCollectionWidget-noDataText\"),\n      dataSource: null,\n      _itemAttributes: {},\n      itemTemplateProperty: \"template\",\n      focusOnSelectedItem: true,\n      focusedElement: null,\n      displayExpr: void 0,\n      disabledExpr: function disabledExpr(data) {\n        return data ? data.disabled : void 0;\n      },\n      visibleExpr: function visibleExpr(data) {\n        return data ? data.visible : void 0;\n      }\n    });\n  },\n  _init: function _init() {\n    this._compileDisplayGetter();\n\n    this.callBase();\n\n    this._cleanRenderedItems();\n\n    this._refreshDataSource();\n  },\n  _compileDisplayGetter: function _compileDisplayGetter() {\n    var displayExpr = this.option(\"displayExpr\");\n    this._displayGetter = displayExpr ? compileGetter(this.option(\"displayExpr\")) : void 0;\n  },\n  _initTemplates: function _initTemplates() {\n    this._initItemsFromMarkup();\n\n    this._initDefaultItemTemplate();\n\n    this.callBase();\n  },\n  _getAnonymousTemplateName: function _getAnonymousTemplateName() {\n    return ANONYMOUS_TEMPLATE_NAME;\n  },\n  _initDefaultItemTemplate: function _initDefaultItemTemplate() {\n    var fieldsMap = this._getFieldsMap();\n\n    this._templateManager.addDefaultTemplates({\n      item: new BindableTemplate(function ($container, data) {\n        if (isPlainObject(data)) {\n          this._prepareDefaultItemTemplate(data, $container);\n        } else {\n          if (fieldsMap && isFunction(fieldsMap.text)) {\n            data = fieldsMap.text(data);\n          }\n\n          $container.text(String(ensureDefined(data, \"\")));\n        }\n      }.bind(this), this._getBindableFields(), this.option(\"integrationOptions.watchMethod\"), fieldsMap)\n    });\n  },\n  _getBindableFields: function _getBindableFields() {\n    return [\"text\", \"html\"];\n  },\n  _getFieldsMap: function _getFieldsMap() {\n    if (this._displayGetter) {\n      return {\n        text: this._displayGetter\n      };\n    }\n  },\n  _prepareDefaultItemTemplate: function _prepareDefaultItemTemplate(data, $container) {\n    if (isDefined(data.text)) {\n      $container.text(data.text);\n    }\n\n    if (isDefined(data.html)) {\n      $container.html(data.html);\n    }\n  },\n  _initItemsFromMarkup: function _initItemsFromMarkup() {\n    var _this = this;\n\n    var rawItems = findTemplates(this.$element(), ITEMS_OPTIONS_NAME);\n\n    if (!rawItems.length || this.option(\"items\").length) {\n      return;\n    }\n\n    var items = rawItems.map(function (_ref) {\n      var element = _ref.element,\n          options = _ref.options;\n      var isTemplateRequired = /\\S/.test(element.innerHTML) && !options.template;\n\n      if (isTemplateRequired) {\n        options.template = _this._prepareItemTemplate(element);\n      } else {\n        $(element).remove();\n      }\n\n      return options;\n    });\n    this.option(\"items\", items);\n  },\n  _prepareItemTemplate: function _prepareItemTemplate(item) {\n    var templateId = ITEM_TEMPLATE_ID_PREFIX + new Guid();\n    var $template = $(item).detach().clone().removeAttr(\"data-options\").addClass(TEMPLATE_WRAPPER_CLASS);\n\n    this._saveTemplate(templateId, $template);\n\n    return templateId;\n  },\n  _dataSourceOptions: function _dataSourceOptions() {\n    return {\n      paginate: false\n    };\n  },\n  _cleanRenderedItems: function _cleanRenderedItems() {\n    this._renderedItemsCount = 0;\n  },\n  _focusTarget: function _focusTarget() {\n    return this.$element();\n  },\n  _focusInHandler: function _focusInHandler(e) {\n    this.callBase.apply(this, arguments);\n\n    if (-1 === inArray(e.target, this._focusTarget())) {\n      return;\n    }\n\n    var $focusedElement = $(this.option(\"focusedElement\"));\n\n    if ($focusedElement.length) {\n      this._setFocusedItem($focusedElement);\n    } else {\n      var $activeItem = this._getActiveItem();\n\n      if ($activeItem.length) {\n        this.option(\"focusedElement\", getPublicElement($activeItem));\n      }\n    }\n  },\n  _focusOutHandler: function _focusOutHandler() {\n    this.callBase.apply(this, arguments);\n    var $target = $(this.option(\"focusedElement\"));\n\n    this._updateFocusedItemState($target, false);\n  },\n  _getActiveItem: function _getActiveItem(last) {\n    var $focusedElement = $(this.option(\"focusedElement\"));\n\n    if ($focusedElement.length) {\n      return $focusedElement;\n    }\n\n    var index = this.option(\"focusOnSelectedItem\") ? this.option(\"selectedIndex\") : 0;\n\n    var activeElements = this._getActiveElement();\n\n    var lastIndex = activeElements.length - 1;\n\n    if (index < 0) {\n      index = last ? lastIndex : 0;\n    }\n\n    return activeElements.eq(index);\n  },\n  _moveFocus: function _moveFocus(location) {\n    var $items = this._getAvailableItems();\n\n    var $newTarget;\n\n    switch (location) {\n      case FOCUS_PAGE_UP:\n      case FOCUS_UP:\n        $newTarget = this._prevItem($items);\n        break;\n\n      case FOCUS_PAGE_DOWN:\n      case FOCUS_DOWN:\n        $newTarget = this._nextItem($items);\n        break;\n\n      case FOCUS_RIGHT:\n        $newTarget = this.option(\"rtlEnabled\") ? this._prevItem($items) : this._nextItem($items);\n        break;\n\n      case FOCUS_LEFT:\n        $newTarget = this.option(\"rtlEnabled\") ? this._nextItem($items) : this._prevItem($items);\n        break;\n\n      case FOCUS_FIRST:\n        $newTarget = $items.first();\n        break;\n\n      case FOCUS_LAST:\n        $newTarget = $items.last();\n        break;\n\n      default:\n        return false;\n    }\n\n    if (0 !== $newTarget.length) {\n      this.option(\"focusedElement\", getPublicElement($newTarget));\n    }\n  },\n  _getVisibleItems: function _getVisibleItems($itemElements) {\n    $itemElements = $itemElements || this._itemElements();\n    return $itemElements.filter(\":visible\");\n  },\n  _getAvailableItems: function _getAvailableItems($itemElements) {\n    return this._getVisibleItems($itemElements).not(\".dx-state-disabled\");\n  },\n  _prevItem: function _prevItem($items) {\n    var $target = this._getActiveItem();\n\n    var targetIndex = $items.index($target);\n    var $last = $items.last();\n    var $item = $($items[targetIndex - 1]);\n    var loop = this.option(\"loopItemFocus\");\n\n    if (0 === $item.length && loop) {\n      $item = $last;\n    }\n\n    return $item;\n  },\n  _nextItem: function _nextItem($items) {\n    var $target = this._getActiveItem(true);\n\n    var targetIndex = $items.index($target);\n    var $first = $items.first();\n    var $item = $($items[targetIndex + 1]);\n    var loop = this.option(\"loopItemFocus\");\n\n    if (0 === $item.length && loop) {\n      $item = $first;\n    }\n\n    return $item;\n  },\n  _selectFocusedItem: function _selectFocusedItem($target) {\n    this.selectItem($target);\n  },\n  _updateFocusedItemState: function _updateFocusedItemState(target, isFocused, needCleanItemId) {\n    var $target = $(target);\n\n    if ($target.length) {\n      this._refreshActiveDescendant();\n\n      this._refreshItemId($target, needCleanItemId);\n\n      this._toggleFocusClass(isFocused, $target);\n    }\n\n    this._updateParentActiveDescendant();\n  },\n  _refreshActiveDescendant: function _refreshActiveDescendant($target) {\n    this.setAria(\"activedescendant\", isDefined(this.option(\"focusedElement\")) ? this.getFocusedItemId() : null, $target);\n  },\n  _refreshItemId: function _refreshItemId($target, needCleanItemId) {\n    if (!needCleanItemId && this.option(\"focusedElement\")) {\n      this.setAria(\"id\", this.getFocusedItemId(), $target);\n    } else {\n      this.setAria(\"id\", null, $target);\n    }\n  },\n  _setFocusedItem: function _setFocusedItem($target) {\n    if (!$target || !$target.length) {\n      return;\n    }\n\n    this._updateFocusedItemState($target, true);\n\n    this.onFocusedItemChanged(this.getFocusedItemId());\n\n    if (this.option(\"selectOnFocus\")) {\n      this._selectFocusedItem($target);\n    }\n  },\n  _findItemElementByItem: function _findItemElementByItem(item) {\n    var result = $();\n    var that = this;\n    this.itemElements().each(function () {\n      var $item = $(this);\n\n      if ($item.data(that._itemDataKey()) === item) {\n        result = $item;\n        return false;\n      }\n    });\n    return result;\n  },\n  _getIndexByItem: function _getIndexByItem(item) {\n    return this.option(\"items\").indexOf(item);\n  },\n  _itemOptionChanged: function _itemOptionChanged(item, property, value, oldValue) {\n    var $item = this._findItemElementByItem(item);\n\n    if (!$item.length) {\n      return;\n    }\n\n    if (!this.constructor.ItemClass.getInstance($item).setDataField(property, value)) {\n      this._refreshItem($item, item);\n    }\n\n    var isDisabling = \"disabled\" === property && value;\n\n    if (isDisabling) {\n      this._resetItemFocus($item);\n    }\n  },\n  _resetItemFocus: function _resetItemFocus($item) {\n    if ($item.is(this.option(\"focusedElement\"))) {\n      this.option(\"focusedElement\", null);\n    }\n  },\n  _refreshItem: function _refreshItem($item) {\n    var itemData = this._getItemData($item);\n\n    var index = $item.data(this._itemIndexKey());\n\n    this._renderItem(this._renderedItemsCount + index, itemData, null, $item);\n  },\n  _updateParentActiveDescendant: noop,\n  _optionChanged: function _optionChanged(args) {\n    if (\"items\" === args.name) {\n      var matches = args.fullName.match(ITEM_PATH_REGEX);\n\n      if (matches && matches.length) {\n        var property = matches[matches.length - 1];\n        var itemPath = args.fullName.replace(\".\" + property, \"\");\n        var item = this.option(itemPath);\n\n        this._itemOptionChanged(item, property, args.value, args.previousValue);\n\n        return;\n      }\n    }\n\n    switch (args.name) {\n      case \"items\":\n      case \"_itemAttributes\":\n      case \"itemTemplateProperty\":\n      case \"useItemTextAsTitle\":\n        this._cleanRenderedItems();\n\n        this._invalidate();\n\n        break;\n\n      case \"dataSource\":\n        this._refreshDataSource();\n\n        this._renderEmptyMessage();\n\n        break;\n\n      case \"noDataText\":\n        this._renderEmptyMessage();\n\n        break;\n\n      case \"itemTemplate\":\n        this._invalidate();\n\n        break;\n\n      case \"onItemRendered\":\n        this._createItemRenderAction();\n\n        break;\n\n      case \"onItemClick\":\n        break;\n\n      case \"onItemHold\":\n      case \"itemHoldTimeout\":\n        this._attachHoldEvent();\n\n        break;\n\n      case \"onItemContextMenu\":\n        this._attachContextMenuEvent();\n\n        break;\n\n      case \"onFocusedItemChanged\":\n        this.onFocusedItemChanged = this._createActionByOption(\"onFocusedItemChanged\");\n        break;\n\n      case \"selectOnFocus\":\n      case \"loopItemFocus\":\n      case \"focusOnSelectedItem\":\n        break;\n\n      case \"focusedElement\":\n        this._updateFocusedItemState(args.previousValue, false, true);\n\n        this._setFocusedItem($(args.value));\n\n        break;\n\n      case \"displayExpr\":\n        this._compileDisplayGetter();\n\n        this._initDefaultItemTemplate();\n\n        this._invalidate();\n\n        break;\n\n      case \"visibleExpr\":\n      case \"disabledExpr\":\n        this._invalidate();\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  _invalidate: function _invalidate() {\n    this.option(\"focusedElement\", null);\n    return this.callBase.apply(this, arguments);\n  },\n  _loadNextPage: function _loadNextPage() {\n    var dataSource = this._dataSource;\n\n    this._expectNextPageLoading();\n\n    dataSource.pageIndex(1 + dataSource.pageIndex());\n    return dataSource.load();\n  },\n  _expectNextPageLoading: function _expectNextPageLoading() {\n    this._startIndexForAppendedItems = 0;\n  },\n  _expectLastItemLoading: function _expectLastItemLoading() {\n    this._startIndexForAppendedItems = -1;\n  },\n  _forgetNextPageLoading: function _forgetNextPageLoading() {\n    this._startIndexForAppendedItems = null;\n  },\n  _dataSourceChangedHandler: function _dataSourceChangedHandler(newItems) {\n    var items = this.option(\"items\");\n\n    if (this._initialized && items && this._shouldAppendItems()) {\n      this._renderedItemsCount = items.length;\n\n      if (!this._isLastPage() || -1 !== this._startIndexForAppendedItems) {\n        this.option().items = items.concat(newItems.slice(this._startIndexForAppendedItems));\n      }\n\n      this._forgetNextPageLoading();\n\n      this._refreshContent();\n    } else {\n      this.option(\"items\", newItems.slice());\n    }\n  },\n  _refreshContent: function _refreshContent() {\n    this._prepareContent();\n\n    this._renderContent();\n  },\n  _dataSourceLoadErrorHandler: function _dataSourceLoadErrorHandler() {\n    this._forgetNextPageLoading();\n\n    this.option(\"items\", this.option(\"items\"));\n  },\n  _shouldAppendItems: function _shouldAppendItems() {\n    return null != this._startIndexForAppendedItems && this._allowDynamicItemsAppend();\n  },\n  _allowDynamicItemsAppend: function _allowDynamicItemsAppend() {\n    return false;\n  },\n  _clean: function _clean() {\n    this._cleanFocusState();\n\n    this._cleanItemContainer();\n  },\n  _cleanItemContainer: function _cleanItemContainer() {\n    $(this._itemContainer()).empty();\n  },\n  _dispose: function _dispose() {\n    this.callBase();\n    clearTimeout(this._itemFocusTimeout);\n  },\n  _refresh: function _refresh() {\n    this._cleanRenderedItems();\n\n    this.callBase.apply(this, arguments);\n  },\n  _itemContainer: function _itemContainer() {\n    return this.$element();\n  },\n  _itemClass: function _itemClass() {\n    return ITEM_CLASS;\n  },\n  _itemContentClass: function _itemContentClass() {\n    return this._itemClass() + CONTENT_CLASS_POSTFIX;\n  },\n  _selectedItemClass: function _selectedItemClass() {\n    return SELECTED_ITEM_CLASS;\n  },\n  _itemResponseWaitClass: function _itemResponseWaitClass() {\n    return ITEM_RESPONSE_WAIT_CLASS;\n  },\n  _itemSelector: function _itemSelector() {\n    return \".\" + this._itemClass();\n  },\n  _itemDataKey: function _itemDataKey() {\n    return ITEM_DATA_KEY;\n  },\n  _itemIndexKey: function _itemIndexKey() {\n    return ITEM_INDEX_KEY;\n  },\n  _itemElements: function _itemElements() {\n    return this._itemContainer().find(this._itemSelector());\n  },\n  _initMarkup: function _initMarkup() {\n    this.callBase();\n    this.onFocusedItemChanged = this._createActionByOption(\"onFocusedItemChanged\");\n    this.$element().addClass(COLLECTION_CLASS);\n\n    this._prepareContent();\n  },\n  _prepareContent: deferRenderer(function () {\n    this._renderContentImpl();\n  }),\n  _renderContent: function _renderContent() {\n    this._fireContentReadyAction();\n  },\n  _render: function _render() {\n    this.callBase();\n\n    this._attachClickEvent();\n\n    this._attachHoldEvent();\n\n    this._attachContextMenuEvent();\n  },\n  _attachClickEvent: function _attachClickEvent() {\n    var itemSelector = this._itemSelector();\n\n    var clickEventNamespace = addNamespace(clickEventName, this.NAME);\n    var pointerDownEventNamespace = addNamespace(pointerEvents.down, this.NAME);\n    var that = this;\n    var pointerDownAction = new Action(function (args) {\n      var event = args.event;\n\n      that._itemPointerDownHandler(event);\n    });\n    eventsEngine.off(this._itemContainer(), clickEventNamespace, itemSelector);\n    eventsEngine.off(this._itemContainer(), pointerDownEventNamespace, itemSelector);\n    eventsEngine.on(this._itemContainer(), clickEventNamespace, itemSelector, function (e) {\n      this._itemClickHandler(e);\n    }.bind(this));\n    eventsEngine.on(this._itemContainer(), pointerDownEventNamespace, itemSelector, function (e) {\n      pointerDownAction.execute({\n        element: $(e.target),\n        event: e\n      });\n    });\n  },\n  _itemClickHandler: function _itemClickHandler(e, args, config) {\n    this._itemDXEventHandler(e, \"onItemClick\", args, config);\n  },\n  _itemPointerDownHandler: function _itemPointerDownHandler(e) {\n    if (!this.option(\"focusStateEnabled\")) {\n      return;\n    }\n\n    this._itemFocusHandler = function () {\n      clearTimeout(this._itemFocusTimeout);\n      this._itemFocusHandler = null;\n\n      if (e.isDefaultPrevented()) {\n        return;\n      }\n\n      var $target = $(e.target);\n      var $closestItem = $target.closest(this._itemElements());\n\n      var $closestFocusable = this._closestFocusable($target);\n\n      if ($closestItem.length && $closestFocusable && -1 !== inArray($closestFocusable.get(0), this._focusTarget())) {\n        this.option(\"focusedElement\", getPublicElement($closestItem));\n      }\n    }.bind(this);\n\n    this._itemFocusTimeout = setTimeout(this._forcePointerDownFocus.bind(this));\n  },\n  _closestFocusable: function _closestFocusable($target) {\n    if ($target.is(focusable)) {\n      return $target;\n    } else {\n      $target = $target.parent();\n\n      while ($target.length && !domAdapter.isDocument($target.get(0))) {\n        if ($target.is(focusable)) {\n          return $target;\n        }\n\n        $target = $target.parent();\n      }\n    }\n  },\n  _forcePointerDownFocus: function _forcePointerDownFocus() {\n    this._itemFocusHandler && this._itemFocusHandler();\n  },\n  _updateFocusState: function _updateFocusState() {\n    this.callBase.apply(this, arguments);\n\n    this._forcePointerDownFocus();\n  },\n  _attachHoldEvent: function _attachHoldEvent() {\n    var $itemContainer = this._itemContainer();\n\n    var itemSelector = this._itemSelector();\n\n    var eventName = addNamespace(holdEvent.name, this.NAME);\n    eventsEngine.off($itemContainer, eventName, itemSelector);\n    eventsEngine.on($itemContainer, eventName, itemSelector, {\n      timeout: this._getHoldTimeout()\n    }, this._itemHoldHandler.bind(this));\n  },\n  _getHoldTimeout: function _getHoldTimeout() {\n    return this.option(\"itemHoldTimeout\");\n  },\n  _shouldFireHoldEvent: function _shouldFireHoldEvent() {\n    return this.hasActionSubscription(\"onItemHold\");\n  },\n  _itemHoldHandler: function _itemHoldHandler(e) {\n    if (this._shouldFireHoldEvent()) {\n      this._itemDXEventHandler(e, \"onItemHold\");\n    } else {\n      e.cancel = true;\n    }\n  },\n  _attachContextMenuEvent: function _attachContextMenuEvent() {\n    var $itemContainer = this._itemContainer();\n\n    var itemSelector = this._itemSelector();\n\n    var eventName = addNamespace(contextMenuEventName, this.NAME);\n    eventsEngine.off($itemContainer, eventName, itemSelector);\n    eventsEngine.on($itemContainer, eventName, itemSelector, this._itemContextMenuHandler.bind(this));\n  },\n  _shouldFireContextMenuEvent: function _shouldFireContextMenuEvent() {\n    return this.hasActionSubscription(\"onItemContextMenu\");\n  },\n  _itemContextMenuHandler: function _itemContextMenuHandler(e) {\n    if (this._shouldFireContextMenuEvent()) {\n      this._itemDXEventHandler(e, \"onItemContextMenu\");\n    } else {\n      e.cancel = true;\n    }\n  },\n  _renderContentImpl: function _renderContentImpl() {\n    var items = this.option(\"items\") || [];\n\n    if (this._renderedItemsCount) {\n      this._renderItems(items.slice(this._renderedItemsCount));\n    } else {\n      this._renderItems(items);\n    }\n  },\n  _renderItems: function _renderItems(items) {\n    if (items.length) {\n      each(items, function (index, itemData) {\n        this._renderItem(this._renderedItemsCount + index, itemData);\n      }.bind(this));\n    }\n\n    this._renderEmptyMessage();\n  },\n  _renderItem: function _renderItem(index, itemData, $container, $itemToReplace) {\n    var _index$item;\n\n    var itemIndex = null !== (_index$item = null === index || void 0 === index ? void 0 : index.item) && void 0 !== _index$item ? _index$item : index;\n    $container = $container || this._itemContainer();\n\n    var $itemFrame = this._renderItemFrame(itemIndex, itemData, $container, $itemToReplace);\n\n    this._setElementData($itemFrame, itemData, itemIndex);\n\n    $itemFrame.attr(this.option(\"_itemAttributes\"));\n\n    this._attachItemClickEvent(itemData, $itemFrame);\n\n    var $itemContent = this._getItemContent($itemFrame);\n\n    var renderContentPromise = this._renderItemContent({\n      index: itemIndex,\n      itemData: itemData,\n      container: getPublicElement($itemContent),\n      contentClass: this._itemContentClass(),\n      defaultTemplateName: this.option(\"itemTemplate\")\n    });\n\n    var that = this;\n    when(renderContentPromise).done(function ($itemContent) {\n      that._postprocessRenderItem({\n        itemElement: $itemFrame,\n        itemContent: $itemContent,\n        itemData: itemData,\n        itemIndex: itemIndex\n      });\n\n      that._executeItemRenderAction(index, itemData, getPublicElement($itemFrame));\n    });\n    return $itemFrame;\n  },\n  _getItemContent: function _getItemContent($itemFrame) {\n    var $itemContent = $itemFrame.find(\".\" + ITEM_CONTENT_PLACEHOLDER_CLASS);\n    $itemContent.removeClass(ITEM_CONTENT_PLACEHOLDER_CLASS);\n    return $itemContent;\n  },\n  _attachItemClickEvent: function _attachItemClickEvent(itemData, $itemElement) {\n    if (!itemData || !itemData.onClick) {\n      return;\n    }\n\n    eventsEngine.on($itemElement, clickEventName, function (e) {\n      this._itemEventHandlerByHandler($itemElement, itemData.onClick, {\n        event: e\n      });\n    }.bind(this));\n  },\n  _renderItemContent: function _renderItemContent(args) {\n    var itemTemplateName = this._getItemTemplateName(args);\n\n    var itemTemplate = this._getTemplate(itemTemplateName);\n\n    this._addItemContentClasses(args);\n\n    var $templateResult = $(this._createItemByTemplate(itemTemplate, args));\n\n    if (!$templateResult.hasClass(TEMPLATE_WRAPPER_CLASS)) {\n      return args.container;\n    }\n\n    return this._renderItemContentByNode(args, $templateResult);\n  },\n  _renderItemContentByNode: function _renderItemContentByNode(args, $node) {\n    $(args.container).replaceWith($node);\n    args.container = getPublicElement($node);\n\n    this._addItemContentClasses(args);\n\n    return $node;\n  },\n  _addItemContentClasses: function _addItemContentClasses(args) {\n    var classes = [ITEM_CLASS + CONTENT_CLASS_POSTFIX, args.contentClass];\n    $(args.container).addClass(classes.join(\" \"));\n  },\n  _appendItemToContainer: function _appendItemToContainer($container, $itemFrame, index) {\n    $itemFrame.appendTo($container);\n  },\n  _renderItemFrame: function _renderItemFrame(index, itemData, $container, $itemToReplace) {\n    var $itemFrame = $(\"<div>\");\n    new this.constructor.ItemClass($itemFrame, this._itemOptions(), itemData || {});\n\n    if ($itemToReplace && $itemToReplace.length) {\n      $itemToReplace.replaceWith($itemFrame);\n    } else {\n      this._appendItemToContainer.call(this, $container, $itemFrame, index);\n    }\n\n    if (this.option(\"useItemTextAsTitle\")) {\n      var displayValue = this._displayGetter ? this._displayGetter(itemData) : itemData;\n      $itemFrame.attr(\"title\", displayValue);\n    }\n\n    return $itemFrame;\n  },\n  _itemOptions: function _itemOptions() {\n    var that = this;\n    return {\n      watchMethod: function watchMethod() {\n        return that.option(\"integrationOptions.watchMethod\");\n      },\n      owner: that,\n      fieldGetter: function fieldGetter(field) {\n        var expr = that.option(field + \"Expr\");\n        var getter = compileGetter(expr);\n        return getter;\n      }\n    };\n  },\n  _postprocessRenderItem: noop,\n  _executeItemRenderAction: function _executeItemRenderAction(index, itemData, itemElement) {\n    this._getItemRenderAction()({\n      itemElement: itemElement,\n      itemIndex: index,\n      itemData: itemData\n    });\n  },\n  _setElementData: function _setElementData(element, data, index) {\n    element.addClass([ITEM_CLASS, this._itemClass()].join(\" \")).data(this._itemDataKey(), data).data(this._itemIndexKey(), index);\n  },\n  _createItemRenderAction: function _createItemRenderAction() {\n    return this._itemRenderAction = this._createActionByOption(\"onItemRendered\", {\n      element: this.element(),\n      excludeValidators: [\"disabled\", \"readOnly\"],\n      category: \"rendering\"\n    });\n  },\n  _getItemRenderAction: function _getItemRenderAction() {\n    return this._itemRenderAction || this._createItemRenderAction();\n  },\n  _getItemTemplateName: function _getItemTemplateName(args) {\n    var data = args.itemData;\n    var templateProperty = args.templateProperty || this.option(\"itemTemplateProperty\");\n    var template = data && data[templateProperty];\n    return template || args.defaultTemplateName;\n  },\n  _createItemByTemplate: function _createItemByTemplate(itemTemplate, renderArgs) {\n    return itemTemplate.render({\n      model: renderArgs.itemData,\n      container: renderArgs.container,\n      index: renderArgs.index\n    });\n  },\n  _emptyMessageContainer: function _emptyMessageContainer() {\n    return this._itemContainer();\n  },\n  _renderEmptyMessage: function _renderEmptyMessage(items) {\n    items = items || this.option(\"items\");\n    var noDataText = this.option(\"noDataText\");\n\n    var hideNoData = !noDataText || items && items.length || this._isDataSourceLoading();\n\n    if (hideNoData && this._$noData) {\n      this._$noData.remove();\n\n      this._$noData = null;\n      this.setAria(\"label\", void 0);\n    }\n\n    if (!hideNoData) {\n      this._$noData = this._$noData || $(\"<div>\").addClass(\"dx-empty-message\");\n\n      this._$noData.appendTo(this._emptyMessageContainer()).html(noDataText);\n\n      this.setAria(\"label\", noDataText);\n    }\n\n    this.$element().toggleClass(EMPTY_COLLECTION, !hideNoData);\n  },\n  _itemDXEventHandler: function _itemDXEventHandler(dxEvent, handlerOptionName, actionArgs, actionConfig) {\n    this._itemEventHandler(dxEvent.target, handlerOptionName, extend(actionArgs, {\n      event: dxEvent\n    }), actionConfig);\n  },\n  _itemEventHandler: function _itemEventHandler(initiator, handlerOptionName, actionArgs, actionConfig) {\n    var action = this._createActionByOption(handlerOptionName, extend({\n      validatingTargetName: \"itemElement\"\n    }, actionConfig));\n\n    return this._itemEventHandlerImpl(initiator, action, actionArgs);\n  },\n  _itemEventHandlerByHandler: function _itemEventHandlerByHandler(initiator, handler, actionArgs, actionConfig) {\n    var action = this._createAction(handler, extend({\n      validatingTargetName: \"itemElement\"\n    }, actionConfig));\n\n    return this._itemEventHandlerImpl(initiator, action, actionArgs);\n  },\n  _itemEventHandlerImpl: function _itemEventHandlerImpl(initiator, action, actionArgs) {\n    var $itemElement = this._closestItemElement($(initiator));\n\n    var args = extend({}, actionArgs);\n    return action(extend(actionArgs, this._extendActionArgs($itemElement), args));\n  },\n  _extendActionArgs: function _extendActionArgs($itemElement) {\n    return {\n      itemElement: getPublicElement($itemElement),\n      itemIndex: this._itemElements().index($itemElement),\n      itemData: this._getItemData($itemElement)\n    };\n  },\n  _closestItemElement: function _closestItemElement($element) {\n    return $($element).closest(this._itemSelector());\n  },\n  _getItemData: function _getItemData(itemElement) {\n    return $(itemElement).data(this._itemDataKey());\n  },\n  _getSummaryItemsWidth: function _getSummaryItemsWidth(items, includeMargin) {\n    var result = 0;\n\n    if (items) {\n      each(items, function (_, item) {\n        result += getOuterWidth(item, includeMargin || false);\n      });\n    }\n\n    return result;\n  },\n  getFocusedItemId: function getFocusedItemId() {\n    if (!this._focusedItemId) {\n      this._focusedItemId = \"dx-\" + new Guid();\n    }\n\n    return this._focusedItemId;\n  },\n  itemElements: function itemElements() {\n    return this._itemElements();\n  },\n  itemsContainer: function itemsContainer() {\n    return this._itemContainer();\n  }\n}).include(DataHelperMixin);\nCollectionWidget.ItemClass = CollectionWidgetItem;\nexport default CollectionWidget;","map":null,"metadata":{},"sourceType":"module"}