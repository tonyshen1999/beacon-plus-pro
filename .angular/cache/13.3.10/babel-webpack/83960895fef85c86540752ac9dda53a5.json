{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/file_management/object_provider.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { find } from \"../core/utils/array\";\nimport { ensureDefined } from \"../core/utils/common\";\nimport { compileGetter, compileSetter } from \"../core/utils/data\";\nimport Guid from \"../core/guid\";\nimport { isFunction } from \"../core/utils/type\";\nimport { errors } from \"../data/errors\";\nimport { Deferred } from \"../core/utils/deferred\";\nimport { getWindow } from \"../core/utils/window\";\nimport { fileSaver } from \"../exporter/file_saver\";\nimport Errors from \"../ui/widget/ui.errors\";\nimport JSZip from \"jszip\";\nimport FileSystemProviderBase from \"./provider_base\";\nimport FileSystemError from \"./error\";\nimport ErrorCode from \"./error_codes\";\nimport { pathCombine } from \"./utils\";\nvar window = getWindow();\n\nvar ObjectFileSystemProvider = /*#__PURE__*/function (_FileSystemProviderBa) {\n  _inherits(ObjectFileSystemProvider, _FileSystemProviderBa);\n\n  var _super = _createSuper(ObjectFileSystemProvider);\n\n  function ObjectFileSystemProvider(options) {\n    var _this2;\n\n    _classCallCheck(this, ObjectFileSystemProvider);\n\n    options = ensureDefined(options, {});\n    _this2 = _super.call(this, options);\n    var initialArray = options.data;\n\n    if (initialArray && !Array.isArray(initialArray)) {\n      throw errors.Error(\"E4006\");\n    }\n\n    var itemsExpr = options.itemsExpr || \"items\";\n    _this2._subFileItemsGetter = compileGetter(itemsExpr);\n    _this2._subFileItemsSetter = _this2._getSetter(itemsExpr);\n    var contentExpr = options.contentExpr || \"content\";\n    _this2._contentGetter = compileGetter(contentExpr);\n    _this2._contentSetter = _this2._getSetter(contentExpr);\n\n    var nameExpr = _this2._getNameExpr(options);\n\n    _this2._nameSetter = _this2._getSetter(nameExpr);\n\n    var isDirExpr = _this2._getIsDirExpr(options);\n\n    _this2._getIsDirSetter = _this2._getSetter(isDirExpr);\n\n    var keyExpr = _this2._getKeyExpr(options);\n\n    _this2._keySetter = _this2._getSetter(keyExpr);\n\n    var sizeExpr = _this2._getSizeExpr(options);\n\n    _this2._sizeSetter = _this2._getSetter(sizeExpr);\n\n    var dateModifiedExpr = _this2._getDateModifiedExpr(options);\n\n    _this2._dateModifiedSetter = _this2._getSetter(dateModifiedExpr);\n    _this2._data = initialArray || [];\n    return _this2;\n  }\n\n  _createClass(ObjectFileSystemProvider, [{\n    key: \"getItems\",\n    value: function getItems(parentDir) {\n      var _this3 = this;\n\n      return this._executeActionAsDeferred(function () {\n        return _this3._getItems(parentDir);\n      }, true);\n    }\n  }, {\n    key: \"renameItem\",\n    value: function renameItem(item, name) {\n      var _this4 = this;\n\n      return this._executeActionAsDeferred(function () {\n        return _this4._renameItemCore(item, name);\n      });\n    }\n  }, {\n    key: \"_renameItemCore\",\n    value: function _renameItemCore(item, name) {\n      if (!item) {\n        return;\n      }\n\n      var dataItem = this._findDataObject(item);\n\n      this._nameSetter(dataItem, name);\n\n      item.name = name;\n      item.key = this._ensureDataObjectKey(dataItem);\n    }\n  }, {\n    key: \"createDirectory\",\n    value: function createDirectory(parentDir, name) {\n      var _this5 = this;\n\n      return this._executeActionAsDeferred(function () {\n        _this5._validateDirectoryExists(parentDir);\n\n        _this5._createDataObject(parentDir, name, true);\n      });\n    }\n  }, {\n    key: \"deleteItems\",\n    value: function deleteItems(items) {\n      var _this6 = this;\n\n      return items.map(function (item) {\n        return _this6._executeActionAsDeferred(function () {\n          return _this6._deleteItem(item);\n        });\n      });\n    }\n  }, {\n    key: \"moveItems\",\n    value: function moveItems(items, destinationDir) {\n      var _this7 = this;\n\n      var destinationDataItem = this._findDataObject(destinationDir);\n\n      var array = this._getDirectoryDataItems(destinationDataItem);\n\n      var deferreds = items.map(function (item) {\n        return _this7._executeActionAsDeferred(function () {\n          _this7._checkAbilityToMoveOrCopyItem(item, destinationDir);\n\n          var dataItem = _this7._findDataObject(item);\n\n          _this7._deleteItem(item);\n\n          array.push(dataItem);\n        });\n      });\n      return deferreds;\n    }\n  }, {\n    key: \"copyItems\",\n    value: function copyItems(items, destinationDir) {\n      var _this8 = this;\n\n      var destinationDataItem = this._findDataObject(destinationDir);\n\n      var array = this._getDirectoryDataItems(destinationDataItem);\n\n      var deferreds = items.map(function (item) {\n        return _this8._executeActionAsDeferred(function () {\n          _this8._checkAbilityToMoveOrCopyItem(item, destinationDir);\n\n          var dataItem = _this8._findDataObject(item);\n\n          var copiedItem = _this8._createCopy(dataItem);\n\n          array.push(copiedItem);\n        });\n      });\n      return deferreds;\n    }\n  }, {\n    key: \"uploadFileChunk\",\n    value: function uploadFileChunk(fileData, chunksInfo, destinationDirectory) {\n      var _this9 = this;\n\n      if (chunksInfo.chunkIndex > 0) {\n        return chunksInfo.customData.deferred;\n      }\n\n      this._validateDirectoryExists(destinationDirectory);\n\n      var deferred = chunksInfo.customData.deferred = new Deferred();\n\n      var reader = this._createFileReader();\n\n      reader.readAsDataURL(fileData);\n\n      reader.onload = function () {\n        var content = reader.result.split(\",\")[1];\n\n        var dataObj = _this9._createDataObject(destinationDirectory, fileData.name, false);\n\n        _this9._sizeSetter(dataObj, fileData.size);\n\n        _this9._dateModifiedSetter(dataObj, fileData.lastModifiedDate);\n\n        _this9._contentSetter(dataObj, content);\n\n        deferred.resolve();\n      };\n\n      reader.onerror = function (error) {\n        return deferred.reject(error);\n      };\n\n      return deferred;\n    }\n  }, {\n    key: \"downloadItems\",\n    value: function downloadItems(items) {\n      if (1 === items.length) {\n        this._downloadSingleFile(items[0]);\n      } else {\n        this._downloadMultipleFiles(items);\n      }\n    }\n  }, {\n    key: \"_downloadSingleFile\",\n    value: function _downloadSingleFile(file) {\n      var content = this._getFileContent(file);\n\n      var byteString = window.atob(content);\n      var arrayBuffer = new ArrayBuffer(byteString.length);\n      var array = new Uint8Array(arrayBuffer);\n\n      for (var i = 0; i < byteString.length; i++) {\n        array[i] = byteString.charCodeAt(i);\n      }\n\n      var blob = new window.Blob([arrayBuffer], {\n        type: \"application/octet-stream\"\n      });\n      fileSaver.saveAs(file.name, null, blob);\n    }\n  }, {\n    key: \"_downloadMultipleFiles\",\n    value: function _downloadMultipleFiles(files) {\n      var _this10 = this;\n\n      var jsZip = getJSZip();\n      var zip = new jsZip();\n      files.forEach(function (file) {\n        return zip.file(file.name, _this10._getFileContent(file), {\n          base64: true\n        });\n      });\n      var options = {\n        type: \"blob\",\n        compression: \"DEFLATE\",\n        mimeType: \"application/zip\"\n      };\n      var deferred = new Deferred();\n\n      if (zip.generateAsync) {\n        zip.generateAsync(options).then(deferred.resolve);\n      } else {\n        deferred.resolve(zip.generate(options));\n      }\n\n      deferred.done(function (blob) {\n        return fileSaver.saveAs(\"files.zip\", null, blob);\n      });\n    }\n  }, {\n    key: \"_getFileContent\",\n    value: function _getFileContent(file) {\n      var dataItem = this._findDataObject(file);\n\n      return this._contentGetter(dataItem) || \"\";\n    }\n  }, {\n    key: \"_validateDirectoryExists\",\n    value: function _validateDirectoryExists(directoryInfo) {\n      if (!this._isFileItemExists(directoryInfo) || this._isDirGetter(directoryInfo.fileItem)) {\n        throw new FileSystemError(ErrorCode.DirectoryNotFound, directoryInfo);\n      }\n    }\n  }, {\n    key: \"_checkAbilityToMoveOrCopyItem\",\n    value: function _checkAbilityToMoveOrCopyItem(item, destinationDir) {\n      var _this11 = this;\n\n      var dataItem = this._findDataObject(item);\n\n      var itemKey = this._getKeyFromDataObject(dataItem, item.parentPath);\n\n      var pathInfo = destinationDir.getFullPathInfo();\n      var currentPath = \"\";\n      pathInfo.forEach(function (info) {\n        currentPath = pathCombine(currentPath, info.name);\n\n        var pathKey = _this11._getDataObjectKey(info.key, currentPath);\n\n        if (pathKey === itemKey) {\n          throw new FileSystemError(ErrorCode.Other, item);\n        }\n      });\n    }\n  }, {\n    key: \"_createDataObject\",\n    value: function _createDataObject(parentDir, name, isDirectory) {\n      var dataObj = {};\n\n      this._nameSetter(dataObj, name);\n\n      this._getIsDirSetter(dataObj, isDirectory);\n\n      this._keySetter(dataObj, String(new Guid()));\n\n      var parentDataItem = this._findDataObject(parentDir);\n\n      var array = this._getDirectoryDataItems(parentDataItem);\n\n      array.push(dataObj);\n      return dataObj;\n    }\n  }, {\n    key: \"_createCopy\",\n    value: function _createCopy(dataObj) {\n      var _this12 = this;\n\n      var copyObj = {};\n\n      this._nameSetter(copyObj, this._nameGetter(dataObj));\n\n      this._getIsDirSetter(copyObj, this._isDirGetter(dataObj));\n\n      var items = this._subFileItemsGetter(dataObj);\n\n      if (Array.isArray(items)) {\n        var itemsCopy = [];\n        items.forEach(function (childItem) {\n          var childCopy = _this12._createCopy(childItem);\n\n          itemsCopy.push(childCopy);\n        });\n\n        this._subFileItemsSetter(copyObj, itemsCopy);\n      }\n\n      return copyObj;\n    }\n  }, {\n    key: \"_deleteItem\",\n    value: function _deleteItem(fileItem) {\n      var dataItem = this._findDataObject(fileItem);\n\n      var parentDirDataObj = this._findFileItemObj(fileItem.pathInfo);\n\n      var array = this._getDirectoryDataItems(parentDirDataObj);\n\n      var index = array.indexOf(dataItem);\n      array.splice(index, 1);\n    }\n  }, {\n    key: \"_getDirectoryDataItems\",\n    value: function _getDirectoryDataItems(directoryDataObj) {\n      if (!directoryDataObj) {\n        return this._data;\n      }\n\n      var dataItems = this._subFileItemsGetter(directoryDataObj);\n\n      if (!Array.isArray(dataItems)) {\n        dataItems = [];\n\n        this._subFileItemsSetter(directoryDataObj, dataItems);\n      }\n\n      return dataItems;\n    }\n  }, {\n    key: \"_getItems\",\n    value: function _getItems(parentDir) {\n      this._validateDirectoryExists(parentDir);\n\n      var pathInfo = parentDir.getFullPathInfo();\n      var parentDirKey = pathInfo && pathInfo.length > 0 ? pathInfo[pathInfo.length - 1].key : null;\n      var dirFileObjects = this._data;\n\n      if (parentDirKey) {\n        var directoryEntry = this._findFileItemObj(pathInfo);\n\n        dirFileObjects = directoryEntry && this._subFileItemsGetter(directoryEntry) || [];\n      }\n\n      this._ensureKeysForDuplicateNameItems(dirFileObjects);\n\n      return this._convertDataObjectsToFileItems(dirFileObjects, pathInfo);\n    }\n  }, {\n    key: \"_ensureKeysForDuplicateNameItems\",\n    value: function _ensureKeysForDuplicateNameItems(dataObjects) {\n      var _this13 = this;\n\n      var names = {};\n      dataObjects.forEach(function (obj) {\n        var name = _this13._nameGetter(obj);\n\n        if (names[name]) {\n          _this13._ensureDataObjectKey(obj);\n        } else {\n          names[name] = true;\n        }\n      });\n    }\n  }, {\n    key: \"_findDataObject\",\n    value: function _findDataObject(item) {\n      if (item.isRoot()) {\n        return null;\n      }\n\n      var result = this._findFileItemObj(item.getFullPathInfo());\n\n      if (!result) {\n        var errorCode = item.isDirectory ? ErrorCode.DirectoryNotFound : ErrorCode.FileNotFound;\n        throw new FileSystemError(errorCode, item);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_findFileItemObj\",\n    value: function _findFileItemObj(pathInfo) {\n      var _this = this;\n\n      if (!Array.isArray(pathInfo)) {\n        pathInfo = [];\n      }\n\n      var currentPath = \"\";\n      var fileItemObj = null;\n      var fileItemObjects = this._data;\n\n      var _loop = function _loop(i) {\n        fileItemObj = find(fileItemObjects, function (item) {\n          var hasCorrectFileItemType = _this._isDirGetter(item) || i === pathInfo.length - 1;\n          return _this._getKeyFromDataObject(item, currentPath) === pathInfo[i].key && _this._nameGetter(item) === pathInfo[i].name && hasCorrectFileItemType;\n        });\n\n        if (fileItemObj) {\n          currentPath = pathCombine(currentPath, _this._nameGetter(fileItemObj));\n          fileItemObjects = _this._subFileItemsGetter(fileItemObj);\n        }\n      };\n\n      for (var i = 0; i < pathInfo.length && (0 === i || fileItemObj); i++) {\n        _loop(i);\n      }\n\n      return fileItemObj;\n    }\n  }, {\n    key: \"_getKeyFromDataObject\",\n    value: function _getKeyFromDataObject(dataObj, defaultKeyPrefix) {\n      var key = this._keyGetter(dataObj);\n\n      var relativeName = pathCombine(defaultKeyPrefix, this._nameGetter(dataObj));\n      return this._getDataObjectKey(key, relativeName);\n    }\n  }, {\n    key: \"_getDataObjectKey\",\n    value: function _getDataObjectKey(key, relativeName) {\n      return key ? key : relativeName;\n    }\n  }, {\n    key: \"_ensureDataObjectKey\",\n    value: function _ensureDataObjectKey(dataObj) {\n      var key = this._keyGetter(dataObj);\n\n      if (!key) {\n        key = String(new Guid());\n\n        this._keySetter(dataObj, key);\n      }\n\n      return key;\n    }\n  }, {\n    key: \"_hasSubDirs\",\n    value: function _hasSubDirs(dataObj) {\n      var subItems = ensureDefined(this._subFileItemsGetter(dataObj), []);\n\n      if (!Array.isArray(subItems)) {\n        return true;\n      }\n\n      for (var i = 0; i < subItems.length; i++) {\n        if (true === this._isDirGetter(subItems[i])) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_getSetter\",\n    value: function _getSetter(expr) {\n      return isFunction(expr) ? expr : compileSetter(expr);\n    }\n  }, {\n    key: \"_isFileItemExists\",\n    value: function _isFileItemExists(fileItem) {\n      return fileItem.isDirectory && fileItem.isRoot() || !!this._findFileItemObj(fileItem.getFullPathInfo());\n    }\n  }, {\n    key: \"_createFileReader\",\n    value: function _createFileReader() {\n      return new window.FileReader();\n    }\n  }]);\n\n  return ObjectFileSystemProvider;\n}(FileSystemProviderBase);\n\nfunction getJSZip() {\n  if (!JSZip) {\n    throw Errors.Error(\"E1041\", \"JSZip\");\n  }\n\n  return JSZip;\n}\n\nexport default ObjectFileSystemProvider;","map":null,"metadata":{},"sourceType":"module"}