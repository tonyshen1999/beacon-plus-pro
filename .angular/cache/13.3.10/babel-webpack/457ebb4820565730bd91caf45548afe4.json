{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/tree_map/colorizing.discrete.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nfunction discreteColorizer(options, themeManager, root) {\n  var palette = themeManager.createPalette(options.palette, {\n    useHighlight: true,\n    extensionMode: options.paletteExtensionMode,\n    count: options.colorizeGroups ? getNodesCount(root) : getLeafsCount(root)\n  });\n  return (options.colorizeGroups ? discreteGroupColorizer : discreteLeafColorizer)(palette, root);\n}\n\nfunction getLeafsCount(root) {\n  var allNodes = root.nodes.slice();\n  var i;\n  var ii = allNodes.length;\n  var count = 0;\n  var node;\n\n  for (i = 0; i < ii; ++i) {\n    node = allNodes[i];\n\n    if (node.isNode()) {\n      count = Math.max(count, getLeafsCount(node));\n    } else {\n      count += 1;\n    }\n  }\n\n  return count;\n}\n\nfunction discreteLeafColorizer(palette) {\n  var colors = palette.generateColors();\n  return function (node) {\n    return colors[node.index];\n  };\n}\n\nfunction getNodesCount(root) {\n  var allNodes = root.nodes.slice();\n  var i;\n  var ii = allNodes.length;\n  var count = 0;\n  var node;\n\n  for (i = 0; i < ii; ++i) {\n    node = allNodes[i];\n\n    if (node.isNode()) {\n      count += getNodesCount(node) + 1;\n    }\n  }\n\n  return count;\n}\n\nfunction prepareDiscreteGroupColors(palette, root) {\n  var colors = {};\n  var allNodes = root.nodes.slice();\n  var i;\n  var ii = allNodes.length;\n  var node;\n\n  for (i = 0; i < ii; ++i) {\n    node = allNodes[i];\n\n    if (node.isNode()) {\n      allNodes = allNodes.concat(node.nodes);\n      ii = allNodes.length;\n    } else if (!colors[node.parent._id]) {\n      colors[node.parent._id] = palette.getNextColor();\n    }\n  }\n\n  return colors;\n}\n\nfunction discreteGroupColorizer(palette, root) {\n  var colors = prepareDiscreteGroupColors(palette, root);\n  return function (node) {\n    return colors[node._id];\n  };\n}\n\nimport { addColorizer } from \"./colorizing\";\naddColorizer(\"discrete\", discreteColorizer);\nexport default discreteColorizer;","map":null,"metadata":{},"sourceType":"module"}