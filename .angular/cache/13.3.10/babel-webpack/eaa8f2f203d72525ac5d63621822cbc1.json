{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/number_box/number_box.spin.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport domAdapter from \"../../core/dom_adapter\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport Widget from \"../widget/ui.widget\";\nimport { extend } from \"../../core/utils/extend\";\nimport { addNamespace } from \"../../events/utils/index\";\nimport pointerEvents from \"../../events/pointer\";\nimport { lock } from \"../../events/core/emitter.feedback\";\nimport holdEvent from \"../../events/hold\";\nimport { Deferred } from \"../../core/utils/deferred\";\nvar SPIN_CLASS = \"dx-numberbox-spin\";\nvar SPIN_BUTTON_CLASS = \"dx-numberbox-spin-button\";\nvar SPIN_HOLD_DELAY = 100;\nvar NUMBER_BOX = \"dxNumberBox\";\nvar POINTERUP_EVENT_NAME = addNamespace(pointerEvents.up, NUMBER_BOX);\nvar POINTERCANCEL_EVENT_NAME = addNamespace(pointerEvents.cancel, NUMBER_BOX);\nvar SpinButton = Widget.inherit({\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      direction: \"up\",\n      onChange: null,\n      activeStateEnabled: true,\n      hoverStateEnabled: true\n    });\n  },\n  _initMarkup: function _initMarkup() {\n    this.callBase();\n    var direction = SPIN_CLASS + \"-\" + this.option(\"direction\");\n    this.$element().addClass(SPIN_BUTTON_CLASS).addClass(direction);\n    this._spinIcon = $(\"<div>\").addClass(direction + \"-icon\").appendTo(this.$element());\n  },\n  _render: function _render() {\n    this.callBase();\n    var eventName = addNamespace(pointerEvents.down, this.NAME);\n    var $element = this.$element();\n    eventsEngine.off($element, eventName);\n    eventsEngine.on($element, eventName, this._spinDownHandler.bind(this));\n    this._spinChangeHandler = this._createActionByOption(\"onChange\");\n  },\n  _spinDownHandler: function _spinDownHandler(e) {\n    e.preventDefault();\n\n    this._clearTimer();\n\n    eventsEngine.on(this.$element(), holdEvent.name, function () {\n      this._feedBackDeferred = new Deferred();\n      lock(this._feedBackDeferred);\n\n      this._spinChangeHandler({\n        event: e\n      });\n\n      this._holdTimer = setInterval(this._spinChangeHandler, SPIN_HOLD_DELAY, {\n        event: e\n      });\n    }.bind(this));\n    var document = domAdapter.getDocument();\n    eventsEngine.on(document, POINTERUP_EVENT_NAME, this._clearTimer.bind(this));\n    eventsEngine.on(document, POINTERCANCEL_EVENT_NAME, this._clearTimer.bind(this));\n\n    this._spinChangeHandler({\n      event: e\n    });\n  },\n  _dispose: function _dispose() {\n    this._clearTimer();\n\n    this.callBase();\n  },\n  _clearTimer: function _clearTimer() {\n    eventsEngine.off(this.$element(), holdEvent.name);\n    var document = domAdapter.getDocument();\n    eventsEngine.off(document, POINTERUP_EVENT_NAME);\n    eventsEngine.off(document, POINTERCANCEL_EVENT_NAME);\n\n    if (this._feedBackDeferred) {\n      this._feedBackDeferred.resolve();\n    }\n\n    if (this._holdTimer) {\n      clearInterval(this._holdTimer);\n    }\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"onChange\":\n      case \"direction\":\n        this._invalidate();\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  }\n});\nexport default SpinButton;","map":null,"metadata":{},"sourceType":"module"}