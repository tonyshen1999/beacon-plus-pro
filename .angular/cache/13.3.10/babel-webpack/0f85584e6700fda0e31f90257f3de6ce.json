{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/**\r\n * DevExtreme (esm/ui/form/ui.form.items_runtime_info.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport Guid from \"../../core/guid\";\nimport { each as _each } from \"../../core/utils/iterator\";\nimport { extend } from \"../../core/utils/extend\";\nimport { isString } from \"../../core/utils/type\";\n\nvar FormItemsRunTimeInfo = /*#__PURE__*/function () {\n  function FormItemsRunTimeInfo() {\n    _classCallCheck(this, FormItemsRunTimeInfo);\n\n    this._map = {};\n  }\n\n  _createClass(FormItemsRunTimeInfo, [{\n    key: \"_findWidgetInstance\",\n    value: function _findWidgetInstance(condition) {\n      var result;\n\n      _each(this._map, function (guid, _ref) {\n        var widgetInstance = _ref.widgetInstance,\n            item = _ref.item;\n\n        if (condition(item)) {\n          result = widgetInstance;\n          return false;\n        }\n      });\n\n      return result;\n    }\n  }, {\n    key: \"_findFieldByCondition\",\n    value: function _findFieldByCondition(callback, valueExpr) {\n      var result;\n\n      _each(this._map, function (key, value) {\n        if (callback(value)) {\n          result = \"guid\" === valueExpr ? key : value[valueExpr];\n          return false;\n        }\n      });\n\n      return result;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._map = {};\n    }\n  }, {\n    key: \"removeItemsByItems\",\n    value: function removeItemsByItems(itemsRunTimeInfo) {\n      var _this = this;\n\n      _each(itemsRunTimeInfo.getItems(), function (guid) {\n        return _this.removeItemByKey(guid);\n      });\n    }\n  }, {\n    key: \"removeItemByKey\",\n    value: function removeItemByKey(key) {\n      delete this._map[key];\n    }\n  }, {\n    key: \"add\",\n    value: function add(options) {\n      var key = options.guid || new Guid();\n      this._map[key] = options;\n      return key;\n    }\n  }, {\n    key: \"addItemsOrExtendFrom\",\n    value: function addItemsOrExtendFrom(itemsRunTimeInfo) {\n      var _this2 = this;\n\n      itemsRunTimeInfo.each(function (key, itemRunTimeInfo) {\n        if (_this2._map[key]) {\n          if (itemRunTimeInfo.widgetInstance) {\n            _this2._map[key].widgetInstance = itemRunTimeInfo.widgetInstance;\n          }\n\n          _this2._map[key].$itemContainer = itemRunTimeInfo.$itemContainer;\n        } else {\n          _this2.add({\n            item: itemRunTimeInfo.item,\n            widgetInstance: itemRunTimeInfo.widgetInstance,\n            guid: key,\n            $itemContainer: itemRunTimeInfo.$itemContainer\n          });\n        }\n      });\n    }\n  }, {\n    key: \"extendRunTimeItemInfoByKey\",\n    value: function extendRunTimeItemInfoByKey(key, options) {\n      if (this._map[key]) {\n        this._map[key] = extend(this._map[key], options);\n      }\n    }\n  }, {\n    key: \"findWidgetInstanceByItem\",\n    value: function findWidgetInstanceByItem(item) {\n      return this._findWidgetInstance(function (storedItem) {\n        return storedItem === item;\n      });\n    }\n  }, {\n    key: \"findGroupOrTabLayoutManagerByPath\",\n    value: function findGroupOrTabLayoutManagerByPath(targetPath) {\n      return this._findFieldByCondition(function (_ref2) {\n        var path = _ref2.path;\n        return path === targetPath;\n      }, \"layoutManager\");\n    }\n  }, {\n    key: \"findKeyByPath\",\n    value: function findKeyByPath(targetPath) {\n      return this._findFieldByCondition(function (_ref3) {\n        var path = _ref3.path;\n        return path === targetPath;\n      }, \"guid\");\n    }\n  }, {\n    key: \"findWidgetInstanceByName\",\n    value: function findWidgetInstanceByName(name) {\n      return this._findWidgetInstance(function (item) {\n        return name === item.name;\n      });\n    }\n  }, {\n    key: \"findWidgetInstanceByDataField\",\n    value: function findWidgetInstanceByDataField(dataField) {\n      return this._findWidgetInstance(function (item) {\n        return dataField === (isString(item) ? item : item.dataField);\n      });\n    }\n  }, {\n    key: \"findItemContainerByItem\",\n    value: function findItemContainerByItem(item) {\n      for (var key in this._map) {\n        if (this._map[key].item === item) {\n          return this._map[key].$itemContainer;\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"findItemIndexByItem\",\n    value: function findItemIndexByItem(targetItem) {\n      return this._findFieldByCondition(function (_ref4) {\n        var item = _ref4.item;\n        return item === targetItem;\n      }, \"itemIndex\");\n    }\n  }, {\n    key: \"findPreparedItemByItem\",\n    value: function findPreparedItemByItem(item) {\n      return this._findFieldByCondition(function (_ref5) {\n        var currentItem = _ref5.item;\n        return currentItem === item;\n      }, \"preparedItem\");\n    }\n  }, {\n    key: \"getItems\",\n    value: function getItems() {\n      return this._map;\n    }\n  }, {\n    key: \"each\",\n    value: function each(handler) {\n      _each(this._map, function (key, itemRunTimeInfo) {\n        handler(key, itemRunTimeInfo);\n      });\n    }\n  }, {\n    key: \"removeItemsByPathStartWith\",\n    value: function removeItemsByPathStartWith(path) {\n      var _this3 = this;\n\n      var keys = Object.keys(this._map);\n      var filteredKeys = keys.filter(function (key) {\n        if (_this3._map[key].path) {\n          return _this3._map[key].path.indexOf(path, 0) > -1;\n        }\n\n        return false;\n      });\n      filteredKeys.forEach(function (key) {\n        return _this3.removeItemByKey(key);\n      });\n    }\n  }]);\n\n  return FormItemsRunTimeInfo;\n}();\n\nexport { FormItemsRunTimeInfo as default };","map":null,"metadata":{},"sourceType":"module"}