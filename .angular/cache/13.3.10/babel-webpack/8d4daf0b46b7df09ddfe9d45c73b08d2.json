{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/components/tracker.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { eventData as _eventData } from \"../../events/utils/index\";\nimport domAdapter from \"../../core/dom_adapter\";\nimport { name as clickEventName } from \"../../events/click\";\nimport pointer from \"../../events/pointer\";\nimport eventsEngine from \"../../events/core/events_engine\";\nvar downPointerEventName = pointer.down;\nvar movePointerEventName = pointer.move;\nexport function Tracker(parameters) {\n  this._initHandlers(parameters);\n}\nTracker.prototype = {\n  constructor: Tracker,\n  _initHandlers: function _initHandlers(parameters) {\n    var document = domAdapter.getDocument();\n\n    parameters.getCoords = function (e) {\n      var data = _eventData(e);\n\n      var offset = parameters.widget._renderer.getRootOffset();\n\n      return [data.x - offset.left, data.y - offset.top];\n    };\n\n    parameters.root.on(clickEventName, clickHandler);\n    parameters.root.on(downPointerEventName, downHandler);\n    eventsEngine.on(document, downPointerEventName, downHandler);\n    eventsEngine.on(document, movePointerEventName, moveHandler);\n\n    this._disposeHandlers = function () {\n      parameters.root.off(clickEventName, clickHandler);\n      parameters.root.off(downPointerEventName, downHandler);\n      eventsEngine.off(document, downPointerEventName, downHandler);\n      eventsEngine.off(document, movePointerEventName, moveHandler);\n    };\n\n    function clickHandler(e) {\n      processClick(e, parameters);\n    }\n\n    var isRootDown = false;\n\n    function downHandler(e) {\n      if (isRootDown) {\n        isRootDown = false;\n      } else {\n        if (void 0 !== parameters.getData(e)) {\n          isRootDown = true;\n        }\n\n        moveHandler(e);\n      }\n    }\n\n    function moveHandler(e) {\n      processHover(e, parameters);\n      parameters.widget._getOption(\"tooltip\").enabled && processTooltip(e, parameters);\n    }\n  },\n  dispose: function dispose() {\n    this._disposeHandlers();\n  }\n};\n\nfunction processClick(e, params) {\n  var id = params.getData(e);\n\n  if (id >= 0) {\n    params.click({\n      node: params.getNode(id),\n      coords: params.getCoords(e),\n      event: e\n    });\n  }\n}\n\nfunction processHover(e, params) {\n  var id = params.getData(e);\n\n  if (id >= 0) {\n    params.getNode(id).setHover();\n  } else {\n    params.widget.clearHover();\n  }\n}\n\nfunction processTooltip(e, params) {\n  var id = params.getData(e, true);\n  var coords;\n\n  if (id >= 0) {\n    coords = _eventData(e);\n    params.getNode(id).showTooltip([coords.x, coords.y]);\n  } else {\n    params.widget.hideTooltip();\n  }\n}","map":null,"metadata":{},"sourceType":"module"}