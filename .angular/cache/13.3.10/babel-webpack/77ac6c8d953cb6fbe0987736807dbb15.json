{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/drop_down_box.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport DropDownEditor from \"./drop_down_editor/ui.drop_down_editor\";\nimport DataExpressionMixin from \"./editor/ui.data_expression\";\nimport { noop, grep } from \"../core/utils/common\";\nimport { isDefined, isObject } from \"../core/utils/type\";\nimport { map } from \"../core/utils/iterator\";\nimport { tabbable } from \"./widget/selectors\";\nimport { when, Deferred } from \"../core/utils/deferred\";\nimport $ from \"../core/renderer\";\nimport eventsEngine from \"../events/core/events_engine\";\nimport { extend } from \"../core/utils/extend\";\nimport { getElementMaxHeightByWindow } from \"../ui/overlay/utils\";\nimport registerComponent from \"../core/component_registrator\";\nimport { normalizeKeyName } from \"../events/utils/index\";\nimport { keyboard } from \"../events/short\";\nimport devices from \"../core/devices\";\nimport domAdapter from \"../core/dom_adapter\";\nimport { getPublicElement } from \"../core/element\";\nvar getActiveElement = domAdapter.getActiveElement;\nvar DROP_DOWN_BOX_CLASS = \"dx-dropdownbox\";\nvar ANONYMOUS_TEMPLATE_NAME = \"content\";\nvar realDevice = devices.real();\nvar DropDownBox = DropDownEditor.inherit({\n  _supportedKeys: function _supportedKeys() {\n    return extend({}, this.callBase(), {\n      tab: function tab(e) {\n        if (!this.option(\"opened\")) {\n          return;\n        }\n\n        var $tabbableElements = this._getTabbableElements();\n\n        var $focusableElement = e.shiftKey ? $tabbableElements.last() : $tabbableElements.first();\n        $focusableElement && eventsEngine.trigger($focusableElement, \"focus\");\n        e.preventDefault();\n      }\n    });\n  },\n  _getTabbableElements: function _getTabbableElements() {\n    return this._getElements().filter(tabbable);\n  },\n  _getElements: function _getElements() {\n    return $(this.content()).find(\"*\");\n  },\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      acceptCustomValue: false,\n      contentTemplate: ANONYMOUS_TEMPLATE_NAME,\n      openOnFieldClick: true,\n      displayValueFormatter: function displayValueFormatter(value) {\n        return Array.isArray(value) ? value.join(\", \") : value;\n      },\n      useHiddenSubmitElement: true\n    });\n  },\n  _getAnonymousTemplateName: function _getAnonymousTemplateName() {\n    return ANONYMOUS_TEMPLATE_NAME;\n  },\n  _initTemplates: function _initTemplates() {\n    this.callBase();\n  },\n  _initMarkup: function _initMarkup() {\n    this._initDataExpressions();\n\n    this.$element().addClass(DROP_DOWN_BOX_CLASS);\n    this.callBase();\n  },\n  _setSubmitValue: function _setSubmitValue() {\n    var value = this.option(\"value\");\n    var submitValue = this._shouldUseDisplayValue(value) ? this._displayGetter(value) : value;\n\n    this._getSubmitElement().val(submitValue);\n  },\n  _shouldUseDisplayValue: function _shouldUseDisplayValue(value) {\n    return \"this\" === this.option(\"valueExpr\") && isObject(value);\n  },\n  _renderInputValue: function _renderInputValue() {\n    var _this = this;\n\n    this._rejectValueLoading();\n\n    var values = [];\n\n    if (!this._dataSource) {\n      this.callBase(values);\n      return new Deferred().resolve();\n    }\n\n    var currentValue = this._getCurrentValue();\n\n    var keys = null !== currentValue && void 0 !== currentValue ? currentValue : [];\n    keys = Array.isArray(keys) ? keys : [keys];\n    var itemLoadDeferreds = map(keys, function (key) {\n      var deferred = new Deferred();\n\n      _this._loadItem(key).always(function (item) {\n        var displayValue = _this._displayGetter(item);\n\n        if (isDefined(displayValue)) {\n          values.push(displayValue);\n        } else if (_this.option(\"acceptCustomValue\")) {\n          values.push(key);\n        }\n\n        deferred.resolve();\n      });\n\n      return deferred;\n    });\n    var callBase = this.callBase.bind(this);\n    return when.apply(this, itemLoadDeferreds).always(function () {\n      _this.option(\"displayValue\", values);\n\n      callBase(values.length && values);\n    });\n  },\n  _loadItem: function _loadItem(value) {\n    var deferred = new Deferred();\n    var that = this;\n    var selectedItem = grep(this.option(\"items\") || [], function (item) {\n      return this._isValueEquals(this._valueGetter(item), value);\n    }.bind(this))[0];\n\n    if (void 0 !== selectedItem) {\n      deferred.resolve(selectedItem);\n    } else {\n      this._loadValue(value).done(function (item) {\n        deferred.resolve(item);\n      }).fail(function (args) {\n        if (null !== args && void 0 !== args && args.shouldSkipCallback) {\n          return;\n        }\n\n        if (that.option(\"acceptCustomValue\")) {\n          deferred.resolve(value);\n        } else {\n          deferred.reject();\n        }\n      });\n    }\n\n    return deferred.promise();\n  },\n  _popupElementTabHandler: function _popupElementTabHandler(e) {\n    if (\"tab\" !== normalizeKeyName(e)) {\n      return;\n    }\n\n    var $firstTabbable = this._getTabbableElements().first().get(0);\n\n    var $lastTabbable = this._getTabbableElements().last().get(0);\n\n    var $target = e.originalEvent.target;\n    var moveBackward = !!($target === $firstTabbable && e.shift);\n    var moveForward = !!($target === $lastTabbable && !e.shift);\n\n    if (moveBackward || moveForward) {\n      this.close();\n      eventsEngine.trigger(this._input(), \"focus\");\n\n      if (moveBackward) {\n        e.originalEvent.preventDefault();\n      }\n    }\n  },\n  _renderPopup: function _renderPopup(e) {\n    var _this2 = this;\n\n    this.callBase();\n\n    if (this.option(\"focusStateEnabled\")) {\n      keyboard.on(this.content(), null, function (e) {\n        return _this2._popupElementTabHandler(e);\n      });\n    }\n  },\n  _renderPopupContent: function _renderPopupContent() {\n    if (this.option(\"contentTemplate\") === ANONYMOUS_TEMPLATE_NAME) {\n      return;\n    }\n\n    var contentTemplate = this._getTemplateByOption(\"contentTemplate\");\n\n    if (!(contentTemplate && this.option(\"contentTemplate\"))) {\n      return;\n    }\n\n    var $popupContent = this._popup.$content();\n\n    var templateData = {\n      value: this._fieldRenderData(),\n      component: this\n    };\n    $popupContent.empty();\n    contentTemplate.render({\n      container: getPublicElement($popupContent),\n      model: templateData\n    });\n  },\n  _canShowVirtualKeyboard: function _canShowVirtualKeyboard() {\n    return realDevice.mac;\n  },\n  _isNestedElementActive: function _isNestedElementActive() {\n    var activeElement = getActiveElement();\n    return activeElement && this._popup.$content().get(0).contains(activeElement);\n  },\n  _shouldHideOnParentScroll: function _shouldHideOnParentScroll() {\n    return \"desktop\" === realDevice.deviceType && this._canShowVirtualKeyboard() && this._isNestedElementActive();\n  },\n  _popupHiddenHandler: function _popupHiddenHandler() {\n    this.callBase();\n    this._popupPosition = void 0;\n  },\n  _popupPositionedHandler: function _popupPositionedHandler(e) {\n    this.callBase(e);\n    this._popupPosition = e.position;\n  },\n  _getDefaultPopupPosition: function _getDefaultPopupPosition(isRtlEnabled) {\n    var _this$callBase = this.callBase(isRtlEnabled),\n        my = _this$callBase.my,\n        at = _this$callBase.at;\n\n    return {\n      my: my,\n      at: at,\n      offset: {\n        v: -1\n      },\n      collision: \"flipfit\"\n    };\n  },\n  _popupConfig: function _popupConfig() {\n    var _this3 = this;\n\n    var _this$option = this.option(),\n        focusStateEnabled = _this$option.focusStateEnabled;\n\n    return extend(this.callBase(), {\n      tabIndex: -1,\n      dragEnabled: false,\n      focusStateEnabled: focusStateEnabled,\n      contentTemplate: ANONYMOUS_TEMPLATE_NAME,\n      hideOnParentScroll: this._shouldHideOnParentScroll.bind(this),\n      position: extend(this.option(\"popupPosition\"), {\n        of: this.$element()\n      }),\n      onKeyboardHandled: function onKeyboardHandled(opts) {\n        return _this3.option(\"focusStateEnabled\") && _this3._popupElementTabHandler(opts);\n      },\n      _ignoreFunctionValueDeprecation: true,\n      maxHeight: function () {\n        var _this$_popupPosition;\n\n        var popupLocation = null === (_this$_popupPosition = this._popupPosition) || void 0 === _this$_popupPosition ? void 0 : _this$_popupPosition.v.location;\n        return getElementMaxHeightByWindow(this.$element(), popupLocation);\n      }.bind(this)\n    });\n  },\n  _popupShownHandler: function _popupShownHandler() {\n    this.callBase();\n\n    var $firstElement = this._getTabbableElements().first();\n\n    eventsEngine.trigger($firstElement, \"focus\");\n  },\n  _setCollectionWidgetOption: noop,\n  _optionChanged: function _optionChanged(args) {\n    this._dataExpressionOptionChanged(args);\n\n    switch (args.name) {\n      case \"dataSource\":\n        this._renderInputValue();\n\n        break;\n\n      case \"displayValue\":\n        this.option(\"text\", args.value);\n        break;\n\n      case \"displayExpr\":\n        this._renderValue();\n\n        break;\n\n      case \"contentTemplate\":\n        this._invalidate();\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  }\n}).include(DataExpressionMixin);\nregisterComponent(\"dxDropDownBox\", DropDownBox);\nexport default DropDownBox;","map":null,"metadata":{},"sourceType":"module"}