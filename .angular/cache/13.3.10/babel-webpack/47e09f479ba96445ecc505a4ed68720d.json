{"ast":null,"code":"import _toConsumableArray from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/appointments/viewModelGenerator.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport VerticalAppointmentsStrategy from \"./rendering_strategies/strategy_vertical\";\nimport WeekAppointmentRenderingStrategy from \"./rendering_strategies/strategy_week\";\nimport HorizontalAppointmentsStrategy from \"./rendering_strategies/strategy_horizontal\";\nimport HorizontalMonthLineAppointmentsStrategy from \"./rendering_strategies/strategy_horizontal_month_line\";\nimport HorizontalMonthAppointmentsStrategy from \"./rendering_strategies/strategy_horizontal_month\";\nimport AgendaAppointmentsStrategy from \"./rendering_strategies/strategy_agenda\";\nimport { getAppointmentKey } from \"../../../renovation/ui/scheduler/appointment/utils\";\nimport { getOverflowIndicatorColor } from \"../../../renovation/ui/scheduler/appointment/overflow_indicator/utils\";\nvar RENDERING_STRATEGIES = {\n  horizontal: HorizontalAppointmentsStrategy,\n  horizontalMonth: HorizontalMonthAppointmentsStrategy,\n  horizontalMonthLine: HorizontalMonthLineAppointmentsStrategy,\n  vertical: VerticalAppointmentsStrategy,\n  week: WeekAppointmentRenderingStrategy,\n  agenda: AgendaAppointmentsStrategy\n};\nexport var AppointmentViewModelGenerator = /*#__PURE__*/function () {\n  function AppointmentViewModelGenerator() {\n    _classCallCheck(this, AppointmentViewModelGenerator);\n  }\n\n  _createClass(AppointmentViewModelGenerator, [{\n    key: \"initRenderingStrategy\",\n    value: function initRenderingStrategy(options) {\n      var RenderingStrategy = RENDERING_STRATEGIES[options.appointmentRenderingStrategyName];\n      this.renderingStrategy = new RenderingStrategy(options);\n    }\n  }, {\n    key: \"generate\",\n    value: function generate(filteredItems, options) {\n      var isRenovatedAppointments = options.isRenovatedAppointments;\n      var appointments = filteredItems ? filteredItems.slice() : [];\n      this.initRenderingStrategy(options);\n      var renderingStrategy = this.getRenderingStrategy();\n      var positionMap = renderingStrategy.createTaskPositionMap(appointments);\n      var viewModel = this.postProcess(appointments, positionMap, isRenovatedAppointments);\n\n      if (isRenovatedAppointments) {\n        return this.makeRenovatedViewModels(viewModel);\n      }\n\n      return {\n        positionMap: positionMap,\n        viewModel: viewModel\n      };\n    }\n  }, {\n    key: \"postProcess\",\n    value: function postProcess(filteredItems, positionMap, isRenovatedAppointments) {\n      var renderingStrategy = this.getRenderingStrategy();\n      return filteredItems.map(function (data, index) {\n        if (!renderingStrategy.keepAppointmentSettings()) {\n          delete data.settings;\n        }\n\n        var appointmentSettings = positionMap[index];\n        appointmentSettings.forEach(function (item) {\n          item.direction = \"vertical\" === renderingStrategy.getDirection() && !item.allDay ? \"vertical\" : \"horizontal\";\n        });\n        var item = {\n          itemData: data,\n          settings: appointmentSettings\n        };\n\n        if (!isRenovatedAppointments) {\n          item.needRepaint = true;\n          item.needRemove = false;\n        }\n\n        return item;\n      });\n    }\n  }, {\n    key: \"makeRenovatedViewModels\",\n    value: function makeRenovatedViewModels(viewModel) {\n      var _this = this;\n\n      var strategy = this.getRenderingStrategy();\n      var regularViewModels = [];\n      var allDayViewModels = [];\n      var compactOptions = [];\n      viewModel.forEach(function (_ref) {\n        var itemData = _ref.itemData,\n            settings = _ref.settings;\n        settings.forEach(function (options) {\n          var item = _this.prepareViewModel(options, strategy, itemData);\n\n          if (options.isCompact) {\n            compactOptions.push({\n              compactViewModel: options.virtual,\n              appointmentViewModel: item\n            });\n          } else if (options.allDay) {\n            allDayViewModels.push(item);\n          } else {\n            regularViewModels.push(item);\n          }\n        });\n      });\n      var compactViewModels = this.prepareCompactViewModels(compactOptions);\n\n      var result = _extends({\n        allDay: allDayViewModels,\n        regular: regularViewModels\n      }, compactViewModels);\n\n      return result;\n    }\n  }, {\n    key: \"prepareViewModel\",\n    value: function prepareViewModel(options, strategy, itemData) {\n      var geometry = strategy.getAppointmentGeometry(options);\n      var viewModel = {\n        key: getAppointmentKey(geometry),\n        appointment: itemData,\n        geometry: _extends({}, geometry, {\n          leftVirtualWidth: options.leftVirtualWidth,\n          topVirtualHeight: options.topVirtualHeight\n        }),\n        info: _extends({}, options.info, {\n          allDay: options.allDay,\n          direction: options.direction,\n          appointmentReduced: options.appointmentReduced\n        })\n      };\n      return viewModel;\n    }\n  }, {\n    key: \"getCompactViewModelFrame\",\n    value: function getCompactViewModelFrame(compactViewModel) {\n      return {\n        isAllDay: !!compactViewModel.isAllDay,\n        isCompact: compactViewModel.isCompact,\n        geometry: {\n          left: compactViewModel.left,\n          top: compactViewModel.top,\n          width: compactViewModel.width,\n          height: compactViewModel.height\n        },\n        items: {\n          colors: [],\n          data: [],\n          settings: []\n        }\n      };\n    }\n  }, {\n    key: \"prepareCompactViewModels\",\n    value: function prepareCompactViewModels(compactOptions) {\n      var _this2 = this;\n\n      var regularCompact = {};\n      var allDayCompact = {};\n      compactOptions.forEach(function (_ref2) {\n        var compactViewModel = _ref2.compactViewModel,\n            appointmentViewModel = _ref2.appointmentViewModel;\n        var index = compactViewModel.index,\n            isAllDay = compactViewModel.isAllDay;\n        var viewModel = isAllDay ? allDayCompact : regularCompact;\n\n        if (!viewModel[index]) {\n          viewModel[index] = _this2.getCompactViewModelFrame(compactViewModel);\n        }\n\n        var _viewModel$index$item = viewModel[index].items,\n            settings = _viewModel$index$item.settings,\n            data = _viewModel$index$item.data,\n            colors = _viewModel$index$item.colors;\n        settings.push(appointmentViewModel);\n        data.push(appointmentViewModel.appointment);\n        colors.push(appointmentViewModel.info.resourceColor);\n      });\n\n      var toArray = function toArray(items) {\n        return Object.keys(items).map(function (key) {\n          return _extends({\n            key: key\n          }, items[key]);\n        });\n      };\n\n      var allDayViewModels = toArray(allDayCompact);\n      var regularViewModels = toArray(regularCompact);\n      [].concat(_toConsumableArray(allDayViewModels), _toConsumableArray(regularViewModels)).forEach(function (viewModel) {\n        var colors = viewModel.items.colors;\n        viewModel.color = getOverflowIndicatorColor(colors[0], colors);\n      });\n      return {\n        allDayCompact: allDayViewModels,\n        regularCompact: regularViewModels\n      };\n    }\n  }, {\n    key: \"getRenderingStrategy\",\n    value: function getRenderingStrategy() {\n      return this.renderingStrategy;\n    }\n  }]);\n\n  return AppointmentViewModelGenerator;\n}();","map":null,"metadata":{},"sourceType":"module"}