{"ast":null,"code":"/**\r\n * DevExtreme (esm/core/inferno_renderer.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { render as _render } from \"inferno\";\nimport { InfernoEffectHost, hydrate } from \"@devextreme/runtime/inferno\";\nimport { createElement as _createElement } from \"inferno-create-element\";\nimport domAdapter from \"./dom_adapter\";\nimport { cleanDataRecursive } from \"./element_data\";\nimport injector from \"./utils/dependency_injector\";\n\nvar remove = function remove(element) {\n  var parentNode = element.parentNode;\n\n  if (parentNode) {\n    cleanDataRecursive(element);\n    parentNode.$V = element.$V;\n\n    _render(null, parentNode);\n\n    parentNode.appendChild(element);\n    element.innerHTML = \"\";\n    delete parentNode.$V;\n  }\n\n  delete element.$V;\n};\n\nexport default injector({\n  createElement: function createElement(component, props) {\n    return _createElement(component, props);\n  },\n  remove: remove,\n  onAfterRender: function onAfterRender() {\n    InfernoEffectHost.callEffects();\n  },\n  onPreRender: function onPreRender() {\n    InfernoEffectHost.lock();\n  },\n  render: function render(component, props, container, replace) {\n    if (!replace) {\n      var parentNode = container.parentNode;\n      var nextNode = null === container || void 0 === container ? void 0 : container.nextSibling;\n      var rootNode = domAdapter.createElement(\"div\");\n      rootNode.appendChild(container);\n      var mountNode = domAdapter.createDocumentFragment().appendChild(rootNode);\n      var vNodeAlreadyExists = !!container.$V;\n      vNodeAlreadyExists && remove(container);\n      hydrate(_createElement(component, props), mountNode);\n      container.$V = mountNode.$V;\n\n      if (parentNode) {\n        parentNode.insertBefore(container, nextNode);\n      }\n    } else {\n      _render(_createElement(component, props), container);\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"module"}