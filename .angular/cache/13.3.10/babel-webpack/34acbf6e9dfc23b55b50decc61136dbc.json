{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/map/provider.google_static.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getWidth, getHeight } from \"../../core/utils/size\";\nimport { each } from \"../../core/utils/iterator\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport Promise from \"../../core/polyfills/promise\";\nimport Provider from \"./provider\";\nimport Color from \"../../color\";\nimport { name as clickEventName } from \"../../events/click\";\nvar GOOGLE_STATIC_URL = \"https://maps.google.com/maps/api/staticmap?\";\nvar GoogleStaticProvider = Provider.inherit({\n  _locationToString: function _locationToString(location) {\n    var latLng = this._getLatLng(location);\n\n    return latLng ? latLng.lat + \",\" + latLng.lng : location.toString().replace(/ /g, \"+\");\n  },\n  _renderImpl: function _renderImpl() {\n    return this._updateMap();\n  },\n  updateDimensions: function updateDimensions() {\n    return this._updateMap();\n  },\n  updateMapType: function updateMapType() {\n    return this._updateMap();\n  },\n  updateBounds: function updateBounds() {\n    return Promise.resolve();\n  },\n  updateCenter: function updateCenter() {\n    return this._updateMap();\n  },\n  updateZoom: function updateZoom() {\n    return this._updateMap();\n  },\n  updateControls: function updateControls() {\n    return Promise.resolve();\n  },\n  addMarkers: function addMarkers(options) {\n    var that = this;\n    return this._updateMap().then(function (result) {\n      each(options, function (_, options) {\n        that._fireMarkerAddedAction({\n          options: options\n        });\n      });\n      return result;\n    });\n  },\n  removeMarkers: function removeMarkers(options) {\n    var that = this;\n    return this._updateMap().then(function (result) {\n      each(options, function (_, options) {\n        that._fireMarkerRemovedAction({\n          options: options\n        });\n      });\n      return result;\n    });\n  },\n  adjustViewport: function adjustViewport() {\n    return Promise.resolve();\n  },\n  addRoutes: function addRoutes(options) {\n    var that = this;\n    return this._updateMap().then(function (result) {\n      each(options, function (_, options) {\n        that._fireRouteAddedAction({\n          options: options\n        });\n      });\n      return result;\n    });\n  },\n  removeRoutes: function removeRoutes(options) {\n    var that = this;\n    return this._updateMap().then(function (result) {\n      each(options, function (_, options) {\n        that._fireRouteRemovedAction({\n          options: options\n        });\n      });\n      return result;\n    });\n  },\n  clean: function clean() {\n    this._$container.css(\"backgroundImage\", \"none\");\n\n    eventsEngine.off(this._$container, this._addEventNamespace(clickEventName));\n    return Promise.resolve();\n  },\n  mapRendered: function mapRendered() {\n    return true;\n  },\n  _updateMap: function _updateMap() {\n    var key = this._keyOption(\"googleStatic\");\n\n    var $container = this._$container;\n    var requestOptions = [\"sensor=false\", \"size=\" + Math.round(getWidth($container)) + \"x\" + Math.round(getHeight($container)), \"maptype=\" + this._option(\"type\"), \"center=\" + this._locationToString(this._option(\"center\")), \"zoom=\" + this._option(\"zoom\"), this._markersSubstring()];\n    requestOptions.push.apply(requestOptions, this._routeSubstrings());\n\n    if (key) {\n      requestOptions.push(\"key=\" + key);\n    }\n\n    var request = GOOGLE_STATIC_URL + requestOptions.join(\"&\");\n\n    this._$container.css(\"background\", 'url(\"' + request + '\") no-repeat 0 0');\n\n    this._attachClickEvent();\n\n    return Promise.resolve(true);\n  },\n  _markersSubstring: function _markersSubstring() {\n    var that = this;\n    var markers = [];\n\n    var markerIcon = this._option(\"markerIconSrc\");\n\n    if (markerIcon) {\n      markers.push(\"icon:\" + markerIcon);\n    }\n\n    each(this._option(\"markers\"), function (_, marker) {\n      markers.push(that._locationToString(marker.location));\n    });\n    return \"markers=\" + markers.join(\"|\");\n  },\n  _routeSubstrings: function _routeSubstrings() {\n    var that = this;\n    var routes = [];\n    each(this._option(\"routes\"), function (_, route) {\n      var color = new Color(route.color || that._defaultRouteColor()).toHex().replace(\"#\", \"0x\");\n      var opacity = Math.round(255 * (route.opacity || that._defaultRouteOpacity())).toString(16);\n\n      var width = route.weight || that._defaultRouteWeight();\n\n      var locations = [];\n      each(route.locations, function (_, routePoint) {\n        locations.push(that._locationToString(routePoint));\n      });\n      routes.push(\"path=color:\" + color + opacity + \"|weight:\" + width + \"|\" + locations.join(\"|\"));\n    });\n    return routes;\n  },\n  _attachClickEvent: function _attachClickEvent() {\n    var that = this;\n\n    var eventName = this._addEventNamespace(clickEventName);\n\n    eventsEngine.off(this._$container, eventName);\n    eventsEngine.on(this._$container, eventName, function (e) {\n      that._fireClickAction({\n        event: e\n      });\n    });\n  }\n});\nexport default GoogleStaticProvider;","map":null,"metadata":{},"sourceType":"module"}