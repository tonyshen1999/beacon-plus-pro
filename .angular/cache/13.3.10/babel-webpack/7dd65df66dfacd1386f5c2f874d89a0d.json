{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/date_box/ui.time_view.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport Editor from \"../editor/editor\";\nimport NumberBox from \"../number_box\";\nimport SelectBox from \"../select_box\";\nimport Box from \"../box\";\nimport { extend } from \"../../core/utils/extend\";\nimport registerComponent from \"../../core/component_registrator\";\nimport dateLocalization from \"../../localization/date\";\nimport dateUtils from \"./ui.date_utils\";\nvar TIMEVIEW_CLASS = \"dx-timeview\";\nvar TIMEVIEW_CLOCK_CLASS = \"dx-timeview-clock\";\nvar TIMEVIEW_FIELD_CLASS = \"dx-timeview-field\";\nvar TIMEVIEW_HOURARROW_CLASS = \"dx-timeview-hourarrow\";\nvar TIMEVIEW_TIME_SEPARATOR_CLASS = \"dx-timeview-time-separator\";\nvar TIMEVIEW_FORMAT12_CLASS = \"dx-timeview-format12\";\nvar TIMEVIEW_FORMAT12_AM = -1;\nvar TIMEVIEW_FORMAT12_PM = 1;\nvar TIMEVIEW_MINUTEARROW_CLASS = \"dx-timeview-minutearrow\";\n\nvar rotateArrow = function rotateArrow($arrow, angle, offset) {\n  cssRotate($arrow, angle, offset);\n};\n\nvar cssRotate = function cssRotate($arrow, angle, offset) {\n  $arrow.css(\"transform\", \"rotate(\" + angle + \"deg) translate(0,\" + offset + \"px)\");\n};\n\nvar TimeView = Editor.inherit({\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      value: new Date(Date.now()),\n      use24HourFormat: true,\n      _showClock: true,\n      _arrowOffset: 5,\n      stylingMode: void 0\n    });\n  },\n  _getValue: function _getValue() {\n    return this.option(\"value\") || new Date();\n  },\n  _init: function _init() {\n    this.callBase();\n    this.$element().addClass(TIMEVIEW_CLASS);\n  },\n  _render: function _render() {\n    this.callBase();\n\n    this._renderBox();\n\n    this._updateTime();\n  },\n  _renderBox: function _renderBox() {\n    var $box = $(\"<div>\").appendTo(this.$element());\n    var items = [];\n\n    if (this.option(\"_showClock\")) {\n      items.push({\n        ratio: 1,\n        shrink: 0,\n        baseSize: \"auto\",\n        template: this._renderClock.bind(this)\n      });\n    }\n\n    items.push({\n      ratio: 0,\n      shrink: 0,\n      baseSize: \"auto\",\n      template: this._renderField.bind(this)\n    });\n\n    this._createComponent($box, Box, {\n      height: \"100%\",\n      width: \"100%\",\n      direction: \"col\",\n      items: items\n    });\n  },\n  _renderClock: function _renderClock(_, __, container) {\n    this._$hourArrow = $(\"<div>\").addClass(TIMEVIEW_HOURARROW_CLASS);\n    this._$minuteArrow = $(\"<div>\").addClass(TIMEVIEW_MINUTEARROW_CLASS);\n    var $container = $(container);\n    $container.addClass(TIMEVIEW_CLOCK_CLASS).append(this._$hourArrow).append(this._$minuteArrow);\n    this.setAria(\"role\", \"presentation\", $container);\n  },\n  _updateClock: function _updateClock() {\n    var time = this._getValue();\n\n    var hourArrowAngle = time.getHours() / 12 * 360 + time.getMinutes() / 60 * 30;\n    var minuteArrowAngle = time.getMinutes() / 60 * 360;\n    rotateArrow(this._$hourArrow, hourArrowAngle, this.option(\"_arrowOffset\"));\n    rotateArrow(this._$minuteArrow, minuteArrowAngle, this.option(\"_arrowOffset\"));\n  },\n  _getBoxItems: function _getBoxItems(is12HourFormat) {\n    var _this = this;\n\n    var items = [{\n      ratio: 0,\n      shrink: 0,\n      baseSize: \"auto\",\n      template: function template() {\n        return _this._hourBox.$element();\n      }\n    }, {\n      ratio: 0,\n      shrink: 0,\n      baseSize: \"auto\",\n      template: $(\"<div>\").addClass(TIMEVIEW_TIME_SEPARATOR_CLASS).text(dateLocalization.getTimeSeparator())\n    }, {\n      ratio: 0,\n      shrink: 0,\n      baseSize: \"auto\",\n      template: function template() {\n        return _this._minuteBox.$element();\n      }\n    }];\n\n    if (is12HourFormat) {\n      items.push({\n        ratio: 0,\n        shrink: 0,\n        baseSize: \"auto\",\n        template: function template() {\n          return _this._format12.$element();\n        }\n      });\n    }\n\n    return items;\n  },\n  _renderField: function _renderField() {\n    var is12HourFormat = !this.option(\"use24HourFormat\");\n\n    this._createHourBox(is12HourFormat);\n\n    this._createMinuteBox();\n\n    if (is12HourFormat) {\n      this._createFormat12Box();\n    }\n\n    return this._createComponent($(\"<div>\").addClass(TIMEVIEW_FIELD_CLASS), Box, {\n      direction: \"row\",\n      align: \"center\",\n      crossAlign: \"center\",\n      items: this._getBoxItems(is12HourFormat)\n    }).$element();\n  },\n  _createHourBox: function _createHourBox(is12HourFormat) {\n    var _this2 = this;\n\n    var editor = this._hourBox = this._createComponent($(\"<div>\"), NumberBox, extend({\n      min: -1,\n      max: is12HourFormat ? 13 : 24,\n      value: this._getValue().getHours(),\n      onValueChanged: this._onHourBoxValueChanged.bind(this),\n      onKeyboardHandled: function onKeyboardHandled(opts) {\n        return _this2._keyboardHandler(opts);\n      }\n    }, this._getNumberBoxConfig()));\n\n    editor.setAria(\"label\", \"hours\");\n  },\n  _isPM: function _isPM() {\n    return !this.option(\"use24HourFormat\") && 1 === this._format12.option(\"value\");\n  },\n  _onHourBoxValueChanged: function _onHourBoxValueChanged(_ref) {\n    var value = _ref.value,\n        component = _ref.component;\n\n    var currentValue = this._getValue();\n\n    var newValue = new Date(currentValue);\n\n    var newHours = this._convertMaxHourToMin(value);\n\n    component.option(\"value\", newHours);\n\n    if (this._isPM()) {\n      newHours += 12;\n    }\n\n    newValue.setHours(newHours);\n    dateUtils.normalizeTime(newValue);\n    this.option(\"value\", newValue);\n  },\n  _convertMaxHourToMin: function _convertMaxHourToMin(hours) {\n    var maxHoursValue = this.option(\"use24HourFormat\") ? 24 : 12;\n    return (maxHoursValue + hours) % maxHoursValue;\n  },\n  _createMinuteBox: function _createMinuteBox() {\n    var _this3 = this;\n\n    var editor = this._minuteBox = this._createComponent($(\"<div>\"), NumberBox, extend({\n      min: -1,\n      max: 60,\n      value: this._getValue().getMinutes(),\n      onKeyboardHandled: function onKeyboardHandled(opts) {\n        return _this3._keyboardHandler(opts);\n      },\n      onValueChanged: function onValueChanged(_ref2) {\n        var value = _ref2.value,\n            component = _ref2.component;\n        var newMinutes = (60 + value) % 60;\n        component.option(\"value\", newMinutes);\n        var time = new Date(_this3._getValue());\n        time.setMinutes(newMinutes);\n        dateUtils.normalizeTime(time);\n\n        _this3.option(\"value\", time);\n      }\n    }, this._getNumberBoxConfig()));\n\n    editor.setAria(\"label\", \"minutes\");\n  },\n  _createFormat12Box: function _createFormat12Box() {\n    var _this4 = this;\n\n    var periodNames = dateLocalization.getPeriodNames();\n\n    var editor = this._format12 = this._createComponent($(\"<div>\").addClass(TIMEVIEW_FORMAT12_CLASS), SelectBox, {\n      items: [{\n        value: TIMEVIEW_FORMAT12_AM,\n        text: periodNames[0]\n      }, {\n        value: TIMEVIEW_FORMAT12_PM,\n        text: periodNames[1]\n      }],\n      valueExpr: \"value\",\n      displayExpr: \"text\",\n      onKeyboardHandled: function onKeyboardHandled(opts) {\n        return _this4._keyboardHandler(opts);\n      },\n      onValueChanged: function onValueChanged(_ref3) {\n        var value = _ref3.value;\n\n        var hours = _this4._getValue().getHours();\n\n        var time = new Date(_this4._getValue());\n        var newHours = (hours + 12 * value) % 24;\n        time.setHours(newHours);\n\n        _this4.option(\"value\", time);\n      },\n      value: this._getValue().getHours() >= 12 ? TIMEVIEW_FORMAT12_PM : TIMEVIEW_FORMAT12_AM,\n      stylingMode: this.option(\"stylingMode\")\n    });\n\n    editor.setAria(\"label\", \"type\");\n  },\n  _refreshFormat12: function _refreshFormat12() {\n    if (this.option(\"use24HourFormat\")) {\n      return;\n    }\n\n    var value = this._getValue();\n\n    var hours = value.getHours();\n    var isPM = hours >= 12;\n    var newValue = isPM ? TIMEVIEW_FORMAT12_PM : TIMEVIEW_FORMAT12_AM;\n\n    this._silentEditorValueUpdate(this._format12, newValue);\n  },\n  _silentEditorValueUpdate: function _silentEditorValueUpdate(editor, value) {\n    if (editor) {\n      editor._suppressValueChangeAction();\n\n      editor.option(\"value\", value);\n\n      editor._resumeValueChangeAction();\n    }\n  },\n  _getNumberBoxConfig: function _getNumberBoxConfig() {\n    return {\n      showSpinButtons: true,\n      displayValueFormatter: function displayValueFormatter(value) {\n        return (value < 10 ? \"0\" : \"\") + value;\n      },\n      stylingMode: this.option(\"stylingMode\")\n    };\n  },\n  _normalizeHours: function _normalizeHours(hours) {\n    return this.option(\"use24HourFormat\") ? hours : hours % 12 || 12;\n  },\n  _updateField: function _updateField() {\n    var hours = this._normalizeHours(this._getValue().getHours());\n\n    this._silentEditorValueUpdate(this._hourBox, hours);\n\n    this._silentEditorValueUpdate(this._minuteBox, this._getValue().getMinutes());\n\n    this._refreshFormat12();\n  },\n  _updateTime: function _updateTime() {\n    if (this.option(\"_showClock\")) {\n      this._updateClock();\n    }\n\n    this._updateField();\n  },\n  _visibilityChanged: function _visibilityChanged(visible) {\n    if (visible) {\n      this._updateTime();\n    }\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"value\":\n        this._updateTime();\n\n        this.callBase(args);\n        break;\n\n      case \"_arrowOffset\":\n        break;\n\n      case \"use24HourFormat\":\n      case \"_showClock\":\n      case \"stylingMode\":\n        this._invalidate();\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  }\n});\nregisterComponent(\"dxTimeView\", TimeView);\nexport default TimeView;","map":null,"metadata":{},"sourceType":"module"}