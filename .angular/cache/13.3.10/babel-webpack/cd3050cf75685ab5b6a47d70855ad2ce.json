{"ast":null,"code":"import _toConsumableArray from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n\n/**\r\n * DevExtreme (esm/ui/form/ui.form.layout_manager.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getWidth } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { default as FormItemsRunTimeInfo } from \"./ui.form.items_runtime_info\";\nimport registerComponent from \"../../core/component_registrator\";\nimport { isDefined, isEmptyObject, isFunction, isObject, type } from \"../../core/utils/type\";\nimport variableWrapper from \"../../core/utils/variable_wrapper\";\nimport { getCurrentScreenFactor, hasWindow } from \"../../core/utils/window\";\nimport { each } from \"../../core/utils/iterator\";\nimport { extend } from \"../../core/utils/extend\";\nimport { normalizeIndexes } from \"../../core/utils/array\";\nimport { compileGetter } from \"../../core/utils/data\";\nimport { removeEvent } from \"../../events/remove\";\nimport messageLocalization from \"../../localization/message\";\nimport { styleProp } from \"../../core/utils/style\";\nimport Widget from \"../widget/ui.widget\";\nimport ResponsiveBox from \"../responsive_box\";\nimport { LAYOUT_MANAGER_ONE_COLUMN, FORM_LAYOUT_MANAGER_CLASS, SINGLE_COLUMN_ITEM_CONTENT, ROOT_SIMPLE_ITEM_CLASS, SIMPLE_ITEM_TYPE, FIELD_ITEM_CLASS } from \"./constants\";\nimport \"../text_box\";\nimport \"../number_box\";\nimport \"../check_box\";\nimport \"../date_box\";\nimport \"../button\";\nimport { renderFieldItem } from \"./components/field_item\";\nimport { renderButtonItem } from \"./components/button_item\";\nimport { renderEmptyItem } from \"./components/empty_item\";\nimport { convertToRenderFieldItemOptions } from \"./ui.form.layout_manager.utils\";\nvar FORM_EDITOR_BY_DEFAULT = \"dxTextBox\";\nvar LAYOUT_MANAGER_FIRST_ROW_CLASS = \"dx-first-row\";\nvar LAYOUT_MANAGER_LAST_ROW_CLASS = \"dx-last-row\";\nvar LAYOUT_MANAGER_FIRST_COL_CLASS = \"dx-first-col\";\nvar LAYOUT_MANAGER_LAST_COL_CLASS = \"dx-last-col\";\nvar LAYOUT_STRATEGY_FLEX = \"flex\";\nvar LAYOUT_STRATEGY_FALLBACK = \"fallback\";\nvar LayoutManager = Widget.inherit({\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      layoutData: {},\n      readOnly: false,\n      colCount: 1,\n      colCountByScreen: void 0,\n      labelLocation: \"left\",\n      onFieldDataChanged: null,\n      onEditorEnterKey: null,\n      customizeItem: null,\n      alignItemLabels: true,\n      minColWidth: 200,\n      showRequiredMark: true,\n      screenByWidth: null,\n      showOptionalMark: false,\n      requiredMark: \"*\",\n      labelMode: \"outside\",\n      optionalMark: messageLocalization.format(\"dxForm-optionalMark\"),\n      requiredMessage: messageLocalization.getFormatter(\"dxForm-requiredMessage\")\n    });\n  },\n  _setOptionsByReference: function _setOptionsByReference() {\n    this.callBase();\n    extend(this._optionsByReference, {\n      layoutData: true,\n      validationGroup: true\n    });\n  },\n  _init: function _init() {\n    var layoutData = this.option(\"layoutData\");\n    this.callBase();\n    this._itemWatchers = [];\n    this._itemsRunTimeInfo = new FormItemsRunTimeInfo();\n\n    this._updateReferencedOptions(layoutData);\n\n    this._initDataAndItems(layoutData);\n  },\n  _dispose: function _dispose() {\n    this.callBase();\n\n    this._cleanItemWatchers();\n  },\n  _initDataAndItems: function _initDataAndItems(initialData) {\n    this._syncDataWithItems();\n\n    this._updateItems(initialData);\n  },\n  _syncDataWithItems: function _syncDataWithItems() {\n    var _this = this;\n\n    var layoutData = this.option(\"layoutData\");\n    var userItems = this.option(\"items\");\n\n    if (isDefined(userItems)) {\n      userItems.forEach(function (item) {\n        if (item.dataField && void 0 === _this._getDataByField(item.dataField)) {\n          var value;\n\n          if (item.editorOptions) {\n            value = item.editorOptions.value;\n          }\n\n          if (isDefined(value) || item.dataField in layoutData) {\n            _this._updateFieldValue(item.dataField, value);\n          }\n        }\n      });\n    }\n  },\n  _getDataByField: function _getDataByField(dataField) {\n    return dataField ? this.option(\"layoutData.\" + dataField) : null;\n  },\n  _isCheckboxUndefinedStateEnabled: function _isCheckboxUndefinedStateEnabled(_ref) {\n    var allowIndeterminateState = _ref.allowIndeterminateState,\n        editorType = _ref.editorType,\n        dataField = _ref.dataField;\n\n    if (true === allowIndeterminateState && \"dxCheckBox\" === editorType) {\n      var nameParts = [\"layoutData\"].concat(_toConsumableArray(dataField.split(\".\")));\n      var propertyName = nameParts.pop();\n      var layoutData = this.option(nameParts.join(\".\"));\n      return layoutData && propertyName in layoutData;\n    }\n\n    return false;\n  },\n  _updateFieldValue: function _updateFieldValue(dataField, value) {\n    var layoutData = this.option(\"layoutData\");\n    var newValue = value;\n\n    if (!variableWrapper.isWrapped(layoutData[dataField]) && isDefined(dataField)) {\n      this.option(\"layoutData.\" + dataField, newValue);\n    } else if (variableWrapper.isWritableWrapped(layoutData[dataField])) {\n      newValue = isFunction(newValue) ? newValue() : newValue;\n      layoutData[dataField](newValue);\n    }\n\n    this._triggerOnFieldDataChanged({\n      dataField: dataField,\n      value: newValue\n    });\n  },\n  _triggerOnFieldDataChanged: function _triggerOnFieldDataChanged(args) {\n    this._createActionByOption(\"onFieldDataChanged\")(args);\n  },\n  _updateItems: function _updateItems(layoutData) {\n    var that = this;\n    var userItems = this.option(\"items\");\n    var isUserItemsExist = isDefined(userItems);\n    var customizeItem = that.option(\"customizeItem\");\n    var items = isUserItemsExist ? userItems : this._generateItemsByData(layoutData);\n\n    if (isDefined(items)) {\n      var processedItems = [];\n      each(items, function (index, item) {\n        if (that._isAcceptableItem(item)) {\n          item = that._processItem(item);\n          customizeItem && customizeItem(item);\n\n          if (isObject(item) && false !== variableWrapper.unwrap(item.visible)) {\n            processedItems.push(item);\n          }\n        }\n      });\n\n      if (!that._itemWatchers.length || !isUserItemsExist) {\n        that._updateItemWatchers(items);\n      }\n\n      this._setItems(processedItems);\n\n      this._sortItems();\n    }\n  },\n  _cleanItemWatchers: function _cleanItemWatchers() {\n    this._itemWatchers.forEach(function (dispose) {\n      dispose();\n    });\n\n    this._itemWatchers = [];\n  },\n  _updateItemWatchers: function _updateItemWatchers(items) {\n    var that = this;\n\n    var watch = that._getWatch();\n\n    items.forEach(function (item) {\n      if (isObject(item) && isDefined(item.visible) && isFunction(watch)) {\n        that._itemWatchers.push(watch(function () {\n          return variableWrapper.unwrap(item.visible);\n        }, function () {\n          that._updateItems(that.option(\"layoutData\"));\n\n          that.repaint();\n        }, {\n          skipImmediate: true\n        }));\n      }\n    });\n  },\n  _generateItemsByData: function _generateItemsByData(layoutData) {\n    var result = [];\n\n    if (isDefined(layoutData)) {\n      each(layoutData, function (dataField) {\n        result.push({\n          dataField: dataField\n        });\n      });\n    }\n\n    return result;\n  },\n  _isAcceptableItem: function _isAcceptableItem(item) {\n    var itemField = item.dataField || item;\n\n    var itemData = this._getDataByField(itemField);\n\n    return !(isFunction(itemData) && !variableWrapper.isWrapped(itemData));\n  },\n  _processItem: function _processItem(item) {\n    if (\"string\" === typeof item) {\n      item = {\n        dataField: item\n      };\n    }\n\n    if (\"object\" === typeof item && !item.itemType) {\n      item.itemType = SIMPLE_ITEM_TYPE;\n    }\n\n    if (!isDefined(item.editorType) && isDefined(item.dataField)) {\n      var value = this._getDataByField(item.dataField);\n\n      item.editorType = isDefined(value) ? this._getEditorTypeByDataType(type(value)) : FORM_EDITOR_BY_DEFAULT;\n    }\n\n    if (\"dxCheckBox\" === item.editorType) {\n      var _item$allowIndetermin;\n\n      item.allowIndeterminateState = null !== (_item$allowIndetermin = item.allowIndeterminateState) && void 0 !== _item$allowIndetermin ? _item$allowIndetermin : true;\n    }\n\n    return item;\n  },\n  _getEditorTypeByDataType: function _getEditorTypeByDataType(dataType) {\n    switch (dataType) {\n      case \"number\":\n        return \"dxNumberBox\";\n\n      case \"date\":\n        return \"dxDateBox\";\n\n      case \"boolean\":\n        return \"dxCheckBox\";\n\n      default:\n        return \"dxTextBox\";\n    }\n  },\n  _sortItems: function _sortItems() {\n    normalizeIndexes(this._items, \"visibleIndex\");\n\n    this._sortIndexes();\n  },\n  _sortIndexes: function _sortIndexes() {\n    this._items.sort(function (itemA, itemB) {\n      var indexA = itemA.visibleIndex;\n      var indexB = itemB.visibleIndex;\n      var result;\n\n      if (indexA > indexB) {\n        result = 1;\n      } else if (indexA < indexB) {\n        result = -1;\n      } else {\n        result = 0;\n      }\n\n      return result;\n    });\n  },\n  _initMarkup: function _initMarkup() {\n    this._itemsRunTimeInfo.clear();\n\n    this.$element().addClass(FORM_LAYOUT_MANAGER_CLASS);\n    this.callBase();\n\n    this._renderResponsiveBox();\n  },\n  _hasBrowserFlex: function _hasBrowserFlex() {\n    return styleProp(LAYOUT_STRATEGY_FLEX) === LAYOUT_STRATEGY_FLEX;\n  },\n  _renderResponsiveBox: function _renderResponsiveBox() {\n    var templatesInfo = [];\n\n    if (this._items && this._items.length) {\n      var colCount = this._getColCount();\n\n      var $container = $(\"<div>\").appendTo(this.$element());\n\n      this._prepareItemsWithMerging(colCount);\n\n      var layoutItems = this._generateLayoutItems();\n\n      this._responsiveBox = this._createComponent($container, ResponsiveBox, this._getResponsiveBoxConfig(layoutItems, colCount, templatesInfo));\n\n      if (!hasWindow()) {\n        this._renderTemplates(templatesInfo);\n      }\n    }\n  },\n  _itemStateChangedHandler: function _itemStateChangedHandler(e) {\n    this._refresh();\n  },\n  _renderTemplates: function _renderTemplates(templatesInfo) {\n    var that = this;\n    each(templatesInfo, function (_, info) {\n      switch (info.itemType) {\n        case \"empty\":\n          renderEmptyItem(info);\n          break;\n\n        case \"button\":\n          that._renderButtonItem(info);\n\n          break;\n\n        default:\n          that._renderFieldItem(info);\n\n      }\n    });\n  },\n  _getResponsiveBoxConfig: function _getResponsiveBoxConfig(layoutItems, colCount, templatesInfo) {\n    var that = this;\n    var colCountByScreen = that.option(\"colCountByScreen\");\n    var xsColCount = colCountByScreen && colCountByScreen.xs;\n    return {\n      onItemStateChanged: this._itemStateChangedHandler.bind(this),\n      _layoutStrategy: that._hasBrowserFlex() ? LAYOUT_STRATEGY_FLEX : LAYOUT_STRATEGY_FALLBACK,\n      onLayoutChanged: function onLayoutChanged() {\n        var onLayoutChanged = that.option(\"onLayoutChanged\");\n        var isSingleColumnMode = that.isSingleColumnMode();\n\n        if (onLayoutChanged) {\n          that.$element().toggleClass(LAYOUT_MANAGER_ONE_COLUMN, isSingleColumnMode);\n          onLayoutChanged(isSingleColumnMode);\n        }\n      },\n      onContentReady: function onContentReady(e) {\n        if (hasWindow()) {\n          that._renderTemplates(templatesInfo);\n        }\n\n        if (that.option(\"onLayoutChanged\")) {\n          that.$element().toggleClass(LAYOUT_MANAGER_ONE_COLUMN, that.isSingleColumnMode(e.component));\n        }\n      },\n      itemTemplate: function itemTemplate(e, itemData, itemElement) {\n        if (!e.location) {\n          return;\n        }\n\n        var $itemElement = $(itemElement);\n        var itemRenderedCountInPreviousRows = e.location.row * colCount;\n        var item = that._items[e.location.col + itemRenderedCountInPreviousRows];\n\n        if (!item) {\n          return;\n        }\n\n        var itemCssClassList = [item.cssClass];\n        $itemElement.toggleClass(SINGLE_COLUMN_ITEM_CONTENT, that.isSingleColumnMode(this));\n\n        if (0 === e.location.row) {\n          itemCssClassList.push(LAYOUT_MANAGER_FIRST_ROW_CLASS);\n        }\n\n        if (0 === e.location.col) {\n          itemCssClassList.push(LAYOUT_MANAGER_FIRST_COL_CLASS);\n        }\n\n        if (item.itemType === SIMPLE_ITEM_TYPE && that.option(\"isRoot\")) {\n          $itemElement.addClass(ROOT_SIMPLE_ITEM_CLASS);\n        }\n\n        var isLastColumn = e.location.col === colCount - 1 || e.location.col + e.location.colspan === colCount;\n\n        var rowsCount = that._getRowsCount();\n\n        var isLastRow = e.location.row === rowsCount - 1;\n\n        if (isLastColumn) {\n          itemCssClassList.push(LAYOUT_MANAGER_LAST_COL_CLASS);\n        }\n\n        if (isLastRow) {\n          itemCssClassList.push(LAYOUT_MANAGER_LAST_ROW_CLASS);\n        }\n\n        if (\"empty\" !== item.itemType) {\n          itemCssClassList.push(FIELD_ITEM_CLASS);\n          itemCssClassList.push(that.option(\"cssItemClass\"));\n\n          if (isDefined(item.col)) {\n            itemCssClassList.push(\"dx-col-\" + item.col);\n          }\n        }\n\n        templatesInfo.push({\n          itemType: item.itemType,\n          item: item,\n          $parent: $itemElement,\n          rootElementCssClassList: itemCssClassList\n        });\n      },\n      cols: that._generateRatio(colCount),\n      rows: that._generateRatio(that._getRowsCount(), true),\n      dataSource: layoutItems,\n      screenByWidth: that.option(\"screenByWidth\"),\n      singleColumnScreen: xsColCount ? false : \"xs\"\n    };\n  },\n  _getColCount: function _getColCount() {\n    var colCount = this.option(\"colCount\");\n    var colCountByScreen = this.option(\"colCountByScreen\");\n\n    if (colCountByScreen) {\n      var screenFactor = this.option(\"form\").getTargetScreenFactor();\n\n      if (!screenFactor) {\n        screenFactor = hasWindow() ? getCurrentScreenFactor(this.option(\"screenByWidth\")) : \"lg\";\n      }\n\n      colCount = colCountByScreen[screenFactor] || colCount;\n    }\n\n    if (\"auto\" === colCount) {\n      if (this._cashedColCount) {\n        return this._cashedColCount;\n      }\n\n      this._cashedColCount = colCount = this._getMaxColCount();\n    }\n\n    return colCount < 1 ? 1 : colCount;\n  },\n  _getMaxColCount: function _getMaxColCount() {\n    if (!hasWindow()) {\n      return 1;\n    }\n\n    var minColWidth = this.option(\"minColWidth\");\n    var width = getWidth(this.$element());\n    var itemsCount = this._items.length;\n    var maxColCount = Math.floor(width / minColWidth) || 1;\n    return itemsCount < maxColCount ? itemsCount : maxColCount;\n  },\n  isCachedColCountObsolete: function isCachedColCountObsolete() {\n    return this._cashedColCount && this._getMaxColCount() !== this._cashedColCount;\n  },\n  _prepareItemsWithMerging: function _prepareItemsWithMerging(colCount) {\n    var items = this._items.slice(0);\n\n    var item;\n    var itemsMergedByCol;\n    var result = [];\n    var j;\n    var i;\n\n    for (i = 0; i < items.length; i++) {\n      item = items[i];\n      result.push(item);\n\n      if (this.option(\"alignItemLabels\") || item.alignItemLabels || item.colSpan) {\n        item.col = this._getColByIndex(result.length - 1, colCount);\n      }\n\n      if (item.colSpan > 1 && item.col + item.colSpan <= colCount) {\n        itemsMergedByCol = [];\n\n        for (j = 0; j < item.colSpan - 1; j++) {\n          itemsMergedByCol.push({\n            merged: true\n          });\n        }\n\n        result = result.concat(itemsMergedByCol);\n      } else {\n        delete item.colSpan;\n      }\n    }\n\n    this._setItems(result);\n  },\n  _getColByIndex: function _getColByIndex(index, colCount) {\n    return index % colCount;\n  },\n  _setItems: function _setItems(items) {\n    this._items = items;\n    this._cashedColCount = null;\n  },\n  _generateLayoutItems: function _generateLayoutItems() {\n    var items = this._items;\n\n    var colCount = this._getColCount();\n\n    var result = [];\n    var item;\n    var i;\n\n    for (i = 0; i < items.length; i++) {\n      item = items[i];\n\n      if (!item.merged) {\n        var generatedItem = {\n          location: {\n            row: parseInt(i / colCount),\n            col: this._getColByIndex(i, colCount)\n          }\n        };\n\n        if (isDefined(item.disabled)) {\n          generatedItem.disabled = item.disabled;\n        }\n\n        if (isDefined(item.visible)) {\n          generatedItem.visible = item.visible;\n        }\n\n        if (isDefined(item.colSpan)) {\n          generatedItem.location.colspan = item.colSpan;\n        }\n\n        if (isDefined(item.rowSpan)) {\n          generatedItem.location.rowspan = item.rowSpan;\n        }\n\n        result.push(generatedItem);\n      }\n    }\n\n    return result;\n  },\n  _renderEmptyItem: function _renderEmptyItem($container) {\n    renderEmptyItem({\n      $container: $container\n    });\n  },\n  _renderButtonItem: function _renderButtonItem(_ref2) {\n    var item = _ref2.item,\n        $parent = _ref2.$parent,\n        rootElementCssClassList = _ref2.rootElementCssClassList;\n\n    var _renderButtonItem2 = renderButtonItem({\n      item: item,\n      $parent: $parent,\n      rootElementCssClassList: rootElementCssClassList,\n      validationGroup: this.option(\"validationGroup\"),\n      createComponentCallback: this._createComponent.bind(this)\n    }),\n        $rootElement = _renderButtonItem2.$rootElement,\n        buttonInstance = _renderButtonItem2.buttonInstance;\n\n    this._itemsRunTimeInfo.add({\n      item: item,\n      widgetInstance: buttonInstance,\n      guid: item.guid,\n      $itemContainer: $rootElement\n    });\n  },\n  _renderFieldItem: function _renderFieldItem(_ref3) {\n    var _this$option;\n\n    var item = _ref3.item,\n        $parent = _ref3.$parent,\n        rootElementCssClassList = _ref3.rootElementCssClassList;\n\n    var editorValue = this._getDataByField(item.dataField);\n\n    var canAssignUndefinedValueToEditor = false;\n\n    if (void 0 === editorValue) {\n      var allowIndeterminateState = item.allowIndeterminateState,\n          editorType = item.editorType,\n          dataField = item.dataField;\n      canAssignUndefinedValueToEditor = this._isCheckboxUndefinedStateEnabled({\n        allowIndeterminateState: allowIndeterminateState,\n        editorType: editorType,\n        dataField: dataField\n      });\n    }\n\n    var name = item.dataField || item.name;\n\n    var _renderFieldItem2 = renderFieldItem(convertToRenderFieldItemOptions({\n      $parent: $parent,\n      rootElementCssClassList: rootElementCssClassList,\n      item: item,\n      name: name,\n      editorValue: editorValue,\n      canAssignUndefinedValueToEditor: canAssignUndefinedValueToEditor,\n      formOrLayoutManager: this._getFormOrThis(),\n      createComponentCallback: this._createComponent.bind(this),\n      useFlexLayout: this._hasBrowserFlex(),\n      formLabelLocation: this.option(\"labelLocation\"),\n      requiredMessageTemplate: this.option(\"requiredMessage\"),\n      validationGroup: this.option(\"validationGroup\"),\n      editorValidationBoundary: this.option(\"validationBoundary\"),\n      editorStylingMode: this.option(\"form\") && this.option(\"form\").option(\"stylingMode\"),\n      showColonAfterLabel: this.option(\"showColonAfterLabel\"),\n      managerLabelLocation: this.option(\"labelLocation\"),\n      template: item.template ? this._getTemplate(item.template) : null,\n      itemId: this.option(\"form\") && this.option(\"form\").getItemID(name),\n      managerMarkOptions: this._getMarkOptions(),\n      labelMode: this.option(\"labelMode\")\n    })),\n        $fieldEditorContainer = _renderFieldItem2.$fieldEditorContainer,\n        widgetInstance = _renderFieldItem2.widgetInstance,\n        $rootElement = _renderFieldItem2.$rootElement;\n\n    null === (_this$option = this.option(\"onFieldItemRendered\")) || void 0 === _this$option ? void 0 : _this$option();\n\n    if (widgetInstance && item.dataField) {\n      this._bindDataField(widgetInstance, item.dataField, item.editorType, $fieldEditorContainer);\n    }\n\n    this._itemsRunTimeInfo.add({\n      item: item,\n      widgetInstance: widgetInstance,\n      guid: item.guid,\n      $itemContainer: $rootElement\n    });\n  },\n  _getMarkOptions: function _getMarkOptions() {\n    return {\n      showRequiredMark: this.option(\"showRequiredMark\"),\n      requiredMark: this.option(\"requiredMark\"),\n      showOptionalMark: this.option(\"showOptionalMark\"),\n      optionalMark: this.option(\"optionalMark\")\n    };\n  },\n  _getFormOrThis: function _getFormOrThis() {\n    return this.option(\"form\") || this;\n  },\n  _bindDataField: function _bindDataField(editorInstance, dataField, editorType, $container) {\n    var formOrThis = this._getFormOrThis();\n\n    editorInstance.on(\"enterKey\", function (args) {\n      formOrThis._createActionByOption(\"onEditorEnterKey\")(extend(args, {\n        dataField: dataField\n      }));\n    });\n\n    this._createWatcher(editorInstance, $container, dataField);\n\n    this.linkEditorToDataField(editorInstance, dataField, editorType);\n  },\n  _createWatcher: function _createWatcher(editorInstance, $container, dataField) {\n    var that = this;\n\n    var watch = that._getWatch();\n\n    if (!isFunction(watch)) {\n      return;\n    }\n\n    var dispose = watch(function () {\n      return that._getDataByField(dataField);\n    }, function () {\n      var fieldValue = that._getDataByField(dataField);\n\n      if (\"dxTagBox\" === editorInstance.NAME) {\n        var editorValue = editorInstance.option(\"value\");\n\n        if (fieldValue !== editorValue && function (array1, array2) {\n          if (!Array.isArray(array1) || !Array.isArray(array2) || array1.length !== array2.length) {\n            return false;\n          }\n\n          for (var i = 0; i < array1.length; i++) {\n            if (array1[i] !== array2[i]) {\n              return false;\n            }\n          }\n\n          return true;\n        }(fieldValue, editorValue)) {\n          return;\n        }\n      }\n\n      editorInstance.option(\"value\", fieldValue);\n    }, {\n      deep: true,\n      skipImmediate: true\n    });\n    eventsEngine.on($container, removeEvent, dispose);\n  },\n  _getWatch: function _getWatch() {\n    if (!isDefined(this._watch)) {\n      var formInstance = this.option(\"form\");\n      this._watch = formInstance && formInstance.option(\"integrationOptions.watchMethod\");\n    }\n\n    return this._watch;\n  },\n  _createComponent: function _createComponent($editor, type, editorOptions) {\n    var readOnlyState = this.option(\"readOnly\");\n    var instance = this.callBase($editor, type, editorOptions);\n    readOnlyState && instance.option(\"readOnly\", readOnlyState);\n    this.on(\"optionChanged\", function (args) {\n      if (\"readOnly\" === args.name && !isDefined(editorOptions.readOnly)) {\n        instance.option(args.name, args.value);\n      }\n    });\n    return instance;\n  },\n  _generateRatio: function _generateRatio(count, isAutoSize) {\n    var result = [];\n    var ratio;\n    var i;\n\n    for (i = 0; i < count; i++) {\n      ratio = {\n        ratio: 1\n      };\n\n      if (isAutoSize) {\n        ratio.baseSize = \"auto\";\n      }\n\n      result.push(ratio);\n    }\n\n    return result;\n  },\n  _getRowsCount: function _getRowsCount() {\n    return Math.ceil(this._items.length / this._getColCount());\n  },\n  _updateReferencedOptions: function _updateReferencedOptions(newLayoutData) {\n    var _this2 = this;\n\n    var layoutData = this.option(\"layoutData\");\n\n    if (isObject(layoutData)) {\n      Object.getOwnPropertyNames(layoutData).forEach(function (property) {\n        return delete _this2._optionsByReference[\"layoutData.\" + property];\n      });\n    }\n\n    if (isObject(newLayoutData)) {\n      Object.getOwnPropertyNames(newLayoutData).forEach(function (property) {\n        return _this2._optionsByReference[\"layoutData.\" + property] = true;\n      });\n    }\n  },\n  _resetWidget: function _resetWidget(instance) {\n    this._disableEditorValueChangedHandler = true;\n    instance.reset();\n    this._disableEditorValueChangedHandler = false;\n    instance.option(\"isValid\", true);\n  },\n  _optionChanged: function _optionChanged(args) {\n    var _this3 = this;\n\n    if (0 === args.fullName.search(\"layoutData.\")) {\n      return;\n    }\n\n    switch (args.name) {\n      case \"showRequiredMark\":\n      case \"showOptionalMark\":\n      case \"requiredMark\":\n      case \"optionalMark\":\n        this._cashedRequiredConfig = null;\n\n        this._invalidate();\n\n        break;\n\n      case \"layoutData\":\n        this._updateReferencedOptions(args.value);\n\n        if (this.option(\"items\")) {\n          if (!isEmptyObject(args.value)) {\n            this._itemsRunTimeInfo.each(function (_, itemRunTimeInfo) {\n              if (isDefined(itemRunTimeInfo.item)) {\n                var dataField = itemRunTimeInfo.item.dataField;\n\n                if (dataField && isDefined(itemRunTimeInfo.widgetInstance)) {\n                  var valueGetter = compileGetter(dataField);\n                  var dataValue = valueGetter(args.value);\n                  var _itemRunTimeInfo$item = itemRunTimeInfo.item,\n                      allowIndeterminateState = _itemRunTimeInfo$item.allowIndeterminateState,\n                      editorType = _itemRunTimeInfo$item.editorType;\n\n                  if (void 0 !== dataValue || _this3._isCheckboxUndefinedStateEnabled({\n                    allowIndeterminateState: allowIndeterminateState,\n                    editorType: editorType,\n                    dataField: dataField\n                  })) {\n                    itemRunTimeInfo.widgetInstance.option(\"value\", dataValue);\n                  } else {\n                    _this3._resetWidget(itemRunTimeInfo.widgetInstance);\n                  }\n                }\n              }\n            });\n          }\n        } else {\n          this._initDataAndItems(args.value);\n\n          this._invalidate();\n        }\n\n        break;\n\n      case \"items\":\n        this._cleanItemWatchers();\n\n        this._initDataAndItems(args.value);\n\n        this._invalidate();\n\n        break;\n\n      case \"alignItemLabels\":\n      case \"labelLocation\":\n      case \"labelMode\":\n      case \"requiredMessage\":\n        this._invalidate();\n\n        break;\n\n      case \"customizeItem\":\n        this._updateItems(this.option(\"layoutData\"));\n\n        this._invalidate();\n\n        break;\n\n      case \"colCount\":\n        this._resetColCount();\n\n        break;\n\n      case \"minColWidth\":\n        if (\"auto\" === this.option(\"colCount\")) {\n          this._resetColCount();\n        }\n\n        break;\n\n      case \"readOnly\":\n        break;\n\n      case \"width\":\n        this.callBase(args);\n\n        if (\"auto\" === this.option(\"colCount\")) {\n          this._resetColCount();\n        }\n\n        break;\n\n      case \"onFieldDataChanged\":\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  _resetColCount: function _resetColCount() {\n    this._cashedColCount = null;\n\n    this._invalidate();\n  },\n  linkEditorToDataField: function linkEditorToDataField(editorInstance, dataField) {\n    var _this4 = this;\n\n    this.on(\"optionChanged\", function (args) {\n      if (args.fullName === \"layoutData.\".concat(dataField)) {\n        editorInstance._setOptionWithoutOptionChange(\"value\", args.value);\n      }\n    });\n    editorInstance.on(\"valueChanged\", function (args) {\n      var isValueReferenceType = isObject(args.value) || Array.isArray(args.value);\n\n      if (!_this4._disableEditorValueChangedHandler && !(isValueReferenceType && args.value === args.previousValue)) {\n        _this4._updateFieldValue(dataField, args.value);\n      }\n    });\n  },\n  _dimensionChanged: function _dimensionChanged() {\n    if (\"auto\" === this.option(\"colCount\") && this.isCachedColCountObsolete()) {\n      this._eventsStrategy.fireEvent(\"autoColCountChanged\");\n    }\n  },\n  updateData: function updateData(data, value) {\n    var that = this;\n\n    if (isObject(data)) {\n      each(data, function (dataField, fieldValue) {\n        that._updateFieldValue(dataField, fieldValue);\n      });\n    } else if (\"string\" === typeof data) {\n      that._updateFieldValue(data, value);\n    }\n  },\n  getEditor: function getEditor(field) {\n    return this._itemsRunTimeInfo.findWidgetInstanceByDataField(field) || this._itemsRunTimeInfo.findWidgetInstanceByName(field);\n  },\n  isSingleColumnMode: function isSingleColumnMode(component) {\n    var responsiveBox = this._responsiveBox || component;\n\n    if (responsiveBox) {\n      return responsiveBox.option(\"currentScreenFactor\") === responsiveBox.option(\"singleColumnScreen\");\n    }\n  },\n  getItemsRunTimeInfo: function getItemsRunTimeInfo() {\n    return this._itemsRunTimeInfo;\n  }\n});\nregisterComponent(\"dxLayoutManager\", LayoutManager);\nexport default LayoutManager;","map":null,"metadata":{},"sourceType":"module"}