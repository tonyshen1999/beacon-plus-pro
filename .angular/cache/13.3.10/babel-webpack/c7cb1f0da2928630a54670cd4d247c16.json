{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/load_indicator.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getWidth, getHeight } from \"../core/utils/size\";\nimport $ from \"../core/renderer\";\nimport { getNavigator } from \"../core/utils/window\";\nvar navigator = getNavigator();\nimport { animation } from \"../core/utils/support\";\nimport { current, isMaterial, isGeneric } from \"./themes\";\nimport { extend } from \"../core/utils/extend\";\nimport devices from \"../core/devices\";\nimport registerComponent from \"../core/component_registrator\";\nimport Widget from \"./widget/ui.widget\";\nvar LOADINDICATOR_CLASS = \"dx-loadindicator\";\nvar LOADINDICATOR_WRAPPER_CLASS = \"dx-loadindicator-wrapper\";\nvar LOADINDICATOR_CONTENT_CLASS = \"dx-loadindicator-content\";\nvar LOADINDICATOR_ICON_CLASS = \"dx-loadindicator-icon\";\nvar LOADINDICATOR_SEGMENT_CLASS = \"dx-loadindicator-segment\";\nvar LOADINDICATOR_SEGMENT_INNER_CLASS = \"dx-loadindicator-segment-inner\";\nvar LOADINDICATOR_IMAGE_CLASS = \"dx-loadindicator-image\";\nvar LoadIndicator = Widget.inherit({\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      indicatorSrc: \"\",\n      activeStateEnabled: false,\n      hoverStateEnabled: false,\n      _animatingSegmentCount: 1,\n      _animatingSegmentInner: false\n    });\n  },\n  _defaultOptionsRules: function _defaultOptionsRules() {\n    var themeName = current();\n    return this.callBase().concat([{\n      device: function device() {\n        var realDevice = devices.real();\n        var obsoleteAndroid = \"android\" === realDevice.platform && !/chrome/i.test(navigator.userAgent);\n        return obsoleteAndroid;\n      },\n      options: {\n        viaImage: true\n      }\n    }, {\n      device: function device() {\n        return isMaterial(themeName);\n      },\n      options: {\n        _animatingSegmentCount: 2,\n        _animatingSegmentInner: true\n      }\n    }, {\n      device: function device() {\n        return isGeneric(themeName);\n      },\n      options: {\n        _animatingSegmentCount: 7\n      }\n    }]);\n  },\n  _useTemplates: function _useTemplates() {\n    return false;\n  },\n  _init: function _init() {\n    this.callBase();\n    this.$element().addClass(LOADINDICATOR_CLASS);\n  },\n  _initMarkup: function _initMarkup() {\n    this.callBase();\n\n    this._renderWrapper();\n\n    this._renderIndicatorContent();\n\n    this._renderMarkup();\n  },\n  _renderWrapper: function _renderWrapper() {\n    this._$wrapper = $(\"<div>\").addClass(LOADINDICATOR_WRAPPER_CLASS);\n    this.$element().append(this._$wrapper);\n  },\n  _renderIndicatorContent: function _renderIndicatorContent() {\n    this._$content = $(\"<div>\").addClass(LOADINDICATOR_CONTENT_CLASS);\n\n    this._$wrapper.append(this._$content);\n  },\n  _renderMarkup: function _renderMarkup() {\n    if (animation() && !this.option(\"viaImage\") && !this.option(\"indicatorSrc\")) {\n      this._renderMarkupForAnimation();\n    } else {\n      this._renderMarkupForImage();\n    }\n  },\n  _renderMarkupForAnimation: function _renderMarkupForAnimation() {\n    var animatingSegmentInner = this.option(\"_animatingSegmentInner\");\n    this._$indicator = $(\"<div>\").addClass(LOADINDICATOR_ICON_CLASS);\n\n    this._$content.append(this._$indicator);\n\n    for (var i = this.option(\"_animatingSegmentCount\"); i >= 0; --i) {\n      var $segment = $(\"<div>\").addClass(LOADINDICATOR_SEGMENT_CLASS).addClass(LOADINDICATOR_SEGMENT_CLASS + i);\n\n      if (animatingSegmentInner) {\n        $segment.append($(\"<div>\").addClass(LOADINDICATOR_SEGMENT_INNER_CLASS));\n      }\n\n      this._$indicator.append($segment);\n    }\n  },\n  _renderMarkupForImage: function _renderMarkupForImage() {\n    var indicatorSrc = this.option(\"indicatorSrc\");\n\n    this._$wrapper.addClass(LOADINDICATOR_IMAGE_CLASS);\n\n    if (indicatorSrc) {\n      this._$wrapper.css(\"backgroundImage\", \"url(\" + indicatorSrc + \")\");\n    }\n  },\n  _renderDimensions: function _renderDimensions() {\n    this.callBase();\n\n    this._updateContentSizeForAnimation();\n  },\n  _updateContentSizeForAnimation: function _updateContentSizeForAnimation() {\n    if (!this._$indicator) {\n      return;\n    }\n\n    var width = this.option(\"width\");\n    var height = this.option(\"height\");\n\n    if (width || height) {\n      width = getWidth(this.$element());\n      height = getHeight(this.$element());\n      var minDimension = Math.min(height, width);\n\n      this._$wrapper.css({\n        height: minDimension,\n        width: minDimension,\n        fontSize: minDimension\n      });\n    }\n  },\n  _clean: function _clean() {\n    this.callBase();\n\n    this._removeMarkupForAnimation();\n\n    this._removeMarkupForImage();\n  },\n  _removeMarkupForAnimation: function _removeMarkupForAnimation() {\n    if (!this._$indicator) {\n      return;\n    }\n\n    this._$indicator.remove();\n\n    delete this._$indicator;\n  },\n  _removeMarkupForImage: function _removeMarkupForImage() {\n    this._$wrapper.css(\"backgroundImage\", \"none\");\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"_animatingSegmentCount\":\n      case \"_animatingSegmentInner\":\n      case \"indicatorSrc\":\n        this._invalidate();\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  }\n});\nregisterComponent(\"dxLoadIndicator\", LoadIndicator);\nexport default LoadIndicator;","map":null,"metadata":{},"sourceType":"module"}