{"ast":null,"code":"/**\r\n * DevExtreme (esm/core/utils/size.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getWindow } from \"../../core/utils/window\";\nimport domAdapter from \"../../core/dom_adapter\";\nimport { isWindow, isString, isNumeric, isRenderer } from \"../utils/type\";\nvar window = getWindow();\nvar SPECIAL_HEIGHT_VALUES = [\"auto\", \"none\", \"inherit\", \"initial\"];\n\nvar getSizeByStyles = function getSizeByStyles(elementStyles, styles) {\n  var result = 0;\n  styles.forEach(function (style) {\n    result += parseFloat(elementStyles[style]) || 0;\n  });\n  return result;\n};\n\nexport var getElementBoxParams = function getElementBoxParams(name, elementStyles) {\n  var beforeName = \"width\" === name ? \"Left\" : \"Top\";\n  var afterName = \"width\" === name ? \"Right\" : \"Bottom\";\n  return {\n    padding: getSizeByStyles(elementStyles, [\"padding\" + beforeName, \"padding\" + afterName]),\n    border: getSizeByStyles(elementStyles, [\"border\" + beforeName + \"Width\", \"border\" + afterName + \"Width\"]),\n    margin: getSizeByStyles(elementStyles, [\"margin\" + beforeName, \"margin\" + afterName])\n  };\n};\n\nvar getElementComputedStyle = function getElementComputedStyle(element) {\n  var _element$ownerDocumen;\n\n  var view = (null === element || void 0 === element ? void 0 : null === (_element$ownerDocumen = element.ownerDocument) || void 0 === _element$ownerDocumen ? void 0 : _element$ownerDocumen.defaultView) || window;\n  return view.getComputedStyle && view.getComputedStyle(element);\n};\n\nvar getCSSProperty = function getCSSProperty(element, styles, name, defaultValue) {\n  var _element$style;\n\n  return (null === styles || void 0 === styles ? void 0 : styles[name]) || (null === (_element$style = element.style) || void 0 === _element$style ? void 0 : _element$style[name]) || defaultValue;\n};\n\nvar boxIndices = {\n  content: 0,\n  padding: 1,\n  border: 2,\n  margin: 3,\n  \"content-box\": 0,\n  \"border-box\": 2\n};\nvar dimensionComponents = {\n  width: [\"left\", \"right\"],\n  height: [\"top\", \"bottom\"]\n};\n\nfunction getComponentThickness(elem, dimension, component, styles) {\n  var get = function get(elem, styles, field) {\n    return parseFloat(getCSSProperty(elem, styles, field, \"0\")) || 0;\n  };\n\n  var suffix = \"border\" === component ? \"-width\" : \"\";\n  return get(elem, styles, \"\".concat(component, \"-\").concat(dimensionComponents[dimension][0]).concat(suffix)) + get(elem, styles, \"\".concat(component, \"-\").concat(dimensionComponents[dimension][1]).concat(suffix));\n}\n\nexport var getSize = function getSize(element, dimension, box) {\n  var offsetFieldName = \"width\" === dimension ? \"offsetWidth\" : \"offsetHeight\";\n  var styles = getElementComputedStyle(element);\n  var result = getCSSProperty(element, styles, dimension);\n\n  if (\"\" === result || \"auto\" === result) {\n    result = element[offsetFieldName];\n  }\n\n  result = parseFloat(result) || 0;\n  var currentBox = getCSSProperty(element, styles, \"boxSizing\", \"content-box\");\n  var targetBox = box || currentBox;\n  var targetBoxIndex = boxIndices[targetBox];\n  var currentBoxIndex = boxIndices[currentBox];\n\n  if (void 0 === targetBoxIndex || void 0 === currentBoxIndex) {\n    throw new Error();\n  }\n\n  if (currentBoxIndex === targetBoxIndex) {\n    return result;\n  }\n\n  var coeff = Math.sign(targetBoxIndex - currentBoxIndex);\n  var padding = false;\n  var border = false;\n  var margin = false;\n  var scrollThickness = false;\n\n  if (1 === coeff) {\n    targetBoxIndex += 1;\n    currentBoxIndex += 1;\n  }\n\n  for (var boxPart = currentBoxIndex; boxPart !== targetBoxIndex; boxPart += coeff) {\n    switch (boxPart) {\n      case boxIndices.content:\n        break;\n\n      case boxIndices.padding:\n        padding = coeff * getComponentThickness(element, dimension, \"padding\", styles);\n        break;\n\n      case boxIndices.border:\n        border = coeff * getComponentThickness(element, dimension, \"border\", styles);\n        break;\n\n      case boxIndices.margin:\n        margin = coeff * getComponentThickness(element, dimension, \"margin\", styles);\n    }\n  }\n\n  if (padding || border) {\n    var paddingAndBorder = (false === padding ? coeff * getComponentThickness(element, dimension, \"padding\", styles) : padding) + (false === border ? coeff * getComponentThickness(element, dimension, \"border\", styles) : border);\n    scrollThickness = coeff * Math.max(0, Math.floor(element[offsetFieldName] - result - coeff * paddingAndBorder)) || 0;\n  }\n\n  return result + margin + padding + border + scrollThickness;\n};\n\nvar getContainerHeight = function getContainerHeight(container) {\n  return isWindow(container) ? container.innerHeight : container.offsetHeight;\n};\n\nexport var parseHeight = function parseHeight(value, container) {\n  if (value.indexOf(\"px\") > 0) {\n    value = parseInt(value.replace(\"px\", \"\"));\n  } else if (value.indexOf(\"%\") > 0) {\n    value = parseInt(value.replace(\"%\", \"\")) * getContainerHeight(container) / 100;\n  } else if (!isNaN(value)) {\n    value = parseInt(value);\n  } else if (value.indexOf(\"vh\") > 0) {\n    value = window.innerHeight / 100 * parseInt(value.replace(\"vh\", \"\"));\n  }\n\n  return value;\n};\n\nvar getHeightWithOffset = function getHeightWithOffset(value, offset, container) {\n  if (!value) {\n    return null;\n  }\n\n  if (SPECIAL_HEIGHT_VALUES.indexOf(value) > -1) {\n    return offset ? null : value;\n  }\n\n  if (isString(value)) {\n    value = parseHeight(value, container);\n  }\n\n  if (isNumeric(value)) {\n    return Math.max(0, value + offset);\n  }\n\n  var operationString = offset < 0 ? \" - \" : \" \";\n  return \"calc(\" + value + operationString + Math.abs(offset) + \"px)\";\n};\n\nexport var addOffsetToMaxHeight = function addOffsetToMaxHeight(value, offset, container) {\n  var maxHeight = getHeightWithOffset(value, offset, container);\n  return null !== maxHeight ? maxHeight : \"none\";\n};\nexport var addOffsetToMinHeight = function addOffsetToMinHeight(value, offset, container) {\n  var minHeight = getHeightWithOffset(value, offset, container);\n  return null !== minHeight ? minHeight : 0;\n};\nexport var getVerticalOffsets = function getVerticalOffsets(element, withMargins) {\n  if (!element) {\n    return 0;\n  }\n\n  var boxParams = getElementBoxParams(\"height\", window.getComputedStyle(element));\n  return boxParams.padding + boxParams.border + (withMargins ? boxParams.margin : 0);\n};\nexport var getVisibleHeight = function getVisibleHeight(element) {\n  if (element) {\n    var boundingClientRect = element.getBoundingClientRect();\n\n    if (boundingClientRect.height) {\n      return boundingClientRect.height;\n    }\n  }\n\n  return 0;\n};\nexport var implementationsMap = {\n  getWidth: function getWidth() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return elementSizeHelper.apply(void 0, [\"width\"].concat(args));\n  },\n  setWidth: function setWidth() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return elementSizeHelper.apply(void 0, [\"width\"].concat(args));\n  },\n  getHeight: function getHeight() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    return elementSizeHelper.apply(void 0, [\"height\"].concat(args));\n  },\n  setHeight: function setHeight() {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n\n    return elementSizeHelper.apply(void 0, [\"height\"].concat(args));\n  },\n  getOuterWidth: function getOuterWidth() {\n    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      args[_key5] = arguments[_key5];\n    }\n\n    return elementSizeHelper.apply(void 0, [\"outerWidth\"].concat(args));\n  },\n  setOuterWidth: function setOuterWidth() {\n    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      args[_key6] = arguments[_key6];\n    }\n\n    return elementSizeHelper.apply(void 0, [\"outerWidth\"].concat(args));\n  },\n  getOuterHeight: function getOuterHeight() {\n    for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      args[_key7] = arguments[_key7];\n    }\n\n    return elementSizeHelper.apply(void 0, [\"outerHeight\"].concat(args));\n  },\n  setOuterHeight: function setOuterHeight() {\n    for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      args[_key8] = arguments[_key8];\n    }\n\n    return elementSizeHelper.apply(void 0, [\"outerHeight\"].concat(args));\n  },\n  getInnerWidth: function getInnerWidth() {\n    for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n      args[_key9] = arguments[_key9];\n    }\n\n    return elementSizeHelper.apply(void 0, [\"innerWidth\"].concat(args));\n  },\n  setInnerWidth: function setInnerWidth() {\n    for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n      args[_key10] = arguments[_key10];\n    }\n\n    return elementSizeHelper.apply(void 0, [\"innerWidth\"].concat(args));\n  },\n  getInnerHeight: function getInnerHeight() {\n    for (var _len11 = arguments.length, args = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {\n      args[_key11] = arguments[_key11];\n    }\n\n    return elementSizeHelper.apply(void 0, [\"innerHeight\"].concat(args));\n  },\n  setInnerHeight: function setInnerHeight() {\n    for (var _len12 = arguments.length, args = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {\n      args[_key12] = arguments[_key12];\n    }\n\n    return elementSizeHelper.apply(void 0, [\"innerHeight\"].concat(args));\n  }\n};\n\nfunction elementSizeHelper(sizeProperty, el, value) {\n  return 2 === arguments.length ? elementSize(el, sizeProperty) : elementSize(el, sizeProperty, value);\n}\n\nexport var getWidth = function getWidth(el) {\n  return implementationsMap.getWidth(el);\n};\nexport var setWidth = function setWidth(el, value) {\n  return implementationsMap.setWidth(el, value);\n};\nexport var getHeight = function getHeight(el) {\n  return implementationsMap.getHeight(el);\n};\nexport var setHeight = function setHeight(el, value) {\n  return implementationsMap.setHeight(el, value);\n};\nexport var getOuterWidth = function getOuterWidth(el, includeMargin) {\n  return implementationsMap.getOuterWidth(el, includeMargin || false);\n};\nexport var setOuterWidth = function setOuterWidth(el, value) {\n  return implementationsMap.setOuterWidth(el, value);\n};\nexport var getOuterHeight = function getOuterHeight(el, includeMargin) {\n  return implementationsMap.getOuterHeight(el, includeMargin || false);\n};\nexport var setOuterHeight = function setOuterHeight(el, value) {\n  return implementationsMap.setOuterHeight(el, value);\n};\nexport var getInnerWidth = function getInnerWidth(el) {\n  return implementationsMap.getInnerWidth(el);\n};\nexport var setInnerWidth = function setInnerWidth(el, value) {\n  return implementationsMap.setInnerWidth(el, value);\n};\nexport var getInnerHeight = function getInnerHeight(el) {\n  return implementationsMap.getInnerHeight(el);\n};\nexport var setInnerHeight = function setInnerHeight(el, value) {\n  return implementationsMap.setInnerHeight(el, value);\n};\n\nvar elementSize = function elementSize(el, sizeProperty, value) {\n  var partialName = sizeProperty.toLowerCase().indexOf(\"width\") >= 0 ? \"Width\" : \"Height\";\n  var propName = partialName.toLowerCase();\n  var isOuter = 0 === sizeProperty.indexOf(\"outer\");\n  var isInner = 0 === sizeProperty.indexOf(\"inner\");\n  var isGetter = 2 === arguments.length || \"boolean\" === typeof value;\n\n  if (isRenderer(el)) {\n    if (el.length > 1 && !isGetter) {\n      for (var i = 0; i < el.length; i++) {\n        elementSize(el[i], sizeProperty, value);\n      }\n\n      return;\n    }\n\n    el = el[0];\n  }\n\n  if (!el) {\n    return;\n  }\n\n  if (isWindow(el)) {\n    return isOuter ? el[\"inner\" + partialName] : domAdapter.getDocumentElement()[\"client\" + partialName];\n  }\n\n  if (domAdapter.isDocument(el)) {\n    var documentElement = domAdapter.getDocumentElement();\n    var body = domAdapter.getBody();\n    return Math.max(body[\"scroll\" + partialName], body[\"offset\" + partialName], documentElement[\"scroll\" + partialName], documentElement[\"offset\" + partialName], documentElement[\"client\" + partialName]);\n  }\n\n  if (isGetter) {\n    var box = \"content\";\n\n    if (isOuter) {\n      box = value ? \"margin\" : \"border\";\n    }\n\n    if (isInner) {\n      box = \"padding\";\n    }\n\n    return getSize(el, propName, box);\n  }\n\n  if (isNumeric(value)) {\n    var elementStyles = getElementComputedStyle(el);\n    var sizeAdjustment = getElementBoxParams(propName, elementStyles);\n    var isBorderBox = \"border-box\" === elementStyles.boxSizing;\n    value = Number(value);\n\n    if (isOuter) {\n      value -= isBorderBox ? 0 : sizeAdjustment.border + sizeAdjustment.padding;\n    } else if (isInner) {\n      value += isBorderBox ? sizeAdjustment.border : -sizeAdjustment.padding;\n    } else if (isBorderBox) {\n      value += sizeAdjustment.border + sizeAdjustment.padding;\n    }\n  }\n\n  value += isNumeric(value) ? \"px\" : \"\";\n  domAdapter.setStyle(el, propName, value);\n  return null;\n};\n\nexport var getWindowByElement = function getWindowByElement(el) {\n  return isWindow(el) ? el : el.defaultView;\n};\nexport var getOffset = function getOffset(el) {\n  if (!el.getClientRects().length) {\n    return {\n      top: 0,\n      left: 0\n    };\n  }\n\n  var rect = el.getBoundingClientRect();\n  var win = getWindowByElement(el.ownerDocument);\n  var docElem = el.ownerDocument.documentElement;\n  return {\n    top: rect.top + win.pageYOffset - docElem.clientTop,\n    left: rect.left + win.pageXOffset - docElem.clientLeft\n  };\n};","map":null,"metadata":{},"sourceType":"module"}