{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.error_handling.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { name as clickEventName } from \"../../events/click\";\nimport { each } from \"../../core/utils/iterator\";\nimport modules from \"./ui.grid_core.modules\";\nvar ERROR_ROW_CLASS = \"dx-error-row\";\nvar ERROR_MESSAGE_CLASS = \"dx-error-message\";\nvar ERROR_CLOSEBUTTON_CLASS = \"dx-closebutton\";\nvar ACTION_CLASS = \"action\";\nvar ErrorHandlingController = modules.ViewController.inherit({\n  init: function init() {\n    this._columnHeadersView = this.getView(\"columnHeadersView\");\n    this._rowsView = this.getView(\"rowsView\");\n  },\n  _createErrorRow: function _createErrorRow(error, $tableElements) {\n    var that = this;\n    var $errorRow;\n    var $closeButton;\n\n    var $errorMessage = this._renderErrorMessage(error);\n\n    if ($tableElements) {\n      $errorRow = $(\"<tr>\").addClass(ERROR_ROW_CLASS);\n      $closeButton = $(\"<div>\").addClass(ERROR_CLOSEBUTTON_CLASS).addClass(that.addWidgetPrefix(ACTION_CLASS));\n      eventsEngine.on($closeButton, clickEventName, that.createAction(function (args) {\n        var e = args.event;\n        var $errorRow;\n        var errorRowIndex = $(e.currentTarget).closest(\".\" + ERROR_ROW_CLASS).index();\n        e.stopPropagation();\n        each($tableElements, function (_, tableElement) {\n          $errorRow = $(tableElement).children(\"tbody\").children(\"tr\").eq(errorRowIndex);\n          that.removeErrorRow($errorRow);\n        });\n        that.getController(\"resizing\") && that.getController(\"resizing\").fireContentReadyAction();\n      }));\n      $(\"<td>\").attr({\n        colSpan: that.getController(\"columns\").getVisibleColumns().length,\n        role: \"presentation\"\n      }).prepend($closeButton).append($errorMessage).appendTo($errorRow);\n      return $errorRow;\n    }\n\n    return $errorMessage;\n  },\n  _renderErrorMessage: function _renderErrorMessage(error) {\n    var message = error.url ? error.message.replace(error.url, \"\") : error.message || error;\n    var $message = $(\"<div>\").addClass(ERROR_MESSAGE_CLASS).text(message);\n\n    if (error.url) {\n      $(\"<a>\").attr(\"href\", error.url).text(error.url).appendTo($message);\n    }\n\n    return $message;\n  },\n  renderErrorRow: function renderErrorRow(error, rowIndex, $popupContent) {\n    var that = this;\n    var $errorMessageElement;\n    var $firstErrorRow;\n\n    if ($popupContent) {\n      $popupContent.find(\".\" + ERROR_MESSAGE_CLASS).remove();\n      $errorMessageElement = that._createErrorRow(error);\n      $popupContent.prepend($errorMessageElement);\n      return $errorMessageElement;\n    }\n\n    var viewElement = rowIndex >= 0 || !that._columnHeadersView.isVisible() ? that._rowsView : that._columnHeadersView;\n    var $tableElements = viewElement.getTableElements();\n    each($tableElements, function (_, tableElement) {\n      $errorMessageElement = that._createErrorRow(error, $tableElements);\n      $firstErrorRow = $firstErrorRow || $errorMessageElement;\n\n      if (rowIndex >= 0) {\n        var $row = viewElement._getRowElements($(tableElement)).eq(rowIndex);\n\n        that.removeErrorRow($row.next());\n        $errorMessageElement.insertAfter($row);\n      } else {\n        var $tbody = $(tableElement).children(\"tbody\");\n        var rowElements = $tbody.children(\"tr\");\n\n        if (that._columnHeadersView.isVisible()) {\n          that.removeErrorRow(rowElements.last());\n          $(tableElement).append($errorMessageElement);\n        } else {\n          that.removeErrorRow(rowElements.first());\n          $tbody.first().prepend($errorMessageElement);\n        }\n      }\n    });\n    var resizingController = that.getController(\"resizing\");\n    resizingController && resizingController.fireContentReadyAction();\n    return $firstErrorRow;\n  },\n  removeErrorRow: function removeErrorRow($row) {\n    if (!$row) {\n      var $columnHeaders = this._columnHeadersView && this._columnHeadersView.element();\n\n      $row = $columnHeaders && $columnHeaders.find(\".\" + ERROR_ROW_CLASS);\n\n      if (!$row || !$row.length) {\n        var $rowsViewElement = this._rowsView.element();\n\n        $row = $rowsViewElement && $rowsViewElement.find(\".\" + ERROR_ROW_CLASS);\n      }\n    }\n\n    $row && $row.hasClass(ERROR_ROW_CLASS) && $row.remove();\n  },\n  optionChanged: function optionChanged(args) {\n    switch (args.name) {\n      case \"errorRowEnabled\":\n        args.handled = true;\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  }\n});\nexport var errorHandlingModule = {\n  defaultOptions: function defaultOptions() {\n    return {\n      errorRowEnabled: true\n    };\n  },\n  controllers: {\n    errorHandling: ErrorHandlingController\n  },\n  extenders: {\n    controllers: {\n      data: {\n        init: function init() {\n          var that = this;\n          var errorHandlingController = that.getController(\"errorHandling\");\n          that.callBase();\n          that.dataErrorOccurred.add(function (error, $popupContent) {\n            if (that.option(\"errorRowEnabled\")) {\n              errorHandlingController.renderErrorRow(error, void 0, $popupContent);\n            }\n          });\n          that.changed.add(function (e) {\n            if (e && \"loadError\" === e.changeType) {\n              return;\n            }\n\n            var errorHandlingController = that.getController(\"errorHandling\");\n            var editingController = that.getController(\"editing\");\n\n            if (editingController && !editingController.hasChanges()) {\n              errorHandlingController && errorHandlingController.removeErrorRow();\n            }\n          });\n        }\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}