{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/**\r\n * DevExtreme (esm/ui/overlay/overlay_drag.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { locate, move } from \"../../animation/translator\";\nimport domAdapter from \"../../core/dom_adapter\";\nimport { getOffset, getOuterWidth, getOuterHeight } from \"../../core/utils/size\";\nimport { fitIntoRange } from \"../../core/utils/math\";\nimport { isWindow } from \"../../core/utils/type\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { start as dragStartEvent, move as dragMoveEvent, end as dragEndEvent } from \"../../events/drag\";\nimport { addNamespace } from \"../../events/utils/index\";\nvar KEYBOARD_DRAG_STEP = 5;\n\nvar OverlayDrag = /*#__PURE__*/function () {\n  function OverlayDrag(config) {\n    _classCallCheck(this, OverlayDrag);\n\n    this.init(config);\n  }\n\n  _createClass(OverlayDrag, [{\n    key: \"init\",\n    value: function init(_ref) {\n      var dragEnabled = _ref.dragEnabled,\n          handle = _ref.handle,\n          draggableElement = _ref.draggableElement,\n          positionController = _ref.positionController;\n      this._positionController = positionController;\n      this._draggableElement = draggableElement;\n      this._handle = handle;\n      this._dragEnabled = dragEnabled;\n      this.unsubscribe();\n\n      if (!dragEnabled) {\n        return;\n      }\n\n      this.subscribe();\n    }\n  }, {\n    key: \"moveDown\",\n    value: function moveDown(e) {\n      this._moveTo(KEYBOARD_DRAG_STEP, 0, e);\n    }\n  }, {\n    key: \"moveUp\",\n    value: function moveUp(e) {\n      this._moveTo(-KEYBOARD_DRAG_STEP, 0, e);\n    }\n  }, {\n    key: \"moveLeft\",\n    value: function moveLeft(e) {\n      this._moveTo(0, -KEYBOARD_DRAG_STEP, e);\n    }\n  }, {\n    key: \"moveRight\",\n    value: function moveRight(e) {\n      this._moveTo(0, KEYBOARD_DRAG_STEP, e);\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe() {\n      var _this = this;\n\n      var eventNames = this._getEventNames();\n\n      eventsEngine.on(this._handle, eventNames.startEventName, function (e) {\n        _this._dragStartHandler(e);\n      });\n      eventsEngine.on(this._handle, eventNames.updateEventName, function (e) {\n        _this._dragUpdateHandler(e);\n      });\n      eventsEngine.on(this._handle, eventNames.endEventName, function (e) {\n        _this._dragEndHandler(e);\n      });\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      var eventNames = this._getEventNames();\n\n      eventsEngine.off(this._handle, eventNames.startEventName);\n      eventsEngine.off(this._handle, eventNames.updateEventName);\n      eventsEngine.off(this._handle, eventNames.endEventName);\n    }\n  }, {\n    key: \"_getEventNames\",\n    value: function _getEventNames() {\n      var startEventName = addNamespace(dragStartEvent, \"overlayDrag\");\n      var updateEventName = addNamespace(dragMoveEvent, \"overlayDrag\");\n      var endEventName = addNamespace(dragEndEvent, \"overlayDrag\");\n      return {\n        startEventName: startEventName,\n        updateEventName: updateEventName,\n        endEventName: endEventName\n      };\n    }\n  }, {\n    key: \"_dragStartHandler\",\n    value: function _dragStartHandler(e) {\n      var allowedOffsets = this._getAllowedOffsets();\n\n      this._prevOffset = {\n        x: 0,\n        y: 0\n      };\n      e.targetElements = [];\n      e.maxTopOffset = allowedOffsets.top;\n      e.maxBottomOffset = allowedOffsets.bottom;\n      e.maxLeftOffset = allowedOffsets.left;\n      e.maxRightOffset = allowedOffsets.right;\n    }\n  }, {\n    key: \"_dragUpdateHandler\",\n    value: function _dragUpdateHandler(e) {\n      var targetOffset = {\n        top: e.offset.y - this._prevOffset.y,\n        left: e.offset.x - this._prevOffset.x\n      };\n\n      this._moveByOffset(targetOffset);\n\n      this._prevOffset = e.offset;\n    }\n  }, {\n    key: \"_dragEndHandler\",\n    value: function _dragEndHandler(event) {\n      this._positionController.dragHandled();\n\n      this._positionController.detectVisualPositionChange(event);\n    }\n  }, {\n    key: \"_moveTo\",\n    value: function _moveTo(top, left, e) {\n      if (!this._dragEnabled) {\n        return;\n      }\n\n      e.preventDefault();\n      e.stopPropagation();\n\n      var offset = this._fitOffsetIntoAllowedRange(top, left);\n\n      this._moveByOffset(offset);\n\n      this._dragEndHandler(e);\n    }\n  }, {\n    key: \"_fitOffsetIntoAllowedRange\",\n    value: function _fitOffsetIntoAllowedRange(top, left) {\n      var allowedOffsets = this._getAllowedOffsets();\n\n      return {\n        top: fitIntoRange(top, -allowedOffsets.top, allowedOffsets.bottom),\n        left: fitIntoRange(left, -allowedOffsets.left, allowedOffsets.right)\n      };\n    }\n  }, {\n    key: \"_getContainerDimensions\",\n    value: function _getContainerDimensions() {\n      var document = domAdapter.getDocument();\n\n      var container = this._positionController.$dragResizeContainer.get(0);\n\n      var containerWidth = getOuterWidth(container);\n      var containerHeight = getOuterHeight(container);\n\n      if (isWindow(container)) {\n        containerHeight = Math.max(document.body.clientHeight, containerHeight);\n        containerWidth = Math.max(document.body.clientWidth, containerWidth);\n      }\n\n      return {\n        width: containerWidth,\n        height: containerHeight\n      };\n    }\n  }, {\n    key: \"_getContainerPosition\",\n    value: function _getContainerPosition() {\n      var container = this._positionController.$dragResizeContainer.get(0);\n\n      return isWindow(container) ? {\n        top: 0,\n        left: 0\n      } : getOffset(container);\n    }\n  }, {\n    key: \"_getElementPosition\",\n    value: function _getElementPosition() {\n      return getOffset(this._draggableElement);\n    }\n  }, {\n    key: \"_getInnerDelta\",\n    value: function _getInnerDelta() {\n      var containerDimensions = this._getContainerDimensions();\n\n      var elementDimensions = this._getElementDimensions();\n\n      return {\n        x: containerDimensions.width - elementDimensions.width,\n        y: containerDimensions.height - elementDimensions.height\n      };\n    }\n  }, {\n    key: \"_getOuterDelta\",\n    value: function _getOuterDelta() {\n      var _this$_getElementDime = this._getElementDimensions(),\n          width = _this$_getElementDime.width,\n          height = _this$_getElementDime.height;\n\n      var outsideDragFactor = this._positionController.outsideDragFactor;\n      return {\n        x: width * outsideDragFactor,\n        y: height * outsideDragFactor\n      };\n    }\n  }, {\n    key: \"_getFullDelta\",\n    value: function _getFullDelta() {\n      var fullDelta = this._getInnerDelta();\n\n      var outerDelta = this._getOuterDelta();\n\n      return {\n        x: fullDelta.x + outerDelta.x,\n        y: fullDelta.y + outerDelta.y\n      };\n    }\n  }, {\n    key: \"_getElementDimensions\",\n    value: function _getElementDimensions() {\n      return {\n        width: this._draggableElement.offsetWidth,\n        height: this._draggableElement.offsetHeight\n      };\n    }\n  }, {\n    key: \"_getAllowedOffsets\",\n    value: function _getAllowedOffsets() {\n      var fullDelta = this._getFullDelta();\n\n      var isDragAllowed = fullDelta.y >= 0 && fullDelta.x >= 0;\n\n      if (!isDragAllowed) {\n        return {\n          top: 0,\n          bottom: 0,\n          left: 0,\n          right: 0\n        };\n      }\n\n      var elementPosition = this._getElementPosition();\n\n      var containerPosition = this._getContainerPosition();\n\n      var outerDelta = this._getOuterDelta();\n\n      return {\n        top: elementPosition.top - containerPosition.top + outerDelta.y,\n        bottom: -elementPosition.top + containerPosition.top + fullDelta.y,\n        left: elementPosition.left - containerPosition.left + outerDelta.x,\n        right: -elementPosition.left + containerPosition.left + fullDelta.x\n      };\n    }\n  }, {\n    key: \"_moveByOffset\",\n    value: function _moveByOffset(offset) {\n      var currentPosition = locate(this._draggableElement);\n      var newPosition = {\n        left: currentPosition.left + offset.left,\n        top: currentPosition.top + offset.top\n      };\n      move(this._draggableElement, newPosition);\n    }\n  }]);\n\n  return OverlayDrag;\n}();\n\nexport default OverlayDrag;","map":null,"metadata":{},"sourceType":"module"}