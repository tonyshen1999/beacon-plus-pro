{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/data_grid/ui.data_grid.summary.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { noop } from \"../../core/utils/common\";\nimport { isDefined, isPlainObject, isEmptyObject, isString, isFunction } from \"../../core/utils/type\";\nimport { each, map } from \"../../core/utils/iterator\";\nimport { extend } from \"../../core/utils/extend\";\nimport { compileGetter } from \"../../core/utils/data\";\nimport errors from \"../widget/ui.errors\";\nimport gridCore from \"./ui.data_grid.core\";\nimport messageLocalization from \"../../localization/message\";\nimport dataSourceAdapter from \"./ui.data_grid.data_source_adapter\";\nimport { ColumnsView } from \"../grid_core/ui.grid_core.columns_view\";\nimport AggregateCalculator from \"./aggregate_calculator\";\nimport dataQuery from \"../../data/query\";\nimport storeHelper from \"../../data/store_helper\";\nimport { normalizeSortingInfo } from \"../../data/utils\";\nvar DATAGRID_TOTAL_FOOTER_CLASS = \"dx-datagrid-total-footer\";\nvar DATAGRID_SUMMARY_ITEM_CLASS = \"dx-datagrid-summary-item\";\nvar DATAGRID_TEXT_CONTENT_CLASS = \"dx-datagrid-text-content\";\nvar DATAGRID_GROUP_FOOTER_CLASS = \"dx-datagrid-group-footer\";\nvar DATAGRID_GROUP_TEXT_CONTENT_CLASS = \"dx-datagrid-group-text-content\";\nvar DATAGRID_NOWRAP_CLASS = \"dx-datagrid-nowrap\";\nvar DATAGRID_GROUP_FOOTER_ROW_TYPE = \"groupFooter\";\nexport var renderSummaryCell = function renderSummaryCell(cell, options) {\n  var $cell = $(cell);\n  var column = options.column;\n  var summaryItems = options.summaryItems;\n  var $summaryItems = [];\n\n  if (!column.command && summaryItems) {\n    for (var i = 0; i < summaryItems.length; i++) {\n      var summaryItem = summaryItems[i];\n      $summaryItems.push($(\"<div>\").css(\"textAlign\", summaryItem.alignment || column.alignment).addClass(DATAGRID_SUMMARY_ITEM_CLASS).addClass(DATAGRID_TEXT_CONTENT_CLASS).addClass(summaryItem.cssClass).toggleClass(DATAGRID_GROUP_TEXT_CONTENT_CLASS, \"group\" === options.rowType).text(gridCore.getSummaryText(summaryItem, options.summaryTexts)));\n    }\n\n    $cell.append($summaryItems);\n  }\n};\n\nvar getSummaryCellOptions = function getSummaryCellOptions(that, options) {\n  var summaryTexts = that.option(\"summary.texts\") || {};\n  return {\n    totalItem: options.row,\n    summaryItems: options.row.summaryCells[options.columnIndex],\n    summaryTexts: summaryTexts\n  };\n};\n\nvar getGroupAggregates = function getGroupAggregates(data) {\n  return data.summary || data.aggregates || [];\n};\n\nvar recalculateWhileEditing = function recalculateWhileEditing(that) {\n  return that.option(\"summary.recalculateWhileEditing\");\n};\n\nexport var FooterView = ColumnsView.inherit({\n  _getRows: function _getRows() {\n    return this._dataController.footerItems();\n  },\n  _getCellOptions: function _getCellOptions(options) {\n    return extend(this.callBase(options), getSummaryCellOptions(this, options));\n  },\n  _renderCellContent: function _renderCellContent($cell, options) {\n    renderSummaryCell($cell, options);\n    this.callBase($cell, options);\n  },\n  _renderCore: function _renderCore(change) {\n    var needUpdateScrollLeft = false;\n\n    var totalItem = this._dataController.footerItems()[0];\n\n    if (!change || !change.columnIndices) {\n      this.element().empty().addClass(DATAGRID_TOTAL_FOOTER_CLASS).toggleClass(DATAGRID_NOWRAP_CLASS, !this.option(\"wordWrapEnabled\"));\n      needUpdateScrollLeft = true;\n    }\n\n    if (totalItem && totalItem.summaryCells && totalItem.summaryCells.length) {\n      this._updateContent(this._renderTable({\n        change: change\n      }), change);\n\n      needUpdateScrollLeft && this._updateScrollLeftPosition();\n    }\n  },\n  _updateContent: function _updateContent($newTable, change) {\n    if (change && \"update\" === change.changeType && change.columnIndices) {\n      var $row = this.getTableElement().find(\".dx-row\");\n      var $newRow = $newTable.find(\".dx-row\");\n\n      this._updateCells($row, $newRow, change.columnIndices[0]);\n    } else {\n      return this.callBase.apply(this, arguments);\n    }\n  },\n  _rowClick: function _rowClick(e) {\n    var item = this._dataController.footerItems()[e.rowIndex] || {};\n    this.executeAction(\"onRowClick\", extend({}, e, item));\n  },\n  _columnOptionChanged: function _columnOptionChanged(e) {\n    var optionNames = e.optionNames;\n\n    if (e.changeTypes.grouping) {\n      return;\n    }\n\n    if (optionNames.width || optionNames.visibleWidth) {\n      this.callBase(e);\n    }\n  },\n  _handleDataChanged: function _handleDataChanged(e) {\n    var changeType = e.changeType;\n\n    if (\"update\" === e.changeType && e.repaintChangesOnly) {\n      if (!e.totalColumnIndices) {\n        this.render();\n      } else if (e.totalColumnIndices.length) {\n        this.render(null, {\n          changeType: \"update\",\n          columnIndices: [e.totalColumnIndices]\n        });\n      }\n    } else if (\"refresh\" === changeType || \"append\" === changeType || \"prepend\" === changeType) {\n      this.render();\n    }\n  },\n  getHeight: function getHeight() {\n    return this.getElementHeight();\n  },\n  isVisible: function isVisible() {\n    return !!this._dataController.footerItems().length;\n  }\n});\nvar SummaryDataSourceAdapterExtender = {\n  init: function init() {\n    this.callBase.apply(this, arguments);\n    this._totalAggregates = [];\n    this._summaryGetter = noop;\n  },\n  summaryGetter: function summaryGetter(_summaryGetter) {\n    if (!arguments.length) {\n      return this._summaryGetter;\n    }\n\n    if (isFunction(_summaryGetter)) {\n      this._summaryGetter = _summaryGetter;\n    }\n  },\n  summary: function summary(_summary) {\n    if (!arguments.length) {\n      return this._summaryGetter();\n    }\n\n    this._summaryGetter = function () {\n      return _summary;\n    };\n  },\n  totalAggregates: function totalAggregates() {\n    return this._totalAggregates;\n  },\n  isLastLevelGroupItemsPagingLocal: function isLastLevelGroupItemsPagingLocal() {\n    var summary = this.summary();\n    var sortByGroupsInfo = summary && summary.sortByGroups();\n    return sortByGroupsInfo && sortByGroupsInfo.length;\n  },\n  sortLastLevelGroupItems: function sortLastLevelGroupItems(items, groups, paths) {\n    var groupedItems = storeHelper.multiLevelGroup(dataQuery(items), groups).toArray();\n    var result = [];\n    paths.forEach(function (path) {\n      !function forEachGroup(groups, groupCount, callback, path) {\n        path = path || [];\n\n        for (var i = 0; i < groups.length; i++) {\n          path.push(groups[i].key);\n\n          if (1 === groupCount) {\n            callback(path, groups[i].items);\n          } else {\n            forEachGroup(groups[i].items, groupCount - 1, callback, path);\n          }\n\n          path.pop();\n        }\n      }(groupedItems, groups.length, function (itemsPath, items) {\n        if (path.toString() === itemsPath.toString()) {\n          result = result.concat(items);\n        }\n      });\n    });\n    return result;\n  }\n};\n\nvar SummaryDataSourceAdapterClientExtender = function () {\n  var calculateAggregates = function calculateAggregates(that, summary, data, groupLevel) {\n    var calculator;\n\n    if (recalculateWhileEditing(that)) {\n      var editingController = that.getController(\"editing\");\n\n      if (editingController) {\n        var insertedData = editingController.getInsertedData();\n\n        if (insertedData.length) {\n          data = function applyAddedData(data, insertedData, groupLevel) {\n            if (groupLevel) {\n              return applyAddedData(data, insertedData.map(function (item) {\n                return {\n                  items: [item]\n                };\n              }, groupLevel - 1));\n            }\n\n            return data.concat(insertedData);\n          }(data, insertedData, groupLevel);\n        }\n\n        var removedData = editingController.getRemovedData();\n\n        if (removedData.length) {\n          data = function applyRemovedData(data, removedData, groupLevel) {\n            if (groupLevel) {\n              return data.map(function (data) {\n                var updatedData = {};\n                var updatedItems = applyRemovedData(data.items || [], removedData, groupLevel - 1);\n                Object.defineProperty(updatedData, \"aggregates\", {\n                  get: function get() {\n                    return data.aggregates;\n                  },\n                  set: function set(value) {\n                    data.aggregates = value;\n                  }\n                });\n                return extend(updatedData, data, {\n                  items: updatedItems\n                });\n              });\n            }\n\n            return data.filter(function (data) {\n              return removedData.indexOf(data) < 0;\n            });\n          }(data, removedData, groupLevel);\n        }\n      }\n    }\n\n    if (summary) {\n      calculator = new AggregateCalculator({\n        totalAggregates: summary.totalAggregates,\n        groupAggregates: summary.groupAggregates,\n        data: data,\n        groupLevel: groupLevel\n      });\n      calculator.calculate();\n    }\n\n    return calculator ? calculator.totalAggregates() : [];\n  };\n\n  var sortGroupsBySummary = function sortGroupsBySummary(data, group, summary) {\n    var sortByGroups = summary && summary.sortByGroups && summary.sortByGroups();\n\n    if (sortByGroups && sortByGroups.length) {\n      return function sortGroupsBySummaryCore(items, groups, sortByGroups) {\n        if (!items || !groups.length) {\n          return items;\n        }\n\n        var group = groups[0];\n        var sorts = sortByGroups[0];\n        var query;\n\n        if (group && sorts && sorts.length) {\n          query = dataQuery(items);\n          each(sorts, function (index) {\n            if (0 === index) {\n              query = query.sortBy(this.selector, this.desc);\n            } else {\n              query = query.thenBy(this.selector, this.desc);\n            }\n          });\n          query.enumerate().done(function (sortedItems) {\n            items = sortedItems;\n          });\n        }\n\n        groups = groups.slice(1);\n        sortByGroups = sortByGroups.slice(1);\n\n        if (groups.length && sortByGroups.length) {\n          each(items, function () {\n            this.items = sortGroupsBySummaryCore(this.items, groups, sortByGroups);\n          });\n        }\n\n        return items;\n      }(data, group, sortByGroups);\n    }\n\n    return data;\n  };\n\n  return {\n    _customizeRemoteOperations: function _customizeRemoteOperations(options) {\n      var summary = this.summary();\n\n      if (summary) {\n        if (options.remoteOperations.summary) {\n          if (!options.isCustomLoading || options.storeLoadOptions.isLoadingAll) {\n            if (options.storeLoadOptions.group) {\n              if (options.remoteOperations.grouping) {\n                options.storeLoadOptions.groupSummary = summary.groupAggregates;\n              } else if (summary.groupAggregates.length) {\n                options.remoteOperations.paging = false;\n              }\n            }\n\n            options.storeLoadOptions.totalSummary = summary.totalAggregates;\n          }\n        } else if (summary.totalAggregates.length || summary.groupAggregates.length && options.storeLoadOptions.group) {\n          options.remoteOperations.paging = false;\n        }\n      }\n\n      this.callBase.apply(this, arguments);\n      var cachedExtra = options.cachedData.extra;\n\n      if (cachedExtra && cachedExtra.summary && !options.isCustomLoading) {\n        options.storeLoadOptions.totalSummary = void 0;\n      }\n    },\n    _handleDataLoadedCore: function _handleDataLoadedCore(options) {\n      var groups = normalizeSortingInfo(options.storeLoadOptions.group || options.loadOptions.group || []);\n      var remoteOperations = options.remoteOperations || {};\n      var summary = this.summaryGetter()(remoteOperations);\n\n      if (!options.isCustomLoading || options.storeLoadOptions.isLoadingAll) {\n        if (remoteOperations.summary) {\n          if (!remoteOperations.paging && groups.length && summary) {\n            if (!remoteOperations.grouping) {\n              calculateAggregates(this, {\n                groupAggregates: summary.groupAggregates\n              }, options.data, groups.length);\n            }\n\n            options.data = sortGroupsBySummary(options.data, groups, summary);\n          }\n        } else if (!remoteOperations.paging && summary) {\n          var _options$cachedData, _options$cachedData$e;\n\n          var operationTypes = options.operationTypes || {};\n          var hasOperations = Object.keys(operationTypes).some(function (type) {\n            return operationTypes[type];\n          });\n\n          if (!hasOperations || !(null !== (_options$cachedData = options.cachedData) && void 0 !== _options$cachedData && null !== (_options$cachedData$e = _options$cachedData.extra) && void 0 !== _options$cachedData$e && _options$cachedData$e.summary) || groups.length && summary.groupAggregates.length) {\n            var totalAggregates = calculateAggregates(this, summary, options.data, groups.length);\n            options.extra = isPlainObject(options.extra) ? options.extra : {};\n            options.extra.summary = totalAggregates;\n\n            if (options.cachedData) {\n              options.cachedData.extra = options.extra;\n            }\n          }\n\n          options.data = sortGroupsBySummary(options.data, groups, summary);\n        }\n      }\n\n      if (!options.isCustomLoading) {\n        this._totalAggregates = options.extra && options.extra.summary || this._totalAggregates;\n      }\n\n      this.callBase(options);\n    }\n  };\n}();\n\ndataSourceAdapter.extend(SummaryDataSourceAdapterExtender);\ndataSourceAdapter.extend(SummaryDataSourceAdapterClientExtender);\ngridCore.registerModule(\"summary\", {\n  defaultOptions: function defaultOptions() {\n    return {\n      summary: {\n        groupItems: void 0,\n        totalItems: void 0,\n        calculateCustomSummary: void 0,\n        skipEmptyValues: true,\n        recalculateWhileEditing: false,\n        texts: {\n          sum: messageLocalization.format(\"dxDataGrid-summarySum\"),\n          sumOtherColumn: messageLocalization.format(\"dxDataGrid-summarySumOtherColumn\"),\n          min: messageLocalization.format(\"dxDataGrid-summaryMin\"),\n          minOtherColumn: messageLocalization.format(\"dxDataGrid-summaryMinOtherColumn\"),\n          max: messageLocalization.format(\"dxDataGrid-summaryMax\"),\n          maxOtherColumn: messageLocalization.format(\"dxDataGrid-summaryMaxOtherColumn\"),\n          avg: messageLocalization.format(\"dxDataGrid-summaryAvg\"),\n          avgOtherColumn: messageLocalization.format(\"dxDataGrid-summaryAvgOtherColumn\"),\n          count: messageLocalization.format(\"dxDataGrid-summaryCount\")\n        }\n      },\n      sortByGroupSummaryInfo: void 0\n    };\n  },\n  views: {\n    footerView: FooterView\n  },\n  extenders: {\n    controllers: {\n      data: {\n        _isDataColumn: function _isDataColumn(column) {\n          return column && (!isDefined(column.groupIndex) || column.showWhenGrouped);\n        },\n        _isGroupFooterVisible: function _isGroupFooterVisible() {\n          var groupItems = this.option(\"summary.groupItems\") || [];\n\n          for (var i = 0; i < groupItems.length; i++) {\n            var groupItem = groupItems[i];\n\n            var column = this._columnsController.columnOption(groupItem.showInColumn || groupItem.column);\n\n            if (groupItem.showInGroupFooter && this._isDataColumn(column)) {\n              return true;\n            }\n          }\n\n          return false;\n        },\n        _processGroupItems: function _processGroupItems(items, groupCount, options) {\n          var data = options && options.data;\n          var result = this.callBase.apply(this, arguments);\n\n          if (options) {\n            if (void 0 === options.isGroupFooterVisible) {\n              options.isGroupFooterVisible = this._isGroupFooterVisible();\n            }\n\n            if (data && data.items && options.isGroupFooterVisible && (options.collectContinuationItems || !data.isContinuationOnNextPage)) {\n              result.push({\n                rowType: DATAGRID_GROUP_FOOTER_ROW_TYPE,\n                key: options.path.slice(),\n                data: data,\n                groupIndex: options.path.length - 1,\n                values: []\n              });\n            }\n          }\n\n          return result;\n        },\n        _processGroupItem: function _processGroupItem(groupItem, options) {\n          var that = this;\n\n          if (!options.summaryGroupItems) {\n            options.summaryGroupItems = that.option(\"summary.groupItems\") || [];\n          }\n\n          if (\"group\" === groupItem.rowType) {\n            var groupColumnIndex = -1;\n            var afterGroupColumnIndex = -1;\n            each(options.visibleColumns, function (visibleIndex) {\n              var prevColumn = options.visibleColumns[visibleIndex - 1];\n\n              if (groupItem.groupIndex === this.groupIndex) {\n                groupColumnIndex = this.index;\n              }\n\n              if (visibleIndex > 0 && \"expand\" === prevColumn.command && \"expand\" !== this.command) {\n                afterGroupColumnIndex = this.index;\n              }\n            });\n            groupItem.summaryCells = this._calculateSummaryCells(options.summaryGroupItems, getGroupAggregates(groupItem.data), options.visibleColumns, function (summaryItem, column) {\n              if (summaryItem.showInGroupFooter) {\n                return -1;\n              }\n\n              if (summaryItem.alignByColumn && column && !isDefined(column.groupIndex) && column.index !== afterGroupColumnIndex) {\n                return column.index;\n              } else {\n                return groupColumnIndex;\n              }\n            }, true);\n          }\n\n          if (groupItem.rowType === DATAGRID_GROUP_FOOTER_ROW_TYPE) {\n            groupItem.summaryCells = this._calculateSummaryCells(options.summaryGroupItems, getGroupAggregates(groupItem.data), options.visibleColumns, function (summaryItem, column) {\n              return summaryItem.showInGroupFooter && that._isDataColumn(column) ? column.index : -1;\n            });\n          }\n\n          return groupItem;\n        },\n        _calculateSummaryCells: function _calculateSummaryCells(summaryItems, aggregates, visibleColumns, calculateTargetColumnIndex, isGroupRow) {\n          var that = this;\n          var summaryCells = [];\n          var summaryCellsByColumns = {};\n          each(summaryItems, function (summaryIndex, summaryItem) {\n            var column = that._columnsController.columnOption(summaryItem.column);\n\n            var showInColumn = summaryItem.showInColumn && that._columnsController.columnOption(summaryItem.showInColumn) || column;\n            var columnIndex = calculateTargetColumnIndex(summaryItem, showInColumn);\n\n            if (columnIndex >= 0) {\n              if (!summaryCellsByColumns[columnIndex]) {\n                summaryCellsByColumns[columnIndex] = [];\n              }\n\n              var aggregate = aggregates[summaryIndex];\n\n              if (aggregate === aggregate) {\n                var valueFormat;\n\n                if (isDefined(summaryItem.valueFormat)) {\n                  valueFormat = summaryItem.valueFormat;\n                } else if (\"count\" !== summaryItem.summaryType) {\n                  valueFormat = gridCore.getFormatByDataType(column && column.dataType);\n                }\n\n                summaryCellsByColumns[columnIndex].push(extend({}, summaryItem, {\n                  value: isString(aggregate) && column && column.deserializeValue ? column.deserializeValue(aggregate) : aggregate,\n                  valueFormat: valueFormat,\n                  columnCaption: column && column.index !== columnIndex ? column.caption : void 0\n                }));\n              }\n            }\n          });\n\n          if (!isEmptyObject(summaryCellsByColumns)) {\n            visibleColumns.forEach(function (column, visibleIndex) {\n              var prevColumn = visibleColumns[visibleIndex - 1];\n              var columnIndex = isGroupRow && (\"expand\" === (null === prevColumn || void 0 === prevColumn ? void 0 : prevColumn.command) || \"expand\" === column.command) ? null === prevColumn || void 0 === prevColumn ? void 0 : prevColumn.index : column.index;\n              summaryCells.push(summaryCellsByColumns[columnIndex] || []);\n            });\n          }\n\n          return summaryCells;\n        },\n        _getSummaryCells: function _getSummaryCells(summaryTotalItems, totalAggregates) {\n          var that = this;\n          var columnsController = that._columnsController;\n          return that._calculateSummaryCells(summaryTotalItems, totalAggregates, columnsController.getVisibleColumns(), function (summaryItem, column) {\n            return that._isDataColumn(column) ? column.index : -1;\n          });\n        },\n        _updateItemsCore: function _updateItemsCore(change) {\n          var summaryCells;\n          var dataSource = this._dataSource;\n          var footerItems = this._footerItems;\n          var oldSummaryCells = footerItems && footerItems[0] && footerItems[0].summaryCells;\n          var summaryTotalItems = this.option(\"summary.totalItems\");\n          this._footerItems = [];\n\n          if (dataSource && summaryTotalItems && summaryTotalItems.length) {\n            var totalAggregates = dataSource.totalAggregates();\n            summaryCells = this._getSummaryCells(summaryTotalItems, totalAggregates);\n\n            if (change && change.repaintChangesOnly && oldSummaryCells) {\n              change.totalColumnIndices = summaryCells.map(function (summaryCell, index) {\n                if (JSON.stringify(summaryCell) !== JSON.stringify(oldSummaryCells[index])) {\n                  return index;\n                }\n\n                return -1;\n              }).filter(function (index) {\n                return index >= 0;\n              });\n            }\n\n            if (summaryCells.length) {\n              this._footerItems.push({\n                rowType: \"totalFooter\",\n                summaryCells: summaryCells\n              });\n            }\n          }\n\n          this.callBase(change);\n        },\n        _prepareUnsavedDataSelector: function _prepareUnsavedDataSelector(selector) {\n          if (recalculateWhileEditing(this)) {\n            var editingController = this.getController(\"editing\");\n\n            if (editingController) {\n              return function (data) {\n                data = editingController.getUpdatedData(data);\n                return selector(data);\n              };\n            }\n          }\n\n          return selector;\n        },\n        _prepareAggregateSelector: function _prepareAggregateSelector(selector, aggregator) {\n          selector = this._prepareUnsavedDataSelector(selector);\n\n          if (\"avg\" === aggregator || \"sum\" === aggregator) {\n            return function (data) {\n              var value = selector(data);\n              return isDefined(value) ? Number(value) : value;\n            };\n          }\n\n          return selector;\n        },\n        _getAggregates: function _getAggregates(summaryItems, remoteOperations) {\n          var that = this;\n          var columnsController = that.getController(\"columns\");\n          var calculateCustomSummary = that.option(\"summary.calculateCustomSummary\");\n          var commonSkipEmptyValues = that.option(\"summary.skipEmptyValues\");\n          return map(summaryItems || [], function (summaryItem) {\n            var column = columnsController.columnOption(summaryItem.column);\n            var calculateCellValue = column && column.calculateCellValue ? column.calculateCellValue.bind(column) : compileGetter(column ? column.dataField : summaryItem.column);\n            var aggregator = summaryItem.summaryType || \"count\";\n            var selector = summaryItem.column;\n            var skipEmptyValues = isDefined(summaryItem.skipEmptyValues) ? summaryItem.skipEmptyValues : commonSkipEmptyValues;\n\n            if (remoteOperations) {\n              return {\n                selector: summaryItem.column,\n                summaryType: aggregator\n              };\n            } else {\n              selector = that._prepareAggregateSelector(calculateCellValue, aggregator);\n\n              if (\"custom\" === aggregator) {\n                if (!calculateCustomSummary) {\n                  errors.log(\"E1026\");\n\n                  calculateCustomSummary = function calculateCustomSummary() {};\n                }\n\n                var options = {\n                  component: that.component,\n                  name: summaryItem.name\n                };\n                calculateCustomSummary(options);\n                options.summaryProcess = \"calculate\";\n                aggregator = {\n                  seed: function seed(groupIndex) {\n                    options.summaryProcess = \"start\";\n                    options.totalValue = void 0;\n                    options.groupIndex = groupIndex;\n                    delete options.value;\n                    calculateCustomSummary(options);\n                    return options.totalValue;\n                  },\n                  step: function step(totalValue, value) {\n                    options.summaryProcess = \"calculate\";\n                    options.totalValue = totalValue;\n                    options.value = value;\n                    calculateCustomSummary(options);\n                    return options.totalValue;\n                  },\n                  finalize: function finalize(totalValue) {\n                    options.summaryProcess = \"finalize\";\n                    options.totalValue = totalValue;\n                    delete options.value;\n                    calculateCustomSummary(options);\n                    return options.totalValue;\n                  }\n                };\n              }\n\n              return {\n                selector: selector,\n                aggregator: aggregator,\n                skipEmptyValues: skipEmptyValues\n              };\n            }\n          });\n        },\n        _addSortInfo: function _addSortInfo(sortByGroups, groupColumn, selector, sortOrder) {\n          if (groupColumn) {\n            var groupIndex = groupColumn.groupIndex;\n            sortOrder = sortOrder || groupColumn.sortOrder;\n\n            if (isDefined(groupIndex)) {\n              sortByGroups[groupIndex] = sortByGroups[groupIndex] || [];\n              sortByGroups[groupIndex].push({\n                selector: selector,\n                desc: \"desc\" === sortOrder\n              });\n            }\n          }\n        },\n        _findSummaryItem: function _findSummaryItem(summaryItems, name) {\n          var summaryItemIndex = -1;\n\n          if (isDefined(name)) {\n            each(summaryItems || [], function (index) {\n              if (this.name === name || index === name || this.summaryType === name || this.column === name || (summaryItem = this, summaryType = summaryItem.summaryType, column = summaryItem.column, summaryType && column && summaryType + \"_\" + column) === name) {\n                summaryItemIndex = index;\n                return false;\n              }\n\n              var summaryItem, summaryType, column;\n            });\n          }\n\n          return summaryItemIndex;\n        },\n        _getSummarySortByGroups: function _getSummarySortByGroups(sortByGroupSummaryInfo, groupSummaryItems) {\n          var that = this;\n          var columnsController = that._columnsController;\n          var groupColumns = columnsController.getGroupColumns();\n          var sortByGroups = [];\n\n          if (!groupSummaryItems || !groupSummaryItems.length) {\n            return;\n          }\n\n          each(sortByGroupSummaryInfo || [], function () {\n            var sortOrder = this.sortOrder;\n            var groupColumn = this.groupColumn;\n\n            var summaryItemIndex = that._findSummaryItem(groupSummaryItems, this.summaryItem);\n\n            if (summaryItemIndex < 0) {\n              return;\n            }\n\n            var selector = function selector(data) {\n              return getGroupAggregates(data)[summaryItemIndex];\n            };\n\n            if (isDefined(groupColumn)) {\n              groupColumn = columnsController.columnOption(groupColumn);\n\n              that._addSortInfo(sortByGroups, groupColumn, selector, sortOrder);\n            } else {\n              each(groupColumns, function (groupIndex, groupColumn) {\n                that._addSortInfo(sortByGroups, groupColumn, selector, sortOrder);\n              });\n            }\n          });\n          return sortByGroups;\n        },\n        _createDataSourceAdapterCore: function _createDataSourceAdapterCore(dataSource, remoteOperations) {\n          var that = this;\n          var dataSourceAdapter = this.callBase(dataSource, remoteOperations);\n          dataSourceAdapter.summaryGetter(function (currentRemoteOperations) {\n            return that._getSummaryOptions(currentRemoteOperations || remoteOperations);\n          });\n          return dataSourceAdapter;\n        },\n        _getSummaryOptions: function _getSummaryOptions(remoteOperations) {\n          var that = this;\n          var groupSummaryItems = that.option(\"summary.groupItems\");\n          var totalSummaryItems = that.option(\"summary.totalItems\");\n          var sortByGroupSummaryInfo = that.option(\"sortByGroupSummaryInfo\");\n\n          var groupAggregates = that._getAggregates(groupSummaryItems, remoteOperations && remoteOperations.grouping && remoteOperations.summary);\n\n          var totalAggregates = that._getAggregates(totalSummaryItems, remoteOperations && remoteOperations.summary);\n\n          if (groupAggregates.length || totalAggregates.length) {\n            return {\n              groupAggregates: groupAggregates,\n              totalAggregates: totalAggregates,\n              sortByGroups: function sortByGroups() {\n                return that._getSummarySortByGroups(sortByGroupSummaryInfo, groupSummaryItems);\n              }\n            };\n          }\n        },\n        publicMethods: function publicMethods() {\n          var methods = this.callBase();\n          methods.push(\"getTotalSummaryValue\");\n          return methods;\n        },\n        getTotalSummaryValue: function getTotalSummaryValue(summaryItemName) {\n          var summaryItemIndex = this._findSummaryItem(this.option(\"summary.totalItems\"), summaryItemName);\n\n          var aggregates = this._dataSource.totalAggregates();\n\n          if (aggregates.length && summaryItemIndex > -1) {\n            return aggregates[summaryItemIndex];\n          }\n        },\n        optionChanged: function optionChanged(args) {\n          if (\"summary\" === args.name || \"sortByGroupSummaryInfo\" === args.name) {\n            args.name = \"dataSource\";\n          }\n\n          this.callBase(args);\n        },\n        init: function init() {\n          this._footerItems = [];\n          this.callBase();\n        },\n        footerItems: function footerItems() {\n          return this._footerItems;\n        }\n      },\n      editing: {\n        _refreshSummary: function _refreshSummary() {\n          if (recalculateWhileEditing(this) && !this.isSaving()) {\n            this._dataController.refresh({\n              load: true,\n              changesOnly: true\n            });\n          }\n        },\n        _addChange: function _addChange(params) {\n          var result = this.callBase.apply(this, arguments);\n\n          if (params.type) {\n            this._refreshSummary();\n          }\n\n          return result;\n        },\n        _removeChange: function _removeChange() {\n          var result = this.callBase.apply(this, arguments);\n\n          this._refreshSummary();\n\n          return result;\n        },\n        cancelEditData: function cancelEditData() {\n          var result = this.callBase.apply(this, arguments);\n\n          this._refreshSummary();\n\n          return result;\n        }\n      }\n    },\n    views: {\n      rowsView: {\n        _createRow: function _createRow(row) {\n          var $row = this.callBase.apply(this, arguments);\n          row && $row.addClass(row.rowType === DATAGRID_GROUP_FOOTER_ROW_TYPE ? DATAGRID_GROUP_FOOTER_CLASS : \"\");\n          return $row;\n        },\n        _renderCells: function _renderCells($row, options) {\n          this.callBase.apply(this, arguments);\n\n          if (\"group\" === options.row.rowType && options.row.summaryCells && options.row.summaryCells.length) {\n            this._renderGroupSummaryCells($row, options);\n          }\n        },\n        _hasAlignByColumnSummaryItems: function _hasAlignByColumnSummaryItems(columnIndex, options) {\n          return !isDefined(options.columns[columnIndex].groupIndex) && options.row.summaryCells[columnIndex].length;\n        },\n        _getAlignByColumnCellCount: function _getAlignByColumnCellCount(groupCellColSpan, options) {\n          var alignByColumnCellCount = 0;\n\n          for (var i = 1; i < groupCellColSpan; i++) {\n            var columnIndex = options.row.summaryCells.length - i;\n            alignByColumnCellCount = this._hasAlignByColumnSummaryItems(columnIndex, options) ? i : alignByColumnCellCount;\n          }\n\n          return alignByColumnCellCount;\n        },\n        _renderGroupSummaryCells: function _renderGroupSummaryCells($row, options) {\n          var $groupCell = $row.children().last();\n          var groupCellColSpan = Number($groupCell.attr(\"colSpan\")) || 1;\n\n          var alignByColumnCellCount = this._getAlignByColumnCellCount(groupCellColSpan, options);\n\n          this._renderGroupSummaryCellsCore($groupCell, options, groupCellColSpan, alignByColumnCellCount);\n        },\n        _renderGroupSummaryCellsCore: function _renderGroupSummaryCellsCore($groupCell, options, groupCellColSpan, alignByColumnCellCount) {\n          if (alignByColumnCellCount > 0) {\n            $groupCell.attr(\"colSpan\", groupCellColSpan - alignByColumnCellCount);\n\n            for (var i = 0; i < alignByColumnCellCount; i++) {\n              var columnIndex = options.columns.length - alignByColumnCellCount + i;\n\n              this._renderCell($groupCell.parent(), extend({\n                column: options.columns[columnIndex],\n                columnIndex: this._getSummaryCellIndex(columnIndex, options.columns)\n              }, options));\n            }\n          }\n        },\n        _getSummaryCellIndex: function _getSummaryCellIndex(columnIndex) {\n          return columnIndex;\n        },\n        _getCellTemplate: function _getCellTemplate(options) {\n          if (!options.column.command && !isDefined(options.column.groupIndex) && options.summaryItems && options.summaryItems.length) {\n            return renderSummaryCell;\n          } else {\n            return this.callBase(options);\n          }\n        },\n        _getCellOptions: function _getCellOptions(options) {\n          var parameters = this.callBase(options);\n\n          if (options.row.summaryCells) {\n            return extend(parameters, getSummaryCellOptions(this, options));\n          } else {\n            return parameters;\n          }\n        }\n      }\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"module"}