{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/**\r\n * DevExtreme (esm/ui/drawer/ui.drawer.rendering.strategy.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { setWidth, setHeight } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport { animation } from \"./ui.drawer.animation\";\nimport { Deferred, when } from \"../../core/utils/deferred\";\n\nvar DrawerStrategy = /*#__PURE__*/function () {\n  function DrawerStrategy(drawer) {\n    _classCallCheck(this, DrawerStrategy);\n\n    this._drawer = drawer;\n  }\n\n  _createClass(DrawerStrategy, [{\n    key: \"getDrawerInstance\",\n    value: function getDrawerInstance() {\n      return this._drawer;\n    }\n  }, {\n    key: \"renderPanelContent\",\n    value: function renderPanelContent(whenPanelContentRendered) {\n      var drawer = this.getDrawerInstance();\n\n      var template = drawer._getTemplate(drawer.option(\"template\"));\n\n      if (template) {\n        template.render({\n          container: drawer.content(),\n          onRendered: function onRendered() {\n            whenPanelContentRendered.resolve();\n          }\n        });\n      }\n    }\n  }, {\n    key: \"renderPosition\",\n    value: function renderPosition(changePositionUsingFxAnimation, animationDuration) {\n      var whenPositionAnimationCompleted = new Deferred();\n      var whenShaderAnimationCompleted = new Deferred();\n      var drawer = this.getDrawerInstance();\n\n      if (changePositionUsingFxAnimation) {\n        when.apply($, [whenPositionAnimationCompleted, whenShaderAnimationCompleted]).done(function () {\n          drawer._animationCompleteHandler();\n        });\n      }\n\n      this._internalRenderPosition(changePositionUsingFxAnimation, whenPositionAnimationCompleted);\n\n      if (!changePositionUsingFxAnimation) {\n        drawer.resizeViewContent();\n      }\n\n      this.renderShaderVisibility(changePositionUsingFxAnimation, animationDuration, whenShaderAnimationCompleted);\n    }\n  }, {\n    key: \"_getPanelOffset\",\n    value: function _getPanelOffset(isDrawerOpened) {\n      var drawer = this.getDrawerInstance();\n      var size = drawer.isHorizontalDirection() ? drawer.getRealPanelWidth() : drawer.getRealPanelHeight();\n\n      if (isDrawerOpened) {\n        return -(size - drawer.getMaxSize());\n      } else {\n        return -(size - drawer.getMinSize());\n      }\n    }\n  }, {\n    key: \"_getPanelSize\",\n    value: function _getPanelSize(isDrawerOpened) {\n      return isDrawerOpened ? this.getDrawerInstance().getMaxSize() : this.getDrawerInstance().getMinSize();\n    }\n  }, {\n    key: \"renderShaderVisibility\",\n    value: function renderShaderVisibility(changePositionUsingFxAnimation, duration, whenAnimationCompleted) {\n      var _this = this;\n\n      var drawer = this.getDrawerInstance();\n      var isShaderVisible = drawer.option(\"opened\");\n      var fadeConfig = isShaderVisible ? {\n        from: 0,\n        to: 1\n      } : {\n        from: 1,\n        to: 0\n      };\n\n      if (changePositionUsingFxAnimation) {\n        animation.fade($(drawer._$shader), fadeConfig, duration, function () {\n          _this._drawer._toggleShaderVisibility(isShaderVisible);\n\n          whenAnimationCompleted.resolve();\n        });\n      } else {\n        drawer._toggleShaderVisibility(isShaderVisible);\n\n        drawer._$shader.css(\"opacity\", fadeConfig.to);\n      }\n    }\n  }, {\n    key: \"getPanelContent\",\n    value: function getPanelContent() {\n      return $(this.getDrawerInstance().content());\n    }\n  }, {\n    key: \"setPanelSize\",\n    value: function setPanelSize(calcFromRealPanelSize) {\n      this.refreshPanelElementSize(calcFromRealPanelSize);\n    }\n  }, {\n    key: \"refreshPanelElementSize\",\n    value: function refreshPanelElementSize(calcFromRealPanelSize) {\n      var drawer = this.getDrawerInstance();\n\n      var panelSize = this._getPanelSize(drawer.option(\"opened\"));\n\n      if (drawer.isHorizontalDirection()) {\n        setWidth($(drawer.content()), calcFromRealPanelSize ? drawer.getRealPanelWidth() : panelSize);\n      } else {\n        setHeight($(drawer.content()), calcFromRealPanelSize ? drawer.getRealPanelHeight() : panelSize);\n      }\n    }\n  }, {\n    key: \"isViewContentFirst\",\n    value: function isViewContentFirst() {\n      return false;\n    }\n  }, {\n    key: \"onPanelContentRendered\",\n    value: function onPanelContentRendered() {}\n  }]);\n\n  return DrawerStrategy;\n}();\n\nexport default DrawerStrategy;","map":null,"metadata":{},"sourceType":"module"}