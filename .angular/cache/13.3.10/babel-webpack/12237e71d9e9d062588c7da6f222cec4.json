{"ast":null,"code":"import _toConsumableArray from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/ui/text_box/ui.text_editor.mask.strategy.input_events.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport BaseMaskStrategy from \"./ui.text_editor.mask.strategy.base\";\nvar DELETE_INPUT_TYPE = \"deleteContentBackward\";\n\nvar InputEventsMaskStrategy = /*#__PURE__*/function (_BaseMaskStrategy) {\n  _inherits(InputEventsMaskStrategy, _BaseMaskStrategy);\n\n  var _super = _createSuper(InputEventsMaskStrategy);\n\n  function InputEventsMaskStrategy() {\n    _classCallCheck(this, InputEventsMaskStrategy);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(InputEventsMaskStrategy, [{\n    key: \"_getStrategyName\",\n    value: function _getStrategyName() {\n      return \"inputEvents\";\n    }\n  }, {\n    key: \"getHandleEventNames\",\n    value: function getHandleEventNames() {\n      return [].concat(_toConsumableArray(_get(_getPrototypeOf(InputEventsMaskStrategy.prototype), \"getHandleEventNames\", this).call(this)), [\"beforeInput\"]);\n    }\n  }, {\n    key: \"_beforeInputHandler\",\n    value: function _beforeInputHandler() {\n      this._prevCaret = this.editorCaret();\n    }\n  }, {\n    key: \"_inputHandler\",\n    value: function _inputHandler(_ref) {\n      var originalEvent = _ref.originalEvent;\n\n      if (!originalEvent) {\n        return;\n      }\n\n      var inputType = originalEvent.inputType,\n          data = originalEvent.data;\n      var currentCaret = this.editorCaret();\n\n      if (inputType === DELETE_INPUT_TYPE) {\n        var length = this._prevCaret.end - this._prevCaret.start || 1;\n        this.editor.setBackwardDirection();\n\n        this._updateEditorMask({\n          start: currentCaret.start,\n          length: length,\n          text: this._getEmptyString(length)\n        });\n      } else {\n        var _this$_prevCaret, _this$_prevCaret2, _this$_prevCaret3;\n\n        if (!currentCaret.end) {\n          return;\n        }\n\n        this._autoFillHandler(originalEvent);\n\n        this.editorCaret(currentCaret);\n\n        var _length = (null === (_this$_prevCaret = this._prevCaret) || void 0 === _this$_prevCaret ? void 0 : _this$_prevCaret.end) - (null === (_this$_prevCaret2 = this._prevCaret) || void 0 === _this$_prevCaret2 ? void 0 : _this$_prevCaret2.start);\n\n        var newData = data + (_length ? this._getEmptyString(_length - data.length) : \"\");\n        this.editor.setForwardDirection();\n\n        var hasValidChars = this._updateEditorMask({\n          start: null === (_this$_prevCaret3 = this._prevCaret) || void 0 === _this$_prevCaret3 ? void 0 : _this$_prevCaret3.start,\n          length: _length || newData.length,\n          text: newData\n        });\n\n        if (!hasValidChars) {\n          this.editorCaret(this._prevCaret);\n        }\n      }\n    }\n  }, {\n    key: \"_getEmptyString\",\n    value: function _getEmptyString(length) {\n      return Array(length + 1).join(\" \");\n    }\n  }, {\n    key: \"_updateEditorMask\",\n    value: function _updateEditorMask(args) {\n      var textLength = args.text.length;\n\n      var updatedCharsCount = this.editor._handleChain(args);\n\n      if (this.editor.isForwardDirection()) {\n        var _this$editorCaret = this.editorCaret(),\n            start = _this$editorCaret.start,\n            end = _this$editorCaret.end;\n\n        var correction = updatedCharsCount - textLength;\n\n        if (start <= updatedCharsCount && updatedCharsCount > 1) {\n          this.editorCaret({\n            start: start + correction,\n            end: end + correction\n          });\n        }\n\n        this.editor.isForwardDirection() && this.editor._adjustCaret();\n      }\n\n      this.editor._displayMask();\n\n      return !!updatedCharsCount;\n    }\n  }]);\n\n  return InputEventsMaskStrategy;\n}(BaseMaskStrategy);\n\nexport default InputEventsMaskStrategy;","map":null,"metadata":{},"sourceType":"module"}