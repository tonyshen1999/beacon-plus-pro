{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/gantt/ui.gantt.helper.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { compileGetter, compileSetter } from \"../../core/utils/data\";\nimport messageLocalization from \"../../localization/message\";\nexport var GanttHelper = {\n  prepareMapHandler: function prepareMapHandler(getters) {\n    return function (data) {\n      return Object.keys(getters).reduce(function (previous, key) {\n        var resultKey = \"key\" === key ? \"id\" : key;\n        previous[resultKey] = getters[key](data);\n        return previous;\n      }, {});\n    };\n  },\n  prepareSetterMapHandler: function prepareSetterMapHandler(setters) {\n    return function (data) {\n      return Object.keys(setters).reduce(function (previous, key) {\n        var resultKey = \"key\" === key ? \"id\" : key;\n        setters[key](previous, data[resultKey]);\n        return previous;\n      }, {});\n    };\n  },\n  compileGettersByOption: function compileGettersByOption(optionValue) {\n    var getters = {};\n\n    for (var field in optionValue) {\n      var exprMatches = field.match(/(\\w*)Expr/);\n\n      if (exprMatches) {\n        getters[exprMatches[1]] = compileGetter(optionValue[exprMatches[0]]);\n      }\n    }\n\n    return getters;\n  },\n  compileSettersByOption: function compileSettersByOption(optionValue) {\n    var setters = {};\n\n    for (var field in optionValue) {\n      var exprMatches = field.match(/(\\w*)Expr/);\n\n      if (exprMatches) {\n        setters[exprMatches[1]] = compileSetter(optionValue[exprMatches[0]]);\n      }\n    }\n\n    return setters;\n  },\n  getStoreObject: function getStoreObject(option, modelObject) {\n    var setters = GanttHelper.compileSettersByOption(option);\n    return Object.keys(setters).reduce(function (previous, key) {\n      if (\"key\" !== key) {\n        setters[key](previous, modelObject[key]);\n      }\n\n      return previous;\n    }, {});\n  },\n  getInvertedData: function getInvertedData(data, keyGetter) {\n    var inverted = {};\n\n    if (data) {\n      for (var i = 0; i < data.length; i++) {\n        var dataItem = data[i];\n        var key = keyGetter(dataItem);\n        inverted[key] = dataItem;\n      }\n    }\n\n    return inverted;\n  },\n  getArrayFromOneElement: function getArrayFromOneElement(element) {\n    return void 0 === element || null === element ? [] : [element];\n  },\n  getSelectionMode: function getSelectionMode(allowSelection) {\n    return allowSelection ? \"single\" : \"none\";\n  },\n  convertTreeToList: function convertTreeToList(node, array) {\n    if (null !== node && void 0 !== node && node.data && null !== node && void 0 !== node && node.visible) {\n      array.push(node.data);\n    }\n\n    for (var i = 0; i < (null === (_node$children = node.children) || void 0 === _node$children ? void 0 : _node$children.length); i++) {\n      var _node$children;\n\n      var child = node.children[i];\n      GanttHelper.convertTreeToList(child, array);\n    }\n  },\n  getAllParentNodesKeys: function getAllParentNodesKeys(node, array) {\n    var _node$parent;\n\n    if (null !== node && void 0 !== node && node.data) {\n      array.push(node.key);\n    }\n\n    if (null !== node && void 0 !== node && null !== (_node$parent = node.parent) && void 0 !== _node$parent && _node$parent.data) {\n      GanttHelper.getAllParentNodesKeys(node.parent, array);\n    }\n  },\n  getDefaultOptions: function getDefaultOptions() {\n    return {\n      tasks: {\n        dataSource: null,\n        keyExpr: \"id\",\n        parentIdExpr: \"parentId\",\n        startExpr: \"start\",\n        endExpr: \"end\",\n        progressExpr: \"progress\",\n        titleExpr: \"title\",\n        colorExpr: \"color\"\n      },\n      dependencies: {\n        dataSource: null,\n        keyExpr: \"id\",\n        predecessorIdExpr: \"predecessorId\",\n        successorIdExpr: \"successorId\",\n        typeExpr: \"type\"\n      },\n      resources: {\n        dataSource: null,\n        keyExpr: \"id\",\n        textExpr: \"text\",\n        colorExpr: \"color\"\n      },\n      resourceAssignments: {\n        dataSource: null,\n        keyExpr: \"id\",\n        taskIdExpr: \"taskId\",\n        resourceIdExpr: \"resourceId\"\n      },\n      columns: void 0,\n      taskListWidth: 300,\n      showResources: true,\n      showDependencies: true,\n      taskTitlePosition: \"inside\",\n      firstDayOfWeek: void 0,\n      selectedRowKey: void 0,\n      onSelectionChanged: null,\n      onTaskClick: null,\n      onTaskDblClick: null,\n      onTaskInserting: null,\n      onTaskInserted: null,\n      onTaskDeleting: null,\n      onTaskDeleted: null,\n      onTaskUpdating: null,\n      onTaskUpdated: null,\n      onTaskMoving: null,\n      onTaskEditDialogShowing: null,\n      onDependencyInserting: null,\n      onDependencyInserted: null,\n      onDependencyDeleting: null,\n      onDependencyDeleted: null,\n      onResourceInserting: null,\n      onResourceInserted: null,\n      onResourceDeleting: null,\n      onResourceDeleted: null,\n      onResourceAssigning: null,\n      onResourceAssigned: null,\n      onResourceUnassigning: null,\n      onResourceUnassigned: null,\n      onCustomCommand: null,\n      onContextMenuPreparing: null,\n      allowSelection: true,\n      showRowLines: true,\n      stripLines: void 0,\n      scaleType: \"auto\",\n      scaleTypeRange: {\n        min: \"minutes\",\n        max: \"years\"\n      },\n      editing: {\n        enabled: false,\n        allowTaskAdding: true,\n        allowTaskDeleting: true,\n        allowTaskUpdating: true,\n        allowDependencyAdding: true,\n        allowDependencyDeleting: true,\n        allowResourceAdding: true,\n        allowResourceDeleting: true,\n        allowResourceUpdating: true,\n        allowTaskResourceUpdating: true\n      },\n      validation: {\n        validateDependencies: false,\n        autoUpdateParentTasks: false,\n        enablePredecessorGap: false\n      },\n      toolbar: null,\n      contextMenu: {\n        enabled: true,\n        items: void 0\n      },\n      taskTooltipContentTemplate: null,\n      taskProgressTooltipContentTemplate: null,\n      taskTimeTooltipContentTemplate: null,\n      taskContentTemplate: null,\n      rootValue: 0,\n      sorting: {\n        ascendingText: messageLocalization.format(\"dxGantt-sortingAscendingText\"),\n        descendingText: messageLocalization.format(\"dxGantt-sortingDescendingText\"),\n        clearText: messageLocalization.format(\"dxGantt-sortingClearText\"),\n        mode: \"single\",\n        showSortIndexes: false\n      },\n      filterRow: void 0,\n      headerFilter: void 0\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module"}