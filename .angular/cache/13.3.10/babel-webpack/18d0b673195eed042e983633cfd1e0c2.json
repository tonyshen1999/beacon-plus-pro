{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/list/ui.list.base.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getHeight, getOuterHeight, setHeight } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { ensureDefined, noop } from \"../../core/utils/common\";\nimport { isDefined, isPlainObject } from \"../../core/utils/type\";\nimport { getImageContainer } from \"../../core/utils/icon\";\nimport { getPublicElement } from \"../../core/element\";\nimport { each } from \"../../core/utils/iterator\";\nimport { compileGetter } from \"../../core/utils/data\";\nimport { extend } from \"../../core/utils/extend\";\nimport fx from \"../../animation/fx\";\nimport { name as clickEventName } from \"../../events/click\";\nimport { end as swipeEventEnd } from \"../../events/swipe\";\nimport { nativeScrolling } from \"../../core/utils/support\";\nimport messageLocalization from \"../../localization/message\";\nimport { render } from \"../widget/utils.ink_ripple\";\nimport devices from \"../../core/devices\";\nimport ListItem from \"./item\";\nimport Button from \"../button\";\nimport { addNamespace } from \"../../events/utils/index\";\nimport { current, isMaterial } from \"../themes\";\nimport { hasWindow } from \"../../core/utils/window\";\nimport ScrollView from \"../scroll_view\";\nimport { deviceDependentOptions } from \"../scroll_view/ui.scrollable.device\";\nimport CollectionWidget from \"../collection/ui.collection_widget.live_update\";\nimport { BindableTemplate } from \"../../core/templates/bindable_template\";\nimport { Deferred } from \"../../core/utils/deferred\";\nimport DataConverterMixin from \"../shared/grouped_data_converter_mixin\";\nvar LIST_CLASS = \"dx-list\";\nvar LIST_ITEM_CLASS = \"dx-list-item\";\nvar LIST_ITEM_SELECTOR = \".\" + LIST_ITEM_CLASS;\nvar LIST_ITEM_ICON_CONTAINER_CLASS = \"dx-list-item-icon-container\";\nvar LIST_ITEM_ICON_CLASS = \"dx-list-item-icon\";\nvar LIST_GROUP_CLASS = \"dx-list-group\";\nvar LIST_GROUP_HEADER_CLASS = \"dx-list-group-header\";\nvar LIST_GROUP_BODY_CLASS = \"dx-list-group-body\";\nvar LIST_COLLAPSIBLE_GROUPS_CLASS = \"dx-list-collapsible-groups\";\nvar LIST_GROUP_COLLAPSED_CLASS = \"dx-list-group-collapsed\";\nvar LIST_GROUP_HEADER_INDICATOR_CLASS = \"dx-list-group-header-indicator\";\nvar LIST_HAS_NEXT_CLASS = \"dx-has-next\";\nvar LIST_NEXT_BUTTON_CLASS = \"dx-list-next-button\";\nvar WRAP_ITEM_TEXT_CLASS = \"dx-wrap-item-text\";\nvar SELECT_ALL_ITEM_SELECTOR = \".dx-list-select-all\";\nvar LIST_ITEM_DATA_KEY = \"dxListItemData\";\nvar LIST_FEEDBACK_SHOW_TIMEOUT = 70;\nvar groupItemsGetter = compileGetter(\"items\");\n\nvar _scrollView;\n\nexport var ListBase = CollectionWidget.inherit({\n  _activeStateUnit: [LIST_ITEM_SELECTOR, SELECT_ALL_ITEM_SELECTOR].join(\",\"),\n  _supportedKeys: function _supportedKeys() {\n    var that = this;\n\n    var moveFocusPerPage = function moveFocusPerPage(direction) {\n      var $item = getEdgeVisibleItem(direction);\n      var isFocusedItem = $item.is(that.option(\"focusedElement\"));\n\n      if (isFocusedItem) {\n        !function ($item, direction) {\n          var resultPosition = $item.position().top;\n\n          if (\"prev\" === direction) {\n            resultPosition = $item.position().top - getHeight(that.$element()) + getOuterHeight($item);\n          }\n\n          that.scrollTo(resultPosition);\n        }($item, direction);\n        $item = getEdgeVisibleItem(direction);\n      }\n\n      that.option(\"focusedElement\", getPublicElement($item));\n      that.scrollToItem($item);\n    };\n\n    function getEdgeVisibleItem(direction) {\n      var scrollTop = that.scrollTop();\n      var containerHeight = getHeight(that.$element());\n      var $item = $(that.option(\"focusedElement\"));\n      var isItemVisible = true;\n\n      if (!$item.length) {\n        return $();\n      }\n\n      while (isItemVisible) {\n        var $nextItem = $item[direction]();\n\n        if (!$nextItem.length) {\n          break;\n        }\n\n        var nextItemLocation = $nextItem.position().top + getOuterHeight($nextItem) / 2;\n        isItemVisible = nextItemLocation < containerHeight + scrollTop && nextItemLocation > scrollTop;\n\n        if (isItemVisible) {\n          $item = $nextItem;\n        }\n      }\n\n      return $item;\n    }\n\n    return extend(this.callBase(), {\n      leftArrow: noop,\n      rightArrow: noop,\n      pageUp: function pageUp() {\n        moveFocusPerPage(\"prev\");\n        return false;\n      },\n      pageDown: function pageDown() {\n        moveFocusPerPage(\"next\");\n        return false;\n      }\n    });\n  },\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      hoverStateEnabled: true,\n      pullRefreshEnabled: false,\n      scrollingEnabled: true,\n      showScrollbar: \"onScroll\",\n      useNativeScrolling: true,\n      bounceEnabled: true,\n      scrollByContent: true,\n      scrollByThumb: false,\n      pullingDownText: messageLocalization.format(\"dxList-pullingDownText\"),\n      pulledDownText: messageLocalization.format(\"dxList-pulledDownText\"),\n      refreshingText: messageLocalization.format(\"dxList-refreshingText\"),\n      pageLoadingText: messageLocalization.format(\"dxList-pageLoadingText\"),\n      onScroll: null,\n      onPullRefresh: null,\n      onPageLoading: null,\n      pageLoadMode: \"scrollBottom\",\n      nextButtonText: messageLocalization.format(\"dxList-nextButtonText\"),\n      onItemSwipe: null,\n      grouped: false,\n      onGroupRendered: null,\n      collapsibleGroups: false,\n      groupTemplate: \"group\",\n      indicateLoading: true,\n      activeStateEnabled: true,\n      _itemAttributes: {\n        role: \"option\"\n      },\n      _listAttributes: {\n        role: \"listbox\"\n      },\n      useInkRipple: false,\n      wrapItemText: false,\n      _swipeEnabled: true,\n      _revertPageOnEmptyLoad: false,\n      showChevronExpr: function showChevronExpr(data) {\n        return data ? data.showChevron : void 0;\n      },\n      badgeExpr: function badgeExpr(data) {\n        return data ? data.badge : void 0;\n      }\n    });\n  },\n  _defaultOptionsRules: function _defaultOptionsRules() {\n    var themeName = current();\n    return this.callBase().concat(deviceDependentOptions(), [{\n      device: function device() {\n        return !nativeScrolling;\n      },\n      options: {\n        useNativeScrolling: false\n      }\n    }, {\n      device: function device(_device) {\n        return !nativeScrolling && !devices.isSimulator() && \"desktop\" === devices.real().deviceType && \"generic\" === _device.platform;\n      },\n      options: {\n        showScrollbar: \"onHover\",\n        pageLoadMode: \"nextButton\"\n      }\n    }, {\n      device: function device() {\n        return \"desktop\" === devices.real().deviceType && !devices.isSimulator();\n      },\n      options: {\n        focusStateEnabled: true\n      }\n    }, {\n      device: function device() {\n        return isMaterial(themeName);\n      },\n      options: {\n        pullingDownText: \"\",\n        pulledDownText: \"\",\n        refreshingText: \"\",\n        pageLoadingText: \"\",\n        useInkRipple: true\n      }\n    }]);\n  },\n  _visibilityChanged: function _visibilityChanged(visible) {\n    if (visible) {\n      this._updateLoadingState(true);\n    }\n  },\n  _itemClass: function _itemClass() {\n    return LIST_ITEM_CLASS;\n  },\n  _itemDataKey: function _itemDataKey() {\n    return LIST_ITEM_DATA_KEY;\n  },\n  _itemContainer: function _itemContainer() {\n    return this._$container;\n  },\n  _saveSelectionChangeEvent: function _saveSelectionChangeEvent(e) {\n    this._selectionChangeEventInstance = e;\n  },\n  _getSelectionChangeEvent: function _getSelectionChangeEvent() {\n    return this._selectionChangeEventInstance;\n  },\n  _refreshItemElements: function _refreshItemElements() {\n    if (!this.option(\"grouped\")) {\n      this._itemElementsCache = this._itemContainer().children(this._itemSelector());\n    } else {\n      this._itemElementsCache = this._itemContainer().children(\".\" + LIST_GROUP_CLASS).children(\".\" + LIST_GROUP_BODY_CLASS).children(this._itemSelector());\n    }\n  },\n  _modifyByChanges: function _modifyByChanges() {\n    this.callBase.apply(this, arguments);\n\n    this._refreshItemElements();\n\n    this._updateLoadingState(true);\n  },\n  reorderItem: function reorderItem(itemElement, toItemElement) {\n    var promise = this.callBase(itemElement, toItemElement);\n    return promise.done(function () {\n      this._refreshItemElements();\n    });\n  },\n  deleteItem: function deleteItem(itemElement) {\n    var promise = this.callBase(itemElement);\n    return promise.done(function () {\n      this._refreshItemElements();\n    });\n  },\n  _itemElements: function _itemElements() {\n    return this._itemElementsCache;\n  },\n  _itemSelectHandler: function _itemSelectHandler(e) {\n    if (\"single\" === this.option(\"selectionMode\") && this.isItemSelected(e.currentTarget)) {\n      return;\n    }\n\n    return this.callBase(e);\n  },\n  _allowDynamicItemsAppend: function _allowDynamicItemsAppend() {\n    return true;\n  },\n  _resetDataSourcePageIndex: function _resetDataSourcePageIndex() {\n    var currentDataSource = this.getDataSource();\n\n    if (currentDataSource && 0 !== currentDataSource.pageIndex()) {\n      currentDataSource.pageIndex(0);\n      currentDataSource.load();\n    }\n  },\n  _init: function _init() {\n    this.callBase();\n\n    this._resetDataSourcePageIndex();\n\n    this._$container = this.$element();\n\n    this._initScrollView();\n\n    this._feedbackShowTimeout = LIST_FEEDBACK_SHOW_TIMEOUT;\n\n    this._createGroupRenderAction();\n  },\n  _scrollBottomMode: function _scrollBottomMode() {\n    return \"scrollBottom\" === this.option(\"pageLoadMode\");\n  },\n  _nextButtonMode: function _nextButtonMode() {\n    return \"nextButton\" === this.option(\"pageLoadMode\");\n  },\n  _dataSourceOptions: function _dataSourceOptions() {\n    var scrollBottom = this._scrollBottomMode();\n\n    var nextButton = this._nextButtonMode();\n\n    return extend(this.callBase(), {\n      paginate: ensureDefined(scrollBottom || nextButton, true)\n    });\n  },\n  _getGroupedOption: function _getGroupedOption() {\n    return this.option(\"grouped\");\n  },\n  _getGroupContainerByIndex: function _getGroupContainerByIndex(groupIndex) {\n    return this._itemContainer().find(\".\".concat(LIST_GROUP_CLASS)).eq(groupIndex).find(\".\".concat(LIST_GROUP_BODY_CLASS));\n  },\n  _dataSourceFromUrlLoadMode: function _dataSourceFromUrlLoadMode() {\n    return \"raw\";\n  },\n  _initScrollView: function _initScrollView() {\n    var scrollingEnabled = this.option(\"scrollingEnabled\");\n    var pullRefreshEnabled = scrollingEnabled && this.option(\"pullRefreshEnabled\");\n    var autoPagingEnabled = scrollingEnabled && this._scrollBottomMode() && !!this._dataSource;\n    this._scrollView = this._createComponent(this.$element(), getScrollView(), {\n      disabled: this.option(\"disabled\") || !scrollingEnabled,\n      onScroll: this._scrollHandler.bind(this),\n      onPullDown: pullRefreshEnabled ? this._pullDownHandler.bind(this) : null,\n      onReachBottom: autoPagingEnabled ? this._scrollBottomHandler.bind(this) : null,\n      showScrollbar: this.option(\"showScrollbar\"),\n      useNative: this.option(\"useNativeScrolling\"),\n      bounceEnabled: this.option(\"bounceEnabled\"),\n      scrollByContent: this.option(\"scrollByContent\"),\n      scrollByThumb: this.option(\"scrollByThumb\"),\n      pullingDownText: this.option(\"pullingDownText\"),\n      pulledDownText: this.option(\"pulledDownText\"),\n      refreshingText: this.option(\"refreshingText\"),\n      reachBottomText: this.option(\"pageLoadingText\"),\n      useKeyboard: false\n    });\n    this._$container = $(this._scrollView.content());\n\n    if (this.option(\"wrapItemText\")) {\n      this._$container.addClass(WRAP_ITEM_TEXT_CLASS);\n    }\n\n    this._createScrollViewActions();\n  },\n  _createScrollViewActions: function _createScrollViewActions() {\n    this._scrollAction = this._createActionByOption(\"onScroll\");\n    this._pullRefreshAction = this._createActionByOption(\"onPullRefresh\");\n    this._pageLoadingAction = this._createActionByOption(\"onPageLoading\");\n  },\n  _scrollHandler: function _scrollHandler(e) {\n    this._scrollAction && this._scrollAction(e);\n  },\n  _initTemplates: function _initTemplates() {\n    this._templateManager.addDefaultTemplates({\n      group: new BindableTemplate(function ($container, data) {\n        if (isPlainObject(data)) {\n          if (data.key) {\n            $container.text(data.key);\n          }\n        } else {\n          $container.text(String(data));\n        }\n      }, [\"key\"], this.option(\"integrationOptions.watchMethod\"))\n    });\n\n    this.callBase();\n  },\n  _prepareDefaultItemTemplate: function _prepareDefaultItemTemplate(data, $container) {\n    this.callBase(data, $container);\n\n    if (data.icon) {\n      var $icon = getImageContainer(data.icon).addClass(LIST_ITEM_ICON_CLASS);\n      var $iconContainer = $(\"<div>\").addClass(LIST_ITEM_ICON_CONTAINER_CLASS);\n      $iconContainer.append($icon);\n      $container.prepend($iconContainer);\n    }\n  },\n  _getBindableFields: function _getBindableFields() {\n    return [\"text\", \"html\", \"icon\"];\n  },\n  _updateLoadingState: function _updateLoadingState(tryLoadMore) {\n    var isDataLoaded = !tryLoadMore || this._isLastPage();\n\n    var scrollBottomMode = this._scrollBottomMode();\n\n    var stopLoading = isDataLoaded || !scrollBottomMode;\n    var hideLoadIndicator = stopLoading && !this._isDataSourceLoading();\n\n    if (stopLoading || this._scrollViewIsFull()) {\n      this._scrollView.release(hideLoadIndicator);\n\n      this._toggleNextButton(this._shouldRenderNextButton() && !this._isLastPage());\n\n      this._loadIndicationSuppressed(false);\n    } else {\n      this._infiniteDataLoading();\n    }\n  },\n  _shouldRenderNextButton: function _shouldRenderNextButton() {\n    return this._nextButtonMode() && this._dataSource && this._dataSource.isLoaded();\n  },\n  _isDataSourceFirstLoadCompleted: function _isDataSourceFirstLoadCompleted(newValue) {\n    if (isDefined(newValue)) {\n      this._isFirstLoadCompleted = newValue;\n    }\n\n    return this._isFirstLoadCompleted;\n  },\n  _dataSourceLoadingChangedHandler: function _dataSourceLoadingChangedHandler(isLoading) {\n    if (this._loadIndicationSuppressed()) {\n      return;\n    }\n\n    if (isLoading && this.option(\"indicateLoading\")) {\n      this._showLoadingIndicatorTimer = setTimeout(function () {\n        var isEmpty = !this._itemElements().length;\n\n        var shouldIndicateLoading = !isEmpty || this._isDataSourceFirstLoadCompleted();\n\n        if (shouldIndicateLoading) {\n          var _this$_scrollView;\n\n          null === (_this$_scrollView = this._scrollView) || void 0 === _this$_scrollView ? void 0 : _this$_scrollView.startLoading();\n        }\n      }.bind(this));\n    } else {\n      clearTimeout(this._showLoadingIndicatorTimer);\n      this._scrollView && this._scrollView.finishLoading();\n    }\n\n    if (!isLoading) {\n      this._isDataSourceFirstLoadCompleted(false);\n    }\n  },\n  _dataSourceChangedHandler: function _dataSourceChangedHandler() {\n    if (!this._shouldAppendItems() && hasWindow()) {\n      this._scrollView && this._scrollView.scrollTo(0);\n    }\n\n    this.callBase.apply(this, arguments);\n\n    this._isDataSourceFirstLoadCompleted(true);\n  },\n  _refreshContent: function _refreshContent() {\n    this._prepareContent();\n\n    this._fireContentReadyAction();\n  },\n  _hideLoadingIfLoadIndicationOff: function _hideLoadingIfLoadIndicationOff() {\n    if (!this.option(\"indicateLoading\")) {\n      this._dataSourceLoadingChangedHandler(false);\n    }\n  },\n  _loadIndicationSuppressed: function _loadIndicationSuppressed(value) {\n    if (!arguments.length) {\n      return this._isLoadIndicationSuppressed;\n    }\n\n    this._isLoadIndicationSuppressed = value;\n  },\n  _scrollViewIsFull: function _scrollViewIsFull() {\n    var scrollView = this._scrollView;\n    return !scrollView || getHeight(scrollView.content()) > getHeight(scrollView.container());\n  },\n  _pullDownHandler: function _pullDownHandler(e) {\n    this._pullRefreshAction(e);\n\n    if (this._dataSource && !this._isDataSourceLoading()) {\n      this._clearSelectedItems();\n\n      this._dataSource.pageIndex(0);\n\n      this._dataSource.reload();\n    } else {\n      this._updateLoadingState();\n    }\n  },\n  _infiniteDataLoading: function _infiniteDataLoading() {\n    var _this = this;\n\n    var isElementVisible = this.$element().is(\":visible\");\n\n    if (isElementVisible && !this._scrollViewIsFull() && !this._isDataSourceLoading() && !this._isLastPage()) {\n      clearTimeout(this._loadNextPageTimer);\n      this._loadNextPageTimer = setTimeout(function () {\n        _this._loadNextPage().done(_this._setPreviousPageIfNewIsEmpty.bind(_this));\n      });\n    }\n  },\n  _setPreviousPageIfNewIsEmpty: function _setPreviousPageIfNewIsEmpty(result) {\n    if (this.option(\"_revertPageOnEmptyLoad\")) {\n      var dataSource = this.getDataSource();\n      var pageIndex = null === dataSource || void 0 === dataSource ? void 0 : dataSource.pageIndex();\n\n      if (0 === (null === result || void 0 === result ? void 0 : result.length) && pageIndex > 0) {\n        this._fireContentReadyAction();\n\n        dataSource.pageIndex(pageIndex - 1);\n      }\n    }\n  },\n  _scrollBottomHandler: function _scrollBottomHandler(e) {\n    this._pageLoadingAction(e);\n\n    if (!this._isDataSourceLoading() && !this._isLastPage()) {\n      this._loadNextPage();\n    } else {\n      this._updateLoadingState();\n    }\n  },\n  _renderItems: function _renderItems(items) {\n    if (this.option(\"grouped\")) {\n      each(items, this._renderGroup.bind(this));\n\n      this._attachGroupCollapseEvent();\n\n      this._renderEmptyMessage();\n\n      if (isMaterial()) {\n        this.attachGroupHeaderInkRippleEvents();\n      }\n    } else {\n      this.callBase.apply(this, arguments);\n    }\n\n    this._refreshItemElements();\n\n    this._updateLoadingState(true);\n  },\n  _attachGroupCollapseEvent: function _attachGroupCollapseEvent() {\n    var eventName = addNamespace(clickEventName, this.NAME);\n    var selector = \".\" + LIST_GROUP_HEADER_CLASS;\n    var $element = this.$element();\n    var collapsibleGroups = this.option(\"collapsibleGroups\");\n    $element.toggleClass(LIST_COLLAPSIBLE_GROUPS_CLASS, collapsibleGroups);\n    eventsEngine.off($element, eventName, selector);\n\n    if (collapsibleGroups) {\n      eventsEngine.on($element, eventName, selector, function (e) {\n        this._createAction(function (e) {\n          var $group = $(e.event.currentTarget).parent();\n\n          this._collapseGroupHandler($group);\n\n          if (this.option(\"focusStateEnabled\")) {\n            this.option(\"focusedElement\", getPublicElement($group.find(\".\" + LIST_ITEM_CLASS).eq(0)));\n          }\n        }.bind(this), {\n          validatingTargetName: \"element\"\n        })({\n          event: e\n        });\n      }.bind(this));\n    }\n  },\n  _collapseGroupHandler: function _collapseGroupHandler($group, toggle) {\n    var deferred = new Deferred();\n\n    if ($group.hasClass(LIST_GROUP_COLLAPSED_CLASS) === toggle) {\n      return deferred.resolve();\n    }\n\n    var $groupBody = $group.children(\".\" + LIST_GROUP_BODY_CLASS);\n    var startHeight = getOuterHeight($groupBody);\n    var endHeight = 0;\n\n    if (0 === startHeight) {\n      setHeight($groupBody, \"auto\");\n      endHeight = getOuterHeight($groupBody);\n    }\n\n    $group.toggleClass(LIST_GROUP_COLLAPSED_CLASS, toggle);\n    fx.animate($groupBody, {\n      type: \"custom\",\n      from: {\n        height: startHeight\n      },\n      to: {\n        height: endHeight\n      },\n      duration: 200,\n      complete: function () {\n        this.updateDimensions();\n\n        this._updateLoadingState();\n\n        deferred.resolve();\n      }.bind(this)\n    });\n    return deferred.promise();\n  },\n  _dataSourceLoadErrorHandler: function _dataSourceLoadErrorHandler() {\n    this._forgetNextPageLoading();\n\n    if (this._initialized) {\n      this._renderEmptyMessage();\n\n      this._updateLoadingState();\n    }\n  },\n  _initMarkup: function _initMarkup() {\n    this._itemElementsCache = $();\n    this.$element().addClass(LIST_CLASS);\n    this.callBase();\n    this.option(\"useInkRipple\") && this._renderInkRipple();\n    this.setAria(\"role\", this.option(\"_listAttributes\").role);\n  },\n  _renderInkRipple: function _renderInkRipple() {\n    this._inkRipple = render();\n  },\n  _toggleActiveState: function _toggleActiveState($element, value, e) {\n    this.callBase.apply(this, arguments);\n    var that = this;\n\n    if (!this._inkRipple) {\n      return;\n    }\n\n    var config = {\n      element: $element,\n      event: e\n    };\n\n    if (value) {\n      if (isMaterial()) {\n        this._inkRippleTimer = setTimeout(function () {\n          that._inkRipple.showWave(config);\n        }, LIST_FEEDBACK_SHOW_TIMEOUT / 2);\n      } else {\n        that._inkRipple.showWave(config);\n      }\n    } else {\n      clearTimeout(this._inkRippleTimer);\n\n      this._inkRipple.hideWave(config);\n    }\n  },\n  _postprocessRenderItem: function _postprocessRenderItem(args) {\n    this._refreshItemElements();\n\n    this.callBase.apply(this, arguments);\n\n    if (this.option(\"_swipeEnabled\")) {\n      this._attachSwipeEvent($(args.itemElement));\n    }\n  },\n  _attachSwipeEvent: function _attachSwipeEvent($itemElement) {\n    var endEventName = addNamespace(swipeEventEnd, this.NAME);\n    eventsEngine.on($itemElement, endEventName, this._itemSwipeEndHandler.bind(this));\n  },\n  _itemSwipeEndHandler: function _itemSwipeEndHandler(e) {\n    this._itemDXEventHandler(e, \"onItemSwipe\", {\n      direction: e.offset < 0 ? \"left\" : \"right\"\n    });\n  },\n  _nextButtonHandler: function _nextButtonHandler(e) {\n    this._pageLoadingAction(e);\n\n    var source = this._dataSource;\n\n    if (source && !source.isLoading()) {\n      this._scrollView.toggleLoading(true);\n\n      this._$nextButton.detach();\n\n      this._loadIndicationSuppressed(true);\n\n      this._loadNextPage();\n    }\n  },\n  _renderGroup: function _renderGroup(index, group) {\n    var $groupElement = $(\"<div>\").addClass(LIST_GROUP_CLASS).appendTo(this._itemContainer());\n    var $groupHeaderElement = $(\"<div>\").addClass(LIST_GROUP_HEADER_CLASS).appendTo($groupElement);\n    var groupTemplateName = this.option(\"groupTemplate\");\n\n    var groupTemplate = this._getTemplate(group.template || groupTemplateName, group, index, $groupHeaderElement);\n\n    var renderArgs = {\n      index: index,\n      itemData: group,\n      container: getPublicElement($groupHeaderElement)\n    };\n\n    this._createItemByTemplate(groupTemplate, renderArgs);\n\n    if (isMaterial()) {\n      $(\"<div>\").addClass(LIST_GROUP_HEADER_INDICATOR_CLASS).prependTo($groupHeaderElement);\n    }\n\n    this._renderingGroupIndex = index;\n    var $groupBody = $(\"<div>\").addClass(LIST_GROUP_BODY_CLASS).appendTo($groupElement);\n    each(groupItemsGetter(group) || [], function (itemIndex, item) {\n      this._renderItem({\n        group: index,\n        item: itemIndex\n      }, item, $groupBody);\n    }.bind(this));\n\n    this._groupRenderAction({\n      groupElement: getPublicElement($groupElement),\n      groupIndex: index,\n      groupData: group\n    });\n  },\n  downInkRippleHandler: function downInkRippleHandler(e) {\n    this._toggleActiveState($(e.currentTarget), true, e);\n  },\n  upInkRippleHandler: function upInkRippleHandler(e) {\n    this._toggleActiveState($(e.currentTarget), false);\n  },\n  attachGroupHeaderInkRippleEvents: function attachGroupHeaderInkRippleEvents() {\n    var selector = \".\" + LIST_GROUP_HEADER_CLASS;\n    var $element = this.$element();\n    this._downInkRippleHandler = this._downInkRippleHandler || this.downInkRippleHandler.bind(this);\n    this._upInkRippleHandler = this._upInkRippleHandler || this.upInkRippleHandler.bind(this);\n    var downArguments = [$element, \"dxpointerdown\", selector, this._downInkRippleHandler];\n    var upArguments = [$element, \"dxpointerup dxpointerout\", selector, this._upInkRippleHandler];\n    eventsEngine.off.apply(eventsEngine, downArguments);\n    eventsEngine.on.apply(eventsEngine, downArguments);\n    eventsEngine.off.apply(eventsEngine, upArguments);\n    eventsEngine.on.apply(eventsEngine, upArguments);\n  },\n  _createGroupRenderAction: function _createGroupRenderAction() {\n    this._groupRenderAction = this._createActionByOption(\"onGroupRendered\");\n  },\n  _clean: function _clean() {\n    clearTimeout(this._inkRippleTimer);\n\n    if (this._$nextButton) {\n      this._$nextButton.remove();\n\n      this._$nextButton = null;\n    }\n\n    delete this._inkRipple;\n    this.callBase.apply(this, arguments);\n  },\n  _dispose: function _dispose() {\n    this._isDataSourceFirstLoadCompleted(false);\n\n    clearTimeout(this._holdTimer);\n    clearTimeout(this._loadNextPageTimer);\n    clearTimeout(this._showLoadingIndicatorTimer);\n    this.callBase();\n  },\n  _toggleDisabledState: function _toggleDisabledState(value) {\n    this.callBase(value);\n\n    this._scrollView.option(\"disabled\", value || !this.option(\"scrollingEnabled\"));\n  },\n  _toggleNextButton: function _toggleNextButton(value) {\n    var dataSource = this._dataSource;\n\n    var $nextButton = this._getNextButton();\n\n    this.$element().toggleClass(LIST_HAS_NEXT_CLASS, value);\n\n    if (value && dataSource && dataSource.isLoaded()) {\n      $nextButton.appendTo(this._itemContainer());\n    }\n\n    if (!value) {\n      $nextButton.detach();\n    }\n  },\n  _getNextButton: function _getNextButton() {\n    if (!this._$nextButton) {\n      this._$nextButton = this._createNextButton();\n    }\n\n    return this._$nextButton;\n  },\n  _createNextButton: function _createNextButton() {\n    var $result = $(\"<div>\").addClass(LIST_NEXT_BUTTON_CLASS);\n    var $button = $(\"<div>\").appendTo($result);\n\n    this._createComponent($button, Button, {\n      text: this.option(\"nextButtonText\"),\n      onClick: this._nextButtonHandler.bind(this),\n      type: isMaterial() ? \"default\" : void 0,\n      integrationOptions: {}\n    });\n\n    return $result;\n  },\n  _moveFocus: function _moveFocus() {\n    this.callBase.apply(this, arguments);\n    this.scrollToItem(this.option(\"focusedElement\"));\n  },\n  _refresh: function _refresh() {\n    if (!hasWindow()) {\n      this.callBase();\n    } else {\n      var scrollTop = this._scrollView.scrollTop();\n\n      this.callBase();\n      scrollTop && this._scrollView.scrollTo(scrollTop);\n    }\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"pageLoadMode\":\n        this._toggleNextButton(args.value);\n\n        this._initScrollView();\n\n        break;\n\n      case \"dataSource\":\n        this.callBase(args);\n\n        this._initScrollView();\n\n        this._isDataSourceFirstLoadCompleted(false);\n\n        break;\n\n      case \"items\":\n        this.callBase(args);\n\n        this._isDataSourceFirstLoadCompleted(false);\n\n        break;\n\n      case \"pullingDownText\":\n      case \"pulledDownText\":\n      case \"refreshingText\":\n      case \"pageLoadingText\":\n      case \"showScrollbar\":\n      case \"bounceEnabled\":\n      case \"scrollByContent\":\n      case \"scrollByThumb\":\n      case \"useNativeScrolling\":\n      case \"scrollingEnabled\":\n      case \"pullRefreshEnabled\":\n        this._initScrollView();\n\n        this._updateLoadingState();\n\n        break;\n\n      case \"nextButtonText\":\n      case \"onItemSwipe\":\n      case \"useInkRipple\":\n        this._invalidate();\n\n        break;\n\n      case \"onScroll\":\n      case \"onPullRefresh\":\n      case \"onPageLoading\":\n        this._createScrollViewActions();\n\n        break;\n\n      case \"grouped\":\n      case \"collapsibleGroups\":\n      case \"groupTemplate\":\n        this._invalidate();\n\n        break;\n\n      case \"wrapItemText\":\n        this._$container.toggleClass(WRAP_ITEM_TEXT_CLASS, args.value);\n\n        break;\n\n      case \"onGroupRendered\":\n        this._createGroupRenderAction();\n\n        break;\n\n      case \"width\":\n      case \"height\":\n        this.callBase(args);\n\n        this._scrollView.update();\n\n        break;\n\n      case \"indicateLoading\":\n        this._hideLoadingIfLoadIndicationOff();\n\n        break;\n\n      case \"visible\":\n        this.callBase(args);\n\n        this._scrollView.update();\n\n        break;\n\n      case \"rtlEnabled\":\n        this._initScrollView();\n\n        this.callBase(args);\n        break;\n\n      case \"showChevronExpr\":\n      case \"badgeExpr\":\n        this._invalidate();\n\n        break;\n\n      case \"_swipeEnabled\":\n      case \"_revertPageOnEmptyLoad\":\n      case \"_listAttributes\":\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  _extendActionArgs: function _extendActionArgs($itemElement) {\n    if (!this.option(\"grouped\")) {\n      return this.callBase($itemElement);\n    }\n\n    var $group = $itemElement.closest(\".\" + LIST_GROUP_CLASS);\n    var $item = $group.find(\".\" + LIST_ITEM_CLASS);\n    return extend(this.callBase($itemElement), {\n      itemIndex: {\n        group: $group.index(),\n        item: $item.index($itemElement)\n      }\n    });\n  },\n  expandGroup: function expandGroup(groupIndex) {\n    var deferred = new Deferred();\n\n    var $group = this._itemContainer().find(\".\" + LIST_GROUP_CLASS).eq(groupIndex);\n\n    this._collapseGroupHandler($group, false).done(function () {\n      deferred.resolveWith(this);\n    }.bind(this));\n\n    return deferred.promise();\n  },\n  collapseGroup: function collapseGroup(groupIndex) {\n    var deferred = new Deferred();\n\n    var $group = this._itemContainer().find(\".\" + LIST_GROUP_CLASS).eq(groupIndex);\n\n    this._collapseGroupHandler($group, true).done(function () {\n      deferred.resolveWith(this);\n    }.bind(this));\n\n    return deferred;\n  },\n  updateDimensions: function updateDimensions() {\n    var that = this;\n    var deferred = new Deferred();\n\n    if (that._scrollView) {\n      that._scrollView.update().done(function () {\n        !that._scrollViewIsFull() && that._updateLoadingState(true);\n        deferred.resolveWith(that);\n      });\n    } else {\n      deferred.resolveWith(that);\n    }\n\n    return deferred.promise();\n  },\n  reload: function reload() {\n    this.callBase();\n    this.scrollTo(0);\n\n    this._pullDownHandler();\n  },\n  repaint: function repaint() {\n    this.scrollTo(0);\n    this.callBase();\n  },\n  scrollTop: function scrollTop() {\n    return this._scrollView.scrollOffset().top;\n  },\n  clientHeight: function clientHeight() {\n    return this._scrollView.clientHeight();\n  },\n  scrollHeight: function scrollHeight() {\n    return this._scrollView.scrollHeight();\n  },\n  scrollBy: function scrollBy(distance) {\n    this._scrollView.scrollBy(distance);\n  },\n  scrollTo: function scrollTo(location) {\n    this._scrollView.scrollTo(location);\n  },\n  scrollToItem: function scrollToItem(itemElement) {\n    var $item = this._editStrategy.getItemElement(itemElement);\n\n    this._scrollView.scrollToElement(null === $item || void 0 === $item ? void 0 : $item.get(0));\n  },\n  _dimensionChanged: function _dimensionChanged() {\n    this.updateDimensions();\n  }\n}).include(DataConverterMixin);\nListBase.ItemClass = ListItem;\n\nfunction getScrollView() {\n  return _scrollView || ScrollView;\n}\n\nexport function setScrollView(value) {\n  _scrollView = value;\n}","map":null,"metadata":{},"sourceType":"module"}