{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/**\r\n * DevExtreme (esm/renovation/ui/scheduler/timeZoneCalculator/utils.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { isDefined } from \"../../../../core/utils/type\";\nimport dateUtils from \"../../../../core/utils/date\";\nimport { PathTimeZoneConversion } from \"./types\";\nexport var TimeZoneCalculator = /*#__PURE__*/function () {\n  function TimeZoneCalculator(options) {\n    _classCallCheck(this, TimeZoneCalculator);\n\n    this.options = options;\n  }\n\n  _createClass(TimeZoneCalculator, [{\n    key: \"createDate\",\n    value: function createDate(sourceDate, info) {\n      var date = new Date(sourceDate);\n\n      switch (info.path) {\n        case PathTimeZoneConversion.fromSourceToAppointment:\n          return this.getConvertedDate(date, info.appointmentTimeZone, true, false);\n\n        case PathTimeZoneConversion.fromAppointmentToSource:\n          return this.getConvertedDate(date, info.appointmentTimeZone, true, true);\n\n        case PathTimeZoneConversion.fromSourceToGrid:\n          return this.getConvertedDate(date, info.appointmentTimeZone, false, false);\n\n        case PathTimeZoneConversion.fromGridToSource:\n          return this.getConvertedDate(date, info.appointmentTimeZone, false, true);\n\n        default:\n          throw new Error(\"not specified pathTimeZoneConversion\");\n      }\n    }\n  }, {\n    key: \"getOffsets\",\n    value: function getOffsets(date, appointmentTimezone) {\n      var clientOffset = -this.getClientOffset(date) / dateUtils.dateToMilliseconds(\"hour\");\n      var commonOffset = this.getCommonOffset(date);\n      var appointmentOffset = this.getAppointmentOffset(date, appointmentTimezone);\n      return {\n        client: clientOffset,\n        common: !isDefined(commonOffset) ? clientOffset : commonOffset,\n        appointment: \"number\" !== typeof appointmentOffset ? clientOffset : appointmentOffset\n      };\n    }\n  }, {\n    key: \"getConvertedDateByOffsets\",\n    value: function getConvertedDateByOffsets(date, clientOffset, targetOffset, isBack) {\n      var direction = isBack ? -1 : 1;\n      var utcDate = date.getTime() - direction * clientOffset * dateUtils.dateToMilliseconds(\"hour\");\n      return new Date(utcDate + direction * targetOffset * dateUtils.dateToMilliseconds(\"hour\"));\n    }\n  }, {\n    key: \"getClientOffset\",\n    value: function getClientOffset(date) {\n      return this.options.getClientOffset(date);\n    }\n  }, {\n    key: \"getCommonOffset\",\n    value: function getCommonOffset(date) {\n      return this.options.getCommonOffset(date);\n    }\n  }, {\n    key: \"getAppointmentOffset\",\n    value: function getAppointmentOffset(date, appointmentTimezone) {\n      return this.options.getAppointmentOffset(date, appointmentTimezone);\n    }\n  }, {\n    key: \"getConvertedDate\",\n    value: function getConvertedDate(date, appointmentTimezone, useAppointmentTimeZone, isBack) {\n      var newDate = new Date(date.getTime());\n      var offsets = this.getOffsets(newDate, appointmentTimezone);\n\n      if (useAppointmentTimeZone && !!appointmentTimezone) {\n        return this.getConvertedDateByOffsets(date, offsets.client, offsets.appointment, isBack);\n      }\n\n      return this.getConvertedDateByOffsets(date, offsets.client, offsets.common, isBack);\n    }\n  }]);\n\n  return TimeZoneCalculator;\n}();","map":null,"metadata":{},"sourceType":"module"}