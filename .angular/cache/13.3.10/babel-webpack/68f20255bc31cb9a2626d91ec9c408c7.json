{"ast":null,"code":"import _toConsumableArray from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/renovation/ui/scheduler/workspaces/base/virtual_row.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"cellsCount\", \"children\", \"className\", \"height\", \"isHeaderRow\", \"leftVirtualCellCount\", \"leftVirtualCellWidth\", \"rightVirtualCellCount\", \"rightVirtualCellWidth\", \"styles\"];\nimport { createComponentVNode } from \"inferno\";\nimport { BaseInfernoComponent } from \"@devextreme/runtime/inferno\";\nimport { addHeightToStyle } from \"../utils\";\nimport { RowProps, Row } from \"./row\";\nimport { VirtualCell } from \"./virtual_cell\";\nexport var viewFunction = function viewFunction(_ref) {\n  var classes = _ref.classes,\n      _ref$props = _ref.props,\n      leftVirtualCellCount = _ref$props.leftVirtualCellCount,\n      leftVirtualCellWidth = _ref$props.leftVirtualCellWidth,\n      rightVirtualCellCount = _ref$props.rightVirtualCellCount,\n      rightVirtualCellWidth = _ref$props.rightVirtualCellWidth,\n      style = _ref.style,\n      virtualCells = _ref.virtualCells;\n  return createComponentVNode(2, Row, {\n    styles: style,\n    className: classes,\n    leftVirtualCellWidth: leftVirtualCellWidth,\n    rightVirtualCellWidth: rightVirtualCellWidth,\n    leftVirtualCellCount: leftVirtualCellCount,\n    rightVirtualCellCount: rightVirtualCellCount,\n    children: virtualCells.map(function (_, index) {\n      return createComponentVNode(2, VirtualCell, null, index.toString());\n    })\n  });\n};\nexport var VirtualRowProps = Object.create(Object.prototype, _extends(Object.getOwnPropertyDescriptors(RowProps), Object.getOwnPropertyDescriptors({\n  leftVirtualCellWidth: 0,\n  rightVirtualCellWidth: 0,\n  cellsCount: 1\n})));\nexport var VirtualRow = /*#__PURE__*/(function () {\n  var VirtualRow = /*#__PURE__*/function (_BaseInfernoComponent) {\n    _inherits(VirtualRow, _BaseInfernoComponent);\n\n    var _super = _createSuper(VirtualRow);\n\n    function VirtualRow(props) {\n      var _this;\n\n      _classCallCheck(this, VirtualRow);\n\n      _this = _super.call(this, props);\n      _this.state = {};\n      _this.__getterCache = {};\n      return _this;\n    }\n\n    _createClass(VirtualRow, [{\n      key: \"style\",\n      get: function get() {\n        var height = this.props.height;\n        var style = this.restAttributes.style;\n        return addHeightToStyle(height, style);\n      }\n    }, {\n      key: \"classes\",\n      get: function get() {\n        var className = this.props.className;\n        return \"dx-scheduler-virtual-row \".concat(className);\n      }\n    }, {\n      key: \"virtualCells\",\n      get: function get() {\n        var _this2 = this;\n\n        if (void 0 !== this.__getterCache.virtualCells) {\n          return this.__getterCache.virtualCells;\n        }\n\n        return this.__getterCache.virtualCells = function () {\n          var cellsCount = _this2.props.cellsCount;\n          return _toConsumableArray(Array(cellsCount));\n        }();\n      }\n    }, {\n      key: \"restAttributes\",\n      get: function get() {\n        var _this$props = this.props,\n            restProps = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n        return restProps;\n      }\n    }, {\n      key: \"componentWillUpdate\",\n      value: function componentWillUpdate(nextProps, nextState, context) {\n        if (this.props.cellsCount !== nextProps.cellsCount) {\n          this.__getterCache.virtualCells = void 0;\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var props = this.props;\n        return viewFunction({\n          props: _extends({}, props),\n          style: this.style,\n          classes: this.classes,\n          virtualCells: this.virtualCells,\n          restAttributes: this.restAttributes\n        });\n      }\n    }]);\n\n    return VirtualRow;\n  }(BaseInfernoComponent);\n\n  VirtualRow.defaultProps = VirtualRowProps;\n  return VirtualRow;\n})();","map":null,"metadata":{},"sourceType":"module"}