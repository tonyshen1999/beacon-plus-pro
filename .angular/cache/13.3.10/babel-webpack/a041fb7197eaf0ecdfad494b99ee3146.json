{"ast":null,"code":"import _toConsumableArray from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.editing.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport { Deferred } from \"../../core/utils/deferred\";\nimport { each } from \"../../core/utils/iterator\";\nimport { format } from \"../../core/utils/string\";\nimport messageLocalization from \"../../localization/message\";\nimport Widget from \"../widget/ui.widget\";\nimport FileManagerDialogManager from \"./ui.file_manager.dialog_manager\";\nimport FileManagerFileUploader from \"./ui.file_manager.file_uploader\";\nimport { FileManagerMessages } from \"./ui.file_manager.messages\";\n\nvar FileManagerEditingControl = /*#__PURE__*/function (_Widget) {\n  _inherits(FileManagerEditingControl, _Widget);\n\n  var _super = _createSuper(FileManagerEditingControl);\n\n  function FileManagerEditingControl() {\n    _classCallCheck(this, FileManagerEditingControl);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FileManagerEditingControl, [{\n    key: \"_initMarkup\",\n    value: function _initMarkup() {\n      _get(_getPrototypeOf(FileManagerEditingControl.prototype), \"_initMarkup\", this).call(this);\n\n      this._initActions();\n\n      this._controller = this.option(\"controller\");\n\n      this._controller.on(\"EditActionStarting\", this._onEditActionStarting.bind(this));\n\n      this._controller.on(\"EditActionResultAcquired\", this._onEditActionResultAcquired.bind(this));\n\n      this._controller.on(\"EditActionItemError\", this._onEditActionItemError.bind(this));\n\n      this._controller.on(\"EditActionError\", this._onEditActionError.bind(this));\n\n      this._controller.on(\"CompleteEditActionItem\", this._onCompleteEditActionItem.bind(this));\n\n      this._controller.on(\"CompleteEditAction\", this._onCompleteEditAction.bind(this));\n\n      this._model = this.option(\"model\");\n      this._uploadOperationInfoMap = {};\n      this._dialogManager = new FileManagerDialogManager(this.$element(), {\n        chooseDirectoryDialog: {\n          provider: this._controller._fileProvider,\n          getDirectories: this._controller.getDirectories.bind(this._controller),\n          getCurrentDirectory: this._controller.getCurrentDirectory.bind(this._controller)\n        },\n        rtlEnabled: this.option(\"rtlEnabled\"),\n        onDialogClosed: this._onDialogClosed.bind(this)\n      });\n      this._fileUploader = this._createFileUploader();\n      var notificationControl = this.option(\"notificationControl\");\n\n      if (notificationControl) {\n        this._initNotificationControl(notificationControl);\n      }\n\n      this._createMetadataMap();\n    }\n  }, {\n    key: \"_initNotificationControl\",\n    value: function _initNotificationControl(notificationControl) {\n      var _this = this;\n\n      this._notificationControl = notificationControl;\n\n      this._notificationControl.option({\n        onOperationCanceled: function onOperationCanceled(_ref) {\n          var info = _ref.info;\n          return _this._onCancelUploadSession(info);\n        },\n        onOperationItemCanceled: function onOperationItemCanceled(_ref2) {\n          var item = _ref2.item,\n              itemIndex = _ref2.itemIndex;\n          return _this._onCancelFileUpload(item, itemIndex);\n        }\n      });\n    }\n  }, {\n    key: \"_getFileUploaderComponent\",\n    value: function _getFileUploaderComponent() {\n      return FileManagerFileUploader;\n    }\n  }, {\n    key: \"_createFileUploader\",\n    value: function _createFileUploader() {\n      var _this2 = this;\n\n      var $fileUploader = $(\"<div>\").appendTo(this.$element());\n      return this._createComponent($fileUploader, this._getFileUploaderComponent(), {\n        getController: this._getFileUploaderController.bind(this),\n        dropZonePlaceholderContainer: this.option(\"uploadDropZonePlaceholderContainer\"),\n        onUploadSessionStarted: function onUploadSessionStarted(e) {\n          return _this2._onUploadSessionStarted(e);\n        },\n        onUploadProgress: function onUploadProgress(e) {\n          return _this2._onUploadProgress(e);\n        }\n      });\n    }\n  }, {\n    key: \"setUploaderDropZone\",\n    value: function setUploaderDropZone($element) {\n      this._fileUploader.option(\"dropZone\", $element);\n    }\n  }, {\n    key: \"setUploaderSplitterElement\",\n    value: function setUploaderSplitterElement(element) {\n      this._fileUploader.option(\"splitterElement\", element);\n    }\n  }, {\n    key: \"_getFileUploaderController\",\n    value: function _getFileUploaderController() {\n      var _this3 = this;\n\n      var uploadDirectory = this.uploadDirectoryInfo.fileItem;\n      return {\n        chunkSize: this._controller.getFileUploadChunkSize(),\n        uploadFileChunk: function uploadFileChunk(fileData, chunksInfo) {\n          return _this3._controller.uploadFileChunk(fileData, chunksInfo, uploadDirectory);\n        },\n        abortFileUpload: function abortFileUpload(fileData, chunksInfo) {\n          return _this3._controller.abortFileUpload(fileData, chunksInfo, uploadDirectory);\n        }\n      };\n    }\n  }, {\n    key: \"_createMetadataMap\",\n    value: function _createMetadataMap() {\n      var _this4 = this;\n\n      this._metadataMap = {\n        create: {\n          action: function action(arg) {\n            return _this4._tryCreate(arg);\n          },\n          affectsAllItems: true,\n          singleItemProcessingMessage: messageLocalization.format(\"dxFileManager-editingCreateSingleItemProcessingMessage\"),\n          singleItemSuccessMessage: messageLocalization.format(\"dxFileManager-editingCreateSingleItemSuccessMessage\"),\n          singleItemErrorMessage: messageLocalization.format(\"dxFileManager-editingCreateSingleItemErrorMessage\"),\n          commonErrorMessage: messageLocalization.format(\"dxFileManager-editingCreateCommonErrorMessage\")\n        },\n        rename: {\n          action: function action(arg) {\n            return _this4._tryRename(arg);\n          },\n          singleItemProcessingMessage: messageLocalization.format(\"dxFileManager-editingRenameSingleItemProcessingMessage\"),\n          singleItemSuccessMessage: messageLocalization.format(\"dxFileManager-editingRenameSingleItemSuccessMessage\"),\n          singleItemErrorMessage: messageLocalization.format(\"dxFileManager-editingRenameSingleItemErrorMessage\"),\n          commonErrorMessage: messageLocalization.format(\"dxFileManager-editingRenameCommonErrorMessage\")\n        },\n        delete: {\n          action: function action(arg) {\n            return _this4._tryDelete(arg);\n          },\n          singleItemProcessingMessage: messageLocalization.format(\"dxFileManager-editingDeleteSingleItemProcessingMessage\"),\n          multipleItemsProcessingMessage: messageLocalization.format(\"dxFileManager-editingDeleteMultipleItemsProcessingMessage\"),\n          singleItemSuccessMessage: messageLocalization.format(\"dxFileManager-editingDeleteSingleItemSuccessMessage\"),\n          multipleItemsSuccessMessage: messageLocalization.format(\"dxFileManager-editingDeleteMultipleItemsSuccessMessage\"),\n          singleItemErrorMessage: messageLocalization.format(\"dxFileManager-editingDeleteSingleItemErrorMessage\"),\n          multipleItemsErrorMessage: messageLocalization.format(\"dxFileManager-editingDeleteMultipleItemsErrorMessage\"),\n          commonErrorMessage: messageLocalization.format(\"dxFileManager-editingDeleteCommonErrorMessage\")\n        },\n        move: {\n          action: function action(arg) {\n            return _this4._tryMove(arg);\n          },\n          singleItemProcessingMessage: messageLocalization.format(\"dxFileManager-editingMoveSingleItemProcessingMessage\"),\n          multipleItemsProcessingMessage: messageLocalization.format(\"dxFileManager-editingMoveMultipleItemsProcessingMessage\"),\n          singleItemSuccessMessage: messageLocalization.format(\"dxFileManager-editingMoveSingleItemSuccessMessage\"),\n          multipleItemsSuccessMessage: messageLocalization.format(\"dxFileManager-editingMoveMultipleItemsSuccessMessage\"),\n          singleItemErrorMessage: messageLocalization.format(\"dxFileManager-editingMoveSingleItemErrorMessage\"),\n          multipleItemsErrorMessage: messageLocalization.format(\"dxFileManager-editingMoveMultipleItemsErrorMessage\"),\n          commonErrorMessage: messageLocalization.format(\"dxFileManager-editingMoveCommonErrorMessage\")\n        },\n        copy: {\n          action: function action(arg) {\n            return _this4._tryCopy(arg);\n          },\n          singleItemProcessingMessage: messageLocalization.format(\"dxFileManager-editingCopySingleItemProcessingMessage\"),\n          multipleItemsProcessingMessage: messageLocalization.format(\"dxFileManager-editingCopyMultipleItemsProcessingMessage\"),\n          singleItemSuccessMessage: messageLocalization.format(\"dxFileManager-editingCopySingleItemSuccessMessage\"),\n          multipleItemsSuccessMessage: messageLocalization.format(\"dxFileManager-editingCopyMultipleItemsSuccessMessage\"),\n          singleItemErrorMessage: messageLocalization.format(\"dxFileManager-editingCopySingleItemErrorMessage\"),\n          multipleItemsErrorMessage: messageLocalization.format(\"dxFileManager-editingCopyMultipleItemsErrorMessage\"),\n          commonErrorMessage: messageLocalization.format(\"dxFileManager-editingCopyCommonErrorMessage\")\n        },\n        upload: {\n          action: function action(arg) {\n            return _this4._tryUpload(arg);\n          },\n          allowCancel: true,\n          allowItemProgress: true,\n          singleItemProcessingMessage: messageLocalization.format(\"dxFileManager-editingUploadSingleItemProcessingMessage\"),\n          multipleItemsProcessingMessage: messageLocalization.format(\"dxFileManager-editingUploadMultipleItemsProcessingMessage\"),\n          singleItemSuccessMessage: messageLocalization.format(\"dxFileManager-editingUploadSingleItemSuccessMessage\"),\n          multipleItemsSuccessMessage: messageLocalization.format(\"dxFileManager-editingUploadMultipleItemsSuccessMessage\"),\n          singleItemErrorMessage: messageLocalization.format(\"dxFileManager-editingUploadSingleItemErrorMessage\"),\n          multipleItemsErrorMessage: messageLocalization.format(\"dxFileManager-editingUploadMultipleItemsErrorMessage\"),\n          canceledMessage: messageLocalization.format(\"dxFileManager-editingUploadCanceledMessage\")\n        },\n        download: {\n          action: function action(arg) {\n            return _this4._download(arg);\n          }\n        },\n        getItemContent: {\n          action: function action(arg) {\n            return _this4._getItemContent(arg);\n          }\n        },\n        getItems: {\n          singleItemProcessingMessage: \"\",\n          singleItemErrorMessage: messageLocalization.format(\"dxFileManager-errorDirectoryOpenFailed\"),\n          commonErrorMessage: messageLocalization.format(\"dxFileManager-errorDirectoryOpenFailed\")\n        }\n      };\n    }\n  }, {\n    key: \"getCommandActions\",\n    value: function getCommandActions() {\n      var _this5 = this;\n\n      var result = {};\n      each(this._metadataMap, function (name) {\n        if (Object.prototype.hasOwnProperty.call(_this5._metadataMap, name)) {\n          result[name] = function (arg) {\n            return _this5._executeAction(name, arg);\n          };\n        }\n      });\n      return result;\n    }\n  }, {\n    key: \"_executeAction\",\n    value: function _executeAction(actionName, arg) {\n      var actionMetadata = this._metadataMap[actionName];\n      return actionMetadata ? actionMetadata.action(arg) : null;\n    }\n  }, {\n    key: \"_onCancelUploadSession\",\n    value: function _onCancelUploadSession(info) {\n      this._fileUploader.cancelUpload(info.uploadSessionId);\n    }\n  }, {\n    key: \"_onCancelFileUpload\",\n    value: function _onCancelFileUpload(item, itemIndex) {\n      this._fileUploader.cancelFileUpload(item.info.uploadSessionId, itemIndex);\n    }\n  }, {\n    key: \"_onUploadProgress\",\n    value: function _onUploadProgress(_ref3) {\n      var sessionId = _ref3.sessionId,\n          fileIndex = _ref3.fileIndex,\n          commonValue = _ref3.commonValue,\n          fileValue = _ref3.fileValue;\n      var operationInfo = this._uploadOperationInfoMap[sessionId];\n\n      this._notificationControl.updateOperationItemProgress(operationInfo, fileIndex, 100 * fileValue, 100 * commonValue);\n    }\n  }, {\n    key: \"_onUploadSessionStarted\",\n    value: function _onUploadSessionStarted(_ref4) {\n      var sessionInfo = _ref4.sessionInfo;\n\n      this._controller.processUploadSession(sessionInfo, this.uploadDirectoryInfo);\n    }\n  }, {\n    key: \"_onEditActionStarting\",\n    value: function _onEditActionStarting(actionInfo) {\n      var actionMetadata = this._metadataMap[actionInfo.name];\n      var context = new FileManagerActionContext(actionMetadata, actionInfo.itemInfos, actionInfo.directory);\n\n      var operationInfo = this._notificationControl.addOperation(context.processingMessage, actionMetadata.allowCancel, !actionMetadata.allowItemProgress);\n\n      extend(actionInfo.customData, {\n        context: context,\n        operationInfo: operationInfo\n      });\n\n      switch (actionInfo.name) {\n        case \"upload\":\n          var sessionId = actionInfo.customData.sessionInfo.sessionId;\n          operationInfo.uploadSessionId = sessionId;\n          this._uploadOperationInfoMap[sessionId] = operationInfo;\n          break;\n\n        case \"rename\":\n          actionInfo.customData.context.itemNewName = actionInfo.customData.itemNewName;\n      }\n    }\n  }, {\n    key: \"_onEditActionResultAcquired\",\n    value: function _onEditActionResultAcquired(actionInfo) {\n      var _this6 = this;\n\n      var _actionInfo$customDat = actionInfo.customData,\n          context = _actionInfo$customDat.context,\n          operationInfo = _actionInfo$customDat.operationInfo;\n      context.singleRequest = actionInfo.singleRequest;\n      var details = context.itemInfos.map(function (itemInfo) {\n        return _this6._getItemProgressDisplayInfo(itemInfo);\n      });\n\n      this._notificationControl.addOperationDetails(operationInfo, details, context.actionMetadata.allowCancel);\n    }\n  }, {\n    key: \"_onEditActionError\",\n    value: function _onEditActionError(actionInfo, errorInfo) {\n      var _actionInfo$customDat2 = actionInfo.customData,\n          context = _actionInfo$customDat2.context,\n          operationInfo = _actionInfo$customDat2.operationInfo;\n      context.singleRequest = actionInfo.singleRequest;\n\n      this._handleActionError(operationInfo, context, errorInfo);\n\n      this._completeAction(operationInfo, context);\n    }\n  }, {\n    key: \"_onEditActionItemError\",\n    value: function _onEditActionItemError(actionInfo, errorInfo) {\n      var _actionInfo$customDat3 = actionInfo.customData,\n          context = _actionInfo$customDat3.context,\n          operationInfo = _actionInfo$customDat3.operationInfo;\n\n      this._handleActionError(operationInfo, context, errorInfo);\n    }\n  }, {\n    key: \"_onCompleteEditActionItem\",\n    value: function _onCompleteEditActionItem(actionInfo, info) {\n      var _actionInfo$customDat4 = actionInfo.customData,\n          context = _actionInfo$customDat4.context,\n          operationInfo = _actionInfo$customDat4.operationInfo;\n\n      if (!info.result || !info.result.canceled) {\n        context.completeOperationItem(info.index);\n\n        this._notificationControl.completeOperationItem(operationInfo, info.index, context.commonProgress);\n      }\n    }\n  }, {\n    key: \"_onCompleteEditAction\",\n    value: function _onCompleteEditAction(actionInfo) {\n      var _actionInfo$customDat5 = actionInfo.customData,\n          context = _actionInfo$customDat5.context,\n          operationInfo = _actionInfo$customDat5.operationInfo;\n\n      this._completeAction(operationInfo, context);\n\n      if (\"upload\" === actionInfo.name) {\n        delete this._uploadOperationInfoMap[actionInfo.customData.sessionInfo.sessionId];\n      }\n    }\n  }, {\n    key: \"_tryCreate\",\n    value: function _tryCreate(parentDirectories) {\n      var _this7 = this;\n\n      var parentDirectoryInfo = parentDirectories && parentDirectories[0] || this._getCurrentDirectory();\n\n      var newDirName = messageLocalization.format(\"dxFileManager-newDirectoryName\");\n      return this._showDialog(this._dialogManager.getCreateItemDialog(), newDirName).then(function (_ref5) {\n        var name = _ref5.name;\n        return _this7._controller.createDirectory(parentDirectoryInfo, name);\n      });\n    }\n  }, {\n    key: \"_tryRename\",\n    value: function _tryRename(itemInfos) {\n      var _this8 = this;\n\n      var itemInfo = itemInfos && itemInfos[0] || this._model.getMultipleSelectedItems()[0];\n\n      if (!itemInfo) {\n        return new Deferred().reject().promise();\n      }\n\n      return this._showDialog(this._dialogManager.getRenameItemDialog(), itemInfo.fileItem.name).then(function (_ref6) {\n        var name = _ref6.name;\n        return _this8._controller.renameItem(itemInfo, name);\n      });\n    }\n  }, {\n    key: \"_tryDelete\",\n    value: function _tryDelete(itemInfos) {\n      var _this9 = this;\n\n      itemInfos = itemInfos || this._model.getMultipleSelectedItems();\n\n      if (0 === itemInfos.length) {\n        return new Deferred().reject().promise();\n      }\n\n      var itemName = itemInfos[0].fileItem.name;\n      var itemCount = itemInfos.length;\n      return this._showDialog(this._dialogManager.getDeleteItemDialog(), {\n        itemName: itemName,\n        itemCount: itemCount\n      }).then(function () {\n        return _this9._controller.deleteItems(itemInfos);\n      });\n    }\n  }, {\n    key: \"_tryMove\",\n    value: function _tryMove(itemInfos) {\n      var _this10 = this;\n\n      itemInfos = itemInfos || this._model.getMultipleSelectedItems();\n\n      if (0 === itemInfos.length) {\n        return new Deferred().reject().promise();\n      }\n\n      return this._showDialog(this._dialogManager.getMoveDialog(itemInfos)).then(function (_ref7) {\n        var folder = _ref7.folder;\n        return _this10._controller.moveItems(itemInfos, folder);\n      });\n    }\n  }, {\n    key: \"_tryCopy\",\n    value: function _tryCopy(itemInfos) {\n      var _this11 = this;\n\n      itemInfos = itemInfos || this._model.getMultipleSelectedItems();\n\n      if (0 === itemInfos.length) {\n        return new Deferred().reject().promise();\n      }\n\n      return this._showDialog(this._dialogManager.getCopyDialog(itemInfos)).then(function (_ref8) {\n        var folder = _ref8.folder;\n        return _this11._controller.copyItems(itemInfos, folder);\n      });\n    }\n  }, {\n    key: \"_tryUpload\",\n    value: function _tryUpload(destinationFolder) {\n      this._uploadDirectoryInfo = null === destinationFolder || void 0 === destinationFolder ? void 0 : destinationFolder[0];\n\n      this._fileUploader.tryUpload();\n    }\n  }, {\n    key: \"_download\",\n    value: function _download(itemInfos) {\n      itemInfos = itemInfos || this._model.getMultipleSelectedItems();\n\n      if (0 === itemInfos.length) {\n        return new Deferred().reject().promise();\n      }\n\n      return this._controller.downloadItems(itemInfos);\n    }\n  }, {\n    key: \"_getItemContent\",\n    value: function _getItemContent(itemInfos) {\n      itemInfos = itemInfos || this._model.getMultipleSelectedItems();\n      return this._controller.getItemContent(itemInfos);\n    }\n  }, {\n    key: \"_completeAction\",\n    value: function _completeAction(operationInfo, context) {\n      this._notificationControl.completeOperation(operationInfo, context.completionMessage, !context.success, context.statusText);\n\n      if (context.hasModifiedItems()) {\n        this._raiseOnSuccess(context.onlyFiles);\n      }\n    }\n  }, {\n    key: \"_handleActionError\",\n    value: function _handleActionError(operationInfo, context, errorInfo) {\n      operationInfo.hasError = true;\n\n      if (context.singleRequest) {\n        this._handleSingleRequestActionError(operationInfo, context, errorInfo);\n      } else {\n        this._handleMultipleRequestActionError(operationInfo, context, errorInfo);\n      }\n    }\n  }, {\n    key: \"_handleSingleRequestActionError\",\n    value: function _handleSingleRequestActionError(operationInfo, context, errorInfo) {\n      var itemInfo = context.getItemForSingleRequestError();\n      var itemName = context.itemNewName;\n\n      var errorText = this._getErrorText(errorInfo, itemInfo, itemName);\n\n      context.processSingleRequestError(errorText);\n\n      var operationErrorInfo = this._getOperationErrorInfo(context);\n\n      this._notificationControl.completeSingleOperationWithError(operationInfo, operationErrorInfo);\n\n      if (context.multipleItems) {\n        this._raiseOnSuccess(context.onlyFiles);\n      }\n    }\n  }, {\n    key: \"_handleMultipleRequestActionError\",\n    value: function _handleMultipleRequestActionError(operationInfo, context, errorInfo) {\n      var itemInfo = context.getItemForMultipleRequestError(errorInfo.index);\n\n      var errorText = this._getErrorText(errorInfo, itemInfo);\n\n      context.processMultipleRequestError(errorInfo.index, errorText);\n\n      var operationErrorInfo = this._getOperationErrorInfo(context);\n\n      this._notificationControl.addOperationDetailsError(operationInfo, operationErrorInfo);\n    }\n  }, {\n    key: \"_getOperationErrorInfo\",\n    value: function _getOperationErrorInfo(context) {\n      var detailError = context.errorState.currentDetailError;\n      return {\n        commonErrorText: context.errorState.commonErrorText,\n        item: detailError.itemInfo ? this._getItemProgressDisplayInfo(detailError.itemInfo) : null,\n        itemIndex: detailError.itemIndex,\n        detailErrorText: detailError.errorText\n      };\n    }\n  }, {\n    key: \"_getErrorText\",\n    value: function _getErrorText(errorInfo, itemInfo, itemName) {\n      itemName = itemName || (null === itemInfo || void 0 === itemInfo ? void 0 : itemInfo.fileItem.name);\n      var errorText = errorInfo.errorText || FileManagerMessages.get(errorInfo.errorCode, itemName);\n      var errorArgs = {\n        fileSystemItem: null === itemInfo || void 0 === itemInfo ? void 0 : itemInfo.fileItem,\n        errorCode: errorInfo.errorCode,\n        errorText: errorText\n      };\n\n      this._raiseOnError(errorArgs);\n\n      return errorArgs.errorText;\n    }\n  }, {\n    key: \"_getItemProgressDisplayInfo\",\n    value: function _getItemProgressDisplayInfo(itemInfo) {\n      return {\n        commonText: itemInfo.fileItem.name,\n        imageUrl: this._getItemThumbnail(itemInfo)\n      };\n    }\n  }, {\n    key: \"_showDialog\",\n    value: function _showDialog(dialog, dialogArgument) {\n      this._dialogDeferred = new Deferred();\n      dialog.show(dialogArgument);\n      return this._dialogDeferred.promise();\n    }\n  }, {\n    key: \"_onDialogClosed\",\n    value: function _onDialogClosed(e) {\n      var result = e.dialogResult;\n\n      if (result) {\n        this._dialogDeferred.resolve(result);\n      } else {\n        this._dialogDeferred.reject();\n      }\n    }\n  }, {\n    key: \"updateDialogRtl\",\n    value: function updateDialogRtl(value) {\n      this._dialogManager.updateDialogRtl(value);\n    }\n  }, {\n    key: \"_getItemThumbnail\",\n    value: function _getItemThumbnail(item) {\n      var itemThumbnailGetter = this.option(\"getItemThumbnail\");\n\n      if (!itemThumbnailGetter) {\n        return null;\n      }\n\n      var info = itemThumbnailGetter(item);\n      return info ? info.thumbnail : null;\n    }\n  }, {\n    key: \"_initActions\",\n    value: function _initActions() {\n      this._actions = {\n        onSuccess: this._createActionByOption(\"onSuccess\"),\n        onError: this._createActionByOption(\"onError\")\n      };\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function _getDefaultOptions() {\n      return extend(_get(_getPrototypeOf(FileManagerEditingControl.prototype), \"_getDefaultOptions\", this).call(this), {\n        model: {\n          getMultipleSelectedItems: null\n        },\n        notificationControl: null,\n        getItemThumbnail: null,\n        onSuccess: null,\n        onError: null\n      });\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function _optionChanged(args) {\n      var name = args.name;\n\n      switch (name) {\n        case \"model\":\n          this.repaint();\n          break;\n\n        case \"notificationControl\":\n          this._initNotificationControl(args.value);\n\n          break;\n\n        case \"getItemThumbnail\":\n          break;\n\n        case \"uploadDropZonePlaceholderContainer\":\n          this._fileUploader.option(\"dropZonePlaceholderContainer\", args.value);\n\n          break;\n\n        case \"onSuccess\":\n        case \"onError\":\n          this._actions[name] = this._createActionByOption(name);\n          break;\n\n        default:\n          _get(_getPrototypeOf(FileManagerEditingControl.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }, {\n    key: \"_raiseOnSuccess\",\n    value: function _raiseOnSuccess(updatedOnlyFiles) {\n      this._actions.onSuccess({\n        updatedOnlyFiles: updatedOnlyFiles\n      });\n    }\n  }, {\n    key: \"_raiseOnError\",\n    value: function _raiseOnError(args) {\n      this._actions.onError(args);\n    }\n  }, {\n    key: \"_getCurrentDirectory\",\n    value: function _getCurrentDirectory() {\n      return this._controller.getCurrentDirectory();\n    }\n  }, {\n    key: \"uploadDirectoryInfo\",\n    get: function get() {\n      return this._uploadDirectoryInfo || this._getCurrentDirectory();\n    }\n  }]);\n\n  return FileManagerEditingControl;\n}(Widget);\n\nvar FileManagerActionContext = /*#__PURE__*/function () {\n  function FileManagerActionContext(actionMetadata, itemInfos, directoryInfo) {\n    _classCallCheck(this, FileManagerActionContext);\n\n    this._actionMetadata = actionMetadata;\n    this._itemInfos = itemInfos;\n    this._onlyFiles = !this._actionMetadata.affectsAllItems && this._itemInfos.every(function (info) {\n      return !info.fileItem.isDirectory;\n    });\n    this._items = this._itemInfos.map(function (itemInfo) {\n      return itemInfo.fileItem;\n    });\n    this._multipleItems = this._items.length > 1;\n    this._location = directoryInfo.getDisplayName();\n    this._singleRequest = true;\n    this._completedItems = [];\n    this._commonProgress = 0;\n    this._errorState = {\n      failedCount: 0\n    };\n    this._itemNewName = \"\";\n  }\n\n  _createClass(FileManagerActionContext, [{\n    key: \"completeOperationItem\",\n    value: function completeOperationItem(itemIndex) {\n      if (this._singleRequest) {\n        this._completedItems = _toConsumableArray(this._items);\n      } else {\n        var item = this._items[itemIndex];\n\n        this._completedItems.push(item);\n      }\n\n      if (!this._actionMetadata.allowItemProgress) {\n        this._commonProgress = this._completedItems.length / this._items.length * 100;\n      }\n    }\n  }, {\n    key: \"processSingleRequestError\",\n    value: function processSingleRequestError(errorText) {\n      this._errorState.failedCount = 1;\n      this._errorState.commonErrorText = this._multipleItems ? this._actionMetadata.commonErrorMessage : this._actionMetadata.singleItemErrorMessage;\n      var itemIndex = this._multipleItems ? -1 : 1;\n      var itemInfo = this.getItemForSingleRequestError();\n\n      this._setCurrentDetailError(itemIndex, itemInfo, errorText);\n    }\n  }, {\n    key: \"processMultipleRequestError\",\n    value: function processMultipleRequestError(itemIndex, errorText) {\n      this._errorState.failedCount++;\n      this._errorState.commonErrorText = this._errorState.failedCount > 1 ? format(this._actionMetadata.multipleItemsErrorMessage, this._errorState.failedCount) : this._actionMetadata.singleItemErrorMessage;\n      var itemInfo = this.getItemForMultipleRequestError(itemIndex);\n\n      this._setCurrentDetailError(itemIndex, itemInfo, errorText);\n    }\n  }, {\n    key: \"hasModifiedItems\",\n    value: function hasModifiedItems() {\n      return this._hasCompletedItems() || this._singleRequest && !this.success && this._multipleItems;\n    }\n  }, {\n    key: \"getItemForSingleRequestError\",\n    value: function getItemForSingleRequestError() {\n      return this._multipleItems ? null : this._itemInfos[0];\n    }\n  }, {\n    key: \"getItemForMultipleRequestError\",\n    value: function getItemForMultipleRequestError(itemIndex) {\n      return this._itemInfos[itemIndex];\n    }\n  }, {\n    key: \"_setCurrentDetailError\",\n    value: function _setCurrentDetailError(itemIndex, itemInfo, errorText) {\n      this._errorState.currentDetailError = {\n        itemIndex: itemIndex,\n        itemInfo: itemInfo,\n        errorText: errorText\n      };\n    }\n  }, {\n    key: \"_hasCompletedItems\",\n    value: function _hasCompletedItems() {\n      return this._completedItems.length > 0;\n    }\n  }, {\n    key: \"actionMetadata\",\n    get: function get() {\n      return this._actionMetadata;\n    }\n  }, {\n    key: \"itemInfos\",\n    get: function get() {\n      return this._itemInfos;\n    }\n  }, {\n    key: \"itemNewName\",\n    get: function get() {\n      return this._itemNewName;\n    },\n    set: function set(value) {\n      this._itemNewName = value;\n    }\n  }, {\n    key: \"errorState\",\n    get: function get() {\n      return this._errorState;\n    }\n  }, {\n    key: \"singleRequest\",\n    get: function get() {\n      return this._singleRequest;\n    },\n    set: function set(value) {\n      this._singleRequest = value;\n    }\n  }, {\n    key: \"multipleItems\",\n    get: function get() {\n      return this._multipleItems;\n    }\n  }, {\n    key: \"onlyFiles\",\n    get: function get() {\n      return this._onlyFiles;\n    }\n  }, {\n    key: \"processingMessage\",\n    get: function get() {\n      return this._multipleItems ? format(this._actionMetadata.multipleItemsProcessingMessage, this._items.length, this._location) : format(this._actionMetadata.singleItemProcessingMessage, this._location);\n    }\n  }, {\n    key: \"successMessage\",\n    get: function get() {\n      if (this._hasCompletedItems()) {\n        return this._multipleItems ? format(this._actionMetadata.multipleItemsSuccessMessage, this._completedItems.length, this._location) : format(this._actionMetadata.singleItemSuccessMessage, this._location);\n      } else {\n        return this._multipleItems ? format(this._actionMetadata.multipleItemsErrorMessage, this._items.length) : this._actionMetadata.singleItemErrorMessage;\n      }\n    }\n  }, {\n    key: \"completionMessage\",\n    get: function get() {\n      return this.success ? this.successMessage : this.errorState.commonErrorText;\n    }\n  }, {\n    key: \"statusText\",\n    get: function get() {\n      return this.success && !this._hasCompletedItems() ? this._actionMetadata.canceledMessage : void 0;\n    }\n  }, {\n    key: \"commonProgress\",\n    get: function get() {\n      return this._commonProgress;\n    }\n  }, {\n    key: \"success\",\n    get: function get() {\n      return !this._errorState.failedCount;\n    }\n  }]);\n\n  return FileManagerActionContext;\n}();\n\nexport default FileManagerEditingControl;","map":null,"metadata":{},"sourceType":"module"}