{"ast":null,"code":"import _toConsumableArray from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n\n/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.validating.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getOuterWidth, getWidth, getOuterHeight, setHeight } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport modules from \"./ui.grid_core.modules\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nimport { createObjectWithChanges } from \"../../data/array_utils\";\nimport { deferUpdate, equalByValue, getKeyHash } from \"../../core/utils/common\";\nimport { each } from \"../../core/utils/iterator\";\nimport { isDefined, isEmptyObject, isObject } from \"../../core/utils/type\";\nimport { extend } from \"../../core/utils/extend\";\nimport { focused } from \"../widget/selectors\";\nimport messageLocalization from \"../../localization/message\";\nimport Button from \"../button\";\nimport pointerEvents from \"../../events/pointer\";\nimport ValidationEngine from \"../validation_engine\";\nimport Validator from \"../validator\";\nimport Overlay from \"../overlay/ui.overlay\";\nimport errors from \"../widget/ui.errors\";\nimport { Deferred, when, fromPromise } from \"../../core/utils/deferred\";\nimport LoadIndicator from \"../load_indicator\";\nimport { encodeHtml } from \"../../core/utils/string\";\nimport browser from \"../../core/utils/browser\";\nvar INVALIDATE_CLASS = \"invalid\";\nvar REVERT_TOOLTIP_CLASS = \"revert-tooltip\";\nvar ROWS_VIEW_CLASS = \"rowsview\";\nvar INVALID_MESSAGE_CLASS = \"dx-invalid-message\";\nvar WIDGET_INVALID_MESSAGE_CLASS = \"invalid-message\";\nvar INVALID_MESSAGE_ALWAYS_CLASS = \"dx-invalid-message-always\";\nvar REVERT_BUTTON_CLASS = \"dx-revert-button\";\nvar VALIDATOR_CLASS = \"validator\";\nvar PENDING_INDICATOR_CLASS = \"dx-pending-indicator\";\nvar VALIDATION_PENDING_CLASS = \"dx-validation-pending\";\nvar CONTENT_CLASS = \"content\";\nvar INSERT_INDEX = \"__DX_INSERT_INDEX__\";\nvar PADDING_BETWEEN_TOOLTIPS = 2;\nvar EDIT_MODE_ROW = \"row\";\nvar EDIT_MODE_FORM = \"form\";\nvar EDIT_MODE_BATCH = \"batch\";\nvar EDIT_MODE_CELL = \"cell\";\nvar EDIT_MODE_POPUP = \"popup\";\nvar GROUP_CELL_CLASS = \"dx-group-cell\";\nvar FORM_BASED_MODES = [EDIT_MODE_POPUP, EDIT_MODE_FORM];\nvar COMMAND_TRANSPARENT = \"transparent\";\nvar VALIDATION_STATUS = {\n  valid: \"valid\",\n  invalid: \"invalid\",\n  pending: \"pending\"\n};\nvar EDIT_DATA_INSERT_TYPE = \"insert\";\nvar EDIT_DATA_REMOVE_TYPE = \"remove\";\nvar VALIDATION_CANCELLED = \"cancel\";\n\nvar validationResultIsValid = function validationResultIsValid(result) {\n  return isDefined(result) && result !== VALIDATION_CANCELLED;\n};\n\nvar cellValueShouldBeValidated = function cellValueShouldBeValidated(value, rowOptions) {\n  return void 0 !== value || void 0 === value && rowOptions && !rowOptions.isNewRow;\n};\n\nvar ValidatingController = modules.Controller.inherit({\n  init: function init() {\n    this._editingController = this.getController(\"editing\");\n    this.createAction(\"onRowValidating\");\n\n    if (!this._validationState) {\n      this.initValidationState();\n    }\n  },\n  initValidationState: function initValidationState() {\n    this._validationState = [];\n    this._validationStateCache = {};\n  },\n  _rowIsValidated: function _rowIsValidated(change) {\n    var validationData = this._getValidationData(null === change || void 0 === change ? void 0 : change.key);\n\n    return !!validationData && !!validationData.validated;\n  },\n  _getValidationData: function _getValidationData(key, create) {\n    var keyHash = getKeyHash(key);\n    var isObjectKeyHash = isObject(keyHash);\n    var validationData;\n\n    if (isObjectKeyHash) {\n      validationData = this._validationState.filter(function (data) {\n        return equalByValue(data.key, key);\n      })[0];\n    } else {\n      validationData = this._validationStateCache[keyHash];\n    }\n\n    if (!validationData && create) {\n      validationData = {\n        key: key,\n        isValid: true\n      };\n\n      this._validationState.push(validationData);\n\n      if (!isObjectKeyHash) {\n        this._validationStateCache[keyHash] = validationData;\n      }\n    }\n\n    return validationData;\n  },\n  _getBrokenRules: function _getBrokenRules(validationData, validationResults) {\n    var brokenRules;\n\n    if (validationResults) {\n      brokenRules = validationResults.brokenRules || validationResults.brokenRule && [validationResults.brokenRule];\n    } else {\n      brokenRules = validationData.brokenRules || [];\n    }\n\n    return brokenRules;\n  },\n  _rowValidating: function _rowValidating(validationData, validationResults) {\n    var deferred = new Deferred();\n\n    var change = this._editingController.getChangeByKey(null === validationData || void 0 === validationData ? void 0 : validationData.key);\n\n    var brokenRules = this._getBrokenRules(validationData, validationResults);\n\n    var isValid = validationResults ? validationResults.isValid : validationData.isValid;\n    var parameters = {\n      brokenRules: brokenRules,\n      isValid: isValid,\n      key: change.key,\n      newData: change.data,\n      oldData: this._editingController._getOldData(change.key),\n      promise: null,\n      errorText: this.getHiddenValidatorsErrorText(brokenRules)\n    };\n    this.executeAction(\"onRowValidating\", parameters);\n    when(fromPromise(parameters.promise)).always(function () {\n      validationData.isValid = parameters.isValid;\n      validationData.errorText = parameters.errorText;\n      deferred.resolve(parameters);\n    });\n    return deferred.promise();\n  },\n  getHiddenValidatorsErrorText: function getHiddenValidatorsErrorText(brokenRules) {\n    var brokenRulesMessages = [];\n    each(brokenRules, function (_, brokenRule) {\n      var column = brokenRule.column;\n      var isGroupExpandColumn = column && void 0 !== column.groupIndex && !column.showWhenGrouped;\n      var isVisibleColumn = column && column.visible;\n\n      if (!brokenRule.validator.$element().parent().length && (!isVisibleColumn || isGroupExpandColumn)) {\n        brokenRulesMessages.push(brokenRule.message);\n      }\n    });\n    return brokenRulesMessages.join(\", \");\n  },\n  validate: function validate(isFull) {\n    var _this = this;\n\n    var isValid = true;\n    var editingController = this._editingController;\n    var deferred = new Deferred();\n    var completeList = [];\n    var editMode = editingController.getEditMode();\n    isFull = isFull || editMode === EDIT_MODE_ROW;\n\n    if (this._isValidationInProgress) {\n      return deferred.resolve(false).promise();\n    }\n\n    this._isValidationInProgress = true;\n\n    if (isFull) {\n      editingController.addDeferred(deferred);\n      var changes = editingController.getChanges();\n      each(changes, function (index, _ref) {\n        var type = _ref.type,\n            key = _ref.key;\n\n        if (\"remove\" !== type) {\n          var validationData = _this._getValidationData(key, true);\n\n          var validationResult = _this.validateGroup(validationData);\n\n          completeList.push(validationResult);\n          validationResult.done(function (validationResult) {\n            validationData.validated = true;\n            isValid = isValid && validationResult.isValid;\n          });\n        }\n      });\n    } else if (this._currentCellValidator) {\n      var validationResult = this.validateGroup(this._currentCellValidator._findGroup());\n      completeList.push(validationResult);\n      validationResult.done(function (validationResult) {\n        isValid = validationResult.isValid;\n      });\n    }\n\n    when.apply(void 0, completeList).done(function () {\n      _this._isValidationInProgress = false;\n      deferred.resolve(isValid);\n    });\n    return deferred.promise();\n  },\n  validateGroup: function validateGroup(validationData) {\n    var _this2 = this;\n\n    var _validationResult;\n\n    var result = new Deferred();\n    var validateGroup = validationData && ValidationEngine.getGroupConfig(validationData);\n    var validationResult;\n\n    if (null !== validateGroup && void 0 !== validateGroup && validateGroup.validators.length) {\n      this.resetRowValidationResults(validationData);\n      validationResult = ValidationEngine.validateGroup(validationData);\n    }\n\n    when((null === (_validationResult = validationResult) || void 0 === _validationResult ? void 0 : _validationResult.complete) || validationResult).done(function (validationResult) {\n      when(_this2._rowValidating(validationData, validationResult)).done(result.resolve);\n    });\n    return result.promise();\n  },\n  isRowDataModified: function isRowDataModified(change) {\n    return !isEmptyObject(change.data);\n  },\n  updateValidationState: function updateValidationState(change) {\n    var editMode = this._editingController.getEditMode();\n\n    var key = change.key;\n\n    var validationData = this._getValidationData(key, true);\n\n    if (-1 === FORM_BASED_MODES.indexOf(editMode)) {\n      if (change.type === EDIT_DATA_INSERT_TYPE && !this.isRowDataModified(change)) {\n        validationData.isValid = true;\n        return;\n      }\n\n      this.setDisableApplyValidationResults(true);\n      var groupConfig = ValidationEngine.getGroupConfig(validationData);\n\n      if (groupConfig) {\n        var validationResult = ValidationEngine.validateGroup(validationData);\n        when(validationResult.complete || validationResult).done(function (validationResult) {\n          validationData.isValid = validationResult.isValid;\n          validationData.brokenRules = validationResult.brokenRules;\n        });\n      } else if (!validationData.brokenRules || !validationData.brokenRules.length) {\n        validationData.isValid = true;\n      }\n\n      this.setDisableApplyValidationResults(false);\n    } else {\n      validationData.isValid = true;\n    }\n  },\n  setValidator: function setValidator(validator) {\n    this._currentCellValidator = validator;\n  },\n  renderCellPendingIndicator: function renderCellPendingIndicator($container) {\n    var $indicator = $container.find(\".\" + PENDING_INDICATOR_CLASS);\n\n    if (!$indicator.length) {\n      var $indicatorContainer = $container;\n      $indicator = $(\"<div>\").appendTo($indicatorContainer).addClass(PENDING_INDICATOR_CLASS);\n\n      this._createComponent($indicator, LoadIndicator);\n\n      $container.addClass(VALIDATION_PENDING_CLASS);\n    }\n  },\n  disposeCellPendingIndicator: function disposeCellPendingIndicator($container) {\n    var $indicator = $container.find(\".\" + PENDING_INDICATOR_CLASS);\n\n    if ($indicator.length) {\n      var indicator = LoadIndicator.getInstance($indicator);\n\n      if (indicator) {\n        indicator.dispose();\n        indicator.$element().remove();\n      }\n\n      $container.removeClass(VALIDATION_PENDING_CLASS);\n    }\n  },\n  validationStatusChanged: function validationStatusChanged(result) {\n    var validator = result.validator;\n    var validationGroup = validator.option(\"validationGroup\");\n    var column = validator.option(\"dataGetter\")().column;\n    this.updateCellValidationResult({\n      rowKey: validationGroup.key,\n      columnIndex: column.index,\n      validationResult: result\n    });\n  },\n  validatorInitialized: function validatorInitialized(arg) {\n    arg.component.on(\"validating\", this.validationStatusChanged.bind(this));\n    arg.component.on(\"validated\", this.validationStatusChanged.bind(this));\n  },\n  validatorDisposing: function validatorDisposing(arg) {\n    var validator = arg.component;\n    var validationGroup = validator.option(\"validationGroup\");\n    var column = validator.option(\"dataGetter\")().column;\n    var result = this.getCellValidationResult({\n      rowKey: null === validationGroup || void 0 === validationGroup ? void 0 : validationGroup.key,\n      columnIndex: column.index\n    });\n\n    if (validationResultIsValid(result) && result.status === VALIDATION_STATUS.pending) {\n      this.cancelCellValidationResult({\n        change: validationGroup,\n        columnIndex: column.index\n      });\n    }\n  },\n  applyValidationResult: function applyValidationResult($container, result) {\n    var validator = result.validator;\n    var validationGroup = validator.option(\"validationGroup\");\n    var column = validator.option(\"dataGetter\")().column;\n    result.brokenRules && result.brokenRules.forEach(function (rule) {\n      rule.columnIndex = column.index;\n      rule.column = column;\n    });\n\n    if ($container) {\n      var validationResult = this.getCellValidationResult({\n        rowKey: validationGroup.key,\n        columnIndex: column.index\n      });\n      var requestIsDisabled = validationResultIsValid(validationResult) && validationResult.disabledPendingId === result.id;\n\n      if (this._disableApplyValidationResults || requestIsDisabled) {\n        return;\n      }\n\n      if (result.status === VALIDATION_STATUS.invalid) {\n        var $focus = $container.find(\":focus\");\n\n        if (!focused($focus)) {\n          eventsEngine.trigger($focus, \"focus\");\n          eventsEngine.trigger($focus, pointerEvents.down);\n        }\n      }\n\n      var editor = !column.editCellTemplate && this.getController(\"editorFactory\").getEditorInstance($container);\n\n      if (result.status === VALIDATION_STATUS.pending) {\n        if (editor) {\n          editor.option(\"validationStatus\", VALIDATION_STATUS.pending);\n        } else {\n          this.renderCellPendingIndicator($container);\n        }\n      } else if (editor) {\n        editor.option(\"validationStatus\", VALIDATION_STATUS.valid);\n      } else {\n        this.disposeCellPendingIndicator($container);\n      }\n\n      $container.toggleClass(this.addWidgetPrefix(INVALIDATE_CLASS), result.status === VALIDATION_STATUS.invalid);\n    }\n  },\n  _syncInternalEditingData: function _syncInternalEditingData(parameters) {\n    var _parameters$row;\n\n    var editingController = this._editingController;\n    var change = editingController.getChangeByKey(parameters.key);\n\n    var oldDataFromState = editingController._getOldData(parameters.key);\n\n    var oldData = null === (_parameters$row = parameters.row) || void 0 === _parameters$row ? void 0 : _parameters$row.oldData;\n\n    if (change && oldData && !oldDataFromState) {\n      editingController._addInternalData({\n        key: parameters.key,\n        oldData: oldData\n      });\n    }\n  },\n  createValidator: function createValidator(parameters, $container) {\n    var _this3 = this;\n\n    var editingController = this._editingController;\n    var column = parameters.column;\n    var showEditorAlways = column.showEditorAlways;\n\n    if (isDefined(column.command) || !column.validationRules || !Array.isArray(column.validationRules) || !column.validationRules.length) {\n      return;\n    }\n\n    var editIndex = editingController.getIndexByKey(parameters.key, editingController.getChanges());\n    var needCreateValidator = editIndex > -1;\n\n    if (!needCreateValidator) {\n      if (!showEditorAlways) {\n        var columnsController = this.getController(\"columns\");\n        var visibleColumns = (null === columnsController || void 0 === columnsController ? void 0 : columnsController.getVisibleColumns()) || [];\n        showEditorAlways = visibleColumns.some(function (column) {\n          return column.showEditorAlways;\n        });\n      }\n\n      var isEditRow = equalByValue(this.option(\"editing.editRowKey\"), parameters.key);\n      var isCellOrBatchEditingAllowed = editingController.isCellOrBatchEditMode() && editingController.allowUpdating({\n        row: parameters.row\n      });\n      needCreateValidator = isEditRow || isCellOrBatchEditingAllowed && showEditorAlways;\n\n      if (isCellOrBatchEditingAllowed && showEditorAlways) {\n        var _parameters$row$oldDa, _parameters$row2;\n\n        editingController._addInternalData({\n          key: parameters.key,\n          oldData: null !== (_parameters$row$oldDa = null === (_parameters$row2 = parameters.row) || void 0 === _parameters$row2 ? void 0 : _parameters$row2.oldData) && void 0 !== _parameters$row$oldDa ? _parameters$row$oldDa : parameters.data\n        });\n      }\n    }\n\n    if (needCreateValidator) {\n      if ($container && !$container.length) {\n        errors.log(\"E1050\");\n        return;\n      }\n\n      this._syncInternalEditingData(parameters);\n\n      var validationData = this._getValidationData(parameters.key, true);\n\n      var getValue = function getValue() {\n        var change = editingController.getChangeByKey(null === validationData || void 0 === validationData ? void 0 : validationData.key);\n        var value = column.calculateCellValue((null === change || void 0 === change ? void 0 : change.data) || {});\n        return void 0 !== value ? value : parameters.value;\n      };\n\n      var useDefaultValidator = $container && $container.hasClass(\"dx-widget\");\n      $container && $container.addClass(this.addWidgetPrefix(VALIDATOR_CLASS));\n      var validator = new Validator($container || $(\"<div>\"), {\n        name: column.caption,\n        validationRules: extend(true, [], column.validationRules),\n        validationGroup: validationData,\n        adapter: useDefaultValidator ? null : {\n          getValue: getValue,\n          applyValidationResults: function applyValidationResults(result) {\n            _this3.applyValidationResult($container, result);\n          }\n        },\n        dataGetter: function dataGetter() {\n          var key = null === validationData || void 0 === validationData ? void 0 : validationData.key;\n          var change = editingController.getChangeByKey(key);\n\n          var oldData = editingController._getOldData(key);\n\n          return {\n            data: createObjectWithChanges(oldData, null === change || void 0 === change ? void 0 : change.data),\n            column: column\n          };\n        },\n        onInitialized: this.validatorInitialized.bind(this),\n        onDisposing: this.validatorDisposing.bind(this)\n      });\n\n      if (useDefaultValidator) {\n        var adapter = validator.option(\"adapter\");\n\n        if (adapter) {\n          adapter.getValue = getValue;\n          adapter.validationRequestsCallbacks = [];\n        }\n      }\n\n      return validator;\n    }\n  },\n  setDisableApplyValidationResults: function setDisableApplyValidationResults(flag) {\n    this._disableApplyValidationResults = flag;\n  },\n  getDisableApplyValidationResults: function getDisableApplyValidationResults() {\n    return this._disableApplyValidationResults;\n  },\n  isCurrentValidatorProcessing: function isCurrentValidatorProcessing(_ref2) {\n    var rowKey = _ref2.rowKey,\n        columnIndex = _ref2.columnIndex;\n    return this._currentCellValidator && equalByValue(this._currentCellValidator.option(\"validationGroup\").key, rowKey) && this._currentCellValidator.option(\"dataGetter\")().column.index === columnIndex;\n  },\n  validateCell: function validateCell(validator) {\n    var cellParams = {\n      rowKey: validator.option(\"validationGroup\").key,\n      columnIndex: validator.option(\"dataGetter\")().column.index\n    };\n    var validationResult = this.getCellValidationResult(cellParams);\n    var stateRestored = validationResultIsValid(validationResult);\n\n    if (!stateRestored) {\n      validationResult = validator.validate();\n    }\n\n    var deferred = new Deferred();\n    var adapter = validator.option(\"adapter\");\n\n    if (stateRestored && validationResult.status === VALIDATION_STATUS.pending) {\n      this.updateCellValidationResult(cellParams);\n      adapter.applyValidationResults(validationResult);\n    }\n\n    when(validationResult.complete || validationResult).done(function (validationResult) {\n      stateRestored && adapter.applyValidationResults(validationResult);\n      deferred.resolve(validationResult);\n    });\n    return deferred.promise();\n  },\n  updateCellValidationResult: function updateCellValidationResult(_ref3) {\n    var rowKey = _ref3.rowKey,\n        columnIndex = _ref3.columnIndex,\n        validationResult = _ref3.validationResult;\n\n    var validationData = this._getValidationData(rowKey);\n\n    if (!validationData) {\n      return;\n    }\n\n    if (!validationData.validationResults) {\n      validationData.validationResults = {};\n    }\n\n    var result;\n\n    if (validationResult) {\n      result = extend({}, validationResult);\n      validationData.validationResults[columnIndex] = result;\n\n      if (validationResult.status === VALIDATION_STATUS.pending) {\n        if (this._editingController.getEditMode() === EDIT_MODE_CELL) {\n          result.deferred = new Deferred();\n          result.complete.always(function () {\n            result.deferred.resolve();\n          });\n\n          this._editingController.addDeferred(result.deferred);\n        }\n\n        if (this._disableApplyValidationResults) {\n          result.disabledPendingId = validationResult.id;\n          return;\n        }\n      }\n    } else {\n      result = validationData.validationResults[columnIndex];\n    }\n\n    if (result && result.disabledPendingId) {\n      delete result.disabledPendingId;\n    }\n  },\n  getCellValidationResult: function getCellValidationResult(_ref4) {\n    var _validationData$valid;\n\n    var rowKey = _ref4.rowKey,\n        columnIndex = _ref4.columnIndex;\n\n    var validationData = this._getValidationData(rowKey, true);\n\n    return null === validationData || void 0 === validationData ? void 0 : null === (_validationData$valid = validationData.validationResults) || void 0 === _validationData$valid ? void 0 : _validationData$valid[columnIndex];\n  },\n  removeCellValidationResult: function removeCellValidationResult(_ref5) {\n    var change = _ref5.change,\n        columnIndex = _ref5.columnIndex;\n\n    var validationData = this._getValidationData(null === change || void 0 === change ? void 0 : change.key);\n\n    if (validationData && validationData.validationResults) {\n      this.cancelCellValidationResult({\n        change: change,\n        columnIndex: columnIndex\n      });\n      delete validationData.validationResults[columnIndex];\n    }\n  },\n  cancelCellValidationResult: function cancelCellValidationResult(_ref6) {\n    var change = _ref6.change,\n        columnIndex = _ref6.columnIndex;\n\n    var validationData = this._getValidationData(change.key);\n\n    if (change && validationData.validationResults) {\n      var result = validationData.validationResults[columnIndex];\n\n      if (result) {\n        result.deferred && result.deferred.reject(VALIDATION_CANCELLED);\n        validationData.validationResults[columnIndex] = VALIDATION_CANCELLED;\n      }\n    }\n  },\n  resetRowValidationResults: function resetRowValidationResults(validationData) {\n    if (validationData) {\n      validationData.validationResults && delete validationData.validationResults;\n      delete validationData.validated;\n    }\n  },\n  isInvalidCell: function isInvalidCell(_ref7) {\n    var rowKey = _ref7.rowKey,\n        columnIndex = _ref7.columnIndex;\n    var result = this.getCellValidationResult({\n      rowKey: rowKey,\n      columnIndex: columnIndex\n    });\n    return validationResultIsValid(result) && result.status === VALIDATION_STATUS.invalid;\n  },\n  getCellValidator: function getCellValidator(_ref8) {\n    var rowKey = _ref8.rowKey,\n        columnIndex = _ref8.columnIndex;\n\n    var validationData = this._getValidationData(rowKey);\n\n    var groupConfig = validationData && ValidationEngine.getGroupConfig(validationData);\n    var validators = groupConfig && groupConfig.validators;\n    return validators && validators.filter(function (v) {\n      var column = v.option(\"dataGetter\")().column;\n      return column ? column.index === columnIndex : false;\n    })[0];\n  },\n  setCellValidationStatus: function setCellValidationStatus(cellOptions) {\n    var validationResult = this.getCellValidationResult({\n      rowKey: cellOptions.key,\n      columnIndex: cellOptions.column.index\n    });\n\n    if (isDefined(validationResult)) {\n      cellOptions.validationStatus = validationResult !== VALIDATION_CANCELLED ? validationResult.status : VALIDATION_CANCELLED;\n    } else {\n      delete cellOptions.validationStatus;\n    }\n  }\n});\nexport var validatingModule = {\n  defaultOptions: function defaultOptions() {\n    return {\n      editing: {\n        texts: {\n          validationCancelChanges: messageLocalization.format(\"dxDataGrid-validationCancelChanges\")\n        }\n      }\n    };\n  },\n  controllers: {\n    validating: ValidatingController\n  },\n  extenders: {\n    controllers: {\n      editing: {\n        _addChange: function _addChange(changeParams) {\n          var change = this.callBase.apply(this, arguments);\n          var validatingController = this.getController(\"validating\");\n\n          if (change && changeParams.type !== EDIT_DATA_REMOVE_TYPE) {\n            validatingController.updateValidationState(change);\n          }\n\n          return change;\n        },\n        _handleChangesChange: function _handleChangesChange(args) {\n          this.callBase.apply(this, arguments);\n          var validatingController = this.getController(\"validating\");\n          args.value.forEach(function (change) {\n            if (void 0 === validatingController._getValidationData(change.key)) {\n              validatingController.updateValidationState(change);\n            }\n          });\n        },\n        _updateRowAndPageIndices: function _updateRowAndPageIndices() {\n          var _this4 = this;\n\n          var that = this;\n          var startInsertIndex = that.getView(\"rowsView\").getTopVisibleItemIndex();\n          var rowIndex = startInsertIndex;\n          each(that.getChanges(), function (_, _ref9) {\n            var key = _ref9.key,\n                type = _ref9.type;\n\n            var validationData = _this4.getController(\"validating\")._getValidationData(key);\n\n            if (validationData && !validationData.isValid && validationData.pageIndex !== that._pageIndex) {\n              validationData.pageIndex = that._pageIndex;\n\n              if (type === EDIT_DATA_INSERT_TYPE) {\n                validationData.rowIndex = startInsertIndex;\n              } else {\n                validationData.rowIndex = rowIndex;\n              }\n\n              rowIndex++;\n            }\n          });\n        },\n        _getValidationGroupsInForm: function _getValidationGroupsInForm(detailOptions) {\n          var validatingController = this.getController(\"validating\");\n\n          var validationData = validatingController._getValidationData(detailOptions.key, true);\n\n          return {\n            validationGroup: validationData\n          };\n        },\n        _validateEditFormAfterUpdate: function _validateEditFormAfterUpdate(row, isCustomSetCellValue) {\n          if (isCustomSetCellValue && this._editForm && !row.isNewRow) {\n            this._editForm.validate();\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        _prepareEditCell: function _prepareEditCell(params) {\n          var isNotCanceled = this.callBase.apply(this, arguments);\n          var validatingController = this.getController(\"validating\");\n\n          if (isNotCanceled && params.column.showEditorAlways) {\n            validatingController.updateValidationState({\n              key: params.key\n            });\n          }\n\n          return isNotCanceled;\n        },\n        processItems: function processItems(items, changeType) {\n          var _this5 = this;\n\n          var changes = this.getChanges();\n          var dataController = this.getController(\"data\");\n          var validatingController = this.getController(\"validating\");\n          items = this.callBase(items, changeType);\n          var itemsCount = items.length;\n\n          var addInValidItem = function addInValidItem(change, validationData) {\n            var data = {\n              key: change.key\n            };\n\n            var index = function (change, items) {\n              var index = -1;\n              var isInsert = change.type === EDIT_DATA_INSERT_TYPE;\n              var key = change.key;\n              each(items, function (i, item) {\n                if (equalByValue(key, isInsert ? item.key : dataController.keyOf(item))) {\n                  index = i;\n                  return false;\n                }\n              });\n              return index;\n            }(change, items);\n\n            if (index >= 0) {\n              return;\n            }\n\n            validationData.rowIndex = validationData.rowIndex > itemsCount ? validationData.rowIndex % itemsCount : validationData.rowIndex;\n            var rowIndex = validationData.rowIndex;\n            data[INSERT_INDEX] = 1;\n            items.splice(rowIndex, 0, data);\n          };\n\n          if (this.getEditMode() === EDIT_MODE_BATCH && \"prepend\" !== changeType && \"append\" !== changeType) {\n            changes.forEach(function (change) {\n              var key = change.key;\n\n              var validationData = validatingController._getValidationData(key);\n\n              if (validationData && change.type && validationData.pageIndex === _this5._pageIndex && (null === change || void 0 === change ? void 0 : change.pageIndex) !== _this5._pageIndex) {\n                addInValidItem(change, validationData);\n              }\n            });\n          }\n\n          return items;\n        },\n        processDataItem: function processDataItem(item) {\n          var isInserted = item.data[INSERT_INDEX];\n          var key = isInserted ? item.data.key : item.key;\n          var editMode = this.getEditMode();\n\n          if (editMode === EDIT_MODE_BATCH && isInserted && key) {\n            var changes = this.getChanges();\n            var editIndex = gridCoreUtils.getIndexByKey(key, changes);\n\n            if (editIndex >= 0) {\n              var change = changes[editIndex];\n\n              if (change.type !== EDIT_DATA_INSERT_TYPE) {\n                var oldData = this._getOldData(change.key);\n\n                item.data = extend(true, {}, oldData, change.data);\n                item.key = key;\n              }\n            }\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        _createInvisibleColumnValidators: function _createInvisibleColumnValidators(changes) {\n          var _this6 = this;\n\n          var that = this;\n          var validatingController = this.getController(\"validating\");\n          var columnsController = this.getController(\"columns\");\n          var columns = columnsController.getColumns();\n          var invisibleColumns = columnsController.getInvisibleColumns().filter(function (column) {\n            return !column.isBand;\n          });\n          var groupColumns = columnsController.getGroupColumns().filter(function (column) {\n            return !column.showWhenGrouped && -1 === invisibleColumns.indexOf(column);\n          });\n          var invisibleColumnValidators = [];\n\n          var isCellVisible = function isCellVisible(column, rowKey) {\n            return _this6._dataController.getRowIndexByKey(rowKey) >= 0 && invisibleColumns.indexOf(column) < 0;\n          };\n\n          invisibleColumns.push.apply(invisibleColumns, _toConsumableArray(groupColumns));\n\n          if (-1 === FORM_BASED_MODES.indexOf(this.getEditMode())) {\n            each(columns, function (_, column) {\n              changes.forEach(function (change) {\n                var data;\n\n                if (isCellVisible(column, change.key)) {\n                  return;\n                }\n\n                if (change.type === EDIT_DATA_INSERT_TYPE) {\n                  data = change.data;\n                } else if (\"update\" === change.type) {\n                  var oldData = that._getOldData(change.key);\n\n                  data = createObjectWithChanges(oldData, change.data);\n                }\n\n                if (data) {\n                  var validator = validatingController.createValidator({\n                    column: column,\n                    key: change.key,\n                    value: column.calculateCellValue(data)\n                  });\n\n                  if (validator) {\n                    invisibleColumnValidators.push(validator);\n                  }\n                }\n              });\n            });\n          }\n\n          return function () {\n            invisibleColumnValidators.forEach(function (validator) {\n              validator.dispose();\n            });\n          };\n        },\n        _beforeSaveEditData: function _beforeSaveEditData(change, editIndex) {\n          var _this7 = this;\n\n          var result = this.callBase.apply(this, arguments);\n          var validatingController = this.getController(\"validating\");\n\n          var validationData = validatingController._getValidationData(null === change || void 0 === change ? void 0 : change.key);\n\n          if (change) {\n            var isValid = \"remove\" === change.type || validationData.isValid;\n            result = result || !isValid;\n          } else {\n            var disposeValidators = this._createInvisibleColumnValidators(this.getChanges());\n\n            result = new Deferred();\n            this.executeOperation(result, function () {\n              validatingController.validate(true).done(function (isFullValid) {\n                disposeValidators();\n\n                _this7._updateRowAndPageIndices();\n\n                switch (_this7.getEditMode()) {\n                  case EDIT_MODE_CELL:\n                    if (!isFullValid) {\n                      _this7._focusEditingCell();\n                    }\n\n                    break;\n\n                  case EDIT_MODE_BATCH:\n                    if (!isFullValid) {\n                      _this7._resetEditRowKey();\n\n                      _this7._resetEditColumnName();\n\n                      _this7.getController(\"data\").updateItems();\n                    }\n\n                }\n\n                result.resolve(!isFullValid);\n              });\n            });\n          }\n\n          return result.promise ? result.promise() : result;\n        },\n        _beforeEditCell: function _beforeEditCell(rowIndex, columnIndex, item) {\n          var result = this.callBase(rowIndex, columnIndex, item);\n\n          if (this.getEditMode() === EDIT_MODE_CELL) {\n            var $cell = this._rowsView._getCellElement(rowIndex, columnIndex);\n\n            var validator = $cell && $cell.data(\"dxValidator\");\n            var rowOptions = $cell && $cell.closest(\".dx-row\").data(\"options\");\n            var value = validator && validator.option(\"adapter\").getValue();\n\n            if (validator && cellValueShouldBeValidated(value, rowOptions)) {\n              var validatingController = this.getController(\"validating\");\n              var deferred = new Deferred();\n              when(validatingController.validateCell(validator), result).done(function (validationResult, result) {\n                deferred.resolve(validationResult.status === VALIDATION_STATUS.valid && result);\n              });\n              return deferred.promise();\n            } else if (!validator) {\n              return result;\n            }\n          }\n        },\n        _afterSaveEditData: function _afterSaveEditData(cancel) {\n          var _this8 = this;\n\n          var $firstErrorRow;\n          var isCellEditMode = this.getEditMode() === EDIT_MODE_CELL;\n          each(this.getChanges(), function (_, change) {\n            var $errorRow = _this8._showErrorRow(change);\n\n            $firstErrorRow = $firstErrorRow || $errorRow;\n          });\n\n          if ($firstErrorRow) {\n            var scrollable = this._rowsView.getScrollable();\n\n            if (scrollable) {\n              scrollable.update();\n              scrollable.scrollToElement($firstErrorRow);\n            }\n          }\n\n          if (cancel && isCellEditMode && this._needUpdateRow()) {\n            var editRowIndex = this.getEditRowIndex();\n\n            this._dataController.updateItems({\n              changeType: \"update\",\n              rowIndices: [editRowIndex]\n            });\n\n            this._focusEditingCell();\n          } else if (!cancel) {\n            var shouldResetValidationState = true;\n\n            if (isCellEditMode) {\n              var columns = this.getController(\"columns\").getColumns();\n              var columnsWithValidatingEditors = columns.filter(function (col) {\n                var _col$validationRules;\n\n                return col.showEditorAlways && (null === (_col$validationRules = col.validationRules) || void 0 === _col$validationRules ? void 0 : _col$validationRules.length) > 0;\n              }).length > 0;\n              shouldResetValidationState = !columnsWithValidatingEditors;\n            }\n\n            if (shouldResetValidationState) {\n              this.getController(\"validating\").initValidationState();\n            }\n          }\n        },\n        _handleDataChanged: function _handleDataChanged(args) {\n          var validationState = this.getController(\"validating\")._validationState;\n\n          if (\"standard\" === this.option(\"scrolling.mode\")) {\n            this.resetRowAndPageIndices();\n          }\n\n          if (\"prepend\" === args.changeType) {\n            each(validationState, function (_, validationData) {\n              validationData.rowIndex += args.items.length;\n            });\n          }\n\n          this.callBase(args);\n        },\n        resetRowAndPageIndices: function resetRowAndPageIndices() {\n          var _this9 = this;\n\n          var validationState = this.getController(\"validating\")._validationState;\n\n          each(validationState, function (_, validationData) {\n            if (validationData.pageIndex !== _this9._pageIndex) {\n              delete validationData.pageIndex;\n              delete validationData.rowIndex;\n            }\n          });\n        },\n        _beforeCancelEditData: function _beforeCancelEditData() {\n          this.getController(\"validating\").initValidationState();\n          this.callBase();\n        },\n        _showErrorRow: function _showErrorRow(change) {\n          var $popupContent;\n          var errorHandling = this.getController(\"errorHandling\");\n          var items = this.getController(\"data\").items();\n          var rowIndex = this.getIndexByKey(change.key, items);\n\n          var validationData = this.getController(\"validating\")._getValidationData(change.key);\n\n          if (!(null !== validationData && void 0 !== validationData && validationData.isValid) && null !== validationData && void 0 !== validationData && validationData.errorText && rowIndex >= 0) {\n            $popupContent = this.getPopupContent();\n            return errorHandling && errorHandling.renderErrorRow(null === validationData || void 0 === validationData ? void 0 : validationData.errorText, rowIndex, $popupContent);\n          }\n        },\n        updateFieldValue: function updateFieldValue(e) {\n          var _this10 = this;\n\n          var validatingController = this.getController(\"validating\");\n          var deferred = new Deferred();\n          validatingController.removeCellValidationResult({\n            change: this.getChangeByKey(e.key),\n            columnIndex: e.column.index\n          });\n          this.callBase.apply(this, arguments).done(function () {\n            var currentValidator = validatingController.getCellValidator({\n              rowKey: e.key,\n              columnIndex: e.column.index\n            });\n            when(currentValidator && validatingController.validateCell(currentValidator)).done(function (validationResult) {\n              _this10.getController(\"editorFactory\").refocus();\n\n              deferred.resolve(validationResult);\n            });\n          });\n          return deferred.promise();\n        },\n        highlightDataCell: function highlightDataCell($cell, parameters) {\n          this.callBase.apply(this, arguments);\n          var validatingController = this.getController(\"validating\");\n          validatingController.setCellValidationStatus(parameters);\n          var isEditableCell = !!parameters.setValue;\n          var cellModified = this.isCellModified(parameters);\n          var isValidated = isDefined(parameters.validationStatus);\n          var needValidation = cellModified && parameters.column.setCellValue || isEditableCell && !cellModified && !(parameters.row.isNewRow || !isValidated);\n\n          if (needValidation) {\n            var validator = $cell.data(\"dxValidator\");\n\n            if (validator) {\n              when(this.getController(\"validating\").validateCell(validator)).done(function () {\n                validatingController.setCellValidationStatus(parameters);\n              });\n            }\n          }\n        },\n        getChangeByKey: function getChangeByKey(key) {\n          var changes = this.getChanges();\n          return changes[gridCoreUtils.getIndexByKey(key, changes)];\n        },\n        isCellModified: function isCellModified(parameters) {\n          var cellModified = this.callBase(parameters);\n          var change = this.getChangeByKey(parameters.key);\n          var isCellInvalid = !!parameters.row && this.getController(\"validating\").isInvalidCell({\n            rowKey: parameters.key,\n            columnIndex: parameters.column.index\n          });\n          return cellModified || this.getController(\"validating\")._rowIsValidated(change) && isCellInvalid;\n        }\n      },\n      editorFactory: {\n        _showRevertButton: function _showRevertButton($container) {\n          var _this11 = this;\n\n          if (!$container || !$container.length) {\n            return;\n          }\n\n          var $tooltipElement = this._rowsView.element().find(\".\" + this.addWidgetPrefix(REVERT_TOOLTIP_CLASS));\n\n          var $overlayContainer = $container.closest(\".\".concat(this.addWidgetPrefix(CONTENT_CLASS)));\n          $tooltipElement && $tooltipElement.remove();\n          $tooltipElement = $(\"<div>\").addClass(this.addWidgetPrefix(REVERT_TOOLTIP_CLASS)).appendTo($container);\n          var tooltipOptions = {\n            animation: null,\n            visible: true,\n            width: \"auto\",\n            height: \"auto\",\n            target: $container,\n            shading: false,\n            container: $overlayContainer,\n            propagateOutsideClick: true,\n            closeOnOutsideClick: false,\n            copyRootClassesToWrapper: true,\n            _ignoreCopyRootClassesToWrapperDeprecation: true,\n            contentTemplate: function contentTemplate() {\n              var $buttonElement = $(\"<div>\").addClass(REVERT_BUTTON_CLASS);\n              var buttonOptions = {\n                icon: \"revert\",\n                hint: _this11.option(\"editing.texts.validationCancelChanges\"),\n                onClick: function onClick() {\n                  _this11._editingController.cancelEditData();\n                }\n              };\n              return new Button($buttonElement, buttonOptions).$element();\n            },\n            position: {\n              my: \"left top\",\n              at: \"right top\",\n              offset: \"1 0\",\n              collision: \"flip\",\n              boundaryOffset: \"0 0\",\n              boundary: this._rowsView.element()\n            },\n            onPositioned: this._positionedHandler.bind(this)\n          };\n          return new Overlay($tooltipElement, tooltipOptions);\n        },\n        _hideFixedGroupCell: function _hideFixedGroupCell($cell, overlayOptions) {\n          var $nextFixedRowElement;\n          var $groupCellElement;\n\n          var isFixedColumns = this._rowsView.isFixedColumns();\n\n          var isFormOrPopupEditMode = this._editingController.isFormOrPopupEditMode();\n\n          if (isFixedColumns && !isFormOrPopupEditMode) {\n            var nextRowOptions = $cell.closest(\".dx-row\").next().data(\"options\");\n\n            if (nextRowOptions && \"group\" === nextRowOptions.rowType) {\n              $nextFixedRowElement = $(this._rowsView.getRowElement(nextRowOptions.rowIndex)).last();\n              $groupCellElement = $nextFixedRowElement.find(\".\" + GROUP_CELL_CLASS);\n\n              if ($groupCellElement.length && \"hidden\" !== $groupCellElement.get(0).style.visibility) {\n                $groupCellElement.css(\"visibility\", \"hidden\");\n\n                overlayOptions.onDisposing = function () {\n                  $groupCellElement.css(\"visibility\", \"\");\n                };\n              }\n            }\n          }\n        },\n        _positionedHandler: function _positionedHandler(e, isOverlayVisible) {\n          if (!e.component.__skipPositionProcessing) {\n            var isRevertButton = $(e.element).hasClass(this.addWidgetPrefix(REVERT_TOOLTIP_CLASS));\n\n            var needRepaint = !isRevertButton && this._rowsView.updateFreeSpaceRowHeight();\n\n            var normalizedPosition = this._normalizeValidationMessagePositionAndMaxWidth(e, isRevertButton, isOverlayVisible);\n\n            e.component.__skipPositionProcessing = !!(needRepaint || normalizedPosition);\n\n            if (normalizedPosition) {\n              e.component.option(normalizedPosition);\n            } else if (needRepaint) {\n              e.component.repaint();\n            }\n          }\n        },\n        _showValidationMessage: function _showValidationMessage($cell, messages, alignment, revertTooltip) {\n          var _this12 = this;\n\n          var editorPopup = $cell.find(\".dx-dropdowneditor-overlay\").data(\"dxPopup\");\n          var isOverlayVisible = editorPopup && editorPopup.option(\"visible\");\n          var myPosition = isOverlayVisible ? \"top right\" : \"top \" + alignment;\n          var atPosition = isOverlayVisible ? \"top left\" : \"bottom \" + alignment;\n          var $overlayContainer = $cell.closest(\".\".concat(this.addWidgetPrefix(CONTENT_CLASS)));\n          var errorMessageText = \"\";\n          messages && messages.forEach(function (message) {\n            errorMessageText += (errorMessageText.length ? \"<br/>\" : \"\") + encodeHtml(message);\n          });\n          var invalidMessageClass = this.addWidgetPrefix(WIDGET_INVALID_MESSAGE_CLASS);\n\n          this._rowsView.element().find(\".\" + invalidMessageClass).remove();\n\n          var $overlayElement = $(\"<div>\").addClass(INVALID_MESSAGE_CLASS).addClass(INVALID_MESSAGE_ALWAYS_CLASS).addClass(invalidMessageClass).html(errorMessageText).appendTo($cell);\n          var overlayOptions = {\n            target: $cell,\n            container: $overlayContainer,\n            shading: false,\n            width: \"auto\",\n            height: \"auto\",\n            visible: true,\n            animation: false,\n            propagateOutsideClick: true,\n            closeOnOutsideClick: false,\n            copyRootClassesToWrapper: true,\n            _ignoreCopyRootClassesToWrapperDeprecation: true,\n            position: {\n              collision: \"flip\",\n              boundary: this._rowsView.element(),\n              boundaryOffset: \"0 0\",\n              offset: {\n                x: 0,\n                y: !isOverlayVisible && browser.mozilla ? -1 : 0\n              },\n              my: myPosition,\n              at: atPosition\n            },\n            onPositioned: function onPositioned(e) {\n              _this12._positionedHandler(e, isOverlayVisible);\n\n              _this12._shiftValidationMessageIfNeed(e.component.$content(), revertTooltip && revertTooltip.$content(), $cell);\n            }\n          };\n\n          this._hideFixedGroupCell($cell, overlayOptions);\n\n          new Overlay($overlayElement, overlayOptions);\n        },\n        _normalizeValidationMessagePositionAndMaxWidth: function _normalizeValidationMessagePositionAndMaxWidth(options, isRevertButton, isOverlayVisible) {\n          var fixedColumns = this._columnsController.getFixedColumns();\n\n          if (!fixedColumns || !fixedColumns.length) {\n            return;\n          }\n\n          var position;\n          var visibleTableWidth = !isRevertButton && (that = this, element = options.element, rowIndex = $(element).closest(\"tr\").index(), $cellElements = $(that._rowsView.getRowElement(rowIndex)).first().children().filter(\":not(.dx-hidden-cell)\"), that._rowsView._getWidths($cellElements).reduce(function (w1, w2) {\n            return w1 + w2;\n          }, 0));\n          var that, element, rowIndex, $cellElements;\n          var $overlayContentElement = options.component.$content();\n          var validationMessageWidth = getOuterWidth($overlayContentElement, true);\n          var needMaxWidth = !isRevertButton && validationMessageWidth > visibleTableWidth;\n\n          var columnIndex = this._rowsView.getCellIndex($(options.element).closest(\"td\"));\n\n          var boundaryNonFixedColumnsInfo = function (fixedColumns) {\n            var firstNonFixedColumnIndex;\n            var lastNonFixedColumnIndex;\n            fixedColumns.some(function (column, index) {\n              if (column.command === COMMAND_TRANSPARENT) {\n                firstNonFixedColumnIndex = 0 === index ? -1 : index;\n                lastNonFixedColumnIndex = index === fixedColumns.length - 1 ? -1 : index + column.colspan - 1;\n                return true;\n              }\n            });\n            return {\n              startColumnIndex: firstNonFixedColumnIndex,\n              endColumnIndex: lastNonFixedColumnIndex\n            };\n          }(fixedColumns);\n\n          if (!isRevertButton && (columnIndex === boundaryNonFixedColumnsInfo.startColumnIndex || needMaxWidth)) {\n            position = {\n              collision: \"none flip\",\n              my: \"top left\",\n              at: isOverlayVisible ? \"top right\" : \"bottom left\"\n            };\n          } else if (columnIndex === boundaryNonFixedColumnsInfo.endColumnIndex) {\n            position = {\n              collision: \"none flip\",\n              my: \"top right\",\n              at: isRevertButton || isOverlayVisible ? \"top left\" : \"bottom right\"\n            };\n\n            if (isRevertButton) {\n              position.offset = \"-1 0\";\n            }\n          }\n\n          return position && {\n            position: position,\n            maxWidth: needMaxWidth ? visibleTableWidth - 2 : void 0\n          };\n        },\n        _shiftValidationMessageIfNeed: function _shiftValidationMessageIfNeed($content, $revertContent, $cell) {\n          if (!$revertContent) {\n            return;\n          }\n\n          var contentOffset = $content.offset();\n          var revertContentOffset = $revertContent.offset();\n\n          if (contentOffset.top === revertContentOffset.top && contentOffset.left + getWidth($content) > revertContentOffset.left) {\n            var left = getWidth($revertContent) + PADDING_BETWEEN_TOOLTIPS;\n            $content.css(\"left\", revertContentOffset.left < $cell.offset().left ? -left : left);\n          }\n        },\n        _getTooltipsSelector: function _getTooltipsSelector() {\n          var invalidMessageClass = this.addWidgetPrefix(WIDGET_INVALID_MESSAGE_CLASS);\n          var revertTooltipClass = this.addWidgetPrefix(REVERT_TOOLTIP_CLASS);\n          return \".dx-editor-cell .\" + revertTooltipClass + \", .dx-editor-cell .\" + invalidMessageClass + \", .dx-cell-modified .\" + invalidMessageClass;\n        },\n        init: function init() {\n          this.callBase();\n          this._editingController = this.getController(\"editing\");\n          this._columnsController = this.getController(\"columns\");\n          this._rowsView = this.getView(\"rowsView\");\n        },\n        loseFocus: function loseFocus(skipValidator) {\n          if (!skipValidator) {\n            this.getController(\"validating\").setValidator(null);\n          }\n\n          this.callBase();\n        },\n        updateCellState: function updateCellState($element, validationResult, hideBorder) {\n          var _change$data;\n\n          var $focus = null === $element || void 0 === $element ? void 0 : $element.closest(this._getFocusCellSelector());\n          var $cell = null !== $focus && void 0 !== $focus && $focus.is(\"td\") ? $focus : null;\n          var rowOptions = null === $focus || void 0 === $focus ? void 0 : $focus.closest(\".dx-row\").data(\"options\");\n          var change = rowOptions ? this.getController(\"editing\").getChangeByKey(rowOptions.key) : null;\n          var column = $cell && this.getController(\"columns\").getVisibleColumns()[$cell.index()];\n          var isCellModified = void 0 !== (null === change || void 0 === change ? void 0 : null === (_change$data = change.data) || void 0 === _change$data ? void 0 : _change$data[null === column || void 0 === column ? void 0 : column.name]) && !this._editingController.isSaving();\n          var revertTooltip;\n\n          if ((null === validationResult || void 0 === validationResult ? void 0 : validationResult.status) === VALIDATION_STATUS.invalid || isCellModified) {\n            if (this._editingController.getEditMode() === EDIT_MODE_CELL) {\n              revertTooltip = this._showRevertButton($focus);\n            }\n          }\n\n          var showValidationMessage = validationResult && validationResult.status === VALIDATION_STATUS.invalid;\n\n          if (showValidationMessage && $cell && column && validationResult && validationResult.brokenRules) {\n            var errorMessages = [];\n            validationResult.brokenRules.forEach(function (rule) {\n              errorMessages.push(rule.message);\n            });\n\n            this._showValidationMessage($focus, errorMessages, column.alignment || \"left\", revertTooltip);\n          }\n\n          !hideBorder && this._rowsView.element() && this._rowsView.updateFreeSpaceRowHeight();\n        },\n        focus: function focus($element, hideBorder) {\n          var _this13 = this;\n\n          if (!arguments.length) {\n            return this.callBase();\n          }\n\n          var $tooltips = $element && $element.closest(\".\" + this.addWidgetPrefix(ROWS_VIEW_CLASS)).find(this._getTooltipsSelector());\n          $tooltips && $tooltips.remove();\n\n          if (null !== $element && void 0 !== $element && $element.hasClass(\"dx-row\")) {\n            return this.callBase($element, hideBorder);\n          }\n\n          var $focus = null === $element || void 0 === $element ? void 0 : $element.closest(this._getFocusCellSelector());\n          var callBase = this.callBase;\n          var validator = $focus && ($focus.data(\"dxValidator\") || $element.find(\".\" + this.addWidgetPrefix(VALIDATOR_CLASS)).eq(0).data(\"dxValidator\"));\n          var rowOptions = $focus && $focus.closest(\".dx-row\").data(\"options\");\n          var editingController = this.getController(\"editing\");\n          var change = rowOptions ? editingController.getChangeByKey(rowOptions.key) : null;\n          var validationResult;\n          var validatingController = this.getController(\"validating\");\n\n          if (validator) {\n            validatingController.setValidator(validator);\n            var value = validator.option(\"adapter\").getValue();\n\n            if (cellValueShouldBeValidated(value, rowOptions) || validatingController._rowIsValidated(change)) {\n              editingController.waitForDeferredOperations().done(function () {\n                when(validatingController.validateCell(validator)).done(function (result) {\n                  validationResult = result;\n                  var column = validationResult.validator.option(\"dataGetter\")().column;\n\n                  if (change && column && !validatingController.isCurrentValidatorProcessing({\n                    rowKey: change.key,\n                    columnIndex: column.index\n                  })) {\n                    return;\n                  }\n\n                  if (validationResult.status === VALIDATION_STATUS.invalid) {\n                    hideBorder = true;\n                  }\n\n                  _this13.updateCellState($element, validationResult, hideBorder);\n\n                  callBase.call(_this13, $element, hideBorder);\n                });\n              });\n              return this.callBase($element, hideBorder);\n            }\n          }\n\n          this.updateCellState($element, validationResult, hideBorder);\n          return this.callBase($element, hideBorder);\n        },\n        getEditorInstance: function getEditorInstance($container) {\n          var $editor = $container.find(\".dx-texteditor\").eq(0);\n          return gridCoreUtils.getWidgetInstance($editor);\n        }\n      },\n      data: {\n        _isCellChanged: function _isCellChanged(oldRow, newRow, visibleRowIndex, columnIndex, isLiveUpdate) {\n          var _oldRow$cells, _cell$column$validati;\n\n          var cell = null === (_oldRow$cells = oldRow.cells) || void 0 === _oldRow$cells ? void 0 : _oldRow$cells[columnIndex];\n          var oldValidationStatus = cell && cell.validationStatus;\n          var validatingController = this.getController(\"validating\");\n          var validationResult = validatingController.getCellValidationResult({\n            rowKey: oldRow.key,\n            columnIndex: columnIndex\n          });\n\n          var validationData = validatingController._getValidationData(oldRow.key);\n\n          var newValidationStatus = validationResultIsValid(validationResult) ? validationResult.status : validationResult;\n          var rowIsModified = JSON.stringify(newRow.modifiedValues) !== JSON.stringify(oldRow.modifiedValues);\n          var cellIsMarkedAsInvalid = $(null === cell || void 0 === cell ? void 0 : cell.cellElement).hasClass(this.addWidgetPrefix(INVALIDATE_CLASS));\n          var editingChanged = oldRow.isEditing !== newRow.isEditing;\n          var hasValidationRules = null === cell || void 0 === cell ? void 0 : null === (_cell$column$validati = cell.column.validationRules) || void 0 === _cell$column$validati ? void 0 : _cell$column$validati.length;\n\n          if (editingChanged && hasValidationRules || oldValidationStatus !== newValidationStatus && rowIsModified || validationData.isValid && cellIsMarkedAsInvalid) {\n            return true;\n          }\n\n          return this.callBase.apply(this, arguments);\n        }\n      }\n    },\n    views: {\n      rowsView: {\n        updateFreeSpaceRowHeight: function updateFreeSpaceRowHeight($table) {\n          var $rowElements;\n          var $freeSpaceRowElement;\n          var $freeSpaceRowElements;\n          var $element = this.element();\n          var $tooltipContent = $element && $element.find(\".\" + this.addWidgetPrefix(WIDGET_INVALID_MESSAGE_CLASS) + \" .dx-overlay-content\");\n          this.callBase($table);\n\n          if ($tooltipContent && $tooltipContent.length) {\n            $rowElements = this._getRowElements();\n            $freeSpaceRowElements = this._getFreeSpaceRowElements($table);\n            $freeSpaceRowElement = $freeSpaceRowElements.first();\n\n            if ($freeSpaceRowElement && 1 === $rowElements.length && (!$freeSpaceRowElement.is(\":visible\") || getOuterHeight($tooltipContent) > getOuterHeight($freeSpaceRowElement))) {\n              $freeSpaceRowElements.show();\n              setHeight($freeSpaceRowElements, getOuterHeight($tooltipContent));\n              return true;\n            }\n          }\n        },\n        _formItemPrepared: function _formItemPrepared(cellOptions, $container) {\n          var _this14 = this;\n\n          this.callBase.apply(this, arguments);\n          deferUpdate(function () {\n            var $editor = $container.find(\".dx-widget\").first();\n            var isEditorDisposed = $editor.length && !$editor.children().length;\n\n            if (!isEditorDisposed) {\n              _this14.getController(\"validating\").createValidator(cellOptions, $editor);\n            }\n          });\n        },\n        _cellPrepared: function _cellPrepared($cell, parameters) {\n          if (!this.getController(\"editing\").isFormOrPopupEditMode()) {\n            this.getController(\"validating\").createValidator(parameters, $cell);\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        _restoreErrorRow: function _restoreErrorRow(contentTable) {\n          var editingController = this.getController(\"editing\");\n          editingController && editingController.hasChanges() && this._getRowElements(contentTable).each(function (_, item) {\n            var rowOptions = $(item).data(\"options\");\n\n            if (rowOptions) {\n              var change = editingController.getChangeByKey(rowOptions.key);\n              change && editingController._showErrorRow(change);\n            }\n          });\n        }\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}