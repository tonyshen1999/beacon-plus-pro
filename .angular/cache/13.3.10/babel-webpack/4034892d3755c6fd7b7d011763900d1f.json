{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/overlay/ui.overlay.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getOuterWidth, getOuterHeight, getWidth, getHeight } from \"../../core/utils/size\";\nimport fx from \"../../animation/fx\";\nimport registerComponent from \"../../core/component_registrator\";\nimport devices from \"../../core/devices\";\nimport domAdapter from \"../../core/dom_adapter\";\nimport { getPublicElement } from \"../../core/element\";\nimport $ from \"../../core/renderer\";\nimport { EmptyTemplate } from \"../../core/templates/empty_template\";\nimport { inArray } from \"../../core/utils/array\";\nimport { noop } from \"../../core/utils/common\";\nimport { Deferred } from \"../../core/utils/deferred\";\nimport { contains, resetActiveElement } from \"../../core/utils/dom\";\nimport { extend } from \"../../core/utils/extend\";\nimport { each } from \"../../core/utils/iterator\";\nimport readyCallbacks from \"../../core/utils/ready_callbacks\";\nimport { isDefined, isFunction, isPlainObject, isObject } from \"../../core/utils/type\";\nimport { changeCallback } from \"../../core/utils/view_port\";\nimport { getWindow, hasWindow } from \"../../core/utils/window\";\nimport errors from \"../../core/errors\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { move as dragEventMove } from \"../../events/drag\";\nimport pointerEvents from \"../../events/pointer\";\nimport { keyboard } from \"../../events/short\";\nimport { addNamespace, isCommandKeyPressed, normalizeKeyName } from \"../../events/utils/index\";\nimport { triggerHidingEvent, triggerResizeEvent, triggerShownEvent } from \"../../events/visibility_change\";\nimport { hideCallback as hideTopOverlayCallback } from \"../../mobile/hide_callback\";\nimport Resizable from \"../resizable\";\nimport OverlayDrag from \"./overlay_drag\";\nimport { tabbable } from \"../widget/selectors\";\nimport swatch from \"../widget/swatch_container\";\nimport Widget from \"../widget/ui.widget\";\nimport browser from \"../../core/utils/browser\";\nimport * as zIndexPool from \"./z_index\";\nimport resizeObserverSingleton from \"../../core/resize_observer\";\nimport { OverlayPositionController, OVERLAY_POSITION_ALIASES } from \"./overlay_position_controller\";\nvar ready = readyCallbacks.add;\nvar window = getWindow();\nvar viewPortChanged = changeCallback;\nvar OVERLAY_CLASS = \"dx-overlay\";\nvar OVERLAY_WRAPPER_CLASS = \"dx-overlay-wrapper\";\nvar OVERLAY_CONTENT_CLASS = \"dx-overlay-content\";\nvar OVERLAY_SHADER_CLASS = \"dx-overlay-shader\";\nvar OVERLAY_MODAL_CLASS = \"dx-overlay-modal\";\nvar INNER_OVERLAY_CLASS = \"dx-inner-overlay\";\nvar INVISIBLE_STATE_CLASS = \"dx-state-invisible\";\nvar ANONYMOUS_TEMPLATE_NAME = \"content\";\nvar RTL_DIRECTION_CLASS = \"dx-rtl\";\nvar ACTIONS = [\"onShowing\", \"onShown\", \"onHiding\", \"onHidden\", \"onPositioned\", \"onResizeStart\", \"onResize\", \"onResizeEnd\", \"onVisualPositionChanged\"];\nvar OVERLAY_STACK = [];\nvar PREVENT_SAFARI_SCROLLING_CLASS = \"dx-prevent-safari-scrolling\";\nvar TAB_KEY = \"tab\";\nready(function () {\n  eventsEngine.subscribeGlobal(domAdapter.getDocument(), pointerEvents.down, function (e) {\n    for (var i = OVERLAY_STACK.length - 1; i >= 0; i--) {\n      if (!OVERLAY_STACK[i]._proxiedDocumentDownHandler(e)) {\n        return;\n      }\n    }\n  });\n});\nvar Overlay = Widget.inherit({\n  _supportedKeys: function _supportedKeys() {\n    var _this6 = this;\n\n    return extend(this.callBase(), {\n      escape: function escape() {\n        this.hide();\n      },\n      upArrow: function upArrow(e) {\n        _this6._drag.moveUp(e);\n      },\n      downArrow: function downArrow(e) {\n        _this6._drag.moveDown(e);\n      },\n      leftArrow: function leftArrow(e) {\n        _this6._drag.moveLeft(e);\n      },\n      rightArrow: function rightArrow(e) {\n        _this6._drag.moveRight(e);\n      }\n    });\n  },\n  _getDefaultOptions: function _getDefaultOptions() {\n    var _this7 = this;\n\n    return extend(this.callBase(), {\n      activeStateEnabled: false,\n      visible: false,\n      deferRendering: true,\n      shading: true,\n      shadingColor: \"\",\n      wrapperAttr: {},\n      position: extend({}, OVERLAY_POSITION_ALIASES.center),\n      width: \"80vw\",\n      minWidth: null,\n      maxWidth: null,\n      height: \"80vh\",\n      minHeight: null,\n      maxHeight: null,\n      animation: {\n        show: {\n          type: \"pop\",\n          duration: 300,\n          from: {\n            scale: .55\n          }\n        },\n        hide: {\n          type: \"pop\",\n          duration: 300,\n          to: {\n            opacity: 0,\n            scale: .55\n          },\n          from: {\n            opacity: 1,\n            scale: 1\n          }\n        }\n      },\n      dragOutsideBoundary: false,\n      closeOnOutsideClick: false,\n      copyRootClassesToWrapper: false,\n      _ignoreCopyRootClassesToWrapperDeprecation: false,\n      onShowing: null,\n      onShown: null,\n      onHiding: null,\n      onHidden: null,\n      contentTemplate: \"content\",\n      dragEnabled: false,\n      dragAndResizeArea: void 0,\n      outsideDragFactor: 0,\n      resizeEnabled: false,\n      onResizeStart: null,\n      onResize: null,\n      onResizeEnd: null,\n      innerOverlay: false,\n      restorePosition: true,\n      target: void 0,\n      container: void 0,\n      hideTopOverlayHandler: function hideTopOverlayHandler() {\n        _this7.hide();\n      },\n      hideOnParentScroll: false,\n      onPositioned: null,\n      propagateOutsideClick: false,\n      ignoreChildEvents: true,\n      _checkParentVisibility: true,\n      _fixWrapperPosition: false\n    });\n  },\n  _defaultOptionsRules: function _defaultOptionsRules() {\n    return this.callBase().concat([{\n      device: function device() {\n        return !hasWindow();\n      },\n      options: {\n        width: null,\n        height: null,\n        animation: null,\n        _checkParentVisibility: false\n      }\n    }]);\n  },\n  _setOptionsByReference: function _setOptionsByReference() {\n    this.callBase();\n    extend(this._optionsByReference, {\n      animation: true\n    });\n  },\n  $wrapper: function $wrapper() {\n    return this._$wrapper;\n  },\n  _eventBindingTarget: function _eventBindingTarget() {\n    return this._$content;\n  },\n  _setDeprecatedOptions: function _setDeprecatedOptions() {\n    this.callBase();\n    extend(this._deprecatedOptions, {\n      elementAttr: {\n        since: \"21.2\",\n        message: 'Use the \"wrapperAttr\" option instead'\n      }\n    });\n  },\n  ctor: function ctor(element, options) {\n    this.callBase(element, options);\n\n    if (options && options.copyRootClassesToWrapper && !options._ignoreCopyRootClassesToWrapperDeprecation) {\n      errors.log(\"W0001\", this.NAME, \"copyRootClassesToWrapper\", \"21.2\", 'Use the \"wrapperAttr\" option instead');\n    }\n  },\n  _init: function _init() {\n    var _this8 = this;\n\n    this.callBase();\n\n    this._initActions();\n\n    this._initCloseOnOutsideClickHandler();\n\n    this._initTabTerminatorHandler();\n\n    this._customWrapperClass = null;\n    this._$wrapper = $(\"<div>\").addClass(OVERLAY_WRAPPER_CLASS);\n    this._$content = $(\"<div>\").addClass(OVERLAY_CONTENT_CLASS);\n\n    this._initInnerOverlayClass();\n\n    var $element = this.$element();\n\n    if (this.option(\"copyRootClassesToWrapper\")) {\n      this._$wrapper.addClass($element.attr(\"class\"));\n    }\n\n    $element.addClass(OVERLAY_CLASS);\n\n    this._$wrapper.attr(\"data-bind\", \"dxControlsDescendantBindings: true\");\n\n    this._toggleViewPortSubscription(true);\n\n    this._initHideTopOverlayHandler(this.option(\"hideTopOverlayHandler\"));\n\n    this._parentsScrollSubscriptionInfo = {\n      handler: function handler(e) {\n        _this8._targetParentsScrollHandler(e);\n      }\n    };\n\n    this._updateResizeCallbackSkipCondition();\n\n    this.warnPositionAsFunction();\n  },\n  warnPositionAsFunction: function warnPositionAsFunction() {\n    if (isFunction(this.option(\"position\"))) {\n      errors.log(\"W0018\");\n    }\n  },\n  _initOptions: function _initOptions(options) {\n    this._setAnimationTarget(options.target);\n\n    this.callBase(options);\n  },\n  _initInnerOverlayClass: function _initInnerOverlayClass() {\n    this._$content.toggleClass(INNER_OVERLAY_CLASS, this.option(\"innerOverlay\"));\n  },\n  _setAnimationTarget: function _setAnimationTarget(target) {\n    if (!isDefined(target)) {\n      return;\n    }\n\n    var options = this.option();\n    [\"animation.show.from.position.of\", \"animation.show.to.position.of\", \"animation.hide.from.position.of\", \"animation.hide.to.position.of\"].forEach(function (path) {\n      var pathParts = path.split(\".\");\n      var option = options;\n\n      while (option) {\n        if (1 === pathParts.length) {\n          if (isPlainObject(option)) {\n            option[pathParts.shift()] = target;\n          }\n\n          break;\n        } else {\n          option = option[pathParts.shift()];\n        }\n      }\n    });\n  },\n  _initHideTopOverlayHandler: function _initHideTopOverlayHandler(handler) {\n    this._hideTopOverlayHandler = handler;\n  },\n  _initActions: function _initActions() {\n    var _this9 = this;\n\n    this._actions = {};\n    each(ACTIONS, function (_, action) {\n      _this9._actions[action] = _this9._createActionByOption(action, {\n        excludeValidators: [\"disabled\", \"readOnly\"]\n      }) || noop;\n    });\n  },\n  _initCloseOnOutsideClickHandler: function _initCloseOnOutsideClickHandler() {\n    var _this = this;\n\n    this._proxiedDocumentDownHandler = function () {\n      return _this._documentDownHandler.apply(_this, arguments);\n    };\n  },\n  _areContentDimensionsRendered: function _areContentDimensionsRendered(entry) {\n    var _entry$contentBoxSize, _this$_renderedDimens3, _this$_renderedDimens4;\n\n    var contentBox = null === (_entry$contentBoxSize = entry.contentBoxSize) || void 0 === _entry$contentBoxSize ? void 0 : _entry$contentBoxSize[0];\n\n    if (contentBox) {\n      var _this$_renderedDimens, _this$_renderedDimens2;\n\n      return parseInt(contentBox.inlineSize, 10) === (null === (_this$_renderedDimens = this._renderedDimensions) || void 0 === _this$_renderedDimens ? void 0 : _this$_renderedDimens.width) && parseInt(contentBox.blockSize, 10) === (null === (_this$_renderedDimens2 = this._renderedDimensions) || void 0 === _this$_renderedDimens2 ? void 0 : _this$_renderedDimens2.height);\n    }\n\n    var contentRect = entry.contentRect;\n    return parseInt(contentRect.width, 10) === (null === (_this$_renderedDimens3 = this._renderedDimensions) || void 0 === _this$_renderedDimens3 ? void 0 : _this$_renderedDimens3.width) && parseInt(contentRect.height, 10) === (null === (_this$_renderedDimens4 = this._renderedDimensions) || void 0 === _this$_renderedDimens4 ? void 0 : _this$_renderedDimens4.height);\n  },\n  _contentResizeHandler: function _contentResizeHandler(entry) {\n    if (!this._shouldSkipContentResize(entry)) {\n      this._renderGeometry({\n        shouldOnlyReposition: true\n      });\n    }\n  },\n  _updateResizeCallbackSkipCondition: function _updateResizeCallbackSkipCondition() {\n    var _this10 = this;\n\n    var doesShowAnimationChangeDimensions = this._doesShowAnimationChangeDimensions();\n\n    this._shouldSkipContentResize = function (entry) {\n      return doesShowAnimationChangeDimensions && _this10._showAnimationProcessing || _this10._areContentDimensionsRendered(entry);\n    };\n  },\n  _doesShowAnimationChangeDimensions: function _doesShowAnimationChangeDimensions() {\n    var animation = this.option(\"animation\");\n    return [\"to\", \"from\"].some(function (prop) {\n      var _animation$show;\n\n      var config = null === animation || void 0 === animation ? void 0 : null === (_animation$show = animation.show) || void 0 === _animation$show ? void 0 : _animation$show[prop];\n      return isObject(config) && (\"width\" in config || \"height\" in config);\n    });\n  },\n  _observeContentResize: function _observeContentResize(shouldObserve) {\n    var _this11 = this;\n\n    if (!this.option(\"useResizeObserver\")) {\n      return;\n    }\n\n    var contentElement = this._$content.get(0);\n\n    if (shouldObserve) {\n      resizeObserverSingleton.observe(contentElement, function (entry) {\n        _this11._contentResizeHandler(entry);\n      });\n    } else {\n      resizeObserverSingleton.unobserve(contentElement);\n    }\n  },\n  _initMarkup: function _initMarkup() {\n    this.callBase();\n\n    this._renderWrapperAttributes();\n\n    this._initPositionController();\n  },\n  _documentDownHandler: function _documentDownHandler(e) {\n    if (this._showAnimationProcessing) {\n      this._stopAnimation();\n    }\n\n    var closeOnOutsideClick = this.option(\"closeOnOutsideClick\");\n\n    if (isFunction(closeOnOutsideClick)) {\n      closeOnOutsideClick = closeOnOutsideClick(e);\n    }\n\n    var isAttachedTarget = $(window.document).is(e.target) || contains(window.document, e.target);\n    var isInnerOverlay = $(e.target).closest(\".\".concat(INNER_OVERLAY_CLASS)).length;\n    var outsideClick = isAttachedTarget && !isInnerOverlay && !(this._$content.is(e.target) || contains(this._$content.get(0), e.target));\n\n    if (outsideClick && closeOnOutsideClick) {\n      this._outsideClickHandler(e);\n    }\n\n    return this.option(\"propagateOutsideClick\");\n  },\n  _outsideClickHandler: function _outsideClickHandler(e) {\n    if (this.option(\"shading\")) {\n      e.preventDefault();\n    }\n\n    this.hide();\n  },\n  _getAnonymousTemplateName: function _getAnonymousTemplateName() {\n    return ANONYMOUS_TEMPLATE_NAME;\n  },\n  _initTemplates: function _initTemplates() {\n    this._templateManager.addDefaultTemplates({\n      content: new EmptyTemplate()\n    });\n\n    this.callBase();\n  },\n  _isTopOverlay: function _isTopOverlay() {\n    var overlayStack = this._overlayStack();\n\n    for (var i = overlayStack.length - 1; i >= 0; i--) {\n      var tabbableElements = overlayStack[i]._findTabbableBounds();\n\n      if (tabbableElements.first || tabbableElements.last) {\n        return overlayStack[i] === this;\n      }\n    }\n\n    return false;\n  },\n  _overlayStack: function _overlayStack() {\n    return OVERLAY_STACK;\n  },\n  _zIndexInitValue: function _zIndexInitValue() {\n    return Overlay.baseZIndex();\n  },\n  _toggleViewPortSubscription: function _toggleViewPortSubscription(toggle) {\n    var _this2 = this;\n\n    viewPortChanged.remove(this._viewPortChangeHandle);\n\n    if (toggle) {\n      this._viewPortChangeHandle = function () {\n        _this2._viewPortChangeHandler.apply(_this2, arguments);\n      };\n\n      viewPortChanged.add(this._viewPortChangeHandle);\n    }\n  },\n  _viewPortChangeHandler: function _viewPortChangeHandler() {\n    this._positionController.updateContainer(this.option(\"container\"));\n\n    this._refresh();\n  },\n  _renderWrapperAttributes: function _renderWrapperAttributes() {\n    var _this$option = this.option(),\n        wrapperAttr = _this$option.wrapperAttr;\n\n    var attributes = extend({}, wrapperAttr);\n    var classNames = attributes.class;\n    delete attributes.class;\n    this.$wrapper().attr(attributes).removeClass(this._customWrapperClass).addClass(classNames);\n    this._customWrapperClass = classNames;\n  },\n  _renderVisibilityAnimate: function _renderVisibilityAnimate(visible) {\n    this._observeContentResize(visible);\n\n    this._stopAnimation();\n\n    return visible ? this._show() : this._hide();\n  },\n  _getAnimationConfig: function _getAnimationConfig() {\n    return this._getOptionValue(\"animation\", this);\n  },\n  _animateShowing: function _animateShowing() {\n    var _this$_getAnimationCo,\n        _showAnimation$start,\n        _showAnimation$comple,\n        _this3 = this;\n\n    var animation = null !== (_this$_getAnimationCo = this._getAnimationConfig()) && void 0 !== _this$_getAnimationCo ? _this$_getAnimationCo : {};\n\n    var showAnimation = this._normalizeAnimation(animation.show, \"to\");\n\n    var startShowAnimation = null !== (_showAnimation$start = null === showAnimation || void 0 === showAnimation ? void 0 : showAnimation.start) && void 0 !== _showAnimation$start ? _showAnimation$start : noop;\n    var completeShowAnimation = null !== (_showAnimation$comple = null === showAnimation || void 0 === showAnimation ? void 0 : showAnimation.complete) && void 0 !== _showAnimation$comple ? _showAnimation$comple : noop;\n\n    this._animate(showAnimation, function () {\n      if (_this3._isAnimationPaused) {\n        return;\n      }\n\n      if (_this3.option(\"focusStateEnabled\")) {\n        eventsEngine.trigger(_this3._focusTarget(), \"focus\");\n      }\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      completeShowAnimation.call.apply(completeShowAnimation, [_this3].concat(args));\n      _this3._showAnimationProcessing = false;\n      _this3._isHidden = false;\n\n      _this3._actions.onShown();\n\n      _this3._toggleSafariScrolling();\n\n      _this3._showingDeferred.resolve();\n    }, function () {\n      if (_this3._isAnimationPaused) {\n        return;\n      }\n\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      startShowAnimation.call.apply(startShowAnimation, [_this3].concat(args));\n      _this3._showAnimationProcessing = true;\n    });\n  },\n  _show: function _show() {\n    var _this12 = this;\n\n    this._showingDeferred = new Deferred();\n    this._parentHidden = this._isParentHidden();\n\n    this._showingDeferred.done(function () {\n      delete _this12._parentHidden;\n    });\n\n    if (this._parentHidden) {\n      this._isHidden = true;\n      return this._showingDeferred.resolve();\n    }\n\n    if (this._currentVisible) {\n      return new Deferred().resolve().promise();\n    }\n\n    this._currentVisible = true;\n\n    if (this._isHidingActionCanceled) {\n      delete this._isHidingActionCanceled;\n\n      this._showingDeferred.resolve();\n    } else {\n      var show = function show() {\n        _this12._renderVisibility(true);\n\n        if (_this12._isShowingActionCanceled) {\n          delete _this12._isShowingActionCanceled;\n\n          _this12._showingDeferred.resolve();\n\n          return;\n        }\n\n        _this12._animateShowing();\n      };\n\n      if (this.option(\"templatesRenderAsynchronously\")) {\n        this._stopShowTimer();\n\n        this._asyncShowTimeout = setTimeout(show);\n      } else {\n        show();\n      }\n    }\n\n    return this._showingDeferred.promise();\n  },\n  _normalizeAnimation: function _normalizeAnimation(animation, prop) {\n    if (animation) {\n      animation = extend({\n        type: \"slide\",\n        skipElementInitialStyles: true\n      }, animation);\n\n      if (animation[prop] && \"object\" === typeof animation[prop]) {\n        extend(animation[prop], {\n          position: this._positionController._position\n        });\n      }\n    }\n\n    return animation;\n  },\n  _animateHiding: function _animateHiding() {\n    var _this$_getAnimationCo2,\n        _hideAnimation$start,\n        _hideAnimation$comple,\n        _this4 = this;\n\n    var animation = null !== (_this$_getAnimationCo2 = this._getAnimationConfig()) && void 0 !== _this$_getAnimationCo2 ? _this$_getAnimationCo2 : {};\n\n    var hideAnimation = this._normalizeAnimation(animation.hide, \"from\");\n\n    var startHideAnimation = null !== (_hideAnimation$start = null === hideAnimation || void 0 === hideAnimation ? void 0 : hideAnimation.start) && void 0 !== _hideAnimation$start ? _hideAnimation$start : noop;\n    var completeHideAnimation = null !== (_hideAnimation$comple = null === hideAnimation || void 0 === hideAnimation ? void 0 : hideAnimation.complete) && void 0 !== _hideAnimation$comple ? _hideAnimation$comple : noop;\n\n    this._animate(hideAnimation, function () {\n      var _this4$_actions;\n\n      _this4._$content.css(\"pointerEvents\", \"\");\n\n      _this4._renderVisibility(false);\n\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      completeHideAnimation.call.apply(completeHideAnimation, [_this4].concat(args));\n      _this4._hideAnimationProcessing = false;\n      null === (_this4$_actions = _this4._actions) || void 0 === _this4$_actions ? void 0 : _this4$_actions.onHidden();\n\n      _this4._hidingDeferred.resolve();\n    }, function () {\n      _this4._$content.css(\"pointerEvents\", \"none\");\n\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      startHideAnimation.call.apply(startHideAnimation, [_this4].concat(args));\n      _this4._hideAnimationProcessing = true;\n    });\n  },\n  _hide: function _hide() {\n    if (!this._currentVisible) {\n      return new Deferred().resolve().promise();\n    }\n\n    this._currentVisible = false;\n    this._hidingDeferred = new Deferred();\n    var hidingArgs = {\n      cancel: false\n    };\n\n    if (this._isShowingActionCanceled) {\n      this._hidingDeferred.resolve();\n    } else {\n      this._actions.onHiding(hidingArgs);\n\n      this._toggleSafariScrolling();\n\n      if (hidingArgs.cancel) {\n        this._isHidingActionCanceled = true;\n        this.option(\"visible\", true);\n\n        this._hidingDeferred.resolve();\n      } else {\n        this._forceFocusLost();\n\n        this._toggleShading(false);\n\n        this._toggleSubscriptions(false);\n\n        this._stopShowTimer();\n\n        this._animateHiding();\n      }\n    }\n\n    return this._hidingDeferred.promise();\n  },\n  _forceFocusLost: function _forceFocusLost() {\n    var activeElement = domAdapter.getActiveElement();\n    var shouldResetActiveElement = !!this._$content.find(activeElement).length;\n\n    if (shouldResetActiveElement) {\n      resetActiveElement();\n    }\n  },\n  _animate: function _animate(animation, completeCallback, startCallback) {\n    if (animation) {\n      startCallback = startCallback || animation.start || noop;\n      fx.animate(this._$content, extend({}, animation, {\n        start: startCallback,\n        complete: completeCallback\n      }));\n    } else {\n      completeCallback();\n    }\n  },\n  _stopAnimation: function _stopAnimation() {\n    fx.stop(this._$content, true);\n  },\n  _renderVisibility: function _renderVisibility(visible) {\n    if (visible && this._isParentHidden()) {\n      return;\n    }\n\n    this._currentVisible = visible;\n\n    this._stopAnimation();\n\n    if (!visible) {\n      triggerHidingEvent(this._$content);\n    }\n\n    this._toggleVisibility(visible);\n\n    this._$content.toggleClass(INVISIBLE_STATE_CLASS, !visible);\n\n    this._updateZIndexStackPosition(visible);\n\n    if (visible) {\n      this._positionController.openingHandled();\n\n      this._renderContent();\n\n      var showingArgs = {\n        cancel: false\n      };\n\n      this._actions.onShowing(showingArgs);\n\n      if (showingArgs.cancel) {\n        this._toggleVisibility(false);\n\n        this._$content.toggleClass(INVISIBLE_STATE_CLASS, true);\n\n        this._updateZIndexStackPosition(false);\n\n        this._moveFromContainer();\n\n        this._isShowingActionCanceled = true;\n        this.option(\"visible\", false);\n        return;\n      }\n\n      this._moveToContainer();\n\n      this._renderGeometry();\n\n      triggerShownEvent(this._$content);\n      triggerResizeEvent(this._$content);\n    } else {\n      this._moveFromContainer();\n    }\n\n    this._toggleShading(visible);\n\n    this._toggleSubscriptions(visible);\n  },\n  _updateZIndexStackPosition: function _updateZIndexStackPosition(pushToStack) {\n    var overlayStack = this._overlayStack();\n\n    var index = inArray(this, overlayStack);\n\n    if (pushToStack) {\n      if (-1 === index) {\n        this._zIndex = zIndexPool.create(this._zIndexInitValue());\n        overlayStack.push(this);\n      }\n\n      this._$wrapper.css(\"zIndex\", this._zIndex);\n\n      this._$content.css(\"zIndex\", this._zIndex);\n    } else if (-1 !== index) {\n      overlayStack.splice(index, 1);\n      zIndexPool.remove(this._zIndex);\n    }\n  },\n  _toggleShading: function _toggleShading(visible) {\n    this._$wrapper.toggleClass(OVERLAY_MODAL_CLASS, this.option(\"shading\") && !this.option(\"container\"));\n\n    this._$wrapper.toggleClass(OVERLAY_SHADER_CLASS, visible && this.option(\"shading\"));\n\n    this._$wrapper.css(\"backgroundColor\", this.option(\"shading\") ? this.option(\"shadingColor\") : \"\");\n\n    this._toggleTabTerminator(visible && this.option(\"shading\"));\n  },\n  _initTabTerminatorHandler: function _initTabTerminatorHandler() {\n    var _this5 = this;\n\n    this._proxiedTabTerminatorHandler = function () {\n      _this5._tabKeyHandler.apply(_this5, arguments);\n    };\n  },\n  _toggleTabTerminator: function _toggleTabTerminator(enabled) {\n    var eventName = addNamespace(\"keydown\", this.NAME);\n\n    if (enabled) {\n      eventsEngine.on(domAdapter.getDocument(), eventName, this._proxiedTabTerminatorHandler);\n    } else {\n      eventsEngine.off(domAdapter.getDocument(), eventName, this._proxiedTabTerminatorHandler);\n    }\n  },\n  _findTabbableBounds: function _findTabbableBounds() {\n    var $elements = this._$wrapper.find(\"*\");\n\n    var elementsCount = $elements.length - 1;\n    var result = {\n      first: null,\n      last: null\n    };\n\n    for (var i = 0; i <= elementsCount; i++) {\n      if (!result.first && $elements.eq(i).is(tabbable)) {\n        result.first = $elements.eq(i);\n      }\n\n      if (!result.last && $elements.eq(elementsCount - i).is(tabbable)) {\n        result.last = $elements.eq(elementsCount - i);\n      }\n\n      if (result.first && result.last) {\n        break;\n      }\n    }\n\n    return result;\n  },\n  _tabKeyHandler: function _tabKeyHandler(e) {\n    if (normalizeKeyName(e) !== TAB_KEY || !this._isTopOverlay()) {\n      return;\n    }\n\n    var tabbableElements = this._findTabbableBounds();\n\n    var $firstTabbable = tabbableElements.first;\n    var $lastTabbable = tabbableElements.last;\n    var isTabOnLast = !e.shiftKey && e.target === $lastTabbable.get(0);\n    var isShiftTabOnFirst = e.shiftKey && e.target === $firstTabbable.get(0);\n    var isEmptyTabList = 0 === tabbableElements.length;\n    var isOutsideTarget = !contains(this._$wrapper.get(0), e.target);\n\n    if (isTabOnLast || isShiftTabOnFirst || isEmptyTabList || isOutsideTarget) {\n      e.preventDefault();\n      var $focusElement = e.shiftKey ? $lastTabbable : $firstTabbable;\n      eventsEngine.trigger($focusElement, \"focusin\");\n      eventsEngine.trigger($focusElement, \"focus\");\n    }\n  },\n  _toggleSubscriptions: function _toggleSubscriptions(enabled) {\n    if (hasWindow()) {\n      this._toggleHideTopOverlayCallback(enabled);\n\n      this._toggleParentsScrollSubscription(enabled);\n    }\n  },\n  _toggleHideTopOverlayCallback: function _toggleHideTopOverlayCallback(subscribe) {\n    if (!this._hideTopOverlayHandler) {\n      return;\n    }\n\n    if (subscribe) {\n      hideTopOverlayCallback.add(this._hideTopOverlayHandler);\n    } else {\n      hideTopOverlayCallback.remove(this._hideTopOverlayHandler);\n    }\n  },\n  _toggleParentsScrollSubscription: function _toggleParentsScrollSubscription(needSubscribe) {\n    var _this$_parentsScrollS;\n\n    var scrollEvent = addNamespace(\"scroll\", this.NAME);\n\n    var _ref = null !== (_this$_parentsScrollS = this._parentsScrollSubscriptionInfo) && void 0 !== _this$_parentsScrollS ? _this$_parentsScrollS : {},\n        prevTargets = _ref.prevTargets,\n        handler = _ref.handler;\n\n    eventsEngine.off(prevTargets, scrollEvent, handler);\n    var closeOnScroll = this.option(\"hideOnParentScroll\");\n\n    if (needSubscribe && closeOnScroll) {\n      var $parents = this._$wrapper.parents();\n\n      if (\"desktop\" === devices.real().deviceType) {\n        $parents = $parents.add(window);\n      }\n\n      eventsEngine.on($parents, scrollEvent, handler);\n      this._parentsScrollSubscriptionInfo.prevTargets = $parents;\n    }\n  },\n  _targetParentsScrollHandler: function _targetParentsScrollHandler(e) {\n    var closeHandled = false;\n    var closeOnScroll = this.option(\"hideOnParentScroll\");\n\n    if (isFunction(closeOnScroll)) {\n      closeHandled = closeOnScroll(e);\n    }\n\n    if (!closeHandled && !this._showAnimationProcessing) {\n      this.hide();\n    }\n  },\n  _render: function _render() {\n    this.callBase();\n\n    this._appendContentToElement();\n\n    this._renderVisibilityAnimate(this.option(\"visible\"));\n  },\n  _appendContentToElement: function _appendContentToElement() {\n    if (!this._$content.parent().is(this.$element())) {\n      this._$content.appendTo(this.$element());\n    }\n  },\n  _renderContent: function _renderContent() {\n    var shouldDeferRendering = !this._currentVisible && this.option(\"deferRendering\");\n\n    var isParentHidden = this.option(\"visible\") && this._isParentHidden();\n\n    if (isParentHidden) {\n      this._isHidden = true;\n      return;\n    }\n\n    if (this._contentAlreadyRendered || shouldDeferRendering) {\n      return;\n    }\n\n    this._contentAlreadyRendered = true;\n\n    this._appendContentToElement();\n\n    this.callBase();\n  },\n  _isParentHidden: function _isParentHidden() {\n    if (!this.option(\"_checkParentVisibility\")) {\n      return false;\n    }\n\n    if (void 0 !== this._parentHidden) {\n      return this._parentHidden;\n    }\n\n    var $parent = this.$element().parent();\n\n    if ($parent.is(\":visible\")) {\n      return false;\n    }\n\n    var isHidden = false;\n    $parent.add($parent.parents()).each(function () {\n      var $element = $(this);\n\n      if (\"none\" === $element.css(\"display\")) {\n        isHidden = true;\n        return false;\n      }\n    });\n    return isHidden || !domAdapter.getBody().contains($parent.get(0));\n  },\n  _renderContentImpl: function _renderContentImpl() {\n    var _this13 = this;\n\n    var whenContentRendered = new Deferred();\n    var contentTemplateOption = this.option(\"contentTemplate\");\n\n    var contentTemplate = this._getTemplate(contentTemplateOption);\n\n    var transclude = this._templateManager.anonymousTemplateName === contentTemplateOption;\n    contentTemplate && contentTemplate.render({\n      container: getPublicElement(this.$content()),\n      noModel: true,\n      transclude: transclude,\n      onRendered: function onRendered() {\n        whenContentRendered.resolve();\n      }\n    });\n\n    this._renderDrag();\n\n    this._renderResize();\n\n    this._renderScrollTerminator();\n\n    whenContentRendered.done(function () {\n      if (_this13.option(\"visible\")) {\n        _this13._moveToContainer();\n      }\n    });\n    return whenContentRendered.promise();\n  },\n  _getPositionControllerConfig: function _getPositionControllerConfig() {\n    var _this$option2 = this.option(),\n        target = _this$option2.target,\n        container = _this$option2.container,\n        dragAndResizeArea = _this$option2.dragAndResizeArea,\n        dragOutsideBoundary = _this$option2.dragOutsideBoundary,\n        outsideDragFactor = _this$option2.outsideDragFactor,\n        _fixWrapperPosition = _this$option2._fixWrapperPosition,\n        restorePosition = _this$option2.restorePosition;\n\n    return {\n      target: target,\n      container: container,\n      $root: this.$element(),\n      $content: this._$content,\n      $wrapper: this._$wrapper,\n      onPositioned: this._actions.onPositioned,\n      onVisualPositionChanged: this._actions.onVisualPositionChanged,\n      restorePosition: restorePosition,\n      dragAndResizeArea: dragAndResizeArea,\n      dragOutsideBoundary: dragOutsideBoundary,\n      outsideDragFactor: outsideDragFactor,\n      _fixWrapperPosition: _fixWrapperPosition\n    };\n  },\n  _initPositionController: function _initPositionController() {\n    this._positionController = new OverlayPositionController(this._getPositionControllerConfig());\n  },\n  _renderDrag: function _renderDrag() {\n    var $dragTarget = this._getDragTarget();\n\n    if (!$dragTarget) {\n      return;\n    }\n\n    var config = {\n      dragEnabled: this.option(\"dragEnabled\"),\n      handle: $dragTarget.get(0),\n      draggableElement: this._$content.get(0),\n      positionController: this._positionController\n    };\n\n    if (this._drag) {\n      this._drag.init(config);\n    } else {\n      this._drag = new OverlayDrag(config);\n    }\n  },\n  _renderResize: function _renderResize() {\n    var _this14 = this;\n\n    this._resizable = this._createComponent(this._$content, Resizable, {\n      handles: this.option(\"resizeEnabled\") ? \"all\" : \"none\",\n      onResizeEnd: function onResizeEnd(e) {\n        _this14._resizeEndHandler(e);\n\n        _this14._observeContentResize(true);\n      },\n      onResize: function onResize(e) {\n        _this14._actions.onResize(e);\n      },\n      onResizeStart: function onResizeStart(e) {\n        _this14._observeContentResize(false);\n\n        _this14._actions.onResizeStart(e);\n      },\n      minHeight: 100,\n      minWidth: 100,\n      area: this._positionController.$dragResizeContainer\n    });\n  },\n  _resizeEndHandler: function _resizeEndHandler(e) {\n    var width = this._resizable.option(\"width\");\n\n    var height = this._resizable.option(\"height\");\n\n    width && this._setOptionWithoutOptionChange(\"width\", width);\n    height && this._setOptionWithoutOptionChange(\"height\", height);\n\n    this._cacheDimensions();\n\n    this._positionController.resizeHandled();\n\n    this._positionController.detectVisualPositionChange(e.event);\n\n    this._actions.onResizeEnd(e);\n  },\n  _renderScrollTerminator: function _renderScrollTerminator() {\n    var $scrollTerminator = this._$wrapper;\n    var terminatorEventName = addNamespace(dragEventMove, this.NAME);\n    eventsEngine.off($scrollTerminator, terminatorEventName);\n    eventsEngine.on($scrollTerminator, terminatorEventName, {\n      validate: function validate() {\n        return true;\n      },\n      getDirection: function getDirection() {\n        return \"both\";\n      },\n      _toggleGestureCover: function _toggleGestureCover(toggle) {\n        if (!toggle) {\n          this._toggleGestureCoverImpl(toggle);\n        }\n      },\n      _clearSelection: noop,\n      isNative: true\n    }, function (e) {\n      var originalEvent = e.originalEvent.originalEvent;\n\n      var _ref2 = originalEvent || {},\n          type = _ref2.type;\n\n      var isWheel = \"wheel\" === type;\n      var isMouseMove = \"mousemove\" === type;\n      var isScrollByWheel = isWheel && !isCommandKeyPressed(e);\n      e._cancelPreventDefault = true;\n\n      if (originalEvent && false !== e.cancelable && (!isMouseMove && !isWheel || isScrollByWheel)) {\n        e.preventDefault();\n      }\n    });\n  },\n  _getDragTarget: function _getDragTarget() {\n    return this.$content();\n  },\n  _moveFromContainer: function _moveFromContainer() {\n    this._$content.appendTo(this.$element());\n\n    this._detachWrapperToContainer();\n  },\n  _detachWrapperToContainer: function _detachWrapperToContainer() {\n    this._$wrapper.detach();\n  },\n  _moveToContainer: function _moveToContainer() {\n    this._attachWrapperToContainer();\n\n    this._$content.appendTo(this._$wrapper);\n  },\n  _attachWrapperToContainer: function _attachWrapperToContainer() {\n    var $element = this.$element();\n    var containerDefined = void 0 !== this.option(\"container\");\n    var renderContainer = containerDefined ? this._positionController.$container : swatch.getSwatchContainer($element);\n\n    if (renderContainer && renderContainer[0] === $element.parent()[0]) {\n      renderContainer = $element;\n    }\n\n    this._$wrapper.appendTo(renderContainer);\n  },\n  _renderGeometry: function _renderGeometry(options) {\n    var _this$option3 = this.option(),\n        visible = _this$option3.visible,\n        useResizeObserver = _this$option3.useResizeObserver;\n\n    if (visible && hasWindow()) {\n      var isAnimated = this._showAnimationProcessing;\n      var shouldRepeatAnimation = isAnimated && !(null !== options && void 0 !== options && options.forceStopAnimation) && useResizeObserver;\n      this._isAnimationPaused = shouldRepeatAnimation || void 0;\n\n      this._stopAnimation();\n\n      if (null !== options && void 0 !== options && options.shouldOnlyReposition) {\n        this._positionController.positionContent();\n      } else {\n        this._renderGeometryImpl();\n      }\n\n      if (shouldRepeatAnimation) {\n        this._animateShowing();\n\n        this._isAnimationPaused = void 0;\n      }\n    }\n  },\n  _cacheDimensions: function _cacheDimensions() {\n    if (!this.option(\"useResizeObserver\")) {\n      return;\n    }\n\n    this._renderedDimensions = {\n      width: parseInt(getWidth(this._$content), 10),\n      height: parseInt(getHeight(this._$content), 10)\n    };\n  },\n  _renderGeometryImpl: function _renderGeometryImpl() {\n    this._positionController.updatePosition(this._getOptionValue(\"position\"));\n\n    this._renderWrapper();\n\n    this._renderDimensions();\n\n    this._renderPosition();\n\n    this._cacheDimensions();\n  },\n  _renderPosition: function _renderPosition() {\n    this._positionController.positionContent();\n  },\n  _isAllWindowCovered: function _isAllWindowCovered() {\n    return this._positionController.isAllWindowCoveredByWrapper() && this.option(\"shading\");\n  },\n  _toggleSafariScrolling: function _toggleSafariScrolling() {\n    var visible = this.option(\"visible\");\n    var $body = $(domAdapter.getBody());\n    var isIosSafari = \"ios\" === devices.real().platform && browser.safari;\n\n    var isAllWindowCovered = this._isAllWindowCovered();\n\n    var isScrollingPrevented = $body.hasClass(PREVENT_SAFARI_SCROLLING_CLASS);\n    var shouldPreventScrolling = !isScrollingPrevented && visible && isAllWindowCovered;\n    var shouldEnableScrolling = isScrollingPrevented && (!visible || !isAllWindowCovered || this._disposed);\n\n    if (isIosSafari) {\n      if (shouldEnableScrolling) {\n        $body.removeClass(PREVENT_SAFARI_SCROLLING_CLASS);\n        window.scrollTo(0, this._cachedBodyScrollTop);\n        this._cachedBodyScrollTop = void 0;\n      } else if (shouldPreventScrolling) {\n        this._cachedBodyScrollTop = window.pageYOffset;\n        $body.addClass(PREVENT_SAFARI_SCROLLING_CLASS);\n      }\n    }\n  },\n  _renderWrapper: function _renderWrapper() {\n    this._positionController.styleWrapperPosition();\n\n    this._renderWrapperDimensions();\n\n    this._positionController.positionWrapper();\n  },\n  _renderWrapperDimensions: function _renderWrapperDimensions() {\n    var wrapperWidth;\n    var wrapperHeight;\n    var $container = this._positionController._$wrapperCoveredElement;\n\n    if (!$container) {\n      return;\n    }\n\n    var isWindow = this._positionController.isAllWindowCoveredByWrapper();\n\n    var documentElement = domAdapter.getDocumentElement();\n    wrapperWidth = isWindow ? documentElement.clientWidth : getOuterWidth($container), wrapperHeight = isWindow ? window.innerHeight : getOuterHeight($container);\n\n    this._$wrapper.css({\n      width: wrapperWidth,\n      height: wrapperHeight\n    });\n  },\n  _renderDimensions: function _renderDimensions() {\n    var content = this._$content.get(0);\n\n    this._$content.css({\n      minWidth: this._getOptionValue(\"minWidth\", content),\n      maxWidth: this._getOptionValue(\"maxWidth\", content),\n      minHeight: this._getOptionValue(\"minHeight\", content),\n      maxHeight: this._getOptionValue(\"maxHeight\", content),\n      width: this._getOptionValue(\"width\", content),\n      height: this._getOptionValue(\"height\", content)\n    });\n  },\n  _focusTarget: function _focusTarget() {\n    return this._$content;\n  },\n  _attachKeyboardEvents: function _attachKeyboardEvents() {\n    var _this15 = this;\n\n    this._keyboardListenerId = keyboard.on(this._$content, null, function (opts) {\n      return _this15._keyboardHandler(opts);\n    });\n  },\n  _keyboardHandler: function _keyboardHandler(options) {\n    var e = options.originalEvent;\n    var $target = $(e.target);\n\n    if ($target.is(this._$content) || !this.option(\"ignoreChildEvents\")) {\n      this.callBase.apply(this, arguments);\n    }\n  },\n  _isVisible: function _isVisible() {\n    return this.option(\"visible\");\n  },\n  _visibilityChanged: function _visibilityChanged(visible) {\n    if (visible) {\n      if (this.option(\"visible\")) {\n        this._renderVisibilityAnimate(visible);\n      }\n    } else {\n      this._renderVisibilityAnimate(visible);\n    }\n  },\n  _dimensionChanged: function _dimensionChanged() {\n    this._renderGeometry();\n  },\n  _clean: function _clean() {\n    if (!this._contentAlreadyRendered) {\n      this.$content().empty();\n    }\n\n    this._renderVisibility(false);\n\n    this._stopShowTimer();\n\n    this._observeContentResize(false);\n\n    this._cleanFocusState();\n  },\n  _stopShowTimer: function _stopShowTimer() {\n    if (this._asyncShowTimeout) {\n      clearTimeout(this._asyncShowTimeout);\n    }\n\n    this._asyncShowTimeout = null;\n  },\n  _dispose: function _dispose() {\n    fx.stop(this._$content, false);\n    clearTimeout(this._deferShowTimer);\n\n    this._toggleViewPortSubscription(false);\n\n    this._toggleSubscriptions(false);\n\n    this._updateZIndexStackPosition(false);\n\n    this._toggleTabTerminator(false);\n\n    this._actions = null;\n    this._parentsScrollSubscriptionInfo = null;\n    this.callBase();\n\n    this._toggleSafariScrolling();\n\n    zIndexPool.remove(this._zIndex);\n\n    this._$wrapper.remove();\n\n    this._$content.remove();\n  },\n  _toggleRTLDirection: function _toggleRTLDirection(rtl) {\n    this._$content.toggleClass(RTL_DIRECTION_CLASS, rtl);\n  },\n  _optionChanged: function _optionChanged(args) {\n    var _this16 = this;\n\n    var _this$_resizable;\n\n    var value = args.value;\n\n    if (inArray(args.name, ACTIONS) > -1) {\n      this._initActions();\n\n      return;\n    }\n\n    switch (args.name) {\n      case \"dragEnabled\":\n        this._renderDrag();\n\n        this._renderGeometry();\n\n        break;\n\n      case \"resizeEnabled\":\n        this._renderResize();\n\n        this._renderGeometry();\n\n        break;\n\n      case \"shading\":\n        this._toggleShading(this.option(\"visible\"));\n\n        this._toggleSafariScrolling();\n\n        break;\n\n      case \"shadingColor\":\n        this._toggleShading(this.option(\"visible\"));\n\n        break;\n\n      case \"width\":\n      case \"height\":\n        this._renderGeometry();\n\n        null === (_this$_resizable = this._resizable) || void 0 === _this$_resizable ? void 0 : _this$_resizable.option(args.name, args.value);\n        break;\n\n      case \"minWidth\":\n      case \"maxWidth\":\n      case \"minHeight\":\n      case \"maxHeight\":\n        this._renderGeometry();\n\n        break;\n\n      case \"position\":\n        this._positionController.updatePosition(this.option(\"position\"));\n\n        this._positionController.restorePositionOnNextRender(true);\n\n        this._renderGeometry();\n\n        this._toggleSafariScrolling();\n\n        break;\n\n      case \"visible\":\n        this._renderVisibilityAnimate(value).done(function () {\n          if (!_this16._animateDeferred) {\n            return;\n          }\n\n          _this16._animateDeferred.resolveWith(_this16);\n        });\n\n        break;\n\n      case \"target\":\n        this._positionController.updateTarget(value);\n\n        this._setAnimationTarget(value);\n\n        this._invalidate();\n\n        break;\n\n      case \"container\":\n        this._positionController.updateContainer(value);\n\n        this._invalidate();\n\n        this._toggleSafariScrolling();\n\n        if (this.option(\"resizeEnabled\")) {\n          var _this$_resizable2;\n\n          null === (_this$_resizable2 = this._resizable) || void 0 === _this$_resizable2 ? void 0 : _this$_resizable2.option(\"area\", this._positionController.$dragResizeContainer);\n        }\n\n        break;\n\n      case \"innerOverlay\":\n        this._initInnerOverlayClass();\n\n        break;\n\n      case \"deferRendering\":\n      case \"contentTemplate\":\n        this._contentAlreadyRendered = false;\n\n        this._clean();\n\n        this._invalidate();\n\n        break;\n\n      case \"hideTopOverlayHandler\":\n        this._toggleHideTopOverlayCallback(false);\n\n        this._initHideTopOverlayHandler(args.value);\n\n        this._toggleHideTopOverlayCallback(this.option(\"visible\"));\n\n        break;\n\n      case \"hideOnParentScroll\":\n        this._toggleParentsScrollSubscription(this.option(\"visible\"));\n\n        break;\n\n      case \"closeOnOutsideClick\":\n      case \"propagateOutsideClick\":\n        break;\n\n      case \"animation\":\n        this._updateResizeCallbackSkipCondition();\n\n        break;\n\n      case \"rtlEnabled\":\n        this._contentAlreadyRendered = false;\n        this.callBase(args);\n        break;\n\n      case \"_fixWrapperPosition\":\n        this._positionController.fixWrapperPosition = value;\n        break;\n\n      case \"wrapperAttr\":\n        this._renderWrapperAttributes();\n\n        break;\n\n      case \"dragAndResizeArea\":\n        this._positionController.dragAndResizeArea = value;\n\n        if (this.option(\"resizeEnabled\")) {\n          this._resizable.option(\"area\", this._positionController.$dragResizeContainer);\n        }\n\n        this._positionController.positionContent();\n\n        break;\n\n      case \"dragOutsideBoundary\":\n        this._positionController.dragOutsideBoundary = value;\n\n        if (this.option(\"resizeEnabled\")) {\n          this._resizable.option(\"area\", this._positionController.$dragResizeContainer);\n        }\n\n        break;\n\n      case \"outsideDragFactor\":\n        this._positionController.outsideDragFactor = value;\n        break;\n\n      case \"restorePosition\":\n        this._positionController.restorePosition = args.value;\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  toggle: function toggle(showing) {\n    var _this17 = this;\n\n    showing = void 0 === showing ? !this.option(\"visible\") : showing;\n    var result = new Deferred();\n\n    if (showing === this.option(\"visible\")) {\n      return result.resolveWith(this, [showing]).promise();\n    }\n\n    var animateDeferred = new Deferred();\n    this._animateDeferred = animateDeferred;\n    this.option(\"visible\", showing);\n    animateDeferred.promise().done(function () {\n      delete _this17._animateDeferred;\n      result.resolveWith(_this17, [_this17.option(\"visible\")]);\n    });\n    return result.promise();\n  },\n  $content: function $content() {\n    return this._$content;\n  },\n  show: function show() {\n    return this.toggle(true);\n  },\n  hide: function hide() {\n    return this.toggle(false);\n  },\n  content: function content() {\n    return getPublicElement(this._$content);\n  },\n  repaint: function repaint() {\n    if (this._contentAlreadyRendered) {\n      this._positionController.restorePositionOnNextRender(true);\n\n      this._renderGeometry({\n        forceStopAnimation: true\n      });\n\n      triggerResizeEvent(this._$content);\n    } else {\n      this.callBase();\n    }\n  }\n});\n\nOverlay.baseZIndex = function (zIndex) {\n  return zIndexPool.base(zIndex);\n};\n\nregisterComponent(\"dxOverlay\", Overlay);\nexport default Overlay;","map":null,"metadata":{},"sourceType":"module"}