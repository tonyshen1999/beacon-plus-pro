{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/renovation/ui/editors/check_box/check_box.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"accessKey\", \"activeStateEnabled\", \"aria\", \"className\", \"defaultValue\", \"disabled\", \"focusStateEnabled\", \"height\", \"hint\", \"hoverStateEnabled\", \"iconSize\", \"isValid\", \"name\", \"onClick\", \"onFocusIn\", \"onKeyDown\", \"readOnly\", \"rtlEnabled\", \"saveValueChangeEvent\", \"tabIndex\", \"text\", \"validationError\", \"validationErrors\", \"validationMessageMode\", \"validationStatus\", \"value\", \"valueChange\", \"visible\", \"width\"];\nimport { createVNode, createFragment, createComponentVNode, normalizeProps } from \"inferno\";\nimport { Fragment } from \"inferno\";\nimport { InfernoWrapperComponent } from \"@devextreme/runtime/inferno\";\nimport { createDefaultOptionRules, convertRulesToOptions } from \"../../../../core/options/utils\";\nimport devices from \"../../../../core/devices\";\nimport { Editor, EditorProps } from \"../internal/editor\";\nimport { combineClasses } from \"../../../utils/combine_classes\";\nimport { CheckBoxIcon } from \"./check_box_icon\";\nimport { WidgetProps } from \"../../common/widget\";\n\nvar getCssClasses = function getCssClasses(model) {\n  var text = model.text,\n      value = model.value;\n  var checked = value;\n  var indeterminate = null === checked;\n  var classesMap = {\n    \"dx-checkbox\": true,\n    \"dx-checkbox-checked\": true === checked,\n    \"dx-checkbox-has-text\": !!text,\n    \"dx-checkbox-indeterminate\": indeterminate\n  };\n  return combineClasses(classesMap);\n};\n\nexport var viewFunction = function viewFunction(viewModel) {\n  var aria = viewModel.aria,\n      classes = viewModel.cssClasses,\n      editorRef = viewModel.editorRef,\n      onKeyDown = viewModel.keyDown,\n      onClick = viewModel.onWidgetClick,\n      _viewModel$props = viewModel.props,\n      accessKey = _viewModel$props.accessKey,\n      activeStateEnabled = _viewModel$props.activeStateEnabled,\n      className = _viewModel$props.className,\n      disabled = _viewModel$props.disabled,\n      focusStateEnabled = _viewModel$props.focusStateEnabled,\n      height = _viewModel$props.height,\n      hint = _viewModel$props.hint,\n      hoverStateEnabled = _viewModel$props.hoverStateEnabled,\n      iconSize = _viewModel$props.iconSize,\n      isValid = _viewModel$props.isValid,\n      name = _viewModel$props.name,\n      onFocusIn = _viewModel$props.onFocusIn,\n      readOnly = _viewModel$props.readOnly,\n      rtlEnabled = _viewModel$props.rtlEnabled,\n      tabIndex = _viewModel$props.tabIndex,\n      text = _viewModel$props.text,\n      validationError = _viewModel$props.validationError,\n      validationErrors = _viewModel$props.validationErrors,\n      validationMessageMode = _viewModel$props.validationMessageMode,\n      validationStatus = _viewModel$props.validationStatus,\n      value = _viewModel$props.value,\n      visible = _viewModel$props.visible,\n      width = _viewModel$props.width,\n      restAttributes = viewModel.restAttributes;\n  return normalizeProps(createComponentVNode(2, Editor, _extends({\n    aria: aria,\n    classes: classes,\n    onClick: onClick,\n    onKeyDown: onKeyDown,\n    accessKey: accessKey,\n    activeStateEnabled: activeStateEnabled,\n    focusStateEnabled: focusStateEnabled,\n    hoverStateEnabled: hoverStateEnabled,\n    className: className,\n    disabled: disabled,\n    readOnly: readOnly,\n    hint: hint,\n    height: height,\n    width: width,\n    rtlEnabled: rtlEnabled,\n    tabIndex: tabIndex,\n    visible: visible,\n    validationError: validationError,\n    validationErrors: validationErrors,\n    validationMessageMode: validationMessageMode,\n    validationStatus: validationStatus,\n    isValid: isValid,\n    onFocusIn: onFocusIn\n  }, restAttributes, {\n    children: createFragment([normalizeProps(createVNode(64, \"input\", null, null, 1, _extends({\n      type: \"hidden\",\n      value: \"\".concat(value)\n    }, name && {\n      name: name\n    }))), createVNode(1, \"div\", \"dx-checkbox-container\", [createComponentVNode(2, CheckBoxIcon, {\n      size: iconSize,\n      isChecked: true === value\n    }), text && createVNode(1, \"span\", \"dx-checkbox-text\", text, 0)], 0)], 4)\n  }), null, editorRef));\n};\nexport var CheckBoxProps = Object.create(Object.prototype, _extends(Object.getOwnPropertyDescriptors(EditorProps), Object.getOwnPropertyDescriptors({\n  text: \"\",\n  activeStateEnabled: true,\n  hoverStateEnabled: true,\n  defaultValue: false,\n  valueChange: function valueChange() {}\n})));\nexport var CheckBoxPropsType = {\n  get text() {\n    return CheckBoxProps.text;\n  },\n\n  get activeStateEnabled() {\n    return CheckBoxProps.activeStateEnabled;\n  },\n\n  get hoverStateEnabled() {\n    return CheckBoxProps.hoverStateEnabled;\n  },\n\n  get defaultValue() {\n    return CheckBoxProps.defaultValue;\n  },\n\n  get valueChange() {\n    return CheckBoxProps.valueChange;\n  },\n\n  get readOnly() {\n    return CheckBoxProps.readOnly;\n  },\n\n  get name() {\n    return CheckBoxProps.name;\n  },\n\n  get validationError() {\n    return CheckBoxProps.validationError;\n  },\n\n  get validationErrors() {\n    return CheckBoxProps.validationErrors;\n  },\n\n  get validationMessageMode() {\n    return CheckBoxProps.validationMessageMode;\n  },\n\n  get validationStatus() {\n    return CheckBoxProps.validationStatus;\n  },\n\n  get isValid() {\n    return CheckBoxProps.isValid;\n  },\n\n  get className() {\n    return CheckBoxProps.className;\n  },\n\n  get disabled() {\n    return CheckBoxProps.disabled;\n  },\n\n  get focusStateEnabled() {\n    return CheckBoxProps.focusStateEnabled;\n  },\n\n  get rtlEnabled() {\n    return CheckBoxProps.rtlEnabled;\n  },\n\n  get tabIndex() {\n    return CheckBoxProps.tabIndex;\n  },\n\n  get visible() {\n    return CheckBoxProps.visible;\n  },\n\n  get aria() {\n    return WidgetProps.aria;\n  }\n\n};\nexport var defaultOptionRules = createDefaultOptionRules([{\n  device: function device() {\n    return \"desktop\" === devices.real().deviceType && !devices.isSimulator();\n  },\n  options: {\n    focusStateEnabled: true\n  }\n}]);\nimport { createReRenderEffect } from \"@devextreme/runtime/inferno\";\nimport { createRef as infernoCreateRef } from \"inferno\";\nexport var CheckBox = /*#__PURE__*/function (_InfernoWrapperCompon) {\n  _inherits(CheckBox, _InfernoWrapperCompon);\n\n  var _super = _createSuper(CheckBox);\n\n  function CheckBox(props) {\n    var _this;\n\n    _classCallCheck(this, CheckBox);\n\n    _this = _super.call(this, props);\n    _this.editorRef = infernoCreateRef();\n    _this.state = {\n      value: void 0 !== _this.props.value ? _this.props.value : _this.props.defaultValue\n    };\n    _this.focus = _this.focus.bind(_assertThisInitialized(_this));\n    _this.blur = _this.blur.bind(_assertThisInitialized(_this));\n    _this.onWidgetClick = _this.onWidgetClick.bind(_assertThisInitialized(_this));\n    _this.keyDown = _this.keyDown.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(CheckBox, [{\n    key: \"createEffects\",\n    value: function createEffects() {\n      return [createReRenderEffect()];\n    }\n  }, {\n    key: \"onWidgetClick\",\n    value: function onWidgetClick(event) {\n      var _ref;\n\n      var _this$props = this.props,\n          readOnly = _this$props.readOnly,\n          saveValueChangeEvent = _this$props.saveValueChangeEvent;\n      var value = null !== (_ref = void 0 !== this.props.value ? this.props.value : this.state.value) && void 0 !== _ref ? _ref : false;\n\n      if (!readOnly) {\n        null === saveValueChangeEvent || void 0 === saveValueChangeEvent ? void 0 : saveValueChangeEvent(event);\n\n        var __newValue;\n\n        this.setState(function (__state_argument) {\n          __newValue = !value;\n          return {\n            value: __newValue\n          };\n        });\n        this.props.valueChange(__newValue);\n      }\n    }\n  }, {\n    key: \"keyDown\",\n    value: function keyDown(e) {\n      var onKeyDown = this.props.onKeyDown;\n      var keyName = e.keyName,\n          originalEvent = e.originalEvent,\n          which = e.which;\n      var result = null === onKeyDown || void 0 === onKeyDown ? void 0 : onKeyDown(e);\n\n      if (null !== result && void 0 !== result && result.cancel) {\n        return result;\n      }\n\n      if (\"space\" === keyName || \"space\" === which) {\n        originalEvent.preventDefault();\n        this.onWidgetClick(originalEvent);\n      }\n\n      return;\n    }\n  }, {\n    key: \"cssClasses\",\n    get: function get() {\n      return getCssClasses(_extends({}, this.props, {\n        value: void 0 !== this.props.value ? this.props.value : this.state.value\n      }));\n    }\n  }, {\n    key: \"aria\",\n    get: function get() {\n      var checked = true === (void 0 !== this.props.value ? this.props.value : this.state.value);\n      var indeterminate = null === (void 0 !== this.props.value ? this.props.value : this.state.value);\n      var result = {\n        role: \"checkbox\",\n        checked: indeterminate ? \"mixed\" : \"\".concat(checked)\n      };\n      return _extends({}, result, this.props.aria);\n    }\n  }, {\n    key: \"restAttributes\",\n    get: function get() {\n      var _this$props$value = _extends({}, this.props, {\n        value: void 0 !== this.props.value ? this.props.value : this.state.value\n      }),\n          restProps = _objectWithoutPropertiesLoose(_this$props$value, _excluded);\n\n      return restProps;\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this.editorRef.current.focus();\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      this.editorRef.current.blur();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var props = this.props;\n      return viewFunction({\n        props: _extends({}, props, {\n          value: void 0 !== this.props.value ? this.props.value : this.state.value\n        }),\n        editorRef: this.editorRef,\n        onWidgetClick: this.onWidgetClick,\n        keyDown: this.keyDown,\n        cssClasses: this.cssClasses,\n        aria: this.aria,\n        restAttributes: this.restAttributes\n      });\n    }\n  }]);\n\n  return CheckBox;\n}(InfernoWrapperComponent);\n\nfunction __processTwoWayProps(defaultProps) {\n  var twoWayProps = [\"value\"];\n  return Object.keys(defaultProps).reduce(function (props, propName) {\n    var propValue = defaultProps[propName];\n    var defaultPropName = twoWayProps.some(function (p) {\n      return p === propName;\n    }) ? \"default\" + propName.charAt(0).toUpperCase() + propName.slice(1) : propName;\n    props[defaultPropName] = propValue;\n    return props;\n  }, {});\n}\n\nCheckBox.defaultProps = Object.create(Object.prototype, _extends(Object.getOwnPropertyDescriptors(CheckBoxPropsType), Object.getOwnPropertyDescriptors(_extends({}, __processTwoWayProps(convertRulesToOptions(defaultOptionRules))))));\nvar __defaultOptionRules = [];\nexport function defaultOptions(rule) {\n  __defaultOptionRules.push(rule);\n\n  CheckBox.defaultProps = Object.create(Object.prototype, _extends(Object.getOwnPropertyDescriptors(CheckBox.defaultProps), Object.getOwnPropertyDescriptors(__processTwoWayProps(convertRulesToOptions(defaultOptionRules))), Object.getOwnPropertyDescriptors(__processTwoWayProps(convertRulesToOptions(__defaultOptionRules)))));\n}","map":null,"metadata":{},"sourceType":"module"}