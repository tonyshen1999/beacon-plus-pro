{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.data_source_adapter.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport Callbacks from \"../../core/utils/callbacks\";\nimport gridCore from \"../data_grid/ui.data_grid.core\";\nimport { executeAsync, getKeyHash } from \"../../core/utils/common\";\nimport { isDefined, isPlainObject, isFunction } from \"../../core/utils/type\";\nimport { each } from \"../../core/utils/iterator\";\nimport { extend } from \"../../core/utils/extend\";\nimport ArrayStore from \"../../data/array_store\";\nimport { applyBatch } from \"../../data/array_utils\";\nimport { when, Deferred } from \"../../core/utils/deferred\";\nexport default gridCore.Controller.inherit(function () {\n  function cloneItems(items, groupCount) {\n    if (items) {\n      items = items.slice(0);\n\n      if (groupCount) {\n        for (var i = 0; i < items.length; i++) {\n          items[i] = extend({\n            key: items[i].key\n          }, items[i]);\n          items[i].items = cloneItems(items[i].items, groupCount - 1);\n        }\n      }\n    }\n\n    return items;\n  }\n\n  function calculateOperationTypes(loadOptions, lastLoadOptions, isFullReload) {\n    var operationTypes = {\n      reload: true,\n      fullReload: true\n    };\n\n    if (lastLoadOptions) {\n      operationTypes = {\n        sorting: !gridCore.equalSortParameters(loadOptions.sort, lastLoadOptions.sort),\n        grouping: !gridCore.equalSortParameters(loadOptions.group, lastLoadOptions.group, true),\n        groupExpanding: !gridCore.equalSortParameters(loadOptions.group, lastLoadOptions.group) || lastLoadOptions.groupExpand,\n        filtering: !gridCore.equalFilterParameters(loadOptions.filter, lastLoadOptions.filter),\n        pageIndex: loadOptions.pageIndex !== lastLoadOptions.pageIndex,\n        skip: loadOptions.skip !== lastLoadOptions.skip,\n        take: loadOptions.take !== lastLoadOptions.take,\n        pageSize: loadOptions.pageSize !== lastLoadOptions.pageSize,\n        fullReload: isFullReload\n      };\n      operationTypes.reload = isFullReload || operationTypes.sorting || operationTypes.grouping || operationTypes.filtering;\n      operationTypes.paging = operationTypes.pageIndex || operationTypes.pageSize || operationTypes.take;\n    }\n\n    return operationTypes;\n  }\n\n  function getPageDataFromCache(options, updatePaging) {\n    var groupCount = gridCore.normalizeSortingInfo(options.group || options.storeLoadOptions.group || options.loadOptions.group).length;\n    var items = [];\n\n    if (fillItemsFromCache(items, options, groupCount)) {\n      return items;\n    } else if (updatePaging) {\n      !function (cacheItemsFromBegin, options, groupCount) {\n        var cacheItemBeginCount = cacheItemsFromBegin.length;\n        var storeLoadOptions = options.storeLoadOptions;\n\n        if (void 0 !== storeLoadOptions.skip && storeLoadOptions.take && !groupCount) {\n          var cacheItemsFromEnd = [];\n          fillItemsFromCache(cacheItemsFromEnd, options, groupCount, true);\n          var cacheItemEndCount = cacheItemsFromEnd.length;\n\n          if (cacheItemBeginCount || cacheItemEndCount) {\n            var _options$skip2, _options$take2;\n\n            options.skip = null !== (_options$skip2 = options.skip) && void 0 !== _options$skip2 ? _options$skip2 : storeLoadOptions.skip;\n            options.take = null !== (_options$take2 = options.take) && void 0 !== _options$take2 ? _options$take2 : storeLoadOptions.take;\n          }\n\n          if (cacheItemBeginCount) {\n            storeLoadOptions.skip += cacheItemBeginCount;\n            storeLoadOptions.take -= cacheItemBeginCount;\n            options.cachedDataPartBegin = cacheItemsFromBegin;\n          }\n\n          if (cacheItemEndCount) {\n            storeLoadOptions.take -= cacheItemEndCount;\n            options.cachedDataPartEnd = cacheItemsFromEnd.reverse();\n          }\n        }\n      }(items, options, groupCount);\n    }\n  }\n\n  function fillItemsFromCache(items, options, groupCount, fromEnd) {\n    var _ref, _options$take, _options$cachedData;\n\n    var storeLoadOptions = options.storeLoadOptions;\n    var take = null !== (_ref = null !== (_options$take = options.take) && void 0 !== _options$take ? _options$take : storeLoadOptions.take) && void 0 !== _ref ? _ref : 0;\n    var cachedItems = null === (_options$cachedData = options.cachedData) || void 0 === _options$cachedData ? void 0 : _options$cachedData.items;\n\n    if (take && cachedItems) {\n      var _ref2, _options$skip;\n\n      var skip = null !== (_ref2 = null !== (_options$skip = options.skip) && void 0 !== _options$skip ? _options$skip : storeLoadOptions.skip) && void 0 !== _ref2 ? _ref2 : 0;\n\n      for (var i = 0; i < take; i++) {\n        var localIndex = fromEnd ? take - 1 - i : i;\n        var cacheItemIndex = localIndex + skip;\n        var cacheItem = cachedItems[cacheItemIndex];\n\n        if (void 0 === cacheItem && cacheItemIndex in cachedItems) {\n          return true;\n        }\n\n        var item = getItemFromCache(options, cacheItem, groupCount, localIndex, take);\n\n        if (item) {\n          items.push(item);\n        } else {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  function getItemFromCache(options, cacheItem, groupCount, index, take) {\n    if (groupCount && cacheItem) {\n      var skips = 0 === index && options.skips || [];\n      var takes = index === take - 1 && options.takes || [];\n      return function getGroupItemFromCache(cacheItem, groupCount, skips, takes) {\n        if (groupCount && cacheItem) {\n          var result = _extends({}, cacheItem);\n\n          var skip = skips[0] || 0;\n          var take = takes[0];\n          var items = cacheItem.items;\n\n          if (items) {\n            if (void 0 === take && !items[skip]) {\n              return;\n            }\n\n            result.items = [];\n\n            if (skips.length) {\n              result.isContinuation = true;\n            }\n\n            if (takes.length) {\n              result.isContinuationOnNextPage = true;\n            }\n\n            for (var i = 0; void 0 === take ? items[i + skip] : i < take; i++) {\n              var childCacheItem = items[i + skip];\n              var item = getGroupItemFromCache(childCacheItem, groupCount - 1, skips.slice(1), takes.slice(1));\n\n              if (void 0 !== item) {\n                result.items.push(item);\n              } else {\n                return;\n              }\n            }\n          }\n\n          return result;\n        }\n\n        return cacheItem;\n      }(cacheItem, groupCount, skips, takes);\n    } else {\n      return cacheItem;\n    }\n  }\n\n  function getCacheItem(cacheItem, loadedItem, groupCount, skips) {\n    if (groupCount && loadedItem) {\n      var result = _extends({}, loadedItem);\n\n      delete result.isContinuation;\n      delete result.isContinuationOnNextPage;\n      var skip = skips[0] || 0;\n\n      if (loadedItem.items) {\n        result.items = (null === cacheItem || void 0 === cacheItem ? void 0 : cacheItem.items) || {};\n        loadedItem.items.forEach(function (item, index) {\n          var globalIndex = index + skip;\n          var childSkips = 0 === index ? skips.slice(1) : [];\n          result.items[globalIndex] = getCacheItem(result.items[globalIndex], item, groupCount - 1, childSkips);\n        });\n      }\n\n      return result;\n    }\n\n    return loadedItem;\n  }\n\n  return {\n    init: function init(dataSource, remoteOperations) {\n      var that = this;\n      that._dataSource = dataSource;\n      that._remoteOperations = remoteOperations || {};\n      that._isLastPage = !dataSource.isLastPage();\n      that._hasLastPage = false;\n      that._currentTotalCount = 0;\n      that._cachedData = {\n        items: {}\n      };\n      that._lastOperationTypes = {};\n      that._eventsStrategy = dataSource._eventsStrategy;\n      that._totalCountCorrection = 0;\n      that._isLoadingAll = false;\n      that.changed = Callbacks();\n      that.loadingChanged = Callbacks();\n      that.loadError = Callbacks();\n      that.customizeStoreLoadOptions = Callbacks();\n      that.changing = Callbacks();\n      that.pushed = Callbacks();\n      that._dataChangedHandler = that._handleDataChanged.bind(that);\n      that._customizeStoreLoadOptionsHandler = that._handleCustomizeStoreLoadOptions.bind(that);\n      that._dataLoadedHandler = that._handleDataLoaded.bind(that);\n      that._loadingChangedHandler = that._handleLoadingChanged.bind(that);\n      that._loadErrorHandler = that._handleLoadError.bind(that);\n      that._pushHandler = that._handlePush.bind(that);\n      that._changingHandler = that._handleChanging.bind(that);\n      dataSource.on(\"changed\", that._dataChangedHandler);\n      dataSource.on(\"customizeStoreLoadOptions\", that._customizeStoreLoadOptionsHandler);\n      dataSource.on(\"customizeLoadResult\", that._dataLoadedHandler);\n      dataSource.on(\"loadingChanged\", that._loadingChangedHandler);\n      dataSource.on(\"loadError\", that._loadErrorHandler);\n      dataSource.on(\"changing\", that._changingHandler);\n      dataSource.store().on(\"beforePush\", that._pushHandler);\n      each(dataSource, function (memberName, member) {\n        if (!that[memberName] && isFunction(member)) {\n          that[memberName] = function () {\n            return this._dataSource[memberName].apply(this._dataSource, arguments);\n          };\n        }\n      });\n    },\n    remoteOperations: function remoteOperations() {\n      return this._remoteOperations;\n    },\n    dispose: function dispose(isSharedDataSource) {\n      var dataSource = this._dataSource;\n      var store = dataSource.store();\n      dataSource.off(\"changed\", this._dataChangedHandler);\n      dataSource.off(\"customizeStoreLoadOptions\", this._customizeStoreLoadOptionsHandler);\n      dataSource.off(\"customizeLoadResult\", this._dataLoadedHandler);\n      dataSource.off(\"loadingChanged\", this._loadingChangedHandler);\n      dataSource.off(\"loadError\", this._loadErrorHandler);\n      dataSource.off(\"changing\", this._changingHandler);\n      store && store.off(\"beforePush\", this._pushHandler);\n\n      if (!isSharedDataSource) {\n        dataSource.dispose();\n      }\n    },\n    refresh: function refresh(options, operationTypes) {\n      var dataSource = this._dataSource;\n\n      if (operationTypes.reload) {\n        this.resetCurrentTotalCount();\n        this._isLastPage = !dataSource.paginate();\n        this._hasLastPage = this._isLastPage;\n      }\n    },\n    resetCurrentTotalCount: function resetCurrentTotalCount() {\n      this._currentTotalCount = 0;\n      this._totalCountCorrection = 0;\n    },\n    resetCache: function resetCache() {\n      this._cachedStoreData = void 0;\n      this._cachedPagingData = void 0;\n    },\n    resetPagesCache: function resetPagesCache() {\n      this._cachedData = {\n        items: {}\n      };\n    },\n    _needClearStoreDataCache: function _needClearStoreDataCache() {\n      var remoteOperations = this.remoteOperations();\n      var operationTypes = calculateOperationTypes(this._lastLoadOptions || {}, {});\n      var isLocalOperations = Object.keys(remoteOperations).every(function (operationName) {\n        return !operationTypes[operationName] || !remoteOperations[operationName];\n      });\n      return !isLocalOperations;\n    },\n    push: function push(changes, fromStore) {\n      var store = this.store();\n\n      if (this._needClearStoreDataCache()) {\n        this._cachedStoreData = void 0;\n      }\n\n      this._cachedPagingData = void 0;\n      this.resetPagesCache(true);\n\n      if (this._cachedStoreData) {\n        applyBatch({\n          keyInfo: store,\n          data: this._cachedStoreData,\n          changes: changes\n        });\n      }\n\n      if (!fromStore) {\n        this._applyBatch(changes);\n      }\n\n      this.pushed.fire(changes);\n    },\n    getDataIndexGetter: function getDataIndexGetter() {\n      var _this = this;\n\n      if (!this._dataIndexGetter) {\n        var indexByKey;\n        var storeData;\n        var store = this.store();\n\n        this._dataIndexGetter = function (data) {\n          var isCacheUpdated = storeData && storeData !== _this._cachedStoreData;\n\n          if (!indexByKey || isCacheUpdated) {\n            storeData = _this._cachedStoreData || [];\n            indexByKey = {};\n\n            for (var i = 0; i < storeData.length; i++) {\n              indexByKey[getKeyHash(store.keyOf(storeData[i]))] = i;\n            }\n          }\n\n          return indexByKey[getKeyHash(store.keyOf(data))];\n        };\n      }\n\n      return this._dataIndexGetter;\n    },\n    _getKeyInfo: function _getKeyInfo() {\n      return this.store();\n    },\n    _applyBatch: function _applyBatch(changes) {\n      var _this2 = this;\n\n      var keyInfo = this._getKeyInfo();\n\n      var dataSource = this._dataSource;\n      var groupCount = gridCore.normalizeSortingInfo(this.group()).length;\n      var totalCount = this.totalCount();\n      var isVirtualMode = \"virtual\" === this.option(\"scrolling.mode\");\n      changes = changes.filter(function (change) {\n        return !dataSource.paginate() || \"insert\" !== change.type || void 0 !== change.index;\n      });\n\n      var getItemCount = function getItemCount() {\n        return groupCount ? _this2.itemsCount() : _this2.items().length;\n      };\n\n      var oldItemCount = getItemCount();\n      applyBatch({\n        keyInfo: keyInfo,\n        data: this._items,\n        changes: changes,\n        groupCount: groupCount,\n        useInsertIndex: true\n      });\n      applyBatch({\n        keyInfo: keyInfo,\n        data: dataSource.items(),\n        changes: changes,\n        groupCount: groupCount,\n        useInsertIndex: true\n      });\n\n      if (this._currentTotalCount > 0 || isVirtualMode && totalCount === oldItemCount) {\n        this._totalCountCorrection += getItemCount() - oldItemCount;\n      }\n\n      changes.splice(0, changes.length);\n    },\n    _handlePush: function _handlePush(_ref5) {\n      var changes = _ref5.changes;\n      this.push(changes, true);\n    },\n    _handleChanging: function _handleChanging(e) {\n      this.changing.fire(e);\n\n      this._applyBatch(e.changes);\n    },\n    _needCleanCacheByOperation: function _needCleanCacheByOperation(operationType, remoteOperations) {\n      var operationTypesByOrder = [\"filtering\", \"sorting\", \"paging\"];\n      var operationTypeIndex = operationTypesByOrder.indexOf(operationType);\n      var currentOperationTypes = operationTypeIndex >= 0 ? operationTypesByOrder.slice(operationTypeIndex) : [operationType];\n      return currentOperationTypes.some(function (operationType) {\n        return remoteOperations[operationType];\n      });\n    },\n    _customizeRemoteOperations: function _customizeRemoteOperations(options, operationTypes) {\n      var _this3 = this;\n\n      var cachedStoreData = this._cachedStoreData;\n      var cachedPagingData = this._cachedPagingData;\n      var cachedData = this._cachedData;\n\n      if (options.storeLoadOptions.filter && !options.remoteOperations.filtering || options.storeLoadOptions.sort && !options.remoteOperations.sorting) {\n        options.remoteOperations = {\n          filtering: options.remoteOperations.filtering\n        };\n      }\n\n      if (operationTypes.fullReload) {\n        cachedStoreData = void 0;\n        cachedPagingData = void 0;\n        cachedData = {\n          items: {}\n        };\n      } else {\n        if (operationTypes.reload) {\n          cachedPagingData = void 0;\n          cachedData = {\n            items: {}\n          };\n        } else if (operationTypes.groupExpanding) {\n          cachedData = {\n            items: {}\n          };\n        }\n\n        each(operationTypes, function (operationType, value) {\n          if (value && _this3._needCleanCacheByOperation(operationType, options.remoteOperations)) {\n            cachedStoreData = void 0;\n            cachedPagingData = void 0;\n          }\n        });\n      }\n\n      if (cachedPagingData) {\n        options.remoteOperations.paging = false;\n      }\n\n      options.cachedStoreData = cachedStoreData;\n      options.cachedPagingData = cachedPagingData;\n      options.cachedData = cachedData;\n\n      if (!options.isCustomLoading) {\n        this._cachedStoreData = cachedStoreData;\n        this._cachedPagingData = cachedPagingData;\n        this._cachedData = cachedData;\n      }\n    },\n    _handleCustomizeStoreLoadOptions: function _handleCustomizeStoreLoadOptions(options) {\n      var _options$data;\n\n      this._handleDataLoading(options);\n\n      if (!(0 === (null === (_options$data = options.data) || void 0 === _options$data ? void 0 : _options$data.length))) {\n        options.data = getPageDataFromCache(options, true) || options.cachedStoreData;\n      }\n    },\n    _handleDataLoading: function _handleDataLoading(options) {\n      var _this4 = this;\n\n      var dataSource = this._dataSource;\n      var lastLoadOptions = this._lastLoadOptions;\n      this.customizeStoreLoadOptions.fire(options);\n      options.delay = this.option(\"loadingTimeout\");\n      options.originalStoreLoadOptions = options.storeLoadOptions;\n      options.remoteOperations = extend({}, this.remoteOperations());\n      var isFullReload = !this.isLoaded() && !this._isRefreshing;\n\n      if (this.option(\"integrationOptions.renderedOnServer\") && !this.isLoaded()) {\n        options.delay = void 0;\n      }\n\n      var loadOptions = extend({\n        pageIndex: this.pageIndex(),\n        pageSize: this.pageSize()\n      }, options.storeLoadOptions);\n      var operationTypes = calculateOperationTypes(loadOptions, lastLoadOptions, isFullReload);\n\n      this._customizeRemoteOperations(options, operationTypes);\n\n      if (!options.isCustomLoading) {\n        var isRefreshing = this._isRefreshing;\n        options.pageIndex = dataSource.pageIndex();\n        options.lastLoadOptions = loadOptions;\n        options.operationTypes = operationTypes;\n        this._loadingOperationTypes = operationTypes;\n        this._isRefreshing = true;\n        when(isRefreshing || this._isRefreshed || this.refresh(options, operationTypes)).done(function () {\n          if (_this4._lastOperationId === options.operationId) {\n            _this4._isRefreshed = true;\n\n            _this4.load().always(function () {\n              _this4._isRefreshed = false;\n            });\n          }\n        }).fail(function () {\n          dataSource.cancel(options.operationId);\n        }).always(function () {\n          _this4._isRefreshing = false;\n        });\n        dataSource.cancel(this._lastOperationId);\n        this._lastOperationId = options.operationId;\n\n        if (this._isRefreshing) {\n          dataSource.cancel(this._lastOperationId);\n        }\n      }\n\n      this._handleDataLoadingCore(options);\n    },\n    _handleDataLoadingCore: function _handleDataLoadingCore(options) {\n      var remoteOperations = options.remoteOperations;\n      options.loadOptions = {};\n      var cachedExtra = options.cachedData.extra;\n      var localLoadOptionNames = {\n        filter: !remoteOperations.filtering,\n        sort: !remoteOperations.sorting,\n        group: !remoteOperations.grouping,\n        summary: !remoteOperations.summary,\n        skip: !remoteOperations.paging,\n        take: !remoteOperations.paging,\n        requireTotalCount: cachedExtra && \"totalCount\" in cachedExtra || !remoteOperations.paging\n      };\n      each(options.storeLoadOptions, function (optionName, optionValue) {\n        if (localLoadOptionNames[optionName]) {\n          options.loadOptions[optionName] = optionValue;\n          delete options.storeLoadOptions[optionName];\n        }\n      });\n\n      if (cachedExtra) {\n        options.extra = cachedExtra;\n      }\n    },\n    _handleDataLoaded: function _handleDataLoaded(options) {\n      var _this5 = this;\n\n      var loadOptions = options.loadOptions;\n      var localPaging = options.remoteOperations && !options.remoteOperations.paging;\n      var cachedData = options.cachedData;\n      var storeLoadOptions = options.storeLoadOptions;\n      var needCache = false !== this.option(\"cacheEnabled\") && storeLoadOptions;\n      var needPageCache = needCache && !options.isCustomLoading && cachedData && (!localPaging || storeLoadOptions.group);\n      var needPagingCache = needCache && localPaging;\n      var needStoreCache = needPagingCache && !options.isCustomLoading;\n\n      if (!loadOptions) {\n        this._dataSource.cancel(options.operationId);\n\n        return;\n      }\n\n      if (localPaging) {\n        options.skip = loadOptions.skip;\n        options.take = loadOptions.take;\n        delete loadOptions.skip;\n        delete loadOptions.take;\n      }\n\n      if (loadOptions.group) {\n        loadOptions.group = options.group || loadOptions.group;\n      }\n\n      var groupCount = gridCore.normalizeSortingInfo(options.group || storeLoadOptions.group || loadOptions.group).length;\n\n      if (options.cachedDataPartBegin) {\n        options.data = options.cachedDataPartBegin.concat(options.data);\n      }\n\n      if (options.cachedDataPartEnd) {\n        options.data = options.data.concat(options.cachedDataPartEnd);\n      }\n\n      if (!needPageCache || !getPageDataFromCache(options)) {\n        if (needPagingCache && options.cachedPagingData) {\n          options.data = cloneItems(options.cachedPagingData, groupCount);\n        } else {\n          if (needStoreCache) {\n            if (!this._cachedStoreData) {\n              this._cachedStoreData = cloneItems(options.data, gridCore.normalizeSortingInfo(storeLoadOptions.group).length);\n            } else if (options.mergeStoreLoadData) {\n              options.data = this._cachedStoreData = this._cachedStoreData.concat(options.data);\n            }\n          }\n\n          new ArrayStore(options.data).load(loadOptions).done(function (data) {\n            options.data = data;\n\n            if (needStoreCache) {\n              _this5._cachedPagingData = cloneItems(options.data, groupCount);\n            }\n          }).fail(function (error) {\n            options.data = new Deferred().reject(error);\n          });\n        }\n\n        if (loadOptions.requireTotalCount && localPaging) {\n          options.extra = isPlainObject(options.extra) ? options.extra : {};\n          options.extra.totalCount = options.data.length;\n        }\n\n        if (options.extra && options.extra.totalCount >= 0 && (false === storeLoadOptions.requireTotalCount || false === loadOptions.requireTotalCount)) {\n          options.extra.totalCount = -1;\n        }\n\n        this._handleDataLoadedCore(options);\n\n        if (needPageCache) {\n          cachedData.extra = cachedData.extra || extend({}, options.extra);\n          when(options.data).done(function (data) {\n            !function (options, data, groupCount) {\n              var _ref3, _options$skip3, _ref4, _options$take3;\n\n              var storeLoadOptions = options.storeLoadOptions;\n              var skip = null !== (_ref3 = null !== (_options$skip3 = options.skip) && void 0 !== _options$skip3 ? _options$skip3 : storeLoadOptions.skip) && void 0 !== _ref3 ? _ref3 : 0;\n              var take = null !== (_ref4 = null !== (_options$take3 = options.take) && void 0 !== _options$take3 ? _options$take3 : storeLoadOptions.take) && void 0 !== _ref4 ? _ref4 : 0;\n\n              for (var i = 0; i < take; i++) {\n                var globalIndex = i + skip;\n                var cacheItems = options.cachedData.items;\n                var skips = 0 === i && options.skips || [];\n                cacheItems[globalIndex] = getCacheItem(cacheItems[globalIndex], data[i], groupCount, skips);\n              }\n            }(options, data, groupCount);\n          });\n        }\n      }\n\n      when(options.data).done(function () {\n        if (options.lastLoadOptions) {\n          _this5._lastLoadOptions = options.lastLoadOptions;\n          Object.keys(options.operationTypes).forEach(function (operationType) {\n            _this5._lastOperationTypes[operationType] = _this5._lastOperationTypes[operationType] || options.operationTypes[operationType];\n          });\n        }\n      });\n      options.storeLoadOptions = options.originalStoreLoadOptions;\n    },\n    _handleDataLoadedCore: function _handleDataLoadedCore(options) {\n      if (options.remoteOperations && !options.remoteOperations.paging && Array.isArray(options.data)) {\n        if (void 0 !== options.skip) {\n          options.data = options.data.slice(options.skip);\n        }\n\n        if (void 0 !== options.take) {\n          options.data = options.data.slice(0, options.take);\n        }\n      }\n    },\n    _handleLoadingChanged: function _handleLoadingChanged(isLoading) {\n      this.loadingChanged.fire(isLoading);\n    },\n    _handleLoadError: function _handleLoadError(error) {\n      this.loadError.fire(error);\n      this.changed.fire({\n        changeType: \"loadError\",\n        error: error\n      });\n    },\n    _loadPageSize: function _loadPageSize() {\n      return this.pageSize();\n    },\n    _handleDataChanged: function _handleDataChanged(args) {\n      var currentTotalCount;\n      var dataSource = this._dataSource;\n      var isLoading = false;\n      var isDataLoading = !args || isDefined(args.changeType);\n      var itemsCount = this.itemsCount();\n\n      if (isDataLoading) {\n        this._isLastPage = !itemsCount || !this._loadPageSize() || itemsCount < this._loadPageSize();\n\n        if (this._isLastPage) {\n          this._hasLastPage = true;\n        }\n      }\n\n      if (dataSource.totalCount() >= 0) {\n        if (dataSource.pageIndex() >= this.pageCount()) {\n          dataSource.pageIndex(this.pageCount() - 1);\n          this.pageIndex(dataSource.pageIndex());\n          this.resetPagesCache();\n          dataSource.load();\n          isLoading = true;\n        }\n      } else if (isDataLoading) {\n        currentTotalCount = dataSource.pageIndex() * this.pageSize() + itemsCount;\n\n        if (currentTotalCount > this._currentTotalCount) {\n          this._currentTotalCount = currentTotalCount;\n\n          if (0 === dataSource.pageIndex() || !this.option(\"scrolling.legacyMode\")) {\n            this._totalCountCorrection = 0;\n          }\n        }\n\n        if (0 === itemsCount && dataSource.pageIndex() >= this.pageCount()) {\n          dataSource.pageIndex(this.pageCount() - 1);\n\n          if (\"infinite\" !== this.option(\"scrolling.mode\")) {\n            dataSource.load();\n            isLoading = true;\n          }\n        }\n      }\n\n      if (!isLoading) {\n        this._operationTypes = this._lastOperationTypes;\n        this._lastOperationTypes = {};\n        this.component._optionCache = {};\n        this.changed.fire(args);\n        this.component._optionCache = void 0;\n      }\n    },\n    _scheduleCustomLoadCallbacks: function _scheduleCustomLoadCallbacks(deferred) {\n      var that = this;\n      that._isCustomLoading = true;\n      deferred.always(function () {\n        that._isCustomLoading = false;\n      });\n    },\n    loadingOperationTypes: function loadingOperationTypes() {\n      return this._loadingOperationTypes;\n    },\n    operationTypes: function operationTypes() {\n      return this._operationTypes;\n    },\n    lastLoadOptions: function lastLoadOptions() {\n      return this._lastLoadOptions || {};\n    },\n    isLastPage: function isLastPage() {\n      return this._isLastPage;\n    },\n    totalCount: function totalCount() {\n      return parseInt((this._currentTotalCount || this._dataSource.totalCount()) + this._totalCountCorrection);\n    },\n    totalCountCorrection: function totalCountCorrection() {\n      return this._totalCountCorrection;\n    },\n    itemsCount: function itemsCount() {\n      return this._dataSource.items().length;\n    },\n    totalItemsCount: function totalItemsCount() {\n      return this.totalCount();\n    },\n    pageSize: function pageSize() {\n      var dataSource = this._dataSource;\n\n      if (!arguments.length && !dataSource.paginate()) {\n        return 0;\n      }\n\n      return dataSource.pageSize.apply(dataSource, arguments);\n    },\n    pageCount: function pageCount() {\n      var count = this.totalItemsCount() - this._totalCountCorrection;\n\n      var pageSize = this.pageSize();\n\n      if (pageSize && count > 0) {\n        return Math.max(1, Math.ceil(count / pageSize));\n      }\n\n      return 1;\n    },\n    hasKnownLastPage: function hasKnownLastPage() {\n      return this._hasLastPage || this._dataSource.totalCount() >= 0;\n    },\n    loadFromStore: function loadFromStore(loadOptions, store) {\n      var dataSource = this._dataSource;\n      var d = new Deferred();\n\n      if (!dataSource) {\n        return;\n      }\n\n      store = store || dataSource.store();\n      store.load(loadOptions).done(function (data, extra) {\n        if (data && !Array.isArray(data) && Array.isArray(data.data)) {\n          extra = data;\n          data = data.data;\n        }\n\n        d.resolve(data, extra);\n      }).fail(d.reject);\n      return d;\n    },\n    isCustomLoading: function isCustomLoading() {\n      return !!this._isCustomLoading;\n    },\n    load: function load(options) {\n      var _this6 = this;\n\n      var that = this;\n      var dataSource = that._dataSource;\n      var d = new Deferred();\n\n      if (options) {\n        var store = dataSource.store();\n        var dataSourceLoadOptions = dataSource.loadOptions();\n        var loadResult = {\n          storeLoadOptions: options,\n          isCustomLoading: true\n        };\n        each(store._customLoadOptions() || [], function (_, optionName) {\n          if (!(optionName in loadResult.storeLoadOptions)) {\n            loadResult.storeLoadOptions[optionName] = dataSourceLoadOptions[optionName];\n          }\n        });\n        this._isLoadingAll = options.isLoadingAll;\n\n        that._scheduleCustomLoadCallbacks(d);\n\n        dataSource._scheduleLoadCallbacks(d);\n\n        that._handleCustomizeStoreLoadOptions(loadResult);\n\n        !function (action, timeout) {\n          if (isDefined(timeout)) {\n            executeAsync(action, timeout);\n          } else {\n            action();\n          }\n        }(function () {\n          if (!dataSource.store()) {\n            return d.reject(\"canceled\");\n          }\n\n          when(loadResult.data || that.loadFromStore(loadResult.storeLoadOptions)).done(function (data, extra) {\n            loadResult.data = data;\n            loadResult.extra = extra || {};\n\n            that._handleDataLoaded(loadResult);\n\n            if (options.requireTotalCount && void 0 === loadResult.extra.totalCount) {\n              loadResult.extra.totalCount = store.totalCount(loadResult.storeLoadOptions);\n            }\n\n            when(loadResult.data, loadResult.extra.totalCount).done(function (data, totalCount) {\n              loadResult.extra.totalCount = totalCount;\n              d.resolve(data, loadResult.extra);\n            }).fail(d.reject);\n          }).fail(d.reject);\n        }, that.option(\"loadingTimeout\"));\n        return d.fail(function () {\n          that._eventsStrategy.fireEvent(\"loadError\", arguments);\n        }).always(function () {\n          _this6._isLoadingAll = false;\n        }).promise();\n      } else {\n        return dataSource.load();\n      }\n    },\n    reload: function reload(full) {\n      return full ? this._dataSource.reload() : this._dataSource.load();\n    },\n    getCachedStoreData: function getCachedStoreData() {\n      return this._cachedStoreData;\n    }\n  };\n}());","map":null,"metadata":{},"sourceType":"module"}