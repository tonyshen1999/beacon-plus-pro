{"ast":null,"code":"import _toConsumableArray from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n\n/**\r\n * DevExtreme (esm/ui/collection/ui.collection_widget.edit.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport BaseCollectionWidget from \"./ui.collection_widget.base\";\nimport errors from \"../widget/ui.errors\";\nimport { extend } from \"../../core/utils/extend\";\nimport { each } from \"../../core/utils/iterator\";\nimport { noop } from \"../../core/utils/common\";\nimport { isDefined } from \"../../core/utils/type\";\nimport PlainEditStrategy from \"./ui.collection_widget.edit.strategy.plain\";\nimport { compileGetter } from \"../../core/utils/data\";\nimport { DataSource } from \"../../data/data_source/data_source\";\nimport { normalizeLoadResult } from \"../../data/data_source/utils\";\nimport Selection from \"../selection/selection\";\nimport { when, Deferred, fromPromise } from \"../../core/utils/deferred\";\nvar ITEM_DELETING_DATA_KEY = \"dxItemDeleting\";\nvar NOT_EXISTING_INDEX = -1;\n\nvar indexExists = function indexExists(index) {\n  return index !== NOT_EXISTING_INDEX;\n};\n\nvar CollectionWidget = BaseCollectionWidget.inherit({\n  _setOptionsByReference: function _setOptionsByReference() {\n    this.callBase();\n    extend(this._optionsByReference, {\n      selectedItem: true\n    });\n  },\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      selectionMode: \"none\",\n      selectionRequired: false,\n      selectionByClick: true,\n      selectedItems: [],\n      selectedItemKeys: [],\n      maxFilterLengthInRequest: 1500,\n      keyExpr: null,\n      selectedIndex: NOT_EXISTING_INDEX,\n      selectedItem: null,\n      onSelectionChanged: null,\n      onItemReordered: null,\n      onItemDeleting: null,\n      onItemDeleted: null\n    });\n  },\n  ctor: function ctor(element, options) {\n    this._userOptions = options || {};\n    this.callBase(element, options);\n  },\n  _init: function _init() {\n    this._initEditStrategy();\n\n    this.callBase();\n\n    this._initKeyGetter();\n\n    this._initSelectionModule();\n  },\n  _initKeyGetter: function _initKeyGetter() {\n    this._keyGetter = compileGetter(this.option(\"keyExpr\"));\n  },\n  _getKeysByItems: function _getKeysByItems(selectedItems) {\n    return this._editStrategy.getKeysByItems(selectedItems);\n  },\n  _getItemsByKeys: function _getItemsByKeys(selectedItemKeys, selectedItems) {\n    return this._editStrategy.getItemsByKeys(selectedItemKeys, selectedItems);\n  },\n  _getKeyByIndex: function _getKeyByIndex(index) {\n    return this._editStrategy.getKeyByIndex(index);\n  },\n  _getIndexByKey: function _getIndexByKey(key) {\n    return this._editStrategy.getIndexByKey(key);\n  },\n  _getIndexByItemData: function _getIndexByItemData(itemData) {\n    return this._editStrategy.getIndexByItemData(itemData);\n  },\n  _isKeySpecified: function _isKeySpecified() {\n    return !!(this._dataSource && this._dataSource.key());\n  },\n  _getCombinedFilter: function _getCombinedFilter() {\n    return this._dataSource && this._dataSource.filter();\n  },\n  key: function key() {\n    if (this.option(\"keyExpr\")) {\n      return this.option(\"keyExpr\");\n    }\n\n    return this._dataSource && this._dataSource.key();\n  },\n  keyOf: function keyOf(item) {\n    var key = item;\n\n    var store = this._dataSource && this._dataSource.store();\n\n    if (this.option(\"keyExpr\")) {\n      key = this._keyGetter(item);\n    } else if (store) {\n      key = store.keyOf(item);\n    }\n\n    return key;\n  },\n  _nullValueSelectionSupported: function _nullValueSelectionSupported() {\n    return false;\n  },\n  _initSelectionModule: function _initSelectionModule() {\n    var that = this;\n    var itemsGetter = that._editStrategy.itemsGetter;\n    this._selection = new Selection({\n      allowNullValue: this._nullValueSelectionSupported(),\n      mode: this.option(\"selectionMode\"),\n      maxFilterLengthInRequest: this.option(\"maxFilterLengthInRequest\"),\n      equalByReference: !this._isKeySpecified(),\n      onSelectionChanged: function onSelectionChanged(args) {\n        if (args.addedItemKeys.length || args.removedItemKeys.length) {\n          that.option(\"selectedItems\", that._getItemsByKeys(args.selectedItemKeys, args.selectedItems));\n\n          that._updateSelectedItems(args);\n        }\n      },\n      filter: that._getCombinedFilter.bind(that),\n      totalCount: function totalCount() {\n        var items = that.option(\"items\");\n        var dataSource = that._dataSource;\n        return dataSource && dataSource.totalCount() >= 0 ? dataSource.totalCount() : that._getItemsCount(items);\n      },\n      key: that.key.bind(that),\n      keyOf: that.keyOf.bind(that),\n      load: function load(options) {\n        if (that._dataSource) {\n          var loadOptions = that._dataSource.loadOptions();\n\n          options.customQueryParams = loadOptions.customQueryParams;\n          options.userData = that._dataSource._userData;\n        }\n\n        var store = that._dataSource && that._dataSource.store();\n\n        if (store) {\n          return store.load(options).done(function (loadResult) {\n            if (that._disposed) {\n              return;\n            }\n\n            var items = normalizeLoadResult(loadResult).data;\n\n            that._dataSource._applyMapFunction(items);\n          });\n        } else {\n          return new Deferred().resolve(this.plainItems());\n        }\n      },\n      dataFields: function dataFields() {\n        return that._dataSource && that._dataSource.select();\n      },\n      plainItems: itemsGetter.bind(that._editStrategy)\n    });\n  },\n  _getItemsCount: function _getItemsCount(items) {\n    var _this = this;\n\n    return items.reduce(function (itemsCount, item) {\n      return itemsCount + (item.items ? _this._getItemsCount(item.items) : 1);\n    }, 0);\n  },\n  _initEditStrategy: function _initEditStrategy() {\n    var Strategy = PlainEditStrategy;\n    this._editStrategy = new Strategy(this);\n  },\n  _getSelectedItemIndices: function _getSelectedItemIndices(keys) {\n    var that = this;\n    var indices = [];\n    keys = keys || this._selection.getSelectedItemKeys();\n\n    that._editStrategy.beginCache();\n\n    each(keys, function (_, key) {\n      var selectedIndex = that._getIndexByKey(key);\n\n      if (indexExists(selectedIndex)) {\n        indices.push(selectedIndex);\n      }\n    });\n\n    that._editStrategy.endCache();\n\n    return indices;\n  },\n  _initMarkup: function _initMarkup() {\n    var _this2 = this;\n\n    this._rendering = true;\n\n    if (!this._dataSource || !this._dataSource.isLoading()) {\n      this._syncSelectionOptions().done(function () {\n        return _this2._normalizeSelectedItems();\n      });\n    }\n\n    this.callBase();\n  },\n  _render: function _render() {\n    this.callBase();\n    this._rendering = false;\n  },\n  _fireContentReadyAction: function _fireContentReadyAction() {\n    this._rendering = false;\n    this._rendered = true;\n    this.callBase.apply(this, arguments);\n  },\n  _syncSelectionOptions: function _syncSelectionOptions(byOption) {\n    byOption = byOption || this._chooseSelectOption();\n    var selectedItem;\n    var selectedIndex;\n    var selectedItemKeys;\n    var selectedItems;\n\n    switch (byOption) {\n      case \"selectedIndex\":\n        selectedItem = this._editStrategy.getItemDataByIndex(this.option(\"selectedIndex\"));\n\n        if (isDefined(selectedItem)) {\n          this._setOptionWithoutOptionChange(\"selectedItems\", [selectedItem]);\n\n          this._setOptionWithoutOptionChange(\"selectedItem\", selectedItem);\n\n          this._setOptionWithoutOptionChange(\"selectedItemKeys\", this._editStrategy.getKeysByItems([selectedItem]));\n        } else {\n          this._setOptionWithoutOptionChange(\"selectedItems\", []);\n\n          this._setOptionWithoutOptionChange(\"selectedItemKeys\", []);\n\n          this._setOptionWithoutOptionChange(\"selectedItem\", null);\n        }\n\n        break;\n\n      case \"selectedItems\":\n        selectedItems = this.option(\"selectedItems\") || [];\n        selectedIndex = selectedItems.length ? this._editStrategy.getIndexByItemData(selectedItems[0]) : NOT_EXISTING_INDEX;\n\n        if (this.option(\"selectionRequired\") && !indexExists(selectedIndex)) {\n          return this._syncSelectionOptions(\"selectedIndex\");\n        }\n\n        this._setOptionWithoutOptionChange(\"selectedItem\", selectedItems[0]);\n\n        this._setOptionWithoutOptionChange(\"selectedIndex\", selectedIndex);\n\n        this._setOptionWithoutOptionChange(\"selectedItemKeys\", this._editStrategy.getKeysByItems(selectedItems));\n\n        break;\n\n      case \"selectedItem\":\n        selectedItem = this.option(\"selectedItem\");\n        selectedIndex = this._editStrategy.getIndexByItemData(selectedItem);\n\n        if (this.option(\"selectionRequired\") && !indexExists(selectedIndex)) {\n          return this._syncSelectionOptions(\"selectedIndex\");\n        }\n\n        if (isDefined(selectedItem)) {\n          this._setOptionWithoutOptionChange(\"selectedItems\", [selectedItem]);\n\n          this._setOptionWithoutOptionChange(\"selectedIndex\", selectedIndex);\n\n          this._setOptionWithoutOptionChange(\"selectedItemKeys\", this._editStrategy.getKeysByItems([selectedItem]));\n        } else {\n          this._setOptionWithoutOptionChange(\"selectedItems\", []);\n\n          this._setOptionWithoutOptionChange(\"selectedItemKeys\", []);\n\n          this._setOptionWithoutOptionChange(\"selectedIndex\", NOT_EXISTING_INDEX);\n        }\n\n        break;\n\n      case \"selectedItemKeys\":\n        selectedItemKeys = this.option(\"selectedItemKeys\");\n\n        if (this.option(\"selectionRequired\")) {\n          var selectedItemIndex = this._getIndexByKey(selectedItemKeys[0]);\n\n          if (!indexExists(selectedItemIndex)) {\n            return this._syncSelectionOptions(\"selectedIndex\");\n          }\n        }\n\n        return this._selection.setSelection(selectedItemKeys);\n    }\n\n    return new Deferred().resolve().promise();\n  },\n  _chooseSelectOption: function _chooseSelectOption() {\n    var optionName = \"selectedIndex\";\n\n    var isOptionDefined = function (optionName) {\n      var optionValue = this.option(optionName);\n      var length = isDefined(optionValue) && optionValue.length;\n      return length || optionName in this._userOptions;\n    }.bind(this);\n\n    if (isOptionDefined(\"selectedItems\")) {\n      optionName = \"selectedItems\";\n    } else if (isOptionDefined(\"selectedItem\")) {\n      optionName = \"selectedItem\";\n    } else if (isOptionDefined(\"selectedItemKeys\")) {\n      optionName = \"selectedItemKeys\";\n    }\n\n    return optionName;\n  },\n  _compareKeys: function _compareKeys(oldKeys, newKeys) {\n    if (oldKeys.length !== newKeys.length) {\n      return false;\n    }\n\n    for (var i = 0; i < newKeys.length; i++) {\n      if (oldKeys[i] !== newKeys[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  },\n  _normalizeSelectedItems: function _normalizeSelectedItems() {\n    if (\"none\" === this.option(\"selectionMode\")) {\n      this._setOptionWithoutOptionChange(\"selectedItems\", []);\n\n      this._syncSelectionOptions(\"selectedItems\");\n    } else if (\"single\" === this.option(\"selectionMode\")) {\n      var newSelection = this.option(\"selectedItems\");\n\n      if (newSelection.length > 1 || !newSelection.length && this.option(\"selectionRequired\") && this.option(\"items\") && this.option(\"items\").length) {\n        var currentSelection = this._selection.getSelectedItems();\n\n        var normalizedSelection = void 0 === newSelection[0] ? currentSelection[0] : newSelection[0];\n\n        if (void 0 === normalizedSelection) {\n          normalizedSelection = this._editStrategy.itemsGetter()[0];\n        }\n\n        if (this.option(\"grouped\") && normalizedSelection && normalizedSelection.items) {\n          normalizedSelection.items = [normalizedSelection.items[0]];\n        }\n\n        this._selection.setSelection(this._getKeysByItems([normalizedSelection]));\n\n        this._setOptionWithoutOptionChange(\"selectedItems\", [normalizedSelection]);\n\n        return this._syncSelectionOptions(\"selectedItems\");\n      } else {\n        this._selection.setSelection(this._getKeysByItems(newSelection));\n      }\n    } else {\n      var newKeys = this._getKeysByItems(this.option(\"selectedItems\"));\n\n      var oldKeys = this._selection.getSelectedItemKeys();\n\n      if (!this._compareKeys(oldKeys, newKeys)) {\n        this._selection.setSelection(newKeys);\n      }\n    }\n\n    return new Deferred().resolve().promise();\n  },\n  _itemClickHandler: function _itemClickHandler(e) {\n    var _arguments = arguments,\n        _this3 = this;\n\n    var itemSelectPromise = new Deferred().resolve();\n    var callBase = this.callBase;\n\n    this._createAction(function (e) {\n      var _this$_itemSelectHand;\n\n      itemSelectPromise = null !== (_this$_itemSelectHand = this._itemSelectHandler(e.event)) && void 0 !== _this$_itemSelectHand ? _this$_itemSelectHand : itemSelectPromise;\n    }.bind(this), {\n      validatingTargetName: \"itemElement\"\n    })({\n      itemElement: $(e.currentTarget),\n      event: e\n    });\n\n    itemSelectPromise.always(function () {\n      callBase.apply(_this3, _arguments);\n    });\n  },\n  _itemSelectHandler: function _itemSelectHandler(e) {\n    var _itemSelectPromise;\n\n    var itemSelectPromise;\n\n    if (!this.option(\"selectionByClick\")) {\n      return;\n    }\n\n    var $itemElement = e.currentTarget;\n\n    if (this.isItemSelected($itemElement)) {\n      this.unselectItem(e.currentTarget);\n    } else {\n      itemSelectPromise = this.selectItem(e.currentTarget);\n    }\n\n    return null === (_itemSelectPromise = itemSelectPromise) || void 0 === _itemSelectPromise ? void 0 : _itemSelectPromise.promise();\n  },\n  _selectedItemElement: function _selectedItemElement(index) {\n    return this._itemElements().eq(index);\n  },\n  _postprocessRenderItem: function _postprocessRenderItem(args) {\n    if (\"none\" !== this.option(\"selectionMode\")) {\n      var $itemElement = $(args.itemElement);\n\n      var normalizedItemIndex = this._editStrategy.getNormalizedIndex($itemElement);\n\n      var isItemSelected = this._isItemSelected(normalizedItemIndex);\n\n      this._processSelectableItem($itemElement, isItemSelected);\n    }\n  },\n  _processSelectableItem: function _processSelectableItem($itemElement, isSelected) {\n    $itemElement.toggleClass(this._selectedItemClass(), isSelected);\n\n    this._setAriaSelected($itemElement, String(isSelected));\n  },\n  _updateSelectedItems: function _updateSelectedItems(args) {\n    var that = this;\n    var addedItemKeys = args.addedItemKeys;\n    var removedItemKeys = args.removedItemKeys;\n\n    if (that._rendered && (addedItemKeys.length || removedItemKeys.length)) {\n      var selectionChangePromise = that._selectionChangePromise;\n\n      if (!that._rendering) {\n        var addedSelection = [];\n        var normalizedIndex;\n        var removedSelection = [];\n\n        that._editStrategy.beginCache();\n\n        for (var i = 0; i < addedItemKeys.length; i++) {\n          normalizedIndex = that._getIndexByKey(addedItemKeys[i]);\n          addedSelection.push(normalizedIndex);\n\n          that._addSelection(normalizedIndex);\n        }\n\n        for (var _i = 0; _i < removedItemKeys.length; _i++) {\n          normalizedIndex = that._getIndexByKey(removedItemKeys[_i]);\n          removedSelection.push(normalizedIndex);\n\n          that._removeSelection(normalizedIndex);\n        }\n\n        that._editStrategy.endCache();\n\n        that._updateSelection(addedSelection, removedSelection);\n      }\n\n      when(selectionChangePromise).done(function () {\n        that._fireSelectionChangeEvent(args.addedItems, args.removedItems);\n      });\n    }\n  },\n  _fireSelectionChangeEvent: function _fireSelectionChangeEvent(addedItems, removedItems) {\n    this._createActionByOption(\"onSelectionChanged\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    })({\n      addedItems: addedItems,\n      removedItems: removedItems\n    });\n  },\n  _updateSelection: noop,\n  _setAriaSelected: function _setAriaSelected($target, value) {\n    this.setAria(\"selected\", value, $target);\n  },\n  _removeSelection: function _removeSelection(normalizedIndex) {\n    var $itemElement = this._editStrategy.getItemElement(normalizedIndex);\n\n    if (indexExists(normalizedIndex)) {\n      this._processSelectableItem($itemElement, false);\n\n      eventsEngine.triggerHandler($itemElement, \"stateChanged\", false);\n    }\n  },\n  _addSelection: function _addSelection(normalizedIndex) {\n    var $itemElement = this._editStrategy.getItemElement(normalizedIndex);\n\n    if (indexExists(normalizedIndex)) {\n      this._processSelectableItem($itemElement, true);\n\n      eventsEngine.triggerHandler($itemElement, \"stateChanged\", true);\n    }\n  },\n  _isItemSelected: function _isItemSelected(index) {\n    var key = this._getKeyByIndex(index);\n\n    return this._selection.isItemSelected(key, {\n      checkPending: true\n    });\n  },\n  _optionChanged: function _optionChanged(args) {\n    var _this4 = this;\n\n    switch (args.name) {\n      case \"selectionMode\":\n        this._invalidate();\n\n        break;\n\n      case \"dataSource\":\n        if (!args.value || Array.isArray(args.value) && !args.value.length) {\n          this.option(\"selectedItemKeys\", []);\n        }\n\n        this.callBase(args);\n        break;\n\n      case \"selectedIndex\":\n      case \"selectedItem\":\n      case \"selectedItems\":\n      case \"selectedItemKeys\":\n        this._syncSelectionOptions(args.name).done(function () {\n          return _this4._normalizeSelectedItems();\n        });\n\n        break;\n\n      case \"keyExpr\":\n        this._initKeyGetter();\n\n        break;\n\n      case \"selectionRequired\":\n        this._normalizeSelectedItems();\n\n        break;\n\n      case \"selectionByClick\":\n      case \"onSelectionChanged\":\n      case \"onItemDeleting\":\n      case \"onItemDeleted\":\n      case \"onItemReordered\":\n      case \"maxFilterLengthInRequest\":\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  _clearSelectedItems: function _clearSelectedItems() {\n    this._setOptionWithoutOptionChange(\"selectedItems\", []);\n\n    this._syncSelectionOptions(\"selectedItems\");\n  },\n  _waitDeletingPrepare: function _waitDeletingPrepare($itemElement) {\n    if ($itemElement.data(ITEM_DELETING_DATA_KEY)) {\n      return new Deferred().resolve().promise();\n    }\n\n    $itemElement.data(ITEM_DELETING_DATA_KEY, true);\n    var deferred = new Deferred();\n    var deletingActionArgs = {\n      cancel: false\n    };\n\n    var deletePromise = this._itemEventHandler($itemElement, \"onItemDeleting\", deletingActionArgs, {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n\n    when(deletePromise).always(function (value) {\n      var deletePromiseExists = !deletePromise;\n      var deletePromiseResolved = !deletePromiseExists && \"resolved\" === deletePromise.state();\n      var argumentsSpecified = !!arguments.length;\n      var shouldDelete = deletePromiseExists || deletePromiseResolved && !argumentsSpecified || deletePromiseResolved && value;\n      when(fromPromise(deletingActionArgs.cancel)).always(function () {\n        $itemElement.data(ITEM_DELETING_DATA_KEY, false);\n      }).done(function (cancel) {\n        shouldDelete && !cancel ? deferred.resolve() : deferred.reject();\n      }).fail(deferred.reject);\n    }.bind(this));\n    return deferred.promise();\n  },\n  _deleteItemFromDS: function _deleteItemFromDS($item) {\n    if (!this._dataSource) {\n      return new Deferred().resolve().promise();\n    }\n\n    var deferred = new Deferred();\n    var disabledState = this.option(\"disabled\");\n\n    var dataStore = this._dataSource.store();\n\n    this.option(\"disabled\", true);\n\n    if (!dataStore.remove) {\n      throw errors.Error(\"E1011\");\n    }\n\n    dataStore.remove(dataStore.keyOf(this._getItemData($item))).done(function (key) {\n      if (void 0 !== key) {\n        deferred.resolve();\n      } else {\n        deferred.reject();\n      }\n    }).fail(function () {\n      deferred.reject();\n    });\n    deferred.always(function () {\n      this.option(\"disabled\", disabledState);\n    }.bind(this));\n    return deferred;\n  },\n  _tryRefreshLastPage: function _tryRefreshLastPage() {\n    var deferred = new Deferred();\n\n    if (this._isLastPage() || this.option(\"grouped\")) {\n      deferred.resolve();\n    } else {\n      this._refreshLastPage().done(function () {\n        deferred.resolve();\n      });\n    }\n\n    return deferred.promise();\n  },\n  _refreshLastPage: function _refreshLastPage() {\n    this._expectLastItemLoading();\n\n    return this._dataSource.load();\n  },\n  _updateSelectionAfterDelete: function _updateSelectionAfterDelete(index) {\n    var key = this._getKeyByIndex(index);\n\n    this._selection.deselect([key]);\n  },\n  _updateIndicesAfterIndex: function _updateIndicesAfterIndex(index) {\n    var itemElements = this._itemElements();\n\n    for (var i = index + 1; i < itemElements.length; i++) {\n      $(itemElements[i]).data(this._itemIndexKey(), i - 1);\n    }\n  },\n  _simulateOptionChange: function _simulateOptionChange(optionName) {\n    var optionValue = this.option(optionName);\n\n    if (optionValue instanceof DataSource) {\n      return;\n    }\n\n    this._optionChangedAction({\n      name: optionName,\n      fullName: optionName,\n      value: optionValue\n    });\n  },\n  isItemSelected: function isItemSelected(itemElement) {\n    return this._isItemSelected(this._editStrategy.getNormalizedIndex(itemElement));\n  },\n  selectItem: function selectItem(itemElement) {\n    if (\"none\" === this.option(\"selectionMode\")) {\n      return;\n    }\n\n    var itemIndex = this._editStrategy.getNormalizedIndex(itemElement);\n\n    if (!indexExists(itemIndex)) {\n      return;\n    }\n\n    var key = this._getKeyByIndex(itemIndex);\n\n    if (this._selection.isItemSelected(key)) {\n      return;\n    }\n\n    if (\"single\" === this.option(\"selectionMode\")) {\n      return this._selection.setSelection([key]);\n    } else {\n      var selectedItemKeys = this.option(\"selectedItemKeys\") || [];\n      return this._selection.setSelection([].concat(_toConsumableArray(selectedItemKeys), [key]), [key]);\n    }\n  },\n  unselectItem: function unselectItem(itemElement) {\n    var itemIndex = this._editStrategy.getNormalizedIndex(itemElement);\n\n    if (!indexExists(itemIndex)) {\n      return;\n    }\n\n    var selectedItemKeys = this._selection.getSelectedItemKeys();\n\n    if (this.option(\"selectionRequired\") && selectedItemKeys.length <= 1) {\n      return;\n    }\n\n    var key = this._getKeyByIndex(itemIndex);\n\n    if (!this._selection.isItemSelected(key, {\n      checkPending: true\n    })) {\n      return;\n    }\n\n    this._selection.deselect([key]);\n  },\n  _deleteItemElementByIndex: function _deleteItemElementByIndex(index) {\n    this._updateSelectionAfterDelete(index);\n\n    this._updateIndicesAfterIndex(index);\n\n    this._editStrategy.deleteItemAtIndex(index);\n  },\n  _afterItemElementDeleted: function _afterItemElementDeleted($item, deletedActionArgs) {\n    var changingOption = this._dataSource ? \"dataSource\" : \"items\";\n\n    this._simulateOptionChange(changingOption);\n\n    this._itemEventHandler($item, \"onItemDeleted\", deletedActionArgs, {\n      beforeExecute: function beforeExecute() {\n        $item.remove();\n      },\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n\n    this._renderEmptyMessage();\n  },\n  deleteItem: function deleteItem(itemElement) {\n    var that = this;\n    var deferred = new Deferred();\n\n    var $item = this._editStrategy.getItemElement(itemElement);\n\n    var index = this._editStrategy.getNormalizedIndex(itemElement);\n\n    var itemResponseWaitClass = this._itemResponseWaitClass();\n\n    if (indexExists(index)) {\n      this._waitDeletingPrepare($item).done(function () {\n        $item.addClass(itemResponseWaitClass);\n\n        var deletedActionArgs = that._extendActionArgs($item);\n\n        that._deleteItemFromDS($item).done(function () {\n          that._deleteItemElementByIndex(index);\n\n          that._afterItemElementDeleted($item, deletedActionArgs);\n\n          that._tryRefreshLastPage().done(function () {\n            deferred.resolveWith(that);\n          });\n        }).fail(function () {\n          $item.removeClass(itemResponseWaitClass);\n          deferred.rejectWith(that);\n        });\n      }).fail(function () {\n        deferred.rejectWith(that);\n      });\n    } else {\n      deferred.rejectWith(that);\n    }\n\n    return deferred.promise();\n  },\n  reorderItem: function reorderItem(itemElement, toItemElement) {\n    var deferred = new Deferred();\n    var that = this;\n    var strategy = this._editStrategy;\n    var $movingItem = strategy.getItemElement(itemElement);\n    var $destinationItem = strategy.getItemElement(toItemElement);\n    var movingIndex = strategy.getNormalizedIndex(itemElement);\n    var destinationIndex = strategy.getNormalizedIndex(toItemElement);\n    var changingOption = this._dataSource ? \"dataSource\" : \"items\";\n    var canMoveItems = indexExists(movingIndex) && indexExists(destinationIndex) && movingIndex !== destinationIndex;\n\n    if (canMoveItems) {\n      deferred.resolveWith(this);\n    } else {\n      deferred.rejectWith(this);\n    }\n\n    return deferred.promise().done(function () {\n      $destinationItem[strategy.itemPlacementFunc(movingIndex, destinationIndex)]($movingItem);\n      strategy.moveItemAtIndexToIndex(movingIndex, destinationIndex);\n\n      this._updateIndicesAfterIndex(movingIndex);\n\n      that.option(\"selectedItems\", that._getItemsByKeys(that._selection.getSelectedItemKeys(), that._selection.getSelectedItems()));\n\n      if (\"items\" === changingOption) {\n        that._simulateOptionChange(changingOption);\n      }\n\n      that._itemEventHandler($movingItem, \"onItemReordered\", {\n        fromIndex: strategy.getIndex(movingIndex),\n        toIndex: strategy.getIndex(destinationIndex)\n      }, {\n        excludeValidators: [\"disabled\", \"readOnly\"]\n      });\n    });\n  }\n});\nexport default CollectionWidget;","map":null,"metadata":{},"sourceType":"module"}