{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _slicedToArray from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport ascending from \"./ascending.js\";\nimport permute from \"./permute.js\";\nexport default function sort(values) {\n  for (var _len = arguments.length, F = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    F[_key - 1] = arguments[_key];\n  }\n\n  if (typeof values[Symbol.iterator] !== \"function\") throw new TypeError(\"values is not iterable\");\n  values = Array.from(values);\n\n  var _F = F,\n      _F2 = _slicedToArray(_F, 1),\n      f = _F2[0];\n\n  if (f && f.length !== 2 || F.length > 1) {\n    var index = Uint32Array.from(values, function (d, i) {\n      return i;\n    });\n\n    if (F.length > 1) {\n      F = F.map(function (f) {\n        return values.map(f);\n      });\n      index.sort(function (i, j) {\n        var _iterator = _createForOfIteratorHelper(F),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _f = _step.value;\n            var c = ascendingDefined(_f[i], _f[j]);\n            if (c) return c;\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      });\n    } else {\n      f = values.map(f);\n      index.sort(function (i, j) {\n        return ascendingDefined(f[i], f[j]);\n      });\n    }\n\n    return permute(values, index);\n  }\n\n  return values.sort(compareDefined(f));\n}\nexport function compareDefined() {\n  var compare = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ascending;\n  if (compare === ascending) return ascendingDefined;\n  if (typeof compare !== \"function\") throw new TypeError(\"compare is not a function\");\n  return function (a, b) {\n    var x = compare(a, b);\n    if (x || x === 0) return x;\n    return (compare(b, b) === 0) - (compare(a, a) === 0);\n  };\n}\nexport function ascendingDefined(a, b) {\n  return (a == null || !(a >= a)) - (b == null || !(b >= b)) || (a < b ? -1 : a > b ? 1 : 0);\n}","map":null,"metadata":{},"sourceType":"module"}