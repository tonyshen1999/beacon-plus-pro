{"ast":null,"code":"import _toConsumableArray from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/**\r\n * DevExtreme (esm/ui/file_manager/file_items_controller.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport FileSystemProviderBase from \"../../file_management/provider_base\";\nimport FileSystemItem from \"../../file_management/file_system_item\";\nimport ObjectFileSystemProvider from \"../../file_management/object_provider\";\nimport RemoteFileSystemProvider from \"../../file_management/remote_provider\";\nimport CustomFileSystemProvider from \"../../file_management/custom_provider\";\nimport FileSystemError from \"../../file_management/error\";\nimport ErrorCode from \"../../file_management/error_codes\";\nimport { pathCombine, getEscapedFileName, getPathParts, getFileExtension } from \"../../file_management/utils\";\nimport { whenSome } from \"./ui.file_manager.common\";\nimport { Deferred, when } from \"../../core/utils/deferred\";\nimport { find } from \"../../core/utils/array\";\nimport { extend } from \"../../core/utils/extend\";\nimport { equalByValue } from \"../../core/utils/common\";\nimport { isDefined, isObject, isPromise } from \"../../core/utils/type\";\nvar DEFAULT_ROOT_FILE_SYSTEM_ITEM_NAME = \"Files\";\n\nvar FileItemsController = /*#__PURE__*/function () {\n  function FileItemsController(options) {\n    _classCallCheck(this, FileItemsController);\n\n    options = options || {};\n    this._options = extend({}, options);\n    this._isInitialized = false;\n    this._dataLoading = false;\n    this._dataLoadingDeferred = null;\n    this._rootDirectoryInfo = this._createRootDirectoryInfo(options.rootText);\n    this._currentDirectoryInfo = this._rootDirectoryInfo;\n    this._defaultIconMap = this._createDefaultIconMap();\n\n    this._setSecurityController();\n\n    this._setProvider(options.fileProvider);\n\n    this._initialize();\n  }\n\n  _createClass(FileItemsController, [{\n    key: \"_initialize\",\n    value: function _initialize() {\n      var _this2 = this;\n\n      var result = this._options.currentPathKeys && this._options.currentPathKeys.length ? this.setCurrentPathByKeys(this._options.currentPathKeys) : this.setCurrentPath(this._options.currentPath);\n\n      var completeInitialization = function completeInitialization() {\n        _this2._isInitialized = true;\n\n        _this2._raiseInitialized();\n      };\n\n      if (result) {\n        when(result).always(completeInitialization);\n      } else {\n        completeInitialization();\n      }\n    }\n  }, {\n    key: \"_setSecurityController\",\n    value: function _setSecurityController() {\n      this._securityController = new FileSecurityController({\n        allowedFileExtensions: this._options.allowedFileExtensions,\n        maxFileSize: this._options.uploadMaxFileSize\n      });\n\n      this._resetState();\n    }\n  }, {\n    key: \"setAllowedFileExtensions\",\n    value: function setAllowedFileExtensions(allowedFileExtensions) {\n      if (isDefined(allowedFileExtensions)) {\n        this._options.allowedFileExtensions = allowedFileExtensions;\n      }\n\n      this._setSecurityController();\n\n      this.refresh();\n    }\n  }, {\n    key: \"setUploadOptions\",\n    value: function setUploadOptions(_ref) {\n      var maxFileSize = _ref.maxFileSize,\n          chunkSize = _ref.chunkSize;\n\n      if (isDefined(chunkSize)) {\n        this._options.uploadChunkSize = chunkSize;\n      }\n\n      if (isDefined(maxFileSize)) {\n        this._options.uploadMaxFileSize = maxFileSize;\n\n        this._setSecurityController();\n\n        this.refresh();\n      }\n    }\n  }, {\n    key: \"_setProvider\",\n    value: function _setProvider(fileProvider) {\n      this._fileProvider = this._createFileProvider(fileProvider);\n\n      this._resetState();\n    }\n  }, {\n    key: \"updateProvider\",\n    value: function updateProvider(fileProvider, currentPathKeys) {\n      var _this3 = this;\n\n      if (!isDefined(currentPathKeys)) {\n        return this._updateProviderOnly(fileProvider);\n      }\n\n      return when(this._getDirectoryByPathParts(this._rootDirectoryInfo, currentPathKeys, true)).then(function (newDirectory) {\n        if (newDirectory !== _this3._rootDirectoryInfo) {\n          _this3._resetCurrentDirectory();\n        }\n\n        _this3._setProvider(fileProvider);\n      }).then(function () {\n        return _this3.setCurrentPathByKeys(currentPathKeys);\n      });\n    }\n  }, {\n    key: \"_updateProviderOnly\",\n    value: function _updateProviderOnly(fileProvider) {\n      this._resetCurrentDirectory();\n\n      this._setProvider(fileProvider);\n\n      return when(this.refresh());\n    }\n  }, {\n    key: \"_createFileProvider\",\n    value: function _createFileProvider(fileProvider) {\n      if (!fileProvider) {\n        fileProvider = [];\n      }\n\n      if (Array.isArray(fileProvider)) {\n        return new ObjectFileSystemProvider({\n          data: fileProvider\n        });\n      }\n\n      if (fileProvider instanceof FileSystemProviderBase) {\n        return fileProvider;\n      }\n\n      switch (fileProvider.type) {\n        case \"remote\":\n          return new RemoteFileSystemProvider(fileProvider);\n\n        case \"custom\":\n          return new CustomFileSystemProvider(fileProvider);\n      }\n\n      return new ObjectFileSystemProvider(fileProvider);\n    }\n  }, {\n    key: \"setCurrentPath\",\n    value: function setCurrentPath(path) {\n      var pathParts = getPathParts(path);\n      var rawPath = pathCombine.apply(void 0, _toConsumableArray(pathParts));\n\n      if (this.getCurrentDirectory().fileItem.relativeName === rawPath) {\n        return new Deferred().resolve().promise();\n      }\n\n      return this._setCurrentDirectoryByPathParts(pathParts);\n    }\n  }, {\n    key: \"setCurrentPathByKeys\",\n    value: function setCurrentPathByKeys(pathKeys) {\n      if (equalByValue(this.getCurrentDirectory().fileItem.pathKeys, pathKeys, 0, true)) {\n        return new Deferred().resolve().promise();\n      }\n\n      return this._setCurrentDirectoryByPathParts(pathKeys, true);\n    }\n  }, {\n    key: \"getCurrentPath\",\n    value: function getCurrentPath() {\n      var currentPath = \"\";\n      var directory = this.getCurrentDirectory();\n\n      while (directory && !directory.fileItem.isRoot()) {\n        var escapedName = getEscapedFileName(directory.fileItem.name);\n        currentPath = pathCombine(escapedName, currentPath);\n        directory = directory.parentDirectory;\n      }\n\n      return currentPath;\n    }\n  }, {\n    key: \"getCurrentPathKeys\",\n    value: function getCurrentPathKeys() {\n      return this.getCurrentDirectory().fileItem.pathKeys;\n    }\n  }, {\n    key: \"getCurrentDirectory\",\n    value: function getCurrentDirectory() {\n      return this._currentDirectoryInfo;\n    }\n  }, {\n    key: \"setCurrentDirectory\",\n    value: function setCurrentDirectory(directoryInfo, checkActuality) {\n      if (!directoryInfo) {\n        return;\n      }\n\n      if (checkActuality) {\n        directoryInfo = this._getActualDirectoryInfo(directoryInfo);\n      }\n\n      if (this._currentDirectoryInfo && this._currentDirectoryInfo === directoryInfo) {\n        this._raisePathPotentiallyChanged();\n\n        return;\n      }\n\n      var requireRaiseSelectedDirectory = this._currentDirectoryInfo.fileItem.key !== directoryInfo.fileItem.key;\n      this._currentDirectoryInfo = directoryInfo;\n\n      if (requireRaiseSelectedDirectory && this._isInitialized) {\n        if (!this._dataLoading) {\n          this._raiseDataLoading(\"navigation\");\n        }\n\n        this._raiseSelectedDirectoryChanged(directoryInfo);\n      }\n    }\n  }, {\n    key: \"_resetCurrentDirectory\",\n    value: function _resetCurrentDirectory() {\n      this._currentDirectoryInfo = this._rootDirectoryInfo;\n    }\n  }, {\n    key: \"getCurrentItems\",\n    value: function getCurrentItems(onlyFiles) {\n      var _this4 = this;\n\n      return this._dataLoadingDeferred ? this._dataLoadingDeferred.then(function () {\n        return _this4._getCurrentItemsInternal(onlyFiles);\n      }) : this._getCurrentItemsInternal(onlyFiles);\n    }\n  }, {\n    key: \"_getCurrentItemsInternal\",\n    value: function _getCurrentItemsInternal(onlyFiles) {\n      var _this5 = this;\n\n      var currentDirectory = this.getCurrentDirectory();\n      var getItemsPromise = this.getDirectoryContents(currentDirectory);\n      return getItemsPromise.then(function (items) {\n        var separatedItems = _this5._separateItemsByType(items);\n\n        currentDirectory.fileItem.hasSubDirectories = !!separatedItems.folders.length;\n        return onlyFiles ? separatedItems.files : items;\n      });\n    }\n  }, {\n    key: \"getDirectories\",\n    value: function getDirectories(parentDirectoryInfo, skipNavigationOnError) {\n      return this.getDirectoryContents(parentDirectoryInfo, skipNavigationOnError).then(function (itemInfos) {\n        return itemInfos.filter(function (info) {\n          return info.fileItem.isDirectory;\n        });\n      });\n    }\n  }, {\n    key: \"_separateItemsByType\",\n    value: function _separateItemsByType(itemInfos) {\n      var folders = [];\n      var files = [];\n      itemInfos.forEach(function (info) {\n        return info.fileItem.isDirectory ? folders.push(info) : files.push(info);\n      });\n      return {\n        folders: folders,\n        files: files\n      };\n    }\n  }, {\n    key: \"getDirectoryContents\",\n    value: function getDirectoryContents(parentDirectoryInfo, skipNavigationOnError) {\n      var _this6 = this;\n\n      if (!parentDirectoryInfo) {\n        return new Deferred().resolve([this._rootDirectoryInfo]).promise();\n      }\n\n      if (parentDirectoryInfo.itemsLoaded) {\n        return new Deferred().resolve(parentDirectoryInfo.items).promise();\n      }\n\n      var dirKey = parentDirectoryInfo.getInternalKey();\n      var loadItemsDeferred = this._loadedItems[dirKey];\n\n      if (loadItemsDeferred) {\n        return loadItemsDeferred;\n      }\n\n      loadItemsDeferred = this._getFileItems(parentDirectoryInfo, skipNavigationOnError).then(function (fileItems) {\n        fileItems = fileItems || [];\n        parentDirectoryInfo.items = fileItems.map(function (fileItem) {\n          return fileItem.isDirectory && _this6._createDirectoryInfo(fileItem, parentDirectoryInfo) || _this6._createFileInfo(fileItem, parentDirectoryInfo);\n        });\n        parentDirectoryInfo.itemsLoaded = true;\n        return parentDirectoryInfo.items;\n      });\n      this._loadedItems[dirKey] = loadItemsDeferred;\n      loadItemsDeferred.always(function () {\n        delete _this6._loadedItems[dirKey];\n      });\n      return loadItemsDeferred;\n    }\n  }, {\n    key: \"_getFileItems\",\n    value: function _getFileItems(parentDirectoryInfo, skipNavigationOnError) {\n      var _this7 = this;\n\n      var loadItemsDeferred = null;\n\n      try {\n        loadItemsDeferred = this._fileProvider.getItems(parentDirectoryInfo.fileItem);\n      } catch (error) {\n        return this._handleItemLoadError(parentDirectoryInfo, error, skipNavigationOnError);\n      }\n\n      return when(loadItemsDeferred).then(function (fileItems) {\n        return _this7._securityController.getAllowedItems(fileItems);\n      }, function (errorInfo) {\n        return _this7._handleItemLoadError(parentDirectoryInfo, errorInfo, skipNavigationOnError);\n      });\n    }\n  }, {\n    key: \"createDirectory\",\n    value: function createDirectory(parentDirectoryInfo, name) {\n      var _this8 = this;\n\n      var parentDirItem = parentDirectoryInfo.fileItem;\n\n      var tempDirInfo = this._createDirInfoByName(name, parentDirectoryInfo);\n\n      var actionInfo = this._createEditActionInfo(\"create\", tempDirInfo, parentDirectoryInfo);\n\n      return this._processEditAction(actionInfo, function (args) {\n        args.parentDirectory = parentDirItem;\n        args.name = name;\n\n        _this8._editingEvents.onDirectoryCreating(args);\n      }, function () {\n        return _this8._fileProvider.createDirectory(parentDirItem, name).done(function (info) {\n          if (!parentDirItem.isRoot()) {\n            parentDirItem.hasSubDirectories = true;\n          }\n\n          return info;\n        });\n      }, function () {\n        var args = {\n          parentDirectory: parentDirItem,\n          name: name\n        };\n\n        _this8._editingEvents.onDirectoryCreated(args);\n      }, function () {\n        return _this8._resetDirectoryState(parentDirectoryInfo, true);\n      });\n    }\n  }, {\n    key: \"renameItem\",\n    value: function renameItem(fileItemInfo, name) {\n      var _this9 = this;\n\n      var sourceItem = fileItemInfo.fileItem.createClone();\n\n      var actionInfo = this._createEditActionInfo(\"rename\", fileItemInfo, fileItemInfo.parentDirectory, {\n        itemNewName: name\n      });\n\n      return this._processEditAction(actionInfo, function (args, itemInfo) {\n        if (!itemInfo.fileItem.isDirectory) {\n          _this9._securityController.validateExtension(name);\n        }\n\n        args.item = sourceItem;\n        args.newName = name;\n\n        _this9._editingEvents.onItemRenaming(args);\n      }, function (item) {\n        return _this9._fileProvider.renameItem(item, name);\n      }, function () {\n        var args = {\n          sourceItem: sourceItem,\n          itemName: name\n        };\n\n        _this9._editingEvents.onItemRenamed(args);\n      }, function () {\n        var parentDirectory = _this9._getActualDirectoryInfo(fileItemInfo.parentDirectory);\n\n        _this9._resetDirectoryState(parentDirectory);\n\n        _this9.setCurrentDirectory(parentDirectory);\n      });\n    }\n  }, {\n    key: \"moveItems\",\n    value: function moveItems(itemInfos, destinationDirectory) {\n      var _this10 = this;\n\n      var actionInfo = this._createEditActionInfo(\"move\", itemInfos, destinationDirectory);\n\n      return this._processEditAction(actionInfo, function (args, itemInfo) {\n        args.item = itemInfo.fileItem;\n        args.destinationDirectory = destinationDirectory.fileItem;\n\n        _this10._editingEvents.onItemMoving(args);\n      }, function (item) {\n        return _this10._fileProvider.moveItems([item], destinationDirectory.fileItem);\n      }, function (itemInfo) {\n        var args = {\n          sourceItem: itemInfo.fileItem,\n          parentDirectory: destinationDirectory.fileItem,\n          itemName: itemInfo.fileItem.name,\n          itemPath: pathCombine(destinationDirectory.fileItem.path, itemInfo.fileItem.name)\n        };\n\n        _this10._editingEvents.onItemMoved(args);\n      }, function () {\n        destinationDirectory = _this10._getActualDirectoryInfo(destinationDirectory);\n        itemInfos.forEach(function (itemInfo) {\n          return _this10._resetDirectoryState(itemInfo.parentDirectory, true);\n        });\n\n        _this10._resetDirectoryState(destinationDirectory);\n\n        _this10.setCurrentDirectory(destinationDirectory);\n\n        destinationDirectory.expanded = true;\n      });\n    }\n  }, {\n    key: \"copyItems\",\n    value: function copyItems(itemInfos, destinationDirectory) {\n      var _this11 = this;\n\n      var actionInfo = this._createEditActionInfo(\"copy\", itemInfos, destinationDirectory);\n\n      return this._processEditAction(actionInfo, function (args, itemInfo) {\n        args.item = itemInfo.fileItem;\n        args.destinationDirectory = destinationDirectory.fileItem;\n\n        _this11._editingEvents.onItemCopying(args);\n      }, function (item) {\n        return _this11._fileProvider.copyItems([item], destinationDirectory.fileItem);\n      }, function (itemInfo) {\n        var args = {\n          sourceItem: itemInfo.fileItem,\n          parentDirectory: destinationDirectory.fileItem,\n          itemName: itemInfo.fileItem.name,\n          itemPath: pathCombine(destinationDirectory.fileItem.path, itemInfo.fileItem.name)\n        };\n\n        _this11._editingEvents.onItemCopied(args);\n      }, function () {\n        destinationDirectory = _this11._getActualDirectoryInfo(destinationDirectory);\n\n        _this11._resetDirectoryState(destinationDirectory);\n\n        _this11.setCurrentDirectory(destinationDirectory);\n\n        destinationDirectory.expanded = true;\n      });\n    }\n  }, {\n    key: \"deleteItems\",\n    value: function deleteItems(itemInfos) {\n      var _this12 = this;\n\n      var directory = itemInfos.length > 0 ? itemInfos[0].parentDirectory : null;\n\n      var actionInfo = this._createEditActionInfo(\"delete\", itemInfos, directory);\n\n      return this._processEditAction(actionInfo, function (args, itemInfo) {\n        args.item = itemInfo.fileItem;\n\n        _this12._editingEvents.onItemDeleting(args);\n      }, function (item) {\n        return _this12._fileProvider.deleteItems([item]);\n      }, function (itemInfo) {\n        return _this12._editingEvents.onItemDeleted({\n          item: itemInfo.fileItem\n        });\n      }, function () {\n        itemInfos.forEach(function (itemInfo) {\n          var parentDir = _this12._getActualDirectoryInfo(itemInfo.parentDirectory);\n\n          _this12._resetDirectoryState(parentDir);\n\n          _this12.setCurrentDirectory(parentDir);\n        });\n      });\n    }\n  }, {\n    key: \"processUploadSession\",\n    value: function processUploadSession(sessionInfo, uploadDirectoryInfo) {\n      var _this13 = this;\n\n      var itemInfos = this._getItemInfosForUploaderFiles(sessionInfo.files, uploadDirectoryInfo);\n\n      var actionInfo = this._createEditActionInfo(\"upload\", itemInfos, uploadDirectoryInfo, {\n        sessionInfo: sessionInfo\n      });\n\n      return this._processEditAction(actionInfo, function () {}, function (_, index) {\n        return sessionInfo.deferreds[index];\n      }, function () {}, function () {\n        return _this13._resetDirectoryState(uploadDirectoryInfo, true);\n      });\n    }\n  }, {\n    key: \"uploadFileChunk\",\n    value: function uploadFileChunk(fileData, chunksInfo, destinationDirectory) {\n      var _this14 = this;\n\n      var startDeferred = null;\n\n      if (0 === chunksInfo.chunkIndex) {\n        this._securityController.validateMaxFileSize(fileData.size);\n\n        this._securityController.validateExtension(fileData.name);\n\n        startDeferred = this._processBeforeItemEditAction(function (args) {\n          args.fileData = fileData;\n          args.destinationDirectory = destinationDirectory;\n\n          _this14._editingEvents.onFileUploading(args);\n        });\n      } else {\n        startDeferred = new Deferred().resolve().promise();\n      }\n\n      var result = startDeferred.then(function () {\n        return _this14._fileProvider.uploadFileChunk(fileData, chunksInfo, destinationDirectory);\n      });\n\n      if (chunksInfo.chunkIndex === chunksInfo.chunkCount - 1) {\n        result = result.done(function () {\n          var args = {\n            fileData: fileData,\n            parentDirectory: destinationDirectory\n          };\n\n          _this14._editingEvents.onFileUploaded(args);\n        });\n      }\n\n      return result;\n    }\n  }, {\n    key: \"abortFileUpload\",\n    value: function abortFileUpload(fileData, chunksInfo, destinationDirectory) {\n      return when(this._fileProvider.abortFileUpload(fileData, chunksInfo, destinationDirectory));\n    }\n  }, {\n    key: \"getFileUploadChunkSize\",\n    value: function getFileUploadChunkSize() {\n      var chunkSize = this._options.uploadChunkSize;\n\n      if (chunkSize && chunkSize > 0) {\n        return chunkSize;\n      }\n\n      return this._fileProvider.getFileUploadChunkSize();\n    }\n  }, {\n    key: \"downloadItems\",\n    value: function downloadItems(itemInfos) {\n      var _this15 = this;\n\n      var canceled = false;\n      var deferreds = itemInfos.map(function (itemInfo) {\n        return _this15._processBeforeItemEditAction(function (args) {\n          args.item = itemInfo.fileItem;\n\n          _this15._editingEvents.onItemDownloading(args);\n        }, itemInfo);\n      });\n      whenSome(deferreds, null, function () {\n        canceled = true;\n      }).then(function () {\n        if (!canceled) {\n          var items = itemInfos.map(function (i) {\n            return i.fileItem;\n          });\n\n          _this15._fileProvider.downloadItems(items);\n        }\n      });\n    }\n  }, {\n    key: \"getItemContent\",\n    value: function getItemContent(itemInfos) {\n      var items = itemInfos.map(function (i) {\n        return i.fileItem;\n      });\n      return when(this._fileProvider.getItemsContent(items));\n    }\n  }, {\n    key: \"_handleItemLoadError\",\n    value: function _handleItemLoadError(parentDirectoryInfo, errorInfo, skipNavigationOnError) {\n      parentDirectoryInfo = this._getActualDirectoryInfo(parentDirectoryInfo);\n\n      var actionInfo = this._createEditActionInfo(\"getItems\", parentDirectoryInfo, parentDirectoryInfo);\n\n      this._raiseEditActionStarting(actionInfo);\n\n      this._raiseEditActionResultAcquired(actionInfo);\n\n      this._raiseEditActionError(actionInfo, {\n        errorCode: errorInfo.errorCode,\n        errorText: errorInfo.errorText,\n        fileItem: parentDirectoryInfo.fileItem,\n        index: 0\n      });\n\n      this._resetDirectoryState(parentDirectoryInfo);\n\n      parentDirectoryInfo.expanded = false;\n\n      if (!skipNavigationOnError) {\n        this.setCurrentDirectory(parentDirectoryInfo.parentDirectory);\n      }\n\n      return new Deferred().reject().promise();\n    }\n  }, {\n    key: \"_processEditAction\",\n    value: function _processEditAction(actionInfo, beforeAction, action, afterAction, completeAction) {\n      var _this16 = this;\n\n      this._raiseEditActionStarting(actionInfo);\n\n      var actionResult = actionInfo.itemInfos.map(function (itemInfo, itemIndex) {\n        return _this16._processBeforeItemEditAction(beforeAction, itemInfo).then(function () {\n          var itemActionResult = action(itemInfo.fileItem, itemIndex);\n\n          if (Array.isArray(itemActionResult)) {\n            itemActionResult = itemActionResult[0];\n          }\n\n          return itemActionResult.done(function () {\n            return afterAction(itemInfo);\n          });\n        });\n      });\n      actionInfo.singleRequest = 1 === actionResult.length;\n\n      this._raiseEditActionResultAcquired(actionInfo);\n\n      return whenSome(actionResult, function (info) {\n        return _this16._raiseCompleteEditActionItem(actionInfo, info);\n      }, function (errorInfo) {\n        return _this16._raiseEditActionItemError(actionInfo, errorInfo);\n      }).then(function () {\n        completeAction();\n\n        _this16._raiseCompleteEditAction(actionInfo);\n      });\n    }\n  }, {\n    key: \"_createEditActionInfo\",\n    value: function _createEditActionInfo(name, targetItemInfos, directory, customData) {\n      targetItemInfos = Array.isArray(targetItemInfos) ? targetItemInfos : [targetItemInfos];\n      customData = customData || {};\n      var items = targetItemInfos.map(function (itemInfo) {\n        return itemInfo.fileItem;\n      });\n      return {\n        name: name,\n        itemInfos: targetItemInfos,\n        items: items,\n        directory: directory,\n        customData: customData,\n        singleRequest: true\n      };\n    }\n  }, {\n    key: \"_processBeforeItemEditAction\",\n    value: function _processBeforeItemEditAction(action, itemInfo) {\n      var deferred = new Deferred();\n\n      var args = this._createBeforeActionArgs();\n\n      try {\n        action(args, itemInfo);\n      } catch (errorInfo) {\n        return deferred.reject(errorInfo).promise();\n      }\n\n      if (!args.cancel) {\n        deferred.resolve();\n      } else if (true === args.cancel) {\n        return deferred.reject({\n          errorText: args.errorText,\n          errorCode: args.errorCode\n        });\n      } else if (isPromise(args.cancel)) {\n        when(args.cancel).then(function (res) {\n          if (true === res) {\n            deferred.reject();\n          } else if (isObject(res) && true === res.cancel) {\n            deferred.reject({\n              errorText: res.errorText,\n              errorCode: res.errorCode\n            });\n          }\n\n          deferred.resolve();\n        }, deferred.resolve);\n      }\n\n      return deferred.promise();\n    }\n  }, {\n    key: \"_createBeforeActionArgs\",\n    value: function _createBeforeActionArgs() {\n      return {\n        errorCode: void 0,\n        errorText: \"\",\n        cancel: false\n      };\n    }\n  }, {\n    key: \"_getItemInfosForUploaderFiles\",\n    value: function _getItemInfosForUploaderFiles(files, parentDirectoryInfo) {\n      var pathInfo = this._getPathInfo(parentDirectoryInfo);\n\n      var result = [];\n\n      for (var i = 0; i < files.length; i++) {\n        var file = files[i];\n        var item = new FileSystemItem(pathInfo, file.name, false);\n\n        var itemInfo = this._createFileInfo(item, parentDirectoryInfo);\n\n        result.push(itemInfo);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"refresh\",\n    value: function refresh() {\n      var _this17 = this;\n\n      if (this._lockRefresh) {\n        return this._refreshDeferred;\n      }\n\n      this._lockRefresh = true;\n      return this._executeDataLoad(function () {\n        return _this17._refreshDeferred = _this17._refreshInternal();\n      }, \"refresh\");\n    }\n  }, {\n    key: \"_refreshInternal\",\n    value: function _refreshInternal() {\n      var _this18 = this;\n\n      var cachedRootInfo = {\n        items: this._rootDirectoryInfo.items\n      };\n\n      var selectedKeyParts = this._getDirectoryPathKeyParts(this.getCurrentDirectory());\n\n      this._resetDirectoryState(this._rootDirectoryInfo);\n\n      return this._loadItemsRecursive(this._rootDirectoryInfo, cachedRootInfo).then(function () {\n        var dirInfo = _this18._findDirectoryByPathKeyParts(selectedKeyParts);\n\n        _this18.setCurrentDirectory(dirInfo);\n\n        delete _this18._lockRefresh;\n      });\n    }\n  }, {\n    key: \"_loadItemsRecursive\",\n    value: function _loadItemsRecursive(directoryInfo, cachedDirectoryInfo) {\n      var _this = this;\n\n      return this.getDirectories(directoryInfo).then(function (dirInfos) {\n        var itemDeferreds = [];\n\n        var _loop = function _loop(i) {\n          var cachedItem = find(cachedDirectoryInfo.items, function (cache) {\n            return dirInfos[i].fileItem.key === cache.fileItem.key;\n          });\n\n          if (!cachedItem) {\n            return \"continue\";\n          }\n\n          dirInfos[i].expanded = cachedItem.expanded;\n\n          if (dirInfos[i].expanded) {\n            itemDeferreds.push(_this._loadItemsRecursive(dirInfos[i], cachedItem));\n          }\n        };\n\n        for (var i = 0; i < dirInfos.length; i++) {\n          var _ret = _loop(i);\n\n          if (\"continue\" === _ret) {\n            continue;\n          }\n        }\n\n        return whenSome(itemDeferreds);\n      }, function () {\n        return null;\n      });\n    }\n  }, {\n    key: \"_setCurrentDirectoryByPathParts\",\n    value: function _setCurrentDirectoryByPathParts(pathParts, useKeys) {\n      var _this19 = this;\n\n      return this._executeDataLoad(function () {\n        return _this19._setCurrentDirectoryByPathPartsInternal(pathParts, useKeys);\n      }, \"navigation\");\n    }\n  }, {\n    key: \"_setCurrentDirectoryByPathPartsInternal\",\n    value: function _setCurrentDirectoryByPathPartsInternal(pathParts, useKeys) {\n      var _this20 = this;\n\n      return this._getDirectoryByPathParts(this._rootDirectoryInfo, pathParts, useKeys).then(function (directoryInfo) {\n        for (var info = directoryInfo.parentDirectory; info; info = info.parentDirectory) {\n          info.expanded = true;\n        }\n\n        _this20.setCurrentDirectory(directoryInfo);\n      }, function () {\n        _this20._raisePathPotentiallyChanged();\n      });\n    }\n  }, {\n    key: \"_executeDataLoad\",\n    value: function _executeDataLoad(action, operation) {\n      var _this21 = this;\n\n      if (this._dataLoadingDeferred) {\n        return this._dataLoadingDeferred.then(function () {\n          return _this21._executeDataLoad(action, operation);\n        });\n      }\n\n      this._dataLoading = true;\n      this._dataLoadingDeferred = new Deferred();\n\n      if (this._isInitialized) {\n        this._raiseDataLoading(operation);\n      }\n\n      return action().always(function () {\n        var tempDeferred = _this21._dataLoadingDeferred;\n        _this21._dataLoadingDeferred = null;\n        _this21._dataLoading = false;\n        tempDeferred.resolve();\n      });\n    }\n  }, {\n    key: \"_getDirectoryByPathParts\",\n    value: function _getDirectoryByPathParts(parentDirectoryInfo, pathParts, useKeys) {\n      var _this22 = this;\n\n      if (pathParts.length < 1) {\n        return new Deferred().resolve(parentDirectoryInfo).promise();\n      }\n\n      var fieldName = useKeys ? \"key\" : \"name\";\n      return this.getDirectories(parentDirectoryInfo).then(function (dirInfos) {\n        var subDirInfo = find(dirInfos, function (d) {\n          return d.fileItem[fieldName] === pathParts[0];\n        });\n\n        if (!subDirInfo) {\n          return new Deferred().reject().promise();\n        }\n\n        var restPathParts = _toConsumableArray(pathParts).splice(1);\n\n        return _this22._getDirectoryByPathParts(subDirInfo, restPathParts, useKeys);\n      });\n    }\n  }, {\n    key: \"_getDirectoryPathKeyParts\",\n    value: function _getDirectoryPathKeyParts(directoryInfo) {\n      var pathParts = [];\n\n      while (directoryInfo && directoryInfo.parentDirectory) {\n        pathParts.unshift(directoryInfo.fileItem.key);\n        directoryInfo = directoryInfo.parentDirectory;\n      }\n\n      return pathParts;\n    }\n  }, {\n    key: \"_findDirectoryByPathKeyParts\",\n    value: function _findDirectoryByPathKeyParts(keyParts) {\n      var selectedDirInfo = this._rootDirectoryInfo;\n\n      if (0 === keyParts.length) {\n        return selectedDirInfo;\n      }\n\n      var i = 0;\n      var newSelectedDir = selectedDirInfo;\n\n      while (newSelectedDir && i < keyParts.length) {\n        newSelectedDir = find(selectedDirInfo.items, function (info) {\n          return info.fileItem.key === keyParts[i];\n        });\n\n        if (newSelectedDir) {\n          selectedDirInfo = newSelectedDir;\n        }\n\n        i++;\n      }\n\n      return selectedDirInfo;\n    }\n  }, {\n    key: \"_getActualDirectoryInfo\",\n    value: function _getActualDirectoryInfo(directoryInfo) {\n      var keys = this._getDirectoryPathKeyParts(directoryInfo);\n\n      return this._findDirectoryByPathKeyParts(keys);\n    }\n  }, {\n    key: \"_createDirInfoByName\",\n    value: function _createDirInfoByName(name, parentDirectoryInfo) {\n      var dirPathInfo = this._getPathInfo(parentDirectoryInfo);\n\n      var fileItem = new FileSystemItem(dirPathInfo, name, true);\n      return this._createDirectoryInfo(fileItem, parentDirectoryInfo);\n    }\n  }, {\n    key: \"_createDirectoryInfo\",\n    value: function _createDirectoryInfo(fileItem, parentDirectoryInfo) {\n      return extend(this._createFileInfo(fileItem, parentDirectoryInfo), {\n        icon: \"folder\",\n        expanded: fileItem.isRoot(),\n        items: []\n      });\n    }\n  }, {\n    key: \"_createFileInfo\",\n    value: function _createFileInfo(fileItem, parentDirectoryInfo) {\n      return {\n        fileItem: fileItem,\n        parentDirectory: parentDirectoryInfo,\n        icon: this._getFileItemDefaultIcon(fileItem),\n        getInternalKey: function getInternalKey() {\n          return \"FIK_\".concat(this.fileItem.key);\n        },\n        getDisplayName: function getDisplayName() {\n          return this.displayName || this.fileItem.name;\n        }\n      };\n    }\n  }, {\n    key: \"_resetDirectoryState\",\n    value: function _resetDirectoryState(directoryInfo, isActualDirectoryRequired) {\n      if (isActualDirectoryRequired) {\n        directoryInfo = this._getActualDirectoryInfo(directoryInfo);\n      }\n\n      directoryInfo.itemsLoaded = false;\n      directoryInfo.items = [];\n    }\n  }, {\n    key: \"_getFileItemDefaultIcon\",\n    value: function _getFileItemDefaultIcon(fileItem) {\n      if (fileItem.isDirectory) {\n        return \"folder\";\n      }\n\n      var extension = fileItem.getFileExtension();\n      var icon = this._defaultIconMap[extension];\n      return icon || \"doc\";\n    }\n  }, {\n    key: \"_createDefaultIconMap\",\n    value: function _createDefaultIconMap() {\n      var result = {\n        \".txt\": \"txtfile\",\n        \".rtf\": \"rtffile\",\n        \".doc\": \"docfile\",\n        \".docx\": \"docxfile\",\n        \".xls\": \"xlsfile\",\n        \".xlsx\": \"xlsxfile\",\n        \".ppt\": \"pptfile\",\n        \".pptx\": \"pptxfile\",\n        \".pdf\": \"pdffile\"\n      };\n      [\".png\", \".gif\", \".jpg\", \".jpeg\", \".ico\", \".bmp\"].forEach(function (extension) {\n        result[extension] = \"image\";\n      });\n      return result;\n    }\n  }, {\n    key: \"_createRootDirectoryInfo\",\n    value: function _createRootDirectoryInfo(text) {\n      var rootDirectory = new FileSystemItem(null, \"\", true);\n\n      var result = this._createDirectoryInfo(rootDirectory, null);\n\n      result.displayName = text || DEFAULT_ROOT_FILE_SYSTEM_ITEM_NAME;\n      return result;\n    }\n  }, {\n    key: \"setRootText\",\n    value: function setRootText(rootText) {\n      this._rootDirectoryInfo.displayName = rootText || DEFAULT_ROOT_FILE_SYSTEM_ITEM_NAME;\n    }\n  }, {\n    key: \"_raiseInitialized\",\n    value: function _raiseInitialized() {\n      this._tryCallAction(\"onInitialized\", {\n        controller: this\n      });\n    }\n  }, {\n    key: \"_raiseDataLoading\",\n    value: function _raiseDataLoading(operation) {\n      this._tryCallAction(\"onDataLoading\", {\n        operation: operation\n      });\n    }\n  }, {\n    key: \"_raiseSelectedDirectoryChanged\",\n    value: function _raiseSelectedDirectoryChanged(directoryInfo) {\n      this._tryCallAction(\"onSelectedDirectoryChanged\", {\n        selectedDirectoryInfo: directoryInfo\n      });\n    }\n  }, {\n    key: \"_raiseEditActionStarting\",\n    value: function _raiseEditActionStarting(actionInfo) {\n      this._tryCallAction(\"onEditActionStarting\", actionInfo);\n    }\n  }, {\n    key: \"_raiseEditActionResultAcquired\",\n    value: function _raiseEditActionResultAcquired(actionInfo) {\n      this._tryCallAction(\"onEditActionResultAcquired\", actionInfo);\n    }\n  }, {\n    key: \"_raiseEditActionError\",\n    value: function _raiseEditActionError(actionInfo, errorInfo) {\n      this._tryCallAction(\"onEditActionError\", actionInfo, errorInfo);\n    }\n  }, {\n    key: \"_raiseEditActionItemError\",\n    value: function _raiseEditActionItemError(actionInfo, errorInfo) {\n      this._tryCallAction(\"onEditActionItemError\", actionInfo, errorInfo);\n    }\n  }, {\n    key: \"_raiseCompleteEditActionItem\",\n    value: function _raiseCompleteEditActionItem(actionInfo, info) {\n      this._tryCallAction(\"onCompleteEditActionItem\", actionInfo, info);\n    }\n  }, {\n    key: \"_raiseCompleteEditAction\",\n    value: function _raiseCompleteEditAction(actionInfo) {\n      this._tryCallAction(\"onCompleteEditAction\", actionInfo);\n    }\n  }, {\n    key: \"_raisePathPotentiallyChanged\",\n    value: function _raisePathPotentiallyChanged() {\n      this._tryCallAction(\"onPathPotentiallyChanged\");\n    }\n  }, {\n    key: \"_tryCallAction\",\n    value: function _tryCallAction(actionName) {\n      var args = Array.prototype.slice.call(arguments, 1);\n\n      if (this._options[actionName]) {\n        var _this$_options;\n\n        (_this$_options = this._options)[actionName].apply(_this$_options, _toConsumableArray(args));\n      }\n    }\n  }, {\n    key: \"_resetState\",\n    value: function _resetState() {\n      this._selectedDirectory = null;\n      this._rootDirectoryInfo.items = [];\n      this._rootDirectoryInfo.itemsLoaded = false;\n      this._loadedItems = {};\n    }\n  }, {\n    key: \"_getPathInfo\",\n    value: function _getPathInfo(directoryInfo) {\n      var pathInfo = [];\n\n      for (var dirInfo = directoryInfo; dirInfo && !dirInfo.fileItem.isRoot(); dirInfo = dirInfo.parentDirectory) {\n        pathInfo.unshift({\n          key: dirInfo.fileItem.key,\n          name: dirInfo.fileItem.name\n        });\n      }\n\n      return pathInfo;\n    }\n  }, {\n    key: \"on\",\n    value: function on(eventName, eventHandler) {\n      var finalEventName = \"on\".concat(eventName);\n      this._options[finalEventName] = eventHandler;\n    }\n  }, {\n    key: \"_editingEvents\",\n    get: function get() {\n      return this._options.editingEvents;\n    }\n  }]);\n\n  return FileItemsController;\n}();\n\nexport { FileItemsController as default };\n\nvar FileSecurityController = /*#__PURE__*/function () {\n  function FileSecurityController(options) {\n    var _this23 = this;\n\n    _classCallCheck(this, FileSecurityController);\n\n    this._options = extend({\n      allowedFileExtensions: [],\n      maxFileSize: 0\n    }, options);\n    this._extensionsMap = {};\n\n    this._allowedFileExtensions.forEach(function (extension) {\n      _this23._extensionsMap[extension.toUpperCase()] = true;\n    });\n  }\n\n  _createClass(FileSecurityController, [{\n    key: \"getAllowedItems\",\n    value: function getAllowedItems(items) {\n      var _this24 = this;\n\n      if (0 === this._allowedFileExtensions.length) {\n        return items;\n      }\n\n      return items.filter(function (item) {\n        return item.isDirectory || _this24._isValidExtension(item.name);\n      });\n    }\n  }, {\n    key: \"validateExtension\",\n    value: function validateExtension(name) {\n      if (!this._isValidExtension(name)) {\n        throw new FileSystemError(ErrorCode.WrongFileExtension, null);\n      }\n    }\n  }, {\n    key: \"validateMaxFileSize\",\n    value: function validateMaxFileSize(size) {\n      if (this._maxFileSize && size > this._maxFileSize) {\n        throw new FileSystemError(ErrorCode.MaxFileSizeExceeded, null);\n      }\n    }\n  }, {\n    key: \"_isValidExtension\",\n    value: function _isValidExtension(name) {\n      if (0 === this._allowedFileExtensions.length) {\n        return true;\n      }\n\n      var extension = getFileExtension(name).toUpperCase();\n      return this._extensionsMap[extension];\n    }\n  }, {\n    key: \"_allowedFileExtensions\",\n    get: function get() {\n      return this._options.allowedFileExtensions;\n    }\n  }, {\n    key: \"_maxFileSize\",\n    get: function get() {\n      return this._options.maxFileSize;\n    }\n  }]);\n\n  return FileSecurityController;\n}();","map":null,"metadata":{},"sourceType":"module"}