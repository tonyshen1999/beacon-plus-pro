{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/pivot_grid/data_source.utils.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { foreachTree, findField, getCompareFunction, createPath, foreachDataLevel } from \"./ui.pivot_grid.utils\";\nimport { isDefined } from \"../../core/utils/type\";\nimport { map } from \"../../core/utils/iterator\";\nexport function sort(loadOptions, dataSource, getAscOrder) {\n  sortDimension(dataSource, loadOptions, \"rows\", getAscOrder);\n  sortDimension(dataSource, loadOptions, \"columns\", getAscOrder);\n}\n\nfunction sortDimension(dataSource, loadOptions, dimensionName, getAscOrder) {\n  var fields = loadOptions[dimensionName] || [];\n  var baseIndex = loadOptions.headerName === dimensionName ? loadOptions.path.length : 0;\n  var sortingMethodByLevel = [];\n  foreachDataLevel(dataSource[dimensionName], function (item, index) {\n    var field = fields[index] || {};\n    var sortingMethod = sortingMethodByLevel[index] = sortingMethodByLevel[index] || getSortingMethod(field, dataSource, loadOptions, dimensionName, getAscOrder);\n    item.sort(sortingMethod);\n  }, baseIndex);\n}\n\nfunction getSortingMethod(field, dataSource, loadOptions, dimensionName, getAscOrder) {\n  var sortOrder = getAscOrder ? \"asc\" : field.sortOrder;\n  var sortBy = getMemberForSortBy(field.sortBy, getAscOrder);\n  var defaultCompare = field.sortingMethod ? function (a, b) {\n    return field.sortingMethod(a, b);\n  } : getCompareFunction(function (item) {\n    return item[sortBy];\n  });\n  var summaryValueSelector = !getAscOrder && getFieldSummaryValueSelector(field, dataSource, loadOptions, dimensionName);\n  var summaryCompare = summaryValueSelector && getCompareFunction(summaryValueSelector);\n  return function (a, b) {\n    var result = summaryCompare && summaryCompare(a, b) || defaultCompare(a, b);\n    return \"desc\" === sortOrder ? -result : result;\n  };\n}\n\nfunction getFieldSummaryValueSelector(field, dataSource, loadOptions, dimensionName) {\n  var values = dataSource.values;\n  var sortBySummaryFieldIndex = findField(loadOptions.values, field.sortBySummaryField);\n  var areRows = \"rows\" === dimensionName;\n  var sortByDimension = areRows ? dataSource.columns : dataSource.rows;\n  var grandTotalIndex = areRows ? dataSource.grandTotalRowIndex : dataSource.grandTotalColumnIndex;\n  var sortBySummaryPath = field.sortBySummaryPath || [];\n  var sliceIndex = sortBySummaryPath.length ? getSliceIndex(sortByDimension, sortBySummaryPath) : grandTotalIndex;\n\n  if (values && values.length && sortBySummaryFieldIndex >= 0 && isDefined(sliceIndex)) {\n    return function (field) {\n      var rowIndex = areRows ? field.index : sliceIndex;\n      var columnIndex = areRows ? sliceIndex : field.index;\n      var value = ((values[rowIndex] || [[]])[columnIndex] || [])[sortBySummaryFieldIndex];\n      return isDefined(value) ? value : null;\n    };\n  }\n}\n\nfunction getMemberForSortBy(sortBy, getAscOrder) {\n  var member = \"text\";\n\n  if (\"none\" === sortBy) {\n    member = \"index\";\n  } else if (getAscOrder || \"displayText\" !== sortBy) {\n    member = \"value\";\n  }\n\n  return member;\n}\n\nfunction getSliceIndex(items, path) {\n  var index = null;\n  var pathValue = (path || []).join(\".\");\n\n  if (pathValue.length) {\n    foreachTree(items, function (items) {\n      var item = items[0];\n      var itemPath = createPath(items).join(\".\");\n      var textPath = map(items, function (item) {\n        return item.text;\n      }).reverse().join(\".\");\n\n      if (pathValue === itemPath || item.key && textPath === pathValue) {\n        index = items[0].index;\n        return false;\n      }\n    });\n  }\n\n  return index;\n}","map":null,"metadata":{},"sourceType":"module"}