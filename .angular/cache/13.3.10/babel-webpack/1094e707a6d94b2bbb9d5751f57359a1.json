{"ast":null,"code":"var isArray = Array.isArray;\n\nfunction isStringOrNumber(o) {\n  var type = typeof o;\n  return type === 'string' || type === 'number';\n}\n\nfunction isNullOrUndef(o) {\n  return o === void 0 || o === null;\n}\n\nfunction isInvalid(o) {\n  return o === null || o === false || o === true || o === void 0;\n}\n\nfunction isFunction(o) {\n  return typeof o === 'function';\n}\n\nfunction isString(o) {\n  return typeof o === 'string';\n}\n\nfunction isNumber(o) {\n  return typeof o === 'number';\n}\n\nfunction isNull(o) {\n  return o === null;\n}\n\nfunction isUndefined(o) {\n  return o === void 0;\n}\n\nfunction combineFrom(first, second) {\n  var out = {};\n\n  if (first) {\n    for (var key in first) {\n      out[key] = first[key];\n    }\n  }\n\n  if (second) {\n    for (var key$1 in second) {\n      out[key$1] = second[key$1];\n    }\n  }\n\n  return out;\n}\n/**\n * Links given data to event as first parameter\n * @param {*} data data to be linked, it will be available in function as first parameter\n * @param {Function} event Function to be called when event occurs\n * @returns {{data: *, event: Function}}\n */\n\n\nfunction linkEvent(data, event) {\n  if (isFunction(event)) {\n    return {\n      data: data,\n      event: event\n    };\n  }\n\n  return null; // Return null when event is invalid, to avoid creating unnecessary event handlers\n} // object.event should always be function, otherwise its badly created object.\n\n\nfunction isLinkEventObject(o) {\n  return !isNull(o) && typeof o === 'object';\n} // We need EMPTY_OBJ defined in one place.\n// Its used for comparison so we cant inline it into shared\n\n\nvar EMPTY_OBJ = {};\nvar Fragment = '$F';\n\nfunction normalizeEventName(name) {\n  return name.substr(2).toLowerCase();\n}\n\nfunction appendChild(parentDOM, dom) {\n  parentDOM.appendChild(dom);\n}\n\nfunction insertOrAppend(parentDOM, newNode, nextNode) {\n  if (isNull(nextNode)) {\n    appendChild(parentDOM, newNode);\n  } else {\n    parentDOM.insertBefore(newNode, nextNode);\n  }\n}\n\nfunction documentCreateElement(tag, isSVG) {\n  if (isSVG) {\n    return document.createElementNS('http://www.w3.org/2000/svg', tag);\n  }\n\n  return document.createElement(tag);\n}\n\nfunction replaceChild(parentDOM, newDom, lastDom) {\n  parentDOM.replaceChild(newDom, lastDom);\n}\n\nfunction removeChild(parentDOM, childNode) {\n  parentDOM.removeChild(childNode);\n}\n\nfunction callAll(arrayFn) {\n  for (var i = 0; i < arrayFn.length; i++) {\n    arrayFn[i]();\n  }\n}\n\nfunction findChildVNode(vNode, startEdge, flags) {\n  var children = vNode.children;\n\n  if (flags & 4\n  /* ComponentClass */\n  ) {\n    return children.$LI;\n  }\n\n  if (flags & 8192\n  /* Fragment */\n  ) {\n    return vNode.childFlags === 2\n    /* HasVNodeChildren */\n    ? children : children[startEdge ? 0 : children.length - 1];\n  }\n\n  return children;\n}\n\nfunction findDOMfromVNode(vNode, startEdge) {\n  var flags;\n\n  while (vNode) {\n    flags = vNode.flags;\n\n    if (flags & 2033\n    /* DOMRef */\n    ) {\n      return vNode.dom;\n    }\n\n    vNode = findChildVNode(vNode, startEdge, flags);\n  }\n\n  return null;\n}\n\nfunction removeVNodeDOM(vNode, parentDOM) {\n  do {\n    var flags = vNode.flags;\n\n    if (flags & 2033\n    /* DOMRef */\n    ) {\n      removeChild(parentDOM, vNode.dom);\n      return;\n    }\n\n    var children = vNode.children;\n\n    if (flags & 4\n    /* ComponentClass */\n    ) {\n      vNode = children.$LI;\n    }\n\n    if (flags & 8\n    /* ComponentFunction */\n    ) {\n      vNode = children;\n    }\n\n    if (flags & 8192\n    /* Fragment */\n    ) {\n      if (vNode.childFlags === 2\n      /* HasVNodeChildren */\n      ) {\n        vNode = children;\n      } else {\n        for (var i = 0, len = children.length; i < len; ++i) {\n          removeVNodeDOM(children[i], parentDOM);\n        }\n\n        return;\n      }\n    }\n  } while (vNode);\n}\n\nfunction moveVNodeDOM(vNode, parentDOM, nextNode) {\n  do {\n    var flags = vNode.flags;\n\n    if (flags & 2033\n    /* DOMRef */\n    ) {\n      insertOrAppend(parentDOM, vNode.dom, nextNode);\n      return;\n    }\n\n    var children = vNode.children;\n\n    if (flags & 4\n    /* ComponentClass */\n    ) {\n      vNode = children.$LI;\n    }\n\n    if (flags & 8\n    /* ComponentFunction */\n    ) {\n      vNode = children;\n    }\n\n    if (flags & 8192\n    /* Fragment */\n    ) {\n      if (vNode.childFlags === 2\n      /* HasVNodeChildren */\n      ) {\n        vNode = children;\n      } else {\n        for (var i = 0, len = children.length; i < len; ++i) {\n          moveVNodeDOM(children[i], parentDOM, nextNode);\n        }\n\n        return;\n      }\n    }\n  } while (vNode);\n}\n\nfunction createDerivedState(instance, nextProps, state) {\n  if (instance.constructor.getDerivedStateFromProps) {\n    return combineFrom(state, instance.constructor.getDerivedStateFromProps(nextProps, state));\n  }\n\n  return state;\n}\n\nvar renderCheck = {\n  v: false\n};\nvar options = {\n  componentComparator: null,\n  createVNode: null,\n  renderComplete: null\n};\n\nfunction setTextContent(dom, children) {\n  dom.textContent = children;\n} // Calling this function assumes, nextValue is linkEvent\n\n\nfunction isLastValueSameLinkEvent(lastValue, nextValue) {\n  return isLinkEventObject(lastValue) && lastValue.event === nextValue.event && lastValue.data === nextValue.data;\n}\n\nfunction mergeUnsetProperties(to, from) {\n  for (var propName in from) {\n    if (isUndefined(to[propName])) {\n      to[propName] = from[propName];\n    }\n  }\n\n  return to;\n}\n\nfunction safeCall1(method, arg1) {\n  return !!isFunction(method) && (method(arg1), true);\n}\n\nvar keyPrefix = '$';\n\nfunction V(childFlags, children, className, flags, key, props, ref, type) {\n  this.childFlags = childFlags;\n  this.children = children;\n  this.className = className;\n  this.dom = null;\n  this.flags = flags;\n  this.key = key === void 0 ? null : key;\n  this.props = props === void 0 ? null : props;\n  this.ref = ref === void 0 ? null : ref;\n  this.type = type;\n}\n\nfunction createVNode(flags, type, className, children, childFlags, props, key, ref) {\n  var childFlag = childFlags === void 0 ? 1\n  /* HasInvalidChildren */\n  : childFlags;\n  var vNode = new V(childFlag, children, className, flags, key, props, ref, type);\n\n  if (options.createVNode) {\n    options.createVNode(vNode);\n  }\n\n  if (childFlag === 0\n  /* UnknownChildren */\n  ) {\n    normalizeChildren(vNode, vNode.children);\n  }\n\n  return vNode;\n}\n\nfunction mergeDefaultHooks(flags, type, ref) {\n  if (flags & 4\n  /* ComponentClass */\n  ) {\n    return ref;\n  }\n\n  var defaultHooks = (flags & 32768\n  /* ForwardRef */\n  ? type.render : type).defaultHooks;\n\n  if (isNullOrUndef(defaultHooks)) {\n    return ref;\n  }\n\n  if (isNullOrUndef(ref)) {\n    return defaultHooks;\n  }\n\n  return mergeUnsetProperties(ref, defaultHooks);\n}\n\nfunction mergeDefaultProps(flags, type, props) {\n  // set default props\n  var defaultProps = (flags & 32768\n  /* ForwardRef */\n  ? type.render : type).defaultProps;\n\n  if (isNullOrUndef(defaultProps)) {\n    return props;\n  }\n\n  if (isNullOrUndef(props)) {\n    return combineFrom(defaultProps, null);\n  }\n\n  return mergeUnsetProperties(props, defaultProps);\n}\n\nfunction resolveComponentFlags(flags, type) {\n  if (flags & 12\n  /* ComponentKnown */\n  ) {\n    return flags;\n  }\n\n  if (type.prototype && type.prototype.render) {\n    return 4\n    /* ComponentClass */\n    ;\n  }\n\n  if (type.render) {\n    return 32776\n    /* ForwardRefComponent */\n    ;\n  }\n\n  return 8\n  /* ComponentFunction */\n  ;\n}\n\nfunction createComponentVNode(flags, type, props, key, ref) {\n  flags = resolveComponentFlags(flags, type);\n  var vNode = new V(1\n  /* HasInvalidChildren */\n  , null, null, flags, key, mergeDefaultProps(flags, type, props), mergeDefaultHooks(flags, type, ref), type);\n\n  if (options.createVNode) {\n    options.createVNode(vNode);\n  }\n\n  return vNode;\n}\n\nfunction createTextVNode(text, key) {\n  return new V(1\n  /* HasInvalidChildren */\n  , isNullOrUndef(text) || text === true || text === false ? '' : text, null, 16\n  /* Text */\n  , key, null, null, null);\n}\n\nfunction createFragment(children, childFlags, key) {\n  var fragment = createVNode(8192\n  /* Fragment */\n  , 8192\n  /* Fragment */\n  , null, children, childFlags, null, key, null);\n\n  switch (fragment.childFlags) {\n    case 1\n    /* HasInvalidChildren */\n    :\n      fragment.children = createVoidVNode();\n      fragment.childFlags = 2\n      /* HasVNodeChildren */\n      ;\n      break;\n\n    case 16\n    /* HasTextChildren */\n    :\n      fragment.children = [createTextVNode(children)];\n      fragment.childFlags = 4\n      /* HasNonKeyedChildren */\n      ;\n      break;\n  }\n\n  return fragment;\n}\n\nfunction normalizeProps(vNode) {\n  var props = vNode.props;\n\n  if (props) {\n    var flags = vNode.flags;\n\n    if (flags & 481\n    /* Element */\n    ) {\n      if (props.children !== void 0 && isNullOrUndef(vNode.children)) {\n        normalizeChildren(vNode, props.children);\n      }\n\n      if (props.className !== void 0) {\n        if (isNullOrUndef(vNode.className)) {\n          vNode.className = props.className || null;\n        }\n\n        props.className = undefined;\n      }\n    }\n\n    if (props.key !== void 0) {\n      vNode.key = props.key;\n      props.key = undefined;\n    }\n\n    if (props.ref !== void 0) {\n      if (flags & 8\n      /* ComponentFunction */\n      ) {\n        vNode.ref = combineFrom(vNode.ref, props.ref);\n      } else {\n        vNode.ref = props.ref;\n      }\n\n      props.ref = undefined;\n    }\n  }\n\n  return vNode;\n}\n/*\n * Fragment is different than normal vNode,\n * because when it needs to be cloned we need to clone its children too\n * But not normalize, because otherwise those possibly get KEY and re-mount\n */\n\n\nfunction cloneFragment(vNodeToClone) {\n  var oldChildren = vNodeToClone.children;\n  var childFlags = vNodeToClone.childFlags;\n  return createFragment(childFlags === 2\n  /* HasVNodeChildren */\n  ? directClone(oldChildren) : oldChildren.map(directClone), childFlags, vNodeToClone.key);\n}\n\nfunction directClone(vNodeToClone) {\n  var flags = vNodeToClone.flags & -16385\n  /* ClearInUse */\n  ;\n  var props = vNodeToClone.props;\n\n  if (flags & 14\n  /* Component */\n  ) {\n    if (!isNull(props)) {\n      var propsToClone = props;\n      props = {};\n\n      for (var key in propsToClone) {\n        props[key] = propsToClone[key];\n      }\n    }\n  }\n\n  if ((flags & 8192\n  /* Fragment */\n  ) === 0) {\n    return new V(vNodeToClone.childFlags, vNodeToClone.children, vNodeToClone.className, flags, vNodeToClone.key, props, vNodeToClone.ref, vNodeToClone.type);\n  }\n\n  return cloneFragment(vNodeToClone);\n}\n\nfunction createVoidVNode() {\n  return createTextVNode('', null);\n}\n\nfunction createPortal(children, container) {\n  var normalizedRoot = normalizeRoot(children);\n  return createVNode(1024\n  /* Portal */\n  , 1024\n  /* Portal */\n  , null, normalizedRoot, 0\n  /* UnknownChildren */\n  , null, normalizedRoot.key, container);\n}\n\nfunction _normalizeVNodes(nodes, result, index, currentKey) {\n  for (var len = nodes.length; index < len; index++) {\n    var n = nodes[index];\n\n    if (!isInvalid(n)) {\n      var newKey = currentKey + keyPrefix + index;\n\n      if (isArray(n)) {\n        _normalizeVNodes(n, result, 0, newKey);\n      } else {\n        if (isStringOrNumber(n)) {\n          n = createTextVNode(n, newKey);\n        } else {\n          var oldKey = n.key;\n          var isPrefixedKey = isString(oldKey) && oldKey[0] === keyPrefix;\n\n          if (n.flags & 81920\n          /* InUseOrNormalized */\n          || isPrefixedKey) {\n            n = directClone(n);\n          }\n\n          n.flags |= 65536\n          /* Normalized */\n          ;\n\n          if (!isPrefixedKey) {\n            if (isNull(oldKey)) {\n              n.key = newKey;\n            } else {\n              n.key = currentKey + oldKey;\n            }\n          } else if (oldKey.substring(0, currentKey.length) !== currentKey) {\n            n.key = currentKey + oldKey;\n          }\n        }\n\n        result.push(n);\n      }\n    }\n  }\n}\n\nfunction getFlagsForElementVnode(type) {\n  switch (type) {\n    case 'svg':\n      return 32\n      /* SvgElement */\n      ;\n\n    case 'input':\n      return 64\n      /* InputElement */\n      ;\n\n    case 'select':\n      return 256\n      /* SelectElement */\n      ;\n\n    case 'textarea':\n      return 128\n      /* TextareaElement */\n      ;\n\n    case Fragment:\n      return 8192\n      /* Fragment */\n      ;\n\n    default:\n      return 1\n      /* HtmlElement */\n      ;\n  }\n}\n\nfunction normalizeChildren(vNode, children) {\n  var newChildren;\n  var newChildFlags = 1\n  /* HasInvalidChildren */\n  ; // Don't change children to match strict equal (===) true in patching\n\n  if (isInvalid(children)) {\n    newChildren = children;\n  } else if (isStringOrNumber(children)) {\n    newChildFlags = 16\n    /* HasTextChildren */\n    ;\n    newChildren = children;\n  } else if (isArray(children)) {\n    var len = children.length;\n\n    for (var i = 0; i < len; ++i) {\n      var n = children[i];\n\n      if (isInvalid(n) || isArray(n)) {\n        newChildren = newChildren || children.slice(0, i);\n\n        _normalizeVNodes(children, newChildren, i, '');\n\n        break;\n      } else if (isStringOrNumber(n)) {\n        newChildren = newChildren || children.slice(0, i);\n        newChildren.push(createTextVNode(n, keyPrefix + i));\n      } else {\n        var key = n.key;\n        var needsCloning = (n.flags & 81920\n        /* InUseOrNormalized */\n        ) > 0;\n        var isNullKey = isNull(key);\n        var isPrefixed = isString(key) && key[0] === keyPrefix;\n\n        if (needsCloning || isNullKey || isPrefixed) {\n          newChildren = newChildren || children.slice(0, i);\n\n          if (needsCloning || isPrefixed) {\n            n = directClone(n);\n          }\n\n          if (isNullKey || isPrefixed) {\n            n.key = keyPrefix + i;\n          }\n\n          newChildren.push(n);\n        } else if (newChildren) {\n          newChildren.push(n);\n        }\n\n        n.flags |= 65536\n        /* Normalized */\n        ;\n      }\n    }\n\n    newChildren = newChildren || children;\n\n    if (newChildren.length === 0) {\n      newChildFlags = 1\n      /* HasInvalidChildren */\n      ;\n    } else {\n      newChildFlags = 8\n      /* HasKeyedChildren */\n      ;\n    }\n  } else {\n    newChildren = children;\n    newChildren.flags |= 65536\n    /* Normalized */\n    ;\n\n    if (children.flags & 81920\n    /* InUseOrNormalized */\n    ) {\n      newChildren = directClone(children);\n    }\n\n    newChildFlags = 2\n    /* HasVNodeChildren */\n    ;\n  }\n\n  vNode.children = newChildren;\n  vNode.childFlags = newChildFlags;\n  return vNode;\n}\n\nfunction normalizeRoot(input) {\n  if (isInvalid(input) || isStringOrNumber(input)) {\n    return createTextVNode(input, null);\n  }\n\n  if (isArray(input)) {\n    return createFragment(input, 0\n    /* UnknownChildren */\n    , null);\n  }\n\n  return input.flags & 16384\n  /* InUse */\n  ? directClone(input) : input;\n}\n\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\nvar xmlNS = 'http://www.w3.org/XML/1998/namespace';\nvar namespaces = {\n  'xlink:actuate': xlinkNS,\n  'xlink:arcrole': xlinkNS,\n  'xlink:href': xlinkNS,\n  'xlink:role': xlinkNS,\n  'xlink:show': xlinkNS,\n  'xlink:title': xlinkNS,\n  'xlink:type': xlinkNS,\n  'xml:base': xmlNS,\n  'xml:lang': xmlNS,\n  'xml:space': xmlNS\n};\n\nfunction getDelegatedEventObject(v) {\n  return {\n    onClick: v,\n    onDblClick: v,\n    onFocusIn: v,\n    onFocusOut: v,\n    onKeyDown: v,\n    onKeyPress: v,\n    onKeyUp: v,\n    onMouseDown: v,\n    onMouseMove: v,\n    onMouseUp: v,\n    onTouchEnd: v,\n    onTouchMove: v,\n    onTouchStart: v\n  };\n}\n\nvar attachedEventCounts = getDelegatedEventObject(0);\nvar attachedEvents = getDelegatedEventObject(null);\nvar syntheticEvents = getDelegatedEventObject(true);\n\nfunction updateOrAddSyntheticEvent(name, dom) {\n  var eventsObject = dom.$EV;\n\n  if (!eventsObject) {\n    eventsObject = dom.$EV = getDelegatedEventObject(null);\n  }\n\n  if (!eventsObject[name]) {\n    if (++attachedEventCounts[name] === 1) {\n      attachedEvents[name] = attachEventToDocument(name);\n    }\n  }\n\n  return eventsObject;\n}\n\nfunction unmountSyntheticEvent(name, dom) {\n  var eventsObject = dom.$EV;\n\n  if (eventsObject && eventsObject[name]) {\n    if (--attachedEventCounts[name] === 0) {\n      document.removeEventListener(normalizeEventName(name), attachedEvents[name]);\n      attachedEvents[name] = null;\n    }\n\n    eventsObject[name] = null;\n  }\n}\n\nfunction handleSyntheticEvent(name, lastEvent, nextEvent, dom) {\n  if (isFunction(nextEvent)) {\n    updateOrAddSyntheticEvent(name, dom)[name] = nextEvent;\n  } else if (isLinkEventObject(nextEvent)) {\n    if (isLastValueSameLinkEvent(lastEvent, nextEvent)) {\n      return;\n    }\n\n    updateOrAddSyntheticEvent(name, dom)[name] = nextEvent;\n  } else {\n    unmountSyntheticEvent(name, dom);\n  }\n} // When browsers fully support event.composedPath we could loop it through instead of using parentNode property\n\n\nfunction getTargetNode(event) {\n  return isFunction(event.composedPath) ? event.composedPath()[0] : event.target;\n}\n\nfunction dispatchEvents(event, isClick, name, eventData) {\n  var dom = getTargetNode(event);\n\n  do {\n    // Html Nodes can be nested fe: span inside button in that scenario browser does not handle disabled attribute on parent,\n    // because the event listener is on document.body\n    // Don't process clicks on disabled elements\n    if (isClick && dom.disabled) {\n      return;\n    }\n\n    var eventsObject = dom.$EV;\n\n    if (eventsObject) {\n      var currentEvent = eventsObject[name];\n\n      if (currentEvent) {\n        // linkEvent object\n        eventData.dom = dom;\n        currentEvent.event ? currentEvent.event(currentEvent.data, event) : currentEvent(event);\n\n        if (event.cancelBubble) {\n          return;\n        }\n      }\n    }\n\n    dom = dom.parentNode;\n  } while (!isNull(dom));\n}\n\nfunction stopPropagation() {\n  this.cancelBubble = true;\n\n  if (!this.immediatePropagationStopped) {\n    this.stopImmediatePropagation();\n  }\n}\n\nfunction isDefaultPrevented() {\n  return this.defaultPrevented;\n}\n\nfunction isPropagationStopped() {\n  return this.cancelBubble;\n}\n\nfunction extendEventProperties(event) {\n  // Event data needs to be object to save reference to currentTarget getter\n  var eventData = {\n    dom: document\n  };\n  event.isDefaultPrevented = isDefaultPrevented;\n  event.isPropagationStopped = isPropagationStopped;\n  event.stopPropagation = stopPropagation;\n  Object.defineProperty(event, 'currentTarget', {\n    configurable: true,\n    get: function get() {\n      return eventData.dom;\n    }\n  });\n  return eventData;\n}\n\nfunction rootClickEvent(name) {\n  return function (event) {\n    if (event.button !== 0) {\n      // Firefox incorrectly triggers click event for mid/right mouse buttons.\n      // This bug has been active for 17 years.\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=184051\n      event.stopPropagation();\n      return;\n    }\n\n    dispatchEvents(event, true, name, extendEventProperties(event));\n  };\n}\n\nfunction rootEvent(name) {\n  return function (event) {\n    dispatchEvents(event, false, name, extendEventProperties(event));\n  };\n}\n\nfunction attachEventToDocument(name) {\n  var attachedEvent = name === 'onClick' || name === 'onDblClick' ? rootClickEvent(name) : rootEvent(name);\n  document.addEventListener(normalizeEventName(name), attachedEvent);\n  return attachedEvent;\n}\n\nfunction isSameInnerHTML(dom, innerHTML) {\n  var tempdom = document.createElement('i');\n  tempdom.innerHTML = innerHTML;\n  return tempdom.innerHTML === dom.innerHTML;\n}\n\nfunction triggerEventListener(props, methodName, e) {\n  if (props[methodName]) {\n    var listener = props[methodName];\n\n    if (listener.event) {\n      listener.event(listener.data, e);\n    } else {\n      listener(e);\n    }\n  } else {\n    var nativeListenerName = methodName.toLowerCase();\n\n    if (props[nativeListenerName]) {\n      props[nativeListenerName](e);\n    }\n  }\n}\n\nfunction createWrappedFunction(methodName, applyValue) {\n  var fnMethod = function fnMethod(e) {\n    var vNode = this.$V; // If vNode is gone by the time event fires, no-op\n\n    if (!vNode) {\n      return;\n    }\n\n    var props = vNode.props || EMPTY_OBJ;\n    var dom = vNode.dom;\n\n    if (isString(methodName)) {\n      triggerEventListener(props, methodName, e);\n    } else {\n      for (var i = 0; i < methodName.length; ++i) {\n        triggerEventListener(props, methodName[i], e);\n      }\n    }\n\n    if (isFunction(applyValue)) {\n      var newVNode = this.$V;\n      var newProps = newVNode.props || EMPTY_OBJ;\n      applyValue(newProps, dom, false, newVNode);\n    }\n  };\n\n  Object.defineProperty(fnMethod, 'wrapped', {\n    configurable: false,\n    enumerable: false,\n    value: true,\n    writable: false\n  });\n  return fnMethod;\n}\n\nfunction attachEvent(dom, eventName, handler) {\n  var previousKey = \"$\" + eventName;\n  var previousArgs = dom[previousKey];\n\n  if (previousArgs) {\n    if (previousArgs[1].wrapped) {\n      return;\n    }\n\n    dom.removeEventListener(previousArgs[0], previousArgs[1]);\n    dom[previousKey] = null;\n  }\n\n  if (isFunction(handler)) {\n    dom.addEventListener(eventName, handler);\n    dom[previousKey] = [eventName, handler];\n  }\n}\n\nfunction isCheckedType(type) {\n  return type === 'checkbox' || type === 'radio';\n}\n\nvar onTextInputChange = createWrappedFunction('onInput', applyValueInput);\nvar wrappedOnChange = createWrappedFunction(['onClick', 'onChange'], applyValueInput);\n/* tslint:disable-next-line:no-empty */\n\nfunction emptywrapper(event) {\n  event.stopPropagation();\n}\n\nemptywrapper.wrapped = true;\n\nfunction inputEvents(dom, nextPropsOrEmpty) {\n  if (isCheckedType(nextPropsOrEmpty.type)) {\n    attachEvent(dom, 'change', wrappedOnChange);\n    attachEvent(dom, 'click', emptywrapper);\n  } else {\n    attachEvent(dom, 'input', onTextInputChange);\n  }\n}\n\nfunction applyValueInput(nextPropsOrEmpty, dom) {\n  var type = nextPropsOrEmpty.type;\n  var value = nextPropsOrEmpty.value;\n  var checked = nextPropsOrEmpty.checked;\n  var multiple = nextPropsOrEmpty.multiple;\n  var defaultValue = nextPropsOrEmpty.defaultValue;\n  var hasValue = !isNullOrUndef(value);\n\n  if (type && type !== dom.type) {\n    dom.setAttribute('type', type);\n  }\n\n  if (!isNullOrUndef(multiple) && multiple !== dom.multiple) {\n    dom.multiple = multiple;\n  }\n\n  if (!isNullOrUndef(defaultValue) && !hasValue) {\n    dom.defaultValue = defaultValue + '';\n  }\n\n  if (isCheckedType(type)) {\n    if (hasValue) {\n      dom.value = value;\n    }\n\n    if (!isNullOrUndef(checked)) {\n      dom.checked = checked;\n    }\n  } else {\n    if (hasValue && dom.value !== value) {\n      dom.defaultValue = value;\n      dom.value = value;\n    } else if (!isNullOrUndef(checked)) {\n      dom.checked = checked;\n    }\n  }\n}\n\nfunction updateChildOptions(vNode, value) {\n  if (vNode.type === 'option') {\n    updateChildOption(vNode, value);\n  } else {\n    var children = vNode.children;\n    var flags = vNode.flags;\n\n    if (flags & 4\n    /* ComponentClass */\n    ) {\n      updateChildOptions(children.$LI, value);\n    } else if (flags & 8\n    /* ComponentFunction */\n    ) {\n      updateChildOptions(children, value);\n    } else if (vNode.childFlags === 2\n    /* HasVNodeChildren */\n    ) {\n      updateChildOptions(children, value);\n    } else if (vNode.childFlags & 12\n    /* MultipleChildren */\n    ) {\n      for (var i = 0, len = children.length; i < len; ++i) {\n        updateChildOptions(children[i], value);\n      }\n    }\n  }\n}\n\nfunction updateChildOption(vNode, value) {\n  var props = vNode.props || EMPTY_OBJ;\n  var dom = vNode.dom; // we do this as multiple may have changed\n\n  dom.value = props.value;\n\n  if (props.value === value || isArray(value) && value.indexOf(props.value) !== -1) {\n    dom.selected = true;\n  } else if (!isNullOrUndef(value) || !isNullOrUndef(props.selected)) {\n    dom.selected = props.selected || false;\n  }\n}\n\nvar onSelectChange = createWrappedFunction('onChange', applyValueSelect);\n\nfunction selectEvents(dom) {\n  attachEvent(dom, 'change', onSelectChange);\n}\n\nfunction applyValueSelect(nextPropsOrEmpty, dom, mounting, vNode) {\n  var multiplePropInBoolean = Boolean(nextPropsOrEmpty.multiple);\n\n  if (!isNullOrUndef(nextPropsOrEmpty.multiple) && multiplePropInBoolean !== dom.multiple) {\n    dom.multiple = multiplePropInBoolean;\n  }\n\n  var index = nextPropsOrEmpty.selectedIndex;\n\n  if (index === -1) {\n    dom.selectedIndex = -1;\n  }\n\n  var childFlags = vNode.childFlags;\n\n  if (childFlags !== 1\n  /* HasInvalidChildren */\n  ) {\n    var value = nextPropsOrEmpty.value;\n\n    if (isNumber(index) && index > -1 && dom.options[index]) {\n      value = dom.options[index].value;\n    }\n\n    if (mounting && isNullOrUndef(value)) {\n      value = nextPropsOrEmpty.defaultValue;\n    }\n\n    updateChildOptions(vNode, value);\n  }\n}\n\nvar onTextareaInputChange = createWrappedFunction('onInput', applyValueTextArea);\nvar wrappedOnChange$1 = createWrappedFunction('onChange');\n\nfunction textAreaEvents(dom, nextPropsOrEmpty) {\n  attachEvent(dom, 'input', onTextareaInputChange);\n\n  if (nextPropsOrEmpty.onChange) {\n    attachEvent(dom, 'change', wrappedOnChange$1);\n  }\n}\n\nfunction applyValueTextArea(nextPropsOrEmpty, dom, mounting) {\n  var value = nextPropsOrEmpty.value;\n  var domValue = dom.value;\n\n  if (isNullOrUndef(value)) {\n    if (mounting) {\n      var defaultValue = nextPropsOrEmpty.defaultValue;\n\n      if (!isNullOrUndef(defaultValue) && defaultValue !== domValue) {\n        dom.defaultValue = defaultValue;\n        dom.value = defaultValue;\n      }\n    }\n  } else if (domValue !== value) {\n    /* There is value so keep it controlled */\n    dom.defaultValue = value;\n    dom.value = value;\n  }\n}\n\nfunction processElement(flags, vNode, dom, nextPropsOrEmpty, mounting, isControlled) {\n  if (flags & 64\n  /* InputElement */\n  ) {\n    applyValueInput(nextPropsOrEmpty, dom);\n  } else if (flags & 256\n  /* SelectElement */\n  ) {\n    applyValueSelect(nextPropsOrEmpty, dom, mounting, vNode);\n  } else if (flags & 128\n  /* TextareaElement */\n  ) {\n    applyValueTextArea(nextPropsOrEmpty, dom, mounting);\n  }\n\n  if (isControlled) {\n    dom.$V = vNode;\n  }\n}\n\nfunction addFormElementEventHandlers(flags, dom, nextPropsOrEmpty) {\n  if (flags & 64\n  /* InputElement */\n  ) {\n    inputEvents(dom, nextPropsOrEmpty);\n  } else if (flags & 256\n  /* SelectElement */\n  ) {\n    selectEvents(dom);\n  } else if (flags & 128\n  /* TextareaElement */\n  ) {\n    textAreaEvents(dom, nextPropsOrEmpty);\n  }\n}\n\nfunction isControlledFormElement(nextPropsOrEmpty) {\n  return nextPropsOrEmpty.type && isCheckedType(nextPropsOrEmpty.type) ? !isNullOrUndef(nextPropsOrEmpty.checked) : !isNullOrUndef(nextPropsOrEmpty.value);\n}\n\nfunction createRef() {\n  return {\n    current: null\n  };\n}\n\nfunction forwardRef(render) {\n  // @ts-ignore\n  return {\n    render: render\n  };\n}\n\nfunction unmountRef(ref) {\n  if (ref) {\n    if (!safeCall1(ref, null) && ref.current) {\n      ref.current = null;\n    }\n  }\n}\n\nfunction mountRef(ref, value, lifecycle) {\n  if (ref && (isFunction(ref) || ref.current !== void 0)) {\n    lifecycle.push(function () {\n      if (!safeCall1(ref, value) && ref.current !== void 0) {\n        ref.current = value;\n      }\n    });\n  }\n}\n\nfunction remove(vNode, parentDOM) {\n  unmount(vNode);\n  removeVNodeDOM(vNode, parentDOM);\n}\n\nfunction unmount(vNode) {\n  var flags = vNode.flags;\n  var children = vNode.children;\n  var ref;\n\n  if (flags & 481\n  /* Element */\n  ) {\n    ref = vNode.ref;\n    var props = vNode.props;\n    unmountRef(ref);\n    var childFlags = vNode.childFlags;\n\n    if (!isNull(props)) {\n      var keys = Object.keys(props);\n\n      for (var i = 0, len = keys.length; i < len; i++) {\n        var key = keys[i];\n\n        if (syntheticEvents[key]) {\n          unmountSyntheticEvent(key, vNode.dom);\n        }\n      }\n    }\n\n    if (childFlags & 12\n    /* MultipleChildren */\n    ) {\n      unmountAllChildren(children);\n    } else if (childFlags === 2\n    /* HasVNodeChildren */\n    ) {\n      unmount(children);\n    }\n  } else if (children) {\n    if (flags & 4\n    /* ComponentClass */\n    ) {\n      if (isFunction(children.componentWillUnmount)) {\n        children.componentWillUnmount();\n      }\n\n      unmountRef(vNode.ref);\n      children.$UN = true;\n      unmount(children.$LI);\n    } else if (flags & 8\n    /* ComponentFunction */\n    ) {\n      ref = vNode.ref;\n\n      if (!isNullOrUndef(ref) && isFunction(ref.onComponentWillUnmount)) {\n        ref.onComponentWillUnmount(findDOMfromVNode(vNode, true), vNode.props || EMPTY_OBJ);\n      }\n\n      unmount(children);\n    } else if (flags & 1024\n    /* Portal */\n    ) {\n      remove(children, vNode.ref);\n    } else if (flags & 8192\n    /* Fragment */\n    ) {\n      if (vNode.childFlags & 12\n      /* MultipleChildren */\n      ) {\n        unmountAllChildren(children);\n      }\n    }\n  }\n}\n\nfunction unmountAllChildren(children) {\n  for (var i = 0, len = children.length; i < len; ++i) {\n    unmount(children[i]);\n  }\n}\n\nfunction clearDOM(dom) {\n  // Optimization for clearing dom\n  dom.textContent = '';\n}\n\nfunction removeAllChildren(dom, vNode, children) {\n  unmountAllChildren(children);\n\n  if (vNode.flags & 8192\n  /* Fragment */\n  ) {\n    removeVNodeDOM(vNode, dom);\n  } else {\n    clearDOM(dom);\n  }\n}\n\nfunction wrapLinkEvent(nextValue) {\n  // This variable makes sure there is no \"this\" context in callback\n  var ev = nextValue.event;\n  return function (e) {\n    ev(nextValue.data, e);\n  };\n}\n\nfunction patchEvent(name, lastValue, nextValue, dom) {\n  if (isLinkEventObject(nextValue)) {\n    if (isLastValueSameLinkEvent(lastValue, nextValue)) {\n      return;\n    }\n\n    nextValue = wrapLinkEvent(nextValue);\n  }\n\n  attachEvent(dom, normalizeEventName(name), nextValue);\n} // We are assuming here that we come from patchProp routine\n// -nextAttrValue cannot be null or undefined\n\n\nfunction patchStyle(lastAttrValue, nextAttrValue, dom) {\n  if (isNullOrUndef(nextAttrValue)) {\n    dom.removeAttribute('style');\n    return;\n  }\n\n  var domStyle = dom.style;\n  var style;\n  var value;\n\n  if (isString(nextAttrValue)) {\n    domStyle.cssText = nextAttrValue;\n    return;\n  }\n\n  if (!isNullOrUndef(lastAttrValue) && !isString(lastAttrValue)) {\n    for (style in nextAttrValue) {\n      // do not add a hasOwnProperty check here, it affects performance\n      value = nextAttrValue[style];\n\n      if (value !== lastAttrValue[style]) {\n        domStyle.setProperty(style, value);\n      }\n    }\n\n    for (style in lastAttrValue) {\n      if (isNullOrUndef(nextAttrValue[style])) {\n        domStyle.removeProperty(style);\n      }\n    }\n  } else {\n    for (style in nextAttrValue) {\n      value = nextAttrValue[style];\n      domStyle.setProperty(style, value);\n    }\n  }\n}\n\nfunction patchDangerInnerHTML(lastValue, nextValue, lastVNode, dom) {\n  var lastHtml = lastValue && lastValue.__html || '';\n  var nextHtml = nextValue && nextValue.__html || '';\n\n  if (lastHtml !== nextHtml) {\n    if (!isNullOrUndef(nextHtml) && !isSameInnerHTML(dom, nextHtml)) {\n      if (!isNull(lastVNode)) {\n        if (lastVNode.childFlags & 12\n        /* MultipleChildren */\n        ) {\n          unmountAllChildren(lastVNode.children);\n        } else if (lastVNode.childFlags === 2\n        /* HasVNodeChildren */\n        ) {\n          unmount(lastVNode.children);\n        }\n\n        lastVNode.children = null;\n        lastVNode.childFlags = 1\n        /* HasInvalidChildren */\n        ;\n      }\n\n      dom.innerHTML = nextHtml;\n    }\n  }\n}\n\nfunction patchProp(prop, lastValue, nextValue, dom, isSVG, hasControlledValue, lastVNode) {\n  switch (prop) {\n    case 'children':\n    case 'childrenType':\n    case 'className':\n    case 'defaultValue':\n    case 'key':\n    case 'multiple':\n    case 'ref':\n    case 'selectedIndex':\n      break;\n\n    case 'autoFocus':\n      dom.autofocus = !!nextValue;\n      break;\n\n    case 'allowfullscreen':\n    case 'autoplay':\n    case 'capture':\n    case 'checked':\n    case 'controls':\n    case 'default':\n    case 'disabled':\n    case 'hidden':\n    case 'indeterminate':\n    case 'loop':\n    case 'muted':\n    case 'novalidate':\n    case 'open':\n    case 'readOnly':\n    case 'required':\n    case 'reversed':\n    case 'scoped':\n    case 'seamless':\n    case 'selected':\n      dom[prop] = !!nextValue;\n      break;\n\n    case 'defaultChecked':\n    case 'value':\n    case 'volume':\n      if (hasControlledValue && prop === 'value') {\n        break;\n      }\n\n      var value = isNullOrUndef(nextValue) ? '' : nextValue;\n\n      if (dom[prop] !== value) {\n        dom[prop] = value;\n      }\n\n      break;\n\n    case 'style':\n      patchStyle(lastValue, nextValue, dom);\n      break;\n\n    case 'dangerouslySetInnerHTML':\n      patchDangerInnerHTML(lastValue, nextValue, lastVNode, dom);\n      break;\n\n    default:\n      if (syntheticEvents[prop]) {\n        handleSyntheticEvent(prop, lastValue, nextValue, dom);\n      } else if (prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110) {\n        patchEvent(prop, lastValue, nextValue, dom);\n      } else if (isNullOrUndef(nextValue)) {\n        dom.removeAttribute(prop);\n      } else if (isSVG && namespaces[prop]) {\n        // We optimize for isSVG being false\n        // If we end up in this path we can read property again\n        dom.setAttributeNS(namespaces[prop], prop, nextValue);\n      } else {\n        dom.setAttribute(prop, nextValue);\n      }\n\n      break;\n  }\n}\n\nfunction mountProps(vNode, flags, props, dom, isSVG) {\n  var hasControlledValue = false;\n  var isFormElement = (flags & 448\n  /* FormElement */\n  ) > 0;\n\n  if (isFormElement) {\n    hasControlledValue = isControlledFormElement(props);\n\n    if (hasControlledValue) {\n      addFormElementEventHandlers(flags, dom, props);\n    }\n  }\n\n  for (var prop in props) {\n    // do not add a hasOwnProperty check here, it affects performance\n    patchProp(prop, null, props[prop], dom, isSVG, hasControlledValue, null);\n  }\n\n  if (isFormElement) {\n    processElement(flags, vNode, dom, props, true, hasControlledValue);\n  }\n}\n\nfunction renderNewInput(instance, props, context) {\n  var nextInput = normalizeRoot(instance.render(props, instance.state, context));\n  var childContext = context;\n\n  if (isFunction(instance.getChildContext)) {\n    childContext = combineFrom(context, instance.getChildContext());\n  }\n\n  instance.$CX = childContext;\n  return nextInput;\n}\n\nfunction createClassComponentInstance(vNode, Component, props, context, isSVG, lifecycle) {\n  var instance = new Component(props, context);\n  var usesNewAPI = instance.$N = Boolean(Component.getDerivedStateFromProps || instance.getSnapshotBeforeUpdate);\n  instance.$SVG = isSVG;\n  instance.$L = lifecycle;\n  vNode.children = instance;\n  instance.$BS = false;\n  instance.context = context;\n\n  if (instance.props === EMPTY_OBJ) {\n    instance.props = props;\n  }\n\n  if (!usesNewAPI) {\n    if (isFunction(instance.componentWillMount)) {\n      instance.$BR = true;\n      instance.componentWillMount();\n      var pending = instance.$PS;\n\n      if (!isNull(pending)) {\n        var state = instance.state;\n\n        if (isNull(state)) {\n          instance.state = pending;\n        } else {\n          for (var key in pending) {\n            state[key] = pending[key];\n          }\n        }\n\n        instance.$PS = null;\n      }\n\n      instance.$BR = false;\n    }\n  } else {\n    instance.state = createDerivedState(instance, props, instance.state);\n  }\n\n  instance.$LI = renderNewInput(instance, props, context);\n  return instance;\n}\n\nfunction renderFunctionalComponent(vNode, context) {\n  var props = vNode.props || EMPTY_OBJ;\n  return vNode.flags & 32768\n  /* ForwardRef */\n  ? vNode.type.render(props, vNode.ref, context) : vNode.type(props, context);\n}\n\nfunction mount(vNode, parentDOM, context, isSVG, nextNode, lifecycle) {\n  var flags = vNode.flags |= 16384\n  /* InUse */\n  ;\n\n  if (flags & 481\n  /* Element */\n  ) {\n    mountElement(vNode, parentDOM, context, isSVG, nextNode, lifecycle);\n  } else if (flags & 4\n  /* ComponentClass */\n  ) {\n    mountClassComponent(vNode, parentDOM, context, isSVG, nextNode, lifecycle);\n  } else if (flags & 8\n  /* ComponentFunction */\n  ) {\n    mountFunctionalComponent(vNode, parentDOM, context, isSVG, nextNode, lifecycle);\n    mountFunctionalComponentCallbacks(vNode, lifecycle);\n  } else if (flags & 512\n  /* Void */\n  || flags & 16\n  /* Text */\n  ) {\n    mountText(vNode, parentDOM, nextNode);\n  } else if (flags & 8192\n  /* Fragment */\n  ) {\n    mountFragment(vNode, context, parentDOM, isSVG, nextNode, lifecycle);\n  } else if (flags & 1024\n  /* Portal */\n  ) {\n    mountPortal(vNode, context, parentDOM, nextNode, lifecycle);\n  } else ;\n}\n\nfunction mountPortal(vNode, context, parentDOM, nextNode, lifecycle) {\n  mount(vNode.children, vNode.ref, context, false, null, lifecycle);\n  var placeHolderVNode = createVoidVNode();\n  mountText(placeHolderVNode, parentDOM, nextNode);\n  vNode.dom = placeHolderVNode.dom;\n}\n\nfunction mountFragment(vNode, context, parentDOM, isSVG, nextNode, lifecycle) {\n  var children = vNode.children;\n  var childFlags = vNode.childFlags; // When fragment is optimized for multiple children, check if there is no children and change flag to invalid\n  // This is the only normalization always done, to keep optimization flags API same for fragments and regular elements\n\n  if (childFlags & 12\n  /* MultipleChildren */\n  && children.length === 0) {\n    childFlags = vNode.childFlags = 2\n    /* HasVNodeChildren */\n    ;\n    children = vNode.children = createVoidVNode();\n  }\n\n  if (childFlags === 2\n  /* HasVNodeChildren */\n  ) {\n    mount(children, parentDOM, context, isSVG, nextNode, lifecycle);\n  } else {\n    mountArrayChildren(children, parentDOM, context, isSVG, nextNode, lifecycle);\n  }\n}\n\nfunction mountText(vNode, parentDOM, nextNode) {\n  var dom = vNode.dom = document.createTextNode(vNode.children);\n\n  if (!isNull(parentDOM)) {\n    insertOrAppend(parentDOM, dom, nextNode);\n  }\n}\n\nfunction mountElement(vNode, parentDOM, context, isSVG, nextNode, lifecycle) {\n  var flags = vNode.flags;\n  var props = vNode.props;\n  var className = vNode.className;\n  var childFlags = vNode.childFlags;\n  var dom = vNode.dom = documentCreateElement(vNode.type, isSVG = isSVG || (flags & 32\n  /* SvgElement */\n  ) > 0);\n  var children = vNode.children;\n\n  if (!isNullOrUndef(className) && className !== '') {\n    if (isSVG) {\n      dom.setAttribute('class', className);\n    } else {\n      dom.className = className;\n    }\n  }\n\n  if (childFlags === 16\n  /* HasTextChildren */\n  ) {\n    setTextContent(dom, children);\n  } else if (childFlags !== 1\n  /* HasInvalidChildren */\n  ) {\n    var childrenIsSVG = isSVG && vNode.type !== 'foreignObject';\n\n    if (childFlags === 2\n    /* HasVNodeChildren */\n    ) {\n      if (children.flags & 16384\n      /* InUse */\n      ) {\n        vNode.children = children = directClone(children);\n      }\n\n      mount(children, dom, context, childrenIsSVG, null, lifecycle);\n    } else if (childFlags === 8\n    /* HasKeyedChildren */\n    || childFlags === 4\n    /* HasNonKeyedChildren */\n    ) {\n      mountArrayChildren(children, dom, context, childrenIsSVG, null, lifecycle);\n    }\n  }\n\n  if (!isNull(parentDOM)) {\n    insertOrAppend(parentDOM, dom, nextNode);\n  }\n\n  if (!isNull(props)) {\n    mountProps(vNode, flags, props, dom, isSVG);\n  }\n\n  mountRef(vNode.ref, dom, lifecycle);\n}\n\nfunction mountArrayChildren(children, dom, context, isSVG, nextNode, lifecycle) {\n  for (var i = 0; i < children.length; ++i) {\n    var child = children[i];\n\n    if (child.flags & 16384\n    /* InUse */\n    ) {\n      children[i] = child = directClone(child);\n    }\n\n    mount(child, dom, context, isSVG, nextNode, lifecycle);\n  }\n}\n\nfunction mountClassComponent(vNode, parentDOM, context, isSVG, nextNode, lifecycle) {\n  var instance = createClassComponentInstance(vNode, vNode.type, vNode.props || EMPTY_OBJ, context, isSVG, lifecycle);\n  mount(instance.$LI, parentDOM, instance.$CX, isSVG, nextNode, lifecycle);\n  mountClassComponentCallbacks(vNode.ref, instance, lifecycle);\n}\n\nfunction mountFunctionalComponent(vNode, parentDOM, context, isSVG, nextNode, lifecycle) {\n  mount(vNode.children = normalizeRoot(renderFunctionalComponent(vNode, context)), parentDOM, context, isSVG, nextNode, lifecycle);\n}\n\nfunction createClassMountCallback(instance) {\n  return function () {\n    instance.componentDidMount();\n  };\n}\n\nfunction mountClassComponentCallbacks(ref, instance, lifecycle) {\n  mountRef(ref, instance, lifecycle);\n\n  if (isFunction(instance.componentDidMount)) {\n    lifecycle.push(createClassMountCallback(instance));\n  }\n}\n\nfunction createOnMountCallback(ref, vNode) {\n  return function () {\n    ref.onComponentDidMount(findDOMfromVNode(vNode, true), vNode.props || EMPTY_OBJ);\n  };\n}\n\nfunction mountFunctionalComponentCallbacks(vNode, lifecycle) {\n  var ref = vNode.ref;\n\n  if (!isNullOrUndef(ref)) {\n    safeCall1(ref.onComponentWillMount, vNode.props || EMPTY_OBJ);\n\n    if (isFunction(ref.onComponentDidMount)) {\n      lifecycle.push(createOnMountCallback(ref, vNode));\n    }\n  }\n}\n\nfunction replaceWithNewNode(lastVNode, nextVNode, parentDOM, context, isSVG, lifecycle) {\n  unmount(lastVNode);\n\n  if ((nextVNode.flags & lastVNode.flags & 2033\n  /* DOMRef */\n  ) !== 0) {\n    mount(nextVNode, null, context, isSVG, null, lifecycle); // Single DOM operation, when we have dom references available\n\n    replaceChild(parentDOM, nextVNode.dom, lastVNode.dom);\n  } else {\n    mount(nextVNode, parentDOM, context, isSVG, findDOMfromVNode(lastVNode, true), lifecycle);\n    removeVNodeDOM(lastVNode, parentDOM);\n  }\n}\n\nfunction patch(lastVNode, nextVNode, parentDOM, context, isSVG, nextNode, lifecycle) {\n  var nextFlags = nextVNode.flags |= 16384\n  /* InUse */\n  ;\n\n  if (lastVNode.flags !== nextFlags || lastVNode.type !== nextVNode.type || lastVNode.key !== nextVNode.key || nextFlags & 2048\n  /* ReCreate */\n  ) {\n    if (lastVNode.flags & 16384\n    /* InUse */\n    ) {\n      replaceWithNewNode(lastVNode, nextVNode, parentDOM, context, isSVG, lifecycle);\n    } else {\n      // Last vNode is not in use, it has crashed at application level. Just mount nextVNode and ignore last one\n      mount(nextVNode, parentDOM, context, isSVG, nextNode, lifecycle);\n    }\n  } else if (nextFlags & 481\n  /* Element */\n  ) {\n    patchElement(lastVNode, nextVNode, context, isSVG, nextFlags, lifecycle);\n  } else if (nextFlags & 4\n  /* ComponentClass */\n  ) {\n    patchClassComponent(lastVNode, nextVNode, parentDOM, context, isSVG, nextNode, lifecycle);\n  } else if (nextFlags & 8\n  /* ComponentFunction */\n  ) {\n    patchFunctionalComponent(lastVNode, nextVNode, parentDOM, context, isSVG, nextNode, lifecycle);\n  } else if (nextFlags & 16\n  /* Text */\n  ) {\n    patchText(lastVNode, nextVNode);\n  } else if (nextFlags & 512\n  /* Void */\n  ) {\n    nextVNode.dom = lastVNode.dom;\n  } else if (nextFlags & 8192\n  /* Fragment */\n  ) {\n    patchFragment(lastVNode, nextVNode, parentDOM, context, isSVG, lifecycle);\n  } else {\n    patchPortal(lastVNode, nextVNode, context, lifecycle);\n  }\n}\n\nfunction patchSingleTextChild(lastChildren, nextChildren, parentDOM) {\n  if (lastChildren !== nextChildren) {\n    if (lastChildren !== '') {\n      parentDOM.firstChild.nodeValue = nextChildren;\n    } else {\n      setTextContent(parentDOM, nextChildren);\n    }\n  }\n}\n\nfunction patchContentEditableChildren(dom, nextChildren) {\n  if (dom.textContent !== nextChildren) {\n    dom.textContent = nextChildren;\n  }\n}\n\nfunction patchFragment(lastVNode, nextVNode, parentDOM, context, isSVG, lifecycle) {\n  var lastChildren = lastVNode.children;\n  var nextChildren = nextVNode.children;\n  var lastChildFlags = lastVNode.childFlags;\n  var nextChildFlags = nextVNode.childFlags;\n  var nextNode = null; // When fragment is optimized for multiple children, check if there is no children and change flag to invalid\n  // This is the only normalization always done, to keep optimization flags API same for fragments and regular elements\n\n  if (nextChildFlags & 12\n  /* MultipleChildren */\n  && nextChildren.length === 0) {\n    nextChildFlags = nextVNode.childFlags = 2\n    /* HasVNodeChildren */\n    ;\n    nextChildren = nextVNode.children = createVoidVNode();\n  }\n\n  var nextIsSingle = (nextChildFlags & 2\n  /* HasVNodeChildren */\n  ) !== 0;\n\n  if (lastChildFlags & 12\n  /* MultipleChildren */\n  ) {\n    var lastLen = lastChildren.length; // We need to know Fragment's edge node when\n\n    if ( // It uses keyed algorithm\n    lastChildFlags & 8\n    /* HasKeyedChildren */\n    && nextChildFlags & 8\n    /* HasKeyedChildren */\n    || // It transforms from many to single\n    nextIsSingle || // It will append more nodes\n    !nextIsSingle && nextChildren.length > lastLen) {\n      // When fragment has multiple children there is always at least one vNode\n      nextNode = findDOMfromVNode(lastChildren[lastLen - 1], false).nextSibling;\n    }\n  }\n\n  patchChildren(lastChildFlags, nextChildFlags, lastChildren, nextChildren, parentDOM, context, isSVG, nextNode, lastVNode, lifecycle);\n}\n\nfunction patchPortal(lastVNode, nextVNode, context, lifecycle) {\n  var lastContainer = lastVNode.ref;\n  var nextContainer = nextVNode.ref;\n  var nextChildren = nextVNode.children;\n  patchChildren(lastVNode.childFlags, nextVNode.childFlags, lastVNode.children, nextChildren, lastContainer, context, false, null, lastVNode, lifecycle);\n  nextVNode.dom = lastVNode.dom;\n\n  if (lastContainer !== nextContainer && !isInvalid(nextChildren)) {\n    var node = nextChildren.dom;\n    removeChild(lastContainer, node);\n    appendChild(nextContainer, node);\n  }\n}\n\nfunction patchElement(lastVNode, nextVNode, context, isSVG, nextFlags, lifecycle) {\n  var dom = nextVNode.dom = lastVNode.dom;\n  var lastProps = lastVNode.props;\n  var nextProps = nextVNode.props;\n  var isFormElement = false;\n  var hasControlledValue = false;\n  var nextPropsOrEmpty;\n  isSVG = isSVG || (nextFlags & 32\n  /* SvgElement */\n  ) > 0; // inlined patchProps  -- starts --\n\n  if (lastProps !== nextProps) {\n    var lastPropsOrEmpty = lastProps || EMPTY_OBJ;\n    nextPropsOrEmpty = nextProps || EMPTY_OBJ;\n\n    if (nextPropsOrEmpty !== EMPTY_OBJ) {\n      isFormElement = (nextFlags & 448\n      /* FormElement */\n      ) > 0;\n\n      if (isFormElement) {\n        hasControlledValue = isControlledFormElement(nextPropsOrEmpty);\n      }\n\n      for (var prop in nextPropsOrEmpty) {\n        var lastValue = lastPropsOrEmpty[prop];\n        var nextValue = nextPropsOrEmpty[prop];\n\n        if (lastValue !== nextValue) {\n          patchProp(prop, lastValue, nextValue, dom, isSVG, hasControlledValue, lastVNode);\n        }\n      }\n    }\n\n    if (lastPropsOrEmpty !== EMPTY_OBJ) {\n      for (var prop$1 in lastPropsOrEmpty) {\n        if (isNullOrUndef(nextPropsOrEmpty[prop$1]) && !isNullOrUndef(lastPropsOrEmpty[prop$1])) {\n          patchProp(prop$1, lastPropsOrEmpty[prop$1], null, dom, isSVG, hasControlledValue, lastVNode);\n        }\n      }\n    }\n  }\n\n  var nextChildren = nextVNode.children;\n  var nextClassName = nextVNode.className; // inlined patchProps  -- ends --\n\n  if (lastVNode.className !== nextClassName) {\n    if (isNullOrUndef(nextClassName)) {\n      dom.removeAttribute('class');\n    } else if (isSVG) {\n      dom.setAttribute('class', nextClassName);\n    } else {\n      dom.className = nextClassName;\n    }\n  }\n\n  if (nextFlags & 4096\n  /* ContentEditable */\n  ) {\n    patchContentEditableChildren(dom, nextChildren);\n  } else {\n    patchChildren(lastVNode.childFlags, nextVNode.childFlags, lastVNode.children, nextChildren, dom, context, isSVG && nextVNode.type !== 'foreignObject', null, lastVNode, lifecycle);\n  }\n\n  if (isFormElement) {\n    processElement(nextFlags, nextVNode, dom, nextPropsOrEmpty, false, hasControlledValue);\n  }\n\n  var nextRef = nextVNode.ref;\n  var lastRef = lastVNode.ref;\n\n  if (lastRef !== nextRef) {\n    unmountRef(lastRef);\n    mountRef(nextRef, dom, lifecycle);\n  }\n}\n\nfunction replaceOneVNodeWithMultipleVNodes(lastChildren, nextChildren, parentDOM, context, isSVG, lifecycle) {\n  unmount(lastChildren);\n  mountArrayChildren(nextChildren, parentDOM, context, isSVG, findDOMfromVNode(lastChildren, true), lifecycle);\n  removeVNodeDOM(lastChildren, parentDOM);\n}\n\nfunction patchChildren(lastChildFlags, nextChildFlags, lastChildren, nextChildren, parentDOM, context, isSVG, nextNode, parentVNode, lifecycle) {\n  switch (lastChildFlags) {\n    case 2\n    /* HasVNodeChildren */\n    :\n      switch (nextChildFlags) {\n        case 2\n        /* HasVNodeChildren */\n        :\n          patch(lastChildren, nextChildren, parentDOM, context, isSVG, nextNode, lifecycle);\n          break;\n\n        case 1\n        /* HasInvalidChildren */\n        :\n          remove(lastChildren, parentDOM);\n          break;\n\n        case 16\n        /* HasTextChildren */\n        :\n          unmount(lastChildren);\n          setTextContent(parentDOM, nextChildren);\n          break;\n\n        default:\n          replaceOneVNodeWithMultipleVNodes(lastChildren, nextChildren, parentDOM, context, isSVG, lifecycle);\n          break;\n      }\n\n      break;\n\n    case 1\n    /* HasInvalidChildren */\n    :\n      switch (nextChildFlags) {\n        case 2\n        /* HasVNodeChildren */\n        :\n          mount(nextChildren, parentDOM, context, isSVG, nextNode, lifecycle);\n          break;\n\n        case 1\n        /* HasInvalidChildren */\n        :\n          break;\n\n        case 16\n        /* HasTextChildren */\n        :\n          setTextContent(parentDOM, nextChildren);\n          break;\n\n        default:\n          mountArrayChildren(nextChildren, parentDOM, context, isSVG, nextNode, lifecycle);\n          break;\n      }\n\n      break;\n\n    case 16\n    /* HasTextChildren */\n    :\n      switch (nextChildFlags) {\n        case 16\n        /* HasTextChildren */\n        :\n          patchSingleTextChild(lastChildren, nextChildren, parentDOM);\n          break;\n\n        case 2\n        /* HasVNodeChildren */\n        :\n          clearDOM(parentDOM);\n          mount(nextChildren, parentDOM, context, isSVG, nextNode, lifecycle);\n          break;\n\n        case 1\n        /* HasInvalidChildren */\n        :\n          clearDOM(parentDOM);\n          break;\n\n        default:\n          clearDOM(parentDOM);\n          mountArrayChildren(nextChildren, parentDOM, context, isSVG, nextNode, lifecycle);\n          break;\n      }\n\n      break;\n\n    default:\n      switch (nextChildFlags) {\n        case 16\n        /* HasTextChildren */\n        :\n          unmountAllChildren(lastChildren);\n          setTextContent(parentDOM, nextChildren);\n          break;\n\n        case 2\n        /* HasVNodeChildren */\n        :\n          removeAllChildren(parentDOM, parentVNode, lastChildren);\n          mount(nextChildren, parentDOM, context, isSVG, nextNode, lifecycle);\n          break;\n\n        case 1\n        /* HasInvalidChildren */\n        :\n          removeAllChildren(parentDOM, parentVNode, lastChildren);\n          break;\n\n        default:\n          var lastLength = lastChildren.length | 0;\n          var nextLength = nextChildren.length | 0; // Fast path's for both algorithms\n\n          if (lastLength === 0) {\n            if (nextLength > 0) {\n              mountArrayChildren(nextChildren, parentDOM, context, isSVG, nextNode, lifecycle);\n            }\n          } else if (nextLength === 0) {\n            removeAllChildren(parentDOM, parentVNode, lastChildren);\n          } else if (nextChildFlags === 8\n          /* HasKeyedChildren */\n          && lastChildFlags === 8\n          /* HasKeyedChildren */\n          ) {\n            patchKeyedChildren(lastChildren, nextChildren, parentDOM, context, isSVG, lastLength, nextLength, nextNode, parentVNode, lifecycle);\n          } else {\n            patchNonKeyedChildren(lastChildren, nextChildren, parentDOM, context, isSVG, lastLength, nextLength, nextNode, lifecycle);\n          }\n\n          break;\n      }\n\n      break;\n  }\n}\n\nfunction createDidUpdate(instance, lastProps, lastState, snapshot, lifecycle) {\n  lifecycle.push(function () {\n    instance.componentDidUpdate(lastProps, lastState, snapshot);\n  });\n}\n\nfunction updateClassComponent(instance, nextState, nextProps, parentDOM, context, isSVG, force, nextNode, lifecycle) {\n  var lastState = instance.state;\n  var lastProps = instance.props;\n  var usesNewAPI = Boolean(instance.$N);\n  var hasSCU = isFunction(instance.shouldComponentUpdate);\n\n  if (usesNewAPI) {\n    nextState = createDerivedState(instance, nextProps, nextState !== lastState ? combineFrom(lastState, nextState) : nextState);\n  }\n\n  if (force || !hasSCU || hasSCU && instance.shouldComponentUpdate(nextProps, nextState, context)) {\n    if (!usesNewAPI && isFunction(instance.componentWillUpdate)) {\n      instance.componentWillUpdate(nextProps, nextState, context);\n    }\n\n    instance.props = nextProps;\n    instance.state = nextState;\n    instance.context = context;\n    var snapshot = null;\n    var nextInput = renderNewInput(instance, nextProps, context);\n\n    if (usesNewAPI && isFunction(instance.getSnapshotBeforeUpdate)) {\n      snapshot = instance.getSnapshotBeforeUpdate(lastProps, lastState);\n    }\n\n    patch(instance.$LI, nextInput, parentDOM, instance.$CX, isSVG, nextNode, lifecycle); // Dont update Last input, until patch has been succesfully executed\n\n    instance.$LI = nextInput;\n\n    if (isFunction(instance.componentDidUpdate)) {\n      createDidUpdate(instance, lastProps, lastState, snapshot, lifecycle);\n    }\n  } else {\n    instance.props = nextProps;\n    instance.state = nextState;\n    instance.context = context;\n  }\n}\n\nfunction patchClassComponent(lastVNode, nextVNode, parentDOM, context, isSVG, nextNode, lifecycle) {\n  var instance = nextVNode.children = lastVNode.children; // If Component has crashed, ignore it to stay functional\n\n  if (isNull(instance)) {\n    return;\n  }\n\n  instance.$L = lifecycle;\n  var nextProps = nextVNode.props || EMPTY_OBJ;\n  var nextRef = nextVNode.ref;\n  var lastRef = lastVNode.ref;\n  var nextState = instance.state;\n\n  if (!instance.$N) {\n    if (isFunction(instance.componentWillReceiveProps)) {\n      instance.$BR = true;\n      instance.componentWillReceiveProps(nextProps, context); // If instance component was removed during its own update do nothing.\n\n      if (instance.$UN) {\n        return;\n      }\n\n      instance.$BR = false;\n    }\n\n    if (!isNull(instance.$PS)) {\n      nextState = combineFrom(nextState, instance.$PS);\n      instance.$PS = null;\n    }\n  }\n\n  updateClassComponent(instance, nextState, nextProps, parentDOM, context, isSVG, false, nextNode, lifecycle);\n\n  if (lastRef !== nextRef) {\n    unmountRef(lastRef);\n    mountRef(nextRef, instance, lifecycle);\n  }\n}\n\nfunction patchFunctionalComponent(lastVNode, nextVNode, parentDOM, context, isSVG, nextNode, lifecycle) {\n  var shouldUpdate = true;\n  var nextProps = nextVNode.props || EMPTY_OBJ;\n  var nextRef = nextVNode.ref;\n  var lastProps = lastVNode.props;\n  var nextHooksDefined = !isNullOrUndef(nextRef);\n  var lastInput = lastVNode.children;\n\n  if (nextHooksDefined && isFunction(nextRef.onComponentShouldUpdate)) {\n    shouldUpdate = nextRef.onComponentShouldUpdate(lastProps, nextProps);\n  }\n\n  if (shouldUpdate !== false) {\n    if (nextHooksDefined && isFunction(nextRef.onComponentWillUpdate)) {\n      nextRef.onComponentWillUpdate(lastProps, nextProps);\n    }\n\n    var nextInput = normalizeRoot(renderFunctionalComponent(nextVNode, context));\n    patch(lastInput, nextInput, parentDOM, context, isSVG, nextNode, lifecycle);\n    nextVNode.children = nextInput;\n\n    if (nextHooksDefined && isFunction(nextRef.onComponentDidUpdate)) {\n      nextRef.onComponentDidUpdate(lastProps, nextProps);\n    }\n  } else {\n    nextVNode.children = lastInput;\n  }\n}\n\nfunction patchText(lastVNode, nextVNode) {\n  var nextText = nextVNode.children;\n  var dom = nextVNode.dom = lastVNode.dom;\n\n  if (nextText !== lastVNode.children) {\n    dom.nodeValue = nextText;\n  }\n}\n\nfunction patchNonKeyedChildren(lastChildren, nextChildren, dom, context, isSVG, lastChildrenLength, nextChildrenLength, nextNode, lifecycle) {\n  var commonLength = lastChildrenLength > nextChildrenLength ? nextChildrenLength : lastChildrenLength;\n  var i = 0;\n  var nextChild;\n  var lastChild;\n\n  for (; i < commonLength; ++i) {\n    nextChild = nextChildren[i];\n    lastChild = lastChildren[i];\n\n    if (nextChild.flags & 16384\n    /* InUse */\n    ) {\n      nextChild = nextChildren[i] = directClone(nextChild);\n    }\n\n    patch(lastChild, nextChild, dom, context, isSVG, nextNode, lifecycle);\n    lastChildren[i] = nextChild;\n  }\n\n  if (lastChildrenLength < nextChildrenLength) {\n    for (i = commonLength; i < nextChildrenLength; ++i) {\n      nextChild = nextChildren[i];\n\n      if (nextChild.flags & 16384\n      /* InUse */\n      ) {\n        nextChild = nextChildren[i] = directClone(nextChild);\n      }\n\n      mount(nextChild, dom, context, isSVG, nextNode, lifecycle);\n    }\n  } else if (lastChildrenLength > nextChildrenLength) {\n    for (i = commonLength; i < lastChildrenLength; ++i) {\n      remove(lastChildren[i], dom);\n    }\n  }\n}\n\nfunction patchKeyedChildren(a, b, dom, context, isSVG, aLength, bLength, outerEdge, parentVNode, lifecycle) {\n  var aEnd = aLength - 1;\n  var bEnd = bLength - 1;\n  var j = 0;\n  var aNode = a[j];\n  var bNode = b[j];\n  var nextPos;\n  var nextNode; // Step 1\n  // tslint:disable-next-line\n\n  outer: {\n    // Sync nodes with the same key at the beginning.\n    while (aNode.key === bNode.key) {\n      if (bNode.flags & 16384\n      /* InUse */\n      ) {\n        b[j] = bNode = directClone(bNode);\n      }\n\n      patch(aNode, bNode, dom, context, isSVG, outerEdge, lifecycle);\n      a[j] = bNode;\n      ++j;\n\n      if (j > aEnd || j > bEnd) {\n        break outer;\n      }\n\n      aNode = a[j];\n      bNode = b[j];\n    }\n\n    aNode = a[aEnd];\n    bNode = b[bEnd]; // Sync nodes with the same key at the end.\n\n    while (aNode.key === bNode.key) {\n      if (bNode.flags & 16384\n      /* InUse */\n      ) {\n        b[bEnd] = bNode = directClone(bNode);\n      }\n\n      patch(aNode, bNode, dom, context, isSVG, outerEdge, lifecycle);\n      a[aEnd] = bNode;\n      aEnd--;\n      bEnd--;\n\n      if (j > aEnd || j > bEnd) {\n        break outer;\n      }\n\n      aNode = a[aEnd];\n      bNode = b[bEnd];\n    }\n  }\n\n  if (j > aEnd) {\n    if (j <= bEnd) {\n      nextPos = bEnd + 1;\n      nextNode = nextPos < bLength ? findDOMfromVNode(b[nextPos], true) : outerEdge;\n\n      while (j <= bEnd) {\n        bNode = b[j];\n\n        if (bNode.flags & 16384\n        /* InUse */\n        ) {\n          b[j] = bNode = directClone(bNode);\n        }\n\n        ++j;\n        mount(bNode, dom, context, isSVG, nextNode, lifecycle);\n      }\n    }\n  } else if (j > bEnd) {\n    while (j <= aEnd) {\n      remove(a[j++], dom);\n    }\n  } else {\n    patchKeyedChildrenComplex(a, b, context, aLength, bLength, aEnd, bEnd, j, dom, isSVG, outerEdge, parentVNode, lifecycle);\n  }\n}\n\nfunction patchKeyedChildrenComplex(a, b, context, aLength, bLength, aEnd, bEnd, j, dom, isSVG, outerEdge, parentVNode, lifecycle) {\n  var aNode;\n  var bNode;\n  var nextPos;\n  var i = 0;\n  var aStart = j;\n  var bStart = j;\n  var aLeft = aEnd - j + 1;\n  var bLeft = bEnd - j + 1;\n  var sources = new Int32Array(bLeft + 1); // Keep track if its possible to remove whole DOM using textContent = '';\n\n  var canRemoveWholeContent = aLeft === aLength;\n  var moved = false;\n  var pos = 0;\n  var patched = 0; // When sizes are small, just loop them through\n\n  if (bLength < 4 || (aLeft | bLeft) < 32) {\n    for (i = aStart; i <= aEnd; ++i) {\n      aNode = a[i];\n\n      if (patched < bLeft) {\n        for (j = bStart; j <= bEnd; j++) {\n          bNode = b[j];\n\n          if (aNode.key === bNode.key) {\n            sources[j - bStart] = i + 1;\n\n            if (canRemoveWholeContent) {\n              canRemoveWholeContent = false;\n\n              while (aStart < i) {\n                remove(a[aStart++], dom);\n              }\n            }\n\n            if (pos > j) {\n              moved = true;\n            } else {\n              pos = j;\n            }\n\n            if (bNode.flags & 16384\n            /* InUse */\n            ) {\n              b[j] = bNode = directClone(bNode);\n            }\n\n            patch(aNode, bNode, dom, context, isSVG, outerEdge, lifecycle);\n            ++patched;\n            break;\n          }\n        }\n\n        if (!canRemoveWholeContent && j > bEnd) {\n          remove(aNode, dom);\n        }\n      } else if (!canRemoveWholeContent) {\n        remove(aNode, dom);\n      }\n    }\n  } else {\n    var keyIndex = {}; // Map keys by their index\n\n    for (i = bStart; i <= bEnd; ++i) {\n      keyIndex[b[i].key] = i;\n    } // Try to patch same keys\n\n\n    for (i = aStart; i <= aEnd; ++i) {\n      aNode = a[i];\n\n      if (patched < bLeft) {\n        j = keyIndex[aNode.key];\n\n        if (j !== void 0) {\n          if (canRemoveWholeContent) {\n            canRemoveWholeContent = false;\n\n            while (i > aStart) {\n              remove(a[aStart++], dom);\n            }\n          }\n\n          sources[j - bStart] = i + 1;\n\n          if (pos > j) {\n            moved = true;\n          } else {\n            pos = j;\n          }\n\n          bNode = b[j];\n\n          if (bNode.flags & 16384\n          /* InUse */\n          ) {\n            b[j] = bNode = directClone(bNode);\n          }\n\n          patch(aNode, bNode, dom, context, isSVG, outerEdge, lifecycle);\n          ++patched;\n        } else if (!canRemoveWholeContent) {\n          remove(aNode, dom);\n        }\n      } else if (!canRemoveWholeContent) {\n        remove(aNode, dom);\n      }\n    }\n  } // fast-path: if nothing patched remove all old and add all new\n\n\n  if (canRemoveWholeContent) {\n    removeAllChildren(dom, parentVNode, a);\n    mountArrayChildren(b, dom, context, isSVG, outerEdge, lifecycle);\n  } else if (moved) {\n    var seq = lis_algorithm(sources);\n    j = seq.length - 1;\n\n    for (i = bLeft - 1; i >= 0; i--) {\n      if (sources[i] === 0) {\n        pos = i + bStart;\n        bNode = b[pos];\n\n        if (bNode.flags & 16384\n        /* InUse */\n        ) {\n          b[pos] = bNode = directClone(bNode);\n        }\n\n        nextPos = pos + 1;\n        mount(bNode, dom, context, isSVG, nextPos < bLength ? findDOMfromVNode(b[nextPos], true) : outerEdge, lifecycle);\n      } else if (j < 0 || i !== seq[j]) {\n        pos = i + bStart;\n        bNode = b[pos];\n        nextPos = pos + 1;\n        moveVNodeDOM(bNode, dom, nextPos < bLength ? findDOMfromVNode(b[nextPos], true) : outerEdge);\n      } else {\n        j--;\n      }\n    }\n  } else if (patched !== bLeft) {\n    // when patched count doesn't match b length we need to insert those new ones\n    // loop backwards so we can use insertBefore\n    for (i = bLeft - 1; i >= 0; i--) {\n      if (sources[i] === 0) {\n        pos = i + bStart;\n        bNode = b[pos];\n\n        if (bNode.flags & 16384\n        /* InUse */\n        ) {\n          b[pos] = bNode = directClone(bNode);\n        }\n\n        nextPos = pos + 1;\n        mount(bNode, dom, context, isSVG, nextPos < bLength ? findDOMfromVNode(b[nextPos], true) : outerEdge, lifecycle);\n      }\n    }\n  }\n}\n\nvar result;\nvar p;\nvar maxLen = 0; // https://en.wikipedia.org/wiki/Longest_increasing_subsequence\n\nfunction lis_algorithm(arr) {\n  var arrI = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var u = 0;\n  var v = 0;\n  var c = 0;\n  var len = arr.length;\n\n  if (len > maxLen) {\n    maxLen = len;\n    result = new Int32Array(len);\n    p = new Int32Array(len);\n  }\n\n  for (; i < len; ++i) {\n    arrI = arr[i];\n\n    if (arrI !== 0) {\n      j = result[k];\n\n      if (arr[j] < arrI) {\n        p[i] = j;\n        result[++k] = i;\n        continue;\n      }\n\n      u = 0;\n      v = k;\n\n      while (u < v) {\n        c = u + v >> 1;\n\n        if (arr[result[c]] < arrI) {\n          u = c + 1;\n        } else {\n          v = c;\n        }\n      }\n\n      if (arrI < arr[result[u]]) {\n        if (u > 0) {\n          p[i] = result[u - 1];\n        }\n\n        result[u] = i;\n      }\n    }\n  }\n\n  u = k + 1;\n  var seq = new Int32Array(u);\n  v = result[u - 1];\n\n  while (u-- > 0) {\n    seq[u] = v;\n    v = p[v];\n    result[u] = 0;\n  }\n\n  return seq;\n}\n\nvar hasDocumentAvailable = typeof document !== 'undefined';\n\nif (hasDocumentAvailable) {\n  /*\n   * Defining $EV and $V properties on Node.prototype\n   * fixes v8 \"wrong map\" de-optimization\n   */\n  if (window.Node) {\n    Node.prototype.$EV = null;\n    Node.prototype.$V = null;\n  }\n}\n\nfunction __render(input, parentDOM, callback, context) {\n  var lifecycle = [];\n  var rootInput = parentDOM.$V;\n  renderCheck.v = true;\n\n  if (isNullOrUndef(rootInput)) {\n    if (!isNullOrUndef(input)) {\n      if (input.flags & 16384\n      /* InUse */\n      ) {\n        input = directClone(input);\n      }\n\n      mount(input, parentDOM, context, false, null, lifecycle);\n      parentDOM.$V = input;\n      rootInput = input;\n    }\n  } else {\n    if (isNullOrUndef(input)) {\n      remove(rootInput, parentDOM);\n      parentDOM.$V = null;\n    } else {\n      if (input.flags & 16384\n      /* InUse */\n      ) {\n        input = directClone(input);\n      }\n\n      patch(rootInput, input, parentDOM, context, false, null, lifecycle);\n      rootInput = parentDOM.$V = input;\n    }\n  }\n\n  callAll(lifecycle);\n  renderCheck.v = false;\n\n  if (isFunction(callback)) {\n    callback();\n  }\n\n  if (isFunction(options.renderComplete)) {\n    options.renderComplete(rootInput, parentDOM);\n  }\n}\n\nfunction render(input, parentDOM, callback, context) {\n  if (callback === void 0) callback = null;\n  if (context === void 0) context = EMPTY_OBJ;\n\n  __render(input, parentDOM, callback, context);\n}\n\nfunction createRenderer(parentDOM) {\n  return function renderer(lastInput, nextInput, callback, context) {\n    if (!parentDOM) {\n      parentDOM = lastInput;\n    }\n\n    render(nextInput, parentDOM, callback, context);\n  };\n}\n\nvar QUEUE = [];\nvar nextTick = typeof Promise !== 'undefined' ? Promise.resolve().then.bind(Promise.resolve()) : function (a) {\n  window.setTimeout(a, 0);\n};\nvar microTaskPending = false;\n\nfunction queueStateChanges(component, newState, callback, force) {\n  var pending = component.$PS;\n\n  if (isFunction(newState)) {\n    newState = newState(pending ? combineFrom(component.state, pending) : component.state, component.props, component.context);\n  }\n\n  if (isNullOrUndef(pending)) {\n    component.$PS = newState;\n  } else {\n    for (var stateKey in newState) {\n      pending[stateKey] = newState[stateKey];\n    }\n  }\n\n  if (!component.$BR) {\n    if (!renderCheck.v) {\n      if (QUEUE.length === 0) {\n        applyState(component, force);\n\n        if (isFunction(callback)) {\n          callback.call(component);\n        }\n\n        return;\n      }\n    }\n\n    if (QUEUE.indexOf(component) === -1) {\n      QUEUE.push(component);\n    }\n\n    if (force) {\n      component.$F = true;\n    }\n\n    if (!microTaskPending) {\n      microTaskPending = true;\n      nextTick(rerender);\n    }\n\n    if (isFunction(callback)) {\n      var QU = component.$QU;\n\n      if (!QU) {\n        QU = component.$QU = [];\n      }\n\n      QU.push(callback);\n    }\n  } else if (isFunction(callback)) {\n    component.$L.push(callback.bind(component));\n  }\n}\n\nfunction callSetStateCallbacks(component) {\n  var queue = component.$QU;\n\n  for (var i = 0; i < queue.length; ++i) {\n    queue[i].call(component);\n  }\n\n  component.$QU = null;\n}\n\nfunction rerender() {\n  var component;\n  microTaskPending = false;\n\n  while (component = QUEUE.shift()) {\n    if (!component.$UN) {\n      var force = component.$F;\n      component.$F = false;\n      applyState(component, force);\n\n      if (component.$QU) {\n        callSetStateCallbacks(component);\n      }\n    }\n  }\n}\n\nfunction applyState(component, force) {\n  if (force || !component.$BR) {\n    var pendingState = component.$PS;\n    component.$PS = null;\n    var lifecycle = [];\n    renderCheck.v = true;\n    updateClassComponent(component, combineFrom(component.state, pendingState), component.props, findDOMfromVNode(component.$LI, true).parentNode, component.context, component.$SVG, force, null, lifecycle);\n    callAll(lifecycle);\n    renderCheck.v = false;\n  } else {\n    component.state = component.$PS;\n    component.$PS = null;\n  }\n}\n\nvar Component = function Component(props, context) {\n  // Public\n  this.state = null; // Internal properties\n\n  this.$BR = false; // BLOCK RENDER\n\n  this.$BS = true; // BLOCK STATE\n\n  this.$PS = null; // PENDING STATE (PARTIAL or FULL)\n\n  this.$LI = null; // LAST INPUT\n\n  this.$UN = false; // UNMOUNTED\n\n  this.$CX = null; // CHILDCONTEXT\n\n  this.$QU = null; // QUEUE\n\n  this.$N = false; // Uses new lifecycle API Flag\n\n  this.$L = null; // Current lifecycle of this component\n\n  this.$SVG = false; // Flag to keep track if component is inside SVG tree\n\n  this.$F = false; // Force update flag\n\n  this.props = props || EMPTY_OBJ;\n  this.context = context || EMPTY_OBJ; // context should not be mutable\n};\n\nComponent.prototype.forceUpdate = function forceUpdate(callback) {\n  if (this.$UN) {\n    return;\n  } // Do not allow double render during force update\n\n\n  queueStateChanges(this, {}, callback, true);\n};\n\nComponent.prototype.setState = function setState(newState, callback) {\n  if (this.$UN) {\n    return;\n  }\n\n  if (!this.$BS) {\n    queueStateChanges(this, newState, callback, false);\n  }\n};\n\nComponent.prototype.render = function render(_nextProps, _nextState, _nextContext) {\n  return null;\n};\n\nvar version = \"7.4.11\";\nexport { Component, EMPTY_OBJ, Fragment, createClassComponentInstance as _CI, normalizeRoot as _HI, mount as _M, mountClassComponentCallbacks as _MCCC, mountElement as _ME, mountFunctionalComponentCallbacks as _MFCC, mountProps as _MP, mountRef as _MR, renderFunctionalComponent as _RFC, __render, createComponentVNode, createFragment, createPortal, createRef, createRenderer, createTextVNode, createVNode, directClone, findDOMfromVNode, forwardRef, getFlagsForElementVnode, linkEvent, normalizeProps, options, render, rerender, version };","map":null,"metadata":{},"sourceType":"module"}