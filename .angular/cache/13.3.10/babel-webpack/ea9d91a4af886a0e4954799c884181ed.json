{"ast":null,"code":"/**\r\n * DevExtreme (esm/core/dom_adapter.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport injector from \"./utils/dependency_injector\";\nimport { noop } from \"./utils/common\";\nvar ELEMENT_NODE = 1;\nvar TEXT_NODE = 3;\nvar DOCUMENT_NODE = 9;\nvar nativeDOMAdapterStrategy = {\n  querySelectorAll: function querySelectorAll(element, selector) {\n    return element.querySelectorAll(selector);\n  },\n  elementMatches: function elementMatches(element, selector) {\n    var _this = this;\n\n    var matches = element.matches || element.matchesSelector || element.mozMatchesSelector || element.msMatchesSelector || element.oMatchesSelector || element.webkitMatchesSelector || function (selector) {\n      var doc = element.document || element.ownerDocument;\n\n      if (!doc) {\n        return false;\n      }\n\n      var items = _this.querySelectorAll(doc, selector);\n\n      for (var i = 0; i < items.length; i++) {\n        if (items[i] === element) {\n          return true;\n        }\n      }\n    };\n\n    return matches.call(element, selector);\n  },\n  createElement: function createElement(tagName, context) {\n    context = context || this._document;\n    return context.createElement(tagName);\n  },\n  createElementNS: function createElementNS(ns, tagName, context) {\n    context = context || this._document;\n    return context.createElementNS(ns, tagName);\n  },\n  createTextNode: function createTextNode(text, context) {\n    context = context || this._document;\n    return context.createTextNode(text);\n  },\n  isNode: function isNode(element) {\n    return element && \"object\" === typeof element && \"nodeType\" in element && \"nodeName\" in element;\n  },\n  isElementNode: function isElementNode(element) {\n    return element && element.nodeType === ELEMENT_NODE;\n  },\n  isTextNode: function isTextNode(element) {\n    return element && element.nodeType === TEXT_NODE;\n  },\n  isDocument: function isDocument(element) {\n    return element && element.nodeType === DOCUMENT_NODE;\n  },\n  removeElement: function removeElement(element) {\n    var parentNode = element && element.parentNode;\n\n    if (parentNode) {\n      parentNode.removeChild(element);\n    }\n  },\n  insertElement: function insertElement(parentElement, newElement, nextSiblingElement) {\n    if (parentElement && newElement && parentElement !== newElement) {\n      if (nextSiblingElement) {\n        parentElement.insertBefore(newElement, nextSiblingElement);\n      } else {\n        parentElement.appendChild(newElement);\n      }\n    }\n  },\n  getAttribute: function getAttribute(element, name) {\n    return element.getAttribute(name);\n  },\n  setAttribute: function setAttribute(element, name, value) {\n    element.setAttribute(name, value);\n  },\n  removeAttribute: function removeAttribute(element, name) {\n    element.removeAttribute(name);\n  },\n  setProperty: function setProperty(element, name, value) {\n    element[name] = value;\n  },\n  setText: function setText(element, text) {\n    if (element) {\n      element.textContent = text;\n    }\n  },\n  setClass: function setClass(element, className, isAdd) {\n    if (1 === element.nodeType && className) {\n      isAdd ? element.classList.add(className) : element.classList.remove(className);\n    }\n  },\n  setStyle: function setStyle(element, name, value) {\n    element.style[name] = value || \"\";\n  },\n  _document: \"undefined\" === typeof document ? void 0 : document,\n  getDocument: function getDocument() {\n    return this._document;\n  },\n  getActiveElement: function getActiveElement() {\n    return this._document.activeElement;\n  },\n  getBody: function getBody() {\n    return this._document.body;\n  },\n  createDocumentFragment: function createDocumentFragment() {\n    return this._document.createDocumentFragment();\n  },\n  getDocumentElement: function getDocumentElement() {\n    return this._document.documentElement;\n  },\n  getLocation: function getLocation() {\n    return this._document.location;\n  },\n  getSelection: function getSelection() {\n    return this._document.selection;\n  },\n  getReadyState: function getReadyState() {\n    return this._document.readyState;\n  },\n  getHead: function getHead() {\n    return this._document.head;\n  },\n  hasDocumentProperty: function hasDocumentProperty(property) {\n    return property in this._document;\n  },\n  listen: function listen(element, event, callback, options) {\n    if (!element || !(\"addEventListener\" in element)) {\n      return noop;\n    }\n\n    element.addEventListener(event, callback, options);\n    return function () {\n      element.removeEventListener(event, callback);\n    };\n  },\n  elementsFromPoint: function elementsFromPoint(x, y) {\n    return this._document.elementsFromPoint(x, y);\n  }\n};\nexport default injector(nativeDOMAdapterStrategy);","map":null,"metadata":{},"sourceType":"module"}