{"ast":null,"code":"/**\r\n * DevExtreme (esm/events/short.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport eventsEngine from \"./core/events_engine\";\nimport KeyboardProcessor from \"./core/keyboard_processor\";\nimport { addNamespace as pureAddNamespace } from \"./utils/index\";\n\nfunction addNamespace(event, namespace) {\n  return namespace ? pureAddNamespace(event, namespace) : event;\n}\n\nfunction executeAction(action, args) {\n  return \"function\" === typeof action ? action(args) : action.execute(args);\n}\n\nexport var active = {\n  on: function on($el, active, inactive, opts) {\n    var selector = opts.selector,\n        showTimeout = opts.showTimeout,\n        hideTimeout = opts.hideTimeout,\n        namespace = opts.namespace;\n    eventsEngine.on($el, addNamespace(\"dxactive\", namespace), selector, {\n      timeout: showTimeout\n    }, function (event) {\n      return executeAction(active, {\n        event: event,\n        element: event.currentTarget\n      });\n    });\n    eventsEngine.on($el, addNamespace(\"dxinactive\", namespace), selector, {\n      timeout: hideTimeout\n    }, function (event) {\n      return executeAction(inactive, {\n        event: event,\n        element: event.currentTarget\n      });\n    });\n  },\n  off: function off($el, _ref) {\n    var namespace = _ref.namespace,\n        selector = _ref.selector;\n    eventsEngine.off($el, addNamespace(\"dxactive\", namespace), selector);\n    eventsEngine.off($el, addNamespace(\"dxinactive\", namespace), selector);\n  }\n};\nexport var resize = {\n  on: function on($el, resize) {\n    var _ref8 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {},\n        namespace = _ref8.namespace;\n\n    eventsEngine.on($el, addNamespace(\"dxresize\", namespace), resize);\n  },\n  off: function off($el) {\n    var _ref9 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n        namespace = _ref9.namespace;\n\n    eventsEngine.off($el, addNamespace(\"dxresize\", namespace));\n  }\n};\nexport var hover = {\n  on: function on($el, start, end, _ref2) {\n    var selector = _ref2.selector,\n        namespace = _ref2.namespace;\n    eventsEngine.on($el, addNamespace(\"dxhoverend\", namespace), selector, function (event) {\n      return end(event);\n    });\n    eventsEngine.on($el, addNamespace(\"dxhoverstart\", namespace), selector, function (event) {\n      return executeAction(start, {\n        element: event.target,\n        event: event\n      });\n    });\n  },\n  off: function off($el, _ref3) {\n    var selector = _ref3.selector,\n        namespace = _ref3.namespace;\n    eventsEngine.off($el, addNamespace(\"dxhoverstart\", namespace), selector);\n    eventsEngine.off($el, addNamespace(\"dxhoverend\", namespace), selector);\n  }\n};\nexport var visibility = {\n  on: function on($el, shown, hiding, _ref4) {\n    var namespace = _ref4.namespace;\n    eventsEngine.on($el, addNamespace(\"dxhiding\", namespace), hiding);\n    eventsEngine.on($el, addNamespace(\"dxshown\", namespace), shown);\n  },\n  off: function off($el, _ref5) {\n    var namespace = _ref5.namespace;\n    eventsEngine.off($el, addNamespace(\"dxhiding\", namespace));\n    eventsEngine.off($el, addNamespace(\"dxshown\", namespace));\n  }\n};\nexport var focus = {\n  on: function on($el, focusIn, focusOut, _ref6) {\n    var namespace = _ref6.namespace;\n    eventsEngine.on($el, addNamespace(\"focusin\", namespace), focusIn);\n    eventsEngine.on($el, addNamespace(\"focusout\", namespace), focusOut);\n  },\n  off: function off($el, _ref7) {\n    var namespace = _ref7.namespace;\n    eventsEngine.off($el, addNamespace(\"focusin\", namespace));\n    eventsEngine.off($el, addNamespace(\"focusout\", namespace));\n  },\n  trigger: function trigger($el) {\n    return eventsEngine.trigger($el, \"focus\");\n  }\n};\nexport var dxClick = {\n  on: function on($el, click) {\n    var _ref10 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {},\n        namespace = _ref10.namespace;\n\n    eventsEngine.on($el, addNamespace(\"dxclick\", namespace), click);\n  },\n  off: function off($el) {\n    var _ref11 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n        namespace = _ref11.namespace;\n\n    eventsEngine.off($el, addNamespace(\"dxclick\", namespace));\n  }\n};\nexport var click = {\n  on: function on($el, click) {\n    var _ref12 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {},\n        namespace = _ref12.namespace;\n\n    eventsEngine.on($el, addNamespace(\"click\", namespace), click);\n  },\n  off: function off($el) {\n    var _ref13 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n        namespace = _ref13.namespace;\n\n    eventsEngine.off($el, addNamespace(\"click\", namespace));\n  }\n};\nvar index = 0;\nvar keyboardProcessors = {};\n\nvar generateListenerId = function generateListenerId() {\n  return \"keyboardProcessorId\".concat(index++);\n};\n\nexport var keyboard = {\n  on: function on(element, focusTarget, handler) {\n    var listenerId = generateListenerId();\n    keyboardProcessors[listenerId] = new KeyboardProcessor({\n      element: element,\n      focusTarget: focusTarget,\n      handler: handler\n    });\n    return listenerId;\n  },\n  off: function off(listenerId) {\n    if (listenerId && keyboardProcessors[listenerId]) {\n      keyboardProcessors[listenerId].dispose();\n      delete keyboardProcessors[listenerId];\n    }\n  },\n  _getProcessor: function _getProcessor(listenerId) {\n    return keyboardProcessors[listenerId];\n  }\n};","map":null,"metadata":{},"sourceType":"module"}