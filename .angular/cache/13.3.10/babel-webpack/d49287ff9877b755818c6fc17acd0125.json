{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.editing_form_based.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { getWindow } from \"../../core/utils/window\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport Guid from \"../../core/guid\";\nimport { isDefined, isString } from \"../../core/utils/type\";\nimport { each } from \"../../core/utils/iterator\";\nimport { extend } from \"../../core/utils/extend\";\nimport Button from \"../button\";\nimport devices from \"../../core/devices\";\nimport Form from \"../form\";\nimport { Deferred } from \"../../core/utils/deferred\";\nimport Scrollable from \"../scroll_view/ui.scrollable\";\nimport Popup from \"../popup\";\nimport { EDIT_MODE_FORM, EDIT_MODE_POPUP, FOCUSABLE_ELEMENT_SELECTOR, EDITING_EDITROWKEY_OPTION_NAME, EDITING_POPUP_OPTION_NAME, DATA_EDIT_DATA_INSERT_TYPE, EDITING_FORM_OPTION_NAME } from \"./ui.grid_core.editing_constants\";\nvar EDIT_FORM_ITEM_CLASS = \"edit-form-item\";\nvar EDIT_POPUP_CLASS = \"edit-popup\";\nvar SCROLLABLE_CONTAINER_CLASS = \"dx-scrollable-container\";\nvar EDIT_POPUP_FORM_CLASS = \"edit-popup-form\";\nvar BUTTON_CLASS = \"dx-button\";\nvar FORM_BUTTONS_CONTAINER_CLASS = \"form-buttons-container\";\n\nvar getEditorType = function getEditorType(item) {\n  var _column$formItem;\n\n  var column = item.column;\n  return item.isCustomEditorType ? item.editorType : null === (_column$formItem = column.formItem) || void 0 === _column$formItem ? void 0 : _column$formItem.editorType;\n};\n\nvar forEachFormItems = function forEachFormItems(items, callBack) {\n  items.forEach(function (item) {\n    if (item.items || item.tabs) {\n      forEachFormItems(item.items || item.tabs, callBack);\n    } else {\n      callBack(item);\n    }\n  });\n};\n\nexport var editingFormBasedModule = {\n  extenders: {\n    controllers: {\n      editing: {\n        init: function init() {\n          this._editForm = null;\n          this._updateEditFormDeferred = null;\n          this.callBase.apply(this, arguments);\n        },\n        isFormOrPopupEditMode: function isFormOrPopupEditMode() {\n          return this.isPopupEditMode() || this.isFormEditMode();\n        },\n        isPopupEditMode: function isPopupEditMode() {\n          var editMode = this.option(\"editing.mode\");\n          return editMode === EDIT_MODE_POPUP;\n        },\n        isFormEditMode: function isFormEditMode() {\n          var editMode = this.option(\"editing.mode\");\n          return editMode === EDIT_MODE_FORM;\n        },\n        getFirstEditableColumnIndex: function getFirstEditableColumnIndex() {\n          var firstFormItem = this._firstFormItem;\n\n          if (this.isFormEditMode() && firstFormItem) {\n            var editRowKey = this.option(EDITING_EDITROWKEY_OPTION_NAME);\n\n            var editRowIndex = this._dataController.getRowIndexByKey(editRowKey);\n\n            var $editFormElements = this._rowsView.getCellElements(editRowIndex);\n\n            return this._rowsView._getEditFormEditorVisibleIndex($editFormElements, firstFormItem.column);\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        getEditFormRowIndex: function getEditFormRowIndex() {\n          return this.isFormOrPopupEditMode() ? this._getVisibleEditRowIndex() : this.callBase.apply(this, arguments);\n        },\n        _isEditColumnVisible: function _isEditColumnVisible() {\n          var result = this.callBase.apply(this, arguments);\n          var editingOptions = this.option(\"editing\");\n          return this.isFormOrPopupEditMode() ? editingOptions.allowUpdating || result : result;\n        },\n        _handleDataChanged: function _handleDataChanged(args) {\n          var editForm = this._editForm;\n\n          if (\"refresh\" === args.changeType && this.isPopupEditMode() && null !== editForm && void 0 !== editForm && editForm.option(\"visible\")) {\n            this._repaintEditPopup();\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        getPopupContent: function getPopupContent() {\n          var _this$_editPopup;\n\n          var popupVisible = null === (_this$_editPopup = this._editPopup) || void 0 === _this$_editPopup ? void 0 : _this$_editPopup.option(\"visible\");\n\n          if (this.isPopupEditMode() && popupVisible) {\n            return this._$popupContent;\n          }\n        },\n        _showAddedRow: function _showAddedRow(rowIndex) {\n          if (this.isPopupEditMode()) {\n            this._showEditPopup(rowIndex);\n          } else {\n            this.callBase.apply(this, arguments);\n          }\n        },\n        _cancelEditDataCore: function _cancelEditDataCore() {\n          this.callBase.apply(this, arguments);\n\n          if (this.isPopupEditMode()) {\n            this._hideEditPopup();\n          }\n        },\n        _updateEditRowCore: function _updateEditRowCore(row, skipCurrentRow, isCustomSetCellValue) {\n          var editForm = this._editForm;\n\n          if (this.isPopupEditMode()) {\n            if (this.option(\"repaintChangesOnly\")) {\n              var _row$update;\n\n              null === (_row$update = row.update) || void 0 === _row$update ? void 0 : _row$update.call(row, row);\n            } else if (editForm) {\n              this._updateEditFormDeferred = new Deferred().done(function () {\n                return editForm.repaint();\n              });\n\n              if (!this._updateLockCount) {\n                this._updateEditFormDeferred.resolve();\n              }\n            }\n          } else {\n            this.callBase.apply(this, arguments);\n          }\n        },\n        _showEditPopup: function _showEditPopup(rowIndex, repaintForm) {\n          var _this = this;\n\n          var isMobileDevice = \"desktop\" !== devices.current().deviceType;\n          var popupOptions = extend({\n            showTitle: false,\n            fullScreen: isMobileDevice,\n            copyRootClassesToWrapper: true,\n            _ignoreCopyRootClassesToWrapperDeprecation: true,\n            toolbarItems: [{\n              toolbar: \"bottom\",\n              location: \"after\",\n              widget: \"dxButton\",\n              options: this._getSaveButtonConfig()\n            }, {\n              toolbar: \"bottom\",\n              location: \"after\",\n              widget: \"dxButton\",\n              options: this._getCancelButtonConfig()\n            }],\n            contentTemplate: this._getPopupEditFormTemplate(rowIndex)\n          }, this.option(EDITING_POPUP_OPTION_NAME));\n\n          if (!this._editPopup) {\n            var $popupContainer = $(\"<div>\").appendTo(this.component.$element()).addClass(this.addWidgetPrefix(EDIT_POPUP_CLASS));\n            this._editPopup = this._createComponent($popupContainer, Popup, {\n              copyRootClassesToWrapper: true,\n              _ignoreCopyRootClassesToWrapperDeprecation: true\n            });\n\n            this._editPopup.on(\"hiding\", this._getEditPopupHiddenHandler());\n\n            this._editPopup.on(\"shown\", function (e) {\n              eventsEngine.trigger(e.component.$content().find(FOCUSABLE_ELEMENT_SELECTOR).not(\".\" + SCROLLABLE_CONTAINER_CLASS).first(), \"focus\");\n\n              if (repaintForm) {\n                var _this$_editForm;\n\n                null === (_this$_editForm = _this._editForm) || void 0 === _this$_editForm ? void 0 : _this$_editForm.repaint();\n              }\n            });\n          }\n\n          this._editPopup.option(popupOptions);\n\n          this._editPopup.show();\n\n          this.callBase.apply(this, arguments);\n        },\n        _getPopupEditFormTemplate: function _getPopupEditFormTemplate(rowIndex) {\n          var _this2 = this;\n\n          var row = this.component.getVisibleRows()[rowIndex];\n          var templateOptions = {\n            row: row,\n            rowType: row.rowType,\n            key: row.key,\n            rowIndex: rowIndex\n          };\n\n          this._rowsView._addWatchMethod(templateOptions, row);\n\n          return function (container) {\n            var formTemplate = _this2.getEditFormTemplate();\n\n            var scrollable = _this2._createComponent($(\"<div>\").appendTo(container), Scrollable);\n\n            _this2._$popupContent = scrollable.$content();\n            formTemplate(_this2._$popupContent, templateOptions, {\n              isPopupForm: true\n            });\n\n            _this2._rowsView.renderDelayedTemplates();\n          };\n        },\n        _repaintEditPopup: function _repaintEditPopup() {\n          var _this$_editPopup2;\n\n          var rowIndex = this._getVisibleEditRowIndex();\n\n          if (null !== (_this$_editPopup2 = this._editPopup) && void 0 !== _this$_editPopup2 && _this$_editPopup2.option(\"visible\") && rowIndex >= 0) {\n            var defaultAnimation = this._editPopup.option(\"animation\");\n\n            this._editPopup.option(\"animation\", null);\n\n            this._showEditPopup(rowIndex, true);\n\n            this._editPopup.option(\"animation\", defaultAnimation);\n          }\n        },\n        _hideEditPopup: function _hideEditPopup() {\n          var _this$_editPopup3;\n\n          null === (_this$_editPopup3 = this._editPopup) || void 0 === _this$_editPopup3 ? void 0 : _this$_editPopup3.option(\"visible\", false);\n        },\n        optionChanged: function optionChanged(args) {\n          if (\"editing\" === args.name && this.isFormOrPopupEditMode()) {\n            var fullName = args.fullName;\n\n            if (0 === fullName.indexOf(EDITING_FORM_OPTION_NAME)) {\n              this._handleFormOptionChange(args);\n\n              args.handled = true;\n            } else if (0 === fullName.indexOf(EDITING_POPUP_OPTION_NAME)) {\n              this._handlePopupOptionChange(args);\n\n              args.handled = true;\n            }\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        _handleFormOptionChange: function _handleFormOptionChange(args) {\n          var _this$_editPopup4;\n\n          if (this.isFormEditMode()) {\n            var editRowIndex = this._getVisibleEditRowIndex();\n\n            if (editRowIndex >= 0) {\n              this._dataController.updateItems({\n                changeType: \"update\",\n                rowIndices: [editRowIndex]\n              });\n            }\n          } else if (null !== (_this$_editPopup4 = this._editPopup) && void 0 !== _this$_editPopup4 && _this$_editPopup4.option(\"visible\") && 0 === args.fullName.indexOf(EDITING_FORM_OPTION_NAME)) {\n            this._repaintEditPopup();\n          }\n        },\n        _handlePopupOptionChange: function _handlePopupOptionChange(args) {\n          var editPopup = this._editPopup;\n\n          if (editPopup) {\n            var popupOptionName = args.fullName.slice(EDITING_POPUP_OPTION_NAME.length + 1);\n\n            if (popupOptionName) {\n              editPopup.option(popupOptionName, args.value);\n            } else {\n              editPopup.option(args.value);\n            }\n          }\n        },\n        renderFormEditTemplate: function renderFormEditTemplate(detailCellOptions, item, formTemplateOptions, container, isReadOnly) {\n          var _this3 = this;\n\n          var that = this;\n          var $container = $(container);\n          var column = item.column;\n          var editorType = getEditorType(item);\n          var rowData = null === detailCellOptions || void 0 === detailCellOptions ? void 0 : detailCellOptions.row.data;\n          var form = formTemplateOptions.component;\n\n          var _ref2 = formTemplateOptions.editorOptions || {},\n              label = _ref2.label,\n              labelMark = _ref2.labelMark,\n              labelMode = _ref2.labelMode;\n\n          var cellOptions = extend({}, detailCellOptions, {\n            data: rowData,\n            cellElement: null,\n            isOnForm: true,\n            item: item,\n            id: form.getItemID(item.name || item.dataField),\n            column: extend({}, column, {\n              editorType: editorType,\n              editorOptions: extend({\n                label: label,\n                labelMark: labelMark,\n                labelMode: labelMode\n              }, column.editorOptions, item.editorOptions)\n            }),\n            columnIndex: column.index,\n            setValue: !isReadOnly && column.allowEditing && function (value) {\n              that.updateFieldValue(cellOptions, value);\n            }\n          });\n          cellOptions.value = column.calculateCellValue(rowData);\n\n          var template = this._getFormEditItemTemplate.bind(this)(cellOptions, column);\n\n          this._rowsView.renderTemplate($container, template, cellOptions, !!$container.closest(getWindow().document).length).done(function () {\n            _this3._rowsView._updateCell($container, cellOptions);\n          });\n\n          return cellOptions;\n        },\n        getFormEditorTemplate: function getFormEditorTemplate(cellOptions, item) {\n          var _this4 = this;\n\n          var column = this.component.columnOption(item.dataField);\n          return function (options, container) {\n            var _cellOptions$row$watc, _cellOptions$row;\n\n            var $container = $(container);\n            null === (_cellOptions$row$watc = (_cellOptions$row = cellOptions.row).watch) || void 0 === _cellOptions$row$watc ? void 0 : _cellOptions$row$watc.call(_cellOptions$row, function () {\n              return column.selector(cellOptions.row.data);\n            }, function () {\n              var _validator;\n\n              var $editorElement = $container.find(\".dx-widget\").first();\n              var validator = $editorElement.data(\"dxValidator\");\n              var validatorOptions = null === (_validator = validator) || void 0 === _validator ? void 0 : _validator.option();\n              $container.contents().remove();\n              cellOptions = _this4.renderFormEditTemplate.bind(_this4)(cellOptions, item, options, $container);\n              $editorElement = $container.find(\".dx-widget\").first();\n              validator = $editorElement.data(\"dxValidator\");\n\n              if (validatorOptions && !validator) {\n                $editorElement.dxValidator({\n                  validationRules: validatorOptions.validationRules,\n                  validationGroup: validatorOptions.validationGroup,\n                  dataGetter: validatorOptions.dataGetter\n                });\n              }\n            });\n            cellOptions = _this4.renderFormEditTemplate.bind(_this4)(cellOptions, item, options, $container);\n          };\n        },\n        getEditFormOptions: function getEditFormOptions(detailOptions) {\n          var _this5 = this;\n\n          var _this$_getValidationG;\n\n          var editFormOptions = null === (_this$_getValidationG = this._getValidationGroupsInForm) || void 0 === _this$_getValidationG ? void 0 : _this$_getValidationG.call(this, detailOptions);\n          var userCustomizeItem = this.option(\"editing.form.customizeItem\");\n          var editFormItemClass = this.addWidgetPrefix(EDIT_FORM_ITEM_CLASS);\n          var items = this.option(\"editing.form.items\");\n          var isCustomEditorType = {};\n\n          if (!items) {\n            var columns = this.getController(\"columns\").getColumns();\n            items = [];\n            each(columns, function (_, column) {\n              if (!column.isBand && !column.type) {\n                items.push({\n                  column: column,\n                  name: column.name,\n                  dataField: column.dataField\n                });\n              }\n            });\n          } else {\n            forEachFormItems(items, function (item) {\n              var itemId = (null === item || void 0 === item ? void 0 : item.name) || (null === item || void 0 === item ? void 0 : item.dataField);\n\n              if (itemId) {\n                isCustomEditorType[itemId] = !!item.editorType;\n              }\n            });\n          }\n\n          return extend({}, editFormOptions, {\n            items: items,\n            formID: \"dx-\" + new Guid(),\n            customizeItem: function customizeItem(item) {\n              var column;\n              var itemId = item.name || item.dataField;\n\n              if (item.column || itemId) {\n                column = item.column || _this5._columnsController.columnOption(item.name ? \"name:\" + item.name : \"dataField:\" + item.dataField);\n              }\n\n              if (column) {\n                item.label = item.label || {};\n                item.label.text = item.label.text || column.caption;\n\n                if (\"boolean\" === column.dataType && void 0 === item.label.visible) {\n                  var labelMode = _this5.option(\"editing.form.labelMode\");\n\n                  if (\"floating\" === labelMode || \"static\" === labelMode) {\n                    item.label.visible = true;\n                  }\n                }\n\n                item.template = item.template || _this5.getFormEditorTemplate(detailOptions, item);\n                item.column = column;\n                item.isCustomEditorType = isCustomEditorType[itemId];\n\n                if (column.formItem) {\n                  extend(item, column.formItem);\n                }\n\n                if (void 0 === item.isRequired && column.validationRules) {\n                  item.isRequired = column.validationRules.some(function (rule) {\n                    return \"required\" === rule.type;\n                  });\n                  item.validationRules = [];\n                }\n\n                var itemVisible = isDefined(item.visible) ? item.visible : true;\n\n                if (!_this5._firstFormItem && itemVisible) {\n                  _this5._firstFormItem = item;\n                }\n              }\n\n              null === userCustomizeItem || void 0 === userCustomizeItem ? void 0 : userCustomizeItem.call(_this5, item);\n              item.cssClass = isString(item.cssClass) ? item.cssClass + \" \" + editFormItemClass : editFormItemClass;\n            }\n          });\n        },\n        getEditFormTemplate: function getEditFormTemplate() {\n          var _this6 = this;\n\n          return function ($container, detailOptions, options) {\n            var editFormOptions = _this6.option(EDITING_FORM_OPTION_NAME);\n\n            var baseEditFormOptions = _this6.getEditFormOptions(detailOptions);\n\n            var $formContainer = $(\"<div>\").appendTo($container);\n            var isPopupForm = null === options || void 0 === options ? void 0 : options.isPopupForm;\n            _this6._firstFormItem = void 0;\n\n            if (isPopupForm) {\n              $formContainer.addClass(_this6.addWidgetPrefix(EDIT_POPUP_FORM_CLASS));\n            }\n\n            _this6._editForm = _this6._createComponent($formContainer, Form, extend({}, editFormOptions, baseEditFormOptions));\n\n            if (!isPopupForm) {\n              var $buttonsContainer = $(\"<div>\").addClass(_this6.addWidgetPrefix(FORM_BUTTONS_CONTAINER_CLASS)).appendTo($container);\n\n              _this6._createComponent($(\"<div>\").appendTo($buttonsContainer), Button, _this6._getSaveButtonConfig());\n\n              _this6._createComponent($(\"<div>\").appendTo($buttonsContainer), Button, _this6._getCancelButtonConfig());\n            }\n\n            _this6._editForm.on(\"contentReady\", function () {\n              var _this$_editPopup5;\n\n              null === (_this$_editPopup5 = _this6._editPopup) || void 0 === _this$_editPopup5 ? void 0 : _this$_editPopup5.repaint();\n            });\n          };\n        },\n        getEditForm: function getEditForm() {\n          return this._editForm;\n        },\n        _endUpdateCore: function _endUpdateCore() {\n          var _this$_updateEditForm;\n\n          null === (_this$_updateEditForm = this._updateEditFormDeferred) || void 0 === _this$_updateEditForm ? void 0 : _this$_updateEditForm.resolve();\n        },\n        _beforeEndSaving: function _beforeEndSaving() {\n          this.callBase.apply(this, arguments);\n\n          if (this.isPopupEditMode()) {\n            var _this$_editPopup6;\n\n            null === (_this$_editPopup6 = this._editPopup) || void 0 === _this$_editPopup6 ? void 0 : _this$_editPopup6.hide();\n          }\n        },\n        _processDataItemCore: function _processDataItemCore(item, _ref) {\n          var type = _ref.type;\n\n          if (this.isPopupEditMode() && type === DATA_EDIT_DATA_INSERT_TYPE) {\n            item.visible = false;\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        _editRowFromOptionChangedCore: function _editRowFromOptionChangedCore(rowIndices, rowIndex, oldRowIndex) {\n          if (this.isPopupEditMode()) {\n            this._showEditPopup(rowIndex);\n          } else {\n            this.callBase.apply(this, arguments);\n          }\n        }\n      },\n      data: {\n        _updateEditItem: function _updateEditItem(item) {\n          if (this._editingController.isFormEditMode()) {\n            item.rowType = \"detail\";\n          }\n        }\n      }\n    },\n    views: {\n      rowsView: {\n        _renderCellContent: function _renderCellContent($cell, options) {\n          if (\"data\" === options.rowType && this._editingController.isPopupEditMode() && false === options.row.visible) {\n            return;\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        getCellElements: function getCellElements(rowIndex) {\n          var $cellElements = this.callBase(rowIndex);\n          var editingController = this._editingController;\n          var editForm = editingController.getEditForm();\n          var editFormRowIndex = editingController.getEditFormRowIndex();\n\n          if (editFormRowIndex === rowIndex && $cellElements && editForm) {\n            return editForm.$element().find(\".\" + this.addWidgetPrefix(EDIT_FORM_ITEM_CLASS) + \", .\" + BUTTON_CLASS);\n          }\n\n          return $cellElements;\n        },\n        _getVisibleColumnIndex: function _getVisibleColumnIndex($cells, rowIndex, columnIdentifier) {\n          var editFormRowIndex = this._editingController.getEditFormRowIndex();\n\n          if (editFormRowIndex === rowIndex && isString(columnIdentifier)) {\n            var column = this._columnsController.columnOption(columnIdentifier);\n\n            return this._getEditFormEditorVisibleIndex($cells, column);\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _getEditFormEditorVisibleIndex: function _getEditFormEditorVisibleIndex($cells, column) {\n          var visibleIndex = -1;\n          each($cells, function (index, cellElement) {\n            var item = $(cellElement).find(\".dx-field-item-content\").data(\"dx-form-item\");\n\n            if (null !== item && void 0 !== item && item.column && column && item.column.index === column.index) {\n              visibleIndex = index;\n              return false;\n            }\n          });\n          return visibleIndex;\n        },\n        _isFormItem: function _isFormItem(parameters) {\n          var isDetailRow = \"detail\" === parameters.rowType || \"detailAdaptive\" === parameters.rowType;\n\n          var isPopupEditing = \"data\" === parameters.rowType && this._editingController.isPopupEditMode();\n\n          return (isDetailRow || isPopupEditing) && parameters.item;\n        },\n        _updateCell: function _updateCell($cell, parameters) {\n          if (this._isFormItem(parameters)) {\n            this._formItemPrepared(parameters, $cell);\n          } else {\n            this.callBase($cell, parameters);\n          }\n        }\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}