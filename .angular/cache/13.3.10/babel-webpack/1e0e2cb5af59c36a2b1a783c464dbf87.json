{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/ui/file_uploader.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getOffset, getWidth } from \"../core/utils/size\";\nimport $ from \"../core/renderer\";\nimport Guid from \"../core/guid\";\nimport { getWindow } from \"../core/utils/window\";\nimport eventsEngine from \"../events/core/events_engine\";\nimport registerComponent from \"../core/component_registrator\";\nimport Callbacks from \"../core/utils/callbacks\";\nimport { isDefined, isFunction, isNumeric } from \"../core/utils/type\";\nimport { each } from \"../core/utils/iterator\";\nimport { extend } from \"../core/utils/extend\";\nimport { inArray } from \"../core/utils/array\";\nimport { Deferred, fromPromise } from \"../core/utils/deferred\";\nimport ajax from \"../core/utils/ajax\";\nimport Editor from \"./editor/editor\";\nimport Button from \"./button\";\nimport ProgressBar from \"./progress_bar\";\nimport devices from \"../core/devices\";\nimport { addNamespace, isTouchEvent } from \"../events/utils/index\";\nimport { name as clickEventName } from \"../events/click\";\nimport messageLocalization from \"../localization/message\";\nimport { isMaterial } from \"./themes\";\nimport domAdapter from \"../core/dom_adapter\";\nvar window = getWindow();\nvar FILEUPLOADER_CLASS = \"dx-fileuploader\";\nvar FILEUPLOADER_EMPTY_CLASS = \"dx-fileuploader-empty\";\nvar FILEUPLOADER_SHOW_FILE_LIST_CLASS = \"dx-fileuploader-show-file-list\";\nvar FILEUPLOADER_DRAGOVER_CLASS = \"dx-fileuploader-dragover\";\nvar FILEUPLOADER_WRAPPER_CLASS = \"dx-fileuploader-wrapper\";\nvar FILEUPLOADER_CONTAINER_CLASS = \"dx-fileuploader-container\";\nvar FILEUPLOADER_CONTENT_CLASS = \"dx-fileuploader-content\";\nvar FILEUPLOADER_INPUT_WRAPPER_CLASS = \"dx-fileuploader-input-wrapper\";\nvar FILEUPLOADER_INPUT_CONTAINER_CLASS = \"dx-fileuploader-input-container\";\nvar FILEUPLOADER_INPUT_LABEL_CLASS = \"dx-fileuploader-input-label\";\nvar FILEUPLOADER_INPUT_CLASS = \"dx-fileuploader-input\";\nvar FILEUPLOADER_FILES_CONTAINER_CLASS = \"dx-fileuploader-files-container\";\nvar FILEUPLOADER_FILE_CONTAINER_CLASS = \"dx-fileuploader-file-container\";\nvar FILEUPLOADER_FILE_INFO_CLASS = \"dx-fileuploader-file-info\";\nvar FILEUPLOADER_FILE_STATUS_MESSAGE_CLASS = \"dx-fileuploader-file-status-message\";\nvar FILEUPLOADER_FILE_CLASS = \"dx-fileuploader-file\";\nvar FILEUPLOADER_FILE_NAME_CLASS = \"dx-fileuploader-file-name\";\nvar FILEUPLOADER_FILE_SIZE_CLASS = \"dx-fileuploader-file-size\";\nvar FILEUPLOADER_BUTTON_CLASS = \"dx-fileuploader-button\";\nvar FILEUPLOADER_BUTTON_CONTAINER_CLASS = \"dx-fileuploader-button-container\";\nvar FILEUPLOADER_CANCEL_BUTTON_CLASS = \"dx-fileuploader-cancel-button\";\nvar FILEUPLOADER_UPLOAD_BUTTON_CLASS = \"dx-fileuploader-upload-button\";\nvar FILEUPLOADER_INVALID_CLASS = \"dx-fileuploader-invalid\";\nvar FILEUPLOADER_AFTER_LOAD_DELAY = 400;\nvar FILEUPLOADER_CHUNK_META_DATA_NAME = \"chunkMetadata\";\n\nvar renderFileUploaderInput = function renderFileUploaderInput() {\n  return $(\"<input>\").attr(\"type\", \"file\");\n};\n\nvar isFormDataSupported = function isFormDataSupported() {\n  return !!window.FormData;\n};\n\nvar FileUploader = /*#__PURE__*/function (_Editor) {\n  _inherits(FileUploader, _Editor);\n\n  var _super = _createSuper(FileUploader);\n\n  function FileUploader() {\n    _classCallCheck(this, FileUploader);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FileUploader, [{\n    key: \"_supportedKeys\",\n    value: function _supportedKeys() {\n      var _this = this;\n\n      var click = function click(e) {\n        e.preventDefault();\n\n        var $selectButton = _this._selectButton.$element();\n\n        eventsEngine.trigger($selectButton, clickEventName);\n      };\n\n      return extend(_get(_getPrototypeOf(FileUploader.prototype), \"_supportedKeys\", this).call(this), {\n        space: click,\n        enter: click\n      });\n    }\n  }, {\n    key: \"_setOptionsByReference\",\n    value: function _setOptionsByReference() {\n      _get(_getPrototypeOf(FileUploader.prototype), \"_setOptionsByReference\", this).call(this);\n\n      extend(this._optionsByReference, {\n        value: true\n      });\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function _getDefaultOptions() {\n      return extend(_get(_getPrototypeOf(FileUploader.prototype), \"_getDefaultOptions\", this).call(this), {\n        chunkSize: 0,\n        value: [],\n        selectButtonText: messageLocalization.format(\"dxFileUploader-selectFile\"),\n        uploadButtonText: messageLocalization.format(\"dxFileUploader-upload\"),\n        labelText: messageLocalization.format(\"dxFileUploader-dropFile\"),\n        name: \"files[]\",\n        multiple: false,\n        accept: \"\",\n        uploadUrl: \"/\",\n        allowCanceling: true,\n        showFileList: true,\n        progress: 0,\n        dialogTrigger: void 0,\n        dropZone: void 0,\n        readyToUploadMessage: messageLocalization.format(\"dxFileUploader-readyToUpload\"),\n        uploadedMessage: messageLocalization.format(\"dxFileUploader-uploaded\"),\n        uploadFailedMessage: messageLocalization.format(\"dxFileUploader-uploadFailedMessage\"),\n        uploadAbortedMessage: messageLocalization.format(\"dxFileUploader-uploadAbortedMessage\"),\n        uploadMode: \"instantly\",\n        uploadMethod: \"POST\",\n        uploadHeaders: {},\n        uploadCustomData: {},\n        onBeforeSend: null,\n        onUploadStarted: null,\n        onUploaded: null,\n        onFilesUploaded: null,\n        onProgress: null,\n        onUploadError: null,\n        onUploadAborted: null,\n        onDropZoneEnter: null,\n        onDropZoneLeave: null,\n        allowedFileExtensions: [],\n        maxFileSize: 0,\n        minFileSize: 0,\n        inputAttr: {},\n        invalidFileExtensionMessage: messageLocalization.format(\"dxFileUploader-invalidFileExtension\"),\n        invalidMaxFileSizeMessage: messageLocalization.format(\"dxFileUploader-invalidMaxFileSize\"),\n        invalidMinFileSizeMessage: messageLocalization.format(\"dxFileUploader-invalidMinFileSize\"),\n        extendSelection: true,\n        validationMessageMode: \"always\",\n        uploadFile: null,\n        uploadChunk: null,\n        abortUpload: null,\n        validationMessageOffset: {\n          h: 0,\n          v: 0\n        },\n        hoverStateEnabled: true,\n        useNativeInputClick: false,\n        useDragOver: true,\n        nativeDropSupported: true,\n        _uploadButtonType: \"normal\"\n      });\n    }\n  }, {\n    key: \"_defaultOptionsRules\",\n    value: function _defaultOptionsRules() {\n      return _get(_getPrototypeOf(FileUploader.prototype), \"_defaultOptionsRules\", this).call(this).concat([{\n        device: function device() {\n          return \"desktop\" === devices.real().deviceType && !devices.isSimulator();\n        },\n        options: {\n          focusStateEnabled: true\n        }\n      }, {\n        device: [{\n          platform: \"android\"\n        }],\n        options: {\n          validationMessageOffset: {\n            v: 0\n          }\n        }\n      }, {\n        device: function device() {\n          return \"desktop\" !== devices.real().deviceType;\n        },\n        options: {\n          useDragOver: false\n        }\n      }, {\n        device: function device() {\n          return !isFormDataSupported();\n        },\n        options: {\n          uploadMode: \"useForm\"\n        }\n      }, {\n        device: function device() {\n          return \"desktop\" !== devices.real().deviceType;\n        },\n        options: {\n          nativeDropSupported: false\n        }\n      }, {\n        device: function device() {\n          return isMaterial();\n        },\n        options: {\n          _uploadButtonType: \"default\"\n        }\n      }]);\n    }\n  }, {\n    key: \"_initOptions\",\n    value: function _initOptions(options) {\n      var isLabelTextDefined = (\"labelText\" in options);\n\n      _get(_getPrototypeOf(FileUploader.prototype), \"_initOptions\", this).call(this, options);\n\n      if (!isLabelTextDefined && !this._shouldDragOverBeRendered()) {\n        this.option(\"labelText\", \"\");\n      }\n    }\n  }, {\n    key: \"_init\",\n    value: function _init() {\n      _get(_getPrototypeOf(FileUploader.prototype), \"_init\", this).call(this);\n\n      this._initFileInput();\n\n      this._initLabel();\n\n      this._setUploadStrategy();\n\n      this._createFiles();\n\n      this._createBeforeSendAction();\n\n      this._createUploadStartedAction();\n\n      this._createUploadedAction();\n\n      this._createFilesUploadedAction();\n\n      this._createProgressAction();\n\n      this._createUploadErrorAction();\n\n      this._createUploadAbortedAction();\n\n      this._createDropZoneEnterAction();\n\n      this._createDropZoneLeaveAction();\n    }\n  }, {\n    key: \"_setUploadStrategy\",\n    value: function _setUploadStrategy() {\n      var strategy = null;\n\n      if (this.option(\"chunkSize\") > 0) {\n        var uploadChunk = this.option(\"uploadChunk\");\n        strategy = uploadChunk && isFunction(uploadChunk) ? new CustomChunksFileUploadStrategy(this) : new DefaultChunksFileUploadStrategy(this);\n      } else {\n        var uploadFile = this.option(\"uploadFile\");\n        strategy = uploadFile && isFunction(uploadFile) ? new CustomWholeFileUploadStrategy(this) : new DefaultWholeFileUploadStrategy(this);\n      }\n\n      this._uploadStrategy = strategy;\n    }\n  }, {\n    key: \"_initFileInput\",\n    value: function _initFileInput() {\n      var _this2 = this;\n\n      this._isCustomClickEvent = false;\n\n      if (!this._$fileInput) {\n        this._$fileInput = renderFileUploaderInput();\n        eventsEngine.on(this._$fileInput, \"change\", this._inputChangeHandler.bind(this));\n        eventsEngine.on(this._$fileInput, \"click\", function (e) {\n          e.stopPropagation();\n\n          _this2._resetInputValue();\n\n          return _this2.option(\"useNativeInputClick\") || _this2._isCustomClickEvent;\n        });\n      }\n\n      this._$fileInput.prop({\n        multiple: this.option(\"multiple\"),\n        accept: this.option(\"accept\"),\n        tabIndex: -1\n      });\n    }\n  }, {\n    key: \"_inputChangeHandler\",\n    value: function _inputChangeHandler() {\n      if (this._doPreventInputChange) {\n        return;\n      }\n\n      var fileName = this._$fileInput.val().replace(/^.*\\\\/, \"\");\n\n      var files = this._$fileInput.prop(\"files\");\n\n      if (files && !files.length && \"useForm\" !== this.option(\"uploadMode\")) {\n        return;\n      }\n\n      var value = files ? this._getFiles(files) : [{\n        name: fileName\n      }];\n\n      this._changeValue(value);\n\n      if (\"instantly\" === this.option(\"uploadMode\")) {\n        this._uploadFiles();\n      }\n    }\n  }, {\n    key: \"_shouldFileListBeExtended\",\n    value: function _shouldFileListBeExtended() {\n      return \"useForm\" !== this.option(\"uploadMode\") && this.option(\"extendSelection\") && this.option(\"multiple\");\n    }\n  }, {\n    key: \"_changeValue\",\n    value: function _changeValue(value) {\n      var files = this._shouldFileListBeExtended() ? this.option(\"value\").slice() : [];\n      this.option(\"value\", files.concat(value));\n    }\n  }, {\n    key: \"_getFiles\",\n    value: function _getFiles(fileList) {\n      var values = [];\n      each(fileList, function (_, value) {\n        return values.push(value);\n      });\n      return values;\n    }\n  }, {\n    key: \"_getFile\",\n    value: function _getFile(fileData) {\n      var targetFileValue = isNumeric(fileData) ? this.option(\"value\")[fileData] : fileData;\n      return this._files.filter(function (file) {\n        return file.value === targetFileValue;\n      })[0];\n    }\n  }, {\n    key: \"_initLabel\",\n    value: function _initLabel() {\n      if (!this._$inputLabel) {\n        this._$inputLabel = $(\"<div>\");\n      }\n\n      this._updateInputLabelText();\n    }\n  }, {\n    key: \"_updateInputLabelText\",\n    value: function _updateInputLabelText() {\n      var correctedValue = this._isInteractionDisabled() ? \"\" : this.option(\"labelText\");\n\n      this._$inputLabel.text(correctedValue);\n    }\n  }, {\n    key: \"_focusTarget\",\n    value: function _focusTarget() {\n      return this.$element().find(\".\" + FILEUPLOADER_BUTTON_CLASS);\n    }\n  }, {\n    key: \"_getSubmitElement\",\n    value: function _getSubmitElement() {\n      return this._$fileInput;\n    }\n  }, {\n    key: \"_initMarkup\",\n    value: function _initMarkup() {\n      _get(_getPrototypeOf(FileUploader.prototype), \"_initMarkup\", this).call(this);\n\n      this.$element().addClass(FILEUPLOADER_CLASS);\n\n      this._renderWrapper();\n\n      this._renderInputWrapper();\n\n      this._renderSelectButton();\n\n      this._renderInputContainer();\n\n      this._renderUploadButton();\n\n      this._preventRecreatingFiles = true;\n      this._activeDropZone = null;\n    }\n  }, {\n    key: \"_render\",\n    value: function _render() {\n      this._preventRecreatingFiles = false;\n\n      this._attachDragEventHandlers(this._$inputWrapper);\n\n      this._attachDragEventHandlers(this.option(\"dropZone\"));\n\n      this._renderFiles();\n\n      _get(_getPrototypeOf(FileUploader.prototype), \"_render\", this).call(this);\n    }\n  }, {\n    key: \"_createFileProgressBar\",\n    value: function _createFileProgressBar(file) {\n      file.progressBar = this._createProgressBar(file.value.size);\n      file.progressBar.$element().appendTo(file.$file);\n\n      this._initStatusMessage(file);\n\n      this._ensureCancelButtonInitialized(file);\n    }\n  }, {\n    key: \"_setStatusMessage\",\n    value: function _setStatusMessage(file, message) {\n      var _this3 = this;\n\n      setTimeout(function () {\n        if (_this3.option(\"showFileList\")) {\n          if (file.$statusMessage) {\n            file.$statusMessage.text(message);\n            file.$statusMessage.css(\"display\", \"\");\n            file.progressBar.$element().remove();\n          }\n        }\n      }, FILEUPLOADER_AFTER_LOAD_DELAY);\n    }\n  }, {\n    key: \"_getUploadAbortedStatusMessage\",\n    value: function _getUploadAbortedStatusMessage() {\n      return \"instantly\" === this.option(\"uploadMode\") ? this.option(\"uploadAbortedMessage\") : this.option(\"readyToUploadMessage\");\n    }\n  }, {\n    key: \"_createFiles\",\n    value: function _createFiles() {\n      var _this4 = this;\n\n      var value = this.option(\"value\");\n\n      if (this._files && (0 === value.length || !this._shouldFileListBeExtended())) {\n        this._preventFilesUploading(this._files);\n\n        this._files = null;\n      }\n\n      if (!this._files) {\n        this._files = [];\n      }\n\n      each(value.slice(this._files.length), function (_, value) {\n        var file = _this4._createFile(value);\n\n        _this4._validateFile(file);\n\n        _this4._files.push(file);\n      });\n    }\n  }, {\n    key: \"_preventFilesUploading\",\n    value: function _preventFilesUploading(files) {\n      var _this5 = this;\n\n      files.forEach(function (file) {\n        return _this5._uploadStrategy.abortUpload(file);\n      });\n    }\n  }, {\n    key: \"_validateFile\",\n    value: function _validateFile(file) {\n      file.isValidFileExtension = this._validateFileExtension(file);\n      file.isValidMinSize = this._validateMinFileSize(file);\n      file.isValidMaxSize = this._validateMaxFileSize(file);\n    }\n  }, {\n    key: \"_validateFileExtension\",\n    value: function _validateFileExtension(file) {\n      var allowedExtensions = this.option(\"allowedFileExtensions\");\n      var accept = this.option(\"accept\");\n\n      var allowedTypes = this._getAllowedFileTypes(accept);\n\n      var fileExtension = file.value.name.substring(file.value.name.lastIndexOf(\".\")).toLowerCase();\n\n      if (0 !== accept.length && !this._isFileTypeAllowed(file.value, allowedTypes)) {\n        return false;\n      }\n\n      if (0 === allowedExtensions.length) {\n        return true;\n      }\n\n      for (var i = 0; i < allowedExtensions.length; i++) {\n        if (fileExtension === allowedExtensions[i].toLowerCase()) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_validateMaxFileSize\",\n    value: function _validateMaxFileSize(file) {\n      var fileSize = file.value.size;\n      var maxFileSize = this.option(\"maxFileSize\");\n      return maxFileSize > 0 ? fileSize <= maxFileSize : true;\n    }\n  }, {\n    key: \"_validateMinFileSize\",\n    value: function _validateMinFileSize(file) {\n      var fileSize = file.value.size;\n      var minFileSize = this.option(\"minFileSize\");\n      return minFileSize > 0 ? fileSize >= minFileSize : true;\n    }\n  }, {\n    key: \"_createBeforeSendAction\",\n    value: function _createBeforeSendAction() {\n      this._beforeSendAction = this._createActionByOption(\"onBeforeSend\", {\n        excludeValidators: [\"readOnly\"]\n      });\n    }\n  }, {\n    key: \"_createUploadStartedAction\",\n    value: function _createUploadStartedAction() {\n      this._uploadStartedAction = this._createActionByOption(\"onUploadStarted\", {\n        excludeValidators: [\"readOnly\"]\n      });\n    }\n  }, {\n    key: \"_createUploadedAction\",\n    value: function _createUploadedAction() {\n      this._uploadedAction = this._createActionByOption(\"onUploaded\", {\n        excludeValidators: [\"readOnly\"]\n      });\n    }\n  }, {\n    key: \"_createFilesUploadedAction\",\n    value: function _createFilesUploadedAction() {\n      this._filesUploadedAction = this._createActionByOption(\"onFilesUploaded\", {\n        excludeValidators: [\"readOnly\"]\n      });\n    }\n  }, {\n    key: \"_createProgressAction\",\n    value: function _createProgressAction() {\n      this._progressAction = this._createActionByOption(\"onProgress\", {\n        excludeValidators: [\"readOnly\"]\n      });\n    }\n  }, {\n    key: \"_createUploadAbortedAction\",\n    value: function _createUploadAbortedAction() {\n      this._uploadAbortedAction = this._createActionByOption(\"onUploadAborted\", {\n        excludeValidators: [\"readOnly\"]\n      });\n    }\n  }, {\n    key: \"_createUploadErrorAction\",\n    value: function _createUploadErrorAction() {\n      this._uploadErrorAction = this._createActionByOption(\"onUploadError\", {\n        excludeValidators: [\"readOnly\"]\n      });\n    }\n  }, {\n    key: \"_createDropZoneEnterAction\",\n    value: function _createDropZoneEnterAction() {\n      this._dropZoneEnterAction = this._createActionByOption(\"onDropZoneEnter\");\n    }\n  }, {\n    key: \"_createDropZoneLeaveAction\",\n    value: function _createDropZoneLeaveAction() {\n      this._dropZoneLeaveAction = this._createActionByOption(\"onDropZoneLeave\");\n    }\n  }, {\n    key: \"_createFile\",\n    value: function _createFile(value) {\n      return {\n        value: value,\n        loadedSize: 0,\n        onProgress: Callbacks(),\n        onAbort: Callbacks(),\n        onLoad: Callbacks(),\n        onError: Callbacks(),\n        onLoadStart: Callbacks(),\n        isValidFileExtension: true,\n        isValidMaxSize: true,\n        isValidMinSize: true,\n        isValid: function isValid() {\n          return this.isValidFileExtension && this.isValidMaxSize && this.isValidMinSize;\n        },\n        isInitialized: false\n      };\n    }\n  }, {\n    key: \"_resetFileState\",\n    value: function _resetFileState(file) {\n      file.isAborted = false;\n      file.uploadStarted = false;\n      file.isStartLoad = false;\n      file.loadedSize = 0;\n      file.chunksData = void 0;\n      file.request = void 0;\n    }\n  }, {\n    key: \"_renderFiles\",\n    value: function _renderFiles() {\n      var _this6 = this;\n\n      var _this$_validationMess;\n\n      var value = this.option(\"value\");\n\n      if (!this._$filesContainer) {\n        this._$filesContainer = $(\"<div>\").addClass(FILEUPLOADER_FILES_CONTAINER_CLASS).appendTo(this._$content);\n      } else if (!this._shouldFileListBeExtended() || 0 === value.length) {\n        this._$filesContainer.empty();\n      }\n\n      var showFileList = this.option(\"showFileList\");\n\n      if (showFileList) {\n        each(this._files, function (_, file) {\n          if (!file.$file) {\n            _this6._renderFile(file);\n          }\n        });\n      }\n\n      this.$element().toggleClass(FILEUPLOADER_SHOW_FILE_LIST_CLASS, showFileList);\n\n      this._toggleFileUploaderEmptyClassName();\n\n      this._updateFileNameMaxWidth();\n\n      null === (_this$_validationMess = this._validationMessage) || void 0 === _this$_validationMess ? void 0 : _this$_validationMess.repaint();\n    }\n  }, {\n    key: \"_renderFile\",\n    value: function _renderFile(file) {\n      var value = file.value;\n      var $fileContainer = $(\"<div>\").addClass(FILEUPLOADER_FILE_CONTAINER_CLASS).appendTo(this._$filesContainer);\n\n      this._renderFileButtons(file, $fileContainer);\n\n      file.$file = $(\"<div>\").addClass(FILEUPLOADER_FILE_CLASS).appendTo($fileContainer);\n      var $fileInfo = $(\"<div>\").addClass(FILEUPLOADER_FILE_INFO_CLASS).appendTo(file.$file);\n      file.$statusMessage = $(\"<div>\").addClass(FILEUPLOADER_FILE_STATUS_MESSAGE_CLASS).appendTo(file.$file);\n      $(\"<div>\").addClass(FILEUPLOADER_FILE_NAME_CLASS).text(value.name).appendTo($fileInfo);\n\n      if (isDefined(value.size)) {\n        $(\"<div>\").addClass(FILEUPLOADER_FILE_SIZE_CLASS).text(this._getFileSize(value.size)).appendTo($fileInfo);\n      }\n\n      if (file.isValid()) {\n        file.$statusMessage.text(this.option(\"readyToUploadMessage\"));\n      } else {\n        if (!file.isValidFileExtension) {\n          file.$statusMessage.append(this._createValidationElement(\"invalidFileExtensionMessage\"));\n        }\n\n        if (!file.isValidMaxSize) {\n          file.$statusMessage.append(this._createValidationElement(\"invalidMaxFileSizeMessage\"));\n        }\n\n        if (!file.isValidMinSize) {\n          file.$statusMessage.append(this._createValidationElement(\"invalidMinFileSizeMessage\"));\n        }\n\n        $fileContainer.addClass(FILEUPLOADER_INVALID_CLASS);\n      }\n    }\n  }, {\n    key: \"_createValidationElement\",\n    value: function _createValidationElement(key) {\n      return $(\"<span>\").text(this.option(key));\n    }\n  }, {\n    key: \"_updateFileNameMaxWidth\",\n    value: function _updateFileNameMaxWidth() {\n      var cancelButtonsCount = this.option(\"allowCanceling\") && \"useForm\" !== this.option(\"uploadMode\") ? 1 : 0;\n      var uploadButtonsCount = \"useButtons\" === this.option(\"uploadMode\") ? 1 : 0;\n      var filesContainerWidth = getWidth(this._$filesContainer.find(\".\" + FILEUPLOADER_FILE_CONTAINER_CLASS).first()) || getWidth(this._$filesContainer);\n\n      var $buttonContainer = this._$filesContainer.find(\".\" + FILEUPLOADER_BUTTON_CONTAINER_CLASS).eq(0);\n\n      var buttonsWidth = getWidth($buttonContainer) * (cancelButtonsCount + uploadButtonsCount);\n\n      var $fileSize = this._$filesContainer.find(\".\" + FILEUPLOADER_FILE_SIZE_CLASS).eq(0);\n\n      var prevFileSize = $fileSize.text();\n      $fileSize.text(\"1000 Mb\");\n      var fileSizeWidth = getWidth($fileSize);\n      $fileSize.text(prevFileSize);\n\n      this._$filesContainer.find(\".\" + FILEUPLOADER_FILE_NAME_CLASS).css(\"maxWidth\", filesContainerWidth - buttonsWidth - fileSizeWidth);\n    }\n  }, {\n    key: \"_renderFileButtons\",\n    value: function _renderFileButtons(file, $container) {\n      var $cancelButton = this._getCancelButton(file);\n\n      $cancelButton && $container.append($cancelButton);\n\n      var $uploadButton = this._getUploadButton(file);\n\n      $uploadButton && $container.append($uploadButton);\n    }\n  }, {\n    key: \"_getCancelButton\",\n    value: function _getCancelButton(file) {\n      var _this7 = this;\n\n      if (\"useForm\" === this.option(\"uploadMode\")) {\n        return null;\n      }\n\n      file.cancelButton = this._createComponent($(\"<div>\").addClass(FILEUPLOADER_BUTTON_CLASS + \" \" + FILEUPLOADER_CANCEL_BUTTON_CLASS), Button, {\n        onClick: function onClick() {\n          return _this7._removeFile(file);\n        },\n        icon: \"close\",\n        visible: this.option(\"allowCanceling\"),\n        disabled: this.option(\"readOnly\"),\n        integrationOptions: {},\n        hoverStateEnabled: this.option(\"hoverStateEnabled\")\n      });\n      return $(\"<div>\").addClass(FILEUPLOADER_BUTTON_CONTAINER_CLASS).append(file.cancelButton.$element());\n    }\n  }, {\n    key: \"_getUploadButton\",\n    value: function _getUploadButton(file) {\n      var _this8 = this;\n\n      if (!file.isValid() || \"useButtons\" !== this.option(\"uploadMode\")) {\n        return null;\n      }\n\n      file.uploadButton = this._createComponent($(\"<div>\").addClass(FILEUPLOADER_BUTTON_CLASS + \" \" + FILEUPLOADER_UPLOAD_BUTTON_CLASS), Button, {\n        onClick: function onClick() {\n          return _this8._uploadFile(file);\n        },\n        icon: \"upload\",\n        hoverStateEnabled: this.option(\"hoverStateEnabled\")\n      });\n      file.onLoadStart.add(function () {\n        return file.uploadButton.option({\n          visible: false,\n          disabled: true\n        });\n      });\n      file.onAbort.add(function () {\n        return file.uploadButton.option({\n          visible: true,\n          disabled: false\n        });\n      });\n      return $(\"<div>\").addClass(FILEUPLOADER_BUTTON_CONTAINER_CLASS).append(file.uploadButton.$element());\n    }\n  }, {\n    key: \"_removeFile\",\n    value: function _removeFile(file) {\n      var _file$$file;\n\n      null === (_file$$file = file.$file) || void 0 === _file$$file ? void 0 : _file$$file.parent().remove();\n\n      this._files.splice(inArray(file, this._files), 1);\n\n      var value = this.option(\"value\").slice();\n      value.splice(inArray(file.value, value), 1);\n      this._preventRecreatingFiles = true;\n      this.option(\"value\", value);\n      this._preventRecreatingFiles = false;\n\n      this._toggleFileUploaderEmptyClassName();\n\n      this._resetInputValue(true);\n    }\n  }, {\n    key: \"removeFile\",\n    value: function removeFile(fileData) {\n      if (\"useForm\" === this.option(\"uploadMode\") || !isDefined(fileData)) {\n        return;\n      }\n\n      var file = this._getFile(fileData);\n\n      if (file) {\n        if (file.uploadStarted) {\n          this._preventFilesUploading([file]);\n        }\n\n        this._removeFile(file);\n      }\n    }\n  }, {\n    key: \"_toggleFileUploaderEmptyClassName\",\n    value: function _toggleFileUploaderEmptyClassName() {\n      this.$element().toggleClass(FILEUPLOADER_EMPTY_CLASS, !this._files.length || this._hasInvalidFile(this._files));\n    }\n  }, {\n    key: \"_hasInvalidFile\",\n    value: function _hasInvalidFile(files) {\n      for (var i = 0; i < files.length; i++) {\n        if (!files[i].isValid()) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_getFileSize\",\n    value: function _getFileSize(size) {\n      var i = 0;\n      var labels = [messageLocalization.format(\"dxFileUploader-bytes\"), messageLocalization.format(\"dxFileUploader-kb\"), messageLocalization.format(\"dxFileUploader-Mb\"), messageLocalization.format(\"dxFileUploader-Gb\")];\n      var count = labels.length - 1;\n\n      while (i < count && size >= 1024) {\n        size /= 1024;\n        i++;\n      }\n\n      return Math.round(size) + \" \" + labels[i];\n    }\n  }, {\n    key: \"_renderSelectButton\",\n    value: function _renderSelectButton() {\n      var $button = $(\"<div>\").addClass(FILEUPLOADER_BUTTON_CLASS).appendTo(this._$inputWrapper);\n      this._selectButton = this._createComponent($button, Button, {\n        text: this.option(\"selectButtonText\"),\n        focusStateEnabled: false,\n        integrationOptions: {},\n        disabled: this.option(\"readOnly\"),\n        hoverStateEnabled: this.option(\"hoverStateEnabled\")\n      });\n      this._selectFileDialogHandler = this._selectButtonClickHandler.bind(this);\n\n      if (\"desktop\" === devices.real().deviceType) {\n        this._selectButton.option(\"onClick\", this._selectFileDialogHandler);\n      } else {\n        this._attachSelectFileDialogHandler(this._selectButton.$element());\n      }\n\n      this._attachSelectFileDialogHandler(this.option(\"dialogTrigger\"));\n    }\n  }, {\n    key: \"_selectButtonClickHandler\",\n    value: function _selectButtonClickHandler() {\n      if (this.option(\"useNativeInputClick\")) {\n        return;\n      }\n\n      if (this._isInteractionDisabled()) {\n        return false;\n      }\n\n      this._isCustomClickEvent = true;\n      eventsEngine.trigger(this._$fileInput, \"click\");\n      this._isCustomClickEvent = false;\n    }\n  }, {\n    key: \"_attachSelectFileDialogHandler\",\n    value: function _attachSelectFileDialogHandler(target) {\n      if (!isDefined(target)) {\n        return;\n      }\n\n      this._detachSelectFileDialogHandler(target);\n\n      eventsEngine.on($(target), \"click\", this._selectFileDialogHandler);\n    }\n  }, {\n    key: \"_detachSelectFileDialogHandler\",\n    value: function _detachSelectFileDialogHandler(target) {\n      if (!isDefined(target)) {\n        return;\n      }\n\n      eventsEngine.off($(target), \"click\", this._selectFileDialogHandler);\n    }\n  }, {\n    key: \"_renderUploadButton\",\n    value: function _renderUploadButton() {\n      if (\"useButtons\" !== this.option(\"uploadMode\")) {\n        return;\n      }\n\n      var $uploadButton = $(\"<div>\").addClass(FILEUPLOADER_BUTTON_CLASS).addClass(FILEUPLOADER_UPLOAD_BUTTON_CLASS).appendTo(this._$content);\n      this._uploadButton = this._createComponent($uploadButton, Button, {\n        text: this.option(\"uploadButtonText\"),\n        onClick: this._uploadButtonClickHandler.bind(this),\n        type: this.option(\"_uploadButtonType\"),\n        integrationOptions: {},\n        hoverStateEnabled: this.option(\"hoverStateEnabled\")\n      });\n    }\n  }, {\n    key: \"_uploadButtonClickHandler\",\n    value: function _uploadButtonClickHandler() {\n      this._uploadFiles();\n    }\n  }, {\n    key: \"_shouldDragOverBeRendered\",\n    value: function _shouldDragOverBeRendered() {\n      return !this.option(\"readOnly\") && (\"useForm\" !== this.option(\"uploadMode\") || this.option(\"nativeDropSupported\"));\n    }\n  }, {\n    key: \"_isInteractionDisabled\",\n    value: function _isInteractionDisabled() {\n      return this.option(\"readOnly\") || this.option(\"disabled\");\n    }\n  }, {\n    key: \"_renderInputContainer\",\n    value: function _renderInputContainer() {\n      this._$inputContainer = $(\"<div>\").addClass(FILEUPLOADER_INPUT_CONTAINER_CLASS).appendTo(this._$inputWrapper);\n\n      this._$fileInput.addClass(FILEUPLOADER_INPUT_CLASS);\n\n      this._renderInput();\n\n      var labelId = \"dx-fileuploader-input-label-\".concat(new Guid());\n\n      this._$inputLabel.attr(\"id\", labelId).addClass(FILEUPLOADER_INPUT_LABEL_CLASS).appendTo(this._$inputContainer);\n\n      this.setAria(\"labelledby\", labelId, this._$fileInput);\n    }\n  }, {\n    key: \"_renderInput\",\n    value: function _renderInput() {\n      if (this.option(\"useNativeInputClick\")) {\n        this._selectButton.option(\"template\", this._selectButtonInputTemplate.bind(this));\n      } else {\n        this._$fileInput.appendTo(this._$inputContainer);\n\n        this._selectButton.option(\"template\", \"content\");\n      }\n\n      this._applyInputAttributes(this.option(\"inputAttr\"));\n    }\n  }, {\n    key: \"_selectButtonInputTemplate\",\n    value: function _selectButtonInputTemplate(data, content) {\n      var $content = $(content);\n      var $text = $(\"<span>\").addClass(\"dx-button-text\").text(data.text);\n      $content.append($text).append(this._$fileInput);\n      return $content;\n    }\n  }, {\n    key: \"_renderInputWrapper\",\n    value: function _renderInputWrapper() {\n      this._$inputWrapper = $(\"<div>\").addClass(FILEUPLOADER_INPUT_WRAPPER_CLASS).appendTo(this._$content);\n    }\n  }, {\n    key: \"_detachDragEventHandlers\",\n    value: function _detachDragEventHandlers(target) {\n      if (!isDefined(target)) {\n        return;\n      }\n\n      eventsEngine.off($(target), addNamespace(\"\", this.NAME));\n    }\n  }, {\n    key: \"_attachDragEventHandlers\",\n    value: function _attachDragEventHandlers(target) {\n      var isCustomTarget = target !== this._$inputWrapper;\n\n      if (!isDefined(target) || !this._shouldDragOverBeRendered()) {\n        return;\n      }\n\n      this._detachDragEventHandlers(target);\n\n      target = $(target);\n      eventsEngine.on(target, addNamespace(\"dragenter\", this.NAME), this._dragEnterHandler.bind(this, isCustomTarget));\n      eventsEngine.on(target, addNamespace(\"dragover\", this.NAME), this._dragOverHandler.bind(this, isCustomTarget));\n      eventsEngine.on(target, addNamespace(\"dragleave\", this.NAME), this._dragLeaveHandler.bind(this, isCustomTarget));\n      eventsEngine.on(target, addNamespace(\"drop\", this.NAME), this._dropHandler.bind(this, isCustomTarget));\n    }\n  }, {\n    key: \"_applyInputAttributes\",\n    value: function _applyInputAttributes(customAttributes) {\n      this._$fileInput.attr(customAttributes);\n    }\n  }, {\n    key: \"_useInputForDrop\",\n    value: function _useInputForDrop() {\n      return this.option(\"nativeDropSupported\") && \"useForm\" === this.option(\"uploadMode\");\n    }\n  }, {\n    key: \"_getDropZoneElement\",\n    value: function _getDropZoneElement(isCustomTarget, e) {\n      var targetList = isCustomTarget ? Array.from($(this.option(\"dropZone\"))) : [this._$inputWrapper];\n      targetList = targetList.map(function (element) {\n        return $(element).get(0);\n      });\n      return targetList[targetList.indexOf(e.currentTarget)];\n    }\n  }, {\n    key: \"_dragEnterHandler\",\n    value: function _dragEnterHandler(isCustomTarget, e) {\n      if (this.option(\"disabled\")) {\n        return false;\n      }\n\n      if (!this._useInputForDrop()) {\n        e.preventDefault();\n      }\n\n      var dropZoneElement = this._getDropZoneElement(isCustomTarget, e);\n\n      if (isDefined(dropZoneElement) && null === this._activeDropZone && this.isMouseOverElement(e, dropZoneElement, false)) {\n        this._activeDropZone = dropZoneElement;\n\n        this._tryToggleDropZoneActive(true, isCustomTarget, e);\n      }\n    }\n  }, {\n    key: \"_dragOverHandler\",\n    value: function _dragOverHandler(isCustomTarget, e) {\n      if (!this._useInputForDrop()) {\n        e.preventDefault();\n      }\n\n      e.originalEvent.dataTransfer.dropEffect = \"copy\";\n\n      if (!isCustomTarget) {\n        var dropZoneElement = this._getDropZoneElement(false, e);\n\n        if (null === this._activeDropZone && this.isMouseOverElement(e, dropZoneElement, false)) {\n          this._dragEnterHandler(false, e);\n        }\n\n        if (null !== this._activeDropZone && this._shouldRaiseDragLeave(e, false)) {\n          this._dragLeaveHandler(false, e);\n        }\n      }\n    }\n  }, {\n    key: \"_dragLeaveHandler\",\n    value: function _dragLeaveHandler(isCustomTarget, e) {\n      if (!this._useInputForDrop()) {\n        e.preventDefault();\n      }\n\n      if (null === this._activeDropZone) {\n        return;\n      }\n\n      if (this._shouldRaiseDragLeave(e, isCustomTarget)) {\n        this._tryToggleDropZoneActive(false, isCustomTarget, e);\n\n        this._activeDropZone = null;\n      }\n    }\n  }, {\n    key: \"_shouldRaiseDragLeave\",\n    value: function _shouldRaiseDragLeave(e, isCustomTarget) {\n      return !this.isMouseOverElement(e, this._activeDropZone, !isCustomTarget);\n    }\n  }, {\n    key: \"_tryToggleDropZoneActive\",\n    value: function _tryToggleDropZoneActive(active, isCustom, event) {\n      var classAction = active ? \"addClass\" : \"removeClass\";\n      var mouseAction = active ? \"_dropZoneEnterAction\" : \"_dropZoneLeaveAction\";\n      this[mouseAction]({\n        event: event,\n        dropZoneElement: this._activeDropZone\n      });\n\n      if (!isCustom) {\n        this.$element()[classAction](FILEUPLOADER_DRAGOVER_CLASS);\n      }\n    }\n  }, {\n    key: \"_dropHandler\",\n    value: function _dropHandler(isCustomTarget, e) {\n      this._activeDropZone = null;\n\n      if (!isCustomTarget) {\n        this.$element().removeClass(FILEUPLOADER_DRAGOVER_CLASS);\n      }\n\n      if (this._useInputForDrop() || isCustomTarget && this._isInteractionDisabled()) {\n        return;\n      }\n\n      e.preventDefault();\n      var fileList = e.originalEvent.dataTransfer.files;\n\n      var files = this._getFiles(fileList);\n\n      if (!this.option(\"multiple\") && files.length > 1) {\n        return;\n      }\n\n      this._changeValue(files);\n\n      if (\"instantly\" === this.option(\"uploadMode\")) {\n        this._uploadFiles();\n      }\n    }\n  }, {\n    key: \"_handleAllFilesUploaded\",\n    value: function _handleAllFilesUploaded() {\n      var areAllFilesLoaded = this._files.every(function (file) {\n        return !file.isValid() || file._isError || file._isLoaded || file.isAborted;\n      });\n\n      if (areAllFilesLoaded) {\n        this._filesUploadedAction();\n      }\n    }\n  }, {\n    key: \"_getAllowedFileTypes\",\n    value: function _getAllowedFileTypes(acceptSting) {\n      if (!acceptSting.length) {\n        return [];\n      }\n\n      return acceptSting.split(\",\").map(function (item) {\n        return item.trim();\n      });\n    }\n  }, {\n    key: \"_isFileTypeAllowed\",\n    value: function _isFileTypeAllowed(file, allowedTypes) {\n      for (var i = 0, n = allowedTypes.length; i < n; i++) {\n        var allowedType = allowedTypes[i];\n\n        if (\".\" === allowedType[0]) {\n          allowedType = allowedType.replace(\".\", \"\\\\.\");\n\n          if (file.name.match(new RegExp(allowedType + \"$\", \"i\"))) {\n            return true;\n          }\n        } else {\n          allowedType = allowedType.replace(new RegExp(\"\\\\*\", \"g\"), \"\");\n\n          if (file.type.match(new RegExp(allowedType, \"i\"))) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_renderWrapper\",\n    value: function _renderWrapper() {\n      var $wrapper = $(\"<div>\").addClass(FILEUPLOADER_WRAPPER_CLASS).appendTo(this.$element());\n      var $container = $(\"<div>\").addClass(FILEUPLOADER_CONTAINER_CLASS).appendTo($wrapper);\n      this._$content = $(\"<div>\").addClass(FILEUPLOADER_CONTENT_CLASS).appendTo($container);\n    }\n  }, {\n    key: \"_clean\",\n    value: function _clean() {\n      this._$fileInput.detach();\n\n      delete this._$filesContainer;\n\n      this._detachSelectFileDialogHandler(this.option(\"dialogTrigger\"));\n\n      this._detachDragEventHandlers(this.option(\"dropZone\"));\n\n      if (this._files) {\n        this._files.forEach(function (file) {\n          file.$file = null;\n          file.$statusMessage = null;\n        });\n      }\n\n      _get(_getPrototypeOf(FileUploader.prototype), \"_clean\", this).call(this);\n    }\n  }, {\n    key: \"abortUpload\",\n    value: function abortUpload(fileData) {\n      if (\"useForm\" === this.option(\"uploadMode\")) {\n        return;\n      }\n\n      if (isDefined(fileData)) {\n        var file = this._getFile(fileData);\n\n        if (file) {\n          this._preventFilesUploading([file]);\n        }\n      } else {\n        this._preventFilesUploading(this._files);\n      }\n    }\n  }, {\n    key: \"upload\",\n    value: function upload(fileData) {\n      if (\"useForm\" === this.option(\"uploadMode\")) {\n        return;\n      }\n\n      if (isDefined(fileData)) {\n        var file = this._getFile(fileData);\n\n        if (file && isFormDataSupported()) {\n          this._uploadFile(file);\n        }\n      } else {\n        this._uploadFiles();\n      }\n    }\n  }, {\n    key: \"_uploadFiles\",\n    value: function _uploadFiles() {\n      var _this9 = this;\n\n      if (isFormDataSupported()) {\n        each(this._files, function (_, file) {\n          return _this9._uploadFile(file);\n        });\n      }\n    }\n  }, {\n    key: \"_uploadFile\",\n    value: function _uploadFile(file) {\n      this._uploadStrategy.upload(file);\n    }\n  }, {\n    key: \"_updateProgressBar\",\n    value: function _updateProgressBar(file, loadedFileData) {\n      file.progressBar && file.progressBar.option({\n        value: loadedFileData.loaded,\n        showStatus: true\n      });\n\n      this._progressAction({\n        file: file.value,\n        segmentSize: loadedFileData.currentSegmentSize,\n        bytesLoaded: loadedFileData.loaded,\n        bytesTotal: loadedFileData.total,\n        event: loadedFileData.event,\n        request: file.request\n      });\n    }\n  }, {\n    key: \"_updateTotalProgress\",\n    value: function _updateTotalProgress(totalFilesSize, totalLoadedFilesSize) {\n      var progress = totalFilesSize ? this._getProgressValue(totalLoadedFilesSize / totalFilesSize) : 0;\n      this.option(\"progress\", progress);\n\n      this._setLoadedSize(totalLoadedFilesSize);\n    }\n  }, {\n    key: \"_getProgressValue\",\n    value: function _getProgressValue(ratio) {\n      return Math.floor(100 * ratio);\n    }\n  }, {\n    key: \"_initStatusMessage\",\n    value: function _initStatusMessage(file) {\n      file.$statusMessage.css(\"display\", \"none\");\n    }\n  }, {\n    key: \"_ensureCancelButtonInitialized\",\n    value: function _ensureCancelButtonInitialized(file) {\n      var _this10 = this;\n\n      if (file.isInitialized) {\n        return;\n      }\n\n      file.cancelButton.option(\"onClick\", function () {\n        _this10._preventFilesUploading([file]);\n\n        _this10._removeFile(file);\n      });\n\n      var hideCancelButton = function hideCancelButton() {\n        setTimeout(function () {\n          file.cancelButton.option({\n            visible: false\n          });\n        }, FILEUPLOADER_AFTER_LOAD_DELAY);\n      };\n\n      file.onLoad.add(hideCancelButton);\n      file.onError.add(hideCancelButton);\n    }\n  }, {\n    key: \"_createProgressBar\",\n    value: function _createProgressBar(fileSize) {\n      var _this11 = this;\n\n      return this._createComponent($(\"<div>\"), ProgressBar, {\n        value: void 0,\n        min: 0,\n        max: fileSize,\n        statusFormat: function statusFormat(ratio) {\n          return _this11._getProgressValue(ratio) + \"%\";\n        },\n        showStatus: false,\n        statusPosition: \"right\"\n      });\n    }\n  }, {\n    key: \"_getTotalFilesSize\",\n    value: function _getTotalFilesSize() {\n      var _this12 = this;\n\n      if (!this._totalFilesSize) {\n        this._totalFilesSize = 0;\n        each(this._files, function (_, file) {\n          _this12._totalFilesSize += file.value.size;\n        });\n      }\n\n      return this._totalFilesSize;\n    }\n  }, {\n    key: \"_getTotalLoadedFilesSize\",\n    value: function _getTotalLoadedFilesSize() {\n      var _this13 = this;\n\n      if (!this._totalLoadedFilesSize) {\n        this._totalLoadedFilesSize = 0;\n        each(this._files, function (_, file) {\n          _this13._totalLoadedFilesSize += file.loadedSize;\n        });\n      }\n\n      return this._totalLoadedFilesSize;\n    }\n  }, {\n    key: \"_setLoadedSize\",\n    value: function _setLoadedSize(value) {\n      this._totalLoadedFilesSize = value;\n    }\n  }, {\n    key: \"_recalculateProgress\",\n    value: function _recalculateProgress() {\n      this._totalFilesSize = 0;\n      this._totalLoadedFilesSize = 0;\n\n      this._updateTotalProgress(this._getTotalFilesSize(), this._getTotalLoadedFilesSize());\n    }\n  }, {\n    key: \"isMouseOverElement\",\n    value: function isMouseOverElement(mouseEvent, element, correctPseudoElements) {\n      if (!element) {\n        return false;\n      }\n\n      var beforeHeight = correctPseudoElements ? parseFloat(window.getComputedStyle(element, \":before\").height) : 0;\n      var afterHeight = correctPseudoElements ? parseFloat(window.getComputedStyle(element, \":after\").height) : 0;\n      var x = getOffset(element).left;\n      var y = getOffset(element).top + beforeHeight;\n      var w = element.offsetWidth;\n      var h = element.offsetHeight - beforeHeight - afterHeight;\n\n      var eventX = this._getEventX(mouseEvent);\n\n      var eventY = this._getEventY(mouseEvent);\n\n      return eventX >= x && eventX < x + w && eventY >= y && eventY < y + h;\n    }\n  }, {\n    key: \"_getEventX\",\n    value: function _getEventX(e) {\n      return isTouchEvent(e) ? this._getTouchEventX(e) : e.clientX + this._getDocumentScrollLeft();\n    }\n  }, {\n    key: \"_getEventY\",\n    value: function _getEventY(e) {\n      return isTouchEvent(e) ? this._getTouchEventY(e) : e.clientY + this._getDocumentScrollTop();\n    }\n  }, {\n    key: \"_getTouchEventX\",\n    value: function _getTouchEventX(e) {\n      var touchPoint = null;\n\n      if (e.changedTouches.length > 0) {\n        touchPoint = e.changedTouches;\n      } else if (e.targetTouches.length > 0) {\n        touchPoint = e.targetTouches;\n      }\n\n      return touchPoint ? touchPoint[0].pageX : 0;\n    }\n  }, {\n    key: \"_getTouchEventY\",\n    value: function _getTouchEventY(e) {\n      var touchPoint = null;\n\n      if (e.changedTouches.length > 0) {\n        touchPoint = e.changedTouches;\n      } else if (e.targetTouches.length > 0) {\n        touchPoint = e.targetTouches;\n      }\n\n      return touchPoint ? touchPoint[0].pageY : 0;\n    }\n  }, {\n    key: \"_getDocumentScrollTop\",\n    value: function _getDocumentScrollTop() {\n      var document = domAdapter.getDocument();\n      return document.documentElement.scrollTop || document.body.scrollTop;\n    }\n  }, {\n    key: \"_getDocumentScrollLeft\",\n    value: function _getDocumentScrollLeft() {\n      var document = domAdapter.getDocument();\n      return document.documentElement.scrollLeft || document.body.scrollLeft;\n    }\n  }, {\n    key: \"_updateReadOnlyState\",\n    value: function _updateReadOnlyState() {\n      var readOnly = this.option(\"readOnly\");\n\n      this._selectButton.option(\"disabled\", readOnly);\n\n      this._files.forEach(function (file) {\n        var _file$cancelButton;\n\n        return null === (_file$cancelButton = file.cancelButton) || void 0 === _file$cancelButton ? void 0 : _file$cancelButton.option(\"disabled\", readOnly);\n      });\n\n      this._updateInputLabelText();\n\n      this._attachDragEventHandlers(this._$inputWrapper);\n    }\n  }, {\n    key: \"_updateHoverState\",\n    value: function _updateHoverState() {\n      var _this$_selectButton, _this$_uploadButton;\n\n      var value = this.option(\"hoverStateEnabled\");\n      null === (_this$_selectButton = this._selectButton) || void 0 === _this$_selectButton ? void 0 : _this$_selectButton.option(\"hoverStateEnabled\", value);\n      null === (_this$_uploadButton = this._uploadButton) || void 0 === _this$_uploadButton ? void 0 : _this$_uploadButton.option(\"hoverStateEnabled\", value);\n\n      this._files.forEach(function (file) {\n        var _file$uploadButton, _file$cancelButton2;\n\n        null === (_file$uploadButton = file.uploadButton) || void 0 === _file$uploadButton ? void 0 : _file$uploadButton.option(\"hoverStateEnabled\", value);\n        null === (_file$cancelButton2 = file.cancelButton) || void 0 === _file$cancelButton2 ? void 0 : _file$cancelButton2.option(\"hoverStateEnabled\", value);\n      });\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function _optionChanged(args) {\n      var name = args.name,\n          value = args.value,\n          previousValue = args.previousValue;\n\n      switch (name) {\n        case \"height\":\n        case \"width\":\n          this._updateFileNameMaxWidth();\n\n          _get(_getPrototypeOf(FileUploader.prototype), \"_optionChanged\", this).call(this, args);\n\n          break;\n\n        case \"value\":\n          !value.length && this._$fileInput.val(\"\");\n\n          if (!this._preventRecreatingFiles) {\n            this._createFiles();\n\n            this._renderFiles();\n          }\n\n          this._recalculateProgress();\n\n          _get(_getPrototypeOf(FileUploader.prototype), \"_optionChanged\", this).call(this, args);\n\n          break;\n\n        case \"name\":\n          this._initFileInput();\n\n          _get(_getPrototypeOf(FileUploader.prototype), \"_optionChanged\", this).call(this, args);\n\n          break;\n\n        case \"accept\":\n          this._initFileInput();\n\n          break;\n\n        case \"multiple\":\n          this._initFileInput();\n\n          if (!args.value) {\n            this.reset();\n          }\n\n          break;\n\n        case \"readOnly\":\n          this._updateReadOnlyState();\n\n          _get(_getPrototypeOf(FileUploader.prototype), \"_optionChanged\", this).call(this, args);\n\n          break;\n\n        case \"selectButtonText\":\n          this._selectButton.option(\"text\", value);\n\n          break;\n\n        case \"uploadButtonText\":\n          this._uploadButton && this._uploadButton.option(\"text\", value);\n          break;\n\n        case \"_uploadButtonType\":\n          this._uploadButton && this._uploadButton.option(\"type\", value);\n          break;\n\n        case \"dialogTrigger\":\n          this._detachSelectFileDialogHandler(previousValue);\n\n          this._attachSelectFileDialogHandler(value);\n\n          break;\n\n        case \"dropZone\":\n          this._detachDragEventHandlers(previousValue);\n\n          this._attachDragEventHandlers(value);\n\n          break;\n\n        case \"maxFileSize\":\n        case \"minFileSize\":\n        case \"allowedFileExtensions\":\n        case \"invalidFileExtensionMessage\":\n        case \"invalidMaxFileSizeMessage\":\n        case \"invalidMinFileSizeMessage\":\n        case \"readyToUploadMessage\":\n        case \"uploadedMessage\":\n        case \"uploadFailedMessage\":\n        case \"uploadAbortedMessage\":\n          this._invalidate();\n\n          break;\n\n        case \"labelText\":\n          this._updateInputLabelText();\n\n          break;\n\n        case \"showFileList\":\n          if (!this._preventRecreatingFiles) {\n            this._renderFiles();\n          }\n\n          break;\n\n        case \"uploadFile\":\n        case \"uploadChunk\":\n        case \"chunkSize\":\n          this._setUploadStrategy();\n\n          break;\n\n        case \"abortUpload\":\n        case \"uploadUrl\":\n        case \"progress\":\n        case \"uploadMethod\":\n        case \"uploadHeaders\":\n        case \"uploadCustomData\":\n        case \"extendSelection\":\n          break;\n\n        case \"hoverStateEnabled\":\n          this._updateHoverState();\n\n          _get(_getPrototypeOf(FileUploader.prototype), \"_optionChanged\", this).call(this, args);\n\n          break;\n\n        case \"allowCanceling\":\n        case \"uploadMode\":\n          this.reset();\n\n          this._invalidate();\n\n          break;\n\n        case \"onBeforeSend\":\n          this._createBeforeSendAction();\n\n          break;\n\n        case \"onUploadStarted\":\n          this._createUploadStartedAction();\n\n          break;\n\n        case \"onUploaded\":\n          this._createUploadedAction();\n\n          break;\n\n        case \"onFilesUploaded\":\n          this._createFilesUploadedAction();\n\n          break;\n\n        case \"onProgress\":\n          this._createProgressAction();\n\n          break;\n\n        case \"onUploadError\":\n          this._createUploadErrorAction();\n\n          break;\n\n        case \"onUploadAborted\":\n          this._createUploadAbortedAction();\n\n          break;\n\n        case \"onDropZoneEnter\":\n          this._createDropZoneEnterAction();\n\n          break;\n\n        case \"onDropZoneLeave\":\n          this._createDropZoneLeaveAction();\n\n          break;\n\n        case \"useNativeInputClick\":\n          this._renderInput();\n\n          break;\n\n        case \"useDragOver\":\n          this._attachDragEventHandlers(this._$inputWrapper);\n\n          break;\n\n        case \"nativeDropSupported\":\n          this._invalidate();\n\n          break;\n\n        case \"inputAttr\":\n          this._applyInputAttributes(this.option(name));\n\n          break;\n\n        default:\n          _get(_getPrototypeOf(FileUploader.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }, {\n    key: \"_resetInputValue\",\n    value: function _resetInputValue(force) {\n      if (\"useForm\" === this.option(\"uploadMode\") && !force) {\n        return;\n      }\n\n      this._doPreventInputChange = true;\n\n      this._$fileInput.val(\"\");\n\n      this._doPreventInputChange = false;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.option(\"value\", []);\n    }\n  }]);\n\n  return FileUploader;\n}(Editor);\n\nvar FileBlobReader = /*#__PURE__*/function () {\n  function FileBlobReader(file, chunkSize) {\n    _classCallCheck(this, FileBlobReader);\n\n    this.file = file;\n    this.chunkSize = chunkSize;\n    this.index = 0;\n  }\n\n  _createClass(FileBlobReader, [{\n    key: \"read\",\n    value: function read() {\n      if (!this.file) {\n        return null;\n      }\n\n      var result = this.createBlobResult(this.file, this.index, this.chunkSize);\n\n      if (result.isCompleted) {\n        this.file = null;\n      }\n\n      this.index++;\n      return result;\n    }\n  }, {\n    key: \"createBlobResult\",\n    value: function createBlobResult(file, index, chunkSize) {\n      var currentPosition = index * chunkSize;\n      return {\n        blob: this.sliceFile(file, currentPosition, chunkSize),\n        index: index,\n        isCompleted: currentPosition + chunkSize >= file.size\n      };\n    }\n  }, {\n    key: \"sliceFile\",\n    value: function sliceFile(file, startPos, length) {\n      if (file.slice) {\n        return file.slice(startPos, startPos + length);\n      }\n\n      if (file.webkitSlice) {\n        return file.webkitSlice(startPos, startPos + length);\n      }\n\n      return null;\n    }\n  }]);\n\n  return FileBlobReader;\n}();\n\nvar FileUploadStrategyBase = /*#__PURE__*/function () {\n  function FileUploadStrategyBase(fileUploader) {\n    _classCallCheck(this, FileUploadStrategyBase);\n\n    this.fileUploader = fileUploader;\n  }\n\n  _createClass(FileUploadStrategyBase, [{\n    key: \"upload\",\n    value: function upload(file) {\n      if (file.isInitialized && file.isAborted) {\n        this.fileUploader._resetFileState(file);\n      }\n\n      if (file.isValid() && !file.uploadStarted) {\n        this._prepareFileBeforeUpload(file);\n\n        this._uploadCore(file);\n      }\n    }\n  }, {\n    key: \"abortUpload\",\n    value: function abortUpload(file) {\n      var _this14 = this;\n\n      if (file._isError || file._isLoaded || file.isAborted || !file.uploadStarted) {\n        return;\n      }\n\n      file.isAborted = true;\n      file.request && file.request.abort();\n\n      if (this._isCustomCallback(\"abortUpload\")) {\n        var abortUpload = this.fileUploader.option(\"abortUpload\");\n\n        var arg = this._createUploadArgument(file);\n\n        var deferred = null;\n\n        try {\n          var result = abortUpload(file.value, arg);\n          deferred = fromPromise(result);\n        } catch (error) {\n          deferred = new Deferred().reject(error).promise();\n        }\n\n        deferred.done(function () {\n          return file.onAbort.fire();\n        }).fail(function (error) {\n          return _this14._handleFileError(file, error);\n        });\n      }\n    }\n  }, {\n    key: \"_beforeSend\",\n    value: function _beforeSend(xhr, file) {\n      var arg = this._createUploadArgument(file);\n\n      this.fileUploader._beforeSendAction({\n        request: xhr,\n        file: file.value,\n        uploadInfo: arg\n      });\n\n      file.request = xhr;\n    }\n  }, {\n    key: \"_createUploadArgument\",\n    value: function _createUploadArgument(file) {}\n  }, {\n    key: \"_uploadCore\",\n    value: function _uploadCore(file) {}\n  }, {\n    key: \"_isCustomCallback\",\n    value: function _isCustomCallback(name) {\n      var callback = this.fileUploader.option(name);\n      return callback && isFunction(callback);\n    }\n  }, {\n    key: \"_handleProgress\",\n    value: function _handleProgress(file, e) {\n      if (file._isError) {\n        return;\n      }\n\n      file._isProgressStarted = true;\n\n      this._handleProgressCore(file, e);\n    }\n  }, {\n    key: \"_handleProgressCore\",\n    value: function _handleProgressCore(file, e) {}\n  }, {\n    key: \"_handleFileError\",\n    value: function _handleFileError(file, error) {\n      file._isError = true;\n      file.onError.fire(error);\n    }\n  }, {\n    key: \"_prepareFileBeforeUpload\",\n    value: function _prepareFileBeforeUpload(file) {\n      if (file.$file) {\n        var _file$progressBar;\n\n        null === (_file$progressBar = file.progressBar) || void 0 === _file$progressBar ? void 0 : _file$progressBar.dispose();\n\n        this.fileUploader._createFileProgressBar(file);\n      }\n\n      if (file.isInitialized) {\n        return;\n      }\n\n      file.onLoadStart.add(this._onUploadStarted.bind(this, file));\n      file.onLoad.add(this._onLoadedHandler.bind(this, file));\n      file.onError.add(this._onErrorHandler.bind(this, file));\n      file.onAbort.add(this._onAbortHandler.bind(this, file));\n      file.onProgress.add(this._onProgressHandler.bind(this, file));\n      file.isInitialized = true;\n    }\n  }, {\n    key: \"_shouldHandleError\",\n    value: function _shouldHandleError(file, e) {\n      return (this._isStatusError(e.status) || !file._isProgressStarted) && !file.isAborted;\n    }\n  }, {\n    key: \"_isStatusError\",\n    value: function _isStatusError(status) {\n      return 400 <= status && status < 500 || 500 <= status && status < 600;\n    }\n  }, {\n    key: \"_onUploadStarted\",\n    value: function _onUploadStarted(file, e) {\n      file.uploadStarted = true;\n\n      this.fileUploader._uploadStartedAction({\n        file: file.value,\n        event: e,\n        request: file.request\n      });\n    }\n  }, {\n    key: \"_onAbortHandler\",\n    value: function _onAbortHandler(file, e) {\n      var args = {\n        file: file.value,\n        event: e,\n        request: file.request,\n        message: this.fileUploader._getUploadAbortedStatusMessage()\n      };\n\n      this.fileUploader._uploadAbortedAction(args);\n\n      this.fileUploader._setStatusMessage(file, args.message);\n\n      this.fileUploader._handleAllFilesUploaded();\n    }\n  }, {\n    key: \"_onErrorHandler\",\n    value: function _onErrorHandler(file, error) {\n      var args = {\n        file: file.value,\n        event: void 0,\n        request: file.request,\n        error: error,\n        message: this.fileUploader.option(\"uploadFailedMessage\")\n      };\n\n      this.fileUploader._uploadErrorAction(args);\n\n      this.fileUploader._setStatusMessage(file, args.message);\n\n      this.fileUploader._handleAllFilesUploaded();\n    }\n  }, {\n    key: \"_onLoadedHandler\",\n    value: function _onLoadedHandler(file, e) {\n      var args = {\n        file: file.value,\n        event: e,\n        request: file.request,\n        message: this.fileUploader.option(\"uploadedMessage\")\n      };\n      file._isLoaded = true;\n\n      this.fileUploader._uploadedAction(args);\n\n      this.fileUploader._setStatusMessage(file, args.message);\n\n      this.fileUploader._handleAllFilesUploaded();\n    }\n  }, {\n    key: \"_onProgressHandler\",\n    value: function _onProgressHandler(file, e) {\n      if (file) {\n        var totalFilesSize = this.fileUploader._getTotalFilesSize();\n\n        var totalLoadedFilesSize = this.fileUploader._getTotalLoadedFilesSize();\n\n        var loadedSize = Math.min(e.loaded, file.value.size);\n        var segmentSize = loadedSize - file.loadedSize;\n        file.loadedSize = loadedSize;\n\n        this.fileUploader._updateTotalProgress(totalFilesSize, totalLoadedFilesSize + segmentSize);\n\n        this.fileUploader._updateProgressBar(file, this._getLoadedData(loadedSize, e.total, segmentSize, e));\n      }\n    }\n  }, {\n    key: \"_getLoadedData\",\n    value: function _getLoadedData(loaded, total, currentSegmentSize, event) {\n      return {\n        loaded: loaded,\n        total: total,\n        currentSegmentSize: currentSegmentSize\n      };\n    }\n  }, {\n    key: \"_extendFormData\",\n    value: function _extendFormData(formData) {\n      var formDataEntries = this.fileUploader.option(\"uploadCustomData\");\n\n      for (var entryName in formDataEntries) {\n        if (Object.prototype.hasOwnProperty.call(formDataEntries, entryName) && isDefined(formDataEntries[entryName])) {\n          formData.append(entryName, formDataEntries[entryName]);\n        }\n      }\n    }\n  }]);\n\n  return FileUploadStrategyBase;\n}();\n\nvar ChunksFileUploadStrategyBase = /*#__PURE__*/function (_FileUploadStrategyBa) {\n  _inherits(ChunksFileUploadStrategyBase, _FileUploadStrategyBa);\n\n  var _super2 = _createSuper(ChunksFileUploadStrategyBase);\n\n  function ChunksFileUploadStrategyBase(fileUploader) {\n    var _this15;\n\n    _classCallCheck(this, ChunksFileUploadStrategyBase);\n\n    _this15 = _super2.call(this, fileUploader);\n    _this15.chunkSize = _this15.fileUploader.option(\"chunkSize\");\n    return _this15;\n  }\n\n  _createClass(ChunksFileUploadStrategyBase, [{\n    key: \"_uploadCore\",\n    value: function _uploadCore(file) {\n      var realFile = file.value;\n      var chunksData = {\n        name: realFile.name,\n        loadedBytes: 0,\n        type: realFile.type,\n        blobReader: new FileBlobReader(realFile, this.chunkSize),\n        guid: new Guid(),\n        fileSize: realFile.size,\n        count: Math.ceil(realFile.size / this.chunkSize),\n        customData: {}\n      };\n      file.chunksData = chunksData;\n\n      this._sendChunk(file, chunksData);\n    }\n  }, {\n    key: \"_sendChunk\",\n    value: function _sendChunk(file, chunksData) {\n      var _this16 = this;\n\n      var chunk = chunksData.blobReader.read();\n      chunksData.currentChunk = chunk;\n\n      if (chunk) {\n        this._sendChunkCore(file, chunksData, chunk).done(function () {\n          if (file.isAborted) {\n            return;\n          }\n\n          chunksData.loadedBytes += chunk.blob.size;\n          file.onProgress.fire({\n            loaded: chunksData.loadedBytes,\n            total: file.value.size\n          });\n\n          if (chunk.isCompleted) {\n            file.onLoad.fire();\n          }\n\n          setTimeout(function () {\n            return _this16._sendChunk(file, chunksData);\n          });\n        }).fail(function (error) {\n          if (_this16._shouldHandleError(file, error)) {\n            _this16._handleFileError(file, error);\n          }\n        });\n      }\n    }\n  }, {\n    key: \"_sendChunkCore\",\n    value: function _sendChunkCore(file, chunksData, chunk) {}\n  }, {\n    key: \"_tryRaiseStartLoad\",\n    value: function _tryRaiseStartLoad(file) {\n      if (!file.isStartLoad) {\n        file.isStartLoad = true;\n        file.onLoadStart.fire();\n      }\n    }\n  }, {\n    key: \"_getEvent\",\n    value: function _getEvent(e) {\n      return null;\n    }\n  }, {\n    key: \"_createUploadArgument\",\n    value: function _createUploadArgument(file) {\n      return this._createChunksInfo(file.chunksData);\n    }\n  }, {\n    key: \"_createChunksInfo\",\n    value: function _createChunksInfo(chunksData) {\n      return {\n        bytesUploaded: chunksData.loadedBytes,\n        chunkCount: chunksData.count,\n        customData: chunksData.customData,\n        chunkBlob: chunksData.currentChunk.blob,\n        chunkIndex: chunksData.currentChunk.index\n      };\n    }\n  }]);\n\n  return ChunksFileUploadStrategyBase;\n}(FileUploadStrategyBase);\n\nvar DefaultChunksFileUploadStrategy = /*#__PURE__*/function (_ChunksFileUploadStra) {\n  _inherits(DefaultChunksFileUploadStrategy, _ChunksFileUploadStra);\n\n  var _super3 = _createSuper(DefaultChunksFileUploadStrategy);\n\n  function DefaultChunksFileUploadStrategy() {\n    _classCallCheck(this, DefaultChunksFileUploadStrategy);\n\n    return _super3.apply(this, arguments);\n  }\n\n  _createClass(DefaultChunksFileUploadStrategy, [{\n    key: \"_sendChunkCore\",\n    value: function _sendChunkCore(file, chunksData, chunk) {\n      var _this17 = this;\n\n      return ajax.sendRequest({\n        url: this.fileUploader.option(\"uploadUrl\"),\n        method: this.fileUploader.option(\"uploadMethod\"),\n        headers: this.fileUploader.option(\"uploadHeaders\"),\n        beforeSend: function beforeSend(xhr) {\n          return _this17._beforeSend(xhr, file);\n        },\n        upload: {\n          onprogress: function onprogress(e) {\n            return _this17._handleProgress(file, e);\n          },\n          onloadstart: function onloadstart() {\n            return _this17._tryRaiseStartLoad(file);\n          },\n          onabort: function onabort() {\n            return file.onAbort.fire();\n          }\n        },\n        data: this._createFormData({\n          fileName: chunksData.name,\n          blobName: this.fileUploader.option(\"name\"),\n          blob: chunk.blob,\n          index: chunk.index,\n          count: chunksData.count,\n          type: chunksData.type,\n          guid: chunksData.guid,\n          size: chunksData.fileSize\n        })\n      });\n    }\n  }, {\n    key: \"_createFormData\",\n    value: function _createFormData(options) {\n      var formData = new window.FormData();\n      formData.append(options.blobName, options.blob);\n      formData.append(FILEUPLOADER_CHUNK_META_DATA_NAME, JSON.stringify({\n        FileName: options.fileName,\n        Index: options.index,\n        TotalCount: options.count,\n        FileSize: options.size,\n        FileType: options.type,\n        FileGuid: options.guid\n      }));\n\n      this._extendFormData(formData);\n\n      return formData;\n    }\n  }]);\n\n  return DefaultChunksFileUploadStrategy;\n}(ChunksFileUploadStrategyBase);\n\nvar CustomChunksFileUploadStrategy = /*#__PURE__*/function (_ChunksFileUploadStra2) {\n  _inherits(CustomChunksFileUploadStrategy, _ChunksFileUploadStra2);\n\n  var _super4 = _createSuper(CustomChunksFileUploadStrategy);\n\n  function CustomChunksFileUploadStrategy() {\n    _classCallCheck(this, CustomChunksFileUploadStrategy);\n\n    return _super4.apply(this, arguments);\n  }\n\n  _createClass(CustomChunksFileUploadStrategy, [{\n    key: \"_sendChunkCore\",\n    value: function _sendChunkCore(file, chunksData) {\n      this._tryRaiseStartLoad(file);\n\n      var chunksInfo = this._createChunksInfo(chunksData);\n\n      var uploadChunk = this.fileUploader.option(\"uploadChunk\");\n\n      try {\n        var result = uploadChunk(file.value, chunksInfo);\n        return fromPromise(result);\n      } catch (error) {\n        return new Deferred().reject(error).promise();\n      }\n    }\n  }, {\n    key: \"_shouldHandleError\",\n    value: function _shouldHandleError(file, error) {\n      return true;\n    }\n  }]);\n\n  return CustomChunksFileUploadStrategy;\n}(ChunksFileUploadStrategyBase);\n\nvar WholeFileUploadStrategyBase = /*#__PURE__*/function (_FileUploadStrategyBa2) {\n  _inherits(WholeFileUploadStrategyBase, _FileUploadStrategyBa2);\n\n  var _super5 = _createSuper(WholeFileUploadStrategyBase);\n\n  function WholeFileUploadStrategyBase() {\n    _classCallCheck(this, WholeFileUploadStrategyBase);\n\n    return _super5.apply(this, arguments);\n  }\n\n  _createClass(WholeFileUploadStrategyBase, [{\n    key: \"_uploadCore\",\n    value: function _uploadCore(file) {\n      var _this18 = this;\n\n      file.loadedSize = 0;\n\n      this._uploadFile(file).done(function () {\n        if (!file.isAborted) {\n          file.onLoad.fire();\n        }\n      }).fail(function (error) {\n        if (_this18._shouldHandleError(file, error)) {\n          _this18._handleFileError(file, error);\n        }\n      });\n    }\n  }, {\n    key: \"_uploadFile\",\n    value: function _uploadFile(file) {}\n  }, {\n    key: \"_handleProgressCore\",\n    value: function _handleProgressCore(file, e) {\n      file.onProgress.fire(e);\n    }\n  }, {\n    key: \"_getLoadedData\",\n    value: function _getLoadedData(loaded, total, segmentSize, event) {\n      var result = _get(_getPrototypeOf(WholeFileUploadStrategyBase.prototype), \"_getLoadedData\", this).call(this, loaded, total, segmentSize, event);\n\n      result.event = event;\n      return result;\n    }\n  }]);\n\n  return WholeFileUploadStrategyBase;\n}(FileUploadStrategyBase);\n\nvar DefaultWholeFileUploadStrategy = /*#__PURE__*/function (_WholeFileUploadStrat) {\n  _inherits(DefaultWholeFileUploadStrategy, _WholeFileUploadStrat);\n\n  var _super6 = _createSuper(DefaultWholeFileUploadStrategy);\n\n  function DefaultWholeFileUploadStrategy() {\n    _classCallCheck(this, DefaultWholeFileUploadStrategy);\n\n    return _super6.apply(this, arguments);\n  }\n\n  _createClass(DefaultWholeFileUploadStrategy, [{\n    key: \"_uploadFile\",\n    value: function _uploadFile(file) {\n      var _this19 = this;\n\n      return ajax.sendRequest({\n        url: this.fileUploader.option(\"uploadUrl\"),\n        method: this.fileUploader.option(\"uploadMethod\"),\n        headers: this.fileUploader.option(\"uploadHeaders\"),\n        beforeSend: function beforeSend(xhr) {\n          return _this19._beforeSend(xhr, file);\n        },\n        upload: {\n          onprogress: function onprogress(e) {\n            return _this19._handleProgress(file, e);\n          },\n          onloadstart: function onloadstart() {\n            return file.onLoadStart.fire();\n          },\n          onabort: function onabort() {\n            return file.onAbort.fire();\n          }\n        },\n        data: this._createFormData(this.fileUploader.option(\"name\"), file.value)\n      });\n    }\n  }, {\n    key: \"_createFormData\",\n    value: function _createFormData(fieldName, fieldValue) {\n      var formData = new window.FormData();\n      formData.append(fieldName, fieldValue, fieldValue.name);\n\n      this._extendFormData(formData);\n\n      return formData;\n    }\n  }]);\n\n  return DefaultWholeFileUploadStrategy;\n}(WholeFileUploadStrategyBase);\n\nvar CustomWholeFileUploadStrategy = /*#__PURE__*/function (_WholeFileUploadStrat2) {\n  _inherits(CustomWholeFileUploadStrategy, _WholeFileUploadStrat2);\n\n  var _super7 = _createSuper(CustomWholeFileUploadStrategy);\n\n  function CustomWholeFileUploadStrategy() {\n    _classCallCheck(this, CustomWholeFileUploadStrategy);\n\n    return _super7.apply(this, arguments);\n  }\n\n  _createClass(CustomWholeFileUploadStrategy, [{\n    key: \"_uploadFile\",\n    value: function _uploadFile(file) {\n      var _this20 = this;\n\n      file.onLoadStart.fire();\n      var uploadFile = this.fileUploader.option(\"uploadFile\");\n\n      try {\n        var result = uploadFile(file.value, function (loadedBytes) {\n          var arg = {\n            loaded: loadedBytes,\n            total: file.size\n          };\n\n          _this20._handleProgress(file, arg);\n        });\n        return fromPromise(result);\n      } catch (error) {\n        return new Deferred().reject(error).promise();\n      }\n    }\n  }, {\n    key: \"_shouldHandleError\",\n    value: function _shouldHandleError(file, e) {\n      return true;\n    }\n  }]);\n\n  return CustomWholeFileUploadStrategy;\n}(WholeFileUploadStrategyBase);\n\nregisterComponent(\"dxFileUploader\", FileUploader);\nexport default FileUploader;","map":null,"metadata":{},"sourceType":"module"}