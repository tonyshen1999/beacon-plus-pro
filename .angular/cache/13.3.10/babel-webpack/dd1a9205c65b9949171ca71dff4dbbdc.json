{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/tree_map/tiling.squarified.base.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nvar _max = Math.max;\nvar _round = Math.round;\nimport { buildSidesData, calculateRectangles, getStaticSideIndex } from \"./tiling\";\n\nfunction compare(a, b) {\n  return b.value - a.value;\n}\n\nfunction getAspectRatio(value) {\n  return _max(value, 1 / value);\n}\n\nfunction findAppropriateCollection(nodes, head, context) {\n  var bestAspectRatio = 1 / 0;\n  var nextAspectRatio;\n  var sum = 0;\n  var nextSum;\n  var i;\n  var j;\n  var ii = nodes.length;\n  var coeff = context.areaToValue / context.staticSide;\n  var totalAspectRatio;\n\n  for (i = head; i < ii;) {\n    nextSum = sum + nodes[i].value;\n    totalAspectRatio = context.staticSide / coeff / nextSum;\n    nextAspectRatio = 0;\n\n    for (j = head; j <= i; ++j) {\n      nextAspectRatio = context.accumulate(nextAspectRatio, getAspectRatio(totalAspectRatio * nodes[j].value / nextSum), j - head + 1);\n    }\n\n    if (nextAspectRatio < bestAspectRatio) {\n      bestAspectRatio = nextAspectRatio;\n      sum = nextSum;\n      ++i;\n    } else {\n      break;\n    }\n  }\n\n  return {\n    sum: sum,\n    count: i - head,\n    side: _round(coeff * sum)\n  };\n}\n\nfunction getArea(rect) {\n  return (rect[2] - rect[0]) * (rect[3] - rect[1]);\n}\n\nfunction doStep(nodes, head, context) {\n  var sidesData = buildSidesData(context.rect, context.directions, context.staticSideIndex);\n  var area = getArea(context.rect);\n  var rowData = area > 0 ? findAppropriateCollection(nodes, head, {\n    areaToValue: area / context.sum,\n    accumulate: context.accumulate,\n    staticSide: sidesData.staticSide\n  }) : {\n    sum: 1,\n    side: sidesData.variedSide,\n    count: nodes.length - head\n  };\n  calculateRectangles(nodes, head, context.rect, sidesData, rowData);\n  context.sum -= rowData.sum;\n  return head + rowData.count;\n}\n\nexport default function (data, accumulate, isFixedStaticSide) {\n  var items = data.items;\n  var ii = items.length;\n  var i;\n  var context = {\n    sum: data.sum,\n    rect: data.rect,\n    directions: data.directions,\n    accumulate: accumulate\n  };\n\n  if (isFixedStaticSide) {\n    context.staticSideIndex = getStaticSideIndex(context.rect);\n  }\n\n  items.sort(compare);\n\n  for (i = 0; i < ii;) {\n    i = doStep(items, i, context);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}