{"ast":null,"code":"/**\r\n * DevExtreme (esm/events/gesture/emitter.gesture.scroll.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport eventsEngine from \"../../events/core/events_engine\";\nimport Class from \"../../core/class\";\nvar abstract = Class.abstract;\nimport { addNamespace, isDxMouseWheelEvent, isMouseEvent, eventData, eventDelta } from \"../../events/utils/index\";\nimport GestureEmitter from \"../../events/gesture/emitter.gesture\";\nimport registerEmitter from \"../../events/core/emitter_registrator\";\nimport { requestAnimationFrame, cancelAnimationFrame } from \"../../animation/frame\";\nimport devices from \"../../core/devices\";\nimport { compare as compareVersions } from \"../../core/utils/version\";\nvar realDevice = devices.real();\nvar SCROLL_EVENT = \"scroll\";\nvar SCROLL_INIT_EVENT = \"dxscrollinit\";\nvar SCROLL_START_EVENT = \"dxscrollstart\";\nvar SCROLL_MOVE_EVENT = \"dxscroll\";\nvar SCROLL_END_EVENT = \"dxscrollend\";\nvar SCROLL_STOP_EVENT = \"dxscrollstop\";\nvar SCROLL_CANCEL_EVENT = \"dxscrollcancel\";\nvar Locker = Class.inherit(function () {\n  var NAMESPACED_SCROLL_EVENT = addNamespace(SCROLL_EVENT, \"dxScrollEmitter\");\n  return {\n    ctor: function ctor(element) {\n      var _this = this;\n\n      this._element = element;\n      this._locked = false;\n\n      this._proxiedScroll = function (e) {\n        if (!_this._disposed) {\n          _this._scroll(e);\n        }\n      };\n\n      eventsEngine.on(this._element, NAMESPACED_SCROLL_EVENT, this._proxiedScroll);\n    },\n    _scroll: abstract,\n    check: function check(e, callback) {\n      if (this._locked) {\n        callback();\n      }\n    },\n    dispose: function dispose() {\n      this._disposed = true;\n      eventsEngine.off(this._element, NAMESPACED_SCROLL_EVENT, this._proxiedScroll);\n    }\n  };\n}());\nvar TimeoutLocker = Locker.inherit({\n  ctor: function ctor(element, timeout) {\n    this.callBase(element);\n    this._timeout = timeout;\n  },\n  _scroll: function _scroll() {\n    this._prepare();\n\n    this._forget();\n  },\n  _prepare: function _prepare() {\n    if (this._timer) {\n      this._clearTimer();\n    }\n\n    this._locked = true;\n  },\n  _clearTimer: function _clearTimer() {\n    clearTimeout(this._timer);\n    this._locked = false;\n    this._timer = null;\n  },\n  _forget: function _forget() {\n    var that = this;\n    this._timer = setTimeout(function () {\n      that._clearTimer();\n    }, this._timeout);\n  },\n  dispose: function dispose() {\n    this.callBase();\n\n    this._clearTimer();\n  }\n});\nvar WheelLocker = TimeoutLocker.inherit({\n  ctor: function ctor(element) {\n    this.callBase(element, 400);\n    this._lastWheelDirection = null;\n  },\n  check: function check(e, callback) {\n    this._checkDirectionChanged(e);\n\n    this.callBase(e, callback);\n  },\n  _checkDirectionChanged: function _checkDirectionChanged(e) {\n    if (!isDxMouseWheelEvent(e)) {\n      this._lastWheelDirection = null;\n      return;\n    }\n\n    var direction = e.shiftKey || false;\n    var directionChange = null !== this._lastWheelDirection && direction !== this._lastWheelDirection;\n    this._lastWheelDirection = direction;\n    this._locked = this._locked && !directionChange;\n  }\n});\nvar PointerLocker = TimeoutLocker.inherit({\n  ctor: function ctor(element) {\n    this.callBase(element, 400);\n  }\n});\n!function () {\n  var ios8_greater = realDevice.ios && compareVersions(realDevice.version, [8]) >= 0;\n  var android5_greater = realDevice.android && compareVersions(realDevice.version, [5]) >= 0;\n\n  if (!(ios8_greater || android5_greater)) {\n    return;\n  }\n\n  PointerLocker = Locker.inherit({\n    _scroll: function _scroll() {\n      this._locked = true;\n      var that = this;\n      cancelAnimationFrame(this._scrollFrame);\n      this._scrollFrame = requestAnimationFrame(function () {\n        that._locked = false;\n      });\n    },\n    check: function check(e, callback) {\n      cancelAnimationFrame(this._scrollFrame);\n      cancelAnimationFrame(this._checkFrame);\n      var that = this;\n      var callBase = this.callBase;\n      this._checkFrame = requestAnimationFrame(function () {\n        callBase.call(that, e, callback);\n        that._locked = false;\n      });\n    },\n    dispose: function dispose() {\n      this.callBase();\n      cancelAnimationFrame(this._scrollFrame);\n      cancelAnimationFrame(this._checkFrame);\n    }\n  });\n}();\nvar ScrollEmitter = GestureEmitter.inherit(function () {\n  var FRAME_DURATION = Math.round(1e3 / 60);\n  return {\n    ctor: function ctor(element) {\n      this.callBase.apply(this, arguments);\n      this.direction = \"both\";\n      this._pointerLocker = new PointerLocker(element);\n      this._wheelLocker = new WheelLocker(element);\n    },\n    validate: function validate() {\n      return true;\n    },\n    configure: function configure(data) {\n      if (data.scrollTarget) {\n        this._pointerLocker.dispose();\n\n        this._wheelLocker.dispose();\n\n        this._pointerLocker = new PointerLocker(data.scrollTarget);\n        this._wheelLocker = new WheelLocker(data.scrollTarget);\n      }\n\n      this.callBase(data);\n    },\n    _init: function _init(e) {\n      this._wheelLocker.check(e, function () {\n        if (isDxMouseWheelEvent(e)) {\n          this._accept(e);\n        }\n      }.bind(this));\n\n      this._pointerLocker.check(e, function () {\n        var skipCheck = this.isNative && isMouseEvent(e);\n\n        if (!isDxMouseWheelEvent(e) && !skipCheck) {\n          this._accept(e);\n        }\n      }.bind(this));\n\n      this._fireEvent(SCROLL_INIT_EVENT, e);\n\n      this._prevEventData = eventData(e);\n    },\n    move: function move(e) {\n      this.callBase.apply(this, arguments);\n      e.isScrollingEvent = this.isNative || e.isScrollingEvent;\n    },\n    _start: function _start(e) {\n      this._savedEventData = eventData(e);\n\n      this._fireEvent(SCROLL_START_EVENT, e);\n\n      this._prevEventData = eventData(e);\n    },\n    _move: function _move(e) {\n      var currentEventData = eventData(e);\n\n      this._fireEvent(SCROLL_MOVE_EVENT, e, {\n        delta: eventDelta(this._prevEventData, currentEventData)\n      });\n\n      var delta = eventDelta(this._savedEventData, currentEventData);\n\n      if (delta.time > 200) {\n        this._savedEventData = this._prevEventData;\n      }\n\n      this._prevEventData = eventData(e);\n    },\n    _end: function _end(e) {\n      var endEventDelta = eventDelta(this._prevEventData, eventData(e));\n      var velocity = {\n        x: 0,\n        y: 0\n      };\n\n      if (!isDxMouseWheelEvent(e) && endEventDelta.time < 100) {\n        var delta = eventDelta(this._savedEventData, this._prevEventData);\n        var velocityMultiplier = FRAME_DURATION / delta.time;\n        velocity = {\n          x: delta.x * velocityMultiplier,\n          y: delta.y * velocityMultiplier\n        };\n      }\n\n      this._fireEvent(SCROLL_END_EVENT, e, {\n        velocity: velocity\n      });\n    },\n    _stop: function _stop(e) {\n      this._fireEvent(SCROLL_STOP_EVENT, e);\n    },\n    cancel: function cancel(e) {\n      this.callBase.apply(this, arguments);\n\n      this._fireEvent(SCROLL_CANCEL_EVENT, e);\n    },\n    dispose: function dispose() {\n      this.callBase.apply(this, arguments);\n\n      this._pointerLocker.dispose();\n\n      this._wheelLocker.dispose();\n    },\n    _clearSelection: function _clearSelection() {\n      if (this.isNative) {\n        return;\n      }\n\n      return this.callBase.apply(this, arguments);\n    },\n    _toggleGestureCover: function _toggleGestureCover() {\n      if (this.isNative) {\n        return;\n      }\n\n      return this.callBase.apply(this, arguments);\n    }\n  };\n}());\nregisterEmitter({\n  emitter: ScrollEmitter,\n  events: [SCROLL_INIT_EVENT, SCROLL_START_EVENT, SCROLL_MOVE_EVENT, SCROLL_END_EVENT, SCROLL_STOP_EVENT, SCROLL_CANCEL_EVENT]\n});\nexport default {\n  init: SCROLL_INIT_EVENT,\n  start: SCROLL_START_EVENT,\n  move: SCROLL_MOVE_EVENT,\n  end: SCROLL_END_EVENT,\n  stop: SCROLL_STOP_EVENT,\n  cancel: SCROLL_CANCEL_EVENT,\n  scroll: SCROLL_EVENT\n};","map":null,"metadata":{},"sourceType":"module"}