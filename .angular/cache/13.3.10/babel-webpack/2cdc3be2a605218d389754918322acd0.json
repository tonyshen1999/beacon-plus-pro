{"ast":null,"code":"/**\r\n * DevExtreme (esm/events/utils/index.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport mappedAddNamespace from \"./add_namespace\";\nimport eventsEngine from \"../core/events_engine\";\nimport { each } from \"../../core/utils/iterator\";\nimport { extend } from \"../../core/utils/extend\";\nimport { focused } from \"../../ui/widget/selectors\";\nvar KEY_MAP = {\n  backspace: \"backspace\",\n  tab: \"tab\",\n  enter: \"enter\",\n  escape: \"escape\",\n  pageup: \"pageUp\",\n  pagedown: \"pageDown\",\n  end: \"end\",\n  home: \"home\",\n  arrowleft: \"leftArrow\",\n  arrowup: \"upArrow\",\n  arrowright: \"rightArrow\",\n  arrowdown: \"downArrow\",\n  delete: \"del\",\n  \" \": \"space\",\n  f: \"F\",\n  a: \"A\",\n  \"*\": \"asterisk\",\n  \"-\": \"minus\",\n  alt: \"alt\",\n  control: \"control\",\n  shift: \"shift\"\n};\nvar LEGACY_KEY_CODES = {\n  8: \"backspace\",\n  9: \"tab\",\n  13: \"enter\",\n  27: \"escape\",\n  33: \"pageUp\",\n  34: \"pageDown\",\n  35: \"end\",\n  36: \"home\",\n  37: \"leftArrow\",\n  38: \"upArrow\",\n  39: \"rightArrow\",\n  40: \"downArrow\",\n  46: \"del\",\n  32: \"space\",\n  70: \"F\",\n  65: \"A\",\n  106: \"asterisk\",\n  109: \"minus\",\n  189: \"minus\",\n  173: \"minus\",\n  16: \"shift\",\n  17: \"control\",\n  18: \"alt\"\n};\nvar EVENT_SOURCES_REGEX = {\n  dx: /^dx/i,\n  mouse: /(mouse|wheel)/i,\n  touch: /^touch/i,\n  keyboard: /^key/i,\n  pointer: /^(ms)?pointer/i\n};\n\nvar fixMethod = function fixMethod(e) {\n  return e;\n};\n\nvar copyEvent = function copyEvent(originalEvent) {\n  return fixMethod(eventsEngine.Event(originalEvent, originalEvent), originalEvent);\n};\n\nvar isDxEvent = function isDxEvent(e) {\n  return \"dx\" === eventSource(e);\n};\n\nvar isNativeMouseEvent = function isNativeMouseEvent(e) {\n  return \"mouse\" === eventSource(e);\n};\n\nvar isNativeTouchEvent = function isNativeTouchEvent(e) {\n  return \"touch\" === eventSource(e);\n};\n\nexport var eventSource = function eventSource(_ref) {\n  var type = _ref.type;\n  var result = \"other\";\n  each(EVENT_SOURCES_REGEX, function (key) {\n    if (this.test(type)) {\n      result = key;\n      return false;\n    }\n  });\n  return result;\n};\nexport var isPointerEvent = function isPointerEvent(e) {\n  return \"pointer\" === eventSource(e);\n};\nexport var isMouseEvent = function isMouseEvent(e) {\n  return isNativeMouseEvent(e) || (isPointerEvent(e) || isDxEvent(e)) && \"mouse\" === e.pointerType;\n};\nexport var isDxMouseWheelEvent = function isDxMouseWheelEvent(e) {\n  return e && \"dxmousewheel\" === e.type;\n};\nexport var isTouchEvent = function isTouchEvent(e) {\n  return isNativeTouchEvent(e) || (isPointerEvent(e) || isDxEvent(e)) && \"touch\" === e.pointerType;\n};\nexport var isKeyboardEvent = function isKeyboardEvent(e) {\n  return \"keyboard\" === eventSource(e);\n};\nexport var isFakeClickEvent = function isFakeClickEvent(_ref2) {\n  var screenX = _ref2.screenX,\n      offsetX = _ref2.offsetX,\n      pageX = _ref2.pageX;\n  return 0 === screenX && !offsetX && 0 === pageX;\n};\nexport var eventData = function eventData(_ref3) {\n  var pageX = _ref3.pageX,\n      pageY = _ref3.pageY,\n      timeStamp = _ref3.timeStamp;\n  return {\n    x: pageX,\n    y: pageY,\n    time: timeStamp\n  };\n};\nexport var eventDelta = function eventDelta(from, to) {\n  return {\n    x: to.x - from.x,\n    y: to.y - from.y,\n    time: to.time - from.time || 1\n  };\n};\nexport var hasTouches = function hasTouches(e) {\n  var originalEvent = e.originalEvent,\n      pointers = e.pointers;\n\n  if (isNativeTouchEvent(e)) {\n    return (originalEvent.touches || []).length;\n  }\n\n  if (isDxEvent(e)) {\n    return (pointers || []).length;\n  }\n\n  return 0;\n};\nvar skipEvents = false;\nexport var forceSkipEvents = function forceSkipEvents() {\n  return skipEvents = true;\n};\nexport var stopEventsSkipping = function stopEventsSkipping() {\n  return skipEvents = false;\n};\nexport var needSkipEvent = function needSkipEvent(e) {\n  if (skipEvents) {\n    return true;\n  }\n\n  var target = e.target;\n  var $target = $(target);\n  var isDropDown = $target.is(\".dx-dropdownlist-popup-wrapper *, .dx-dropdownlist-popup-wrapper\");\n  var isContentEditable = (null === target || void 0 === target ? void 0 : target.isContentEditable) || (null === target || void 0 === target ? void 0 : target.hasAttribute(\"contenteditable\"));\n  var touchInEditable = $target.is(\"input, textarea, select\") || isContentEditable;\n\n  if ($target.is(\".dx-skip-gesture-event *, .dx-skip-gesture-event\") && !isDropDown) {\n    return true;\n  }\n\n  if (isDxMouseWheelEvent(e)) {\n    var isTextArea = $target.is(\"textarea\") && $target.hasClass(\"dx-texteditor-input\");\n\n    if (isTextArea || isContentEditable) {\n      return false;\n    }\n\n    var isInputFocused = $target.is(\"input[type='number'], textarea, select\") && $target.is(\":focus\");\n    return isInputFocused;\n  }\n\n  if (isMouseEvent(e)) {\n    return touchInEditable || e.which > 1;\n  }\n\n  if (isTouchEvent(e)) {\n    return touchInEditable && focused($target);\n  }\n};\nexport var setEventFixMethod = function setEventFixMethod(func) {\n  return fixMethod = func;\n};\nexport var createEvent = function createEvent(originalEvent, args) {\n  var event = copyEvent(originalEvent);\n  args && extend(event, args);\n  return event;\n};\nexport var fireEvent = function fireEvent(props) {\n  var originalEvent = props.originalEvent,\n      delegateTarget = props.delegateTarget;\n  var event = createEvent(originalEvent, props);\n  eventsEngine.trigger(delegateTarget || event.target, event);\n  return event;\n};\nexport var normalizeKeyName = function normalizeKeyName(_ref4) {\n  var key = _ref4.key,\n      which = _ref4.which;\n  var originalKey = key;\n  var isKeySupported = !!key;\n\n  if (key || which) {\n    if (isKeySupported) {\n      key = KEY_MAP[key.toLowerCase()];\n    }\n\n    if (!isKeySupported || !key && which) {\n      key = LEGACY_KEY_CODES[which] || String.fromCharCode(which);\n    }\n\n    return key || originalKey;\n  }\n};\nexport var getChar = function getChar(_ref5) {\n  var key = _ref5.key,\n      which = _ref5.which;\n  return key || String.fromCharCode(which);\n};\nexport var addNamespace = mappedAddNamespace;\nexport var isCommandKeyPressed = function isCommandKeyPressed(_ref6) {\n  var ctrlKey = _ref6.ctrlKey,\n      metaKey = _ref6.metaKey;\n  return ctrlKey || metaKey;\n};","map":null,"metadata":{},"sourceType":"module"}