{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.columns_view.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getOuterWidth, getWidth, getOuterHeight, getHeight } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport domAdapter from \"../../core/dom_adapter\";\nimport { getWindow } from \"../../core/utils/window\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { data as elementData } from \"../../core/element_data\";\nimport pointerEvents from \"../../events/pointer\";\nimport { name as clickEventName } from \"../../events/click\";\nimport { name as dblclickEvent } from \"../../events/double_click\";\nimport browser from \"../../core/utils/browser\";\nimport { noop } from \"../../core/utils/common\";\nimport { setWidth } from \"../../core/utils/style\";\nimport { getPublicElement } from \"../../core/element\";\nimport { isRenderer, isFunction, isString, isDefined, isNumeric } from \"../../core/utils/type\";\nimport { getBoundingRect, getDefaultAlignment } from \"../../core/utils/position\";\nimport * as iteratorUtils from \"../../core/utils/iterator\";\nimport { extend } from \"../../core/utils/extend\";\nimport modules from \"./ui.grid_core.modules\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nimport columnStateMixin from \"./ui.grid_core.column_state_mixin\";\nimport { when, Deferred } from \"../../core/utils/deferred\";\nimport { nativeScrolling } from \"../../core/utils/support\";\nvar SCROLL_CONTAINER_CLASS = \"scroll-container\";\nvar SCROLLABLE_SIMULATED_CLASS = \"scrollable-simulated\";\nvar GROUP_SPACE_CLASS = \"group-space\";\nvar CONTENT_CLASS = \"content\";\nvar TABLE_CLASS = \"table\";\nvar TABLE_FIXED_CLASS = \"table-fixed\";\nvar CONTENT_FIXED_CLASS = \"content-fixed\";\nvar ROW_CLASS = \"dx-row\";\nvar GROUP_ROW_CLASS = \"dx-group-row\";\nvar DETAIL_ROW_CLASS = \"dx-master-detail-row\";\nvar FILTER_ROW_CLASS = \"filter-row\";\nvar ERROR_ROW_CLASS = \"dx-error-row\";\nvar CELL_UPDATED_ANIMATION_CLASS = \"cell-updated-animation\";\nvar HIDDEN_COLUMNS_WIDTH = \"0.0001px\";\nvar CELL_HINT_VISIBLE = \"dxCellHintVisible\";\nvar FORM_FIELD_ITEM_CONTENT_CLASS = \"dx-field-item-content\";\nvar appendElementTemplate = {\n  render: function render(options) {\n    options.container.append(options.content);\n  }\n};\n\nvar subscribeToRowEvents = function subscribeToRowEvents(that, $table) {\n  var touchTarget;\n  var touchCurrentTarget;\n  var timeoutId;\n\n  function clearTouchTargets(timeout) {\n    return setTimeout(function () {\n      touchTarget = touchCurrentTarget = null;\n    }, timeout);\n  }\n\n  eventsEngine.on($table, \"touchstart touchend\", \".dx-row\", function (e) {\n    clearTimeout(timeoutId);\n\n    if (\"touchstart\" === e.type) {\n      touchTarget = e.target;\n      touchCurrentTarget = e.currentTarget;\n      timeoutId = clearTouchTargets(1e3);\n    } else {\n      timeoutId = clearTouchTargets();\n    }\n  });\n  eventsEngine.on($table, [clickEventName, dblclickEvent, pointerEvents.down].join(\" \"), \".dx-row\", {\n    useNative: that._isNativeClick()\n  }, that.createAction(function (e) {\n    var event = e.event;\n\n    if (touchTarget) {\n      event.target = touchTarget;\n      event.currentTarget = touchCurrentTarget;\n    }\n\n    if (!$(event.target).closest(\"a\").length) {\n      e.rowIndex = that.getRowIndex(event.currentTarget);\n\n      if (e.rowIndex >= 0) {\n        e.rowElement = getPublicElement($(event.currentTarget));\n        e.columns = that.getColumns();\n\n        if (event.type === pointerEvents.down) {\n          that._rowPointerDown(e);\n        } else if (event.type === clickEventName) {\n          that._rowClick(e);\n        } else {\n          that._rowDblClick(e);\n        }\n      }\n    }\n  }));\n};\n\nvar getWidthStyle = function getWidthStyle(width) {\n  if (\"auto\" === width) {\n    return \"\";\n  }\n\n  return isNumeric(width) ? width + \"px\" : width;\n};\n\nvar setCellWidth = function setCellWidth(cell, column, width) {\n  cell.style.width = cell.style.maxWidth = \"auto\" === column.width ? \"\" : width;\n};\n\nvar copyAttributes = function copyAttributes(element, newElement) {\n  if (!element || !newElement) {\n    return;\n  }\n\n  var oldAttributes = element.attributes;\n  var newAttributes = newElement.attributes;\n  var i;\n\n  for (i = 0; i < oldAttributes.length; i++) {\n    var name = oldAttributes[i].nodeName;\n\n    if (!newElement.hasAttribute(name)) {\n      element.removeAttribute(name);\n    }\n  }\n\n  for (i = 0; i < newAttributes.length; i++) {\n    element.setAttribute(newAttributes[i].nodeName, newAttributes[i].nodeValue);\n  }\n};\n\nexport var ColumnsView = modules.View.inherit(columnStateMixin).inherit({\n  _createScrollableOptions: function _createScrollableOptions() {\n    var scrollingOptions = this.option(\"scrolling\");\n    var useNativeScrolling = this.option(\"scrolling.useNative\");\n    var options = extend({}, scrollingOptions, {\n      direction: \"both\",\n      bounceEnabled: false,\n      useKeyboard: false\n    });\n\n    if (void 0 === useNativeScrolling) {\n      useNativeScrolling = true;\n    }\n\n    if (\"auto\" === useNativeScrolling) {\n      delete options.useNative;\n      delete options.useSimulatedScrollbar;\n    } else {\n      options.useNative = !!useNativeScrolling;\n      options.useSimulatedScrollbar = !useNativeScrolling;\n    }\n\n    return options;\n  },\n  _updateCell: function _updateCell($cell, parameters) {\n    if (parameters.rowType) {\n      this._cellPrepared($cell, parameters);\n    }\n  },\n  _createCell: function _createCell(options) {\n    var column = options.column;\n    var alignment = column.alignment || getDefaultAlignment(this.option(\"rtlEnabled\"));\n    var cell = domAdapter.createElement(\"td\");\n    cell.style.textAlign = alignment;\n    var $cell = $(cell);\n\n    if (\"data\" === options.rowType && column.headerId && !column.type) {\n      if (this.component.option(\"showColumnHeaders\")) {\n        this.setAria(\"describedby\", column.headerId, $cell);\n      }\n    }\n\n    if (column.cssClass) {\n      $cell.addClass(column.cssClass);\n    }\n\n    if (\"expand\" === column.command) {\n      $cell.addClass(column.cssClass);\n      $cell.addClass(this.addWidgetPrefix(GROUP_SPACE_CLASS));\n    }\n\n    if (column.colspan > 1) {\n      $cell.attr(\"colSpan\", column.colspan);\n    } else if (!column.isBand && \"auto\" !== column.visibleWidth && this.option(\"columnAutoWidth\")) {\n      if (column.width || column.minWidth) {\n        cell.style.minWidth = getWidthStyle(column.minWidth || column.width);\n      }\n\n      if (column.width) {\n        setCellWidth(cell, column, getWidthStyle(column.width));\n      }\n    }\n\n    return $cell;\n  },\n  _createRow: function _createRow(rowObject, tagName) {\n    tagName = tagName || \"tr\";\n    var $element = $(\"<\".concat(tagName, \">\")).addClass(ROW_CLASS);\n    this.setAria(\"role\", \"row\", $element);\n    return $element;\n  },\n  _isAltRow: function _isAltRow(row) {\n    return row && row.dataIndex % 2 === 1;\n  },\n  _createTable: function _createTable(columns, isAppend) {\n    var that = this;\n    var $table = $(\"<table>\").addClass(that.addWidgetPrefix(TABLE_CLASS)).addClass(that.addWidgetPrefix(TABLE_FIXED_CLASS));\n\n    if (columns && !isAppend) {\n      $table.append(that._createColGroup(columns));\n\n      if (browser.safari) {\n        $table.append($(\"<thead>\").append(\"<tr>\"));\n      }\n\n      that.setAria(\"role\", \"presentation\", $table);\n    } else {\n      that.setAria(\"hidden\", true, $table);\n    }\n\n    this.setAria(\"role\", \"presentation\", $(\"<tbody>\").appendTo($table));\n\n    if (isAppend) {\n      return $table;\n    }\n\n    if (browser.mozilla) {\n      eventsEngine.on($table, \"mousedown\", \"td\", function (e) {\n        if (e.ctrlKey) {\n          e.preventDefault();\n        }\n      });\n    }\n\n    if (that.option(\"cellHintEnabled\")) {\n      eventsEngine.on($table, \"mousemove\", \".dx-row > td\", this.createAction(function (args) {\n        var e = args.event;\n        var $element = $(e.target);\n        var $cell = $(e.currentTarget);\n        var $row = $cell.parent();\n        var isDataRow = $row.hasClass(\"dx-data-row\");\n        var isHeaderRow = $row.hasClass(\"dx-header-row\");\n        var isGroupRow = $row.hasClass(GROUP_ROW_CLASS);\n        var isMasterDetailRow = $row.hasClass(DETAIL_ROW_CLASS);\n        var isFilterRow = $row.hasClass(that.addWidgetPrefix(FILTER_ROW_CLASS));\n\n        var visibleColumns = that._columnsController.getVisibleColumns();\n\n        var rowOptions = $row.data(\"options\");\n        var columnIndex = $cell.index();\n        var cellOptions = rowOptions && rowOptions.cells && rowOptions.cells[columnIndex];\n        var column = cellOptions ? cellOptions.column : visibleColumns[columnIndex];\n\n        if (!isMasterDetailRow && !isFilterRow && (!isDataRow || isDataRow && column && !column.cellTemplate) && (!isHeaderRow || isHeaderRow && column && !column.headerCellTemplate) && (!isGroupRow || isGroupRow && column && (void 0 === column.groupIndex || !column.groupCellTemplate))) {\n          if ($element.data(CELL_HINT_VISIBLE)) {\n            $element.removeAttr(\"title\");\n            $element.data(CELL_HINT_VISIBLE, false);\n          }\n\n          var difference = $element[0].scrollWidth - $element[0].clientWidth;\n\n          if (difference > 0 && !isDefined($element.attr(\"title\"))) {\n            $element.attr(\"title\", $element.text());\n            $element.data(CELL_HINT_VISIBLE, true);\n          }\n        }\n      }));\n    }\n\n    var getOptions = function getOptions(event) {\n      var $cell = $(event.currentTarget);\n      var $fieldItemContent = $(event.target).closest(\".\" + FORM_FIELD_ITEM_CONTENT_CLASS);\n      var $row = $cell.parent();\n      var rowOptions = $row.data(\"options\");\n      var options = rowOptions && rowOptions.cells && rowOptions.cells[$cell.index()];\n\n      if (!$cell.closest(\"table\").is(event.delegateTarget)) {\n        return;\n      }\n\n      var resultOptions = extend({}, options, {\n        cellElement: getPublicElement($cell),\n        event: event,\n        eventType: event.type\n      });\n      resultOptions.rowIndex = that.getRowIndex($row);\n\n      if ($fieldItemContent.length) {\n        var formItemOptions = $fieldItemContent.data(\"dx-form-item\");\n\n        if (formItemOptions.column) {\n          resultOptions.column = formItemOptions.column;\n          resultOptions.columnIndex = that._columnsController.getVisibleIndex(resultOptions.column.index);\n        }\n      }\n\n      return resultOptions;\n    };\n\n    eventsEngine.on($table, \"mouseover\", \".dx-row > td\", function (e) {\n      var options = getOptions(e);\n      options && that.executeAction(\"onCellHoverChanged\", options);\n    });\n    eventsEngine.on($table, \"mouseout\", \".dx-row > td\", function (e) {\n      var options = getOptions(e);\n      options && that.executeAction(\"onCellHoverChanged\", options);\n    });\n    eventsEngine.on($table, clickEventName, \".dx-row > td\", function (e) {\n      var options = getOptions(e);\n      options && that.executeAction(\"onCellClick\", options);\n    });\n    eventsEngine.on($table, dblclickEvent, \".dx-row > td\", function (e) {\n      var options = getOptions(e);\n      options && that.executeAction(\"onCellDblClick\", options);\n    });\n    subscribeToRowEvents(that, $table);\n    return $table;\n  },\n  _isNativeClick: noop,\n  _rowPointerDown: noop,\n  _rowClick: noop,\n  _rowDblClick: noop,\n  _createColGroup: function _createColGroup(columns) {\n    var colgroupElement = $(\"<colgroup>\");\n\n    for (var i = 0; i < columns.length; i++) {\n      var colspan = columns[i].colspan || 1;\n\n      for (var j = 0; j < colspan; j++) {\n        colgroupElement.append(this._createCol(columns[i]));\n      }\n    }\n\n    return colgroupElement;\n  },\n  _createCol: function _createCol(column) {\n    var width = column.visibleWidth || column.width;\n\n    if (\"adaptiveHidden\" === width) {\n      width = HIDDEN_COLUMNS_WIDTH;\n    }\n\n    var col = $(\"<col>\");\n    setWidth(col, width);\n    return col;\n  },\n  renderDelayedTemplates: function renderDelayedTemplates(change) {\n    var delayedTemplates = this._delayedTemplates;\n    var syncTemplates = delayedTemplates.filter(function (template) {\n      return !template.async;\n    });\n    var asyncTemplates = delayedTemplates.filter(function (template) {\n      return template.async;\n    });\n    this._delayedTemplates = [];\n\n    this._renderDelayedTemplatesCore(syncTemplates, false, change);\n\n    this._renderDelayedTemplatesCoreAsync(asyncTemplates);\n  },\n  _renderDelayedTemplatesCoreAsync: function _renderDelayedTemplatesCoreAsync(templates) {\n    var that = this;\n\n    if (templates.length) {\n      getWindow().setTimeout(function () {\n        that._renderDelayedTemplatesCore(templates, true);\n      });\n    }\n  },\n  _renderDelayedTemplatesCore: function _renderDelayedTemplatesCore(templates, isAsync, change) {\n    var date = new Date();\n\n    while (templates.length) {\n      var templateParameters = templates.shift();\n      var options = templateParameters.options;\n      var doc = domAdapter.getDocument();\n\n      if (!isAsync || $(options.container).closest(doc).length) {\n        if (change) {\n          options.change = change;\n        }\n\n        templateParameters.template.render(options);\n      }\n\n      if (isAsync && new Date() - date > 30) {\n        this._renderDelayedTemplatesCoreAsync(templates);\n\n        break;\n      }\n    }\n\n    if (!templates.length && this._delayedTemplates.length) {\n      this.renderDelayedTemplates();\n    }\n  },\n  _processTemplate: function _processTemplate(template) {\n    var renderingTemplate;\n\n    if (template && template.render && !isRenderer(template)) {\n      renderingTemplate = {\n        allowRenderToDetachedContainer: template.allowRenderToDetachedContainer,\n        render: function render(options) {\n          template.render(options.container, options.model, options.change);\n          options.deferred && options.deferred.resolve();\n        }\n      };\n    } else if (isFunction(template)) {\n      renderingTemplate = {\n        render: function render(options) {\n          var renderedTemplate = template(getPublicElement(options.container), options.model, options.change);\n\n          if (renderedTemplate && (renderedTemplate.nodeType || isRenderer(renderedTemplate))) {\n            options.container.append(renderedTemplate);\n          }\n\n          options.deferred && options.deferred.resolve();\n        }\n      };\n    } else {\n      var templateID = isString(template) ? template : $(template).attr(\"id\");\n\n      if (!templateID) {\n        renderingTemplate = this.getTemplate(template);\n      } else {\n        if (!this._templatesCache[templateID]) {\n          this._templatesCache[templateID] = this.getTemplate(template);\n        }\n\n        renderingTemplate = this._templatesCache[templateID];\n      }\n    }\n\n    return renderingTemplate;\n  },\n  renderTemplate: function renderTemplate(container, template, options, allowRenderToDetachedContainer, change) {\n    var renderingTemplate = this._processTemplate(template, options);\n\n    var column = options.column;\n    var isDataRow = \"data\" === options.rowType;\n    var templateDeferred = new Deferred();\n    var templateOptions = {\n      container: container,\n      model: options,\n      deferred: templateDeferred,\n      onRendered: function onRendered() {\n        templateDeferred.resolve();\n      }\n    };\n\n    if (renderingTemplate) {\n      options.component = this.component;\n      var async = column && (column.renderAsync && isDataRow || this.option(\"renderAsync\") && (false !== column.renderAsync && (column.command || column.showEditorAlways) && isDataRow || \"filter\" === options.rowType));\n\n      if ((renderingTemplate.allowRenderToDetachedContainer || allowRenderToDetachedContainer) && !async) {\n        renderingTemplate.render(templateOptions);\n      } else {\n        this._delayedTemplates.push({\n          template: renderingTemplate,\n          options: templateOptions,\n          async: async\n        });\n      }\n\n      if (change) {\n        change.templateDeferreds = change.templateDeferreds || [];\n        change.templateDeferreds.push(templateDeferred);\n      }\n    } else {\n      templateDeferred.reject();\n    }\n\n    return templateDeferred.promise();\n  },\n  _getBodies: function _getBodies(tableElement) {\n    return $(tableElement).children(\"tbody\").not(\".dx-header\").not(\".dx-footer\");\n  },\n  _wrapRowIfNeed: function _wrapRowIfNeed($table, $row) {\n    var hasDataRowTemplate = this.option().rowTemplate || this.option(\"dataRowTemplate\");\n\n    var $tBodies = hasDataRowTemplate && this._getBodies(this._tableElement || $table);\n\n    if ($tBodies && $tBodies.filter(\".\" + ROW_CLASS).length) {\n      var $tbody = $(\"<tbody>\").addClass($row.attr(\"class\"));\n      this.setAria(\"role\", \"presentation\", $tbody);\n      return $tbody.append($row);\n    }\n\n    return $row;\n  },\n  _appendRow: function _appendRow($table, $row, appendTemplate) {\n    appendTemplate = appendTemplate || appendElementTemplate;\n    appendTemplate.render({\n      content: $row,\n      container: $table\n    });\n  },\n  _resizeCore: function _resizeCore() {\n    var scrollLeft = this._scrollLeft;\n\n    if (scrollLeft >= 0) {\n      this._scrollLeft = 0;\n      this.scrollTo({\n        left: scrollLeft\n      });\n    }\n  },\n  _renderCore: function _renderCore(e) {\n    var $root = this.element().parent();\n\n    if (!$root || $root.parent().length) {\n      this.renderDelayedTemplates(e);\n    }\n  },\n  _renderTable: function _renderTable(options) {\n    options = options || {};\n    options.columns = this._columnsController.getVisibleColumns();\n    var changeType = options.change && options.change.changeType;\n\n    var $table = this._createTable(options.columns, \"append\" === changeType || \"prepend\" === changeType || \"update\" === changeType);\n\n    this._renderRows($table, options);\n\n    return $table;\n  },\n  _renderRows: function _renderRows($table, options) {\n    var rows = this._getRows(options.change);\n\n    var columnIndices = options.change && options.change.columnIndices || [];\n    var changeTypes = options.change && options.change.changeTypes || [];\n\n    for (var i = 0; i < rows.length; i++) {\n      this._renderRow($table, extend({\n        row: rows[i],\n        columnIndices: columnIndices[i],\n        changeType: changeTypes[i]\n      }, options));\n    }\n  },\n  _renderRow: function _renderRow($table, options) {\n    if (!options.columnIndices) {\n      options.row.cells = [];\n    }\n\n    var $row = this._createRow(options.row);\n\n    var $wrappedRow = this._wrapRowIfNeed($table, $row);\n\n    if (\"remove\" !== options.changeType) {\n      this._renderCells($row, options);\n    }\n\n    this._appendRow($table, $wrappedRow);\n\n    var rowOptions = extend({\n      columns: options.columns\n    }, options.row);\n\n    this._addWatchMethod(rowOptions, options.row);\n\n    this._rowPrepared($wrappedRow, rowOptions, options.row);\n  },\n  _needRenderCell: function _needRenderCell(columnIndex, columnIndices) {\n    return !columnIndices || columnIndices.indexOf(columnIndex) >= 0;\n  },\n  _renderCells: function _renderCells($row, options) {\n    var columnIndex = 0;\n    var row = options.row;\n    var columns = options.columns;\n\n    for (var i = 0; i < columns.length; i++) {\n      if (this._needRenderCell(i, options.columnIndices)) {\n        this._renderCell($row, extend({\n          column: columns[i],\n          columnIndex: columnIndex,\n          value: row.values && row.values[columnIndex],\n          oldValue: row.oldValues && row.oldValues[columnIndex]\n        }, options));\n      }\n\n      if (columns[i].colspan > 1) {\n        columnIndex += columns[i].colspan;\n      } else {\n        columnIndex++;\n      }\n    }\n  },\n  _updateCells: function _updateCells($rowElement, $newRowElement, columnIndices) {\n    var $cells = $rowElement.children();\n    var $newCells = $newRowElement.children();\n    var highlightChanges = this.option(\"highlightChanges\");\n    var cellUpdatedClass = this.addWidgetPrefix(CELL_UPDATED_ANIMATION_CLASS);\n    columnIndices.forEach(function (columnIndex, index) {\n      var $cell = $cells.eq(columnIndex);\n      var $newCell = $newCells.eq(index);\n      $cell.replaceWith($newCell);\n\n      if (highlightChanges && !$newCell.hasClass(\"dx-command-expand\")) {\n        $newCell.addClass(cellUpdatedClass);\n      }\n    });\n    copyAttributes($rowElement.get(0), $newRowElement.get(0));\n  },\n  _setCellAriaAttributes: function _setCellAriaAttributes($cell, cellOptions) {\n    if (\"freeSpace\" !== cellOptions.rowType) {\n      this.setAria(\"selected\", false, $cell);\n      this.setAria(\"role\", \"gridcell\", $cell);\n\n      var columnIndexOffset = this._columnsController.getColumnIndexOffset();\n\n      var ariaColIndex = cellOptions.columnIndex + columnIndexOffset + 1;\n      this.setAria(\"colindex\", ariaColIndex, $cell);\n    }\n  },\n  _renderCell: function _renderCell($row, options) {\n    var cellOptions = this._getCellOptions(options);\n\n    if (options.columnIndices) {\n      if (options.row.cells) {\n        options.row.cells[cellOptions.columnIndex] = cellOptions;\n      }\n    } else {\n      options.row.cells.push(cellOptions);\n    }\n\n    var $cell = this._createCell(cellOptions);\n\n    this._setCellAriaAttributes($cell, cellOptions);\n\n    this._renderCellContent($cell, cellOptions);\n\n    $row.get(0).appendChild($cell.get(0));\n    return $cell;\n  },\n  _renderCellContent: function _renderCellContent($cell, options) {\n    var _this = this;\n\n    var template = this._getCellTemplate(options);\n\n    when(!template || this.renderTemplate($cell, template, options)).done(function () {\n      _this._updateCell($cell, options);\n    });\n  },\n  _getCellTemplate: function _getCellTemplate() {},\n  _getRows: function _getRows() {\n    return [];\n  },\n  _getCellOptions: function _getCellOptions(options) {\n    var cellOptions = {\n      column: options.column,\n      columnIndex: options.columnIndex,\n      rowType: options.row.rowType,\n      isAltRow: this._isAltRow(options.row)\n    };\n\n    this._addWatchMethod(cellOptions);\n\n    return cellOptions;\n  },\n  _addWatchMethod: function _addWatchMethod(options, source) {\n    if (!this.option(\"repaintChangesOnly\")) {\n      return;\n    }\n\n    var watchers = [];\n    source = source || options;\n\n    source.watch = source.watch || function (getter, updateValueFunc, updateRowFunc) {\n      var oldValue = getter(source.data);\n\n      var watcher = function watcher(row) {\n        if (row && updateRowFunc) {\n          updateRowFunc(row);\n        }\n\n        var newValue = getter(source.data);\n\n        if (JSON.stringify(oldValue) !== JSON.stringify(newValue)) {\n          if (row) {\n            updateValueFunc(newValue);\n          }\n\n          oldValue = newValue;\n        }\n      };\n\n      watchers.push(watcher);\n      return function () {\n        var index = watchers.indexOf(watcher);\n\n        if (index >= 0) {\n          watchers.splice(index, 1);\n        }\n      };\n    };\n\n    source.update = source.update || function (row, keepRow) {\n      if (row) {\n        this.data = options.data = row.data;\n        this.rowIndex = options.rowIndex = row.rowIndex;\n        this.dataIndex = options.dataIndex = row.dataIndex;\n        this.isExpanded = options.isExpanded = row.isExpanded;\n\n        if (options.row && !keepRow) {\n          options.row = row;\n        }\n      }\n\n      watchers.forEach(function (watcher) {\n        watcher(row);\n      });\n    };\n\n    if (source !== options) {\n      options.watch = source.watch.bind(source);\n    }\n\n    return options;\n  },\n  _cellPrepared: function _cellPrepared(cell, options) {\n    options.cellElement = getPublicElement($(cell));\n    this.executeAction(\"onCellPrepared\", options);\n  },\n  _rowPrepared: function _rowPrepared($row, options) {\n    elementData($row.get(0), \"options\", options);\n    options.rowElement = getPublicElement($row);\n    this.executeAction(\"onRowPrepared\", options);\n  },\n  _columnOptionChanged: function _columnOptionChanged(e) {\n    var optionNames = e.optionNames;\n\n    if (gridCoreUtils.checkChanges(optionNames, [\"width\", \"visibleWidth\"])) {\n      var visibleColumns = this._columnsController.getVisibleColumns();\n\n      var widths = iteratorUtils.map(visibleColumns, function (column) {\n        var width = column.visibleWidth || column.width;\n        return isDefined(width) ? width : \"auto\";\n      });\n      this.setColumnWidths({\n        widths: widths,\n        optionNames: optionNames\n      });\n      return;\n    }\n\n    if (!this._requireReady) {\n      this.render();\n    }\n  },\n  getCellIndex: function getCellIndex($cell) {\n    var cellIndex = $cell.length ? $cell[0].cellIndex : -1;\n    return cellIndex;\n  },\n  getTableElements: function getTableElements() {\n    return this._tableElement || $();\n  },\n  getTableElement: function getTableElement() {\n    return this._tableElement;\n  },\n  setTableElement: function setTableElement(tableElement) {\n    this._tableElement = tableElement;\n  },\n  optionChanged: function optionChanged(args) {\n    this.callBase(args);\n\n    switch (args.name) {\n      case \"cellHintEnabled\":\n      case \"onCellPrepared\":\n      case \"onRowPrepared\":\n      case \"onCellHoverChanged\":\n        this._invalidate(true, true);\n\n        args.handled = true;\n    }\n  },\n  init: function init() {\n    var that = this;\n    that._scrollLeft = -1;\n    that._columnsController = that.getController(\"columns\");\n    that._dataController = that.getController(\"data\");\n    that._delayedTemplates = [];\n    that._templatesCache = {};\n    that.createAction(\"onCellClick\");\n    that.createAction(\"onRowClick\");\n    that.createAction(\"onCellDblClick\");\n    that.createAction(\"onRowDblClick\");\n    that.createAction(\"onCellHoverChanged\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n    that.createAction(\"onCellPrepared\", {\n      excludeValidators: [\"disabled\", \"readOnly\"],\n      category: \"rendering\"\n    });\n    that.createAction(\"onRowPrepared\", {\n      excludeValidators: [\"disabled\", \"readOnly\"],\n      category: \"rendering\",\n      afterExecute: function afterExecute(e) {\n        that._afterRowPrepared(e);\n      }\n    });\n\n    that._columnsController.columnsChanged.add(that._columnOptionChanged.bind(that));\n\n    that._dataController && that._dataController.changed.add(that._handleDataChanged.bind(that));\n  },\n  _afterRowPrepared: noop,\n  _handleDataChanged: function _handleDataChanged() {},\n  callbackNames: function callbackNames() {\n    return [\"scrollChanged\"];\n  },\n  _updateScrollLeftPosition: function _updateScrollLeftPosition() {\n    var scrollLeft = this._scrollLeft;\n\n    if (scrollLeft >= 0) {\n      this._scrollLeft = 0;\n      this.scrollTo({\n        left: scrollLeft\n      });\n    }\n  },\n  scrollTo: function scrollTo(pos) {\n    var $element = this.element();\n    var $scrollContainer = $element && $element.children(\".\" + this.addWidgetPrefix(SCROLL_CONTAINER_CLASS)).not(\".\" + this.addWidgetPrefix(CONTENT_FIXED_CLASS));\n\n    if (isDefined(pos) && isDefined(pos.left) && this._scrollLeft !== pos.left) {\n      this._scrollLeft = pos.left;\n      $scrollContainer && $scrollContainer.scrollLeft(pos.left);\n    }\n  },\n  _wrapTableInScrollContainer: function _wrapTableInScrollContainer($table) {\n    var _this2 = this;\n\n    var $scrollContainer = $(\"<div>\");\n    var useNative = this.option(\"scrolling.useNative\");\n\n    if (false === useNative || \"auto\" === useNative && !nativeScrolling) {\n      $scrollContainer.addClass(this.addWidgetPrefix(SCROLLABLE_SIMULATED_CLASS));\n    }\n\n    eventsEngine.on($scrollContainer, \"scroll\", function () {\n      var scrollLeft = $scrollContainer.scrollLeft();\n\n      if (scrollLeft !== _this2._scrollLeft) {\n        _this2.scrollChanged.fire({\n          left: scrollLeft\n        }, _this2.name);\n      }\n    });\n    $scrollContainer.addClass(this.addWidgetPrefix(CONTENT_CLASS)).addClass(this.addWidgetPrefix(SCROLL_CONTAINER_CLASS)).append($table).appendTo(this.element());\n    this.setAria(\"role\", \"presentation\", $scrollContainer);\n    return $scrollContainer;\n  },\n  _updateContent: function _updateContent($newTableElement) {\n    this.setTableElement($newTableElement);\n\n    this._wrapTableInScrollContainer($newTableElement);\n  },\n  _findContentElement: noop,\n  _getWidths: function _getWidths($cellElements) {\n    var result = [];\n    var width;\n\n    if ($cellElements) {\n      iteratorUtils.each($cellElements, function (index, item) {\n        width = item.offsetWidth;\n\n        if (item.getBoundingClientRect) {\n          var clientRect = getBoundingRect(item);\n\n          if (clientRect.width > width - 1) {\n            width = clientRect.width;\n          }\n        }\n\n        result.push(width);\n      });\n    }\n\n    return result;\n  },\n  getColumnWidths: function getColumnWidths($tableElement) {\n    var result = [];\n    var $rows;\n    var $cells;\n    (this.option(\"forceApplyBindings\") || noop)();\n    $tableElement = $tableElement || this.getTableElement();\n\n    if ($tableElement) {\n      $rows = $tableElement.children(\"tbody:not(.dx-header)\").children();\n\n      for (var i = 0; i < $rows.length; i++) {\n        var $row = $rows.eq(i);\n        var isRowVisible = \"none\" !== $row.get(0).style.display && !$row.hasClass(\"dx-state-invisible\");\n\n        if (!$row.is(\".\" + GROUP_ROW_CLASS) && !$row.is(\".\" + DETAIL_ROW_CLASS) && !$row.is(\".\" + ERROR_ROW_CLASS) && isRowVisible) {\n          $cells = $row.children(\"td\");\n          break;\n        }\n      }\n\n      result = this._getWidths($cells);\n    }\n\n    return result;\n  },\n  getVisibleColumnIndex: function getVisibleColumnIndex(columnIndex, rowIndex) {\n    return columnIndex;\n  },\n  setColumnWidths: function setColumnWidths(_ref) {\n    var widths = _ref.widths,\n        $tableElement = _ref.$tableElement,\n        columns = _ref.columns,\n        fixed = _ref.fixed;\n    var $cols;\n    var width;\n    var minWidth;\n    var columnIndex;\n    var columnAutoWidth = this.option(\"columnAutoWidth\");\n    $tableElement = $tableElement || this.getTableElement();\n\n    if ($tableElement && $tableElement.length && widths) {\n      columnIndex = 0;\n      $cols = $tableElement.children(\"colgroup\").children(\"col\");\n      setWidth($cols, \"auto\");\n      columns = columns || this.getColumns(null, $tableElement);\n\n      for (var i = 0; i < columns.length; i++) {\n        if (columnAutoWidth && !fixed) {\n          width = columns[i].width;\n\n          if (width && !columns[i].command) {\n            width = columns[i].visibleWidth || width;\n            width = getWidthStyle(width);\n            minWidth = getWidthStyle(columns[i].minWidth || width);\n            var $rows = $rows || $tableElement.children().children(\".dx-row\").not(\".\" + DETAIL_ROW_CLASS);\n\n            for (var rowIndex = 0; rowIndex < $rows.length; rowIndex++) {\n              var row = $rows[rowIndex];\n              var cell = void 0;\n              var visibleIndex = this.getVisibleColumnIndex(i, rowIndex);\n\n              if (row.classList.contains(GROUP_ROW_CLASS)) {\n                if (1 !== visibleIndex) {\n                  cell = row.querySelector(\"td[aria-colindex='\".concat(visibleIndex + 1, \"']\"));\n                }\n              } else {\n                cell = row.cells[visibleIndex];\n              }\n\n              if (cell) {\n                setCellWidth(cell, columns[i], width);\n                cell.style.minWidth = minWidth;\n              }\n            }\n          }\n        }\n\n        if (columns[i].colspan) {\n          columnIndex += columns[i].colspan;\n          continue;\n        }\n\n        width = widths[columnIndex];\n\n        if (\"adaptiveHidden\" === width) {\n          width = HIDDEN_COLUMNS_WIDTH;\n        }\n\n        if (\"number\" === typeof width) {\n          width = width.toFixed(3) + \"px\";\n        }\n\n        setWidth($cols.eq(columnIndex), isDefined(width) ? width : \"auto\");\n        columnIndex++;\n      }\n    }\n  },\n  getCellElements: function getCellElements(rowIndex) {\n    return this._getCellElementsCore(rowIndex);\n  },\n  _getCellElementsCore: function _getCellElementsCore(rowIndex) {\n    var $row = this._getRowElements().eq(rowIndex);\n\n    return $row.children();\n  },\n  _getCellElement: function _getCellElement(rowIndex, columnIdentifier) {\n    var $cell;\n    var $cells = this.getCellElements(rowIndex);\n\n    var columnVisibleIndex = this._getVisibleColumnIndex($cells, rowIndex, columnIdentifier);\n\n    if ($cells.length && columnVisibleIndex >= 0) {\n      $cell = $cells.eq(columnVisibleIndex);\n    }\n\n    if ($cell && $cell.length) {\n      return $cell;\n    }\n  },\n  _getRowElement: function _getRowElement(rowIndex) {\n    var that = this;\n    var $rowElement = $();\n    var $tableElements = that.getTableElements();\n    iteratorUtils.each($tableElements, function (_, tableElement) {\n      $rowElement = $rowElement.add(that._getRowElements($(tableElement)).eq(rowIndex));\n    });\n\n    if ($rowElement.length) {\n      return $rowElement;\n    }\n  },\n  getCellElement: function getCellElement(rowIndex, columnIdentifier) {\n    return getPublicElement(this._getCellElement(rowIndex, columnIdentifier));\n  },\n  getRowElement: function getRowElement(rowIndex) {\n    var $rows = this._getRowElement(rowIndex);\n\n    var elements = [];\n\n    if ($rows && !getPublicElement($rows).get) {\n      for (var i = 0; i < $rows.length; i++) {\n        elements.push($rows[i]);\n      }\n    } else {\n      elements = $rows;\n    }\n\n    return elements;\n  },\n  _getVisibleColumnIndex: function _getVisibleColumnIndex($cells, rowIndex, columnIdentifier) {\n    if (isString(columnIdentifier)) {\n      var columnIndex = this._columnsController.columnOption(columnIdentifier, \"index\");\n\n      return this._columnsController.getVisibleIndex(columnIndex);\n    }\n\n    return columnIdentifier;\n  },\n  getColumnElements: function getColumnElements() {},\n  getColumns: function getColumns(rowIndex) {\n    return this._columnsController.getVisibleColumns(rowIndex);\n  },\n  getCell: function getCell(cellPosition, rows) {\n    var $rows = rows || this._getRowElements();\n\n    var $cells;\n\n    if ($rows.length > 0 && cellPosition.rowIndex >= 0) {\n      if (\"virtual\" !== this.option(\"scrolling.mode\") && \"virtual\" !== this.option(\"scrolling.rowRenderingMode\")) {\n        cellPosition.rowIndex = cellPosition.rowIndex < $rows.length ? cellPosition.rowIndex : $rows.length - 1;\n      }\n\n      $cells = this.getCellElements(cellPosition.rowIndex);\n\n      if ($cells && $cells.length > 0) {\n        return $cells.eq($cells.length > cellPosition.columnIndex ? cellPosition.columnIndex : $cells.length - 1);\n      }\n    }\n  },\n  getRowsCount: function getRowsCount() {\n    var tableElement = this.getTableElement();\n\n    if (tableElement && 1 === tableElement.length) {\n      return tableElement[0].rows.length;\n    }\n\n    return 0;\n  },\n  _getRowElementsCore: function _getRowElementsCore(tableElement) {\n    tableElement = tableElement || this.getTableElement();\n\n    if (tableElement) {\n      var hasRowTemplate = this.option().rowTemplate || this.option(\"dataRowTemplate\");\n      var tBodies = hasRowTemplate && tableElement.find(\"> tbody.\" + ROW_CLASS);\n      return tBodies && tBodies.length ? tBodies : tableElement.find(\"> tbody > .\" + ROW_CLASS + \", > .\" + ROW_CLASS);\n    }\n\n    return $();\n  },\n  _getRowElements: function _getRowElements(tableElement) {\n    return this._getRowElementsCore(tableElement);\n  },\n  getRowIndex: function getRowIndex($row) {\n    return this._getRowElements().index($row);\n  },\n  getBoundingRect: function getBoundingRect() {},\n  getName: function getName() {},\n  setScrollerSpacing: function setScrollerSpacing(width) {\n    var $element = this.element();\n    var rtlEnabled = this.option(\"rtlEnabled\");\n    $element && $element.css({\n      paddingLeft: rtlEnabled ? width : \"\",\n      paddingRight: !rtlEnabled ? width : \"\"\n    });\n  },\n  isScrollbarVisible: function isScrollbarVisible(isHorizontal) {\n    var $element = this.element();\n    var $tableElement = this._tableElement;\n\n    if ($element && $tableElement) {\n      return isHorizontal ? getOuterWidth($tableElement) - getWidth($element) > 0 : getOuterHeight($tableElement) - getHeight($element) > 0;\n    }\n\n    return false;\n  }\n});","map":null,"metadata":{},"sourceType":"module"}