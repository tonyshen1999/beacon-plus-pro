{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/selection/selection.strategy.deferred.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { isString } from \"../../core/utils/type\";\nimport SelectionStrategy from \"./selection.strategy\";\nimport errors from \"../widget/ui.errors\";\nimport dataQuery from \"../../data/query\";\nimport { Deferred } from \"../../core/utils/deferred\";\nexport default SelectionStrategy.inherit({\n  getSelectedItems: function getSelectedItems() {\n    return this._loadFilteredData(this.options.selectionFilter);\n  },\n  getSelectedItemKeys: function getSelectedItemKeys() {\n    var d = new Deferred();\n    var that = this;\n    var key = this.options.key();\n    var select = isString(key) ? [key] : key;\n\n    this._loadFilteredData(this.options.selectionFilter, null, select).done(function (items) {\n      var keys = items.map(function (item) {\n        return that.options.keyOf(item);\n      });\n      d.resolve(keys);\n    }).fail(d.reject);\n\n    return d.promise();\n  },\n  selectedItemKeys: function selectedItemKeys(keys, preserve, isDeselect, isSelectAll) {\n    if (isSelectAll) {\n      var filter = this.options.filter();\n      var needResetSelectionFilter = !filter || JSON.stringify(filter) === JSON.stringify(this.options.selectionFilter) && isDeselect;\n\n      if (needResetSelectionFilter) {\n        this._setOption(\"selectionFilter\", isDeselect ? [] : null);\n      } else {\n        this._addSelectionFilter(isDeselect, filter, isSelectAll);\n      }\n    } else {\n      if (!preserve) {\n        this._setOption(\"selectionFilter\", []);\n      }\n\n      for (var i = 0; i < keys.length; i++) {\n        if (isDeselect) {\n          this.removeSelectedItem(keys[i]);\n        } else {\n          this.addSelectedItem(keys[i]);\n        }\n      }\n    }\n\n    this.onSelectionChanged();\n    return new Deferred().resolve();\n  },\n  setSelectedItems: function setSelectedItems(keys) {\n    this._setOption(\"selectionFilter\", null);\n\n    for (var i = 0; i < keys.length; i++) {\n      this.addSelectedItem(keys[i]);\n    }\n  },\n  isItemDataSelected: function isItemDataSelected(itemData) {\n    return this.isItemKeySelected(itemData);\n  },\n  isItemKeySelected: function isItemKeySelected(itemData) {\n    var selectionFilter = this.options.selectionFilter;\n\n    if (!selectionFilter) {\n      return true;\n    }\n\n    return !!dataQuery([itemData]).filter(selectionFilter).toArray().length;\n  },\n  _getKeyExpr: function _getKeyExpr() {\n    var keyField = this.options.key();\n\n    if (Array.isArray(keyField) && 1 === keyField.length) {\n      return keyField[0];\n    }\n\n    return keyField;\n  },\n  _normalizeKey: function _normalizeKey(key) {\n    var keyExpr = this.options.key();\n\n    if (Array.isArray(keyExpr) && 1 === keyExpr.length) {\n      return key[keyExpr[0]];\n    }\n\n    return key;\n  },\n  _getFilterByKey: function _getFilterByKey(key) {\n    var keyField = this._getKeyExpr();\n\n    var filter = [keyField, \"=\", this._normalizeKey(key)];\n\n    if (Array.isArray(keyField)) {\n      filter = [];\n\n      for (var i = 0; i < keyField.length; i++) {\n        filter.push([keyField[i], \"=\", key[keyField[i]]]);\n\n        if (i !== keyField.length - 1) {\n          filter.push(\"and\");\n        }\n      }\n    }\n\n    return filter;\n  },\n  addSelectedItem: function addSelectedItem(key) {\n    var filter = this._getFilterByKey(key);\n\n    this._addSelectionFilter(false, filter);\n  },\n  removeSelectedItem: function removeSelectedItem(key) {\n    var filter = this._getFilterByKey(key);\n\n    this._addSelectionFilter(true, filter);\n  },\n  validate: function validate() {\n    var key = this.options.key;\n\n    if (key && void 0 === key()) {\n      throw errors.Error(\"E1042\", \"Deferred selection\");\n    }\n  },\n  _findSubFilter: function _findSubFilter(selectionFilter, filter) {\n    if (!selectionFilter) {\n      return -1;\n    }\n\n    var filterString = JSON.stringify(filter);\n\n    for (var index = 0; index < selectionFilter.length; index++) {\n      var subFilter = selectionFilter[index];\n\n      if (subFilter && JSON.stringify(subFilter) === filterString) {\n        return index;\n      }\n    }\n\n    return -1;\n  },\n  _isLastSubFilter: function _isLastSubFilter(selectionFilter, filter) {\n    if (selectionFilter && filter) {\n      return this._findSubFilter(selectionFilter, filter) === selectionFilter.length - 1 || 0 === this._findSubFilter([selectionFilter], filter);\n    }\n\n    return false;\n  },\n  _addFilterOperator: function _addFilterOperator(selectionFilter, filterOperator) {\n    if (selectionFilter.length > 1 && isString(selectionFilter[1]) && selectionFilter[1] !== filterOperator) {\n      selectionFilter = [selectionFilter];\n    }\n\n    if (selectionFilter.length) {\n      selectionFilter.push(filterOperator);\n    }\n\n    return selectionFilter;\n  },\n  _denormalizeFilter: function _denormalizeFilter(filter) {\n    if (filter && isString(filter[0])) {\n      filter = [filter];\n    }\n\n    return filter;\n  },\n  _isOnlyNegativeFiltersLeft: function _isOnlyNegativeFiltersLeft(filters) {\n    return filters.every(function (filterItem, i) {\n      if (i % 2 === 0) {\n        return Array.isArray(filterItem) && \"!\" === filterItem[0];\n      } else {\n        return \"and\" === filterItem;\n      }\n    });\n  },\n  _addSelectionFilter: function _addSelectionFilter(isDeselect, filter, isSelectAll) {\n    var currentFilter = isDeselect ? [\"!\", filter] : filter;\n    var currentOperation = isDeselect ? \"and\" : \"or\";\n    var needAddFilter = true;\n    var selectionFilter = this.options.selectionFilter || [];\n    selectionFilter = this._denormalizeFilter(selectionFilter);\n\n    if (selectionFilter && selectionFilter.length) {\n      var removedIndex = this._removeSameFilter(selectionFilter, filter, isDeselect, isSelectAll);\n\n      var filterIndex = this._removeSameFilter(selectionFilter, filter, !isDeselect);\n\n      var shouldCleanFilter = isDeselect && (-1 !== removedIndex || -1 !== filterIndex) && this._isOnlyNegativeFiltersLeft(selectionFilter);\n\n      if (shouldCleanFilter) {\n        selectionFilter = [];\n      }\n\n      var isKeyOperatorsAfterRemoved = this._isKeyFilter(filter) && this._hasKeyFiltersOnlyStartingFromIndex(selectionFilter, filterIndex);\n\n      needAddFilter = filter.length && !isKeyOperatorsAfterRemoved;\n\n      if (needAddFilter) {\n        selectionFilter = this._addFilterOperator(selectionFilter, currentOperation);\n      }\n    }\n\n    if (needAddFilter) {\n      selectionFilter.push(currentFilter);\n    }\n\n    selectionFilter = this._normalizeFilter(selectionFilter);\n\n    this._setOption(\"selectionFilter\", !isDeselect && !selectionFilter.length ? null : selectionFilter);\n  },\n  _normalizeFilter: function _normalizeFilter(filter) {\n    if (filter && 1 === filter.length) {\n      filter = filter[0];\n    }\n\n    return filter;\n  },\n  _removeFilterByIndex: function _removeFilterByIndex(filter, filterIndex, isSelectAll) {\n    var operation = filter[1];\n\n    if (filterIndex > 0) {\n      filter.splice(filterIndex - 1, 2);\n    } else {\n      filter.splice(filterIndex, 2);\n    }\n\n    if (isSelectAll && \"and\" === operation) {\n      filter.splice(0, filter.length);\n    }\n  },\n  _isSimpleKeyFilter: function _isSimpleKeyFilter(filter, key) {\n    return 3 === filter.length && filter[0] === key && \"=\" === filter[1];\n  },\n  _isKeyFilter: function _isKeyFilter(filter) {\n    if (2 === filter.length && \"!\" === filter[0]) {\n      return this._isKeyFilter(filter[1]);\n    }\n\n    var keyField = this._getKeyExpr();\n\n    if (Array.isArray(keyField)) {\n      if (filter.length !== 2 * keyField.length - 1) {\n        return false;\n      }\n\n      for (var i = 0; i < keyField.length; i++) {\n        if (i > 0 && \"and\" !== filter[2 * i - 1]) {\n          return false;\n        }\n\n        if (!this._isSimpleKeyFilter(filter[2 * i], keyField[i])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    return this._isSimpleKeyFilter(filter, keyField);\n  },\n  _hasKeyFiltersOnlyStartingFromIndex: function _hasKeyFiltersOnlyStartingFromIndex(selectionFilter, filterIndex) {\n    if (filterIndex >= 0) {\n      for (var i = filterIndex; i < selectionFilter.length; i++) {\n        if (\"string\" !== typeof selectionFilter[i] && !this._isKeyFilter(selectionFilter[i])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  },\n  _removeSameFilter: function _removeSameFilter(selectionFilter, filter, inverted, isSelectAll) {\n    filter = inverted ? [\"!\", filter] : filter;\n\n    if (JSON.stringify(filter) === JSON.stringify(selectionFilter)) {\n      selectionFilter.splice(0, selectionFilter.length);\n      return 0;\n    }\n\n    var filterIndex = this._findSubFilter(selectionFilter, filter);\n\n    if (filterIndex >= 0) {\n      this._removeFilterByIndex(selectionFilter, filterIndex, isSelectAll);\n\n      return filterIndex;\n    } else {\n      for (var i = 0; i < selectionFilter.length; i++) {\n        if (Array.isArray(selectionFilter[i]) && selectionFilter[i].length > 2) {\n          var _filterIndex = this._removeSameFilter(selectionFilter[i], filter, false, isSelectAll);\n\n          if (_filterIndex >= 0) {\n            if (!selectionFilter[i].length) {\n              this._removeFilterByIndex(selectionFilter, i, isSelectAll);\n            } else if (1 === selectionFilter[i].length) {\n              selectionFilter[i] = selectionFilter[i][0];\n            }\n\n            return _filterIndex;\n          }\n        }\n      }\n\n      return -1;\n    }\n  },\n  getSelectAllState: function getSelectAllState() {\n    var filter = this.options.filter();\n    var selectionFilter = this.options.selectionFilter;\n\n    if (!selectionFilter) {\n      return true;\n    }\n\n    if (!selectionFilter.length) {\n      return false;\n    }\n\n    if (!filter || !filter.length) {\n      return;\n    }\n\n    selectionFilter = this._denormalizeFilter(selectionFilter);\n\n    if (this._isLastSubFilter(selectionFilter, filter)) {\n      return true;\n    }\n\n    if (this._isLastSubFilter(selectionFilter, [\"!\", filter])) {\n      return false;\n    }\n\n    return;\n  }\n});","map":null,"metadata":{},"sourceType":"module"}