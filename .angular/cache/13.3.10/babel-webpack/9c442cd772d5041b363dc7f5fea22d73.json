{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.work_space_month.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { noop } from \"../../../core/utils/common\";\nimport registerComponent from \"../../../core/component_registrator\";\nimport SchedulerWorkSpace from \"./ui.scheduler.work_space.indicator\";\nimport dateUtils from \"../../../core/utils/date\";\nimport { getBoundingRect } from \"../../../core/utils/position\";\nimport { utils } from \"../utils\";\nimport { hasWindow } from \"../../../core/utils/window\";\nimport dxrMonthDateTableLayout from \"../../../renovation/ui/scheduler/workspaces/month/date_table/layout.j\";\nimport { getViewStartByOptions, getCellText } from \"../../../renovation/ui/scheduler/view_model/to_test/views/utils/month\";\nimport { formatWeekday } from \"../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\nimport { VIEWS } from \"../constants\";\nvar MONTH_CLASS = \"dx-scheduler-work-space-month\";\nvar DATE_TABLE_CURRENT_DATE_CLASS = \"dx-scheduler-date-table-current-date\";\nvar DATE_TABLE_CELL_TEXT_CLASS = \"dx-scheduler-date-table-cell-text\";\nvar DATE_TABLE_FIRST_OF_MONTH_CLASS = \"dx-scheduler-date-table-first-of-month\";\nvar DATE_TABLE_OTHER_MONTH_DATE_CLASS = \"dx-scheduler-date-table-other-month\";\nvar toMs = dateUtils.dateToMilliseconds;\n\nvar SchedulerWorkSpaceMonth = /*#__PURE__*/function (_SchedulerWorkSpace) {\n  _inherits(SchedulerWorkSpaceMonth, _SchedulerWorkSpace);\n\n  var _super = _createSuper(SchedulerWorkSpaceMonth);\n\n  function SchedulerWorkSpaceMonth() {\n    _classCallCheck(this, SchedulerWorkSpaceMonth);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SchedulerWorkSpaceMonth, [{\n    key: \"type\",\n    get: function get() {\n      return VIEWS.MONTH;\n    }\n  }, {\n    key: \"_getElementClass\",\n    value: function _getElementClass() {\n      return MONTH_CLASS;\n    }\n  }, {\n    key: \"_getFormat\",\n    value: function _getFormat() {\n      return formatWeekday;\n    }\n  }, {\n    key: \"_getIntervalBetween\",\n    value: function _getIntervalBetween(currentDate) {\n      var firstViewDate = this.getStartViewDate();\n      var timeZoneOffset = dateUtils.getTimezonesDifference(firstViewDate, currentDate);\n      return currentDate.getTime() - (firstViewDate.getTime() - 36e5 * this.option(\"startDayHour\")) - timeZoneOffset;\n    }\n  }, {\n    key: \"_getDateGenerationOptions\",\n    value: function _getDateGenerationOptions() {\n      return _extends({}, _get(_getPrototypeOf(SchedulerWorkSpaceMonth.prototype), \"_getDateGenerationOptions\", this).call(this), {\n        cellCountInDay: 1\n      });\n    }\n  }, {\n    key: \"getCellWidth\",\n    value: function getCellWidth() {\n      var _this = this;\n\n      return this.cache.get(\"cellWidth\", function () {\n        var averageWidth = 0;\n\n        var cells = _this._getCells().slice(0, 7);\n\n        cells.each(function (index, element) {\n          averageWidth += hasWindow() ? getBoundingRect(element).width : 0;\n        });\n        return 0 === cells.length ? void 0 : averageWidth / 7;\n      });\n    }\n  }, {\n    key: \"_insertAllDayRowsIntoDateTable\",\n    value: function _insertAllDayRowsIntoDateTable() {\n      return false;\n    }\n  }, {\n    key: \"_getCellCoordinatesByIndex\",\n    value: function _getCellCoordinatesByIndex(index) {\n      var rowIndex = Math.floor(index / this._getCellCount());\n      var columnIndex = index - this._getCellCount() * rowIndex;\n      return {\n        rowIndex: rowIndex,\n        columnIndex: columnIndex\n      };\n    }\n  }, {\n    key: \"_needCreateCrossScrolling\",\n    value: function _needCreateCrossScrolling() {\n      return this.option(\"crossScrollingEnabled\") || this._isVerticalGroupedWorkSpace();\n    }\n  }, {\n    key: \"_getViewStartByOptions\",\n    value: function _getViewStartByOptions() {\n      return getViewStartByOptions(this.option(\"startDate\"), this.option(\"currentDate\"), this.option(\"intervalCount\"), dateUtils.getFirstMonthDate(this.option(\"startDate\")));\n    }\n  }, {\n    key: \"_updateIndex\",\n    value: function _updateIndex(index) {\n      return index;\n    }\n  }, {\n    key: \"isIndicationAvailable\",\n    value: function isIndicationAvailable() {\n      return false;\n    }\n  }, {\n    key: \"getIntervalDuration\",\n    value: function getIntervalDuration() {\n      return toMs(\"day\");\n    }\n  }, {\n    key: \"getTimePanelWidth\",\n    value: function getTimePanelWidth() {\n      return 0;\n    }\n  }, {\n    key: \"supportAllDayRow\",\n    value: function supportAllDayRow() {\n      return false;\n    }\n  }, {\n    key: \"keepOriginalHours\",\n    value: function keepOriginalHours() {\n      return true;\n    }\n  }, {\n    key: \"getWorkSpaceLeftOffset\",\n    value: function getWorkSpaceLeftOffset() {\n      return 0;\n    }\n  }, {\n    key: \"needApplyCollectorOffset\",\n    value: function needApplyCollectorOffset() {\n      return true;\n    }\n  }, {\n    key: \"_getHeaderDate\",\n    value: function _getHeaderDate() {\n      return this._getViewStartByOptions();\n    }\n  }, {\n    key: \"scrollToTime\",\n    value: function scrollToTime() {\n      return noop();\n    }\n  }, {\n    key: \"renderRAllDayPanel\",\n    value: function renderRAllDayPanel() {}\n  }, {\n    key: \"renderRTimeTable\",\n    value: function renderRTimeTable() {}\n  }, {\n    key: \"renderRDateTable\",\n    value: function renderRDateTable() {\n      utils.renovation.renderComponent(this, this._$dateTable, dxrMonthDateTableLayout, \"renovatedDateTable\", this._getRDateTableProps());\n    }\n  }, {\n    key: \"_createWorkSpaceElements\",\n    value: function _createWorkSpaceElements() {\n      if (this._isVerticalGroupedWorkSpace()) {\n        this._createWorkSpaceScrollableElements();\n      } else {\n        _get(_getPrototypeOf(SchedulerWorkSpaceMonth.prototype), \"_createWorkSpaceElements\", this).call(this);\n      }\n    }\n  }, {\n    key: \"_toggleAllDayVisibility\",\n    value: function _toggleAllDayVisibility() {\n      return noop();\n    }\n  }, {\n    key: \"_changeAllDayVisibility\",\n    value: function _changeAllDayVisibility() {\n      return noop();\n    }\n  }, {\n    key: \"_renderTimePanel\",\n    value: function _renderTimePanel() {\n      return noop();\n    }\n  }, {\n    key: \"_renderAllDayPanel\",\n    value: function _renderAllDayPanel() {\n      return noop();\n    }\n  }, {\n    key: \"_setMonthClassesToCell\",\n    value: function _setMonthClassesToCell($cell, data) {\n      $cell.toggleClass(DATE_TABLE_CURRENT_DATE_CLASS, data.isCurrentDate).toggleClass(DATE_TABLE_FIRST_OF_MONTH_CLASS, data.firstDayOfMonth).toggleClass(DATE_TABLE_OTHER_MONTH_DATE_CLASS, data.otherMonth);\n    }\n  }, {\n    key: \"_createAllDayPanelElements\",\n    value: function _createAllDayPanelElements() {}\n  }, {\n    key: \"_renderTableBody\",\n    value: function _renderTableBody(options) {\n      var _this2 = this;\n\n      options.getCellText = function (rowIndex, columnIndex) {\n        var date = _this2.viewDataProvider.completeViewDataMap[rowIndex][columnIndex].startDate;\n        return getCellText(date, _this2.option(\"intervalCount\"));\n      };\n\n      options.getCellTextClass = DATE_TABLE_CELL_TEXT_CLASS;\n      options.setAdditionalClasses = this._setMonthClassesToCell.bind(this), _get(_getPrototypeOf(SchedulerWorkSpaceMonth.prototype), \"_renderTableBody\", this).call(this, options);\n    }\n  }]);\n\n  return SchedulerWorkSpaceMonth;\n}(SchedulerWorkSpace);\n\nregisterComponent(\"dxSchedulerWorkSpaceMonth\", SchedulerWorkSpaceMonth);\nexport default SchedulerWorkSpaceMonth;","map":null,"metadata":{},"sourceType":"module"}