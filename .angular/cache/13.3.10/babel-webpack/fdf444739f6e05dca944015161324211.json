{"ast":null,"code":"/**\r\n * DevExtreme (esm/exporter/excel/excel.cell_format_helper.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { isDefined } from \"../../core/utils/type\";\nimport tagHelper from \"./excel.tag_helper\";\nimport cellAlignmentHelper from \"./excel.cell_alignment_helper\";\nimport fillHelper from \"./excel.fill_helper\";\nimport fontHelper from \"./excel.font_helper\";\nvar cellFormatHelper = {\n  tryCreateTag: function tryCreateTag(sourceObj, sharedItemsContainer) {\n    var result = null;\n\n    if (isDefined(sourceObj)) {\n      var numberFormatId;\n\n      if (\"number\" === typeof sourceObj.numberFormat) {\n        numberFormatId = sourceObj.numberFormat;\n      } else {\n        numberFormatId = sharedItemsContainer.registerNumberFormat(sourceObj.numberFormat);\n      }\n\n      var fill = sourceObj.fill;\n\n      if (!isDefined(fill)) {\n        fill = fillHelper.tryCreateFillFromSimpleFormat(sourceObj);\n      }\n\n      result = {\n        numberFormatId: numberFormatId,\n        alignment: cellAlignmentHelper.tryCreateTag(sourceObj.alignment),\n        fontId: sharedItemsContainer.registerFont(sourceObj.font),\n        fillId: sharedItemsContainer.registerFill(fill)\n      };\n\n      if (cellFormatHelper.isEmpty(result)) {\n        result = null;\n      }\n    }\n\n    return result;\n  },\n  copy: function copy(source) {\n    var result;\n\n    if (null === source) {\n      result = null;\n    } else if (isDefined(source)) {\n      result = {};\n\n      if (void 0 !== source.numberFormat) {\n        result.numberFormat = source.numberFormat;\n      }\n\n      if (void 0 !== source.fill) {\n        result.fill = fillHelper.copy(source.fill);\n      } else {\n        fillHelper.copySimpleFormat(source, result);\n      }\n\n      if (void 0 !== source.alignment) {\n        result.alignment = cellAlignmentHelper.copy(source.alignment);\n      }\n\n      if (void 0 !== source.font) {\n        result.font = fontHelper.copy(source.font);\n      }\n    }\n\n    return result;\n  },\n  areEqual: function areEqual(leftTag, rightTag) {\n    return cellFormatHelper.isEmpty(leftTag) && cellFormatHelper.isEmpty(rightTag) || isDefined(leftTag) && isDefined(rightTag) && leftTag.fontId === rightTag.fontId && leftTag.numberFormatId === rightTag.numberFormatId && leftTag.fillId === rightTag.fillId && cellAlignmentHelper.areEqual(leftTag.alignment, rightTag.alignment);\n  },\n  isEmpty: function isEmpty(tag) {\n    return !isDefined(tag) || !isDefined(tag.fontId) && !isDefined(tag.numberFormatId) && !isDefined(tag.fillId) && cellAlignmentHelper.isEmpty(tag.alignment);\n  },\n  toXml: function toXml(tag) {\n    var isAlignmentEmpty = cellAlignmentHelper.isEmpty(tag.alignment);\n    var applyNumberFormat;\n\n    if (isDefined(tag.numberFormatId)) {\n      applyNumberFormat = tag.numberFormatId > 0 ? 1 : 0;\n    }\n\n    return tagHelper.toXml(\"xf\", {\n      xfId: 0,\n      applyAlignment: isAlignmentEmpty ? null : 1,\n      fontId: tag.fontId,\n      applyNumberFormat: applyNumberFormat,\n      fillId: tag.fillId,\n      numFmtId: tag.numberFormatId\n    }, isAlignmentEmpty ? null : cellAlignmentHelper.toXml(tag.alignment));\n  }\n};\nexport default cellFormatHelper;","map":null,"metadata":{},"sourceType":"module"}