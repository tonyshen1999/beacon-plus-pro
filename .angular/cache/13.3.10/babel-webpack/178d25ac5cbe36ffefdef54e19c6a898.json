{"ast":null,"code":"import { _CI, _HI, _M, _MCCC, _ME, _MFCC, _MP, _MR, EMPTY_OBJ, render, _RFC as renderFunctionalComponent } from 'inferno';\nimport { isFunction, isInvalid, isNull, isNullOrUndef, throwError } from './shared';\n\nfunction isSameInnerHTML(dom, innerHTML) {\n  var tempdom = document.createElement('i');\n  tempdom.innerHTML = innerHTML;\n  return tempdom.innerHTML === dom.innerHTML;\n}\n\nfunction findLastDOMFromVNode(vNode) {\n  var flags;\n  var children;\n\n  while (vNode) {\n    flags = vNode.flags;\n\n    if (flags & 2033\n    /* DOMRef */\n    ) {\n      return vNode.dom;\n    }\n\n    children = vNode.children;\n\n    if (flags & 8192\n    /* Fragment */\n    ) {\n      vNode = vNode.childFlags === 2\n      /* HasVNodeChildren */\n      ? children : children[children.length - 1];\n    } else if (flags & 4\n    /* ComponentClass */\n    ) {\n      vNode = children.$LI;\n    } else {\n      vNode = children;\n    }\n  }\n\n  return null;\n}\n\nfunction isSamePropsInnerHTML(dom, props) {\n  return Boolean(props && props.dangerouslySetInnerHTML && props.dangerouslySetInnerHTML.__html && isSameInnerHTML(dom, props.dangerouslySetInnerHTML.__html));\n}\n\nfunction hydrateComponent(vNode, parentDOM, dom, context, isSVG, isClass, lifecycle) {\n  var type = vNode.type;\n  var ref = vNode.ref;\n  var props = vNode.props || EMPTY_OBJ;\n  var currentNode;\n\n  if (isClass) {\n    var instance = _CI(vNode, type, props, context, isSVG, lifecycle);\n\n    var input = instance.$LI;\n    currentNode = hydrateVNode(input, parentDOM, dom, instance.$CX, isSVG, lifecycle);\n\n    _MCCC(ref, instance, lifecycle);\n  } else {\n    var _input = _HI(renderFunctionalComponent(vNode, context));\n\n    currentNode = hydrateVNode(_input, parentDOM, dom, context, isSVG, lifecycle);\n    vNode.children = _input;\n\n    _MFCC(vNode, lifecycle);\n  }\n\n  return currentNode;\n}\n\nfunction hydrateChildren(parentVNode, parentNode, currentNode, context, isSVG, lifecycle) {\n  var childFlags = parentVNode.childFlags;\n  var children = parentVNode.children;\n  var props = parentVNode.props;\n  var flags = parentVNode.flags;\n\n  if (childFlags !== 1\n  /* HasInvalidChildren */\n  ) {\n    if (childFlags === 2\n    /* HasVNodeChildren */\n    ) {\n      if (isNull(currentNode)) {\n        _M(children, parentNode, context, isSVG, null, lifecycle);\n      } else {\n        currentNode = hydrateVNode(children, parentNode, currentNode, context, isSVG, lifecycle);\n        currentNode = currentNode ? currentNode.nextSibling : null;\n      }\n    } else if (childFlags === 16\n    /* HasTextChildren */\n    ) {\n      if (isNull(currentNode)) {\n        parentNode.appendChild(document.createTextNode(children));\n      } else if (parentNode.childNodes.length !== 1 || currentNode.nodeType !== 3) {\n        parentNode.textContent = children;\n      } else if (currentNode.nodeValue !== children) {\n        currentNode.nodeValue = children;\n      }\n\n      currentNode = null;\n    } else if (childFlags & 12\n    /* MultipleChildren */\n    ) {\n      var prevVNodeIsTextNode = false;\n\n      for (var i = 0, len = children.length; i < len; ++i) {\n        var child = children[i];\n\n        if (isNull(currentNode) || prevVNodeIsTextNode && (child.flags & 16\n        /* Text */\n        ) > 0) {\n          _M(child, parentNode, context, isSVG, currentNode, lifecycle);\n        } else {\n          currentNode = hydrateVNode(child, parentNode, currentNode, context, isSVG, lifecycle);\n          currentNode = currentNode ? currentNode.nextSibling : null;\n        }\n\n        prevVNodeIsTextNode = (child.flags & 16\n        /* Text */\n        ) > 0;\n      }\n    } // clear any other DOM nodes, there should be only a single entry for the root\n\n\n    if ((flags & 8192\n    /* Fragment */\n    ) === 0) {\n      var nextSibling = null;\n\n      while (currentNode) {\n        nextSibling = currentNode.nextSibling;\n        parentNode.removeChild(currentNode);\n        currentNode = nextSibling;\n      }\n    }\n  } else if (!isNull(parentNode.firstChild) && !isSamePropsInnerHTML(parentNode, props)) {\n    parentNode.textContent = ''; // dom has content, but VNode has no children remove everything from DOM\n\n    if (flags & 448\n    /* FormElement */\n    ) {\n      // If element is form element, we need to clear defaultValue also\n      parentNode.defaultValue = '';\n    }\n  }\n}\n\nfunction hydrateElement(vNode, parentDOM, dom, context, isSVG, lifecycle) {\n  var props = vNode.props;\n  var className = vNode.className;\n  var flags = vNode.flags;\n  var ref = vNode.ref;\n  isSVG = isSVG || (flags & 32\n  /* SvgElement */\n  ) > 0;\n\n  if (dom.nodeType !== 1) {\n    _ME(vNode, null, context, isSVG, null, lifecycle);\n\n    parentDOM.replaceChild(vNode.dom, dom);\n  } else {\n    vNode.dom = dom;\n    hydrateChildren(vNode, dom, dom.firstChild, context, isSVG, lifecycle);\n\n    if (!isNull(props)) {\n      _MP(vNode, flags, props, dom, isSVG);\n    }\n\n    if (isNullOrUndef(className)) {\n      if (dom.className !== '') {\n        dom.removeAttribute('class');\n      }\n    } else if (isSVG) {\n      dom.setAttribute('class', className);\n    } else {\n      dom.className = className;\n    }\n\n    _MR(ref, dom, lifecycle);\n  }\n\n  return vNode.dom;\n}\n\nfunction hydrateText(vNode, parentDOM, dom) {\n  if (dom.nodeType !== 3) {\n    parentDOM.replaceChild(vNode.dom = document.createTextNode(vNode.children), dom);\n  } else {\n    var text = vNode.children;\n\n    if (dom.nodeValue !== text) {\n      dom.nodeValue = text;\n    }\n\n    vNode.dom = dom;\n  }\n\n  return vNode.dom;\n}\n\nfunction hydrateFragment(vNode, parentDOM, dom, context, isSVG, lifecycle) {\n  var children = vNode.children;\n\n  if (vNode.childFlags === 2\n  /* HasVNodeChildren */\n  ) {\n    hydrateText(children, parentDOM, dom);\n    return children.dom;\n  }\n\n  hydrateChildren(vNode, parentDOM, dom, context, isSVG, lifecycle);\n  return findLastDOMFromVNode(children[children.length - 1]);\n}\n\nfunction hydrateVNode(vNode, parentDOM, currentDom, context, isSVG, lifecycle) {\n  var flags = vNode.flags |= 16384\n  /* InUse */\n  ;\n\n  if (flags & 14\n  /* Component */\n  ) {\n    return hydrateComponent(vNode, parentDOM, currentDom, context, isSVG, (flags & 4\n    /* ComponentClass */\n    ) > 0, lifecycle);\n  }\n\n  if (flags & 481\n  /* Element */\n  ) {\n    return hydrateElement(vNode, parentDOM, currentDom, context, isSVG, lifecycle);\n  }\n\n  if (flags & 16\n  /* Text */\n  ) {\n    return hydrateText(vNode, parentDOM, currentDom);\n  }\n\n  if (flags & 512\n  /* Void */\n  ) {\n    return vNode.dom = currentDom;\n  }\n\n  if (flags & 8192\n  /* Fragment */\n  ) {\n    return hydrateFragment(vNode, parentDOM, currentDom, context, isSVG, lifecycle);\n  }\n\n  throwError();\n  return null;\n}\n\nexport function hydrate(input, parentDOM, callback) {\n  var dom = parentDOM.firstChild;\n\n  if (isNull(dom)) {\n    render(input, parentDOM, callback);\n  } else {\n    var lifecycle = [];\n\n    if (!isInvalid(input)) {\n      dom = hydrateVNode(input, parentDOM, dom, {}, false, lifecycle);\n    } // clear any other DOM nodes, there should be only a single entry for the root\n\n\n    while (dom && (dom = dom.nextSibling)) {\n      parentDOM.removeChild(dom);\n    }\n\n    if (lifecycle.length > 0) {\n      var listener;\n\n      while ((listener = lifecycle.shift()) !== undefined) {\n        listener();\n      }\n    }\n  }\n\n  parentDOM.$V = input;\n\n  if (isFunction(callback)) {\n    callback();\n  }\n}","map":null,"metadata":{},"sourceType":"module"}