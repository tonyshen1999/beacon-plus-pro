{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.data_controller.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport modules from \"./ui.grid_core.modules\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nimport ArrayStore from \"../../data/array_store\";\nimport CustomStore from \"../../data/custom_store\";\nimport errors from \"../widget/ui.errors\";\nimport { noop, deferRender, equalByValue } from \"../../core/utils/common\";\nimport { each } from \"../../core/utils/iterator\";\nimport { isDefined } from \"../../core/utils/type\";\nimport { extend } from \"../../core/utils/extend\";\nimport DataHelperMixin from \"../../data_helper\";\nimport { when, Deferred } from \"../../core/utils/deferred\";\nimport { findChanges } from \"../../core/utils/array_compare\";\nexport var dataControllerModule = {\n  defaultOptions: function defaultOptions() {\n    return {\n      loadingTimeout: 0,\n      dataSource: null,\n      cacheEnabled: true,\n      repaintChangesOnly: false,\n      highlightChanges: false,\n      onDataErrorOccurred: null,\n      remoteOperations: \"auto\",\n      paging: {\n        enabled: true,\n        pageSize: void 0,\n        pageIndex: void 0\n      }\n    };\n  },\n  controllers: {\n    data: modules.Controller.inherit({}).include(DataHelperMixin).inherit(function () {\n      var changePaging = function changePaging(that, optionName, value) {\n        var dataSource = that._dataSource;\n\n        if (dataSource) {\n          if (void 0 !== value) {\n            var oldValue = that._getPagingOptionValue(optionName);\n\n            if (oldValue !== value) {\n              if (\"pageSize\" === optionName) {\n                dataSource.pageIndex(0);\n              }\n\n              dataSource[optionName](value);\n              that._skipProcessingPagingChange = true;\n              that.option(\"paging.\" + optionName, value);\n              that._skipProcessingPagingChange = false;\n              var pageIndex = dataSource.pageIndex();\n              return dataSource[\"pageIndex\" === optionName ? \"load\" : \"reload\"]().done(function () {\n                return that.pageChanged.fire(pageIndex);\n              });\n            }\n\n            return Deferred().resolve().promise();\n          }\n\n          return dataSource[optionName]();\n        }\n\n        return 0;\n      };\n\n      var members = {\n        init: function init() {\n          var _this = this;\n\n          var that = this;\n          that._items = [];\n          that._cachedProcessedItems = null;\n          that._columnsController = that.getController(\"columns\");\n          that._currentOperationTypes = null;\n\n          that._dataChangedHandler = function (e) {\n            that._currentOperationTypes = _this._dataSource.operationTypes();\n\n            that._handleDataChanged(e);\n\n            that._currentOperationTypes = null;\n          };\n\n          that._columnsChangedHandler = that._handleColumnsChanged.bind(that);\n          that._loadingChangedHandler = that._handleLoadingChanged.bind(that);\n          that._loadErrorHandler = that._handleLoadError.bind(that);\n          that._customizeStoreLoadOptionsHandler = that._handleCustomizeStoreLoadOptions.bind(that);\n          that._changingHandler = that._handleChanging.bind(that);\n          that._dataPushedHandler = that._handleDataPushed.bind(that);\n\n          that._columnsController.columnsChanged.add(that._columnsChangedHandler);\n\n          that._isLoading = false;\n          that._isCustomLoading = false;\n          that._repaintChangesOnly = void 0;\n          that._changes = [];\n          that.createAction(\"onDataErrorOccurred\");\n          that.dataErrorOccurred.add(function (error) {\n            return that.executeAction(\"onDataErrorOccurred\", {\n              error: error\n            });\n          });\n\n          that._refreshDataSource();\n        },\n        _getPagingOptionValue: function _getPagingOptionValue(optionName) {\n          return this._dataSource[optionName]();\n        },\n        callbackNames: function callbackNames() {\n          return [\"changed\", \"loadingChanged\", \"dataErrorOccurred\", \"pageChanged\", \"dataSourceChanged\", \"pushed\"];\n        },\n        callbackFlags: function callbackFlags(name) {\n          if (\"dataErrorOccurred\" === name) {\n            return {\n              stopOnFalse: true\n            };\n          }\n        },\n        publicMethods: function publicMethods() {\n          return [\"beginCustomLoading\", \"endCustomLoading\", \"refresh\", \"filter\", \"clearFilter\", \"getCombinedFilter\", \"keyOf\", \"byKey\", \"getDataByKeys\", \"pageIndex\", \"pageSize\", \"pageCount\", \"totalCount\", \"_disposeDataSource\", \"getKeyByRowIndex\", \"getRowIndexByKey\", \"getDataSource\", \"getVisibleRows\", \"repaintRows\"];\n        },\n        reset: function reset() {\n          this._columnsController.reset();\n\n          this._items = [];\n\n          this._refreshDataSource();\n        },\n        optionChanged: function optionChanged(args) {\n          var that = this;\n          var dataSource;\n\n          function handled() {\n            args.handled = true;\n          }\n\n          if (\"dataSource\" === args.name && args.name === args.fullName && (args.value === args.previousValue || that.option(\"columns\") && Array.isArray(args.value) && Array.isArray(args.previousValue))) {\n            var _this$_dataSource;\n\n            var isValueChanged = args.value !== args.previousValue;\n\n            if (isValueChanged) {\n              var store = that.store();\n\n              if (store) {\n                store._array = args.value;\n              }\n            }\n\n            handled();\n            var isParasiteChange = Array.isArray(args.value) && !isValueChanged && (null === (_this$_dataSource = this._dataSource) || void 0 === _this$_dataSource ? void 0 : _this$_dataSource.isLoading());\n\n            if (!isParasiteChange) {\n              that.refresh(that.option(\"repaintChangesOnly\"));\n            }\n\n            return;\n          }\n\n          switch (args.name) {\n            case \"cacheEnabled\":\n            case \"repaintChangesOnly\":\n            case \"highlightChanges\":\n            case \"loadingTimeout\":\n              handled();\n              break;\n\n            case \"remoteOperations\":\n            case \"keyExpr\":\n            case \"dataSource\":\n            case \"scrolling\":\n              handled();\n              that.reset();\n              break;\n\n            case \"paging\":\n              dataSource = that.dataSource();\n\n              if (dataSource && that._setPagingOptions(dataSource)) {\n                var pageIndex = dataSource.pageIndex();\n                dataSource.load().done(function () {\n                  return that.pageChanged.fire(pageIndex);\n                });\n              }\n\n              handled();\n              break;\n\n            case \"rtlEnabled\":\n              that.reset();\n              break;\n\n            case \"columns\":\n              dataSource = that.dataSource();\n\n              if (dataSource && dataSource.isLoading() && args.name === args.fullName) {\n                this._useSortingGroupingFromColumns = true;\n                dataSource.load();\n              }\n\n              break;\n\n            default:\n              that.callBase(args);\n          }\n        },\n        isReady: function isReady() {\n          return !this._isLoading;\n        },\n        getDataSource: function getDataSource() {\n          return this._dataSource && this._dataSource._dataSource;\n        },\n        getCombinedFilter: function getCombinedFilter(returnDataField) {\n          return this.combinedFilter(void 0, returnDataField);\n        },\n        combinedFilter: function combinedFilter(filter, returnDataField) {\n          var dataSource = this._dataSource;\n          var columnsController = this._columnsController;\n\n          if (dataSource) {\n            if (void 0 === filter) {\n              filter = dataSource.filter();\n            }\n\n            var additionalFilter = this._calculateAdditionalFilter();\n\n            if (additionalFilter) {\n              if (columnsController.isDataSourceApplied() || columnsController.isAllDataTypesDefined()) {\n                filter = gridCoreUtils.combineFilters([additionalFilter, filter]);\n              }\n            }\n\n            filter = columnsController.updateFilter(filter, returnDataField || dataSource.remoteOperations().filtering);\n          }\n\n          return filter;\n        },\n        waitReady: function waitReady() {\n          if (this._updateLockCount) {\n            this._readyDeferred = new Deferred();\n            return this._readyDeferred;\n          }\n\n          return when();\n        },\n        _endUpdateCore: function _endUpdateCore() {\n          var changes = this._changes;\n\n          if (changes.length) {\n            this._changes = [];\n            var repaintChangesOnly = changes.every(function (change) {\n              return change.repaintChangesOnly;\n            });\n            this.updateItems(1 === changes.length ? changes[0] : {\n              repaintChangesOnly: repaintChangesOnly\n            });\n          }\n\n          if (this._readyDeferred) {\n            this._readyDeferred.resolve();\n\n            this._readyDeferred = null;\n          }\n        },\n        _handleCustomizeStoreLoadOptions: function _handleCustomizeStoreLoadOptions(e) {\n          var _storeLoadOptions$fil;\n\n          var columnsController = this._columnsController;\n          var dataSource = this._dataSource;\n          var storeLoadOptions = e.storeLoadOptions;\n\n          if (e.isCustomLoading && !storeLoadOptions.isLoadingAll) {\n            return;\n          }\n\n          storeLoadOptions.filter = this.combinedFilter(storeLoadOptions.filter);\n\n          if (1 === (null === (_storeLoadOptions$fil = storeLoadOptions.filter) || void 0 === _storeLoadOptions$fil ? void 0 : _storeLoadOptions$fil.length) && \"!\" === storeLoadOptions.filter[0]) {\n            e.data = [];\n            e.extra = e.extra || {};\n            e.extra.totalCount = 0;\n          }\n\n          if (!columnsController.isDataSourceApplied()) {\n            columnsController.updateColumnDataTypes(dataSource);\n          }\n\n          this._columnsUpdating = true;\n          columnsController.updateSortingGrouping(dataSource, !this._useSortingGroupingFromColumns);\n          this._columnsUpdating = false;\n          storeLoadOptions.sort = columnsController.getSortDataSourceParameters();\n          storeLoadOptions.group = columnsController.getGroupDataSourceParameters();\n          dataSource.sort(storeLoadOptions.sort);\n          dataSource.group(storeLoadOptions.group);\n          storeLoadOptions.sort = columnsController.getSortDataSourceParameters(!dataSource.remoteOperations().sorting);\n          e.group = columnsController.getGroupDataSourceParameters(!dataSource.remoteOperations().grouping);\n        },\n        _handleColumnsChanged: function _handleColumnsChanged(e) {\n          var that = this;\n          var changeTypes = e.changeTypes;\n          var optionNames = e.optionNames;\n          var filterValue;\n          var filterValues;\n          var filterApplied;\n\n          if (changeTypes.sorting || changeTypes.grouping) {\n            if (that._dataSource && !that._columnsUpdating) {\n              that._dataSource.group(that._columnsController.getGroupDataSourceParameters());\n\n              that._dataSource.sort(that._columnsController.getSortDataSourceParameters());\n\n              that.reload();\n            }\n          } else if (changeTypes.columns) {\n            filterValues = that._columnsController.columnOption(e.columnIndex, \"filterValues\");\n\n            if (optionNames.filterValues || optionNames.filterType && Array.isArray(filterValues) || optionNames.filterValue || optionNames.selectedFilterOperation || optionNames.allowFiltering) {\n              filterValue = that._columnsController.columnOption(e.columnIndex, \"filterValue\");\n\n              if (Array.isArray(filterValues) || void 0 === e.columnIndex || isDefined(filterValue) || !optionNames.selectedFilterOperation || optionNames.filterValue) {\n                that._applyFilter();\n\n                filterApplied = true;\n              }\n            }\n\n            if (!that._needApplyFilter && !gridCoreUtils.checkChanges(optionNames, [\"width\", \"visibleWidth\", \"filterValue\", \"bufferedFilterValue\", \"selectedFilterOperation\", \"filterValues\", \"filterType\"])) {\n              that._columnsController.columnsChanged.add(function updateItemsHandler() {\n                that._columnsController.columnsChanged.remove(updateItemsHandler);\n\n                that.updateItems({\n                  virtualColumnsScrolling: e.changeTypes.virtualColumnsScrolling\n                });\n              });\n            }\n\n            if (isDefined(optionNames.visible)) {\n              var column = that._columnsController.columnOption(e.columnIndex);\n\n              if (column && (isDefined(column.filterValue) || isDefined(column.filterValues))) {\n                that._applyFilter();\n\n                filterApplied = true;\n              }\n            }\n          }\n\n          if (!filterApplied && changeTypes.filtering) {\n            that.reload();\n          }\n        },\n        _handleDataChanged: function _handleDataChanged(e) {\n          var that = this;\n          var dataSource = that._dataSource;\n          var columnsController = that._columnsController;\n          var isAsyncDataSourceApplying = false;\n          this._useSortingGroupingFromColumns = false;\n\n          if (dataSource && !that._isDataSourceApplying) {\n            that._isDataSourceApplying = true;\n            when(that._columnsController.applyDataSource(dataSource)).done(function () {\n              if (that._isLoading) {\n                that._handleLoadingChanged(false);\n              }\n\n              if (isAsyncDataSourceApplying && e && e.isDelayed) {\n                e.isDelayed = false;\n              }\n\n              that._isDataSourceApplying = false;\n              var needApplyFilter = that._needApplyFilter;\n              that._needApplyFilter = false;\n\n              if (needApplyFilter && !that._isAllDataTypesDefined && (additionalFilter = that._calculateAdditionalFilter(), additionalFilter && additionalFilter.length)) {\n                errors.log(\"W1005\", that.component.NAME);\n\n                that._applyFilter();\n              } else {\n                that.updateItems(e, true);\n              }\n\n              var additionalFilter;\n            }).fail(function () {\n              that._isDataSourceApplying = false;\n            });\n\n            if (that._isDataSourceApplying) {\n              isAsyncDataSourceApplying = true;\n\n              that._handleLoadingChanged(true);\n            }\n\n            that._needApplyFilter = !that._columnsController.isDataSourceApplied();\n            that._isAllDataTypesDefined = columnsController.isAllDataTypesDefined();\n          }\n        },\n        _handleLoadingChanged: function _handleLoadingChanged(isLoading) {\n          this._isLoading = isLoading;\n\n          this._fireLoadingChanged();\n        },\n        _handleLoadError: function _handleLoadError(e) {\n          this.dataErrorOccurred.fire(e);\n        },\n        _handleDataPushed: function _handleDataPushed(changes) {\n          this.pushed.fire(changes);\n        },\n        fireError: function fireError() {\n          this.dataErrorOccurred.fire(errors.Error.apply(errors, arguments));\n        },\n        _setPagingOptions: function _setPagingOptions(dataSource) {\n          var pageIndex = this.option(\"paging.pageIndex\");\n          var pageSize = this.option(\"paging.pageSize\");\n          var pagingEnabled = this.option(\"paging.enabled\");\n          var scrollingMode = this.option(\"scrolling.mode\");\n          var appendMode = \"infinite\" === scrollingMode;\n          var virtualMode = \"virtual\" === scrollingMode;\n          var paginate = pagingEnabled || virtualMode || appendMode;\n          var isChanged = false;\n          dataSource.requireTotalCount(!appendMode);\n\n          if (void 0 !== pagingEnabled && dataSource.paginate() !== paginate) {\n            dataSource.paginate(paginate);\n            isChanged = true;\n          }\n\n          if (void 0 !== pageSize && dataSource.pageSize() !== pageSize) {\n            dataSource.pageSize(pageSize);\n            isChanged = true;\n          }\n\n          if (void 0 !== pageIndex && dataSource.pageIndex() !== pageIndex) {\n            dataSource.pageIndex(pageIndex);\n            isChanged = true;\n          }\n\n          return isChanged;\n        },\n        _getSpecificDataSourceOption: function _getSpecificDataSourceOption() {\n          var dataSource = this.option(\"dataSource\");\n\n          if (Array.isArray(dataSource)) {\n            return {\n              store: {\n                type: \"array\",\n                data: dataSource,\n                key: this.option(\"keyExpr\")\n              }\n            };\n          }\n\n          return dataSource;\n        },\n        _initDataSource: function _initDataSource() {\n          var dataSource = this.option(\"dataSource\");\n          var oldDataSource = this._dataSource;\n          this.callBase();\n          dataSource = this._dataSource;\n          this._useSortingGroupingFromColumns = true;\n          this._cachedProcessedItems = null;\n\n          if (dataSource) {\n            this._setPagingOptions(dataSource);\n\n            this.setDataSource(dataSource);\n          } else if (oldDataSource) {\n            this.updateItems();\n          }\n        },\n        _loadDataSource: function _loadDataSource() {\n          var dataSource = this._dataSource;\n          var result = new Deferred();\n          when(this._columnsController.refresh(true)).always(function () {\n            if (dataSource) {\n              dataSource.load().done(result.resolve).fail(result.reject);\n            } else {\n              result.resolve();\n            }\n          });\n          return result.promise();\n        },\n        _beforeProcessItems: function _beforeProcessItems(items) {\n          return items.slice(0);\n        },\n        getRowIndexDelta: function getRowIndexDelta() {\n          return 0;\n        },\n        _processItems: function _processItems(items, change) {\n          var that = this;\n          var rowIndexDelta = that.getRowIndexDelta();\n          var changeType = change.changeType;\n\n          var visibleColumns = that._columnsController.getVisibleColumns(null, \"loadingAll\" === changeType);\n\n          var visibleItems = that._items;\n          var lastVisibleItem = \"append\" === changeType && visibleItems.length > 0 ? visibleItems[visibleItems.length - 1] : null;\n          var dataIndex = isDefined(null === lastVisibleItem || void 0 === lastVisibleItem ? void 0 : lastVisibleItem.dataIndex) ? lastVisibleItem.dataIndex + 1 : 0;\n          var options = {\n            visibleColumns: visibleColumns,\n            dataIndex: dataIndex\n          };\n          var result = [];\n          each(items, function (index, item) {\n            if (isDefined(item)) {\n              options.rowIndex = index - rowIndexDelta;\n              item = that._processItem(item, options);\n              result.push(item);\n            }\n          });\n          return result;\n        },\n        _processItem: function _processItem(item, options) {\n          item = this._generateDataItem(item, options);\n          item = this._processDataItem(item, options);\n          item.dataIndex = options.dataIndex++;\n          return item;\n        },\n        _generateDataItem: function _generateDataItem(data) {\n          return {\n            rowType: \"data\",\n            data: data,\n            key: this.keyOf(data)\n          };\n        },\n        _processDataItem: function _processDataItem(dataItem, options) {\n          dataItem.values = this.generateDataValues(dataItem.data, options.visibleColumns);\n          return dataItem;\n        },\n        generateDataValues: function generateDataValues(data, columns, isModified) {\n          var values = [];\n          var value;\n\n          for (var i = 0; i < columns.length; i++) {\n            var column = columns[i];\n            value = isModified ? void 0 : null;\n\n            if (!column.command) {\n              if (column.calculateCellValue) {\n                value = column.calculateCellValue(data);\n              } else if (column.dataField) {\n                value = data[column.dataField];\n              }\n            }\n\n            values.push(value);\n          }\n\n          return values;\n        },\n        _applyChange: function _applyChange(change) {\n          if (\"update\" === change.changeType) {\n            this._applyChangeUpdate(change);\n          } else if (this.items().length && change.repaintChangesOnly && \"refresh\" === change.changeType) {\n            this._applyChangesOnly(change);\n          } else if (\"refresh\" === change.changeType) {\n            this._applyChangeFull(change);\n          }\n        },\n        _applyChangeFull: function _applyChangeFull(change) {\n          this._items = change.items.slice(0);\n        },\n        _getRowIndices: function _getRowIndices(change) {\n          var rowIndices = change.rowIndices.slice(0);\n          var rowIndexDelta = this.getRowIndexDelta();\n          rowIndices.sort(function (a, b) {\n            return a - b;\n          });\n\n          for (var i = 0; i < rowIndices.length; i++) {\n            var correctedRowIndex = rowIndices[i];\n\n            if (change.allowInvisibleRowIndices) {\n              correctedRowIndex += rowIndexDelta;\n            }\n\n            if (correctedRowIndex < 0) {\n              rowIndices.splice(i, 1);\n              i--;\n            }\n          }\n\n          return rowIndices;\n        },\n        _applyChangeUpdate: function _applyChangeUpdate(change) {\n          var that = this;\n          var items = change.items;\n\n          var rowIndices = that._getRowIndices(change);\n\n          var rowIndexDelta = that.getRowIndexDelta();\n          var repaintChangesOnly = that.option(\"repaintChangesOnly\");\n          var prevIndex = -1;\n          var rowIndexCorrection = 0;\n          var changeType;\n          change.items = [];\n          change.rowIndices = [];\n          change.columnIndices = [];\n          change.changeTypes = [];\n\n          var equalItems = function equalItems(item1, item2, strict) {\n            var result = item1 && item2 && equalByValue(item1.key, item2.key);\n\n            if (result && strict) {\n              result = item1.rowType === item2.rowType && (\"detail\" !== item2.rowType || item1.isEditing === item2.isEditing);\n            }\n\n            return result;\n          };\n\n          each(rowIndices, function (index, rowIndex) {\n            var columnIndices;\n            rowIndex += rowIndexCorrection + rowIndexDelta;\n\n            if (prevIndex === rowIndex) {\n              return;\n            }\n\n            prevIndex = rowIndex;\n            var oldItem = that._items[rowIndex];\n            var oldNextItem = that._items[rowIndex + 1];\n            var newItem = items[rowIndex];\n            var newNextItem = items[rowIndex + 1];\n            var strict = equalItems(oldItem, oldNextItem) || equalItems(newItem, newNextItem);\n\n            if (newItem) {\n              newItem.rowIndex = rowIndex;\n              change.items.push(newItem);\n            }\n\n            if (oldItem && newItem && equalItems(oldItem, newItem, strict)) {\n              changeType = \"update\";\n              that._items[rowIndex] = newItem;\n\n              if (oldItem.visible !== newItem.visible) {\n                change.items.splice(-1, 1, {\n                  visible: newItem.visible\n                });\n              } else if (repaintChangesOnly && !change.isFullUpdate) {\n                columnIndices = that._partialUpdateRow(oldItem, newItem, rowIndex - rowIndexDelta);\n              }\n            } else if (newItem && !oldItem || newNextItem && equalItems(oldItem, newNextItem, strict)) {\n              changeType = \"insert\";\n\n              that._items.splice(rowIndex, 0, newItem);\n\n              rowIndexCorrection++;\n            } else if (oldItem && !newItem || oldNextItem && equalItems(newItem, oldNextItem, strict)) {\n              changeType = \"remove\";\n\n              that._items.splice(rowIndex, 1);\n\n              rowIndexCorrection--;\n              prevIndex = -1;\n            } else if (newItem) {\n              changeType = \"update\";\n              that._items[rowIndex] = newItem;\n            } else {\n              return;\n            }\n\n            change.rowIndices.push(rowIndex - rowIndexDelta);\n            change.changeTypes.push(changeType);\n            change.columnIndices.push(columnIndices);\n          });\n        },\n        _isCellChanged: function _isCellChanged(oldRow, newRow, visibleRowIndex, columnIndex, isLiveUpdate) {\n          if (JSON.stringify(oldRow.values[columnIndex]) !== JSON.stringify(newRow.values[columnIndex])) {\n            return true;\n          }\n\n          function isCellModified(row, columnIndex) {\n            return row.modifiedValues ? void 0 !== row.modifiedValues[columnIndex] : false;\n          }\n\n          if (isCellModified(oldRow, columnIndex) !== isCellModified(newRow, columnIndex)) {\n            return true;\n          }\n\n          return false;\n        },\n        _getChangedColumnIndices: function _getChangedColumnIndices(oldItem, newItem, visibleRowIndex, isLiveUpdate) {\n          var columnIndices;\n\n          if (oldItem.rowType === newItem.rowType) {\n            if (\"group\" !== newItem.rowType && \"groupFooter\" !== newItem.rowType) {\n              columnIndices = [];\n\n              if (\"detail\" !== newItem.rowType) {\n                for (var columnIndex = 0; columnIndex < oldItem.values.length; columnIndex++) {\n                  if (this._isCellChanged(oldItem, newItem, visibleRowIndex, columnIndex, isLiveUpdate)) {\n                    columnIndices.push(columnIndex);\n                  }\n                }\n              }\n            }\n\n            if (\"group\" === newItem.rowType && newItem.isExpanded === oldItem.isExpanded && oldItem.cells) {\n              columnIndices = oldItem.cells.map(function (cell, index) {\n                var _cell$column;\n\n                return \"groupExpand\" !== (null === (_cell$column = cell.column) || void 0 === _cell$column ? void 0 : _cell$column.type) ? index : -1;\n              }).filter(function (index) {\n                return index >= 0;\n              });\n            }\n          }\n\n          return columnIndices;\n        },\n        _partialUpdateRow: function _partialUpdateRow(oldItem, newItem, visibleRowIndex, isLiveUpdate) {\n          var _changedColumnIndices;\n\n          var changedColumnIndices = this._getChangedColumnIndices(oldItem, newItem, visibleRowIndex, isLiveUpdate);\n\n          if (null !== (_changedColumnIndices = changedColumnIndices) && void 0 !== _changedColumnIndices && _changedColumnIndices.length && this.option(\"dataRowTemplate\")) {\n            changedColumnIndices = void 0;\n          }\n\n          if (changedColumnIndices) {\n            oldItem.cells && oldItem.cells.forEach(function (cell, columnIndex) {\n              var isCellChanged = changedColumnIndices.indexOf(columnIndex) >= 0;\n\n              if (!isCellChanged && cell && cell.update) {\n                cell.update(newItem);\n              }\n            });\n            newItem.update = oldItem.update;\n            newItem.watch = oldItem.watch;\n            newItem.cells = oldItem.cells;\n\n            if (isLiveUpdate) {\n              newItem.oldValues = oldItem.values;\n            }\n\n            oldItem.update && oldItem.update(newItem);\n          }\n\n          return changedColumnIndices;\n        },\n        _isItemEquals: function _isItemEquals(item1, item2) {\n          if (JSON.stringify(item1.values) !== JSON.stringify(item2.values)) {\n            return false;\n          }\n\n          if ([\"modified\", \"isNewRow\", \"removed\", \"isEditing\"].some(function (field) {\n            return item1[field] !== item2[field];\n          })) {\n            return false;\n          }\n\n          if (\"group\" === item1.rowType || \"groupFooter\" === item1.rowType) {\n            var _item1$data, _item2$data, _item1$data2, _item2$data2;\n\n            var expandedMatch = item1.isExpanded === item2.isExpanded;\n            var summaryCellsMatch = JSON.stringify(item1.summaryCells) === JSON.stringify(item2.summaryCells);\n            var continuationMatch = (null === (_item1$data = item1.data) || void 0 === _item1$data ? void 0 : _item1$data.isContinuation) === (null === (_item2$data = item2.data) || void 0 === _item2$data ? void 0 : _item2$data.isContinuation) && (null === (_item1$data2 = item1.data) || void 0 === _item1$data2 ? void 0 : _item1$data2.isContinuationOnNextPage) === (null === (_item2$data2 = item2.data) || void 0 === _item2$data2 ? void 0 : _item2$data2.isContinuationOnNextPage);\n\n            if (!expandedMatch || !summaryCellsMatch || !continuationMatch) {\n              return false;\n            }\n          }\n\n          return true;\n        },\n        _applyChangesOnly: function _applyChangesOnly(change) {\n          var _this2 = this;\n\n          var rowIndices = [];\n          var columnIndices = [];\n          var changeTypes = [];\n          var items = [];\n          var newIndexByKey = {};\n\n          function getRowKey(row) {\n            if (row) {\n              return row.rowType + \",\" + JSON.stringify(row.key);\n            }\n          }\n\n          var currentItems = this._items;\n          var oldItems = currentItems.slice();\n          change.items.forEach(function (item, index) {\n            var key = getRowKey(item);\n            newIndexByKey[key] = index;\n            item.rowIndex = index;\n          });\n          var result = findChanges(oldItems, change.items, getRowKey, function (item1, item2) {\n            if (!_this2._isItemEquals(item1, item2)) {\n              return false;\n            }\n\n            if (item1.cells) {\n              item1.update && item1.update(item2);\n              item1.cells.forEach(function (cell) {\n                if (cell && cell.update) {\n                  cell.update(item2, true);\n                }\n              });\n            }\n\n            return true;\n          });\n\n          if (!result) {\n            this._applyChangeFull(change);\n\n            return;\n          }\n\n          result.forEach(function (change) {\n            switch (change.type) {\n              case \"update\":\n                var index = change.index;\n                var newItem = change.data;\n                var oldItem = change.oldItem;\n\n                var changedColumnIndices = _this2._partialUpdateRow(oldItem, newItem, index, true);\n\n                rowIndices.push(index);\n                changeTypes.push(\"update\");\n                items.push(newItem);\n                currentItems[index] = newItem;\n                columnIndices.push(changedColumnIndices);\n                break;\n\n              case \"insert\":\n                rowIndices.push(change.index);\n                changeTypes.push(\"insert\");\n                items.push(change.data);\n                columnIndices.push(void 0);\n                currentItems.splice(change.index, 0, change.data);\n                break;\n\n              case \"remove\":\n                rowIndices.push(change.index);\n                changeTypes.push(\"remove\");\n                currentItems.splice(change.index, 1);\n                items.push(change.oldItem);\n                columnIndices.push(void 0);\n            }\n          });\n          change.repaintChangesOnly = true;\n          change.changeType = \"update\";\n          change.rowIndices = rowIndices;\n          change.columnIndices = columnIndices;\n          change.changeTypes = changeTypes;\n          change.items = items;\n\n          if (oldItems.length) {\n            change.isLiveUpdate = true;\n          }\n\n          this._correctRowIndices(function (rowIndex) {\n            var oldRowIndexOffset = _this2._rowIndexOffset || 0;\n\n            var rowIndexOffset = _this2.getRowIndexOffset();\n\n            var oldItem = oldItems[rowIndex - oldRowIndexOffset];\n            var key = getRowKey(oldItem);\n            var newVisibleRowIndex = newIndexByKey[key];\n            return newVisibleRowIndex >= 0 ? newVisibleRowIndex + rowIndexOffset - rowIndex : 0;\n          });\n        },\n        _correctRowIndices: noop,\n        _afterProcessItems: function _afterProcessItems(items) {\n          return items;\n        },\n        _updateItemsCore: function _updateItemsCore(change) {\n          var items;\n          var dataSource = this._dataSource;\n          var changeType = change.changeType || \"refresh\";\n          change.changeType = changeType;\n\n          if (dataSource) {\n            var cachedProcessedItems = this._cachedProcessedItems;\n\n            if (change.useProcessedItemsCache && cachedProcessedItems) {\n              items = cachedProcessedItems;\n            } else {\n              items = change.items || dataSource.items();\n              items = this._beforeProcessItems(items);\n              items = this._processItems(items, change);\n              this._cachedProcessedItems = items;\n            }\n\n            items = this._afterProcessItems(items, change);\n            change.items = items;\n            var oldItems = this._items.length === items.length && this._items;\n\n            this._applyChange(change);\n\n            var rowIndexDelta = this.getRowIndexDelta();\n            each(this._items, function (index, item) {\n              item.rowIndex = index - rowIndexDelta;\n\n              if (oldItems) {\n                item.cells = oldItems[index].cells || [];\n              }\n\n              var newItem = items[index];\n\n              if (newItem) {\n                item.loadIndex = newItem.loadIndex;\n              }\n            });\n            this._rowIndexOffset = this.getRowIndexOffset();\n          } else {\n            this._items = [];\n          }\n        },\n        _handleChanging: function _handleChanging(e) {\n          var rows = this.getVisibleRows();\n          var dataSource = this.dataSource();\n\n          if (dataSource) {\n            e.changes.forEach(function (change) {\n              if (\"insert\" === change.type && change.index >= 0) {\n                var dataIndex = 0;\n\n                for (var i = 0; i < change.index; i++) {\n                  var row = rows[i];\n\n                  if (row && (\"data\" === row.rowType || \"group\" === row.rowType)) {\n                    dataIndex++;\n                  }\n                }\n\n                change.index = dataIndex;\n              }\n            });\n          }\n        },\n        updateItems: function updateItems(change, isDataChanged) {\n          change = change || {};\n\n          if (void 0 !== this._repaintChangesOnly) {\n            change.repaintChangesOnly = change.repaintChangesOnly || this._repaintChangesOnly;\n            change.needUpdateDimensions = change.needUpdateDimensions || this._needUpdateDimensions;\n          } else if (change.changes) {\n            change.repaintChangesOnly = this.option(\"repaintChangesOnly\");\n          } else if (isDataChanged) {\n            var operationTypes = this.dataSource().operationTypes();\n            change.repaintChangesOnly = operationTypes && !operationTypes.grouping && !operationTypes.filtering && this.option(\"repaintChangesOnly\");\n            change.isDataChanged = true;\n\n            if (operationTypes && (operationTypes.reload || operationTypes.paging || operationTypes.groupExpanding)) {\n              change.needUpdateDimensions = true;\n            }\n          }\n\n          if (this._updateLockCount) {\n            this._changes.push(change);\n\n            return;\n          }\n\n          this._updateItemsCore(change);\n\n          if (change.cancel) {\n            return;\n          }\n\n          this._fireChanged(change);\n        },\n        loadingOperationTypes: function loadingOperationTypes() {\n          var dataSource = this.dataSource();\n          return dataSource && dataSource.loadingOperationTypes() || {};\n        },\n        _fireChanged: function _fireChanged(change) {\n          var _this3 = this;\n\n          if (this._currentOperationTypes) {\n            change.operationTypes = this._currentOperationTypes;\n            this._currentOperationTypes = null;\n          }\n\n          deferRender(function () {\n            _this3.changed.fire(change);\n          });\n        },\n        isLoading: function isLoading() {\n          return this._isLoading || this._isCustomLoading;\n        },\n        _fireLoadingChanged: function _fireLoadingChanged() {\n          this.loadingChanged.fire(this.isLoading(), this._loadingText);\n        },\n        _calculateAdditionalFilter: function _calculateAdditionalFilter() {\n          return null;\n        },\n        _applyFilter: function _applyFilter() {\n          var _this4 = this;\n\n          var dataSource = this._dataSource;\n\n          if (dataSource) {\n            dataSource.pageIndex(0);\n            this._isFilterApplying = true;\n            return this.reload().done(function () {\n              if (_this4._isFilterApplying) {\n                _this4.pageChanged.fire();\n              }\n            });\n          }\n        },\n        resetFilterApplying: function resetFilterApplying() {\n          this._isFilterApplying = false;\n        },\n        filter: function filter(filterExpr) {\n          var dataSource = this._dataSource;\n          var filter = dataSource && dataSource.filter();\n\n          if (0 === arguments.length) {\n            return filter;\n          }\n\n          filterExpr = arguments.length > 1 ? Array.prototype.slice.call(arguments, 0) : filterExpr;\n\n          if (gridCoreUtils.equalFilterParameters(filter, filterExpr)) {\n            return;\n          }\n\n          if (dataSource) {\n            dataSource.filter(filterExpr);\n          }\n\n          this._applyFilter();\n        },\n        clearFilter: function clearFilter(filterName) {\n          var that = this;\n          var columnsController = that._columnsController;\n\n          var clearColumnOption = function clearColumnOption(optionName) {\n            var columnCount = columnsController.columnCount();\n\n            for (var index = 0; index < columnCount; index++) {\n              columnsController.columnOption(index, optionName, void 0);\n            }\n          };\n\n          that.component.beginUpdate();\n\n          if (arguments.length > 0) {\n            switch (filterName) {\n              case \"dataSource\":\n                that.filter(null);\n                break;\n\n              case \"search\":\n                that.searchByText(\"\");\n                break;\n\n              case \"header\":\n                clearColumnOption(\"filterValues\");\n                break;\n\n              case \"row\":\n                clearColumnOption(\"filterValue\");\n            }\n          } else {\n            that.filter(null);\n            that.searchByText(\"\");\n            clearColumnOption(\"filterValue\");\n            clearColumnOption(\"bufferedFilterValue\");\n            clearColumnOption(\"filterValues\");\n          }\n\n          that.component.endUpdate();\n        },\n        _fireDataSourceChanged: function _fireDataSourceChanged() {\n          var that = this;\n          that.changed.add(function changedHandler() {\n            that.changed.remove(changedHandler);\n            that.dataSourceChanged.fire();\n          });\n        },\n        _getDataSourceAdapter: noop,\n        _createDataSourceAdapterCore: function _createDataSourceAdapterCore(dataSource, remoteOperations) {\n          var dataSourceAdapterProvider = this._getDataSourceAdapter();\n\n          var dataSourceAdapter = dataSourceAdapterProvider.create(this.component);\n          dataSourceAdapter.init(dataSource, remoteOperations);\n          return dataSourceAdapter;\n        },\n        isLocalStore: function isLocalStore(store) {\n          store = store || this.store();\n          return store instanceof ArrayStore;\n        },\n        isCustomStore: function isCustomStore(store) {\n          store = store || this.store();\n          return store instanceof CustomStore;\n        },\n        _createDataSourceAdapter: function _createDataSourceAdapter(dataSource) {\n          var remoteOperations = this.option(\"remoteOperations\");\n          var store = dataSource.store();\n          var enabledRemoteOperations = {\n            filtering: true,\n            sorting: true,\n            paging: true,\n            grouping: true,\n            summary: true\n          };\n\n          if (remoteOperations && remoteOperations.groupPaging) {\n            remoteOperations = extend({}, enabledRemoteOperations, remoteOperations);\n          }\n\n          if (\"auto\" === remoteOperations) {\n            remoteOperations = this.isLocalStore(store) || this.isCustomStore(store) ? {} : {\n              filtering: true,\n              sorting: true,\n              paging: true\n            };\n          }\n\n          if (true === remoteOperations) {\n            remoteOperations = enabledRemoteOperations;\n          }\n\n          return this._createDataSourceAdapterCore(dataSource, remoteOperations);\n        },\n        setDataSource: function setDataSource(dataSource) {\n          var oldDataSource = this._dataSource;\n\n          if (!dataSource && oldDataSource) {\n            oldDataSource.cancelAll();\n            oldDataSource.changed.remove(this._dataChangedHandler);\n            oldDataSource.loadingChanged.remove(this._loadingChangedHandler);\n            oldDataSource.loadError.remove(this._loadErrorHandler);\n            oldDataSource.customizeStoreLoadOptions.remove(this._customizeStoreLoadOptionsHandler);\n            oldDataSource.changing.remove(this._changingHandler);\n            oldDataSource.pushed.remove(this._dataPushedHandler);\n            oldDataSource.dispose(this._isSharedDataSource);\n          }\n\n          if (dataSource) {\n            dataSource = this._createDataSourceAdapter(dataSource);\n          }\n\n          this._dataSource = dataSource;\n\n          if (dataSource) {\n            this._fireDataSourceChanged();\n\n            this._isLoading = !dataSource.isLoaded();\n            this._needApplyFilter = true;\n            this._isAllDataTypesDefined = this._columnsController.isAllDataTypesDefined();\n            dataSource.changed.add(this._dataChangedHandler);\n            dataSource.loadingChanged.add(this._loadingChangedHandler);\n            dataSource.loadError.add(this._loadErrorHandler);\n            dataSource.customizeStoreLoadOptions.add(this._customizeStoreLoadOptionsHandler);\n            dataSource.changing.add(this._changingHandler);\n            dataSource.pushed.add(this._dataPushedHandler);\n          }\n        },\n        items: function items() {\n          return this._items;\n        },\n        isEmpty: function isEmpty() {\n          return !this.items().length;\n        },\n        pageCount: function pageCount() {\n          return this._dataSource ? this._dataSource.pageCount() : 1;\n        },\n        dataSource: function dataSource() {\n          return this._dataSource;\n        },\n        store: function store() {\n          var dataSource = this._dataSource;\n          return dataSource && dataSource.store();\n        },\n        loadAll: function loadAll(data) {\n          var that = this;\n          var d = new Deferred();\n          var dataSource = that._dataSource;\n\n          if (dataSource) {\n            if (data) {\n              var options = {\n                data: data,\n                isCustomLoading: true,\n                storeLoadOptions: {\n                  isLoadingAll: true\n                },\n                loadOptions: {\n                  filter: that.getCombinedFilter(),\n                  group: dataSource.group(),\n                  sort: dataSource.sort()\n                }\n              };\n\n              dataSource._handleDataLoaded(options);\n\n              when(options.data).done(function (data) {\n                data = that._beforeProcessItems(data);\n                d.resolve(that._processItems(data, {\n                  changeType: \"loadingAll\"\n                }), options.extra && options.extra.summary);\n              }).fail(d.reject);\n            } else if (!dataSource.isLoading()) {\n              var loadOptions = extend({}, dataSource.loadOptions(), {\n                isLoadingAll: true,\n                requireTotalCount: false\n              });\n              dataSource.load(loadOptions).done(function (items, extra) {\n                items = that._beforeProcessItems(items);\n                items = that._processItems(items, {\n                  changeType: \"loadingAll\"\n                });\n                d.resolve(items, extra && extra.summary);\n              }).fail(d.reject);\n            } else {\n              d.reject();\n            }\n          } else {\n            d.resolve([]);\n          }\n\n          return d;\n        },\n        getKeyByRowIndex: function getKeyByRowIndex(rowIndex, byLoaded) {\n          var item = this.items(byLoaded)[rowIndex];\n\n          if (item) {\n            return item.key;\n          }\n        },\n        getRowIndexByKey: function getRowIndexByKey(key, byLoaded) {\n          return gridCoreUtils.getIndexByKey(key, this.items(byLoaded));\n        },\n        keyOf: function keyOf(data) {\n          var store = this.store();\n\n          if (store) {\n            return store.keyOf(data);\n          }\n        },\n        byKey: function byKey(key) {\n          var store = this.store();\n          var rowIndex = this.getRowIndexByKey(key);\n          var result;\n\n          if (!store) {\n            return;\n          }\n\n          if (rowIndex >= 0) {\n            result = new Deferred().resolve(this.items()[rowIndex].data);\n          }\n\n          return result || store.byKey(key);\n        },\n        key: function key() {\n          var store = this.store();\n\n          if (store) {\n            return store.key();\n          }\n        },\n        getRowIndexOffset: function getRowIndexOffset() {\n          return 0;\n        },\n        getDataByKeys: function getDataByKeys(rowKeys) {\n          var that = this;\n          var result = new Deferred();\n          var deferreds = [];\n          var data = [];\n          each(rowKeys, function (index, key) {\n            deferreds.push(that.byKey(key).done(function (keyData) {\n              data[index] = keyData;\n            }));\n          });\n          when.apply($, deferreds).always(function () {\n            result.resolve(data);\n          });\n          return result;\n        },\n        pageIndex: function pageIndex(value) {\n          return changePaging(this, \"pageIndex\", value);\n        },\n        pageSize: function pageSize(value) {\n          return changePaging(this, \"pageSize\", value);\n        },\n        beginCustomLoading: function beginCustomLoading(messageText) {\n          this._isCustomLoading = true;\n          this._loadingText = messageText || \"\";\n\n          this._fireLoadingChanged();\n        },\n        endCustomLoading: function endCustomLoading() {\n          this._isCustomLoading = false;\n          this._loadingText = void 0;\n\n          this._fireLoadingChanged();\n        },\n        refresh: function refresh(options) {\n          if (true === options) {\n            options = {\n              reload: true,\n              changesOnly: true\n            };\n          } else if (!options) {\n            options = {\n              lookup: true,\n              selection: true,\n              reload: true\n            };\n          }\n\n          var that = this;\n          var dataSource = that.getDataSource();\n          var changesOnly = options.changesOnly;\n          var d = new Deferred();\n\n          var customizeLoadResult = function customizeLoadResult() {\n            that._repaintChangesOnly = !!changesOnly;\n          };\n\n          when(!options.lookup || that._columnsController.refresh()).always(function () {\n            if (options.load || options.reload) {\n              dataSource && dataSource.on(\"customizeLoadResult\", customizeLoadResult);\n              when(that.reload(options.reload, changesOnly)).always(function () {\n                dataSource && dataSource.off(\"customizeLoadResult\", customizeLoadResult);\n                that._repaintChangesOnly = void 0;\n              }).done(d.resolve).fail(d.reject);\n            } else {\n              that.updateItems({\n                repaintChangesOnly: options.changesOnly\n              });\n              d.resolve();\n            }\n          });\n          return d.promise();\n        },\n        getVisibleRows: function getVisibleRows() {\n          return this.items();\n        },\n        _disposeDataSource: function _disposeDataSource() {\n          this.setDataSource(null);\n        },\n        dispose: function dispose() {\n          this._disposeDataSource();\n\n          this.callBase.apply(this, arguments);\n        },\n        repaintRows: function repaintRows(rowIndexes, changesOnly) {\n          rowIndexes = Array.isArray(rowIndexes) ? rowIndexes : [rowIndexes];\n\n          if (rowIndexes.length > 1 || isDefined(rowIndexes[0])) {\n            this.updateItems({\n              changeType: \"update\",\n              rowIndices: rowIndexes,\n              isFullUpdate: !changesOnly\n            });\n          }\n        },\n        skipProcessingPagingChange: function skipProcessingPagingChange(fullName) {\n          return this._skipProcessingPagingChange && (\"paging.pageIndex\" === fullName || \"paging.pageSize\" === fullName);\n        },\n        getUserState: function getUserState() {\n          return {\n            searchText: this.option(\"searchPanel.text\"),\n            pageIndex: this.pageIndex(),\n            pageSize: this.pageSize()\n          };\n        },\n        getCachedStoreData: function getCachedStoreData() {\n          return this._dataSource && this._dataSource.getCachedStoreData();\n        },\n        isLastPageLoaded: function isLastPageLoaded() {\n          var pageIndex = this.pageIndex();\n          var pageCount = this.pageCount();\n          return pageIndex === pageCount - 1;\n        }\n      };\n      gridCoreUtils.proxyMethod(members, \"load\");\n      gridCoreUtils.proxyMethod(members, \"reload\");\n      gridCoreUtils.proxyMethod(members, \"push\");\n      gridCoreUtils.proxyMethod(members, \"itemsCount\", 0);\n      gridCoreUtils.proxyMethod(members, \"totalItemsCount\", 0);\n      gridCoreUtils.proxyMethod(members, \"hasKnownLastPage\", true);\n      gridCoreUtils.proxyMethod(members, \"isLoaded\", true);\n      gridCoreUtils.proxyMethod(members, \"totalCount\", 0);\n      return members;\n    }())\n  }\n};","map":null,"metadata":{},"sourceType":"module"}