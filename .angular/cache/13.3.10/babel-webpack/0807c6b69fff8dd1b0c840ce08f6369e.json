{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.filter_custom_operations.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport messageLocalization from \"../../localization/message\";\nimport { extend } from \"../../core/utils/extend\";\nimport { DataSource } from \"../../data/data_source/data_source\";\nimport { Deferred } from \"../../core/utils/deferred\";\nimport { isGroup, isCondition, getFilterExpression, renderValueText } from \"../filter_builder/utils\";\nimport errors from \"../widget/ui.errors\";\n\nfunction baseOperation(grid) {\n  var getFullText = function getFullText(itemText, parentText) {\n    return parentText ? parentText + \"/\" + itemText : itemText;\n  };\n\n  var headerFilterController = grid && grid.getController(\"headerFilter\");\n  return {\n    dataTypes: [\"string\", \"date\", \"datetime\", \"number\", \"boolean\", \"object\"],\n    calculateFilterExpression: function calculateFilterExpression(filterValue, field, fields) {\n      var result = [];\n      var lastIndex = filterValue.length - 1;\n      filterValue && filterValue.forEach(function (value, index) {\n        if (isCondition(value) || isGroup(value)) {\n          var filterExpression = getFilterExpression(value, fields, [], \"headerFilter\");\n          result.push(filterExpression);\n        } else {\n          result.push(getFilterExpression([field.dataField, \"=\", value], fields, [], \"headerFilter\"));\n        }\n\n        index !== lastIndex && result.push(\"or\");\n      });\n\n      if (1 === result.length) {\n        result = result[0];\n      }\n\n      return result;\n    },\n    editorTemplate: function editorTemplate(conditionInfo, container) {\n      var div = $(\"<div>\").addClass(\"dx-filterbuilder-item-value-text\").appendTo(container);\n      var column = extend(true, {}, grid.columnOption(conditionInfo.field.dataField));\n      renderValueText(div, conditionInfo.text && conditionInfo.text.split(\"|\"));\n      column.filterType = \"include\";\n      column.filterValues = conditionInfo.value ? conditionInfo.value.slice() : [];\n      headerFilterController.showHeaderFilterMenuBase({\n        columnElement: div,\n        column: column,\n        apply: function apply() {\n          value = this.filterValues, void conditionInfo.setValue(value);\n          var value;\n          headerFilterController.hideHeaderFilterMenu();\n          conditionInfo.closeEditor();\n        },\n        onHidden: function onHidden() {\n          conditionInfo.closeEditor();\n        },\n        isFilterBuilder: true\n      });\n      return container;\n    },\n    customizeText: function customizeText(fieldInfo, options) {\n      options = options || {};\n      var value = fieldInfo.value;\n      var column = grid.columnOption(fieldInfo.field.dataField);\n      var headerFilter = column && column.headerFilter;\n      var lookup = column && column.lookup;\n      var values = options.values || [value];\n\n      if (headerFilter && headerFilter.dataSource || lookup && lookup.dataSource) {\n        var result = new Deferred();\n        var itemsDeferred = options.items || new Deferred();\n\n        if (!options.items) {\n          column = extend({}, column, {\n            filterType: \"include\",\n            filterValues: values\n          });\n          var dataSourceOptions = headerFilterController.getDataSource(column);\n          dataSourceOptions.paginate = false;\n          var dataSource = new DataSource(dataSourceOptions);\n          var key = dataSource.store().key();\n\n          if (key) {\n            var _options = options,\n                _values = _options.values;\n\n            if (_values && _values.length > 1) {\n              var filter = _values.reduce(function (result, value) {\n                if (result.length) {\n                  result.push(\"or\");\n                }\n\n                result.push([key, \"=\", value]);\n                return result;\n              }, []);\n\n              dataSource.filter(filter);\n            } else {\n              dataSource.filter([key, \"=\", fieldInfo.value]);\n            }\n          } else if (fieldInfo.field.calculateDisplayValue) {\n            errors.log(\"W1017\");\n          }\n\n          options.items = itemsDeferred;\n          dataSource.load().done(itemsDeferred.resolve);\n        }\n\n        itemsDeferred.done(function (items) {\n          var index = values.indexOf(fieldInfo.value);\n          result.resolve(function getSelectedItemsTexts(items, parentText) {\n            var result = [];\n            items.forEach(function (item) {\n              if (item.items) {\n                var selectedItemsTexts = getSelectedItemsTexts(item.items, getFullText(item.text, parentText));\n                result = result.concat(selectedItemsTexts);\n              }\n\n              item.selected && result.push(getFullText(item.text, parentText));\n            });\n            return result;\n          }(items)[index]);\n        });\n        return result;\n      } else {\n        var text = headerFilterController.getHeaderItemText(value, column, 0, grid.option(\"headerFilter\"));\n        return text;\n      }\n    }\n  };\n}\n\nexport function anyOf(grid) {\n  return extend(baseOperation(grid), {\n    name: \"anyof\",\n    icon: \"selectall\",\n    caption: messageLocalization.format(\"dxFilterBuilder-filterOperationAnyOf\")\n  });\n}\nexport function noneOf(grid) {\n  var baseOp = baseOperation(grid);\n  return extend({}, baseOp, {\n    calculateFilterExpression: function calculateFilterExpression(filterValue, field, fields) {\n      var baseFilter = baseOp.calculateFilterExpression(filterValue, field, fields);\n\n      if (!baseFilter || 0 === baseFilter.length) {\n        return null;\n      }\n\n      return \"!\" === baseFilter[0] ? baseFilter : [\"!\", baseFilter];\n    },\n    name: \"noneof\",\n    icon: \"unselectall\",\n    caption: messageLocalization.format(\"dxFilterBuilder-filterOperationNoneOf\")\n  });\n}","map":null,"metadata":{},"sourceType":"module"}