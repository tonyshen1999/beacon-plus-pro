{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/ui/scheduler/view_model/to_test/views/utils/month.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport dateUtils from \"../../../../../../../core/utils/date\";\nimport dateLocalization from \"../../../../../../../localization/date\";\nimport { getCalculatedFirstDayOfWeek, isDateInRange, setOptionHour } from \"./base\";\nexport var getViewStartByOptions = function getViewStartByOptions(startDate, currentDate, intervalCount, startViewDate) {\n  if (!startDate) {\n    return new Date(currentDate);\n  }\n\n  var currentStartDate = new Date(startViewDate);\n  var validStartViewDate = new Date(startViewDate);\n  var diff = currentStartDate.getTime() <= currentDate.getTime() ? 1 : -1;\n  var endDate = new Date(new Date(validStartViewDate.setMonth(validStartViewDate.getMonth() + diff * intervalCount)));\n\n  while (!isDateInRange(currentDate, currentStartDate, endDate, diff)) {\n    currentStartDate = new Date(endDate);\n\n    if (diff > 0) {\n      currentStartDate.setDate(1);\n    }\n\n    endDate = new Date(new Date(endDate.setMonth(endDate.getMonth() + diff * intervalCount)));\n  }\n\n  return diff > 0 ? currentStartDate : endDate;\n};\nexport var calculateStartViewDate = function calculateStartViewDate(currentDate, startDayHour, startDate, intervalCount, firstDayOfWeekOption) {\n  var viewStart = getViewStartByOptions(startDate, currentDate, intervalCount, dateUtils.getFirstMonthDate(startDate));\n  var firstMonthDate = dateUtils.getFirstMonthDate(viewStart);\n  var firstDayOfWeek = getCalculatedFirstDayOfWeek(firstDayOfWeekOption);\n  var firstViewDate = dateUtils.getFirstWeekDate(firstMonthDate, firstDayOfWeek);\n  return setOptionHour(firstViewDate, startDayHour);\n};\nexport var calculateCellIndex = function calculateCellIndex(rowIndex, columnIndex, _, columnCount) {\n  return rowIndex * columnCount + columnIndex;\n};\nexport var isFirstCellInMonthWithIntervalCount = function isFirstCellInMonthWithIntervalCount(cellDate, intervalCount) {\n  return 1 === cellDate.getDate() && intervalCount > 1;\n};\nexport var getCellText = function getCellText(date, intervalCount) {\n  if (isFirstCellInMonthWithIntervalCount(date, intervalCount)) {\n    var monthName = dateLocalization.getMonthNames(\"abbreviated\")[date.getMonth()];\n    return [monthName, dateLocalization.format(date, \"day\")].join(\" \");\n  }\n\n  return dateLocalization.format(date, \"dd\");\n};","map":null,"metadata":{},"sourceType":"module"}