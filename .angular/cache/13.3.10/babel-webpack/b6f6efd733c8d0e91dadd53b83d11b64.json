{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.filter_builder.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport modules from \"./ui.grid_core.modules\";\nimport { extend } from \"../../core/utils/extend\";\nimport FilterBuilder from \"./../filter_builder\";\nimport messageLocalization from \"../../localization/message\";\nimport ScrollView from \"./../scroll_view\";\nimport Popup from \"./../popup\";\nimport { restoreFocus } from \"../shared/accessibility\";\nvar FilterBuilderView = modules.View.inherit({\n  _renderCore: function _renderCore() {\n    this._updatePopupOptions();\n  },\n  _updatePopupOptions: function _updatePopupOptions() {\n    if (this.option(\"filterBuilderPopup.visible\")) {\n      this._initPopup();\n    } else if (this._filterBuilderPopup) {\n      this._filterBuilderPopup.hide();\n    }\n  },\n  _disposePopup: function _disposePopup() {\n    if (this._filterBuilderPopup) {\n      this._filterBuilderPopup.dispose();\n\n      this._filterBuilderPopup = void 0;\n    }\n\n    if (this._filterBuilder) {\n      this._filterBuilder.dispose();\n\n      this._filterBuilder = void 0;\n    }\n  },\n  _initPopup: function _initPopup() {\n    var that = this;\n\n    that._disposePopup();\n\n    that._filterBuilderPopup = that._createComponent(that.element(), Popup, extend({\n      title: messageLocalization.format(\"dxDataGrid-filterBuilderPopupTitle\"),\n      contentTemplate: function contentTemplate($contentElement) {\n        return that._getPopupContentTemplate($contentElement);\n      },\n      onOptionChanged: function onOptionChanged(args) {\n        if (\"visible\" === args.name) {\n          that.option(\"filterBuilderPopup.visible\", args.value);\n        }\n      },\n      toolbarItems: that._getPopupToolbarItems()\n    }, that.option(\"filterBuilderPopup\"), {\n      onHidden: function onHidden(e) {\n        restoreFocus(that);\n\n        that._disposePopup();\n      }\n    }));\n  },\n  _getPopupContentTemplate: function _getPopupContentTemplate(contentElement) {\n    var $contentElement = $(contentElement);\n    var $filterBuilderContainer = $(\"<div>\").appendTo($(contentElement));\n    this._filterBuilder = this._createComponent($filterBuilderContainer, FilterBuilder, extend({\n      value: this.option(\"filterValue\"),\n      fields: this.getController(\"columns\").getFilteringColumns()\n    }, this.option(\"filterBuilder\"), {\n      customOperations: this.getController(\"filterSync\").getCustomFilterOperations()\n    }));\n\n    this._createComponent($contentElement, ScrollView, {\n      direction: \"both\"\n    });\n  },\n  _getPopupToolbarItems: function _getPopupToolbarItems() {\n    var that = this;\n    return [{\n      toolbar: \"bottom\",\n      location: \"after\",\n      widget: \"dxButton\",\n      options: {\n        text: messageLocalization.format(\"OK\"),\n        onClick: function onClick(e) {\n          var filter = that._filterBuilder.option(\"value\");\n\n          that.option(\"filterValue\", filter);\n\n          that._filterBuilderPopup.hide();\n        }\n      }\n    }, {\n      toolbar: \"bottom\",\n      location: \"after\",\n      widget: \"dxButton\",\n      options: {\n        text: messageLocalization.format(\"Cancel\"),\n        onClick: function onClick(e) {\n          that._filterBuilderPopup.hide();\n        }\n      }\n    }];\n  },\n  optionChanged: function optionChanged(args) {\n    switch (args.name) {\n      case \"filterBuilder\":\n      case \"filterBuilderPopup\":\n        this._invalidate();\n\n        args.handled = true;\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  }\n});\nexport var filterBuilderModule = {\n  defaultOptions: function defaultOptions() {\n    return {\n      filterBuilder: {\n        groupOperationDescriptions: {\n          and: messageLocalization.format(\"dxFilterBuilder-and\"),\n          or: messageLocalization.format(\"dxFilterBuilder-or\"),\n          notAnd: messageLocalization.format(\"dxFilterBuilder-notAnd\"),\n          notOr: messageLocalization.format(\"dxFilterBuilder-notOr\")\n        },\n        filterOperationDescriptions: {\n          between: messageLocalization.format(\"dxFilterBuilder-filterOperationBetween\"),\n          equal: messageLocalization.format(\"dxFilterBuilder-filterOperationEquals\"),\n          notEqual: messageLocalization.format(\"dxFilterBuilder-filterOperationNotEquals\"),\n          lessThan: messageLocalization.format(\"dxFilterBuilder-filterOperationLess\"),\n          lessThanOrEqual: messageLocalization.format(\"dxFilterBuilder-filterOperationLessOrEquals\"),\n          greaterThan: messageLocalization.format(\"dxFilterBuilder-filterOperationGreater\"),\n          greaterThanOrEqual: messageLocalization.format(\"dxFilterBuilder-filterOperationGreaterOrEquals\"),\n          startsWith: messageLocalization.format(\"dxFilterBuilder-filterOperationStartsWith\"),\n          contains: messageLocalization.format(\"dxFilterBuilder-filterOperationContains\"),\n          notContains: messageLocalization.format(\"dxFilterBuilder-filterOperationNotContains\"),\n          endsWith: messageLocalization.format(\"dxFilterBuilder-filterOperationEndsWith\"),\n          isBlank: messageLocalization.format(\"dxFilterBuilder-filterOperationIsBlank\"),\n          isNotBlank: messageLocalization.format(\"dxFilterBuilder-filterOperationIsNotBlank\")\n        }\n      },\n      filterBuilderPopup: {}\n    };\n  },\n  views: {\n    filterBuilderView: FilterBuilderView\n  }\n};","map":null,"metadata":{},"sourceType":"module"}