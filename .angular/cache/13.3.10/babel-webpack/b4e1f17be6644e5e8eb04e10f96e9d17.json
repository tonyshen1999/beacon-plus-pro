{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __decorate, __metadata, __param } from 'tslib';\nimport { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { forwardRef, ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, HostListener, Component, NgModule } from '@angular/core';\nimport DxFileUploader from 'devextreme/ui/file_uploader';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { DxComponent, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\n/*!\r\n * devextreme-angular\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'devextreme-angular/core';\nimport * as ɵngcc2 from '@angular/platform-browser';\nvar CUSTOM_VALUE_ACCESSOR_PROVIDER = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return DxFileUploaderComponent;\n  }),\n  multi: true\n};\n/**\r\n * The FileUploader UI component enables an end user to upload files to the server. An end user can select files in the file explorer or drag and drop files to the FileUploader area on the page.\r\n\r\n */\n\nvar DxFileUploaderComponent = /*#__PURE__*/(function () {\n  var DxFileUploaderComponent = /*#__PURE__*/function (_DxComponent) {\n    _inherits(DxFileUploaderComponent, _DxComponent);\n\n    var _super = _createSuper(DxFileUploaderComponent);\n\n    function DxFileUploaderComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\n      var _this;\n\n      _classCallCheck(this, DxFileUploaderComponent);\n\n      _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n      _this._watcherHelper = _watcherHelper;\n      _this._idh = _idh;\n\n      _this.touched = function (_) {};\n\n      _this._createEventEmitters([{\n        subscribe: 'beforeSend',\n        emit: 'onBeforeSend'\n      }, {\n        subscribe: 'contentReady',\n        emit: 'onContentReady'\n      }, {\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'dropZoneEnter',\n        emit: 'onDropZoneEnter'\n      }, {\n        subscribe: 'dropZoneLeave',\n        emit: 'onDropZoneLeave'\n      }, {\n        subscribe: 'filesUploaded',\n        emit: 'onFilesUploaded'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        subscribe: 'progress',\n        emit: 'onProgress'\n      }, {\n        subscribe: 'uploadAborted',\n        emit: 'onUploadAborted'\n      }, {\n        subscribe: 'uploaded',\n        emit: 'onUploaded'\n      }, {\n        subscribe: 'uploadError',\n        emit: 'onUploadError'\n      }, {\n        subscribe: 'uploadStarted',\n        emit: 'onUploadStarted'\n      }, {\n        subscribe: 'valueChanged',\n        emit: 'onValueChanged'\n      }, {\n        emit: 'abortUploadChange'\n      }, {\n        emit: 'acceptChange'\n      }, {\n        emit: 'accessKeyChange'\n      }, {\n        emit: 'activeStateEnabledChange'\n      }, {\n        emit: 'allowCancelingChange'\n      }, {\n        emit: 'allowedFileExtensionsChange'\n      }, {\n        emit: 'chunkSizeChange'\n      }, {\n        emit: 'dialogTriggerChange'\n      }, {\n        emit: 'disabledChange'\n      }, {\n        emit: 'dropZoneChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'focusStateEnabledChange'\n      }, {\n        emit: 'heightChange'\n      }, {\n        emit: 'hintChange'\n      }, {\n        emit: 'hoverStateEnabledChange'\n      }, {\n        emit: 'inputAttrChange'\n      }, {\n        emit: 'invalidFileExtensionMessageChange'\n      }, {\n        emit: 'invalidMaxFileSizeMessageChange'\n      }, {\n        emit: 'invalidMinFileSizeMessageChange'\n      }, {\n        emit: 'isValidChange'\n      }, {\n        emit: 'labelTextChange'\n      }, {\n        emit: 'maxFileSizeChange'\n      }, {\n        emit: 'minFileSizeChange'\n      }, {\n        emit: 'multipleChange'\n      }, {\n        emit: 'nameChange'\n      }, {\n        emit: 'progressChange'\n      }, {\n        emit: 'readOnlyChange'\n      }, {\n        emit: 'readyToUploadMessageChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'selectButtonTextChange'\n      }, {\n        emit: 'showFileListChange'\n      }, {\n        emit: 'tabIndexChange'\n      }, {\n        emit: 'uploadAbortedMessageChange'\n      }, {\n        emit: 'uploadButtonTextChange'\n      }, {\n        emit: 'uploadChunkChange'\n      }, {\n        emit: 'uploadCustomDataChange'\n      }, {\n        emit: 'uploadedMessageChange'\n      }, {\n        emit: 'uploadFailedMessageChange'\n      }, {\n        emit: 'uploadFileChange'\n      }, {\n        emit: 'uploadHeadersChange'\n      }, {\n        emit: 'uploadMethodChange'\n      }, {\n        emit: 'uploadModeChange'\n      }, {\n        emit: 'uploadUrlChange'\n      }, {\n        emit: 'validationErrorChange'\n      }, {\n        emit: 'validationErrorsChange'\n      }, {\n        emit: 'validationStatusChange'\n      }, {\n        emit: 'valueChange'\n      }, {\n        emit: 'visibleChange'\n      }, {\n        emit: 'widthChange'\n      }, {\n        emit: 'onBlur'\n      }]);\n\n      _this._idh.setHost(_assertThisInitialized(_this));\n\n      optionHost.setHost(_assertThisInitialized(_this));\n      return _this;\n    }\n    /**\r\n     * A function that cancels the file upload.\r\n    \r\n     */\n\n\n    _createClass(DxFileUploaderComponent, [{\n      key: \"abortUpload\",\n      get: function get() {\n        return this._getOption('abortUpload');\n      },\n      set: function set(value) {\n        this._setOption('abortUpload', value);\n      }\n      /**\r\n       * Specifies a file type or several types accepted by the UI component.\r\n      \r\n       */\n\n    }, {\n      key: \"accept\",\n      get: function get() {\n        return this._getOption('accept');\n      },\n      set: function set(value) {\n        this._setOption('accept', value);\n      }\n      /**\r\n       * Specifies the shortcut key that sets focus on the UI component.\r\n      \r\n       */\n\n    }, {\n      key: \"accessKey\",\n      get: function get() {\n        return this._getOption('accessKey');\n      },\n      set: function set(value) {\n        this._setOption('accessKey', value);\n      }\n      /**\r\n       * Specifies whether or not the UI component changes its state when interacting with a user.\r\n      \r\n       */\n\n    }, {\n      key: \"activeStateEnabled\",\n      get: function get() {\n        return this._getOption('activeStateEnabled');\n      },\n      set: function set(value) {\n        this._setOption('activeStateEnabled', value);\n      }\n      /**\r\n       * Specifies if an end user can remove a file from the selection and interrupt uploading.\r\n      \r\n       */\n\n    }, {\n      key: \"allowCanceling\",\n      get: function get() {\n        return this._getOption('allowCanceling');\n      },\n      set: function set(value) {\n        this._setOption('allowCanceling', value);\n      }\n      /**\r\n       * Restricts file extensions that can be uploaded to the server.\r\n      \r\n       */\n\n    }, {\n      key: \"allowedFileExtensions\",\n      get: function get() {\n        return this._getOption('allowedFileExtensions');\n      },\n      set: function set(value) {\n        this._setOption('allowedFileExtensions', value);\n      }\n      /**\r\n       * Specifies the chunk size in bytes. Applies only if uploadMode is &apos;instantly&apos; or &apos;useButtons&apos;. Requires a server that can process file chunks.\r\n      \r\n       */\n\n    }, {\n      key: \"chunkSize\",\n      get: function get() {\n        return this._getOption('chunkSize');\n      },\n      set: function set(value) {\n        this._setOption('chunkSize', value);\n      }\n      /**\r\n       * Specifies the HTML element which invokes the file upload dialog.\r\n      \r\n       */\n\n    }, {\n      key: \"dialogTrigger\",\n      get: function get() {\n        return this._getOption('dialogTrigger');\n      },\n      set: function set(value) {\n        this._setOption('dialogTrigger', value);\n      }\n      /**\r\n       * Specifies whether the UI component responds to user interaction.\r\n      \r\n       */\n\n    }, {\n      key: \"disabled\",\n      get: function get() {\n        return this._getOption('disabled');\n      },\n      set: function set(value) {\n        this._setOption('disabled', value);\n      }\n      /**\r\n       * Specifies the HTML element in which users can drag and drop files for upload.\r\n      \r\n       */\n\n    }, {\n      key: \"dropZone\",\n      get: function get() {\n        return this._getOption('dropZone');\n      },\n      set: function set(value) {\n        this._setOption('dropZone', value);\n      }\n      /**\r\n       * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n      \r\n       */\n\n    }, {\n      key: \"elementAttr\",\n      get: function get() {\n        return this._getOption('elementAttr');\n      },\n      set: function set(value) {\n        this._setOption('elementAttr', value);\n      }\n      /**\r\n       * Specifies whether the UI component can be focused using keyboard navigation.\r\n      \r\n       */\n\n    }, {\n      key: \"focusStateEnabled\",\n      get: function get() {\n        return this._getOption('focusStateEnabled');\n      },\n      set: function set(value) {\n        this._setOption('focusStateEnabled', value);\n      }\n      /**\r\n       * Specifies the UI component&apos;s height.\r\n      \r\n       */\n\n    }, {\n      key: \"height\",\n      get: function get() {\n        return this._getOption('height');\n      },\n      set: function set(value) {\n        this._setOption('height', value);\n      }\n      /**\r\n       * Specifies text for a hint that appears when a user pauses on the UI component.\r\n      \r\n       */\n\n    }, {\n      key: \"hint\",\n      get: function get() {\n        return this._getOption('hint');\n      },\n      set: function set(value) {\n        this._setOption('hint', value);\n      }\n      /**\r\n       * Specifies whether the FileUploader component changes the state of all its buttons when users hover over them.\r\n      \r\n       */\n\n    }, {\n      key: \"hoverStateEnabled\",\n      get: function get() {\n        return this._getOption('hoverStateEnabled');\n      },\n      set: function set(value) {\n        this._setOption('hoverStateEnabled', value);\n      }\n      /**\r\n       * Specifies the attributes to be passed on to the underlying `` element of the `file` type.\r\n      \r\n       */\n\n    }, {\n      key: \"inputAttr\",\n      get: function get() {\n        return this._getOption('inputAttr');\n      },\n      set: function set(value) {\n        this._setOption('inputAttr', value);\n      }\n      /**\r\n       * The text displayed when the extension of the file being uploaded is not an allowed file extension.\r\n      \r\n       */\n\n    }, {\n      key: \"invalidFileExtensionMessage\",\n      get: function get() {\n        return this._getOption('invalidFileExtensionMessage');\n      },\n      set: function set(value) {\n        this._setOption('invalidFileExtensionMessage', value);\n      }\n      /**\r\n       * The text displayed when the size of the file being uploaded is greater than the maxFileSize.\r\n      \r\n       */\n\n    }, {\n      key: \"invalidMaxFileSizeMessage\",\n      get: function get() {\n        return this._getOption('invalidMaxFileSizeMessage');\n      },\n      set: function set(value) {\n        this._setOption('invalidMaxFileSizeMessage', value);\n      }\n      /**\r\n       * The text displayed when the size of the file being uploaded is less than the minFileSize.\r\n      \r\n       */\n\n    }, {\n      key: \"invalidMinFileSizeMessage\",\n      get: function get() {\n        return this._getOption('invalidMinFileSizeMessage');\n      },\n      set: function set(value) {\n        this._setOption('invalidMinFileSizeMessage', value);\n      }\n      /**\r\n       * Specifies or indicates whether the editor&apos;s value is valid.\r\n      \r\n       */\n\n    }, {\n      key: \"isValid\",\n      get: function get() {\n        return this._getOption('isValid');\n      },\n      set: function set(value) {\n        this._setOption('isValid', value);\n      }\n      /**\r\n       * Specifies the text displayed on the area to which an end-user can drop a file.\r\n      \r\n       */\n\n    }, {\n      key: \"labelText\",\n      get: function get() {\n        return this._getOption('labelText');\n      },\n      set: function set(value) {\n        this._setOption('labelText', value);\n      }\n      /**\r\n       * Specifies the maximum file size (in bytes) allowed for uploading. Applies only if uploadMode is &apos;instantly&apos; or &apos;useButtons&apos;.\r\n      \r\n       */\n\n    }, {\n      key: \"maxFileSize\",\n      get: function get() {\n        return this._getOption('maxFileSize');\n      },\n      set: function set(value) {\n        this._setOption('maxFileSize', value);\n      }\n      /**\r\n       * Specifies the minimum file size (in bytes) allowed for uploading. Applies only if uploadMode is &apos;instantly&apos; or &apos;useButtons&apos;.\r\n      \r\n       */\n\n    }, {\n      key: \"minFileSize\",\n      get: function get() {\n        return this._getOption('minFileSize');\n      },\n      set: function set(value) {\n        this._setOption('minFileSize', value);\n      }\n      /**\r\n       * Specifies whether the UI component enables an end-user to select a single file or multiple files.\r\n      \r\n       */\n\n    }, {\n      key: \"multiple\",\n      get: function get() {\n        return this._getOption('multiple');\n      },\n      set: function set(value) {\n        this._setOption('multiple', value);\n      }\n      /**\r\n       * Specifies the value passed to the name attribute of the underlying input element. Required to access uploaded files on the server.\r\n      \r\n       */\n\n    }, {\n      key: \"name\",\n      get: function get() {\n        return this._getOption('name');\n      },\n      set: function set(value) {\n        this._setOption('name', value);\n      }\n      /**\r\n       * Gets the current progress in percentages.\r\n      \r\n       */\n\n    }, {\n      key: \"progress\",\n      get: function get() {\n        return this._getOption('progress');\n      },\n      set: function set(value) {\n        this._setOption('progress', value);\n      }\n      /**\r\n       * Specifies whether the editor is read-only.\r\n      \r\n       */\n\n    }, {\n      key: \"readOnly\",\n      get: function get() {\n        return this._getOption('readOnly');\n      },\n      set: function set(value) {\n        this._setOption('readOnly', value);\n      }\n      /**\r\n       * The message displayed by the UI component when it is ready to upload the specified files.\r\n      \r\n       */\n\n    }, {\n      key: \"readyToUploadMessage\",\n      get: function get() {\n        return this._getOption('readyToUploadMessage');\n      },\n      set: function set(value) {\n        this._setOption('readyToUploadMessage', value);\n      }\n      /**\r\n       * Switches the UI component to a right-to-left representation.\r\n      \r\n       */\n\n    }, {\n      key: \"rtlEnabled\",\n      get: function get() {\n        return this._getOption('rtlEnabled');\n      },\n      set: function set(value) {\n        this._setOption('rtlEnabled', value);\n      }\n      /**\r\n       * The text displayed on the button that opens the file browser.\r\n      \r\n       */\n\n    }, {\n      key: \"selectButtonText\",\n      get: function get() {\n        return this._getOption('selectButtonText');\n      },\n      set: function set(value) {\n        this._setOption('selectButtonText', value);\n      }\n      /**\r\n       * Specifies whether or not the UI component displays the list of selected files.\r\n      \r\n       */\n\n    }, {\n      key: \"showFileList\",\n      get: function get() {\n        return this._getOption('showFileList');\n      },\n      set: function set(value) {\n        this._setOption('showFileList', value);\n      }\n      /**\r\n       * Specifies the number of the element when the Tab key is used for navigating.\r\n      \r\n       */\n\n    }, {\n      key: \"tabIndex\",\n      get: function get() {\n        return this._getOption('tabIndex');\n      },\n      set: function set(value) {\n        this._setOption('tabIndex', value);\n      }\n      /**\r\n       * The message displayed by the UI component when the file upload is cancelled.\r\n      \r\n       */\n\n    }, {\n      key: \"uploadAbortedMessage\",\n      get: function get() {\n        return this._getOption('uploadAbortedMessage');\n      },\n      set: function set(value) {\n        this._setOption('uploadAbortedMessage', value);\n      }\n      /**\r\n       * The text displayed on the button that starts uploading.\r\n      \r\n       */\n\n    }, {\n      key: \"uploadButtonText\",\n      get: function get() {\n        return this._getOption('uploadButtonText');\n      },\n      set: function set(value) {\n        this._setOption('uploadButtonText', value);\n      }\n      /**\r\n       * A function that uploads a file in chunks.\r\n      \r\n       */\n\n    }, {\n      key: \"uploadChunk\",\n      get: function get() {\n        return this._getOption('uploadChunk');\n      },\n      set: function set(value) {\n        this._setOption('uploadChunk', value);\n      }\n      /**\r\n       * Specifies custom data for the upload request.\r\n      \r\n       */\n\n    }, {\n      key: \"uploadCustomData\",\n      get: function get() {\n        return this._getOption('uploadCustomData');\n      },\n      set: function set(value) {\n        this._setOption('uploadCustomData', value);\n      }\n      /**\r\n       * The message displayed by the UI component when uploading is finished.\r\n      \r\n       */\n\n    }, {\n      key: \"uploadedMessage\",\n      get: function get() {\n        return this._getOption('uploadedMessage');\n      },\n      set: function set(value) {\n        this._setOption('uploadedMessage', value);\n      }\n      /**\r\n       * The message displayed by the UI component on uploading failure.\r\n      \r\n       */\n\n    }, {\n      key: \"uploadFailedMessage\",\n      get: function get() {\n        return this._getOption('uploadFailedMessage');\n      },\n      set: function set(value) {\n        this._setOption('uploadFailedMessage', value);\n      }\n      /**\r\n       * A function that uploads a file.\r\n      \r\n       */\n\n    }, {\n      key: \"uploadFile\",\n      get: function get() {\n        return this._getOption('uploadFile');\n      },\n      set: function set(value) {\n        this._setOption('uploadFile', value);\n      }\n      /**\r\n       * Specifies headers for the upload request.\r\n      \r\n       */\n\n    }, {\n      key: \"uploadHeaders\",\n      get: function get() {\n        return this._getOption('uploadHeaders');\n      },\n      set: function set(value) {\n        this._setOption('uploadHeaders', value);\n      }\n      /**\r\n       * Specifies the method for the upload request.\r\n      \r\n       */\n\n    }, {\n      key: \"uploadMethod\",\n      get: function get() {\n        return this._getOption('uploadMethod');\n      },\n      set: function set(value) {\n        this._setOption('uploadMethod', value);\n      }\n      /**\r\n       * Specifies how the UI component uploads files.\r\n      \r\n       */\n\n    }, {\n      key: \"uploadMode\",\n      get: function get() {\n        return this._getOption('uploadMode');\n      },\n      set: function set(value) {\n        this._setOption('uploadMode', value);\n      }\n      /**\r\n       * Specifies a target Url for the upload request.\r\n      \r\n       */\n\n    }, {\n      key: \"uploadUrl\",\n      get: function get() {\n        return this._getOption('uploadUrl');\n      },\n      set: function set(value) {\n        this._setOption('uploadUrl', value);\n      }\n      /**\r\n       * Information on the broken validation rule. Contains the first item from the validationErrors array.\r\n      \r\n       */\n\n    }, {\n      key: \"validationError\",\n      get: function get() {\n        return this._getOption('validationError');\n      },\n      set: function set(value) {\n        this._setOption('validationError', value);\n      }\n      /**\r\n       * An array of the validation rules that failed.\r\n      \r\n       */\n\n    }, {\n      key: \"validationErrors\",\n      get: function get() {\n        return this._getOption('validationErrors');\n      },\n      set: function set(value) {\n        this._setOption('validationErrors', value);\n      }\n      /**\r\n       * Indicates or specifies the current validation status.\r\n      \r\n       */\n\n    }, {\n      key: \"validationStatus\",\n      get: function get() {\n        return this._getOption('validationStatus');\n      },\n      set: function set(value) {\n        this._setOption('validationStatus', value);\n      }\n      /**\r\n       * Specifies a File instance representing the selected file. Read-only when uploadMode is &apos;useForm&apos;.\r\n      \r\n       */\n\n    }, {\n      key: \"value\",\n      get: function get() {\n        return this._getOption('value');\n      },\n      set: function set(value) {\n        this._setOption('value', value);\n      }\n      /**\r\n       * Specifies whether the UI component is visible.\r\n      \r\n       */\n\n    }, {\n      key: \"visible\",\n      get: function get() {\n        return this._getOption('visible');\n      },\n      set: function set(value) {\n        this._setOption('visible', value);\n      }\n      /**\r\n       * Specifies the UI component&apos;s width.\r\n      \r\n       */\n\n    }, {\n      key: \"width\",\n      get: function get() {\n        return this._getOption('width');\n      },\n      set: function set(value) {\n        this._setOption('width', value);\n      }\n    }, {\n      key: \"change\",\n      value: function change(_) {}\n    }, {\n      key: \"_createInstance\",\n      value: function _createInstance(element, options) {\n        return new DxFileUploader(element, options);\n      }\n    }, {\n      key: \"writeValue\",\n      value: function writeValue(value) {\n        this.eventHelper.lockedValueChangeEvent = true;\n        this.value = value;\n        this.eventHelper.lockedValueChangeEvent = false;\n      }\n    }, {\n      key: \"setDisabledState\",\n      value: function setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n      }\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        this.change = fn;\n      }\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(fn) {\n        this.touched = fn;\n      }\n    }, {\n      key: \"_createWidget\",\n      value: function _createWidget(element) {\n        var _this2 = this;\n\n        _get(_getPrototypeOf(DxFileUploaderComponent.prototype), \"_createWidget\", this).call(this, element);\n\n        this.instance.on('focusOut', function (e) {\n          _this2.eventHelper.fireNgEvent('onBlur', [e]);\n        });\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._destroyWidget();\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        _get(_getPrototypeOf(DxFileUploaderComponent.prototype), \"ngOnChanges\", this).call(this, changes);\n\n        this.setupChanges('allowedFileExtensions', changes);\n        this.setupChanges('validationErrors', changes);\n        this.setupChanges('value', changes);\n      }\n    }, {\n      key: \"setupChanges\",\n      value: function setupChanges(prop, changes) {\n        if (!(prop in this._optionsToUpdate)) {\n          this._idh.setup(prop, changes);\n        }\n      }\n    }, {\n      key: \"ngDoCheck\",\n      value: function ngDoCheck() {\n        this._idh.doCheck('allowedFileExtensions');\n\n        this._idh.doCheck('validationErrors');\n\n        this._idh.doCheck('value');\n\n        this._watcherHelper.checkWatchers();\n\n        _get(_getPrototypeOf(DxFileUploaderComponent.prototype), \"ngDoCheck\", this).call(this);\n\n        _get(_getPrototypeOf(DxFileUploaderComponent.prototype), \"clearChangedOptions\", this).call(this);\n      }\n    }, {\n      key: \"_setOption\",\n      value: function _setOption(name, value) {\n        var isSetup = this._idh.setupSingle(name, value);\n\n        var isChanged = this._idh.getChanges(name, value) !== null;\n\n        if (isSetup || isChanged) {\n          _get(_getPrototypeOf(DxFileUploaderComponent.prototype), \"_setOption\", this).call(this, name, value);\n        }\n      }\n    }]);\n\n    return DxFileUploaderComponent;\n  }(DxComponent);\n\n  DxFileUploaderComponent.ɵfac = function DxFileUploaderComponent_Factory(t) {\n    return new (t || DxFileUploaderComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DxTemplateHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.WatcherHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IterableDifferHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TransferState), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n\n  DxFileUploaderComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: DxFileUploaderComponent,\n    selectors: [[\"dx-file-uploader\"]],\n    hostBindings: function DxFileUploaderComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"onBlur\", function DxFileUploaderComponent_onBlur_HostBindingHandler($event) {\n          return ctx.touched($event);\n        })(\"valueChange\", function DxFileUploaderComponent_valueChange_HostBindingHandler($event) {\n          return ctx.change($event);\n        });\n      }\n    },\n    inputs: {\n      abortUpload: \"abortUpload\",\n      accept: \"accept\",\n      accessKey: \"accessKey\",\n      activeStateEnabled: \"activeStateEnabled\",\n      allowCanceling: \"allowCanceling\",\n      allowedFileExtensions: \"allowedFileExtensions\",\n      chunkSize: \"chunkSize\",\n      dialogTrigger: \"dialogTrigger\",\n      disabled: \"disabled\",\n      dropZone: \"dropZone\",\n      elementAttr: \"elementAttr\",\n      focusStateEnabled: \"focusStateEnabled\",\n      height: \"height\",\n      hint: \"hint\",\n      hoverStateEnabled: \"hoverStateEnabled\",\n      inputAttr: \"inputAttr\",\n      invalidFileExtensionMessage: \"invalidFileExtensionMessage\",\n      invalidMaxFileSizeMessage: \"invalidMaxFileSizeMessage\",\n      invalidMinFileSizeMessage: \"invalidMinFileSizeMessage\",\n      isValid: \"isValid\",\n      labelText: \"labelText\",\n      maxFileSize: \"maxFileSize\",\n      minFileSize: \"minFileSize\",\n      multiple: \"multiple\",\n      name: \"name\",\n      progress: \"progress\",\n      readOnly: \"readOnly\",\n      readyToUploadMessage: \"readyToUploadMessage\",\n      rtlEnabled: \"rtlEnabled\",\n      selectButtonText: \"selectButtonText\",\n      showFileList: \"showFileList\",\n      tabIndex: \"tabIndex\",\n      uploadAbortedMessage: \"uploadAbortedMessage\",\n      uploadButtonText: \"uploadButtonText\",\n      uploadChunk: \"uploadChunk\",\n      uploadCustomData: \"uploadCustomData\",\n      uploadedMessage: \"uploadedMessage\",\n      uploadFailedMessage: \"uploadFailedMessage\",\n      uploadFile: \"uploadFile\",\n      uploadHeaders: \"uploadHeaders\",\n      uploadMethod: \"uploadMethod\",\n      uploadMode: \"uploadMode\",\n      uploadUrl: \"uploadUrl\",\n      validationError: \"validationError\",\n      validationErrors: \"validationErrors\",\n      validationStatus: \"validationStatus\",\n      value: \"value\",\n      visible: \"visible\",\n      width: \"width\"\n    },\n    outputs: {\n      onBeforeSend: \"onBeforeSend\",\n      onContentReady: \"onContentReady\",\n      onDisposing: \"onDisposing\",\n      onDropZoneEnter: \"onDropZoneEnter\",\n      onDropZoneLeave: \"onDropZoneLeave\",\n      onFilesUploaded: \"onFilesUploaded\",\n      onInitialized: \"onInitialized\",\n      onOptionChanged: \"onOptionChanged\",\n      onProgress: \"onProgress\",\n      onUploadAborted: \"onUploadAborted\",\n      onUploaded: \"onUploaded\",\n      onUploadError: \"onUploadError\",\n      onUploadStarted: \"onUploadStarted\",\n      onValueChanged: \"onValueChanged\",\n      abortUploadChange: \"abortUploadChange\",\n      acceptChange: \"acceptChange\",\n      accessKeyChange: \"accessKeyChange\",\n      activeStateEnabledChange: \"activeStateEnabledChange\",\n      allowCancelingChange: \"allowCancelingChange\",\n      allowedFileExtensionsChange: \"allowedFileExtensionsChange\",\n      chunkSizeChange: \"chunkSizeChange\",\n      dialogTriggerChange: \"dialogTriggerChange\",\n      disabledChange: \"disabledChange\",\n      dropZoneChange: \"dropZoneChange\",\n      elementAttrChange: \"elementAttrChange\",\n      focusStateEnabledChange: \"focusStateEnabledChange\",\n      heightChange: \"heightChange\",\n      hintChange: \"hintChange\",\n      hoverStateEnabledChange: \"hoverStateEnabledChange\",\n      inputAttrChange: \"inputAttrChange\",\n      invalidFileExtensionMessageChange: \"invalidFileExtensionMessageChange\",\n      invalidMaxFileSizeMessageChange: \"invalidMaxFileSizeMessageChange\",\n      invalidMinFileSizeMessageChange: \"invalidMinFileSizeMessageChange\",\n      isValidChange: \"isValidChange\",\n      labelTextChange: \"labelTextChange\",\n      maxFileSizeChange: \"maxFileSizeChange\",\n      minFileSizeChange: \"minFileSizeChange\",\n      multipleChange: \"multipleChange\",\n      nameChange: \"nameChange\",\n      progressChange: \"progressChange\",\n      readOnlyChange: \"readOnlyChange\",\n      readyToUploadMessageChange: \"readyToUploadMessageChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      selectButtonTextChange: \"selectButtonTextChange\",\n      showFileListChange: \"showFileListChange\",\n      tabIndexChange: \"tabIndexChange\",\n      uploadAbortedMessageChange: \"uploadAbortedMessageChange\",\n      uploadButtonTextChange: \"uploadButtonTextChange\",\n      uploadChunkChange: \"uploadChunkChange\",\n      uploadCustomDataChange: \"uploadCustomDataChange\",\n      uploadedMessageChange: \"uploadedMessageChange\",\n      uploadFailedMessageChange: \"uploadFailedMessageChange\",\n      uploadFileChange: \"uploadFileChange\",\n      uploadHeadersChange: \"uploadHeadersChange\",\n      uploadMethodChange: \"uploadMethodChange\",\n      uploadModeChange: \"uploadModeChange\",\n      uploadUrlChange: \"uploadUrlChange\",\n      validationErrorChange: \"validationErrorChange\",\n      validationErrorsChange: \"validationErrorsChange\",\n      validationStatusChange: \"validationStatusChange\",\n      valueChange: \"valueChange\",\n      visibleChange: \"visibleChange\",\n      widthChange: \"widthChange\",\n      onBlur: \"onBlur\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, CUSTOM_VALUE_ACCESSOR_PROVIDER, NestedOptionHost, IterableDifferHelper]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function DxFileUploaderComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n\n  __decorate([Input(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Function])], DxFileUploaderComponent.prototype, \"abortUpload\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxFileUploaderComponent.prototype, \"accept\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxFileUploaderComponent.prototype, \"accessKey\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxFileUploaderComponent.prototype, \"activeStateEnabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxFileUploaderComponent.prototype, \"allowCanceling\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Array), __metadata(\"design:paramtypes\", [Array])], DxFileUploaderComponent.prototype, \"allowedFileExtensions\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], DxFileUploaderComponent.prototype, \"chunkSize\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxFileUploaderComponent.prototype, \"dialogTrigger\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxFileUploaderComponent.prototype, \"disabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxFileUploaderComponent.prototype, \"dropZone\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxFileUploaderComponent.prototype, \"elementAttr\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxFileUploaderComponent.prototype, \"focusStateEnabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxFileUploaderComponent.prototype, \"height\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxFileUploaderComponent.prototype, \"hint\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxFileUploaderComponent.prototype, \"hoverStateEnabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxFileUploaderComponent.prototype, \"inputAttr\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxFileUploaderComponent.prototype, \"invalidFileExtensionMessage\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxFileUploaderComponent.prototype, \"invalidMaxFileSizeMessage\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxFileUploaderComponent.prototype, \"invalidMinFileSizeMessage\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxFileUploaderComponent.prototype, \"isValid\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxFileUploaderComponent.prototype, \"labelText\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], DxFileUploaderComponent.prototype, \"maxFileSize\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], DxFileUploaderComponent.prototype, \"minFileSize\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxFileUploaderComponent.prototype, \"multiple\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxFileUploaderComponent.prototype, \"name\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], DxFileUploaderComponent.prototype, \"progress\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxFileUploaderComponent.prototype, \"readOnly\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxFileUploaderComponent.prototype, \"readyToUploadMessage\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxFileUploaderComponent.prototype, \"rtlEnabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxFileUploaderComponent.prototype, \"selectButtonText\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxFileUploaderComponent.prototype, \"showFileList\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], DxFileUploaderComponent.prototype, \"tabIndex\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxFileUploaderComponent.prototype, \"uploadAbortedMessage\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxFileUploaderComponent.prototype, \"uploadButtonText\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Function])], DxFileUploaderComponent.prototype, \"uploadChunk\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxFileUploaderComponent.prototype, \"uploadCustomData\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxFileUploaderComponent.prototype, \"uploadedMessage\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxFileUploaderComponent.prototype, \"uploadFailedMessage\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Function])], DxFileUploaderComponent.prototype, \"uploadFile\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxFileUploaderComponent.prototype, \"uploadHeaders\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxFileUploaderComponent.prototype, \"uploadMethod\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxFileUploaderComponent.prototype, \"uploadMode\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxFileUploaderComponent.prototype, \"uploadUrl\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxFileUploaderComponent.prototype, \"validationError\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Array), __metadata(\"design:paramtypes\", [Array])], DxFileUploaderComponent.prototype, \"validationErrors\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxFileUploaderComponent.prototype, \"validationStatus\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Array), __metadata(\"design:paramtypes\", [Array])], DxFileUploaderComponent.prototype, \"value\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxFileUploaderComponent.prototype, \"visible\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxFileUploaderComponent.prototype, \"width\", null);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"onBeforeSend\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"onContentReady\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"onDisposing\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"onDropZoneEnter\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"onDropZoneLeave\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"onFilesUploaded\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"onInitialized\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"onOptionChanged\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"onProgress\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"onUploadAborted\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"onUploaded\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"onUploadError\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"onUploadStarted\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"onValueChanged\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"abortUploadChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"acceptChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"accessKeyChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"activeStateEnabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"allowCancelingChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"allowedFileExtensionsChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"chunkSizeChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"dialogTriggerChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"disabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"dropZoneChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"elementAttrChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"focusStateEnabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"heightChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"hintChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"hoverStateEnabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"inputAttrChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"invalidFileExtensionMessageChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"invalidMaxFileSizeMessageChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"invalidMinFileSizeMessageChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"isValidChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"labelTextChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"maxFileSizeChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"minFileSizeChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"multipleChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"nameChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"progressChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"readOnlyChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"readyToUploadMessageChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"rtlEnabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"selectButtonTextChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"showFileListChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"tabIndexChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"uploadAbortedMessageChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"uploadButtonTextChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"uploadChunkChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"uploadCustomDataChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"uploadedMessageChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"uploadFailedMessageChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"uploadFileChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"uploadHeadersChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"uploadMethodChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"uploadModeChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"uploadUrlChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"validationErrorChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"validationErrorsChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"validationStatusChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"valueChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"visibleChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"widthChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFileUploaderComponent.prototype, \"onBlur\", void 0);\n\n  __decorate([HostListener('valueChange', ['$event']), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], DxFileUploaderComponent.prototype, \"change\", null);\n\n  __decorate([HostListener('onBlur', ['$event']), __metadata(\"design:type\", Object)], DxFileUploaderComponent.prototype, \"touched\", void 0);\n\n  DxFileUploaderComponent = __decorate([__param(7, Inject(PLATFORM_ID)), __metadata(\"design:paramtypes\", [ElementRef, NgZone, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, TransferState, Object])], DxFileUploaderComponent);\n  return DxFileUploaderComponent;\n})();\nvar DxFileUploaderModule = /*#__PURE__*/(function () {\n  var DxFileUploaderModule = /*#__PURE__*/_createClass(function DxFileUploaderModule() {\n    _classCallCheck(this, DxFileUploaderModule);\n  });\n\n  DxFileUploaderModule.ɵfac = function DxFileUploaderModule_Factory(t) {\n    return new (t || DxFileUploaderModule)();\n  };\n\n  DxFileUploaderModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: DxFileUploaderModule\n  });\n  DxFileUploaderModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxTemplateModule]\n  });\n  return DxFileUploaderModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxFileUploaderModule, {\n    declarations: function declarations() {\n      return [DxFileUploaderComponent];\n    },\n    imports: function imports() {\n      return [DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule];\n    },\n    exports: function exports() {\n      return [DxFileUploaderComponent, DxTemplateModule];\n    }\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DxFileUploaderComponent, DxFileUploaderModule }; //# sourceMappingURL=devextreme-angular-ui-file-uploader.js.map","map":null,"metadata":{},"sourceType":"module"}