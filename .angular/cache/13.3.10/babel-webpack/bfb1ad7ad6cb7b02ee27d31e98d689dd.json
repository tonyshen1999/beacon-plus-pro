{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/gauges/circular_gauge.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nvar _isFinite = isFinite;\nimport registerComponent from \"../../core/component_registrator\";\nimport { clone } from \"../../core/utils/object\";\nimport { extend } from \"../../core/utils/extend\";\nimport { each } from \"../../core/utils/iterator\";\nimport { BaseGauge } from \"./base_gauge\";\nimport { dxGauge, createIndicatorCreator } from \"./common\";\nimport { normalizeAngle, getCosAndSin } from \"../core/utils\";\nvar _normalizeAngle = normalizeAngle;\nvar _getCosAndSin = getCosAndSin;\nimport * as circularIndicators from \"./circular_indicators\";\nimport CircularRangeContainer from \"./circular_range_container\";\nvar _abs = Math.abs;\nvar _max = Math.max;\nvar _min = Math.min;\nvar _round = Math.round;\nvar _each = each;\nvar PI = Math.PI;\n\nfunction getSides(startAngle, endAngle) {\n  var startCosSin = _getCosAndSin(startAngle);\n\n  var endCosSin = _getCosAndSin(endAngle);\n\n  var startCos = startCosSin.cos;\n  var startSin = startCosSin.sin;\n  var endCos = endCosSin.cos;\n  var endSin = endCosSin.sin;\n  return {\n    left: startSin <= 0 && endSin >= 0 || startSin <= 0 && endSin <= 0 && startCos <= endCos || startSin >= 0 && endSin >= 0 && startCos >= endCos ? -1 : _min(startCos, endCos, 0),\n    right: startSin >= 0 && endSin <= 0 || startSin >= 0 && endSin >= 0 && startCos >= endCos || startSin <= 0 && endSin <= 0 && startCos <= endCos ? 1 : _max(startCos, endCos, 0),\n    up: startCos <= 0 && endCos >= 0 || startCos <= 0 && endCos <= 0 && startSin >= endSin || startCos >= 0 && endCos >= 0 && startSin <= endSin ? -1 : -_max(startSin, endSin, 0),\n    down: startCos >= 0 && endCos <= 0 || startCos >= 0 && endCos >= 0 && startSin <= endSin || startCos <= 0 && endCos <= 0 && startSin >= endSin ? 1 : -_min(startSin, endSin, 0)\n  };\n}\n\nvar dxCircularGauge = dxGauge.inherit({\n  _rootClass: \"dxg-circular-gauge\",\n  _factoryMethods: {\n    rangeContainer: \"createCircularRangeContainer\",\n    indicator: \"createCircularIndicator\"\n  },\n  _gridSpacingFactor: 17,\n  _scaleTypes: {\n    type: \"polarAxes\",\n    drawingType: \"circular\"\n  },\n  _getThemeManagerOptions: function _getThemeManagerOptions() {\n    var options = this.callBase.apply(this, arguments);\n    options.subTheme = \"_circular\";\n    return options;\n  },\n  _updateScaleTickIndent: function _updateScaleTickIndent(scaleOptions) {\n    var indentFromTick = scaleOptions.label.indentFromTick;\n    var length = scaleOptions.tick.visible ? scaleOptions.tick.length : 0;\n\n    var textParams = this._scale.measureLabels(extend({}, this._canvas));\n\n    var scaleOrientation = scaleOptions.orientation;\n    var tickCorrection = length;\n    var indentFromAxis = indentFromTick;\n\n    if (indentFromTick >= 0) {\n      if (\"outside\" === scaleOrientation) {\n        indentFromAxis += tickCorrection;\n      } else if (\"center\" === scaleOrientation) {\n        indentFromAxis += tickCorrection / 2;\n      }\n    } else {\n      var labelCorrection = _max(textParams.width, textParams.height);\n\n      var rangeContainerWidth = this._getOption(\"rangeContainer\").width;\n\n      indentFromAxis -= labelCorrection + rangeContainerWidth;\n\n      if (\"inside\" === scaleOrientation) {\n        indentFromAxis -= tickCorrection;\n      } else if (\"center\" === scaleOrientation) {\n        indentFromAxis -= tickCorrection / 2;\n      }\n    }\n\n    scaleOptions.label.indentFromAxis = indentFromAxis;\n\n    this._scale.updateOptions(scaleOptions);\n  },\n  _setupCodomain: function _setupCodomain() {\n    var geometry = this.option(\"geometry\") || {};\n    var startAngle = geometry.startAngle;\n    var endAngle = geometry.endAngle;\n    var sides;\n    startAngle = _isFinite(startAngle) ? _normalizeAngle(startAngle) : 225;\n    endAngle = _isFinite(endAngle) ? _normalizeAngle(endAngle) : -45;\n\n    if (_abs(startAngle - endAngle) < 1) {\n      endAngle -= 360;\n      sides = {\n        left: -1,\n        up: -1,\n        right: 1,\n        down: 1\n      };\n    } else {\n      startAngle < endAngle && (endAngle -= 360);\n      sides = getSides(startAngle, endAngle);\n    }\n\n    this._area = {\n      x: 0,\n      y: 0,\n      radius: 100,\n      startCoord: startAngle,\n      endCoord: endAngle,\n      sides: sides\n    };\n\n    this._translator.setCodomain(startAngle, endAngle);\n  },\n  _shiftScale: function _shiftScale(layout) {\n    var scale = this._scale;\n    var canvas = scale.getCanvas();\n    canvas.width = canvas.height = 2 * layout.radius;\n    scale.draw(canvas);\n    var centerCoords = scale.getCenter();\n    scale.shift({\n      right: layout.x - centerCoords.x,\n      bottom: layout.y - centerCoords.y\n    });\n  },\n  _getScaleLayoutValue: function _getScaleLayoutValue() {\n    return this._area.radius;\n  },\n  _getTicksOrientation: function _getTicksOrientation(scaleOptions) {\n    return scaleOptions.orientation;\n  },\n  _getTicksCoefficients: function _getTicksCoefficients(options) {\n    var coefs = {\n      inner: 0,\n      outer: 1\n    };\n\n    if (\"inside\" === options.orientation) {\n      coefs.inner = 1;\n      coefs.outer = 0;\n    } else if (\"center\" === options.orientation) {\n      coefs.inner = coefs.outer = .5;\n    }\n\n    return coefs;\n  },\n  _correctScaleIndents: function _correctScaleIndents(result, indentFromTick, textParams) {\n    if (indentFromTick >= 0) {\n      result.horizontalOffset = indentFromTick + textParams.width;\n      result.verticalOffset = indentFromTick + textParams.height;\n    } else {\n      result.horizontalOffset = result.verticalOffset = 0;\n      result.min -= -indentFromTick + _max(textParams.width, textParams.height);\n    }\n\n    result.inverseHorizontalOffset = textParams.width / 2;\n    result.inverseVerticalOffset = textParams.height / 2;\n  },\n  _measureMainElements: function _measureMainElements(elements, scaleMeasurement) {\n    var radius = this._area.radius;\n    var maxRadius = 0;\n    var minRadius = 1 / 0;\n    var maxHorizontalOffset = 0;\n    var maxVerticalOffset = 0;\n    var maxInverseHorizontalOffset = 0;\n    var maxInverseVerticalOffset = 0;\n    var scale = this._scale;\n\n    _each(elements.concat(scale), function (_, element) {\n      var bounds = element.measure ? element.measure({\n        radius: radius - element.getOffset()\n      }) : scaleMeasurement;\n      bounds.min > 0 && (minRadius = _min(minRadius, bounds.min));\n      bounds.max > 0 && (maxRadius = _max(maxRadius, bounds.max));\n      bounds.horizontalOffset > 0 && (maxHorizontalOffset = _max(maxHorizontalOffset, bounds.max + bounds.horizontalOffset));\n      bounds.verticalOffset > 0 && (maxVerticalOffset = _max(maxVerticalOffset, bounds.max + bounds.verticalOffset));\n      bounds.inverseHorizontalOffset > 0 && (maxInverseHorizontalOffset = _max(maxInverseHorizontalOffset, bounds.inverseHorizontalOffset));\n      bounds.inverseVerticalOffset > 0 && (maxInverseVerticalOffset = _max(maxInverseVerticalOffset, bounds.inverseVerticalOffset));\n    });\n\n    maxHorizontalOffset = _max(maxHorizontalOffset - maxRadius, 0);\n    maxVerticalOffset = _max(maxVerticalOffset - maxRadius, 0);\n    return {\n      minRadius: minRadius,\n      maxRadius: maxRadius,\n      horizontalMargin: maxHorizontalOffset,\n      verticalMargin: maxVerticalOffset,\n      inverseHorizontalMargin: maxInverseHorizontalOffset,\n      inverseVerticalMargin: maxInverseVerticalOffset\n    };\n  },\n  _applyMainLayout: function _applyMainLayout(elements, scaleMeasurement) {\n    var measurements = this._measureMainElements(elements, scaleMeasurement);\n\n    var area = this._area;\n    var sides = area.sides;\n    var margins = {\n      left: (sides.left < -.1 ? measurements.horizontalMargin : measurements.inverseHorizontalMargin) || 0,\n      right: (sides.right > .1 ? measurements.horizontalMargin : measurements.inverseHorizontalMargin) || 0,\n      top: (sides.up < -.1 ? measurements.verticalMargin : measurements.inverseVerticalMargin) || 0,\n      bottom: (sides.down > .1 ? measurements.verticalMargin : measurements.inverseVerticalMargin) || 0\n    };\n    var rect = selectRectByAspectRatio(this._innerRect, (sides.down - sides.up) / (sides.right - sides.left), margins);\n\n    var radius = _min(getWidth(rect) / (sides.right - sides.left), getHeight(rect) / (sides.down - sides.up));\n\n    radius = radius - measurements.maxRadius + area.radius;\n    var x = rect.left - getWidth(rect) * sides.left / (sides.right - sides.left);\n    var y = rect.top - getHeight(rect) * sides.up / (sides.down - sides.up);\n    area.x = _round(x);\n    area.y = _round(y);\n    area.radius = radius;\n    rect.left -= margins.left;\n    rect.right += margins.right;\n    rect.top -= margins.top;\n    rect.bottom += margins.bottom;\n    this._innerRect = rect;\n  },\n  _getElementLayout: function _getElementLayout(offset) {\n    return {\n      x: this._area.x,\n      y: this._area.y,\n      radius: _round(this._area.radius - offset)\n    };\n  },\n  _getApproximateScreenRange: function _getApproximateScreenRange() {\n    var area = this._area;\n\n    var r = _min(this._canvas.width / (area.sides.right - area.sides.left), this._canvas.height / (area.sides.down - area.sides.up));\n\n    r > area.totalRadius && (r = area.totalRadius);\n    r *= .8;\n    return -this._translator.getCodomainRange() * r * PI / 180;\n  },\n  _getDefaultSize: function _getDefaultSize() {\n    return {\n      width: 300,\n      height: 300\n    };\n  },\n  _factory: clone(BaseGauge.prototype._factory)\n});\n\nfunction getWidth(rect) {\n  return rect.right - rect.left;\n}\n\nfunction getHeight(rect) {\n  return rect.bottom - rect.top;\n}\n\nfunction selectRectByAspectRatio(srcRect, aspectRatio, margins) {\n  var rect = extend({}, srcRect);\n  var selfAspectRatio;\n  var width = 0;\n  var height = 0;\n  margins = margins || {};\n\n  if (aspectRatio > 0) {\n    rect.left += margins.left || 0;\n    rect.right -= margins.right || 0;\n    rect.top += margins.top || 0;\n    rect.bottom -= margins.bottom || 0;\n\n    if (getWidth(rect) > 0 && getHeight(rect) > 0) {\n      selfAspectRatio = getHeight(rect) / getWidth(rect);\n\n      if (selfAspectRatio > 1) {\n        aspectRatio < selfAspectRatio ? width = getWidth(rect) : height = getHeight(rect);\n      } else {\n        aspectRatio > selfAspectRatio ? height = getHeight(rect) : width = getWidth(rect);\n      }\n\n      width > 0 || (width = height / aspectRatio);\n      height > 0 || (height = width * aspectRatio);\n      width = (getWidth(rect) - width) / 2;\n      height = (getHeight(rect) - height) / 2;\n      rect.left += width;\n      rect.right -= width;\n      rect.top += height;\n      rect.bottom -= height;\n    } else {\n      rect.left = rect.right = (rect.left + rect.right) / 2;\n      rect.top = rect.bottom = (rect.top + rect.bottom) / 2;\n    }\n  }\n\n  return rect;\n}\n\nvar indicators = dxCircularGauge.prototype._factory.indicators = {};\ndxCircularGauge.prototype._factory.createIndicator = createIndicatorCreator(indicators);\nindicators._default = circularIndicators._default;\nindicators.rectangleneedle = circularIndicators.rectangleneedle;\nindicators.triangleneedle = circularIndicators.triangleneedle;\nindicators.twocolorneedle = circularIndicators.twocolorneedle;\nindicators.trianglemarker = circularIndicators.trianglemarker;\nindicators.textcloud = circularIndicators.textcloud;\nindicators.rangebar = circularIndicators.rangebar;\ndxCircularGauge.prototype._factory.RangeContainer = CircularRangeContainer;\nregisterComponent(\"dxCircularGauge\", dxCircularGauge);\nexport default dxCircularGauge;","map":null,"metadata":{},"sourceType":"module"}