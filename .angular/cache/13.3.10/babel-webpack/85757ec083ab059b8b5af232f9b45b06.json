{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/calendar/ui.calendar.base_view.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport domAdapter from \"../../core/dom_adapter\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { data as elementData } from \"../../core/element_data\";\nimport { getPublicElement } from \"../../core/element\";\nimport Widget from \"../widget/ui.widget\";\nimport coreDateUtils from \"../../core/utils/date\";\nimport { extend } from \"../../core/utils/extend\";\nimport { noop } from \"../../core/utils/common\";\nimport dateSerialization from \"../../core/utils/date_serialization\";\nimport messageLocalization from \"../../localization/message\";\nimport { addNamespace } from \"../../events/utils/index\";\nimport { name as clickEventName } from \"../../events/click\";\nvar abstract = Widget.abstract;\nvar CALENDAR_OTHER_VIEW_CLASS = \"dx-calendar-other-view\";\nvar CALENDAR_CELL_CLASS = \"dx-calendar-cell\";\nvar CALENDAR_EMPTY_CELL_CLASS = \"dx-calendar-empty-cell\";\nvar CALENDAR_TODAY_CLASS = \"dx-calendar-today\";\nvar CALENDAR_SELECTED_DATE_CLASS = \"dx-calendar-selected-date\";\nvar CALENDAR_CONTOURED_DATE_CLASS = \"dx-calendar-contoured-date\";\nvar CALENDAR_DXCLICK_EVENT_NAME = addNamespace(clickEventName, \"dxCalendar\");\nvar CALENDAR_DATE_VALUE_KEY = \"dxDateValueKey\";\nvar BaseView = Widget.inherit({\n  _getViewName: function _getViewName() {\n    return \"base\";\n  },\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      date: new Date(),\n      focusStateEnabled: false,\n      cellTemplate: null,\n      disabledDates: null,\n      onCellClick: null,\n      rowCount: 3,\n      colCount: 4,\n      allowValueSelection: true,\n      _todayDate: function _todayDate() {\n        return new Date();\n      }\n    });\n  },\n  _initMarkup: function _initMarkup() {\n    this.callBase();\n\n    this._renderImpl();\n  },\n  _renderImpl: function _renderImpl() {\n    this.$element().append(this._createTable());\n\n    this._createDisabledDatesHandler();\n\n    this._renderBody();\n\n    this._renderContouredDate();\n\n    this._renderValue();\n\n    this._renderEvents();\n  },\n  _createTable: function _createTable() {\n    this._$table = $(\"<table>\");\n    this.setAria({\n      label: messageLocalization.format(\"dxCalendar-ariaWidgetName\"),\n      role: \"grid\"\n    }, this._$table);\n    return this._$table;\n  },\n  _renderBody: function _renderBody() {\n    this.$body = $(\"<tbody>\").appendTo(this._$table);\n    var rowData = {\n      cellDate: this._getFirstCellData(),\n      prevCellDate: null\n    };\n\n    for (var rowIndex = 0, rowCount = this.option(\"rowCount\"); rowIndex < rowCount; rowIndex++) {\n      rowData.row = this._createRow();\n\n      for (var colIndex = 0, colCount = this.option(\"colCount\"); colIndex < colCount; colIndex++) {\n        this._renderCell(rowData, colIndex);\n      }\n    }\n  },\n  _createRow: function _createRow() {\n    var row = domAdapter.createElement(\"tr\");\n    this.setAria(\"role\", \"row\", $(row));\n    this.$body.get(0).appendChild(row);\n    return row;\n  },\n  _appendCell: function _appendCell(row, cell) {\n    if (!this._appendMethodName) {\n      this._cacheAppendMethodName();\n    }\n\n    $(row)[this._appendMethodName](cell);\n  },\n  _cacheAppendMethodName: function _cacheAppendMethodName(rtlEnabled) {\n    this._appendMethodName = (null !== rtlEnabled && void 0 !== rtlEnabled ? rtlEnabled : this.option(\"rtlEnabled\")) ? \"prepend\" : \"append\";\n  },\n  _createCell: function _createCell(cellDate) {\n    var cell = domAdapter.createElement(\"td\");\n    var $cell = $(cell);\n    cell.className = this._getClassNameByDate(cellDate);\n    cell.setAttribute(\"data-value\", dateSerialization.serializeDate(cellDate, coreDateUtils.getShortDateFormat()));\n    elementData(cell, CALENDAR_DATE_VALUE_KEY, cellDate);\n    this.setAria({\n      role: \"gridcell\",\n      label: this.getCellAriaLabel(cellDate)\n    }, $cell);\n    return {\n      cell: cell,\n      $cell: $cell\n    };\n  },\n  _renderCell: function _renderCell(params, cellIndex) {\n    var cellDate = params.cellDate,\n        prevCellDate = params.prevCellDate,\n        row = params.row;\n\n    if (prevCellDate) {\n      coreDateUtils.fixTimezoneGap(prevCellDate, cellDate);\n    }\n\n    params.prevCellDate = cellDate;\n\n    var _this$_createCell = this._createCell(cellDate),\n        cell = _this$_createCell.cell,\n        $cell = _this$_createCell.$cell;\n\n    var cellTemplate = this.option(\"cellTemplate\");\n\n    this._appendCell(row, cell);\n\n    if (cellTemplate) {\n      cellTemplate.render(this._prepareCellTemplateData(cellDate, cellIndex, $cell));\n    } else {\n      cell.innerHTML = this._getCellText(cellDate);\n    }\n\n    params.cellDate = this._getNextCellData(cellDate);\n  },\n  _getClassNameByDate: function _getClassNameByDate(cellDate) {\n    var className = CALENDAR_CELL_CLASS;\n\n    if (this._isTodayCell(cellDate)) {\n      className += \" \".concat(CALENDAR_TODAY_CLASS);\n    }\n\n    if (this._isDateOutOfRange(cellDate) || this.isDateDisabled(cellDate)) {\n      className += \" \".concat(CALENDAR_EMPTY_CELL_CLASS);\n    }\n\n    if (this._isOtherView(cellDate)) {\n      className += \" \".concat(CALENDAR_OTHER_VIEW_CLASS);\n    }\n\n    return className;\n  },\n  _prepareCellTemplateData: function _prepareCellTemplateData(cellDate, cellIndex, $cell) {\n    return {\n      model: {\n        text: this._getCellText(cellDate),\n        date: cellDate,\n        view: this._getViewName()\n      },\n      container: getPublicElement($cell),\n      index: cellIndex\n    };\n  },\n  _renderEvents: function _renderEvents() {\n    var _this = this;\n\n    this._createCellClickAction();\n\n    eventsEngine.off(this._$table, CALENDAR_DXCLICK_EVENT_NAME);\n    eventsEngine.on(this._$table, CALENDAR_DXCLICK_EVENT_NAME, \"td\", function (e) {\n      if (!$(e.currentTarget).hasClass(CALENDAR_EMPTY_CELL_CLASS)) {\n        _this._cellClickAction({\n          event: e,\n          value: $(e.currentTarget).data(CALENDAR_DATE_VALUE_KEY)\n        });\n      }\n    });\n  },\n  _createCellClickAction: function _createCellClickAction() {\n    this._cellClickAction = this._createActionByOption(\"onCellClick\");\n  },\n  _createDisabledDatesHandler: function _createDisabledDatesHandler() {\n    var disabledDates = this.option(\"disabledDates\");\n    this._disabledDatesHandler = Array.isArray(disabledDates) ? this._getDefaultDisabledDatesHandler(disabledDates) : disabledDates || noop;\n  },\n  _getDefaultDisabledDatesHandler: function _getDefaultDisabledDatesHandler(disabledDates) {\n    return noop;\n  },\n  _isTodayCell: abstract,\n  _isDateOutOfRange: abstract,\n  isDateDisabled: function isDateDisabled(cellDate) {\n    var dateParts = {\n      date: cellDate,\n      view: this._getViewName()\n    };\n    return this._disabledDatesHandler(dateParts);\n  },\n  _isOtherView: abstract,\n  _getCellText: abstract,\n  _getFirstCellData: abstract,\n  _getNextCellData: abstract,\n  _renderContouredDate: function _renderContouredDate(contouredDate) {\n    if (!this.option(\"focusStateEnabled\")) {\n      return;\n    }\n\n    contouredDate = contouredDate || this.option(\"contouredDate\");\n\n    var $oldContouredCell = this._getContouredCell();\n\n    var $newContouredCell = this._getCellByDate(contouredDate);\n\n    $oldContouredCell.removeClass(CALENDAR_CONTOURED_DATE_CLASS);\n    $newContouredCell.addClass(CALENDAR_CONTOURED_DATE_CLASS);\n  },\n  _getContouredCell: function _getContouredCell() {\n    return this._$table.find(\".\".concat(CALENDAR_CONTOURED_DATE_CLASS));\n  },\n  _changeValue: function _changeValue(cellDate) {\n    if (cellDate) {\n      var value = this.option(\"value\");\n      var newValue = value ? new Date(value) : new Date();\n      newValue.setDate(cellDate.getDate());\n      newValue.setMonth(cellDate.getMonth());\n      newValue.setFullYear(cellDate.getFullYear());\n      newValue.setDate(cellDate.getDate());\n      this.option(\"value\", newValue);\n    } else {\n      this.option(\"value\", null);\n    }\n  },\n  _renderValue: function _renderValue() {\n    if (!this.option(\"allowValueSelection\")) {\n      return;\n    }\n\n    var value = this.option(\"value\");\n\n    var selectedCell = this._getCellByDate(value);\n\n    if (this._selectedCell) {\n      this._selectedCell.removeClass(CALENDAR_SELECTED_DATE_CLASS);\n    }\n\n    selectedCell.addClass(CALENDAR_SELECTED_DATE_CLASS);\n    this._selectedCell = selectedCell;\n  },\n  getCellAriaLabel: function getCellAriaLabel(date) {\n    return this._getCellText(date);\n  },\n  _getFirstAvailableDate: function _getFirstAvailableDate() {\n    var date = this.option(\"date\");\n    var min = this.option(\"min\");\n    date = coreDateUtils.getFirstDateView(this._getViewName(), date);\n    return new Date(min && date < min ? min : date);\n  },\n  _getCellByDate: abstract,\n  isBoundary: abstract,\n  _optionChanged: function _optionChanged(args) {\n    var name = args.name,\n        value = args.value;\n\n    switch (name) {\n      case \"value\":\n        this._renderValue();\n\n        break;\n\n      case \"contouredDate\":\n        this._renderContouredDate(value);\n\n        break;\n\n      case \"onCellClick\":\n        this._createCellClickAction();\n\n        break;\n\n      case \"disabledDates\":\n      case \"cellTemplate\":\n        this._invalidate();\n\n        break;\n\n      case \"rtlEnabled\":\n        this._cacheAppendMethodName(value);\n\n        this.callBase(args);\n        break;\n\n      case \"_todayDate\":\n        this._renderBody();\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  }\n});\nexport default BaseView;","map":null,"metadata":{},"sourceType":"module"}