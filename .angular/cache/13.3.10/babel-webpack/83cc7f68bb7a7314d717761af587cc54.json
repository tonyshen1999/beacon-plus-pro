{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/ui/diagram/ui.diagram.dialogs.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport Widget from \"../widget/ui.widget\";\nimport messageLocalization from \"../../localization/message\";\nimport Popup from \"../popup\";\nimport { extend } from \"../../core/utils/extend\";\n\nvar DiagramDialog = /*#__PURE__*/function (_Widget) {\n  _inherits(DiagramDialog, _Widget);\n\n  var _super = _createSuper(DiagramDialog);\n\n  function DiagramDialog() {\n    _classCallCheck(this, DiagramDialog);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DiagramDialog, [{\n    key: \"_init\",\n    value: function _init() {\n      _get(_getPrototypeOf(DiagramDialog.prototype), \"_init\", this).call(this);\n\n      this._command = void 0;\n      this._isShown = false;\n\n      this._createOnGetContentOption();\n\n      this._createOnHiddenOption();\n    }\n  }, {\n    key: \"_initMarkup\",\n    value: function _initMarkup() {\n      _get(_getPrototypeOf(DiagramDialog.prototype), \"_initMarkup\", this).call(this);\n\n      this._command = this.option(\"command\");\n      this._$popupElement = $(\"<div>\").appendTo(this.$element());\n      this._popup = this._createComponent(this._$popupElement, Popup, {\n        title: this.option(\"title\"),\n        maxWidth: this.option(\"maxWidth\"),\n        height: this.option(\"height\"),\n        toolbarItems: this.option(\"toolbarItems\"),\n        onHidden: this._onHiddenAction\n      });\n    }\n  }, {\n    key: \"_clean\",\n    value: function _clean() {\n      delete this._popup;\n      this._$popupElement && this._$popupElement.remove();\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function _getDefaultOptions() {\n      return extend(_get(_getPrototypeOf(DiagramDialog.prototype), \"_getDefaultOptions\", this).call(this), {\n        title: \"\",\n        maxWidth: 500,\n        height: \"auto\",\n        toolbarItems: this._getToolbarItems()\n      });\n    }\n  }, {\n    key: \"_getToolbarItems\",\n    value: function _getToolbarItems() {\n      return [this._getOkToolbarItem(), this._getCancelToolbarItem()];\n    }\n  }, {\n    key: \"_getOkToolbarItem\",\n    value: function _getOkToolbarItem() {\n      return {\n        widget: \"dxButton\",\n        location: \"after\",\n        toolbar: \"bottom\",\n        options: {\n          text: messageLocalization.format(\"dxDiagram-dialogButtonOK\"),\n          onClick: function () {\n            this._command.execute(this._commandParameter);\n\n            this._hide();\n          }.bind(this)\n        }\n      };\n    }\n  }, {\n    key: \"_getCancelToolbarItem\",\n    value: function _getCancelToolbarItem() {\n      return {\n        widget: \"dxButton\",\n        location: \"after\",\n        toolbar: \"bottom\",\n        options: {\n          text: messageLocalization.format(\"dxDiagram-dialogButtonCancel\"),\n          onClick: this._hide.bind(this)\n        }\n      };\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function _optionChanged(args) {\n      switch (args.name) {\n        case \"title\":\n        case \"maxWidth\":\n        case \"height\":\n        case \"toolbarItems\":\n          this._popup.option(args.name, args.value);\n\n          break;\n\n        case \"command\":\n          this._command = args.value;\n          break;\n\n        case \"onGetContent\":\n          this._createOnGetContentOption();\n\n          break;\n\n        case \"onHidden\":\n          this._createOnHiddenOption();\n\n          break;\n\n        default:\n          _get(_getPrototypeOf(DiagramDialog.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }, {\n    key: \"_createOnGetContentOption\",\n    value: function _createOnGetContentOption() {\n      this._onGetContentAction = this._createActionByOption(\"onGetContent\");\n    }\n  }, {\n    key: \"_createOnHiddenOption\",\n    value: function _createOnHiddenOption() {\n      this._onHiddenAction = this._createActionByOption(\"onHidden\");\n    }\n  }, {\n    key: \"_hide\",\n    value: function _hide() {\n      this._popup.hide();\n\n      this._isShown = false;\n    }\n  }, {\n    key: \"_show\",\n    value: function _show() {\n      this._popup.$content().empty().append(this._onGetContentAction());\n\n      this._popup.show();\n\n      this._isShown = true;\n    }\n  }, {\n    key: \"isVisible\",\n    value: function isVisible() {\n      return this._isShown;\n    }\n  }]);\n\n  return DiagramDialog;\n}(Widget);\n\nexport default DiagramDialog;","map":null,"metadata":{},"sourceType":"module"}