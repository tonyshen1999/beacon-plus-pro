{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/**\r\n * DevExtreme (esm/core/options/index.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { isFunction, isObject, type } from \"../utils/type\";\nimport { equalByValue, noop } from \"../utils/common\";\nimport { OptionManager } from \"./option_manager\";\nimport { getPathParts } from \"../utils/data\";\nimport { getFieldName, getParentName, convertRulesToOptions, getNestedOptionValue } from \"./utils\";\nimport { extend } from \"../utils/extend\";\nexport var Options = /*#__PURE__*/function () {\n  function Options(options, defaultOptions, optionsByReference, deprecatedOptions) {\n    var _this = this;\n\n    _classCallCheck(this, Options);\n\n    this._deprecatedCallback;\n    this._startChangeCallback;\n    this._endChangeCallback;\n    this._default = defaultOptions;\n    this._deprecated = deprecatedOptions;\n    this._deprecatedNames = [];\n\n    this._initDeprecatedNames();\n\n    this._optionManager = new OptionManager(options, optionsByReference);\n\n    this._optionManager.onRelevantNamesPrepared(function (options, name, value, silent) {\n      return _this._setRelevantNames(options, name, value, silent);\n    });\n\n    this._cachedOptions = {};\n    this._rules = [];\n  }\n\n  _createClass(Options, [{\n    key: \"_initial\",\n    get: function get() {\n      if (!this._initialOptions) {\n        var rulesOptions = this._getByRules(this.silent(\"defaultOptionsRules\"));\n\n        this._initialOptions = this._default;\n\n        this._optionManager._setByReference(this._initialOptions, rulesOptions);\n      }\n\n      return this._initialOptions;\n    },\n    set: function set(value) {\n      this._initialOptions = value;\n    }\n  }, {\n    key: \"_initDeprecatedNames\",\n    value: function _initDeprecatedNames() {\n      for (var optionName in this._deprecated) {\n        this._deprecatedNames.push(optionName);\n      }\n    }\n  }, {\n    key: \"_getByRules\",\n    value: function _getByRules(rules) {\n      rules = Array.isArray(rules) ? this._rules.concat(rules) : this._rules;\n      return convertRulesToOptions(rules);\n    }\n  }, {\n    key: \"_notifyDeprecated\",\n    value: function _notifyDeprecated(option) {\n      var info = this._deprecated[option];\n\n      if (info) {\n        this._deprecatedCallback(option, info);\n      }\n    }\n  }, {\n    key: \"_setRelevantNames\",\n    value: function _setRelevantNames(options, name, value, silent) {\n      if (name) {\n        var normalizedName = this._normalizeName(name, silent);\n\n        if (normalizedName && normalizedName !== name) {\n          this._setField(options, normalizedName, value);\n\n          this._clearField(options, name);\n        }\n      }\n    }\n  }, {\n    key: \"_setField\",\n    value: function _setField(options, fullName, value) {\n      var fieldName = \"\";\n      var fieldObject = null;\n\n      do {\n        fieldName = fieldName ? \".\".concat(fieldName) : \"\";\n        fieldName = getFieldName(fullName) + fieldName;\n        fullName = getParentName(fullName);\n        fieldObject = fullName ? this._optionManager.get(options, fullName, false) : options;\n      } while (!fieldObject);\n\n      fieldObject[fieldName] = value;\n    }\n  }, {\n    key: \"_clearField\",\n    value: function _clearField(options, name) {\n      delete options[name];\n      var previousFieldName = getParentName(name);\n      var fieldObject = previousFieldName ? this._optionManager.get(options, previousFieldName, false) : options;\n\n      if (fieldObject) {\n        delete fieldObject[getFieldName(name)];\n      }\n    }\n  }, {\n    key: \"_normalizeName\",\n    value: function _normalizeName(name, silent) {\n      if (this._deprecatedNames.length && name) {\n        for (var i = 0; i < this._deprecatedNames.length; i++) {\n          if (this._deprecatedNames[i] === name) {\n            var deprecate = this._deprecated[name];\n\n            if (deprecate) {\n              !silent && this._notifyDeprecated(name);\n              return deprecate.alias || name;\n            }\n          }\n        }\n      }\n\n      return name;\n    }\n  }, {\n    key: \"addRules\",\n    value: function addRules(rules) {\n      this._rules = rules.concat(this._rules);\n    }\n  }, {\n    key: \"applyRules\",\n    value: function applyRules(rules) {\n      var options = this._getByRules(rules);\n\n      this.silent(options);\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this._deprecatedCallback = noop;\n      this._startChangeCallback = noop;\n      this._endChangeCallback = noop;\n\n      this._optionManager.dispose();\n    }\n  }, {\n    key: \"onChanging\",\n    value: function onChanging(callBack) {\n      this._optionManager.onChanging(callBack);\n    }\n  }, {\n    key: \"onChanged\",\n    value: function onChanged(callBack) {\n      this._optionManager.onChanged(callBack);\n    }\n  }, {\n    key: \"onDeprecated\",\n    value: function onDeprecated(callBack) {\n      this._deprecatedCallback = callBack;\n    }\n  }, {\n    key: \"onStartChange\",\n    value: function onStartChange(callBack) {\n      this._startChangeCallback = callBack;\n    }\n  }, {\n    key: \"onEndChange\",\n    value: function onEndChange(callBack) {\n      this._endChangeCallback = callBack;\n    }\n  }, {\n    key: \"isInitial\",\n    value: function isInitial(name) {\n      var value = this.silent(name);\n      var initialValue = this.initial(name);\n      var areFunctions = isFunction(value) && isFunction(initialValue);\n      return areFunctions ? value.toString() === initialValue.toString() : equalByValue(value, initialValue);\n    }\n  }, {\n    key: \"initial\",\n    value: function initial(name) {\n      return getNestedOptionValue(this._initial, name);\n    }\n  }, {\n    key: \"option\",\n    value: function option(options, value) {\n      var isGetter = arguments.length < 2 && \"object\" !== type(options);\n\n      if (isGetter) {\n        return this._optionManager.get(void 0, this._normalizeName(options));\n      } else {\n        this._startChangeCallback();\n\n        try {\n          this._optionManager.set(options, value);\n        } finally {\n          this._endChangeCallback();\n        }\n      }\n    }\n  }, {\n    key: \"silent\",\n    value: function silent(options, value) {\n      var isGetter = arguments.length < 2 && \"object\" !== type(options);\n\n      if (isGetter) {\n        return this._optionManager.get(void 0, options, void 0, true);\n      } else {\n        this._optionManager.set(options, value, void 0, true);\n      }\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(name) {\n      var _this2 = this;\n\n      if (name) {\n        var fullPath = getPathParts(name);\n        var value = fullPath.reduce(function (value, field) {\n          return value ? value[field] : _this2.initial(field);\n        }, null);\n        var defaultValue = isObject(value) ? _extends({}, value) : value;\n\n        this._optionManager.set(name, defaultValue, false);\n      }\n    }\n  }, {\n    key: \"getAliasesByName\",\n    value: function getAliasesByName(name) {\n      var _this3 = this;\n\n      return Object.keys(this._deprecated).filter(function (aliasName) {\n        return name === _this3._deprecated[aliasName].alias;\n      });\n    }\n  }, {\n    key: \"isDeprecated\",\n    value: function isDeprecated(name) {\n      return Object.prototype.hasOwnProperty.call(this._deprecated, name);\n    }\n  }, {\n    key: \"cache\",\n    value: function cache(name, options) {\n      var isGetter = arguments.length < 2;\n\n      if (isGetter) {\n        return this._cachedOptions[name];\n      } else {\n        this._cachedOptions[name] = extend(this._cachedOptions[name], options);\n      }\n    }\n  }]);\n\n  return Options;\n}();","map":null,"metadata":{},"sourceType":"module"}