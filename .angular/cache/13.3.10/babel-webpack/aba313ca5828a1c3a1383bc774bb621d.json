{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/sparklines/base_sparkline.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport eventsEngine from \"../../events/core/events_engine\";\nimport domAdapter from \"../../core/dom_adapter\";\nimport { isFunction } from \"../../core/utils/type\";\nimport BaseWidget from \"../core/base_widget\";\nimport { extend } from \"../../core/utils/extend\";\nimport { addNamespace } from \"../../events/utils/index\";\nimport pointerEvents from \"../../events/pointer\";\nimport { pointInCanvas } from \"../core/utils\";\nvar DEFAULT_LINE_SPACING = 2;\nvar EVENT_NS = \"sparkline-tooltip\";\nvar POINTER_ACTION = addNamespace([pointerEvents.down, pointerEvents.move], EVENT_NS);\nimport { Translator2D } from \"../translators/translator2d\";\nvar _extend = extend;\nvar _floor = Math.floor;\nimport { noop as _noop } from \"../../core/utils/common\";\n\nfunction inCanvas(_ref, x, y) {\n  var width = _ref.width,\n      height = _ref.height;\n  return pointInCanvas({\n    left: 0,\n    top: 0,\n    right: width,\n    bottom: height,\n    width: width,\n    height: height\n  }, x, y);\n}\n\nfunction pointerHandler(_ref2) {\n  var data = _ref2.data;\n  var that = data.widget;\n\n  that._enableOutHandler();\n\n  that._showTooltip();\n}\n\nfunction generateDefaultCustomizeTooltipCallback(fontOptions, rtlEnabled) {\n  var lineSpacing = fontOptions.lineSpacing;\n  var lineHeight = (void 0 !== lineSpacing && null !== lineSpacing ? lineSpacing : DEFAULT_LINE_SPACING) + fontOptions.size;\n  return function (customizeObject) {\n    var html = \"\";\n    var vt = customizeObject.valueText;\n\n    for (var i = 0; i < vt.length; i += 2) {\n      html += \"<tr><td>\" + vt[i] + \"</td><td style='width: 15px'></td><td style='text-align: \" + (rtlEnabled ? \"left\" : \"right\") + \"'>\" + vt[i + 1] + \"</td></tr>\";\n    }\n\n    return {\n      html: \"<table style='border-spacing:0px; line-height: \" + lineHeight + \"px'>\" + html + \"</table>\"\n    };\n  };\n}\n\nfunction generateCustomizeTooltipCallback(customizeTooltip, fontOptions, rtlEnabled) {\n  var defaultCustomizeTooltip = generateDefaultCustomizeTooltipCallback(fontOptions, rtlEnabled);\n\n  if (isFunction(customizeTooltip)) {\n    return function (customizeObject) {\n      var res = customizeTooltip.call(customizeObject, customizeObject);\n\n      if (!(\"html\" in res) && !(\"text\" in res)) {\n        _extend(res, defaultCustomizeTooltip.call(customizeObject, customizeObject));\n      }\n\n      return res;\n    };\n  } else {\n    return defaultCustomizeTooltip;\n  }\n}\n\nfunction createAxis(isHorizontal) {\n  var translator = new Translator2D({}, {}, {\n    shiftZeroValue: !isHorizontal,\n    isHorizontal: !!isHorizontal\n  });\n  return {\n    getTranslator: function getTranslator() {\n      return translator;\n    },\n    update: function update(range, canvas, options) {\n      translator.update(range, canvas, options);\n    },\n    getVisibleArea: function getVisibleArea() {\n      var visibleArea = translator.getCanvasVisibleArea();\n      return [visibleArea.min, visibleArea.max];\n    },\n    visualRange: _noop,\n    calculateInterval: _noop,\n    getMarginOptions: function getMarginOptions() {\n      return {};\n    }\n  };\n}\n\nvar _initTooltip;\n\nvar BaseSparkline = BaseWidget.inherit({\n  _getLayoutItems: _noop,\n  _useLinks: false,\n  _themeDependentChanges: [\"OPTIONS\"],\n  _initCore: function _initCore() {\n    this._tooltipTracker = this._renderer.root;\n\n    this._tooltipTracker.attr({\n      \"pointer-events\": \"visible\"\n    });\n\n    this._createHtmlElements();\n\n    this._initTooltipEvents();\n\n    this._argumentAxis = createAxis(true);\n    this._valueAxis = createAxis();\n  },\n  _getDefaultSize: function _getDefaultSize() {\n    return this._defaultSize;\n  },\n  _disposeCore: function _disposeCore() {\n    this._disposeWidgetElements();\n\n    this._disposeTooltipEvents();\n\n    this._ranges = null;\n  },\n  _optionChangesOrder: [\"OPTIONS\"],\n  _change_OPTIONS: function _change_OPTIONS() {\n    this._prepareOptions();\n\n    this._change([\"UPDATE\"]);\n  },\n  _customChangesOrder: [\"UPDATE\"],\n  _change_UPDATE: function _change_UPDATE() {\n    this._update();\n  },\n  _update: function _update() {\n    if (this._tooltipShown) {\n      this._tooltipShown = false;\n\n      this._tooltip.hide();\n    }\n\n    this._cleanWidgetElements();\n\n    this._updateWidgetElements();\n\n    this._drawWidgetElements();\n  },\n  _updateWidgetElements: function _updateWidgetElements() {\n    var canvas = this._getCorrectCanvas();\n\n    this._updateRange();\n\n    this._argumentAxis.update(this._ranges.arg, canvas, this._getStick());\n\n    this._valueAxis.update(this._ranges.val, canvas);\n  },\n  _getStick: function _getStick() {},\n  _applySize: function _applySize(rect) {\n    this._allOptions.size = {\n      width: rect[2] - rect[0],\n      height: rect[3] - rect[1]\n    };\n\n    this._change([\"UPDATE\"]);\n  },\n  _setupResizeHandler: _noop,\n  _prepareOptions: function _prepareOptions() {\n    return _extend(true, {}, this._themeManager.theme(), this.option());\n  },\n  _getTooltipCoords: function _getTooltipCoords() {\n    var canvas = this._canvas;\n\n    var rootOffset = this._renderer.getRootOffset();\n\n    return {\n      x: canvas.width / 2 + rootOffset.left,\n      y: canvas.height / 2 + rootOffset.top\n    };\n  },\n  _initTooltipEvents: function _initTooltipEvents() {\n    var data = {\n      widget: this\n    };\n\n    this._renderer.root.off(\".\" + EVENT_NS).on(POINTER_ACTION, data, pointerHandler);\n  },\n  _showTooltip: function _showTooltip() {\n    var tooltip;\n\n    if (!this._tooltipShown) {\n      this._tooltipShown = true;\n      tooltip = this._getTooltip();\n      tooltip.isEnabled() && this._tooltip.show(this._getTooltipData(), this._getTooltipCoords(), {});\n    }\n  },\n  _hideTooltip: function _hideTooltip() {\n    if (this._tooltipShown) {\n      this._tooltipShown = false;\n\n      this._tooltip.hide();\n    }\n  },\n  _stopCurrentHandling: function _stopCurrentHandling() {\n    this._hideTooltip();\n  },\n  _enableOutHandler: function _enableOutHandler() {\n    var that = this;\n\n    if (that._outHandler) {\n      return;\n    }\n\n    var handler = function handler(_ref3) {\n      var pageX = _ref3.pageX,\n          pageY = _ref3.pageY;\n\n      var _that$_renderer$getRo = that._renderer.getRootOffset(),\n          left = _that$_renderer$getRo.left,\n          top = _that$_renderer$getRo.top;\n\n      var x = _floor(pageX - left);\n\n      var y = _floor(pageY - top);\n\n      if (!inCanvas(that._canvas, x, y)) {\n        that._hideTooltip();\n\n        that._disableOutHandler();\n      }\n    };\n\n    eventsEngine.on(domAdapter.getDocument(), POINTER_ACTION, handler);\n    this._outHandler = handler;\n  },\n  _disableOutHandler: function _disableOutHandler() {\n    this._outHandler && eventsEngine.off(domAdapter.getDocument(), POINTER_ACTION, this._outHandler);\n    this._outHandler = null;\n  },\n  _disposeTooltipEvents: function _disposeTooltipEvents() {\n    this._tooltipTracker.off();\n\n    this._disableOutHandler();\n\n    this._renderer.root.off(\".\" + EVENT_NS);\n  },\n  _getTooltip: function _getTooltip() {\n    var that = this;\n\n    if (!that._tooltip) {\n      _initTooltip.apply(this, arguments);\n\n      that._setTooltipRendererOptions(that._tooltipRendererOptions);\n\n      that._tooltipRendererOptions = null;\n\n      that._setTooltipOptions();\n    }\n\n    return that._tooltip;\n  }\n});\nexport default BaseSparkline;\nimport { plugin as tooltipPlugin } from \"../core/tooltip\";\nBaseSparkline.addPlugin(tooltipPlugin);\n_initTooltip = BaseSparkline.prototype._initTooltip;\nBaseSparkline.prototype._initTooltip = _noop;\nvar _disposeTooltip = BaseSparkline.prototype._disposeTooltip;\n\nBaseSparkline.prototype._disposeTooltip = function () {\n  if (this._tooltip) {\n    _disposeTooltip.apply(this, arguments);\n  }\n};\n\nBaseSparkline.prototype._setTooltipRendererOptions = function () {\n  var options = this._getRendererOptions();\n\n  if (this._tooltip) {\n    this._tooltip.setRendererOptions(options);\n  } else {\n    this._tooltipRendererOptions = options;\n  }\n};\n\nBaseSparkline.prototype._setTooltipOptions = function () {\n  var tooltip = this._tooltip;\n\n  var options = tooltip && this._getOption(\"tooltip\");\n\n  tooltip && tooltip.update(_extend({}, options, {\n    customizeTooltip: generateCustomizeTooltipCallback(options.customizeTooltip, options.font, this.option(\"rtlEnabled\")),\n    enabled: options.enabled && this._isTooltipEnabled()\n  }));\n};\n\nimport { plugin } from \"../core/export\";\nvar exportPlugin = extend(true, {}, plugin, {\n  init: _noop,\n  dispose: _noop,\n  customize: null,\n  members: {\n    _getExportMenuOptions: null\n  }\n});\nBaseSparkline.addPlugin(exportPlugin);","map":null,"metadata":{},"sourceType":"module"}