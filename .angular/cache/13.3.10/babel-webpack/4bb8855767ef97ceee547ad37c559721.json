{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/utils.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { getOuterHeight, setHeight, setWidth } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport { each } from \"../../core/utils/iterator\";\nimport { APPOINTMENT_SETTINGS_KEY } from \"./constants\";\nimport { getPublicElement } from \"../../core/element\";\nimport { compileGetter, compileSetter } from \"../../core/utils/data\";\nimport dateSerialization from \"../../core/utils/date_serialization\";\nexport var utils = {\n  dataAccessors: {\n    getAppointmentSettings: function getAppointmentSettings(element) {\n      return $(element).data(APPOINTMENT_SETTINGS_KEY);\n    },\n    getAppointmentInfo: function getAppointmentInfo(element) {\n      var settings = utils.dataAccessors.getAppointmentSettings(element);\n      return null === settings || void 0 === settings ? void 0 : settings.info;\n    },\n    create: function create(fields, currentDataAccessors, forceIsoDateParsing, dateSerializationFormat) {\n      var dataAccessors = currentDataAccessors ? _extends({}, currentDataAccessors) : {\n        getter: {},\n        setter: {},\n        expr: {}\n      };\n      each(fields, function (name, expr) {\n        if (expr) {\n          var getter = compileGetter(expr);\n          var setter = compileSetter(expr);\n          var dateGetter;\n          var dateSetter;\n          var serializationFormat;\n\n          if (field = name, \"startDate\" === field || \"endDate\" === field) {\n            dateGetter = function dateGetter(object) {\n              var value = getter(object);\n\n              if (forceIsoDateParsing) {\n                value = dateSerialization.deserializeDate(value);\n              }\n\n              return value;\n            };\n\n            dateSetter = function dateSetter(object, value) {\n              if (dateSerializationFormat) {\n                serializationFormat = dateSerializationFormat;\n              } else if (forceIsoDateParsing && !serializationFormat) {\n                var oldValue = getter(object);\n                serializationFormat = dateSerialization.getDateSerializationFormat(oldValue);\n              }\n\n              var newValue = dateSerialization.serializeDate(value, serializationFormat);\n              setter(object, newValue);\n            };\n          }\n\n          dataAccessors.getter[name] = dateGetter || getter;\n          dataAccessors.setter[name] = dateSetter || setter;\n          dataAccessors.expr[\"\".concat(name, \"Expr\")] = expr;\n        } else {\n          delete dataAccessors.getter[name];\n          delete dataAccessors.setter[name];\n          delete dataAccessors.expr[\"\".concat(name, \"Expr\")];\n        }\n\n        var field;\n      });\n      return dataAccessors;\n    }\n  },\n  DOM: {\n    getHeaderHeight: function getHeaderHeight(header) {\n      return header ? header._$element && parseInt(getOuterHeight(header._$element), 10) : 0;\n    }\n  },\n  renovation: {\n    renderComponent: function renderComponent(widget, parentElement, componentClass, componentName, viewModel) {\n      var component = widget[componentName];\n\n      if (!component) {\n        var container = getPublicElement(parentElement);\n        component = widget._createComponent(container, componentClass, viewModel);\n        widget[componentName] = component;\n      } else {\n        var $element = component.$element();\n        var elementStyle = $element.get(0).style;\n        var height = elementStyle.height;\n        var width = elementStyle.width;\n        component.option(viewModel);\n\n        if (height) {\n          setHeight($element, height);\n        }\n\n        if (width) {\n          setWidth($element, width);\n        }\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}