{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/vector_map/control_bar.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nvar _math = Math;\nvar _min = _math.min;\nvar _max = _math.max;\nvar _round = _math.round;\nvar _floor = _math.floor;\nvar _sqrt = _math.sqrt;\nimport { parseScalar as _parseScalar, enumParser } from \"../core/utils\";\nvar parseHorizontalAlignment = enumParser([\"left\", \"center\", \"right\"]);\nvar parseVerticalAlignment = enumParser([\"top\", \"bottom\"]);\nvar COMMAND_RESET = \"command-reset\";\nvar COMMAND_MOVE_UP = \"command-move-up\";\nvar COMMAND_MOVE_RIGHT = \"command-move-right\";\nvar COMMAND_MOVE_DOWN = \"command-move-down\";\nvar COMMAND_MOVE_LEFT = \"command-move-left\";\nvar COMMAND_ZOOM_IN = \"command-zoom-in\";\nvar COMMAND_ZOOM_OUT = \"command-zoom-out\";\nvar COMMAND_ZOOM_DRAG_LINE = \"command-zoom-drag-line\";\nvar COMMAND_ZOOM_DRAG = \"command-zoom-drag\";\nvar EVENT_TARGET_TYPE = \"control-bar\";\nvar FLAG_CENTERING = 1;\nvar FLAG_ZOOMING = 2;\nvar SIZE_OPTIONS = {\n  bigCircleSize: 58,\n  smallCircleSize: 28,\n  buttonSize: 10,\n  arrowButtonOffset: 20,\n  incDecButtonSize: 11,\n  incButtonOffset: 66,\n  decButtonOffset: 227,\n  sliderLineStartOffset: 88.5,\n  sliderLineEndOffset: 205.5,\n  sliderLength: 20,\n  sliderWidth: 8,\n  trackerGap: 4\n};\nvar OFFSET_X = 30.5;\nvar OFFSET_Y = 30.5;\nvar TOTAL_WIDTH = 61;\nvar TOTAL_HEIGHT = 274;\nvar COMMAND_TO_TYPE_MAP = {};\nCOMMAND_TO_TYPE_MAP[COMMAND_RESET] = ResetCommand;\nCOMMAND_TO_TYPE_MAP[COMMAND_MOVE_UP] = COMMAND_TO_TYPE_MAP[COMMAND_MOVE_RIGHT] = COMMAND_TO_TYPE_MAP[COMMAND_MOVE_DOWN] = COMMAND_TO_TYPE_MAP[COMMAND_MOVE_LEFT] = MoveCommand;\nCOMMAND_TO_TYPE_MAP[COMMAND_ZOOM_IN] = COMMAND_TO_TYPE_MAP[COMMAND_ZOOM_OUT] = ZoomCommand;\nCOMMAND_TO_TYPE_MAP[COMMAND_ZOOM_DRAG] = ZoomDragCommand;\nexport function ControlBar(parameters) {\n  this._params = parameters;\n\n  this._createElements(parameters.renderer, parameters.container, parameters.dataKey);\n\n  parameters.layoutControl.addItem(this);\n\n  this._subscribeToProjection(parameters.projection);\n\n  this._subscribeToTracker(parameters.tracker);\n\n  this._createCallbacks(parameters.projection);\n}\nControlBar.prototype = {\n  constructor: ControlBar,\n  _flags: 0,\n  dispose: function dispose() {\n    this._params.layoutControl.removeItem(this);\n\n    this._root.linkRemove().linkOff();\n\n    this._offProjection();\n\n    this._offTracker();\n\n    this._params = this._root = this._offProjection = this._offTracker = this._callbacks = null;\n  },\n  _subscribeToProjection: function _subscribeToProjection(projection) {\n    var that = this;\n    that._offProjection = projection.on({\n      engine: function engine() {\n        that._update();\n      },\n      zoom: updateZoom,\n      \"max-zoom\": function maxZoom() {\n        that._zoomPartition = projection.getZoomScalePartition();\n        that._sliderUnitLength = that._sliderLineLength / that._zoomPartition;\n        updateZoom();\n      }\n    });\n\n    function updateZoom() {\n      that._adjustZoom(projection.getScaledZoom());\n    }\n  },\n  _subscribeToTracker: function _subscribeToTracker(tracker) {\n    var that = this;\n    var isActive = false;\n    that._offTracker = tracker.on({\n      start: function start(arg) {\n        isActive = arg.data.name === EVENT_TARGET_TYPE;\n\n        if (isActive) {\n          that._processStart(arg.data.index, arg);\n        }\n      },\n      move: function move(arg) {\n        if (isActive) {\n          that._processMove(arg.data.index, arg);\n        }\n      },\n      end: function end() {\n        if (isActive) {\n          that._processEnd();\n\n          isActive = false;\n        }\n      }\n    });\n  },\n  _createCallbacks: function _createCallbacks(projection) {\n    this._callbacks = {\n      reset: function reset(isCenter, isZoom) {\n        if (isCenter) {\n          projection.setCenter(null);\n        }\n\n        if (isZoom) {\n          projection.setZoom(null);\n        }\n      },\n      beginMove: function beginMove() {\n        projection.beginMoveCenter();\n      },\n      endMove: function endMove() {\n        projection.endMoveCenter();\n      },\n      move: function move(shift) {\n        projection.moveCenter(shift);\n      },\n      zoom: function zoom(_zoom) {\n        projection.setScaledZoom(_zoom);\n      }\n    };\n  },\n  _createElements: function _createElements(renderer, container, dataKey) {\n    this._root = renderer.g().attr({\n      class: \"dxm-control-bar\"\n    }).linkOn(container, \"control-bar\");\n    var buttonsGroups = this._buttonsGroup = renderer.g().attr({\n      class: \"dxm-control-buttons\"\n    }).append(this._root);\n    var trackersGroup = renderer.g().attr({\n      stroke: \"none\",\n      \"stroke-width\": 0,\n      fill: \"#000000\",\n      opacity: 1e-4\n    }).css({\n      cursor: \"pointer\"\n    }).append(this._root);\n\n    this._createButtons(renderer, dataKey, buttonsGroups);\n\n    this._createTrackers(renderer, dataKey, trackersGroup);\n  },\n  _createButtons: function _createButtons(renderer, dataKey, group) {\n    var options = SIZE_OPTIONS;\n    var size = options.buttonSize / 2;\n    var offset1 = options.arrowButtonOffset - size;\n    var offset2 = options.arrowButtonOffset;\n    var incDecButtonSize = options.incDecButtonSize / 2;\n    var directionOptions = {\n      \"stroke-linecap\": \"square\",\n      fill: \"none\"\n    };\n    renderer.circle(0, 0, options.bigCircleSize / 2).append(group);\n    renderer.circle(0, 0, size).attr({\n      fill: \"none\"\n    }).append(group);\n    renderer.path([-size, -offset1, 0, -offset2, size, -offset1], \"line\").attr(directionOptions).append(group);\n    renderer.path([offset1, -size, offset2, 0, offset1, size], \"line\").attr(directionOptions).append(group);\n    renderer.path([size, offset1, 0, offset2, -size, offset1], \"line\").attr(directionOptions).append(group);\n    renderer.path([-offset1, size, -offset2, 0, -offset1, -size], \"line\").attr(directionOptions).append(group);\n    renderer.circle(0, options.incButtonOffset, options.smallCircleSize / 2).append(group);\n    renderer.path([[-incDecButtonSize, options.incButtonOffset, incDecButtonSize, options.incButtonOffset], [0, options.incButtonOffset - incDecButtonSize, 0, options.incButtonOffset + incDecButtonSize]], \"area\").append(group);\n    renderer.circle(0, options.decButtonOffset, options.smallCircleSize / 2).append(group);\n    renderer.path([-incDecButtonSize, options.decButtonOffset, incDecButtonSize, options.decButtonOffset], \"area\").append(group);\n    this._zoomLine = renderer.path([], \"line\").append(group);\n    this._zoomDrag = renderer.rect(_floor(-options.sliderLength / 2), _floor(options.sliderLineEndOffset - options.sliderWidth / 2), options.sliderLength, options.sliderWidth).append(group);\n    this._sliderLineLength = options.sliderLineEndOffset - options.sliderLineStartOffset;\n  },\n  _createTrackers: function _createTrackers(renderer, dataKey, group) {\n    var options = SIZE_OPTIONS;\n\n    var size = _round((options.arrowButtonOffset - options.trackerGap) / 2);\n\n    var offset1 = options.arrowButtonOffset - size;\n\n    var offset2 = _round(_sqrt(options.bigCircleSize * options.bigCircleSize / 4 - size * size));\n\n    var size2 = offset2 - offset1;\n    renderer.rect(-size, -size, 2 * size, 2 * size).data(dataKey, {\n      index: COMMAND_RESET,\n      name: EVENT_TARGET_TYPE\n    }).append(group);\n    renderer.rect(-size, -offset2, 2 * size, size2).data(dataKey, {\n      index: COMMAND_MOVE_UP,\n      name: EVENT_TARGET_TYPE\n    }).append(group);\n    renderer.rect(offset1, -size, size2, 2 * size).data(dataKey, {\n      index: COMMAND_MOVE_RIGHT,\n      name: EVENT_TARGET_TYPE\n    }).append(group);\n    renderer.rect(-size, offset1, 2 * size, size2).data(dataKey, {\n      index: COMMAND_MOVE_DOWN,\n      name: EVENT_TARGET_TYPE\n    }).append(group);\n    renderer.rect(-offset2, -size, size2, 2 * size).data(dataKey, {\n      index: COMMAND_MOVE_LEFT,\n      name: EVENT_TARGET_TYPE\n    }).append(group);\n    renderer.circle(0, options.incButtonOffset, options.smallCircleSize / 2).data(dataKey, {\n      index: COMMAND_ZOOM_IN,\n      name: EVENT_TARGET_TYPE\n    }).append(group);\n    renderer.circle(0, options.decButtonOffset, options.smallCircleSize / 2).data(dataKey, {\n      index: COMMAND_ZOOM_OUT,\n      name: EVENT_TARGET_TYPE\n    }).append(group);\n    renderer.rect(-2, options.sliderLineStartOffset - 2, 4, options.sliderLineEndOffset - options.sliderLineStartOffset + 4).css({\n      cursor: \"default\"\n    }).data(dataKey, {\n      index: COMMAND_ZOOM_DRAG_LINE,\n      name: EVENT_TARGET_TYPE\n    }).append(group);\n    this._zoomDragTracker = renderer.rect(-options.sliderLength / 2, options.sliderLineEndOffset - options.sliderWidth / 2, options.sliderLength, options.sliderWidth).data(dataKey, {\n      index: COMMAND_ZOOM_DRAG,\n      name: EVENT_TARGET_TYPE\n    }).append(group);\n  },\n  resize: function resize(size) {\n    if (this._isActive) {\n      this._root.attr({\n        visibility: null !== size ? null : \"hidden\"\n      });\n    }\n  },\n  getLayoutOptions: function getLayoutOptions() {\n    return this._isActive ? this._layoutOptions : null;\n  },\n  locate: function locate(x, y) {\n    this._root.attr({\n      translateX: x + this._margin + OFFSET_X,\n      translateY: y + this._margin + OFFSET_Y\n    });\n  },\n  _update: function _update() {\n    this._isActive = this._isEnabled && this._flags && this._params.projection.isInvertible();\n\n    if (this._isActive) {\n      this._root.linkAppend();\n    } else {\n      this._root.linkRemove();\n    }\n\n    this._processEnd();\n\n    this.updateLayout();\n  },\n  setInteraction: function setInteraction(interaction) {\n    if (_parseScalar(interaction.centeringEnabled, true)) {\n      this._flags |= FLAG_CENTERING;\n    } else {\n      this._flags &= ~FLAG_CENTERING;\n    }\n\n    if (_parseScalar(interaction.zoomingEnabled, true)) {\n      this._flags |= FLAG_ZOOMING;\n    } else {\n      this._flags &= ~FLAG_ZOOMING;\n    }\n\n    this._update();\n  },\n  setOptions: function setOptions(options) {\n    this._isEnabled = !!_parseScalar(options.enabled, true);\n    this._margin = options.margin || 0;\n    this._layoutOptions = {\n      width: 2 * this._margin + TOTAL_WIDTH,\n      height: 2 * this._margin + TOTAL_HEIGHT,\n      horizontalAlignment: parseHorizontalAlignment(options.horizontalAlignment, \"left\"),\n      verticalAlignment: parseVerticalAlignment(options.verticalAlignment, \"top\")\n    };\n\n    this._buttonsGroup.attr({\n      \"stroke-width\": options.borderWidth,\n      stroke: options.borderColor,\n      fill: options.color,\n      \"fill-opacity\": options.opacity\n    });\n\n    this._update();\n  },\n  _adjustZoom: function _adjustZoom(zoom) {\n    var start = SIZE_OPTIONS.sliderLineStartOffset;\n    var end = SIZE_OPTIONS.sliderLineEndOffset;\n    var h = SIZE_OPTIONS.sliderWidth;\n    this._zoomFactor = _max(_min(_round(zoom), this._zoomPartition), 0);\n    var transform = {\n      translateY: -_round(this._zoomFactor * this._sliderUnitLength)\n    };\n    var y = end - h / 2 + transform.translateY;\n\n    this._zoomLine.attr({\n      points: [[0, start, 0, _max(start, y)], [0, _min(end, y + h), 0, end]]\n    });\n\n    this._zoomDrag.attr(transform);\n\n    this._zoomDragTracker.attr(transform);\n  },\n  _applyZoom: function _applyZoom() {\n    this._callbacks.zoom(this._zoomFactor);\n  },\n  _processStart: function _processStart(command, arg) {\n    var commandType;\n\n    if (this._isActive) {\n      commandType = COMMAND_TO_TYPE_MAP[command];\n      this._command = commandType && commandType.flags & this._flags ? new commandType(this, command, arg) : null;\n    }\n  },\n  _processMove: function _processMove(command, arg) {\n    this._command && this._command.update(command, arg);\n  },\n  _processEnd: function _processEnd() {\n    this._command && this._command.finish();\n    this._command = null;\n  }\n};\n\nfunction disposeCommand(command) {\n  delete command._owner;\n\n  command.update = function () {};\n\n  command.finish = function () {};\n}\n\nfunction ResetCommand(owner, command) {\n  this._owner = owner;\n  this._command = command;\n}\n\nResetCommand.flags = FLAG_CENTERING | FLAG_ZOOMING;\n\nResetCommand.prototype.update = function (command) {\n  command !== this._command && disposeCommand(this);\n};\n\nResetCommand.prototype.finish = function () {\n  var flags = this._owner._flags;\n\n  this._owner._callbacks.reset(!!(flags & FLAG_CENTERING), !!(flags & FLAG_ZOOMING));\n\n  disposeCommand(this);\n};\n\nfunction MoveCommand(owner, command, arg) {\n  this._command = command;\n  var timeout = null;\n  var dx = 0;\n  var dy = 0;\n\n  switch (this._command) {\n    case COMMAND_MOVE_UP:\n      dy = -10;\n      break;\n\n    case COMMAND_MOVE_RIGHT:\n      dx = 10;\n      break;\n\n    case COMMAND_MOVE_DOWN:\n      dy = 10;\n      break;\n\n    case COMMAND_MOVE_LEFT:\n      dx = -10;\n  }\n\n  this._stop = function () {\n    clearTimeout(timeout);\n\n    owner._callbacks.endMove();\n\n    this._stop = owner = null;\n    return this;\n  };\n\n  null;\n\n  owner._callbacks.beginMove();\n\n  !function callback() {\n    owner._callbacks.move([dx, dy]);\n\n    timeout = setTimeout(callback, 100);\n  }();\n}\n\nMoveCommand.flags = FLAG_CENTERING;\n\nMoveCommand.prototype.update = function (command) {\n  this._command !== command && this.finish();\n};\n\nMoveCommand.prototype.finish = function () {\n  disposeCommand(this._stop());\n};\n\nfunction ZoomCommand(owner, command) {\n  this._owner = owner;\n  this._command = command;\n  var timeout = null;\n  var dZoom = this._command === COMMAND_ZOOM_IN ? 1 : -1;\n\n  this._stop = function () {\n    clearTimeout(timeout);\n    this._stop = owner = null;\n    return this;\n  };\n\n  !function callback() {\n    owner._adjustZoom(owner._zoomFactor + dZoom);\n\n    timeout = setTimeout(callback, 150);\n  }();\n}\n\nZoomCommand.flags = FLAG_ZOOMING;\n\nZoomCommand.prototype.update = function (command) {\n  this._command !== command && this.finish();\n};\n\nZoomCommand.prototype.finish = function () {\n  this._owner._applyZoom();\n\n  disposeCommand(this._stop());\n};\n\nfunction ZoomDragCommand(owner, command, arg) {\n  this._owner = owner;\n  this._zoomFactor = owner._zoomFactor;\n  this._pos = arg.y;\n}\n\nZoomDragCommand.flags = FLAG_ZOOMING;\n\nZoomDragCommand.prototype.update = function (command, arg) {\n  var owner = this._owner;\n\n  owner._adjustZoom(this._zoomFactor + owner._zoomPartition * (this._pos - arg.y) / owner._sliderLineLength);\n};\n\nZoomDragCommand.prototype.finish = function () {\n  this._owner._applyZoom();\n\n  disposeCommand(this);\n};","map":null,"metadata":{},"sourceType":"module"}