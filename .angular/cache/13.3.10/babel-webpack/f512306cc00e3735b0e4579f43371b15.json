{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/shared/filtering.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { isDate, isDefined } from \"../../core/utils/type\";\nimport { inArray } from \"../../core/utils/array\";\nimport { map } from \"../../core/utils/iterator\";\nvar DEFAULT_DATE_INTERVAL = [\"year\", \"month\", \"day\"];\nvar DEFAULT_DATETIME_INTERVAL = [\"year\", \"month\", \"day\", \"hour\", \"minute\"];\n\nvar isDateType = function isDateType(dataType) {\n  return \"date\" === dataType || \"datetime\" === dataType;\n};\n\nvar getGroupInterval = function getGroupInterval(column) {\n  var index;\n  var result = [];\n  var dateIntervals = [\"year\", \"month\", \"day\", \"hour\", \"minute\", \"second\"];\n  var groupInterval = column.headerFilter && column.headerFilter.groupInterval;\n  var interval = \"quarter\" === groupInterval ? \"month\" : groupInterval;\n\n  if (isDateType(column.dataType) && null !== groupInterval) {\n    result = \"datetime\" === column.dataType ? DEFAULT_DATETIME_INTERVAL : DEFAULT_DATE_INTERVAL;\n    index = inArray(interval, dateIntervals);\n\n    if (index >= 0) {\n      result = dateIntervals.slice(0, index);\n      result.push(groupInterval);\n      return result;\n    }\n\n    return result;\n  } else if (isDefined(groupInterval)) {\n    return Array.isArray(groupInterval) ? groupInterval : [groupInterval];\n  }\n};\n\nexport default (function () {\n  var getFilterSelector = function getFilterSelector(column, target) {\n    var selector = column.dataField || column.selector;\n\n    if (\"search\" === target) {\n      selector = column.displayField || column.calculateDisplayValue || selector;\n    }\n\n    return selector;\n  };\n\n  var getFilterExpressionByRange = function getFilterExpressionByRange(filterValue, target) {\n    var endFilterValue;\n    var startFilterExpression;\n    var endFilterExpression;\n    var selector = getFilterSelector(this, target);\n\n    if (Array.isArray(filterValue) && isDefined(filterValue[0]) && isDefined(filterValue[1])) {\n      startFilterExpression = [selector, \">=\", filterValue[0]];\n      endFilterExpression = [selector, \"<=\", filterValue[1]];\n\n      if (isDateType(this.dataType) && (date = filterValue[1], date.getHours() + date.getMinutes() + date.getSeconds() + date.getMilliseconds() < 1)) {\n        endFilterValue = new Date(filterValue[1].getTime());\n\n        if (\"date\" === this.dataType) {\n          endFilterValue.setDate(filterValue[1].getDate() + 1);\n        }\n\n        endFilterExpression = [selector, \"<\", endFilterValue];\n      }\n\n      return [startFilterExpression, \"and\", endFilterExpression];\n    }\n\n    var date;\n  };\n\n  var getFilterExpressionForDate = function getFilterExpressionForDate(filterValue, selectedFilterOperation, target) {\n    var dateStart;\n    var dateEnd;\n    var dateInterval;\n\n    var values = function (dateValue) {\n      if (isDate(dateValue)) {\n        return [dateValue.getFullYear(), dateValue.getMonth(), dateValue.getDate(), dateValue.getHours(), dateValue.getMinutes(), dateValue.getSeconds()];\n      }\n\n      return map((\"\" + dateValue).split(\"/\"), function (value, index) {\n        return 1 === index ? Number(value) - 1 : Number(value);\n      });\n    }(filterValue);\n\n    var selector = getFilterSelector(this, target);\n\n    if (\"headerFilter\" === target) {\n      dateInterval = getGroupInterval(this)[values.length - 1];\n    } else if (\"datetime\" === this.dataType) {\n      dateInterval = \"minute\";\n    }\n\n    switch (dateInterval) {\n      case \"year\":\n        dateStart = new Date(values[0], 0, 1);\n        dateEnd = new Date(values[0] + 1, 0, 1);\n        break;\n\n      case \"month\":\n        dateStart = new Date(values[0], values[1], 1);\n        dateEnd = new Date(values[0], values[1] + 1, 1);\n        break;\n\n      case \"quarter\":\n        dateStart = new Date(values[0], 3 * values[1], 1);\n        dateEnd = new Date(values[0], 3 * values[1] + 3, 1);\n        break;\n\n      case \"hour\":\n        dateStart = new Date(values[0], values[1], values[2], values[3]);\n        dateEnd = new Date(values[0], values[1], values[2], values[3] + 1);\n        break;\n\n      case \"minute\":\n        dateStart = new Date(values[0], values[1], values[2], values[3], values[4]);\n        dateEnd = new Date(values[0], values[1], values[2], values[3], values[4] + 1);\n        break;\n\n      case \"second\":\n        dateStart = new Date(values[0], values[1], values[2], values[3], values[4], values[5]);\n        dateEnd = new Date(values[0], values[1], values[2], values[3], values[4], values[5] + 1);\n        break;\n\n      default:\n        dateStart = new Date(values[0], values[1], values[2]);\n        dateEnd = new Date(values[0], values[1], values[2] + 1);\n    }\n\n    switch (selectedFilterOperation) {\n      case \"<\":\n        return [selector, \"<\", dateStart];\n\n      case \"<=\":\n        return [selector, \"<\", dateEnd];\n\n      case \">\":\n        return [selector, \">=\", dateEnd];\n\n      case \">=\":\n        return [selector, \">=\", dateStart];\n\n      case \"<>\":\n        return [[selector, \"<\", dateStart], \"or\", [selector, \">=\", dateEnd]];\n\n      default:\n        return [[selector, \">=\", dateStart], \"and\", [selector, \"<\", dateEnd]];\n    }\n  };\n\n  var getFilterExpressionForNumber = function getFilterExpressionForNumber(filterValue, selectedFilterOperation, target) {\n    var selector = getFilterSelector(this, target);\n    var groupInterval = getGroupInterval(this);\n\n    if (\"headerFilter\" === target && groupInterval && isDefined(filterValue)) {\n      var values = (\"\" + filterValue).split(\"/\");\n      var value = Number(values[values.length - 1]);\n      var interval = groupInterval[values.length - 1];\n      var startFilterValue = [selector, \">=\", value];\n      var endFilterValue = [selector, \"<\", value + interval];\n      var condition = [startFilterValue, \"and\", endFilterValue];\n      return condition;\n    }\n\n    return [selector, selectedFilterOperation || \"=\", filterValue];\n  };\n\n  return {\n    defaultCalculateFilterExpression: function defaultCalculateFilterExpression(filterValue, selectedFilterOperation, target) {\n      var column = this;\n      var selector = getFilterSelector(column, target);\n      var isSearchByDisplayValue = column.calculateDisplayValue && \"search\" === target;\n      var dataType = isSearchByDisplayValue && column.lookup && column.lookup.dataType || column.dataType;\n      var filter = null;\n\n      if ((\"headerFilter\" === target || \"filterBuilder\" === target) && null === filterValue) {\n        filter = [selector, selectedFilterOperation || \"=\", null];\n\n        if (\"string\" === dataType) {\n          filter = [filter, \"=\" === selectedFilterOperation ? \"or\" : \"and\", [selector, selectedFilterOperation || \"=\", \"\"]];\n        }\n      } else if (\"string\" === dataType && (!column.lookup || isSearchByDisplayValue)) {\n        filter = [selector, selectedFilterOperation || \"contains\", filterValue];\n      } else if (\"between\" === selectedFilterOperation) {\n        return getFilterExpressionByRange.apply(column, [filterValue, target]);\n      } else if (isDateType(dataType) && isDefined(filterValue)) {\n        return getFilterExpressionForDate.apply(column, arguments);\n      } else if (\"number\" === dataType) {\n        return getFilterExpressionForNumber.apply(column, arguments);\n      } else if (\"object\" !== dataType) {\n        filter = [selector, selectedFilterOperation || \"=\", filterValue];\n      }\n\n      return filter;\n    },\n    getGroupInterval: getGroupInterval\n  };\n})();","map":null,"metadata":{},"sourceType":"module"}