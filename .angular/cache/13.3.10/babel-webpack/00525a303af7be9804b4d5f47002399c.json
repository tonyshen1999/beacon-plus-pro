{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n\n/**\r\n * DevExtreme (esm/renovation/ui/button.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"accessKey\", \"activeStateEnabled\", \"children\", \"className\", \"disabled\", \"focusStateEnabled\", \"height\", \"hint\", \"hoverStateEnabled\", \"icon\", \"iconPosition\", \"iconTemplate\", \"onClick\", \"onKeyDown\", \"onSubmit\", \"pressed\", \"rtlEnabled\", \"stylingMode\", \"tabIndex\", \"template\", \"templateData\", \"text\", \"type\", \"useInkRipple\", \"useSubmitBehavior\", \"visible\", \"width\"];\nimport { createVNode, createComponentVNode, normalizeProps } from \"inferno\";\nimport { InfernoEffect, InfernoWrapperComponent } from \"@devextreme/runtime/inferno\";\nimport { createDefaultOptionRules, convertRulesToOptions } from \"../../core/options/utils\";\nimport devices from \"../../core/devices\";\nimport { isMaterial, current } from \"../../ui/themes\";\nimport { click } from \"../../events/short\";\nimport { combineClasses } from \"../utils/combine_classes\";\nimport { getImageSourceType } from \"../../core/utils/icon\";\nimport { Icon } from \"./common/icon\";\nimport { InkRipple } from \"./common/ink_ripple\";\nimport { Widget } from \"./common/widget\";\nimport { BaseWidgetProps } from \"./common/base_props\";\nvar stylingModes = [\"outlined\", \"text\", \"contained\"];\n\nvar getCssClasses = function getCssClasses(model) {\n  var _classesMap;\n\n  var icon = model.icon,\n      iconPosition = model.iconPosition,\n      stylingMode = model.stylingMode,\n      text = model.text,\n      type = model.type;\n  var isValidStylingMode = stylingMode && stylingModes.includes(stylingMode);\n  var classesMap = (_classesMap = {\n    \"dx-button\": true\n  }, _defineProperty(_classesMap, \"dx-button-mode-\".concat(isValidStylingMode ? stylingMode : \"contained\"), true), _defineProperty(_classesMap, \"dx-button-\".concat(null !== type && void 0 !== type ? type : \"normal\"), true), _defineProperty(_classesMap, \"dx-button-has-text\", !!text), _defineProperty(_classesMap, \"dx-button-has-icon\", !!icon), _defineProperty(_classesMap, \"dx-button-icon-right\", \"left\" !== iconPosition), _classesMap);\n  return combineClasses(classesMap);\n};\n\nexport var viewFunction = function viewFunction(viewModel) {\n  var _viewModel$props = viewModel.props,\n      children = _viewModel$props.children,\n      iconPosition = _viewModel$props.iconPosition,\n      IconTemplate = _viewModel$props.iconTemplate,\n      ButtonTemplate = _viewModel$props.template,\n      text = _viewModel$props.text;\n  var renderText = !viewModel.props.template && !children && \"\" !== text;\n  var isIconLeft = \"left\" === iconPosition;\n  var iconComponent = !viewModel.props.template && !children && (viewModel.iconSource || viewModel.props.iconTemplate) && createComponentVNode(2, Icon, {\n    source: viewModel.iconSource,\n    position: iconPosition,\n    iconTemplate: IconTemplate\n  });\n  return normalizeProps(createComponentVNode(2, Widget, _extends({\n    accessKey: viewModel.props.accessKey,\n    activeStateEnabled: viewModel.props.activeStateEnabled,\n    aria: viewModel.aria,\n    className: viewModel.props.className,\n    classes: viewModel.cssClasses,\n    disabled: viewModel.props.disabled,\n    focusStateEnabled: viewModel.props.focusStateEnabled,\n    height: viewModel.props.height,\n    hint: viewModel.props.hint,\n    hoverStateEnabled: viewModel.props.hoverStateEnabled,\n    onActive: viewModel.onActive,\n    onClick: viewModel.onWidgetClick,\n    onInactive: viewModel.onInactive,\n    onKeyDown: viewModel.keyDown,\n    rtlEnabled: viewModel.props.rtlEnabled,\n    tabIndex: viewModel.props.tabIndex,\n    visible: viewModel.props.visible,\n    width: viewModel.props.width\n  }, viewModel.restAttributes, {\n    children: createVNode(1, \"div\", \"dx-button-content\", [viewModel.props.template && ButtonTemplate({\n      data: viewModel.buttonTemplateData\n    }), !viewModel.props.template && children, isIconLeft && iconComponent, renderText && createVNode(1, \"span\", \"dx-button-text\", text, 0), !isIconLeft && iconComponent, viewModel.props.useSubmitBehavior && createVNode(64, \"input\", \"dx-button-submit-input\", null, 1, {\n      type: \"submit\",\n      tabIndex: -1\n    }, null, viewModel.submitInputRef), viewModel.props.useInkRipple && createComponentVNode(2, InkRipple, {\n      config: viewModel.inkRippleConfig\n    }, null, viewModel.inkRippleRef)], 0, null, null, viewModel.contentRef)\n  }), null, viewModel.widgetRef));\n};\nexport var ButtonProps = Object.create(Object.prototype, _extends(Object.getOwnPropertyDescriptors(BaseWidgetProps), Object.getOwnPropertyDescriptors({\n  activeStateEnabled: true,\n  hoverStateEnabled: true,\n  icon: \"\",\n  iconPosition: \"left\",\n  stylingMode: \"contained\",\n  text: \"\",\n  type: \"normal\",\n  useInkRipple: false,\n  useSubmitBehavior: false,\n\n  get templateData() {\n    return {};\n  }\n\n})));\nexport var defaultOptionRules = createDefaultOptionRules([{\n  device: function device() {\n    return \"desktop\" === devices.real().deviceType && !devices.isSimulator();\n  },\n  options: {\n    focusStateEnabled: true\n  }\n}, {\n  device: function device() {\n    return isMaterial(current());\n  },\n  options: {\n    useInkRipple: true\n  }\n}]);\nimport { createReRenderEffect } from \"@devextreme/runtime/inferno\";\nimport { createRef as infernoCreateRef } from \"inferno\";\n\nvar getTemplate = function getTemplate(TemplateProp) {\n  return TemplateProp && (TemplateProp.defaultProps ? function (props) {\n    return normalizeProps(createComponentVNode(2, TemplateProp, _extends({}, props)));\n  } : TemplateProp);\n};\n\nexport var Button = /*#__PURE__*/function (_InfernoWrapperCompon) {\n  _inherits(Button, _InfernoWrapperCompon);\n\n  var _super = _createSuper(Button);\n\n  function Button(props) {\n    var _this;\n\n    _classCallCheck(this, Button);\n\n    _this = _super.call(this, props);\n    _this.state = {};\n    _this.contentRef = infernoCreateRef();\n    _this.inkRippleRef = infernoCreateRef();\n    _this.submitInputRef = infernoCreateRef();\n    _this.widgetRef = infernoCreateRef();\n    _this.__getterCache = {};\n    _this.focus = _this.focus.bind(_assertThisInitialized(_this));\n    _this.activate = _this.activate.bind(_assertThisInitialized(_this));\n    _this.deactivate = _this.deactivate.bind(_assertThisInitialized(_this));\n    _this.submitEffect = _this.submitEffect.bind(_assertThisInitialized(_this));\n    _this.onActive = _this.onActive.bind(_assertThisInitialized(_this));\n    _this.onInactive = _this.onInactive.bind(_assertThisInitialized(_this));\n    _this.onWidgetClick = _this.onWidgetClick.bind(_assertThisInitialized(_this));\n    _this.keyDown = _this.keyDown.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Button, [{\n    key: \"createEffects\",\n    value: function createEffects() {\n      return [new InfernoEffect(this.submitEffect, [this.props.onSubmit, this.props.useSubmitBehavior]), createReRenderEffect()];\n    }\n  }, {\n    key: \"updateEffects\",\n    value: function updateEffects() {\n      var _this$_effects$;\n\n      null === (_this$_effects$ = this._effects[0]) || void 0 === _this$_effects$ ? void 0 : _this$_effects$.update([this.props.onSubmit, this.props.useSubmitBehavior]);\n    }\n  }, {\n    key: \"submitEffect\",\n    value: function submitEffect() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          onSubmit = _this$props2.onSubmit,\n          useSubmitBehavior = _this$props2.useSubmitBehavior;\n\n      if (useSubmitBehavior && onSubmit) {\n        click.on(this.submitInputRef.current, function (event) {\n          return onSubmit({\n            event: event,\n            submitInput: _this2.submitInputRef.current\n          });\n        }, {\n          namespace: \"UIFeedback\"\n        });\n        return function () {\n          return click.off(_this2.submitInputRef.current, {\n            namespace: \"UIFeedback\"\n          });\n        };\n      }\n\n      return;\n    }\n  }, {\n    key: \"onActive\",\n    value: function onActive(event) {\n      var useInkRipple = this.props.useInkRipple;\n      useInkRipple && this.inkRippleRef.current.showWave({\n        element: this.contentRef.current,\n        event: event\n      });\n    }\n  }, {\n    key: \"onInactive\",\n    value: function onInactive(event) {\n      var useInkRipple = this.props.useInkRipple;\n      useInkRipple && this.inkRippleRef.current.hideWave({\n        element: this.contentRef.current,\n        event: event\n      });\n    }\n  }, {\n    key: \"onWidgetClick\",\n    value: function onWidgetClick(event) {\n      var _this$props3 = this.props,\n          onClick = _this$props3.onClick,\n          useSubmitBehavior = _this$props3.useSubmitBehavior;\n      null === onClick || void 0 === onClick ? void 0 : onClick({\n        event: event\n      });\n      useSubmitBehavior && this.submitInputRef.current.click();\n    }\n  }, {\n    key: \"keyDown\",\n    value: function keyDown(e) {\n      var onKeyDown = this.props.onKeyDown;\n      var keyName = e.keyName,\n          originalEvent = e.originalEvent,\n          which = e.which;\n      var result = null === onKeyDown || void 0 === onKeyDown ? void 0 : onKeyDown(e);\n\n      if (null !== result && void 0 !== result && result.cancel) {\n        return result;\n      }\n\n      if (\"space\" === keyName || \"space\" === which || \"enter\" === keyName || \"enter\" === which) {\n        originalEvent.preventDefault();\n        this.onWidgetClick(originalEvent);\n      }\n\n      return;\n    }\n  }, {\n    key: \"aria\",\n    get: function get() {\n      var _this$props4 = this.props,\n          icon = _this$props4.icon,\n          text = _this$props4.text;\n      var label = (null !== text && void 0 !== text ? text : \"\") || icon;\n\n      if (!text && icon && \"image\" === getImageSourceType(icon)) {\n        label = !icon.includes(\"base64\") ? icon.replace(/.+\\/([^.]+)\\..+$/, \"$1\") : \"Base64\";\n      }\n\n      return _extends({\n        role: \"button\"\n      }, label ? {\n        label: label\n      } : {});\n    }\n  }, {\n    key: \"cssClasses\",\n    get: function get() {\n      return getCssClasses(this.props);\n    }\n  }, {\n    key: \"iconSource\",\n    get: function get() {\n      var _this$props5 = this.props,\n          icon = _this$props5.icon,\n          type = _this$props5.type;\n\n      if (icon || \"back\" === type) {\n        return (null !== icon && void 0 !== icon ? icon : \"\") || \"back\";\n      }\n\n      return \"\";\n    }\n  }, {\n    key: \"inkRippleConfig\",\n    get: function get() {\n      var _this3 = this;\n\n      if (void 0 !== this.__getterCache.inkRippleConfig) {\n        return this.__getterCache.inkRippleConfig;\n      }\n\n      return this.__getterCache.inkRippleConfig = function () {\n        var _this3$props = _this3.props,\n            icon = _this3$props.icon,\n            text = _this3$props.text,\n            type = _this3$props.type;\n        return !text && icon || \"back\" === type ? {\n          isCentered: true,\n          useHoldAnimation: false,\n          waveSizeCoefficient: 1\n        } : {};\n      }();\n    }\n  }, {\n    key: \"buttonTemplateData\",\n    get: function get() {\n      var _this$props6 = this.props,\n          icon = _this$props6.icon,\n          templateData = _this$props6.templateData,\n          text = _this$props6.text;\n      return _extends({\n        icon: icon,\n        text: text\n      }, templateData);\n    }\n  }, {\n    key: \"restAttributes\",\n    get: function get() {\n      var _this$props = this.props,\n          restProps = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n      return restProps;\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this.widgetRef.current.focus();\n    }\n  }, {\n    key: \"activate\",\n    value: function activate() {\n      this.widgetRef.current.activate();\n    }\n  }, {\n    key: \"deactivate\",\n    value: function deactivate() {\n      this.widgetRef.current.deactivate();\n    }\n  }, {\n    key: \"componentWillUpdate\",\n    value: function componentWillUpdate(nextProps, nextState, context) {\n      _get(_getPrototypeOf(Button.prototype), \"componentWillUpdate\", this).call(this);\n\n      if (this.props.icon !== nextProps.icon || this.props.text !== nextProps.text || this.props.type !== nextProps.type) {\n        this.__getterCache.inkRippleConfig = void 0;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var props = this.props;\n      return viewFunction({\n        props: _extends({}, props, {\n          template: getTemplate(props.template),\n          iconTemplate: getTemplate(props.iconTemplate)\n        }),\n        contentRef: this.contentRef,\n        submitInputRef: this.submitInputRef,\n        inkRippleRef: this.inkRippleRef,\n        widgetRef: this.widgetRef,\n        onActive: this.onActive,\n        onInactive: this.onInactive,\n        onWidgetClick: this.onWidgetClick,\n        keyDown: this.keyDown,\n        aria: this.aria,\n        cssClasses: this.cssClasses,\n        iconSource: this.iconSource,\n        inkRippleConfig: this.inkRippleConfig,\n        buttonTemplateData: this.buttonTemplateData,\n        restAttributes: this.restAttributes\n      });\n    }\n  }]);\n\n  return Button;\n}(InfernoWrapperComponent);\nButton.defaultProps = Object.create(Object.prototype, _extends(Object.getOwnPropertyDescriptors(ButtonProps), Object.getOwnPropertyDescriptors(_extends({}, convertRulesToOptions(defaultOptionRules)))));\nvar __defaultOptionRules = [];\nexport function defaultOptions(rule) {\n  __defaultOptionRules.push(rule);\n\n  Button.defaultProps = Object.create(Object.prototype, _extends(Object.getOwnPropertyDescriptors(Button.defaultProps), Object.getOwnPropertyDescriptors(convertRulesToOptions(defaultOptionRules)), Object.getOwnPropertyDescriptors(convertRulesToOptions(__defaultOptionRules))));\n}","map":null,"metadata":{},"sourceType":"module"}