{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/pivot_grid/ui.pivot_grid.field_chooser_base.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getOuterWidth } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport ArrayStore from \"../../data/array_store\";\nimport { name as clickEventName } from \"../../events/click\";\nimport { noop } from \"../../core/utils/common\";\nimport { isDefined } from \"../../core/utils/type\";\nimport { inArray } from \"../../core/utils/array\";\nimport { extend } from \"../../core/utils/extend\";\nimport { each, map } from \"../../core/utils/iterator\";\nimport localizationMessage from \"../../localization/message\";\nimport registerComponent from \"../../core/component_registrator\";\nimport Widget from \"../widget/ui.widget\";\nimport { HeaderFilterView as HeaderFilterViewBase, updateHeaderFilterItemSelectionState, headerFilterMixin } from \"../grid_core/ui.grid_core.header_filter_core\";\nimport columnStateMixin from \"../grid_core/ui.grid_core.column_state_mixin\";\nimport sortingMixin from \"../grid_core/ui.grid_core.sorting_mixin\";\nimport { foreachTree, createPath } from \"./ui.pivot_grid.utils\";\nimport Sortable from \"./ui.sortable\";\nimport { Deferred } from \"../../core/utils/deferred\";\nvar IE_FIELD_WIDTH_CORRECTION = 1;\nvar DIV = \"<div>\";\nvar HeaderFilterView = HeaderFilterViewBase.inherit({\n  _getSearchExpr: function _getSearchExpr(options) {\n    options.useDefaultSearchExpr = true;\n    return this.callBase(options);\n  }\n});\n\nvar processItems = function processItems(groupItems, field) {\n  var filterValues = [];\n  var isTree = !!field.groupName;\n  var isExcludeFilterType = \"exclude\" === field.filterType;\n\n  if (field.filterValues) {\n    each(field.filterValues, function (_, filterValue) {\n      filterValues.push(Array.isArray(filterValue) ? filterValue.join(\"/\") : filterValue && filterValue.valueOf());\n    });\n  }\n\n  foreachTree(groupItems, function (items) {\n    var item = items[0];\n    var path = createPath(items);\n    var preparedFilterValueByText = isTree ? map(items, function (item) {\n      return item.text;\n    }).reverse().join(\"/\") : item.text;\n    item.value = isTree ? path.slice(0) : item.key || item.value;\n    var preparedFilterValue = isTree ? path.join(\"/\") : item.value && item.value.valueOf();\n\n    if (item.children) {\n      item.items = item.children;\n      item.children = null;\n    }\n\n    updateHeaderFilterItemSelectionState(item, item.key && inArray(preparedFilterValueByText, filterValues) > -1 || inArray(preparedFilterValue, filterValues) > -1, isExcludeFilterType);\n  });\n};\n\nfunction getMainGroupField(dataSource, sourceField) {\n  var field = sourceField;\n\n  if (isDefined(sourceField.groupIndex)) {\n    field = dataSource.getAreaFields(sourceField.area, true)[sourceField.areaIndex];\n  }\n\n  return field;\n}\n\nfunction getStringState(state) {\n  state = state || {};\n  return JSON.stringify([state.fields, state.columnExpandedPaths, state.rowExpandedPaths]);\n}\n\nvar FieldChooserBase = Widget.inherit(columnStateMixin).inherit(sortingMixin).inherit(headerFilterMixin).inherit({\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      allowFieldDragging: true,\n      applyChangesMode: \"instantly\",\n      state: null,\n      headerFilter: {\n        width: 252,\n        height: 325,\n        searchTimeout: 500,\n        texts: {\n          emptyValue: localizationMessage.format(\"dxDataGrid-headerFilterEmptyValue\"),\n          ok: localizationMessage.format(\"dxDataGrid-headerFilterOK\"),\n          cancel: localizationMessage.format(\"dxDataGrid-headerFilterCancel\")\n        }\n      }\n    });\n  },\n  _init: function _init() {\n    this.callBase();\n    this._headerFilterView = new HeaderFilterView(this);\n\n    this._refreshDataSource();\n\n    this.subscribeToEvents();\n  },\n  _refreshDataSource: function _refreshDataSource() {\n    var dataSource = this.option(\"dataSource\");\n\n    if (dataSource && dataSource.fields && dataSource.load) {\n      this._dataSource = dataSource;\n    }\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"dataSource\":\n        this._refreshDataSource();\n\n        break;\n\n      case \"applyChangesMode\":\n        break;\n\n      case \"state\":\n        if (this._skipStateChange || !this._dataSource) {\n          break;\n        }\n\n        if (\"instantly\" === this.option(\"applyChangesMode\") && getStringState(this._dataSource.state()) !== getStringState(args.value)) {\n          this._dataSource.state(args.value);\n        } else {\n          this._clean(true);\n\n          this._renderComponent();\n        }\n\n        break;\n\n      case \"headerFilter\":\n      case \"allowFieldDragging\":\n        this._invalidate();\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  renderField: function renderField(field, showColumnLines) {\n    var $fieldContent = $(DIV).addClass(\"dx-area-field-content\").text(field.caption || field.dataField);\n    var $fieldElement = $(DIV).addClass(\"dx-area-field\").addClass(\"dx-area-box\").data(\"field\", field).append($fieldContent);\n    var mainGroupField = getMainGroupField(this._dataSource, field);\n\n    if (\"data\" !== field.area) {\n      if (field.allowSorting) {\n        this._applyColumnState({\n          name: \"sort\",\n          rootElement: $fieldElement,\n          column: {\n            alignment: this.option(\"rtlEnabled\") ? \"right\" : \"left\",\n            sortOrder: \"desc\" === field.sortOrder ? \"desc\" : \"asc\",\n            allowSorting: field.allowSorting\n          },\n          showColumnLines: showColumnLines\n        });\n      }\n\n      this._applyColumnState({\n        name: \"headerFilter\",\n        rootElement: $fieldElement,\n        column: {\n          alignment: this.option(\"rtlEnabled\") ? \"right\" : \"left\",\n          filterValues: mainGroupField.filterValues,\n          allowFiltering: mainGroupField.allowFiltering && !field.groupIndex,\n          allowSorting: field.allowSorting\n        },\n        showColumnLines: showColumnLines\n      });\n    }\n\n    if (field.groupName) {\n      $fieldElement.attr(\"item-group\", field.groupName);\n    }\n\n    return $fieldElement;\n  },\n  _clean: function _clean() {},\n  _render: function _render() {\n    this.callBase();\n\n    this._headerFilterView.render(this.$element());\n  },\n  renderSortable: function renderSortable() {\n    var that = this;\n\n    that._createComponent(that.$element(), Sortable, extend({\n      allowDragging: that.option(\"allowFieldDragging\"),\n      itemSelector: \".dx-area-field\",\n      itemContainerSelector: \".dx-area-field-container\",\n      groupSelector: \".dx-area-fields\",\n      groupFilter: function groupFilter() {\n        var dataSource = that._dataSource;\n        var $sortable = $(this).closest(\".dx-sortable-old\");\n        var pivotGrid = $sortable.data(\"dxPivotGrid\");\n        var pivotGridFieldChooser = $sortable.data(\"dxPivotGridFieldChooser\");\n\n        if (pivotGrid) {\n          return pivotGrid.getDataSource() === dataSource;\n        }\n\n        if (pivotGridFieldChooser) {\n          return pivotGridFieldChooser.option(\"dataSource\") === dataSource;\n        }\n\n        return false;\n      },\n      itemRender: function itemRender($sourceItem, target) {\n        var $item;\n\n        if ($sourceItem.hasClass(\"dx-area-box\")) {\n          $item = $sourceItem.clone();\n\n          if (\"drag\" === target) {\n            each($sourceItem, function (index, sourceItem) {\n              $item.eq(index).css(\"width\", parseInt(getOuterWidth(sourceItem), 10) + IE_FIELD_WIDTH_CORRECTION);\n            });\n          }\n        } else {\n          $item = $(DIV).addClass(\"dx-area-field\").addClass(\"dx-area-box\").text($sourceItem.text());\n        }\n\n        if (\"drag\" === target) {\n          var wrapperContainer = $(DIV);\n          each($item, function (_, item) {\n            var wrapper = $(\"<div>\").addClass(\"dx-pivotgrid-fields-container\").addClass(\"dx-widget\").append($(item));\n            wrapperContainer.append(wrapper);\n          });\n          return wrapperContainer.children();\n        }\n\n        return $item;\n      },\n      onDragging: function onDragging(e) {\n        var field = e.sourceElement.data(\"field\");\n        var targetGroup = e.targetGroup;\n        e.cancel = false;\n\n        if (true === field.isMeasure) {\n          if (\"column\" === targetGroup || \"row\" === targetGroup || \"filter\" === targetGroup) {\n            e.cancel = true;\n          }\n        } else if (false === field.isMeasure && \"data\" === targetGroup) {\n          e.cancel = true;\n        }\n      },\n      useIndicator: true,\n      onChanged: function onChanged(e) {\n        var dataSource = that._dataSource;\n        var field = e.sourceElement.data(\"field\");\n        e.removeSourceElement = !!e.sourceGroup;\n\n        that._adjustSortableOnChangedArgs(e);\n\n        if (field) {\n          that._applyChanges([getMainGroupField(dataSource, field)], {\n            area: e.targetGroup,\n            areaIndex: e.targetIndex\n          });\n        }\n      }\n    }, that._getSortableOptions()));\n  },\n  _processDemandState: function _processDemandState(func) {\n    var isInstantlyMode = \"instantly\" === this.option(\"applyChangesMode\");\n    var dataSource = this._dataSource;\n\n    if (isInstantlyMode) {\n      func(dataSource, isInstantlyMode);\n    } else {\n      var currentState = dataSource.state();\n      var pivotGridState = this.option(\"state\");\n\n      if (pivotGridState) {\n        dataSource.state(pivotGridState, true);\n      }\n\n      func(dataSource, isInstantlyMode);\n      dataSource.state(currentState, true);\n    }\n  },\n  _applyChanges: function _applyChanges(fields, props) {\n    var that = this;\n\n    that._processDemandState(function (dataSource, isInstantlyMode) {\n      fields.forEach(function (_ref) {\n        var index = _ref.index;\n        dataSource.field(index, props);\n      });\n\n      if (isInstantlyMode) {\n        dataSource.load();\n      } else {\n        that._changedHandler();\n      }\n    });\n  },\n  _adjustSortableOnChangedArgs: function _adjustSortableOnChangedArgs(e) {\n    e.removeSourceElement = false;\n    e.removeTargetElement = true;\n    e.removeSourceClass = false;\n  },\n  _getSortableOptions: function _getSortableOptions() {\n    return {\n      direction: \"auto\"\n    };\n  },\n  subscribeToEvents: function subscribeToEvents(element) {\n    var that = this;\n\n    var func = function func(e) {\n      var field = $(e.currentTarget).data(\"field\");\n      var mainGroupField = extend(true, {}, getMainGroupField(that._dataSource, field));\n      var isHeaderFilter = $(e.target).hasClass(\"dx-header-filter\");\n      var dataSource = that._dataSource;\n      var type = mainGroupField.groupName ? \"tree\" : \"list\";\n      var paginate = dataSource.paginate() && \"list\" === type;\n\n      if (isHeaderFilter) {\n        that._headerFilterView.showHeaderFilterMenu($(e.currentTarget), extend(mainGroupField, {\n          type: type,\n          encodeHtml: that.option(\"encodeHtml\"),\n          dataSource: {\n            useDefaultSearch: !paginate,\n            load: function load(options) {\n              var userData = options.userData;\n\n              if (userData.store) {\n                return userData.store.load(options);\n              } else {\n                var d = new Deferred();\n                dataSource.getFieldValues(mainGroupField.index, that.option(\"headerFilter.showRelevantValues\"), paginate ? options : void 0).done(function (data) {\n                  var emptyValue = that.option(\"headerFilter.texts.emptyValue\");\n                  data.forEach(function (element) {\n                    if (!element.text) {\n                      element.text = emptyValue;\n                    }\n                  });\n\n                  if (paginate) {\n                    d.resolve(data);\n                  } else {\n                    userData.store = new ArrayStore(data);\n                    userData.store.load(options).done(d.resolve).fail(d.reject);\n                  }\n                }).fail(d.reject);\n                return d;\n              }\n            },\n            postProcess: function postProcess(data) {\n              processItems(data, mainGroupField);\n              return data;\n            }\n          },\n          apply: function apply() {\n            that._applyChanges([mainGroupField], {\n              filterValues: this.filterValues,\n              filterType: this.filterType\n            });\n          }\n        }));\n      } else if (field.allowSorting && \"data\" !== field.area) {\n        that._applyChanges([field], {\n          sortOrder: \"desc\" === field.sortOrder ? \"asc\" : \"desc\"\n        });\n      }\n    };\n\n    if (element) {\n      eventsEngine.on(element, clickEventName, \".dx-area-field.dx-area-box\", func);\n      return;\n    }\n\n    eventsEngine.on(that.$element(), clickEventName, \".dx-area-field.dx-area-box\", func);\n  },\n  _initTemplates: noop,\n  addWidgetPrefix: function addWidgetPrefix(className) {\n    return \"dx-pivotgrid-\" + className;\n  }\n});\nregisterComponent(\"dxPivotGridFieldChooserBase\", FieldChooserBase);\nexport default FieldChooserBase;","map":null,"metadata":{},"sourceType":"module"}