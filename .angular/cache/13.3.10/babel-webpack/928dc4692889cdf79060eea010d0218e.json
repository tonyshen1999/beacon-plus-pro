{"ast":null,"code":"import _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/**\r\n * DevExtreme (esm/ui/gantt/ui.gantt.dialogs.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport Popup from \"../popup\";\nimport Form from \"../form\";\nimport \"../tag_box\";\nimport \"../radio_group\";\nimport dateLocalization from \"../../localization/date\";\nimport messageLocalization from \"../../localization/message\";\nimport \"../list_light\";\nimport \"../list/modules/deleting\";\nexport var GanttDialog = /*#__PURE__*/function () {\n  function GanttDialog(owner, $element) {\n    _classCallCheck(this, GanttDialog);\n\n    this._popupInstance = owner._createComponent($element, Popup);\n    this.infoMap = {\n      TaskEdit: TaskEditDialogInfo,\n      Resources: ResourcesEditDialogInfo,\n      Confirmation: ConfirmDialogInfo,\n      ConstraintViolation: ConstraintViolationDialogInfo\n    };\n  }\n\n  _createClass(GanttDialog, [{\n    key: \"_apply\",\n    value: function _apply() {\n      if (this._dialogInfo.isValidated()) {\n        var result = this._dialogInfo.getResult();\n\n        this._callback(result);\n\n        this.hide();\n      }\n    }\n  }, {\n    key: \"show\",\n    value: function show(name, parameters, callback, afterClosing, editingOptions) {\n      this._callback = callback;\n      this._afterClosing = afterClosing;\n\n      if (!this.infoMap[name]) {\n        return;\n      }\n\n      this._dialogInfo = new this.infoMap[name](parameters, this._apply.bind(this), this.hide.bind(this), editingOptions);\n\n      this._popupInstance.option({\n        showTitle: !!this._dialogInfo.getTitle(),\n        title: this._dialogInfo.getTitle(),\n        toolbarItems: this._dialogInfo.getToolbarItems(),\n        maxWidth: this._dialogInfo.getMaxWidth(),\n        height: this._dialogInfo.getHeight(),\n        contentTemplate: this._dialogInfo.getContentTemplate()\n      });\n\n      this._popupInstance.show();\n    }\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      this._popupInstance.hide();\n\n      if (this._afterClosing) {\n        this._afterClosing();\n      }\n    }\n  }]);\n\n  return GanttDialog;\n}();\n\nvar DialogInfoBase = /*#__PURE__*/function () {\n  function DialogInfoBase(parameters, applyAction, hideAction, editingOptions) {\n    _classCallCheck(this, DialogInfoBase);\n\n    this._parameters = parameters;\n    this._applyAction = applyAction;\n    this._hideAction = hideAction;\n    this._editingOptions = editingOptions;\n  }\n\n  _createClass(DialogInfoBase, [{\n    key: \"_getFormItems\",\n    value: function _getFormItems() {\n      return {};\n    }\n  }, {\n    key: \"_getFormCssClass\",\n    value: function _getFormCssClass() {\n      return \"\";\n    }\n  }, {\n    key: \"_getFormData\",\n    value: function _getFormData() {\n      return this._parameters;\n    }\n  }, {\n    key: \"_updateParameters\",\n    value: function _updateParameters() {}\n  }, {\n    key: \"_getOkToolbarItem\",\n    value: function _getOkToolbarItem() {\n      return this._getToolbarItem(\"OK\", this._applyAction);\n    }\n  }, {\n    key: \"_getCancelToolbarItem\",\n    value: function _getCancelToolbarItem() {\n      return this._getToolbarItem(\"Cancel\", this._hideAction);\n    }\n  }, {\n    key: \"_getYesToolbarItem\",\n    value: function _getYesToolbarItem() {\n      return this._getToolbarItem(\"Yes\", this._applyAction);\n    }\n  }, {\n    key: \"_getNoToolbarItem\",\n    value: function _getNoToolbarItem() {\n      return this._getToolbarItem(\"No\", this._hideAction);\n    }\n  }, {\n    key: \"_getToolbarItem\",\n    value: function _getToolbarItem(localizationText, action) {\n      return {\n        widget: \"dxButton\",\n        toolbar: \"bottom\",\n        options: {\n          text: messageLocalization.format(localizationText),\n          onClick: action\n        }\n      };\n    }\n  }, {\n    key: \"getTitle\",\n    value: function getTitle() {\n      return \"\";\n    }\n  }, {\n    key: \"getToolbarItems\",\n    value: function getToolbarItems() {\n      return this._editingOptions.enabled ? [this._getOkToolbarItem(), this._getCancelToolbarItem()] : [this._getCancelToolbarItem()];\n    }\n  }, {\n    key: \"getMaxWidth\",\n    value: function getMaxWidth() {\n      return 400;\n    }\n  }, {\n    key: \"getHeight\",\n    value: function getHeight() {\n      return \"auto\";\n    }\n  }, {\n    key: \"getContentTemplate\",\n    value: function getContentTemplate() {\n      var _this = this;\n\n      return function (content) {\n        _this._form = new Form(content, {\n          formData: _this._getFormData(),\n          items: _this._getFormItems(),\n          elementAttr: {\n            class: _this._getFormCssClass()\n          }\n        });\n        return content;\n      };\n    }\n  }, {\n    key: \"getResult\",\n    value: function getResult() {\n      var formData = this.getFormData();\n\n      this._updateParameters(formData);\n\n      return this._parameters;\n    }\n  }, {\n    key: \"getFormData\",\n    value: function getFormData() {\n      var formData = this._form && this._form.option(\"formData\");\n\n      return formData;\n    }\n  }, {\n    key: \"isValidated\",\n    value: function isValidated() {\n      return true;\n    }\n  }]);\n\n  return DialogInfoBase;\n}();\n\nvar TaskEditDialogInfo = /*#__PURE__*/function (_DialogInfoBase) {\n  _inherits(TaskEditDialogInfo, _DialogInfoBase);\n\n  var _super = _createSuper(TaskEditDialogInfo);\n\n  function TaskEditDialogInfo() {\n    _classCallCheck(this, TaskEditDialogInfo);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TaskEditDialogInfo, [{\n    key: \"getTitle\",\n    value: function getTitle() {\n      return messageLocalization.format(\"dxGantt-dialogTaskDetailsTitle\");\n    }\n  }, {\n    key: \"_getFormItems\",\n    value: function _getFormItems() {\n      var _this2 = this;\n\n      var readOnly = !this._editingOptions.enabled || !this._editingOptions.allowTaskUpdating;\n      var readOnlyRange = readOnly || !this._parameters.enableRangeEdit;\n      return [{\n        dataField: \"title\",\n        editorType: \"dxTextBox\",\n        label: {\n          text: messageLocalization.format(\"dxGantt-dialogTitle\")\n        },\n        editorOptions: {\n          readOnly: readOnly || this._isReadOnlyField(\"title\")\n        },\n        visible: !this._isHiddenField(\"title\")\n      }, {\n        dataField: \"start\",\n        editorType: \"dxDateBox\",\n        label: {\n          text: messageLocalization.format(\"dxGantt-dialogStartTitle\")\n        },\n        editorOptions: {\n          type: \"datetime\",\n          width: \"100%\",\n          readOnly: readOnlyRange || this._isReadOnlyField(\"start\")\n        },\n        visible: !this._isHiddenField(\"start\"),\n        validationRules: [{\n          type: \"required\",\n          message: messageLocalization.format(\"validation-required-formatted\", messageLocalization.format(\"dxGantt-dialogStartTitle\"))\n        }, {\n          type: \"custom\",\n          validationCallback: function validationCallback(e) {\n            if (_this2._parameters.isValidationRequired) {\n              var correctDateRange = _this2._parameters.getCorrectDateRange(_this2._parameters.id, e.value, _this2._parameters.end);\n\n              if (correctDateRange.start.getTime() !== e.value.getTime()) {\n                e.rule.message = _this2._getValidationMessage(true, correctDateRange.start);\n                return false;\n              }\n            }\n\n            return true;\n          }\n        }]\n      }, {\n        dataField: \"end\",\n        editorType: \"dxDateBox\",\n        label: {\n          text: messageLocalization.format(\"dxGantt-dialogEndTitle\")\n        },\n        editorOptions: {\n          type: \"datetime\",\n          width: \"100%\",\n          readOnly: readOnlyRange || this._isReadOnlyField(\"end\")\n        },\n        visible: !this._isHiddenField(\"end\"),\n        validationRules: [{\n          type: \"required\",\n          message: messageLocalization.format(\"validation-required-formatted\", messageLocalization.format(\"dxGantt-dialogEndTitle\"))\n        }, {\n          type: \"custom\",\n          validationCallback: function validationCallback(e) {\n            if (_this2._parameters.isValidationRequired) {\n              var correctDateRange = _this2._parameters.getCorrectDateRange(_this2._parameters.id, _this2._parameters.start, e.value);\n\n              if (correctDateRange.end.getTime() !== e.value.getTime()) {\n                e.rule.message = _this2._getValidationMessage(false, correctDateRange.end);\n                return false;\n              }\n            }\n\n            return true;\n          }\n        }]\n      }, {\n        dataField: \"progress\",\n        editorType: \"dxNumberBox\",\n        label: {\n          text: messageLocalization.format(\"dxGantt-dialogProgressTitle\")\n        },\n        editorOptions: {\n          showSpinButtons: true,\n          min: 0,\n          max: 1,\n          format: \"#0%\",\n          step: .01,\n          readOnly: readOnlyRange || this._isReadOnlyField(\"progress\")\n        },\n        visible: !this._isHiddenField(\"progress\")\n      }, {\n        dataField: \"assigned.items\",\n        editorType: \"dxTagBox\",\n        label: {\n          text: messageLocalization.format(\"dxGantt-dialogResourcesTitle\")\n        },\n        editorOptions: {\n          readOnly: readOnly || !this._editingOptions.allowTaskResourceUpdating,\n          dataSource: this._parameters.resources.items,\n          displayExpr: \"text\",\n          buttons: [{\n            name: \"editResources\",\n            location: \"after\",\n            options: {\n              disabled: !this._editingOptions.allowResourceAdding && !this._editingOptions.allowResourceDeleting,\n              text: \"...\",\n              hint: messageLocalization.format(\"dxGantt-dialogEditResourceListHint\"),\n              onClick: function onClick() {\n                _this2._parameters.showResourcesDialogCommand.execute(function () {\n                  _this2._parameters.showTaskEditDialogCommand.execute();\n                });\n              }\n            }\n          }]\n        }\n      }];\n    }\n  }, {\n    key: \"_getValidationMessage\",\n    value: function _getValidationMessage(isStartDependencies, correctDate) {\n      if (isStartDependencies) {\n        return messageLocalization.format(\"dxGantt-dialogStartDateValidation\", this._getFormattedDateText(correctDate));\n      }\n\n      return messageLocalization.format(\"dxGantt-dialogEndDateValidation\", this._getFormattedDateText(correctDate));\n    }\n  }, {\n    key: \"_getFormattedDateText\",\n    value: function _getFormattedDateText(date) {\n      var result = \"\";\n\n      if (date) {\n        var datePart = dateLocalization.format(date, \"shortDate\");\n        var timePart = dateLocalization.format(date, \"hh:mm\");\n        result = datePart + \" \" + timePart;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_isReadOnlyField\",\n    value: function _isReadOnlyField(field) {\n      return this._parameters.readOnlyFields.indexOf(field) > -1;\n    }\n  }, {\n    key: \"_isHiddenField\",\n    value: function _isHiddenField(field) {\n      return this._parameters.hiddenFields.indexOf(field) > -1;\n    }\n  }, {\n    key: \"_getFormData\",\n    value: function _getFormData() {\n      var data = {};\n\n      for (var field in this._parameters) {\n        data[field] = \"progress\" === field ? this._parameters[field] / 100 : this._parameters[field];\n      }\n\n      return data;\n    }\n  }, {\n    key: \"_updateParameters\",\n    value: function _updateParameters(formData) {\n      this._parameters.title = formData.title;\n      this._parameters.start = formData.start;\n      this._parameters.end = formData.end;\n      this._parameters.progress = 100 * formData.progress;\n      this._parameters.assigned = formData.assigned;\n    }\n  }, {\n    key: \"isValidated\",\n    value: function isValidated() {\n      var _this$_form;\n\n      var validationResult = null === (_this$_form = this._form) || void 0 === _this$_form ? void 0 : _this$_form.validate();\n      return null === validationResult || void 0 === validationResult ? void 0 : validationResult.isValid;\n    }\n  }]);\n\n  return TaskEditDialogInfo;\n}(DialogInfoBase);\n\nvar ResourcesEditDialogInfo = /*#__PURE__*/function (_DialogInfoBase2) {\n  _inherits(ResourcesEditDialogInfo, _DialogInfoBase2);\n\n  var _super2 = _createSuper(ResourcesEditDialogInfo);\n\n  function ResourcesEditDialogInfo() {\n    _classCallCheck(this, ResourcesEditDialogInfo);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(ResourcesEditDialogInfo, [{\n    key: \"getTitle\",\n    value: function getTitle() {\n      return messageLocalization.format(\"dxGantt-dialogResourceManagerTitle\");\n    }\n  }, {\n    key: \"_getFormItems\",\n    value: function _getFormItems() {\n      var _this3 = this;\n\n      return [{\n        label: {\n          visible: false\n        },\n        dataField: \"resources.items\",\n        editorType: \"dxList\",\n        editorOptions: {\n          allowItemDeleting: this._editingOptions.enabled && this._editingOptions.allowResourceDeleting,\n          itemDeleteMode: \"static\",\n          selectionMode: \"none\",\n          items: this._parameters.resources.items,\n          height: 250,\n          noDataText: messageLocalization.format(\"dxGantt-dialogEditNoResources\"),\n          onInitialized: function onInitialized(e) {\n            _this3.list = e.component;\n          },\n          onItemDeleted: function onItemDeleted(e) {\n            _this3._parameters.resources.remove(e.itemData);\n          }\n        }\n      }, {\n        label: {\n          visible: false\n        },\n        editorType: \"dxTextBox\",\n        editorOptions: {\n          readOnly: !this._editingOptions.enabled || !this._editingOptions.allowResourceAdding,\n          onInitialized: function onInitialized(e) {\n            _this3.textBox = e.component;\n          },\n          onInput: function onInput(e) {\n            var addButton = e.component.getButton(\"addResource\");\n            var resourceName = e.component.option(\"text\");\n            addButton.option(\"disabled\", 0 === resourceName.length);\n          },\n          buttons: [{\n            name: \"addResource\",\n            location: \"after\",\n            options: {\n              text: messageLocalization.format(\"dxGantt-dialogButtonAdd\"),\n              disabled: true,\n              onClick: function onClick(e) {\n                var newItem = _this3._parameters.resources.createItem();\n\n                newItem.text = _this3.textBox.option(\"text\");\n\n                _this3._parameters.resources.add(newItem);\n\n                _this3.list.option(\"items\", _this3._parameters.resources.items);\n\n                _this3.list.scrollToItem(newItem);\n\n                _this3.textBox.reset();\n\n                e.component.option(\"disabled\", true);\n              }\n            }\n          }]\n        }\n      }];\n    }\n  }]);\n\n  return ResourcesEditDialogInfo;\n}(DialogInfoBase);\n\nvar ConfirmDialogInfo = /*#__PURE__*/function (_DialogInfoBase3) {\n  _inherits(ConfirmDialogInfo, _DialogInfoBase3);\n\n  var _super3 = _createSuper(ConfirmDialogInfo);\n\n  function ConfirmDialogInfo() {\n    _classCallCheck(this, ConfirmDialogInfo);\n\n    return _super3.apply(this, arguments);\n  }\n\n  _createClass(ConfirmDialogInfo, [{\n    key: \"getContentTemplate\",\n    value: function getContentTemplate() {\n      var _this4 = this;\n\n      return function (content) {\n        return _this4._getConfirmMessage();\n      };\n    }\n  }, {\n    key: \"_getConfirmMessage\",\n    value: function _getConfirmMessage() {\n      switch (this._parameters.type) {\n        case 0:\n          return messageLocalization.format(\"dxGantt-dialogTaskDeleteConfirmation\");\n\n        case 1:\n          return messageLocalization.format(\"dxGantt-dialogDependencyDeleteConfirmation\");\n\n        case 2:\n          return messageLocalization.format(\"dxGantt-dialogResourcesDeleteConfirmation\", this._parameters.message);\n\n        default:\n          return \"\";\n      }\n    }\n  }, {\n    key: \"getToolbarItems\",\n    value: function getToolbarItems() {\n      return [this._getYesToolbarItem(), this._getNoToolbarItem()];\n    }\n  }]);\n\n  return ConfirmDialogInfo;\n}(DialogInfoBase);\n\nvar ConstraintViolationDialogInfo = /*#__PURE__*/function (_DialogInfoBase4) {\n  _inherits(ConstraintViolationDialogInfo, _DialogInfoBase4);\n\n  var _super4 = _createSuper(ConstraintViolationDialogInfo);\n\n  function ConstraintViolationDialogInfo() {\n    _classCallCheck(this, ConstraintViolationDialogInfo);\n\n    return _super4.apply(this, arguments);\n  }\n\n  _createClass(ConstraintViolationDialogInfo, [{\n    key: \"_getFormItems\",\n    value: function _getFormItems() {\n      var items = [];\n      items.push({\n        text: messageLocalization.format(\"dxGantt-dialogCancelOperationMessage\"),\n        value: 0\n      });\n      items.push({\n        text: messageLocalization.format(\"dxGantt-dialogDeleteDependencyMessage\"),\n        value: 1\n      });\n\n      if (!this._parameters.validationError.critical) {\n        items.push({\n          text: messageLocalization.format(\"dxGantt-dialogMoveTaskAndKeepDependencyMessage\"),\n          value: 2\n        });\n      }\n\n      return [{\n        template: this._parameters.validationError.critical ? messageLocalization.format(\"dxGantt-dialogConstraintCriticalViolationMessage\") : messageLocalization.format(\"dxGantt-dialogConstraintViolationMessage\")\n      }, {\n        cssClass: \"dx-cv-dialog-row\",\n        dataField: \"option\",\n        label: {\n          visible: false\n        },\n        editorType: \"dxRadioGroup\",\n        editorOptions: {\n          items: items,\n          valueExpr: \"value\",\n          value: 0\n        }\n      }];\n    }\n  }, {\n    key: \"_getFormCssClass\",\n    value: function _getFormCssClass() {\n      return \"dx-cv-dialog\";\n    }\n  }, {\n    key: \"_updateParameters\",\n    value: function _updateParameters(formData) {\n      this._parameters.option = formData.option;\n    }\n  }]);\n\n  return ConstraintViolationDialogInfo;\n}(DialogInfoBase);","map":null,"metadata":{},"sourceType":"module"}