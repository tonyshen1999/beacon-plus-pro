{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/ui/context_menu/ui.context_menu.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport domAdapter from \"../../core/dom_adapter\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport Guid from \"../../core/guid\";\nimport registerComponent from \"../../core/component_registrator\";\nimport { noop } from \"../../core/utils/common\";\nimport { isObject, isRenderer, isWindow, isFunction, isPlainObject, isDefined } from \"../../core/utils/type\";\nimport { contains } from \"../../core/utils/dom\";\nimport { getPublicElement } from \"../../core/element\";\nimport { each } from \"../../core/utils/iterator\";\nimport { inArray } from \"../../core/utils/array\";\nimport { extend } from \"../../core/utils/extend\";\nimport { hasWindow } from \"../../core/utils/window\";\nimport fx from \"../../animation/fx\";\nimport animationPosition from \"../../animation/position\";\nimport devices from \"../../core/devices\";\nimport { addNamespace } from \"../../events/utils/index\";\nimport Overlay from \"../overlay/ui.overlay\";\nimport MenuBase from \"./ui.menu_base\";\nimport { Deferred } from \"../../core/utils/deferred\";\nimport { name as contextMenuEventName } from \"../../events/contextmenu\";\nimport holdEvent from \"../../events/hold\";\nvar DX_MENU_CLASS = \"dx-menu\";\nvar DX_MENU_ITEM_CLASS = DX_MENU_CLASS + \"-item\";\nvar DX_MENU_ITEM_EXPANDED_CLASS = DX_MENU_ITEM_CLASS + \"-expanded\";\nvar DX_MENU_PHONE_CLASS = \"dx-menu-phone-overlay\";\nvar DX_MENU_ITEMS_CONTAINER_CLASS = DX_MENU_CLASS + \"-items-container\";\nvar DX_MENU_ITEM_WRAPPER_CLASS = DX_MENU_ITEM_CLASS + \"-wrapper\";\nvar DX_SUBMENU_CLASS = \"dx-submenu\";\nvar DX_CONTEXT_MENU_CLASS = \"dx-context-menu\";\nvar DX_HAS_CONTEXT_MENU_CLASS = \"dx-has-context-menu\";\nvar DX_STATE_DISABLED_CLASS = \"dx-state-disabled\";\nvar DX_STATE_FOCUSED_CLASS = \"dx-state-focused\";\nvar DX_STATE_HOVER_CLASS = \"dx-state-hover\";\nvar FOCUS_UP = \"up\";\nvar FOCUS_DOWN = \"down\";\nvar FOCUS_LEFT = \"left\";\nvar FOCUS_RIGHT = \"right\";\nvar FOCUS_FIRST = \"first\";\nvar FOCUS_LAST = \"last\";\nvar ACTIONS = [\"onShowing\", \"onShown\", \"onSubmenuCreated\", \"onHiding\", \"onHidden\", \"onPositioning\", \"onLeftFirstItem\", \"onLeftLastItem\", \"onCloseRootSubmenu\", \"onExpandLastSubmenu\"];\nvar LOCAL_SUBMENU_DIRECTIONS = [FOCUS_UP, FOCUS_DOWN, FOCUS_FIRST, FOCUS_LAST];\nvar DEFAULT_SHOW_EVENT = \"dxcontextmenu\";\n\nvar ContextMenu = /*#__PURE__*/function (_MenuBase) {\n  _inherits(ContextMenu, _MenuBase);\n\n  var _super = _createSuper(ContextMenu);\n\n  function ContextMenu() {\n    _classCallCheck(this, ContextMenu);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ContextMenu, [{\n    key: \"getShowEvent\",\n    value: function getShowEvent(showEventOption) {\n      var result = null;\n\n      if (isObject(showEventOption)) {\n        if (null !== showEventOption.name) {\n          result = showEventOption.name || DEFAULT_SHOW_EVENT;\n        }\n      } else {\n        result = showEventOption;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"getShowDelay\",\n    value: function getShowDelay(showEventOption) {\n      return isObject(showEventOption) && showEventOption.delay;\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function _getDefaultOptions() {\n      return extend(_get(_getPrototypeOf(ContextMenu.prototype), \"_getDefaultOptions\", this).call(this), {\n        showEvent: DEFAULT_SHOW_EVENT,\n        closeOnOutsideClick: true,\n        position: {\n          at: \"top left\",\n          my: \"top left\"\n        },\n        onShowing: null,\n        onShown: null,\n        onSubmenuCreated: null,\n        onHiding: null,\n        onHidden: null,\n        onPositioning: null,\n        submenuDirection: \"auto\",\n        visible: false,\n        target: void 0,\n        onLeftFirstItem: null,\n        onLeftLastItem: null,\n        onCloseRootSubmenu: null,\n        onExpandLastSubmenu: null\n      });\n    }\n  }, {\n    key: \"_defaultOptionsRules\",\n    value: function _defaultOptionsRules() {\n      return _get(_getPrototypeOf(ContextMenu.prototype), \"_defaultOptionsRules\", this).call(this).concat([{\n        device: function device() {\n          return !hasWindow();\n        },\n        options: {\n          animation: null\n        }\n      }]);\n    }\n  }, {\n    key: \"_initActions\",\n    value: function _initActions() {\n      var _this = this;\n\n      this._actions = {};\n      each(ACTIONS, function (index, action) {\n        _this._actions[action] = _this._createActionByOption(action) || noop;\n      });\n    }\n  }, {\n    key: \"_setOptionsByReference\",\n    value: function _setOptionsByReference() {\n      _get(_getPrototypeOf(ContextMenu.prototype), \"_setOptionsByReference\", this).call(this);\n\n      extend(this._optionsByReference, {\n        animation: true,\n        selectedItem: true\n      });\n    }\n  }, {\n    key: \"_focusInHandler\",\n    value: function _focusInHandler() {}\n  }, {\n    key: \"_itemContainer\",\n    value: function _itemContainer() {\n      return this._overlay ? this._overlay.$content() : $();\n    }\n  }, {\n    key: \"_eventBindingTarget\",\n    value: function _eventBindingTarget() {\n      return this._itemContainer();\n    }\n  }, {\n    key: \"itemsContainer\",\n    value: function itemsContainer() {\n      return this._overlay ? this._overlay.$content() : void 0;\n    }\n  }, {\n    key: \"_supportedKeys\",\n    value: function _supportedKeys() {\n      var _this2 = this;\n\n      return extend(_get(_getPrototypeOf(ContextMenu.prototype), \"_supportedKeys\", this).call(this), {\n        space: function space() {\n          var $item = $(_this2.option(\"focusedElement\"));\n\n          _this2.hide();\n\n          if (!$item.length || !_this2._isSelectionEnabled()) {\n            return;\n          }\n\n          _this2.selectItem($item[0]);\n        },\n        escape: this.hide\n      });\n    }\n  }, {\n    key: \"_getActiveItem\",\n    value: function _getActiveItem() {\n      var $availableItems = this._getAvailableItems();\n\n      var $focusedItem = $availableItems.filter(\".\".concat(DX_STATE_FOCUSED_CLASS));\n      var $hoveredItem = $availableItems.filter(\".\".concat(DX_STATE_HOVER_CLASS));\n      var $hoveredItemContainer = $hoveredItem.closest(\".\".concat(DX_MENU_ITEMS_CONTAINER_CLASS));\n\n      if ($hoveredItemContainer.find(\".\".concat(DX_MENU_ITEM_CLASS)).index($focusedItem) >= 0) {\n        return $focusedItem;\n      }\n\n      if ($hoveredItem.length) {\n        return $hoveredItem;\n      }\n\n      return _get(_getPrototypeOf(ContextMenu.prototype), \"_getActiveItem\", this).call(this);\n    }\n  }, {\n    key: \"_moveFocus\",\n    value: function _moveFocus(location) {\n      var $items = this._getItemsByLocation(location);\n\n      var $oldTarget = this._getActiveItem(true);\n\n      var $hoveredItem = this.itemsContainer().find(\".\".concat(DX_STATE_HOVER_CLASS));\n      var $focusedItem = $(this.option(\"focusedElement\"));\n      var $activeItemHighlighted = !!($focusedItem.length || $hoveredItem.length);\n      var $newTarget;\n\n      switch (location) {\n        case FOCUS_UP:\n          $newTarget = $activeItemHighlighted ? this._prevItem($items) : $oldTarget;\n\n          this._setFocusedElement($newTarget);\n\n          if ($oldTarget.is($items.first())) {\n            this._actions.onLeftFirstItem($oldTarget);\n          }\n\n          break;\n\n        case FOCUS_DOWN:\n          $newTarget = $activeItemHighlighted ? this._nextItem($items) : $oldTarget;\n\n          this._setFocusedElement($newTarget);\n\n          if ($oldTarget.is($items.last())) {\n            this._actions.onLeftLastItem($oldTarget);\n          }\n\n          break;\n\n        case FOCUS_RIGHT:\n          $newTarget = this.option(\"rtlEnabled\") ? this._hideSubmenuHandler() : this._expandSubmenuHandler($items, location);\n\n          this._setFocusedElement($newTarget);\n\n          break;\n\n        case FOCUS_LEFT:\n          $newTarget = this.option(\"rtlEnabled\") ? this._expandSubmenuHandler($items, location) : this._hideSubmenuHandler();\n\n          this._setFocusedElement($newTarget);\n\n          break;\n\n        case FOCUS_FIRST:\n          $newTarget = $items.first();\n\n          this._setFocusedElement($newTarget);\n\n          break;\n\n        case FOCUS_LAST:\n          $newTarget = $items.last();\n\n          this._setFocusedElement($newTarget);\n\n          break;\n\n        default:\n          return _get(_getPrototypeOf(ContextMenu.prototype), \"_moveFocus\", this).call(this, location);\n      }\n    }\n  }, {\n    key: \"_setFocusedElement\",\n    value: function _setFocusedElement($element) {\n      if ($element && 0 !== $element.length) {\n        this.option(\"focusedElement\", getPublicElement($element));\n      }\n    }\n  }, {\n    key: \"_getItemsByLocation\",\n    value: function _getItemsByLocation(location) {\n      var $activeItem = this._getActiveItem(true);\n\n      var $items;\n\n      if (inArray(location, LOCAL_SUBMENU_DIRECTIONS) >= 0) {\n        $items = $activeItem.closest(\".\".concat(DX_MENU_ITEMS_CONTAINER_CLASS)).children().children();\n      }\n\n      $items = this._getAvailableItems($items);\n      return $items;\n    }\n  }, {\n    key: \"_getAriaTarget\",\n    value: function _getAriaTarget() {\n      return this.$element();\n    }\n  }, {\n    key: \"_refreshActiveDescendant\",\n    value: function _refreshActiveDescendant() {\n      if (isDefined(this._overlay)) {\n        var $target = this._overlay.$content();\n\n        _get(_getPrototypeOf(ContextMenu.prototype), \"_refreshActiveDescendant\", this).call(this, $target);\n      }\n    }\n  }, {\n    key: \"_hideSubmenuHandler\",\n    value: function _hideSubmenuHandler() {\n      var $curItem = this._getActiveItem(true);\n\n      var $parentItem = $curItem.parents(\".\".concat(DX_MENU_ITEM_EXPANDED_CLASS)).first();\n\n      if ($parentItem.length) {\n        this._hideSubmenusOnSameLevel($parentItem);\n\n        this._hideSubmenu($curItem.closest(\".\".concat(DX_SUBMENU_CLASS)));\n\n        return $parentItem;\n      }\n\n      this._actions.onCloseRootSubmenu($curItem);\n\n      return $curItem;\n    }\n  }, {\n    key: \"_expandSubmenuHandler\",\n    value: function _expandSubmenuHandler($items, location) {\n      var $curItem = this._getActiveItem(true);\n\n      var itemData = this._getItemData($curItem);\n\n      var node = this._dataAdapter.getNodeByItem(itemData);\n\n      var isItemHasSubmenu = this._hasSubmenu(node);\n\n      var $submenu = $curItem.children(\".\".concat(DX_SUBMENU_CLASS));\n\n      if (isItemHasSubmenu && !$curItem.hasClass(DX_STATE_DISABLED_CLASS)) {\n        if (!$submenu.length || \"hidden\" === $submenu.css(\"visibility\")) {\n          this._showSubmenu($curItem);\n        }\n\n        return this._nextItem(this._getItemsByLocation(location));\n      }\n\n      this._actions.onExpandLastSubmenu($curItem);\n\n      return;\n    }\n  }, {\n    key: \"_clean\",\n    value: function _clean() {\n      if (this._overlay) {\n        this._overlay.$element().remove();\n\n        this._overlay = null;\n      }\n\n      this._detachShowContextMenuEvents(this._getTarget());\n\n      _get(_getPrototypeOf(ContextMenu.prototype), \"_clean\", this).call(this);\n    }\n  }, {\n    key: \"_initMarkup\",\n    value: function _initMarkup() {\n      this.$element().addClass(DX_HAS_CONTEXT_MENU_CLASS);\n\n      _get(_getPrototypeOf(ContextMenu.prototype), \"_initMarkup\", this).call(this);\n    }\n  }, {\n    key: \"_render\",\n    value: function _render() {\n      _get(_getPrototypeOf(ContextMenu.prototype), \"_render\", this).call(this);\n\n      this._renderVisibility(this.option(\"visible\"));\n\n      this._addWidgetClass();\n    }\n  }, {\n    key: \"_renderContentImpl\",\n    value: function _renderContentImpl() {\n      this._detachShowContextMenuEvents(this._getTarget());\n\n      this._attachShowContextMenuEvents();\n    }\n  }, {\n    key: \"_attachKeyboardEvents\",\n    value: function _attachKeyboardEvents() {\n      !this._keyboardListenerId && this._focusTarget().length && _get(_getPrototypeOf(ContextMenu.prototype), \"_attachKeyboardEvents\", this).call(this);\n    }\n  }, {\n    key: \"_renderContextMenuOverlay\",\n    value: function _renderContextMenuOverlay() {\n      if (this._overlay) {\n        return;\n      }\n\n      var overlayOptions = this._getOverlayOptions();\n\n      this._overlay = this._createComponent($(\"<div>\").appendTo(this._$element), Overlay, overlayOptions);\n\n      var $overlayContent = this._overlay.$content();\n\n      $overlayContent.addClass(DX_CONTEXT_MENU_CLASS);\n\n      this._addCustomCssClass($overlayContent);\n\n      this._addPlatformDependentClass($overlayContent);\n\n      this._attachContextMenuEvent();\n    }\n  }, {\n    key: \"preventShowingDefaultContextMenuAboveOverlay\",\n    value: function preventShowingDefaultContextMenuAboveOverlay() {\n      var $itemContainer = this._itemContainer();\n\n      var eventName = addNamespace(contextMenuEventName, this.NAME);\n      eventsEngine.off($itemContainer, eventName, \".\".concat(DX_SUBMENU_CLASS));\n      eventsEngine.on($itemContainer, eventName, \".\".concat(DX_SUBMENU_CLASS), function (e) {\n        e.stopPropagation();\n        e.preventDefault();\n        eventsEngine.off($itemContainer, eventName, \".\".concat(DX_SUBMENU_CLASS));\n      }.bind(this));\n    }\n  }, {\n    key: \"_itemContextMenuHandler\",\n    value: function _itemContextMenuHandler(e) {\n      _get(_getPrototypeOf(ContextMenu.prototype), \"_itemContextMenuHandler\", this).call(this, e);\n\n      e.stopPropagation();\n    }\n  }, {\n    key: \"_addPlatformDependentClass\",\n    value: function _addPlatformDependentClass($element) {\n      if (devices.current().phone) {\n        $element.addClass(DX_MENU_PHONE_CLASS);\n      }\n    }\n  }, {\n    key: \"_detachShowContextMenuEvents\",\n    value: function _detachShowContextMenuEvents(target) {\n      var showEvent = this.getShowEvent(this.option(\"showEvent\"));\n\n      if (!showEvent) {\n        return;\n      }\n\n      var eventName = addNamespace(showEvent, this.NAME);\n\n      if (this._showContextMenuEventHandler) {\n        eventsEngine.off(domAdapter.getDocument(), eventName, target, this._showContextMenuEventHandler);\n      } else {\n        eventsEngine.off($(target), eventName);\n      }\n    }\n  }, {\n    key: \"_attachShowContextMenuEvents\",\n    value: function _attachShowContextMenuEvents() {\n      var _this3 = this;\n\n      var target = this._getTarget();\n\n      var showEvent = this.getShowEvent(this.option(\"showEvent\"));\n\n      if (!showEvent) {\n        return;\n      }\n\n      var eventName = addNamespace(showEvent, this.NAME);\n\n      var contextMenuAction = this._createAction(function (e) {\n        var delay = _this3.getShowDelay(_this3.option(\"showEvent\"));\n\n        if (delay) {\n          setTimeout(function () {\n            return _this3._show(e.event);\n          }, delay);\n        } else {\n          _this3._show(e.event);\n        }\n      }, {\n        validatingTargetName: \"target\"\n      });\n\n      var handler = function handler(e) {\n        return contextMenuAction({\n          event: e,\n          target: $(e.currentTarget)\n        });\n      };\n\n      contextMenuAction = this._createAction(contextMenuAction);\n\n      if (isRenderer(target) || target.nodeType || isWindow(target)) {\n        this._showContextMenuEventHandler = void 0;\n        eventsEngine.on(target, eventName, handler);\n      } else {\n        this._showContextMenuEventHandler = handler;\n        eventsEngine.on(domAdapter.getDocument(), eventName, target, this._showContextMenuEventHandler);\n      }\n    }\n  }, {\n    key: \"_hoverEndHandler\",\n    value: function _hoverEndHandler(e) {\n      _get(_getPrototypeOf(ContextMenu.prototype), \"_hoverEndHandler\", this).call(this, e);\n\n      e.stopPropagation();\n    }\n  }, {\n    key: \"_renderDimensions\",\n    value: function _renderDimensions() {}\n  }, {\n    key: \"_renderContainer\",\n    value: function _renderContainer($wrapper, submenuContainer) {\n      var $holder = submenuContainer || this._itemContainer();\n\n      $wrapper = $(\"<div>\");\n      $wrapper.appendTo($holder).addClass(DX_SUBMENU_CLASS).css(\"visibility\", submenuContainer ? \"hidden\" : \"visible\");\n\n      var $itemsContainer = _get(_getPrototypeOf(ContextMenu.prototype), \"_renderContainer\", this).call(this, $wrapper);\n\n      if (submenuContainer) {\n        return $itemsContainer;\n      }\n\n      if (this.option(\"width\")) {\n        return $itemsContainer.css(\"minWidth\", this.option(\"width\"));\n      }\n\n      if (this.option(\"height\")) {\n        return $itemsContainer.css(\"minHeight\", this.option(\"height\"));\n      }\n\n      return $itemsContainer;\n    }\n  }, {\n    key: \"_renderSubmenuItems\",\n    value: function _renderSubmenuItems(node, $itemFrame) {\n      this._renderItems(this._getChildNodes(node), $itemFrame);\n\n      this._actions.onSubmenuCreated({\n        itemElement: getPublicElement($itemFrame),\n        itemData: node.internalFields.item,\n        submenuElement: getPublicElement($itemFrame.children(\".\".concat(DX_SUBMENU_CLASS)))\n      });\n    }\n  }, {\n    key: \"_getOverlayOptions\",\n    value: function _getOverlayOptions() {\n      var position = this.option(\"position\");\n      var overlayOptions = {\n        focusStateEnabled: this.option(\"focusStateEnabled\"),\n        animation: this.option(\"animation\"),\n        innerOverlay: true,\n        closeOnOutsideClick: this._closeOnOutsideClickHandler.bind(this),\n        propagateOutsideClick: true,\n        hideOnParentScroll: true,\n        deferRendering: false,\n        position: {\n          at: position.at,\n          my: position.my,\n          of: this._getTarget(),\n          collision: \"flipfit\"\n        },\n        shading: false,\n        showTitle: false,\n        height: \"auto\",\n        width: \"auto\",\n        onShown: this._overlayShownActionHandler.bind(this),\n        onHiding: this._overlayHidingActionHandler.bind(this),\n        onHidden: this._overlayHiddenActionHandler.bind(this)\n      };\n      return overlayOptions;\n    }\n  }, {\n    key: \"_overlayShownActionHandler\",\n    value: function _overlayShownActionHandler(arg) {\n      this._actions.onShown(arg);\n    }\n  }, {\n    key: \"_overlayHidingActionHandler\",\n    value: function _overlayHidingActionHandler(arg) {\n      this._actions.onHiding(arg);\n\n      if (!arg.cancel) {\n        this._hideAllShownSubmenus();\n\n        this._setOptionWithoutOptionChange(\"visible\", false);\n      }\n    }\n  }, {\n    key: \"_overlayHiddenActionHandler\",\n    value: function _overlayHiddenActionHandler(arg) {\n      this._actions.onHidden(arg);\n    }\n  }, {\n    key: \"_closeOnOutsideClickHandler\",\n    value: function _closeOnOutsideClickHandler(e) {\n      var closeOnOutsideClick = this.option(\"closeOnOutsideClick\");\n\n      if (isFunction(closeOnOutsideClick)) {\n        return closeOnOutsideClick(e);\n      }\n\n      if (!closeOnOutsideClick) {\n        return false;\n      }\n\n      if (domAdapter.isDocument(e.target)) {\n        return true;\n      }\n\n      var $activeItemContainer = this._getActiveItemsContainer(e.target);\n\n      var $itemContainers = this._getItemsContainers();\n\n      var $clickedItem = this._searchActiveItem(e.target);\n\n      var $rootItem = this.$element().parents(\".\".concat(DX_MENU_ITEM_CLASS));\n      var isRootItemClicked = $clickedItem[0] === $rootItem[0] && $clickedItem.length && $rootItem.length;\n      var isInnerOverlayClicked = this._isIncludeOverlay($activeItemContainer, $itemContainers) && $clickedItem.length;\n\n      if (isInnerOverlayClicked || isRootItemClicked) {\n        if (\"onClick\" === this._getShowSubmenuMode()) {\n          this._hideAllShownChildSubmenus($clickedItem);\n        }\n\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"_getActiveItemsContainer\",\n    value: function _getActiveItemsContainer(target) {\n      return $(target).closest(\".\".concat(DX_MENU_ITEMS_CONTAINER_CLASS));\n    }\n  }, {\n    key: \"_getItemsContainers\",\n    value: function _getItemsContainers() {\n      return this._overlay.$content().find(\".\".concat(DX_MENU_ITEMS_CONTAINER_CLASS));\n    }\n  }, {\n    key: \"_searchActiveItem\",\n    value: function _searchActiveItem(target) {\n      return $(target).closest(\".\".concat(DX_MENU_ITEM_CLASS)).eq(0);\n    }\n  }, {\n    key: \"_isIncludeOverlay\",\n    value: function _isIncludeOverlay($activeOverlay, $allOverlays) {\n      var isSame = false;\n      each($allOverlays, function (index, $overlay) {\n        if ($activeOverlay.is($overlay) && !isSame) {\n          isSame = true;\n        }\n      });\n      return isSame;\n    }\n  }, {\n    key: \"_hideAllShownChildSubmenus\",\n    value: function _hideAllShownChildSubmenus($clickedItem) {\n      var _this4 = this;\n\n      var $submenuElements = $clickedItem.find(\".\".concat(DX_SUBMENU_CLASS));\n      var shownSubmenus = extend([], this._shownSubmenus);\n\n      if ($submenuElements.length > 0) {\n        each(shownSubmenus, function (index, $submenu) {\n          var $context = _this4._searchActiveItem($submenu.context).parent();\n\n          if ($context.parent().is($clickedItem.parent().parent()) && !$context.is($clickedItem.parent())) {\n            _this4._hideSubmenu($submenu);\n          }\n        });\n      }\n    }\n  }, {\n    key: \"_showSubmenu\",\n    value: function _showSubmenu($item) {\n      var node = this._dataAdapter.getNodeByItem(this._getItemData($item));\n\n      this._hideSubmenusOnSameLevel($item);\n\n      if (!this._hasSubmenu(node)) {\n        return;\n      }\n\n      var $submenu = $item.children(\".\".concat(DX_SUBMENU_CLASS));\n      var isSubmenuRendered = $submenu.length;\n\n      _get(_getPrototypeOf(ContextMenu.prototype), \"_showSubmenu\", this).call(this, $item);\n\n      if (!isSubmenuRendered) {\n        this._renderSubmenuItems(node, $item);\n      }\n\n      if (!this._isSubmenuVisible($submenu)) {\n        this._drawSubmenu($item);\n      }\n    }\n  }, {\n    key: \"_hideSubmenusOnSameLevel\",\n    value: function _hideSubmenusOnSameLevel($item) {\n      var $expandedItems = $item.parent(\".\".concat(DX_MENU_ITEM_WRAPPER_CLASS)).siblings().find(\".\".concat(DX_MENU_ITEM_EXPANDED_CLASS));\n\n      if ($expandedItems.length) {\n        $expandedItems.removeClass(DX_MENU_ITEM_EXPANDED_CLASS);\n\n        this._hideSubmenu($expandedItems.find(\".\".concat(DX_SUBMENU_CLASS)));\n      }\n    }\n  }, {\n    key: \"_hideSubmenuGroup\",\n    value: function _hideSubmenuGroup($submenu) {\n      if (this._isSubmenuVisible($submenu)) {\n        this._hideSubmenuCore($submenu);\n      }\n    }\n  }, {\n    key: \"_isSubmenuVisible\",\n    value: function _isSubmenuVisible($submenu) {\n      return \"visible\" === $submenu.css(\"visibility\");\n    }\n  }, {\n    key: \"_drawSubmenu\",\n    value: function _drawSubmenu($itemElement) {\n      var animation = this.option(\"animation\") ? this.option(\"animation\").show : {};\n      var $submenu = $itemElement.children(\".\".concat(DX_SUBMENU_CLASS));\n\n      var submenuPosition = this._getSubmenuPosition($itemElement);\n\n      if (this._overlay && this._overlay.option(\"visible\")) {\n        if (!isDefined(this._shownSubmenus)) {\n          this._shownSubmenus = [];\n        }\n\n        if (inArray($submenu, this._shownSubmenus)) {\n          this._shownSubmenus.push($submenu);\n        }\n\n        if (animation) {\n          fx.stop($submenu);\n        }\n\n        animationPosition.setup($submenu, submenuPosition);\n\n        if (animation) {\n          if (isPlainObject(animation.to)) {\n            animation.to.position = submenuPosition;\n          }\n\n          this._animate($submenu, animation);\n        }\n\n        $submenu.css(\"visibility\", \"visible\");\n      }\n    }\n  }, {\n    key: \"_animate\",\n    value: function _animate($container, options) {\n      fx.animate($container, options);\n    }\n  }, {\n    key: \"_getSubmenuPosition\",\n    value: function _getSubmenuPosition($rootItem) {\n      var submenuDirection = this.option(\"submenuDirection\").toLowerCase();\n      var $rootItemWrapper = $rootItem.parent(\".\".concat(DX_MENU_ITEM_WRAPPER_CLASS));\n      var position = {\n        collision: \"flip\",\n        of: $rootItemWrapper,\n        offset: {\n          h: 0,\n          v: -1\n        }\n      };\n\n      switch (submenuDirection) {\n        case \"left\":\n          position.at = \"left top\";\n          position.my = \"right top\";\n          break;\n\n        case \"right\":\n          position.at = \"right top\";\n          position.my = \"left top\";\n          break;\n\n        default:\n          if (this.option(\"rtlEnabled\")) {\n            position.at = \"left top\";\n            position.my = \"right top\";\n          } else {\n            position.at = \"right top\";\n            position.my = \"left top\";\n          }\n\n      }\n\n      return position;\n    }\n  }, {\n    key: \"_updateSubmenuVisibilityOnClick\",\n    value: function _updateSubmenuVisibilityOnClick(actionArgs) {\n      if (!actionArgs.args.length) {\n        return;\n      }\n\n      var itemData = actionArgs.args[0].itemData;\n\n      var node = this._dataAdapter.getNodeByItem(itemData);\n\n      if (!node) {\n        return;\n      }\n\n      var $itemElement = $(actionArgs.args[0].itemElement);\n      var $submenu = $itemElement.find(\".\".concat(DX_SUBMENU_CLASS));\n      var shouldRenderSubmenu = this._hasSubmenu(node) && !$submenu.length;\n\n      if (shouldRenderSubmenu) {\n        this._renderSubmenuItems(node, $itemElement);\n\n        $submenu = $itemElement.find(\".\".concat(DX_SUBMENU_CLASS));\n      }\n\n      if ($itemElement.context === $submenu.context && \"visible\" === $submenu.css(\"visibility\")) {\n        return;\n      }\n\n      var notCloseMenuOnItemClick = itemData && false === itemData.closeMenuOnClick;\n\n      if (!itemData || itemData.disabled || notCloseMenuOnItemClick) {\n        return;\n      }\n\n      this._updateSelectedItemOnClick(actionArgs);\n\n      if (0 === $submenu.length) {\n        var $prevSubmenu = $($itemElement.parents(\".\".concat(DX_SUBMENU_CLASS))[0]);\n\n        this._hideSubmenu($prevSubmenu);\n\n        if (!actionArgs.canceled && this._overlay && this._overlay.option(\"visible\")) {\n          this.option(\"visible\", false);\n        }\n      } else {\n        if (this._shownSubmenus && this._shownSubmenus.length > 0) {\n          if (this._shownSubmenus[0].is($submenu)) {\n            this._hideSubmenu($submenu);\n          }\n        }\n\n        this._showSubmenu($itemElement);\n      }\n    }\n  }, {\n    key: \"_hideSubmenu\",\n    value: function _hideSubmenu($curSubmenu) {\n      var _this5 = this;\n\n      var shownSubmenus = extend([], this._shownSubmenus);\n      each(shownSubmenus, function (index, $submenu) {\n        if ($curSubmenu.is($submenu) || contains($curSubmenu[0], $submenu[0])) {\n          $submenu.parent().removeClass(DX_MENU_ITEM_EXPANDED_CLASS);\n\n          _this5._hideSubmenuCore($submenu);\n        }\n      });\n    }\n  }, {\n    key: \"_hideSubmenuCore\",\n    value: function _hideSubmenuCore($submenu) {\n      var index = inArray($submenu, this._shownSubmenus);\n      var animation = this.option(\"animation\") ? this.option(\"animation\").hide : null;\n\n      if (index >= 0) {\n        this._shownSubmenus.splice(index, 1);\n      }\n\n      this._stopAnimate($submenu);\n\n      animation && this._animate($submenu, animation);\n      $submenu.css(\"visibility\", \"hidden\");\n    }\n  }, {\n    key: \"_stopAnimate\",\n    value: function _stopAnimate($container) {\n      fx.stop($container, true);\n    }\n  }, {\n    key: \"_hideAllShownSubmenus\",\n    value: function _hideAllShownSubmenus() {\n      var _this6 = this;\n\n      var shownSubmenus = extend([], this._shownSubmenus);\n\n      var $expandedItems = this._overlay.$content().find(\".\".concat(DX_MENU_ITEM_EXPANDED_CLASS));\n\n      $expandedItems.removeClass(DX_MENU_ITEM_EXPANDED_CLASS);\n      each(shownSubmenus, function (_, $submenu) {\n        _this6._hideSubmenu($submenu);\n      });\n    }\n  }, {\n    key: \"_visibilityChanged\",\n    value: function _visibilityChanged(visible) {\n      if (visible) {\n        this._renderContentImpl();\n      }\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function _optionChanged(args) {\n      if (inArray(args.name, ACTIONS) > -1) {\n        this._initActions();\n\n        return;\n      }\n\n      switch (args.name) {\n        case \"visible\":\n          this._renderVisibility(args.value);\n\n          break;\n\n        case \"showEvent\":\n        case \"position\":\n        case \"submenuDirection\":\n          this._invalidate();\n\n          break;\n\n        case \"target\":\n          args.previousValue && this._detachShowContextMenuEvents(args.previousValue);\n\n          this._invalidate();\n\n          break;\n\n        case \"closeOnOutsideClick\":\n          break;\n\n        default:\n          _get(_getPrototypeOf(ContextMenu.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }, {\n    key: \"_renderVisibility\",\n    value: function _renderVisibility(showing) {\n      return showing ? this._show() : this._hide();\n    }\n  }, {\n    key: \"_toggleVisibility\",\n    value: function _toggleVisibility() {}\n  }, {\n    key: \"_show\",\n    value: function _show(event) {\n      var args = {\n        jQEvent: event\n      };\n      var promise = new Deferred().reject().promise();\n\n      this._actions.onShowing(args);\n\n      if (args.cancel) {\n        return promise;\n      }\n\n      var position = this._positionContextMenu(event);\n\n      if (position) {\n        var _event$originalEvent;\n\n        if (!this._overlay) {\n          this._renderContextMenuOverlay();\n\n          this._overlay.$content().addClass(this._widgetClass());\n\n          this._renderFocusState();\n\n          this._attachHoverEvents();\n\n          this._attachClickEvent();\n\n          this._renderItems(this._dataAdapter.getRootNodes());\n        }\n\n        this._setOptionWithoutOptionChange(\"visible\", true);\n\n        this._overlay.option(\"position\", position);\n\n        promise = this._overlay.show();\n        event && event.stopPropagation();\n\n        this._setAriaAttributes();\n\n        if ((null === event || void 0 === event ? void 0 : null === (_event$originalEvent = event.originalEvent) || void 0 === _event$originalEvent ? void 0 : _event$originalEvent.type) === holdEvent.name) {\n          this.preventShowingDefaultContextMenuAboveOverlay();\n        }\n      }\n\n      return promise;\n    }\n  }, {\n    key: \"_setAriaAttributes\",\n    value: function _setAriaAttributes() {\n      this._overlayContentId = \"dx-\".concat(new Guid());\n      this.setAria(\"owns\", this._overlayContentId);\n      this.setAria({\n        id: this._overlayContentId,\n        role: \"menu\"\n      }, this._overlay.$content());\n    }\n  }, {\n    key: \"_cleanAriaAttributes\",\n    value: function _cleanAriaAttributes() {\n      this._overlay && this.setAria(\"id\", null, this._overlay.$content());\n      this.setAria(\"owns\", void 0);\n    }\n  }, {\n    key: \"_getTarget\",\n    value: function _getTarget() {\n      return this.option(\"target\") || this.option(\"position\").of || $(domAdapter.getDocument());\n    }\n  }, {\n    key: \"_getContextMenuPosition\",\n    value: function _getContextMenuPosition() {\n      return extend({}, this.option(\"position\"), {\n        of: this._getTarget()\n      });\n    }\n  }, {\n    key: \"_positionContextMenu\",\n    value: function _positionContextMenu(jQEvent) {\n      var position = this._getContextMenuPosition();\n\n      var isInitialPosition = this._isInitialOptionValue(\"position\");\n\n      var positioningAction = this._createActionByOption(\"onPositioning\", actionArgs);\n\n      if (jQEvent && jQEvent.preventDefault && isInitialPosition) {\n        position.of = jQEvent;\n      }\n\n      var actionArgs = {\n        position: position,\n        event: jQEvent\n      };\n      positioningAction(actionArgs);\n\n      if (actionArgs.cancel) {\n        position = null;\n      } else if (actionArgs.event) {\n        actionArgs.event.cancel = true;\n        jQEvent.preventDefault();\n      }\n\n      return position;\n    }\n  }, {\n    key: \"_refresh\",\n    value: function _refresh() {\n      if (!hasWindow()) {\n        _get(_getPrototypeOf(ContextMenu.prototype), \"_refresh\", this).call(this);\n      } else if (this._overlay) {\n        var lastPosition = this._overlay.option(\"position\");\n\n        _get(_getPrototypeOf(ContextMenu.prototype), \"_refresh\", this).call(this);\n\n        this._overlay && this._overlay.option(\"position\", lastPosition);\n      } else {\n        _get(_getPrototypeOf(ContextMenu.prototype), \"_refresh\", this).call(this);\n      }\n    }\n  }, {\n    key: \"_hide\",\n    value: function _hide() {\n      var promise;\n\n      if (this._overlay) {\n        promise = this._overlay.hide();\n\n        this._setOptionWithoutOptionChange(\"visible\", false);\n      }\n\n      this._cleanAriaAttributes();\n\n      this.option(\"focusedElement\", null);\n      return promise || new Deferred().reject().promise();\n    }\n  }, {\n    key: \"toggle\",\n    value: function toggle(showing) {\n      var visible = this.option(\"visible\");\n      showing = void 0 === showing ? !visible : showing;\n      return this._renderVisibility(showing);\n    }\n  }, {\n    key: \"show\",\n    value: function show() {\n      return this.toggle(true);\n    }\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      return this.toggle(false);\n    }\n  }]);\n\n  return ContextMenu;\n}(MenuBase);\n\nregisterComponent(\"dxContextMenu\", ContextMenu);\nexport default ContextMenu;","map":null,"metadata":{},"sourceType":"module"}