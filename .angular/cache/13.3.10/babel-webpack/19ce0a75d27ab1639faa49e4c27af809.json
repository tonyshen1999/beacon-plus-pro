{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/date_box/ui.date_box.strategy.calendar.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport Calendar from \"../calendar\";\nimport DateBoxStrategy from \"./ui.date_box.strategy\";\nimport dateUtils from \"../../core/utils/date\";\nimport { splitPair } from \"../../core/utils/common\";\nimport { isFunction, isEmptyObject } from \"../../core/utils/type\";\nimport { extend } from \"../../core/utils/extend\";\nimport messageLocalization from \"../../localization/message\";\nvar CalendarStrategy = DateBoxStrategy.inherit({\n  NAME: \"Calendar\",\n  supportedKeys: function supportedKeys() {\n    var homeEndHandler = function homeEndHandler(e) {\n      if (this.option(\"opened\")) {\n        e.preventDefault();\n        return true;\n      }\n\n      return false;\n    };\n\n    return {\n      rightArrow: function rightArrow() {\n        if (this.option(\"opened\")) {\n          return true;\n        }\n      },\n      leftArrow: function leftArrow() {\n        if (this.option(\"opened\")) {\n          return true;\n        }\n      },\n      enter: function (e) {\n        if (this.dateBox.option(\"opened\")) {\n          e.preventDefault();\n\n          if (this._widget.option(\"zoomLevel\") === this._widget.option(\"maxZoomLevel\")) {\n            var viewValue = this._getContouredValue();\n\n            var lastActionElement = this._lastActionElement;\n\n            var shouldCloseDropDown = this._closeDropDownByEnter();\n\n            if (shouldCloseDropDown && viewValue && \"calendar\" === lastActionElement) {\n              this.dateBoxValue(viewValue, e);\n            }\n\n            shouldCloseDropDown && this.dateBox.close();\n\n            this.dateBox._valueChangeEventHandler(e);\n\n            return !shouldCloseDropDown;\n          } else {\n            return true;\n          }\n        } else {\n          this.dateBox._valueChangeEventHandler(e);\n        }\n      }.bind(this),\n      home: homeEndHandler,\n      end: homeEndHandler\n    };\n  },\n  getDisplayFormat: function getDisplayFormat(displayFormat) {\n    return displayFormat || \"shortdate\";\n  },\n  _closeDropDownByEnter: function _closeDropDownByEnter() {\n    return true;\n  },\n  _getWidgetName: function _getWidgetName() {\n    return Calendar;\n  },\n  _getContouredValue: function _getContouredValue() {\n    return this._widget._view.option(\"contouredDate\");\n  },\n  getKeyboardListener: function getKeyboardListener() {\n    return this._widget;\n  },\n  _getWidgetOptions: function _getWidgetOptions() {\n    var disabledDates = this.dateBox.option(\"disabledDates\");\n    return extend(this.dateBox.option(\"calendarOptions\"), {\n      value: this.dateBoxValue() || null,\n      dateSerializationFormat: null,\n      min: this.dateBox.dateOption(\"min\"),\n      max: this.dateBox.dateOption(\"max\"),\n      onValueChanged: this._valueChangedHandler.bind(this),\n      onCellClick: this._cellClickHandler.bind(this),\n      tabIndex: null,\n      disabledDates: isFunction(disabledDates) ? this._injectComponent(disabledDates.bind(this.dateBox)) : disabledDates,\n      onContouredChanged: this._refreshActiveDescendant.bind(this),\n      skipFocusCheck: true\n    });\n  },\n  _injectComponent: function _injectComponent(func) {\n    var that = this;\n    return function (params) {\n      extend(params, {\n        component: that.dateBox\n      });\n      return func(params);\n    };\n  },\n  _refreshActiveDescendant: function _refreshActiveDescendant(e) {\n    this._lastActionElement = \"calendar\";\n    this.dateBox.setAria(\"activedescendant\", e.actionValue);\n  },\n  popupConfig: function popupConfig(_popupConfig) {\n    var _this = this;\n\n    var toolbarItems = _popupConfig.toolbarItems;\n    var buttonsLocation = this.dateBox.option(\"buttonsLocation\");\n    var position = [];\n\n    if (\"default\" !== buttonsLocation) {\n      position = splitPair(buttonsLocation);\n    } else {\n      position = [\"bottom\", \"center\"];\n    }\n\n    if (\"useButtons\" === this.dateBox.option(\"applyValueMode\") && this._isCalendarVisible()) {\n      toolbarItems.unshift({\n        widget: \"dxButton\",\n        toolbar: position[0],\n        location: \"after\" === position[1] ? \"before\" : position[1],\n        options: {\n          onInitialized: function (e) {\n            e.component.registerKeyHandler(\"escape\", this._escapeHandler.bind(this));\n          }.bind(this),\n          onClick: function onClick(args) {\n            _this._widget._toTodayView(args);\n          },\n          text: messageLocalization.format(\"dxCalendar-todayButtonText\"),\n          type: \"today\"\n        }\n      });\n    }\n\n    return extend(true, _popupConfig, {\n      toolbarItems: toolbarItems,\n      position: {\n        collision: \"flipfit flip\"\n      },\n      width: \"auto\"\n    });\n  },\n  _isCalendarVisible: function _isCalendarVisible() {\n    return isEmptyObject(this.dateBox.option(\"calendarOptions\")) || false !== this.dateBox.option(\"calendarOptions.visible\");\n  },\n  _escapeHandler: function _escapeHandler() {\n    this.dateBox.close();\n    this.dateBox.focus();\n  },\n  _valueChangedHandler: function _valueChangedHandler(e) {\n    var dateBox = this.dateBox;\n    var value = e.value;\n    var prevValue = e.previousValue;\n\n    if (dateUtils.sameDate(value, prevValue)) {\n      return;\n    }\n\n    if (\"instantly\" === dateBox.option(\"applyValueMode\")) {\n      this.dateBoxValue(this.getValue(), e.event);\n    }\n  },\n  _updateValue: function _updateValue() {\n    if (!this._widget) {\n      return;\n    }\n\n    this._widget.option(\"value\", this.dateBoxValue());\n  },\n  textChangedHandler: function textChangedHandler() {\n    this._lastActionElement = \"input\";\n\n    if (this.dateBox.option(\"opened\") && this._widget) {\n      this._updateValue(true);\n    }\n  },\n  _cellClickHandler: function _cellClickHandler(e) {\n    var dateBox = this.dateBox;\n\n    if (\"instantly\" === dateBox.option(\"applyValueMode\")) {\n      dateBox.option(\"opened\", false);\n      this.dateBoxValue(this.getValue(), e.event);\n    }\n  }\n});\nexport default CalendarStrategy;","map":null,"metadata":{},"sourceType":"module"}