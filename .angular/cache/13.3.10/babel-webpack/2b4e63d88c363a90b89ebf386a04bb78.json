{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.command_manager.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { extend } from \"../../core/utils/extend\";\nimport { each } from \"../../core/utils/iterator\";\nimport { isString } from \"../../core/utils/type\";\nimport messageLocalization from \"../../localization/message\";\nexport var defaultPermissions = {\n  create: false,\n  copy: false,\n  move: false,\n  delete: false,\n  rename: false,\n  upload: false,\n  download: false\n};\nexport var FileManagerCommandManager = /*#__PURE__*/function () {\n  function FileManagerCommandManager(permissions) {\n    _classCallCheck(this, FileManagerCommandManager);\n\n    this._actions = {};\n    this._permissions = permissions || {};\n\n    this._initCommands();\n  }\n\n  _createClass(FileManagerCommandManager, [{\n    key: \"_initCommands\",\n    value: function _initCommands() {\n      var _this = this;\n\n      this._commands = [{\n        name: \"create\",\n        text: messageLocalization.format(\"dxFileManager-commandCreate\"),\n        icon: \"newfolder\",\n        enabled: this._permissions.create,\n        noFileItemRequired: true\n      }, {\n        name: \"rename\",\n        text: messageLocalization.format(\"dxFileManager-commandRename\"),\n        icon: \"rename\",\n        enabled: this._permissions.rename,\n        isSingleFileItemCommand: true\n      }, {\n        name: \"move\",\n        text: messageLocalization.format(\"dxFileManager-commandMove\"),\n        icon: \"movetofolder\",\n        enabled: this._permissions.move\n      }, {\n        name: \"copy\",\n        text: messageLocalization.format(\"dxFileManager-commandCopy\"),\n        icon: \"copy\",\n        enabled: this._permissions.copy\n      }, {\n        name: \"delete\",\n        text: messageLocalization.format(\"dxFileManager-commandDelete\"),\n        icon: \"trash\",\n        enabled: this._permissions.delete\n      }, {\n        name: \"download\",\n        text: messageLocalization.format(\"dxFileManager-commandDownload\"),\n        icon: \"download\",\n        enabled: this._permissions.download\n      }, {\n        name: \"upload\",\n        text: messageLocalization.format(\"dxFileManager-commandUpload\"),\n        icon: \"upload\",\n        enabled: this._permissions.upload,\n        noFileItemRequired: true\n      }, {\n        name: \"refresh\",\n        text: messageLocalization.format(\"dxFileManager-commandRefresh\"),\n        icon: \"dx-filemanager-i dx-filemanager-i-refresh\",\n        enabled: true,\n        noFileItemRequired: true\n      }, {\n        name: \"thumbnails\",\n        text: messageLocalization.format(\"dxFileManager-commandThumbnails\"),\n        icon: \"mediumiconslayout\",\n        enabled: true,\n        noFileItemRequired: true\n      }, {\n        name: \"details\",\n        text: messageLocalization.format(\"dxFileManager-commandDetails\"),\n        icon: \"detailslayout\",\n        enabled: true,\n        noFileItemRequired: true\n      }, {\n        name: \"clearSelection\",\n        text: messageLocalization.format(\"dxFileManager-commandClearSelection\"),\n        icon: \"remove\",\n        enabled: true\n      }, {\n        name: \"showNavPane\",\n        hint: messageLocalization.format(\"dxFileManager-commandShowNavPane\"),\n        icon: \"menu\",\n        enabled: false,\n        noFileItemRequired: true\n      }];\n      this._commandMap = {};\n\n      this._commands.forEach(function (command) {\n        _this._commandMap[command.name] = command;\n      });\n    }\n  }, {\n    key: \"registerActions\",\n    value: function registerActions(actions) {\n      this._actions = extend(this._actions, actions);\n    }\n  }, {\n    key: \"executeCommand\",\n    value: function executeCommand(command, arg) {\n      var commandName = isString(command) ? command : command.name;\n      var action = this._actions[commandName];\n\n      if (action) {\n        return action(arg);\n      }\n    }\n  }, {\n    key: \"updatePermissions\",\n    value: function updatePermissions(permissions) {\n      var _this2 = this;\n\n      var resultPermissions = extend({}, defaultPermissions, permissions);\n      this._permissions = resultPermissions;\n      each(this._permissions, function (permission) {\n        _this2._commandMap[permission].enabled = _this2._permissions[permission];\n      });\n    }\n  }, {\n    key: \"setCommandEnabled\",\n    value: function setCommandEnabled(commandName, enabled) {\n      var command = this.getCommandByName(commandName);\n\n      if (command) {\n        command.enabled = enabled;\n      }\n    }\n  }, {\n    key: \"getCommandByName\",\n    value: function getCommandByName(name) {\n      return this._commandMap[name];\n    }\n  }, {\n    key: \"isCommandAvailable\",\n    value: function isCommandAvailable(commandName, itemInfos) {\n      var command = this.getCommandByName(commandName);\n\n      if (!command || !command.enabled) {\n        return false;\n      }\n\n      if (command.noFileItemRequired) {\n        return true;\n      }\n\n      var itemsLength = itemInfos && itemInfos.length || 0;\n\n      if (0 === itemsLength || itemInfos.some(function (item) {\n        return item.fileItem.isRoot() || item.fileItem.isParentFolder;\n      })) {\n        return false;\n      }\n\n      if (\"download\" === commandName) {\n        return itemInfos.every(function (itemInfo) {\n          return !itemInfo.fileItem.isDirectory;\n        });\n      }\n\n      return !command.isSingleFileItemCommand || 1 === itemsLength;\n    }\n  }]);\n\n  return FileManagerCommandManager;\n}();","map":null,"metadata":{},"sourceType":"module"}