{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.sorting_mixin.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { isDefined } from \"../../core/utils/type\";\nimport $ from \"../../core/renderer\";\nvar SORT_CLASS = \"dx-sort\";\nvar SORT_NONE_CLASS = \"dx-sort-none\";\nvar SORTUP_CLASS = \"dx-sort-up\";\nvar SORTDOWN_CLASS = \"dx-sort-down\";\nvar SORT_INDEX_CLASS = \"dx-sort-index\";\nvar SORT_INDEX_ICON_CLASS = \"dx-sort-index-icon\";\nvar HEADERS_ACTION_CLASS = \"action\";\nexport default {\n  _applyColumnState: function _applyColumnState(options) {\n    var ariaSortState;\n    var $sortIndicator;\n    var sortingMode = this.option(\"sorting.mode\");\n    var rootElement = options.rootElement;\n    var column = options.column;\n\n    var $indicatorsContainer = this._getIndicatorContainer(rootElement);\n\n    if (\"sort\" === options.name) {\n      rootElement.find(\".\" + SORT_CLASS).remove();\n      !$indicatorsContainer.children().length && $indicatorsContainer.remove();\n      var isSortingAllowed = \"none\" !== sortingMode && column.allowSorting;\n\n      if (!isDefined(column.groupIndex) && (isSortingAllowed || isDefined(column.sortOrder))) {\n        ariaSortState = \"asc\" === column.sortOrder ? \"ascending\" : \"descending\";\n        $sortIndicator = this.callBase(options).toggleClass(SORTUP_CLASS, \"asc\" === column.sortOrder).toggleClass(SORTDOWN_CLASS, \"desc\" === column.sortOrder);\n        var hasSeveralSortIndexes = this.getController && !!this.getController(\"columns\").columnOption(\"sortIndex:1\");\n\n        if (hasSeveralSortIndexes && this.option(\"sorting.showSortIndexes\") && column.sortIndex >= 0) {\n          $(\"<span>\").addClass(SORT_INDEX_ICON_CLASS).text(column.sortIndex + 1).appendTo($sortIndicator);\n          $sortIndicator.addClass(SORT_INDEX_CLASS);\n        }\n\n        if (isSortingAllowed) {\n          options.rootElement.addClass(this.addWidgetPrefix(HEADERS_ACTION_CLASS));\n        }\n      }\n\n      if (!isDefined(column.sortOrder)) {\n        this.setAria(\"sort\", \"none\", rootElement);\n      } else {\n        this.setAria(\"sort\", ariaSortState, rootElement);\n      }\n\n      return $sortIndicator;\n    } else {\n      return this.callBase(options);\n    }\n  },\n  _getIndicatorClassName: function _getIndicatorClassName(name) {\n    if (\"sort\" === name) {\n      return SORT_CLASS;\n    } else if (\"sortIndex\" === name) {\n      return SORT_INDEX_ICON_CLASS;\n    }\n\n    return this.callBase(name);\n  },\n  _renderIndicator: function _renderIndicator(options) {\n    var column = options.column;\n    var $container = options.container;\n    var $indicator = options.indicator;\n\n    if (\"sort\" === options.name) {\n      var rtlEnabled = this.option(\"rtlEnabled\");\n\n      if (!isDefined(column.sortOrder)) {\n        $indicator && $indicator.addClass(SORT_NONE_CLASS);\n      }\n\n      if ($container.children().length && (!rtlEnabled && \"left\" === options.columnAlignment || rtlEnabled && \"right\" === options.columnAlignment)) {\n        $container.prepend($indicator);\n        return;\n      }\n    }\n\n    this.callBase(options);\n  },\n  _updateIndicator: function _updateIndicator($cell, column, indicatorName) {\n    if (\"sort\" === indicatorName && isDefined(column.groupIndex)) {\n      return;\n    }\n\n    return this.callBase.apply(this, arguments);\n  },\n  _getIndicatorElements: function _getIndicatorElements($cell, returnAll) {\n    var $indicatorElements = this.callBase($cell);\n    return returnAll ? $indicatorElements : $indicatorElements && $indicatorElements.not(\".\" + SORT_NONE_CLASS);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}