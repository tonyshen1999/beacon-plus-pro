{"ast":null,"code":"import _toConsumableArray from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n\n/**\r\n * DevExtreme (esm/ui/pivot_grid/ui.pivot_grid.export.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport Class from \"../../core/class\";\nimport { isDefined } from \"../../core/utils/type\";\nimport { extend } from \"../../core/utils/extend\";\nimport { each } from \"../../core/utils/iterator\";\nimport { hasWindow } from \"../../core/utils/window\";\nimport { getDefaultAlignment } from \"../../core/utils/position\";\nimport formatHelper from \"../../format_helper\";\nimport localizationNumber from \"../../localization/number\";\nimport { excel as excelExporter, export as exportMethod } from \"../../exporter\";\nimport exportMixin from \"../grid_core/ui.grid_core.export_mixin\";\nimport { when, Deferred } from \"../../core/utils/deferred\";\nvar DEFAULT_DATA_TYPE = \"string\";\nvar DEFAUL_COLUMN_WIDTH = 100;\nexport var ExportController = extend({}, exportMixin, {\n  exportToExcel: function exportToExcel() {\n    exportMethod(this.getDataProvider(), {\n      fileName: this.option(\"export.fileName\"),\n      proxyUrl: this.option(\"export.proxyUrl\"),\n      format: \"EXCEL\",\n      rtlEnabled: this.option(\"rtlEnabled\"),\n      ignoreErrors: this.option(\"export.ignoreExcelErrors\"),\n      exportingAction: this._actions.onExporting,\n      exportedAction: this._actions.onExported,\n      fileSavingAction: this._actions.onFileSaving\n    }, excelExporter.getData);\n  },\n  _getLength: function _getLength(items) {\n    var i;\n    var itemCount = items[0].length;\n    var cellCount = 0;\n\n    for (i = 0; i < itemCount; i++) {\n      cellCount += items[0][i].colspan || 1;\n    }\n\n    return cellCount;\n  },\n  _correctCellsInfoItemLengths: function _correctCellsInfoItemLengths(cellsInfo, expectedLength) {\n    for (var i = 0; i < cellsInfo.length; i++) {\n      while (cellsInfo[i].length < expectedLength) {\n        cellsInfo[i].push({});\n      }\n    }\n\n    return cellsInfo;\n  },\n  _calculateCellInfoItemLength: function _calculateCellInfoItemLength(columnsRow) {\n    var result = 0;\n\n    for (var columnIndex = 0; columnIndex < columnsRow.length; columnIndex++) {\n      result += isDefined(columnsRow[columnIndex].colspan) ? columnsRow[columnIndex].colspan : 1;\n    }\n\n    return result;\n  },\n  _getAllItems: function _getAllItems(columnsInfo, rowsInfoItems, cellsInfo) {\n    var cellIndex;\n    var rowIndex;\n    var correctedCellsInfo = cellsInfo;\n\n    var rowsLength = this._getLength(rowsInfoItems);\n\n    var headerRowsCount = columnsInfo.length;\n\n    if (columnsInfo.length > 0 && columnsInfo[0].length > 0 && cellsInfo.length > 0 && 0 === cellsInfo[0].length) {\n      var cellInfoItemLength = this._calculateCellInfoItemLength(columnsInfo[0]);\n\n      if (cellInfoItemLength > 0) {\n        correctedCellsInfo = this._correctCellsInfoItemLengths(cellsInfo, cellInfoItemLength);\n      }\n    }\n\n    var sourceItems = columnsInfo.concat(correctedCellsInfo);\n\n    for (rowIndex = 0; rowIndex < rowsInfoItems.length; rowIndex++) {\n      for (cellIndex = rowsInfoItems[rowIndex].length - 1; cellIndex >= 0; cellIndex--) {\n        if (!isDefined(sourceItems[rowIndex + headerRowsCount])) {\n          sourceItems[rowIndex + headerRowsCount] = [];\n        }\n\n        sourceItems[rowIndex + headerRowsCount].splice(0, 0, extend({}, rowsInfoItems[rowIndex][cellIndex]));\n      }\n    }\n\n    sourceItems[0].splice(0, 0, extend({}, this._getEmptyCell(), {\n      alignment: getDefaultAlignment(this._options.rtlEnabled),\n      colspan: rowsLength,\n      rowspan: headerRowsCount\n    }));\n    return this._prepareItems(sourceItems);\n  },\n  getDataProvider: function getDataProvider() {\n    return new DataProvider(this);\n  }\n});\nexport var DataProvider = Class.inherit({\n  ctor: function ctor(exportController) {\n    this._exportController = exportController;\n  },\n  ready: function ready() {\n    this._initOptions();\n\n    var options = this._options;\n    return when(options.items).done(function (items) {\n      var headerSize = items[0][0].rowspan;\n      var columns = items[headerSize - 1];\n      each(columns, function (columnIndex, column) {\n        column.width = DEFAUL_COLUMN_WIDTH;\n      });\n      options.columns = columns;\n      options.items = items;\n    });\n  },\n  _initOptions: function _initOptions() {\n    var exportController = this._exportController;\n    var dataController = exportController._dataController;\n    var items = new Deferred();\n    dataController.beginLoading();\n    setTimeout(function () {\n      var columnsInfo = extend(true, [], dataController.getColumnsInfo(true));\n      var rowsInfoItems = extend(true, [], dataController.getRowsInfo(true));\n      var cellsInfo = dataController.getCellsInfo(true);\n      items.resolve(exportController._getAllItems(columnsInfo, rowsInfoItems, cellsInfo));\n      dataController.endLoading();\n    });\n    this._options = {\n      items: items,\n      rtlEnabled: exportController.option(\"rtlEnabled\"),\n      dataFields: exportController.getDataSource().getAreaFields(\"data\"),\n      customizeExcelCell: exportController.option(\"export.customizeExcelCell\"),\n      rowsArea: exportController._rowsArea,\n      columnsArea: exportController._columnsArea\n    };\n  },\n  getColumns: function getColumns() {\n    return this._options.columns;\n  },\n  getColumnsWidths: function getColumnsWidths() {\n    var colsArea = this._options.columnsArea;\n    var rowsArea = this._options.rowsArea;\n    var columns = this._options.columns;\n    var useDefaultWidth = !hasWindow() || \"virtual\" === colsArea.option(\"scrolling.mode\") || colsArea.element().is(\":hidden\");\n    return useDefaultWidth ? columns.map(function (_) {\n      return DEFAUL_COLUMN_WIDTH;\n    }) : rowsArea.getColumnsWidth().concat(colsArea.getColumnsWidth());\n  },\n  getRowsCount: function getRowsCount() {\n    return this._options.items.length;\n  },\n  getGroupLevel: function getGroupLevel() {\n    return 0;\n  },\n  getCellMerging: function getCellMerging(rowIndex, cellIndex) {\n    var items = this._options.items;\n    var item = items[rowIndex] && items[rowIndex][cellIndex];\n    return item ? {\n      colspan: item.colspan - 1,\n      rowspan: item.rowspan - 1\n    } : {\n      colspan: 0,\n      rowspan: 0\n    };\n  },\n  getFrozenArea: function getFrozenArea() {\n    return {\n      x: this.getRowAreaColCount(),\n      y: this.getColumnAreaRowCount()\n    };\n  },\n  getCellType: function getCellType(rowIndex, cellIndex) {\n    var style = this.getStyles()[this.getStyleId(rowIndex, cellIndex)];\n    return style && style.dataType || \"string\";\n  },\n  getCellData: function getCellData(rowIndex, cellIndex, isExcelJS) {\n    var result = {};\n    var items = this._options.items;\n    var item = items[rowIndex] && items[rowIndex][cellIndex] || {};\n\n    if (isExcelJS) {\n      result.cellSourceData = item;\n\n      var areaName = this._tryGetAreaName(item, rowIndex, cellIndex);\n\n      if (areaName) {\n        result.cellSourceData.area = areaName;\n      }\n\n      result.cellSourceData.rowIndex = rowIndex;\n      result.cellSourceData.columnIndex = cellIndex;\n    }\n\n    if (\"string\" === this.getCellType(rowIndex, cellIndex)) {\n      result.value = item.text;\n    } else {\n      result.value = item.value;\n    }\n\n    if (result.cellSourceData && result.cellSourceData.isWhiteSpace) {\n      result.value = \"\";\n    }\n\n    return result;\n  },\n  _tryGetAreaName: function _tryGetAreaName(item, rowIndex, cellIndex) {\n    if (this.isColumnAreaCell(rowIndex, cellIndex)) {\n      return \"column\";\n    } else if (this.isRowAreaCell(rowIndex, cellIndex)) {\n      return \"row\";\n    } else if (isDefined(item.dataIndex)) {\n      return \"data\";\n    }\n  },\n  isRowAreaCell: function isRowAreaCell(rowIndex, cellIndex) {\n    return rowIndex >= this.getColumnAreaRowCount() && cellIndex < this.getRowAreaColCount();\n  },\n  isColumnAreaCell: function isColumnAreaCell(rowIndex, cellIndex) {\n    return cellIndex >= this.getRowAreaColCount() && rowIndex < this.getColumnAreaRowCount();\n  },\n  getColumnAreaRowCount: function getColumnAreaRowCount() {\n    return this._options.items[0][0].rowspan;\n  },\n  getRowAreaColCount: function getRowAreaColCount() {\n    return this._options.items[0][0].colspan;\n  },\n  getHeaderStyles: function getHeaderStyles() {\n    return [{\n      alignment: \"center\",\n      dataType: \"string\"\n    }, {\n      alignment: getDefaultAlignment(this._options.rtlEnabled),\n      dataType: \"string\"\n    }];\n  },\n  getDataFieldStyles: function getDataFieldStyles() {\n    var _this = this;\n\n    var dataFields = this._options.dataFields;\n    var dataItemStyle = {\n      alignment: this._options.rtlEnabled ? \"left\" : \"right\"\n    };\n    var dataFieldStyles = [];\n\n    if (dataFields.length) {\n      dataFields.forEach(function (dataField) {\n        dataFieldStyles.push(_extends({}, dataItemStyle, {\n          format: dataField.format,\n          dataType: _this.getCellDataType(dataField)\n        }));\n      });\n      return dataFieldStyles;\n    }\n\n    return [dataItemStyle];\n  },\n  getStyles: function getStyles() {\n    if (this._styles) {\n      return this._styles;\n    }\n\n    this._styles = [].concat(_toConsumableArray(this.getHeaderStyles()), _toConsumableArray(this.getDataFieldStyles()));\n    return this._styles;\n  },\n  getCellDataType: function getCellDataType(field) {\n    if (field && field.customizeText) {\n      return \"string\";\n    }\n\n    if (field.dataType) {\n      return field.dataType;\n    }\n\n    if (field.format) {\n      if (1 === localizationNumber.parse(formatHelper.format(1, field.format))) {\n        return \"number\";\n      }\n\n      if (formatHelper.format(new Date(), field.format)) {\n        return \"date\";\n      }\n    }\n\n    return DEFAULT_DATA_TYPE;\n  },\n  getStyleId: function getStyleId(rowIndex, cellIndex) {\n    var items = this._options.items;\n    var item = items[rowIndex] && items[rowIndex][cellIndex] || {};\n\n    if (0 === cellIndex && 0 === rowIndex || this.isColumnAreaCell(rowIndex, cellIndex)) {\n      return 0;\n    } else if (this.isRowAreaCell(rowIndex, cellIndex)) {\n      return 1;\n    }\n\n    return this.getHeaderStyles().length + (item.dataIndex || 0);\n  },\n  hasCustomizeExcelCell: function hasCustomizeExcelCell() {\n    return isDefined(this._options.customizeExcelCell);\n  },\n  customizeExcelCell: function customizeExcelCell(e) {\n    if (this._options.customizeExcelCell) {\n      this._options.customizeExcelCell(e);\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"module"}