{"ast":null,"code":"/**\r\n * DevExtreme (esm/core/utils/dom.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport domAdapter from \"../../core/dom_adapter\";\nimport $ from \"../../core/renderer\";\nimport { each } from \"./iterator\";\nimport { isDefined, isRenderer, isWindow } from \"./type\";\nimport { getWindow } from \"./window\";\nvar window = getWindow();\nexport var resetActiveElement = function resetActiveElement() {\n  var activeElement = domAdapter.getActiveElement();\n\n  if (activeElement && activeElement !== domAdapter.getBody()) {\n    var _activeElement$blur;\n\n    null === (_activeElement$blur = activeElement.blur) || void 0 === _activeElement$blur ? void 0 : _activeElement$blur.call(activeElement);\n  }\n};\nexport var clearSelection = function clearSelection() {\n  var selection = window.getSelection();\n\n  if (!selection) {\n    return;\n  }\n\n  if (\"Caret\" === selection.type) {\n    return;\n  }\n\n  if (selection.empty) {\n    selection.empty();\n  } else if (selection.removeAllRanges) {\n    try {\n      selection.removeAllRanges();\n    } catch (e) {}\n  }\n};\nexport var closestCommonParent = function closestCommonParent(startTarget, endTarget) {\n  var $startTarget = $(startTarget);\n  var $endTarget = $(endTarget);\n\n  if ($startTarget[0] === $endTarget[0]) {\n    return $startTarget[0];\n  }\n\n  var $startParents = $startTarget.parents();\n  var $endParents = $endTarget.parents();\n  var startingParent = Math.min($startParents.length, $endParents.length);\n\n  for (var i = -startingParent; i < 0; i++) {\n    if ($startParents.get(i) === $endParents.get(i)) {\n      return $startParents.get(i);\n    }\n  }\n};\nexport var extractTemplateMarkup = function extractTemplateMarkup(element) {\n  element = $(element);\n  var templateTag = element.length && element.filter(function () {\n    var $node = $(this);\n    return $node.is(\"script[type]\") && $node.attr(\"type\").indexOf(\"script\") < 0;\n  });\n\n  if (templateTag.length) {\n    return templateTag.eq(0).html();\n  } else {\n    element = $(\"<div>\").append(element);\n    return element.html();\n  }\n};\nexport var normalizeTemplateElement = function normalizeTemplateElement(element) {\n  var $element = isDefined(element) && (element.nodeType || isRenderer(element)) ? $(element) : $(\"<div>\").html(element).contents();\n\n  if (1 === $element.length) {\n    if ($element.is(\"script\")) {\n      $element = normalizeTemplateElement($element.html().trim());\n    } else if ($element.is(\"table\")) {\n      $element = $element.children(\"tbody\").contents();\n    }\n  }\n\n  return $element;\n};\nexport var clipboardText = function clipboardText(event, text) {\n  var clipboard = event.originalEvent && event.originalEvent.clipboardData || window.clipboardData;\n\n  if (!text) {\n    return clipboard && clipboard.getData(\"Text\");\n  }\n\n  clipboard && clipboard.setData(\"Text\", text);\n};\nexport var contains = function contains(container, element) {\n  if (!element) {\n    return false;\n  }\n\n  if (domAdapter.isTextNode(element)) {\n    element = element.parentNode;\n  }\n\n  if (domAdapter.isDocument(container)) {\n    return container.documentElement.contains(element);\n  }\n\n  if (isWindow(container)) {\n    return contains(container.document, element);\n  }\n\n  return container.contains ? container.contains(element) : !!(element.compareDocumentPosition(container) & element.DOCUMENT_POSITION_CONTAINS);\n};\nexport var createTextElementHiddenCopy = function createTextElementHiddenCopy(element, text, options) {\n  var elementStyles = window.getComputedStyle($(element).get(0));\n  var includePaddings = options && options.includePaddings;\n  return $(\"<div>\").text(text).css({\n    fontStyle: elementStyles.fontStyle,\n    fontVariant: elementStyles.fontVariant,\n    fontWeight: elementStyles.fontWeight,\n    fontSize: elementStyles.fontSize,\n    fontFamily: elementStyles.fontFamily,\n    letterSpacing: elementStyles.letterSpacing,\n    border: elementStyles.border,\n    paddingTop: includePaddings ? elementStyles.paddingTop : \"\",\n    paddingRight: includePaddings ? elementStyles.paddingRight : \"\",\n    paddingBottom: includePaddings ? elementStyles.paddingBottom : \"\",\n    paddingLeft: includePaddings ? elementStyles.paddingLeft : \"\",\n    visibility: \"hidden\",\n    whiteSpace: \"pre\",\n    position: \"absolute\",\n    float: \"left\"\n  });\n};\nexport var insertBefore = function insertBefore(element, newElement) {\n  if (newElement) {\n    domAdapter.insertElement(element.parentNode, newElement, element);\n  }\n\n  return element;\n};\nexport var replaceWith = function replaceWith(element, newElement) {\n  if (!(newElement && newElement[0])) {\n    return;\n  }\n\n  if (newElement.is(element)) {\n    return element;\n  }\n\n  each(newElement, function (_, currentElement) {\n    insertBefore(element[0], currentElement);\n  });\n  element.remove();\n  return newElement;\n};","map":null,"metadata":{},"sourceType":"module"}