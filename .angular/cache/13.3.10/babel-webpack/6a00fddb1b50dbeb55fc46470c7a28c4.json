{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/renovation/ui/pager/pages/page_index_selector.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"hasKnownLastPage\", \"isLargeDisplayMode\", \"maxPagesCount\", \"pageCount\", \"pageIndex\", \"pageIndexChange\", \"pagesCountText\", \"showNavigationButtons\", \"totalCount\"];\nimport { createFragment, createComponentVNode } from \"inferno\";\nimport { Fragment } from \"inferno\";\nimport { BaseInfernoComponent } from \"@devextreme/runtime/inferno\";\nimport { LightButton } from \"../common/light_button\";\nimport { PagesLarge } from \"./large\";\nimport { PagesSmall } from \"./small\";\nimport { InternalPagerProps } from \"../common/pager_props\";\nimport { ConfigContext } from \"../../../common/config_context\";\nvar PAGER_NAVIGATE_BUTTON = \"dx-navigate-button\";\nvar PAGER_PREV_BUTTON_CLASS = \"dx-prev-button\";\nvar PAGER_NEXT_BUTTON_CLASS = \"dx-next-button\";\nexport var PAGER_BUTTON_DISABLE_CLASS = \"dx-button-disable\";\nvar nextButtonClassName = \"\".concat(PAGER_NAVIGATE_BUTTON, \" \").concat(PAGER_NEXT_BUTTON_CLASS);\nvar prevButtonClassName = \"\".concat(PAGER_NAVIGATE_BUTTON, \" \").concat(PAGER_PREV_BUTTON_CLASS);\nvar nextButtonDisabledClassName = \"\".concat(PAGER_BUTTON_DISABLE_CLASS, \" \").concat(PAGER_NAVIGATE_BUTTON, \" \").concat(PAGER_NEXT_BUTTON_CLASS);\nvar prevButtonDisabledClassName = \"\".concat(PAGER_BUTTON_DISABLE_CLASS, \" \").concat(PAGER_NAVIGATE_BUTTON, \" \").concat(PAGER_PREV_BUTTON_CLASS);\nexport var viewFunction = function viewFunction(_ref) {\n  var navigateToNextPage = _ref.navigateToNextPage,\n      navigateToPrevPage = _ref.navigateToPrevPage,\n      nextClassName = _ref.nextClassName,\n      pageIndexChange = _ref.pageIndexChange,\n      prevClassName = _ref.prevClassName,\n      _ref$props = _ref.props,\n      isLargeDisplayMode = _ref$props.isLargeDisplayMode,\n      maxPagesCount = _ref$props.maxPagesCount,\n      pageCount = _ref$props.pageCount,\n      pageIndex = _ref$props.pageIndex,\n      pagesCountText = _ref$props.pagesCountText,\n      renderNextButton = _ref.renderNextButton,\n      renderPrevButton = _ref.renderPrevButton;\n  return createFragment([renderPrevButton && createComponentVNode(2, LightButton, {\n    className: prevClassName,\n    label: \"Previous page\",\n    onClick: navigateToPrevPage\n  }), isLargeDisplayMode && createComponentVNode(2, PagesLarge, {\n    maxPagesCount: maxPagesCount,\n    pageCount: pageCount,\n    pageIndex: pageIndex,\n    pageIndexChange: pageIndexChange\n  }), !isLargeDisplayMode && createComponentVNode(2, PagesSmall, {\n    pageCount: pageCount,\n    pageIndex: pageIndex,\n    pageIndexChange: pageIndexChange,\n    pagesCountText: pagesCountText\n  }), renderNextButton && createComponentVNode(2, LightButton, {\n    className: nextClassName,\n    label: \"Next page\",\n    onClick: navigateToNextPage\n  })], 0);\n};\n\nfunction getIncrement(direction) {\n  return \"next\" === direction ? 1 : -1;\n}\n\nexport var PageIndexSelectorProps = {\n  isLargeDisplayMode: true\n};\nvar PageIndexSelectorPropsType = {\n  get pageIndex() {\n    return InternalPagerProps.pageIndex;\n  },\n\n  get maxPagesCount() {\n    return InternalPagerProps.maxPagesCount;\n  },\n\n  get pageCount() {\n    return InternalPagerProps.pageCount;\n  },\n\n  get hasKnownLastPage() {\n    return InternalPagerProps.hasKnownLastPage;\n  },\n\n  get showNavigationButtons() {\n    return InternalPagerProps.showNavigationButtons;\n  },\n\n  get totalCount() {\n    return InternalPagerProps.totalCount;\n  },\n\n  get isLargeDisplayMode() {\n    return PageIndexSelectorProps.isLargeDisplayMode;\n  }\n\n};\nexport var PageIndexSelector = /*#__PURE__*/(function () {\n  var PageIndexSelector = /*#__PURE__*/function (_BaseInfernoComponent) {\n    _inherits(PageIndexSelector, _BaseInfernoComponent);\n\n    var _super = _createSuper(PageIndexSelector);\n\n    function PageIndexSelector(props) {\n      var _this;\n\n      _classCallCheck(this, PageIndexSelector);\n\n      _this = _super.call(this, props);\n      _this.state = {};\n      _this.pageIndexChange = _this.pageIndexChange.bind(_assertThisInitialized(_this));\n      _this.navigateToNextPage = _this.navigateToNextPage.bind(_assertThisInitialized(_this));\n      _this.navigateToPrevPage = _this.navigateToPrevPage.bind(_assertThisInitialized(_this));\n      _this.getNextDirection = _this.getNextDirection.bind(_assertThisInitialized(_this));\n      _this.getPrevDirection = _this.getPrevDirection.bind(_assertThisInitialized(_this));\n      _this.canNavigateToPage = _this.canNavigateToPage.bind(_assertThisInitialized(_this));\n      _this.getNextPageIndex = _this.getNextPageIndex.bind(_assertThisInitialized(_this));\n      _this.canNavigateTo = _this.canNavigateTo.bind(_assertThisInitialized(_this));\n      _this.navigateToPage = _this.navigateToPage.bind(_assertThisInitialized(_this));\n      return _this;\n    }\n\n    _createClass(PageIndexSelector, [{\n      key: \"config\",\n      get: function get() {\n        if (\"ConfigContext\" in this.context) {\n          return this.context.ConfigContext;\n        }\n\n        return ConfigContext;\n      }\n    }, {\n      key: \"pageIndexChange\",\n      value: function pageIndexChange(pageIndex) {\n        if (this.canNavigateToPage(pageIndex)) {\n          this.props.pageIndexChange(pageIndex);\n        }\n      }\n    }, {\n      key: \"navigateToNextPage\",\n      value: function navigateToNextPage() {\n        this.navigateToPage(this.getNextDirection());\n      }\n    }, {\n      key: \"navigateToPrevPage\",\n      value: function navigateToPrevPage() {\n        this.navigateToPage(this.getPrevDirection());\n      }\n    }, {\n      key: \"getNextDirection\",\n      value: function getNextDirection() {\n        var _this$config;\n\n        return !(null !== (_this$config = this.config) && void 0 !== _this$config && _this$config.rtlEnabled) ? \"next\" : \"prev\";\n      }\n    }, {\n      key: \"getPrevDirection\",\n      value: function getPrevDirection() {\n        var _this$config2;\n\n        return !(null !== (_this$config2 = this.config) && void 0 !== _this$config2 && _this$config2.rtlEnabled) ? \"prev\" : \"next\";\n      }\n    }, {\n      key: \"canNavigateToPage\",\n      value: function canNavigateToPage(pageIndex) {\n        if (!this.props.hasKnownLastPage) {\n          return pageIndex >= 0;\n        }\n\n        return pageIndex >= 0 && pageIndex <= this.props.pageCount - 1;\n      }\n    }, {\n      key: \"getNextPageIndex\",\n      value: function getNextPageIndex(direction) {\n        return this.props.pageIndex + getIncrement(direction);\n      }\n    }, {\n      key: \"canNavigateTo\",\n      value: function canNavigateTo(direction) {\n        return this.canNavigateToPage(this.getNextPageIndex(direction));\n      }\n    }, {\n      key: \"navigateToPage\",\n      value: function navigateToPage(direction) {\n        this.pageIndexChange(this.getNextPageIndex(direction));\n      }\n    }, {\n      key: \"renderPrevButton\",\n      get: function get() {\n        var _this$props2 = this.props,\n            isLargeDisplayMode = _this$props2.isLargeDisplayMode,\n            showNavigationButtons = _this$props2.showNavigationButtons;\n        return !isLargeDisplayMode || showNavigationButtons;\n      }\n    }, {\n      key: \"renderNextButton\",\n      get: function get() {\n        return this.renderPrevButton || !this.props.hasKnownLastPage;\n      }\n    }, {\n      key: \"nextClassName\",\n      get: function get() {\n        var direction = this.getNextDirection();\n        var canNavigate = this.canNavigateTo(direction);\n        return canNavigate ? nextButtonClassName : nextButtonDisabledClassName;\n      }\n    }, {\n      key: \"prevClassName\",\n      get: function get() {\n        var direction = this.getPrevDirection();\n        var canNavigate = this.canNavigateTo(direction);\n        return canNavigate ? prevButtonClassName : prevButtonDisabledClassName;\n      }\n    }, {\n      key: \"restAttributes\",\n      get: function get() {\n        var _this$props = this.props,\n            restProps = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n        return restProps;\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var props = this.props;\n        return viewFunction({\n          props: _extends({}, props),\n          config: this.config,\n          pageIndexChange: this.pageIndexChange,\n          navigateToNextPage: this.navigateToNextPage,\n          navigateToPrevPage: this.navigateToPrevPage,\n          renderPrevButton: this.renderPrevButton,\n          renderNextButton: this.renderNextButton,\n          nextClassName: this.nextClassName,\n          prevClassName: this.prevClassName,\n          restAttributes: this.restAttributes\n        });\n      }\n    }]);\n\n    return PageIndexSelector;\n  }(BaseInfernoComponent);\n\n  PageIndexSelector.defaultProps = PageIndexSelectorPropsType;\n  return PageIndexSelector;\n})();","map":null,"metadata":{},"sourceType":"module"}