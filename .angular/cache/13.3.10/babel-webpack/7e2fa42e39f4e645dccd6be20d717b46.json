{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/translators/translator1d.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nvar _Number = Number;\nexport function Translator1D() {\n  this.setDomain(arguments[0], arguments[1]).setCodomain(arguments[2], arguments[3]).setInverted(false);\n}\nTranslator1D.prototype = {\n  constructor: Translator1D,\n  setDomain: function setDomain(domain1, domain2) {\n    this._domain1 = _Number(domain1);\n    this._domain2 = _Number(domain2);\n    this._domainDelta = this._domain2 - this._domain1;\n    return this;\n  },\n  setCodomain: function setCodomain(codomain1, codomain2) {\n    this._codomain1 = _Number(codomain1);\n    this._codomain2 = _Number(codomain2);\n    this._codomainDelta = this._codomain2 - this._codomain1;\n    return this;\n  },\n  setInverted: function setInverted(state) {\n    this.inverted = state;\n  },\n  getDomain: function getDomain() {\n    return [this._domain1, this._domain2];\n  },\n  getCodomain: function getCodomain() {\n    return [this._codomain1, this._codomain2];\n  },\n  getDomainStart: function getDomainStart() {\n    return this._domain1;\n  },\n  getDomainEnd: function getDomainEnd() {\n    return this._domain2;\n  },\n  getCodomainStart: function getCodomainStart() {\n    return this._codomain1;\n  },\n  getCodomainEnd: function getCodomainEnd() {\n    return this._codomain2;\n  },\n  getDomainRange: function getDomainRange() {\n    return this._domainDelta;\n  },\n  getCodomainRange: function getCodomainRange() {\n    return this._codomainDelta;\n  },\n  translate: function translate(value) {\n    var ratio = (_Number(value) - this._domain1) / this._domainDelta;\n\n    this.inverted && (ratio = 1 - ratio);\n    return 0 <= ratio && ratio <= 1 ? this._codomain1 + ratio * this._codomainDelta : NaN;\n  },\n  adjust: function adjust(value) {\n    var ratio = (_Number(value) - this._domain1) / this._domainDelta;\n\n    var result = NaN;\n\n    if (ratio < 0) {\n      result = this._domain1;\n    } else if (ratio > 1) {\n      result = this._domain2;\n    } else if (0 <= ratio && ratio <= 1) {\n      result = _Number(value);\n    }\n\n    return result;\n  }\n};","map":null,"metadata":{},"sourceType":"module"}