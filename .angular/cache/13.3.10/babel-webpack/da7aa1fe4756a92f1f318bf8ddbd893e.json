{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __decorate, __metadata, __param } from 'tslib';\nimport { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { forwardRef, ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, HostListener, ContentChildren, QueryList, Component, NgModule } from '@angular/core';\nimport DxSelectBox from 'devextreme/ui/select_box';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { DxComponent, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxiButtonComponent, DxiItemComponent, DxiButtonModule, DxoOptionsModule, DxoDropDownOptionsModule, DxoAnimationModule, DxoHideModule, DxoFromModule, DxoPositionModule, DxoAtModule, DxoBoundaryOffsetModule, DxoCollisionModule, DxoMyModule, DxoOffsetModule, DxoToModule, DxoShowModule, DxiToolbarItemModule, DxiItemModule } from 'devextreme-angular/ui/nested';\n/*!\r\n * devextreme-angular\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'devextreme-angular/core';\nimport * as ɵngcc2 from '@angular/platform-browser';\nvar CUSTOM_VALUE_ACCESSOR_PROVIDER = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return DxSelectBoxComponent;\n  }),\n  multi: true\n};\n/**\r\n * The SelectBox UI component is an editor that allows an end user to select an item from a drop-down list.\r\n\r\n */\n\nvar DxSelectBoxComponent = /*#__PURE__*/(function () {\n  var DxSelectBoxComponent = /*#__PURE__*/function (_DxComponent) {\n    _inherits(DxSelectBoxComponent, _DxComponent);\n\n    var _super = _createSuper(DxSelectBoxComponent);\n\n    function DxSelectBoxComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\n      var _this;\n\n      _classCallCheck(this, DxSelectBoxComponent);\n\n      _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n      _this._watcherHelper = _watcherHelper;\n      _this._idh = _idh;\n\n      _this.touched = function (_) {};\n\n      _this._createEventEmitters([{\n        subscribe: 'change',\n        emit: 'onChange'\n      }, {\n        subscribe: 'closed',\n        emit: 'onClosed'\n      }, {\n        subscribe: 'contentReady',\n        emit: 'onContentReady'\n      }, {\n        subscribe: 'copy',\n        emit: 'onCopy'\n      }, {\n        subscribe: 'customItemCreating',\n        emit: 'onCustomItemCreating'\n      }, {\n        subscribe: 'cut',\n        emit: 'onCut'\n      }, {\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'enterKey',\n        emit: 'onEnterKey'\n      }, {\n        subscribe: 'focusIn',\n        emit: 'onFocusIn'\n      }, {\n        subscribe: 'focusOut',\n        emit: 'onFocusOut'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'input',\n        emit: 'onInput'\n      }, {\n        subscribe: 'itemClick',\n        emit: 'onItemClick'\n      }, {\n        subscribe: 'keyDown',\n        emit: 'onKeyDown'\n      }, {\n        subscribe: 'keyUp',\n        emit: 'onKeyUp'\n      }, {\n        subscribe: 'opened',\n        emit: 'onOpened'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        subscribe: 'paste',\n        emit: 'onPaste'\n      }, {\n        subscribe: 'selectionChanged',\n        emit: 'onSelectionChanged'\n      }, {\n        subscribe: 'valueChanged',\n        emit: 'onValueChanged'\n      }, {\n        emit: 'acceptCustomValueChange'\n      }, {\n        emit: 'accessKeyChange'\n      }, {\n        emit: 'activeStateEnabledChange'\n      }, {\n        emit: 'buttonsChange'\n      }, {\n        emit: 'dataSourceChange'\n      }, {\n        emit: 'deferRenderingChange'\n      }, {\n        emit: 'disabledChange'\n      }, {\n        emit: 'displayExprChange'\n      }, {\n        emit: 'displayValueChange'\n      }, {\n        emit: 'dropDownButtonTemplateChange'\n      }, {\n        emit: 'dropDownOptionsChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'fieldTemplateChange'\n      }, {\n        emit: 'focusStateEnabledChange'\n      }, {\n        emit: 'groupedChange'\n      }, {\n        emit: 'groupTemplateChange'\n      }, {\n        emit: 'heightChange'\n      }, {\n        emit: 'hintChange'\n      }, {\n        emit: 'hoverStateEnabledChange'\n      }, {\n        emit: 'inputAttrChange'\n      }, {\n        emit: 'isValidChange'\n      }, {\n        emit: 'itemsChange'\n      }, {\n        emit: 'itemTemplateChange'\n      }, {\n        emit: 'labelChange'\n      }, {\n        emit: 'labelModeChange'\n      }, {\n        emit: 'maxLengthChange'\n      }, {\n        emit: 'minSearchLengthChange'\n      }, {\n        emit: 'nameChange'\n      }, {\n        emit: 'noDataTextChange'\n      }, {\n        emit: 'openedChange'\n      }, {\n        emit: 'openOnFieldClickChange'\n      }, {\n        emit: 'placeholderChange'\n      }, {\n        emit: 'readOnlyChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'searchEnabledChange'\n      }, {\n        emit: 'searchExprChange'\n      }, {\n        emit: 'searchModeChange'\n      }, {\n        emit: 'searchTimeoutChange'\n      }, {\n        emit: 'selectedItemChange'\n      }, {\n        emit: 'showClearButtonChange'\n      }, {\n        emit: 'showDataBeforeSearchChange'\n      }, {\n        emit: 'showDropDownButtonChange'\n      }, {\n        emit: 'showSelectionControlsChange'\n      }, {\n        emit: 'spellcheckChange'\n      }, {\n        emit: 'stylingModeChange'\n      }, {\n        emit: 'tabIndexChange'\n      }, {\n        emit: 'textChange'\n      }, {\n        emit: 'useItemTextAsTitleChange'\n      }, {\n        emit: 'validationErrorChange'\n      }, {\n        emit: 'validationErrorsChange'\n      }, {\n        emit: 'validationMessageModeChange'\n      }, {\n        emit: 'validationStatusChange'\n      }, {\n        emit: 'valueChange'\n      }, {\n        emit: 'valueChangeEventChange'\n      }, {\n        emit: 'valueExprChange'\n      }, {\n        emit: 'visibleChange'\n      }, {\n        emit: 'widthChange'\n      }, {\n        emit: 'wrapItemTextChange'\n      }, {\n        emit: 'onBlur'\n      }]);\n\n      _this._idh.setHost(_assertThisInitialized(_this));\n\n      optionHost.setHost(_assertThisInitialized(_this));\n      return _this;\n    }\n    /**\r\n     * Specifies whether the UI component allows a user to enter a custom value. Requires the onCustomItemCreating handler implementation.\r\n    \r\n     */\n\n\n    _createClass(DxSelectBoxComponent, [{\n      key: \"acceptCustomValue\",\n      get: function get() {\n        return this._getOption('acceptCustomValue');\n      },\n      set: function set(value) {\n        this._setOption('acceptCustomValue', value);\n      }\n      /**\r\n       * Specifies the shortcut key that sets focus on the UI component.\r\n      \r\n       */\n\n    }, {\n      key: \"accessKey\",\n      get: function get() {\n        return this._getOption('accessKey');\n      },\n      set: function set(value) {\n        this._setOption('accessKey', value);\n      }\n      /**\r\n       * Specifies whether or not the UI component changes its state when interacting with a user.\r\n      \r\n       */\n\n    }, {\n      key: \"activeStateEnabled\",\n      get: function get() {\n        return this._getOption('activeStateEnabled');\n      },\n      set: function set(value) {\n        this._setOption('activeStateEnabled', value);\n      }\n      /**\r\n       * Allows you to add custom buttons to the input text field.\r\n      \r\n       */\n\n    }, {\n      key: \"buttons\",\n      get: function get() {\n        return this._getOption('buttons');\n      },\n      set: function set(value) {\n        this._setOption('buttons', value);\n      }\n      /**\r\n       * Binds the UI component to data.\r\n      \r\n       */\n\n    }, {\n      key: \"dataSource\",\n      get: function get() {\n        return this._getOption('dataSource');\n      },\n      set: function set(value) {\n        this._setOption('dataSource', value);\n      }\n      /**\r\n       * Specifies whether to render the drop-down field&apos;s content when it is displayed. If false, the content is rendered immediately.\r\n      \r\n       */\n\n    }, {\n      key: \"deferRendering\",\n      get: function get() {\n        return this._getOption('deferRendering');\n      },\n      set: function set(value) {\n        this._setOption('deferRendering', value);\n      }\n      /**\r\n       * Specifies whether the UI component responds to user interaction.\r\n      \r\n       */\n\n    }, {\n      key: \"disabled\",\n      get: function get() {\n        return this._getOption('disabled');\n      },\n      set: function set(value) {\n        this._setOption('disabled', value);\n      }\n      /**\r\n       * Specifies the data field whose values should be displayed.\r\n      \r\n       */\n\n    }, {\n      key: \"displayExpr\",\n      get: function get() {\n        return this._getOption('displayExpr');\n      },\n      set: function set(value) {\n        this._setOption('displayExpr', value);\n      }\n      /**\r\n       * Returns the value currently displayed by the UI component.\r\n      \r\n       */\n\n    }, {\n      key: \"displayValue\",\n      get: function get() {\n        return this._getOption('displayValue');\n      },\n      set: function set(value) {\n        this._setOption('displayValue', value);\n      }\n      /**\r\n       * Specifies a custom template for the drop-down button.\r\n      \r\n       */\n\n    }, {\n      key: \"dropDownButtonTemplate\",\n      get: function get() {\n        return this._getOption('dropDownButtonTemplate');\n      },\n      set: function set(value) {\n        this._setOption('dropDownButtonTemplate', value);\n      }\n      /**\r\n       * Configures the drop-down field which holds the content.\r\n      \r\n       */\n\n    }, {\n      key: \"dropDownOptions\",\n      get: function get() {\n        return this._getOption('dropDownOptions');\n      },\n      set: function set(value) {\n        this._setOption('dropDownOptions', value);\n      }\n      /**\r\n       * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n      \r\n       */\n\n    }, {\n      key: \"elementAttr\",\n      get: function get() {\n        return this._getOption('elementAttr');\n      },\n      set: function set(value) {\n        this._setOption('elementAttr', value);\n      }\n      /**\r\n       * Specifies a custom template for the text field. Must contain the TextBox UI component.\r\n      \r\n       */\n\n    }, {\n      key: \"fieldTemplate\",\n      get: function get() {\n        return this._getOption('fieldTemplate');\n      },\n      set: function set(value) {\n        this._setOption('fieldTemplate', value);\n      }\n      /**\r\n       * Specifies whether the UI component can be focused using keyboard navigation.\r\n      \r\n       */\n\n    }, {\n      key: \"focusStateEnabled\",\n      get: function get() {\n        return this._getOption('focusStateEnabled');\n      },\n      set: function set(value) {\n        this._setOption('focusStateEnabled', value);\n      }\n      /**\r\n       * Specifies whether data items should be grouped.\r\n      \r\n       */\n\n    }, {\n      key: \"grouped\",\n      get: function get() {\n        return this._getOption('grouped');\n      },\n      set: function set(value) {\n        this._setOption('grouped', value);\n      }\n      /**\r\n       * Specifies a custom template for group captions.\r\n      \r\n       */\n\n    }, {\n      key: \"groupTemplate\",\n      get: function get() {\n        return this._getOption('groupTemplate');\n      },\n      set: function set(value) {\n        this._setOption('groupTemplate', value);\n      }\n      /**\r\n       * Specifies the UI component&apos;s height.\r\n      \r\n       */\n\n    }, {\n      key: \"height\",\n      get: function get() {\n        return this._getOption('height');\n      },\n      set: function set(value) {\n        this._setOption('height', value);\n      }\n      /**\r\n       * Specifies text for a hint that appears when a user pauses on the UI component.\r\n      \r\n       */\n\n    }, {\n      key: \"hint\",\n      get: function get() {\n        return this._getOption('hint');\n      },\n      set: function set(value) {\n        this._setOption('hint', value);\n      }\n      /**\r\n       * Specifies whether the UI component changes its state when a user pauses on it.\r\n      \r\n       */\n\n    }, {\n      key: \"hoverStateEnabled\",\n      get: function get() {\n        return this._getOption('hoverStateEnabled');\n      },\n      set: function set(value) {\n        this._setOption('hoverStateEnabled', value);\n      }\n      /**\r\n       * Specifies the attributes to be passed on to the underlying HTML element.\r\n      \r\n       */\n\n    }, {\n      key: \"inputAttr\",\n      get: function get() {\n        return this._getOption('inputAttr');\n      },\n      set: function set(value) {\n        this._setOption('inputAttr', value);\n      }\n      /**\r\n       * Specifies or indicates whether the editor&apos;s value is valid.\r\n      \r\n       */\n\n    }, {\n      key: \"isValid\",\n      get: function get() {\n        return this._getOption('isValid');\n      },\n      set: function set(value) {\n        this._setOption('isValid', value);\n      }\n      /**\r\n       * An array of items displayed by the UI component.\r\n      \r\n       */\n\n    }, {\n      key: \"items\",\n      get: function get() {\n        return this._getOption('items');\n      },\n      set: function set(value) {\n        this._setOption('items', value);\n      }\n      /**\r\n       * Specifies a custom template for items.\r\n      \r\n       */\n\n    }, {\n      key: \"itemTemplate\",\n      get: function get() {\n        return this._getOption('itemTemplate');\n      },\n      set: function set(value) {\n        this._setOption('itemTemplate', value);\n      }\n      /**\r\n       * Specifies a text string used to annotate the editor&apos;s value.\r\n      \r\n       */\n\n    }, {\n      key: \"label\",\n      get: function get() {\n        return this._getOption('label');\n      },\n      set: function set(value) {\n        this._setOption('label', value);\n      }\n      /**\r\n       * Specifies the label&apos;s display mode.\r\n      \r\n       */\n\n    }, {\n      key: \"labelMode\",\n      get: function get() {\n        return this._getOption('labelMode');\n      },\n      set: function set(value) {\n        this._setOption('labelMode', value);\n      }\n      /**\r\n       * Specifies the maximum number of characters you can enter into the textbox.\r\n      \r\n       */\n\n    }, {\n      key: \"maxLength\",\n      get: function get() {\n        return this._getOption('maxLength');\n      },\n      set: function set(value) {\n        this._setOption('maxLength', value);\n      }\n      /**\r\n       * The minimum number of characters that must be entered into the text box to begin a search. Applies only if searchEnabled is true.\r\n      \r\n       */\n\n    }, {\n      key: \"minSearchLength\",\n      get: function get() {\n        return this._getOption('minSearchLength');\n      },\n      set: function set(value) {\n        this._setOption('minSearchLength', value);\n      }\n      /**\r\n       * The value to be assigned to the `name` attribute of the underlying HTML element.\r\n      \r\n       */\n\n    }, {\n      key: \"name\",\n      get: function get() {\n        return this._getOption('name');\n      },\n      set: function set(value) {\n        this._setOption('name', value);\n      }\n      /**\r\n       * Specifies the text or HTML markup displayed by the UI component if the item collection is empty.\r\n      \r\n       */\n\n    }, {\n      key: \"noDataText\",\n      get: function get() {\n        return this._getOption('noDataText');\n      },\n      set: function set(value) {\n        this._setOption('noDataText', value);\n      }\n      /**\r\n       * Specifies whether or not the drop-down editor is displayed.\r\n      \r\n       */\n\n    }, {\n      key: \"opened\",\n      get: function get() {\n        return this._getOption('opened');\n      },\n      set: function set(value) {\n        this._setOption('opened', value);\n      }\n      /**\r\n       * Specifies whether a user can open the drop-down list by clicking a text field.\r\n      \r\n       */\n\n    }, {\n      key: \"openOnFieldClick\",\n      get: function get() {\n        return this._getOption('openOnFieldClick');\n      },\n      set: function set(value) {\n        this._setOption('openOnFieldClick', value);\n      }\n      /**\r\n       * The text that is provided as a hint in the select box editor.\r\n      \r\n       */\n\n    }, {\n      key: \"placeholder\",\n      get: function get() {\n        return this._getOption('placeholder');\n      },\n      set: function set(value) {\n        this._setOption('placeholder', value);\n      }\n      /**\r\n       * Specifies whether the editor is read-only.\r\n      \r\n       */\n\n    }, {\n      key: \"readOnly\",\n      get: function get() {\n        return this._getOption('readOnly');\n      },\n      set: function set(value) {\n        this._setOption('readOnly', value);\n      }\n      /**\r\n       * Switches the UI component to a right-to-left representation.\r\n      \r\n       */\n\n    }, {\n      key: \"rtlEnabled\",\n      get: function get() {\n        return this._getOption('rtlEnabled');\n      },\n      set: function set(value) {\n        this._setOption('rtlEnabled', value);\n      }\n      /**\r\n       * Specifies whether to allow searching.\r\n      \r\n       */\n\n    }, {\n      key: \"searchEnabled\",\n      get: function get() {\n        return this._getOption('searchEnabled');\n      },\n      set: function set(value) {\n        this._setOption('searchEnabled', value);\n      }\n      /**\r\n       * Specifies the name of a data source item field or an expression whose value is compared to the search criterion.\r\n      \r\n       */\n\n    }, {\n      key: \"searchExpr\",\n      get: function get() {\n        return this._getOption('searchExpr');\n      },\n      set: function set(value) {\n        this._setOption('searchExpr', value);\n      }\n      /**\r\n       * Specifies a comparison operation used to search UI component items.\r\n      \r\n       */\n\n    }, {\n      key: \"searchMode\",\n      get: function get() {\n        return this._getOption('searchMode');\n      },\n      set: function set(value) {\n        this._setOption('searchMode', value);\n      }\n      /**\r\n       * Specifies the time delay, in milliseconds, after the last character has been typed in, before a search is executed.\r\n      \r\n       */\n\n    }, {\n      key: \"searchTimeout\",\n      get: function get() {\n        return this._getOption('searchTimeout');\n      },\n      set: function set(value) {\n        this._setOption('searchTimeout', value);\n      }\n      /**\r\n       * Gets the currently selected item.\r\n      \r\n       */\n\n    }, {\n      key: \"selectedItem\",\n      get: function get() {\n        return this._getOption('selectedItem');\n      },\n      set: function set(value) {\n        this._setOption('selectedItem', value);\n      }\n      /**\r\n       * Specifies whether to display the Clear button in the UI component.\r\n      \r\n       */\n\n    }, {\n      key: \"showClearButton\",\n      get: function get() {\n        return this._getOption('showClearButton');\n      },\n      set: function set(value) {\n        this._setOption('showClearButton', value);\n      }\n      /**\r\n       * Specifies whether or not the UI component displays unfiltered values until a user types a number of characters exceeding the minSearchLength property value.\r\n      \r\n       */\n\n    }, {\n      key: \"showDataBeforeSearch\",\n      get: function get() {\n        return this._getOption('showDataBeforeSearch');\n      },\n      set: function set(value) {\n        this._setOption('showDataBeforeSearch', value);\n      }\n      /**\r\n       * Specifies whether the drop-down button is visible.\r\n      \r\n       */\n\n    }, {\n      key: \"showDropDownButton\",\n      get: function get() {\n        return this._getOption('showDropDownButton');\n      },\n      set: function set(value) {\n        this._setOption('showDropDownButton', value);\n      }\n      /**\r\n       * Specifies whether or not to display selection controls.\r\n      \r\n       */\n\n    }, {\n      key: \"showSelectionControls\",\n      get: function get() {\n        return this._getOption('showSelectionControls');\n      },\n      set: function set(value) {\n        this._setOption('showSelectionControls', value);\n      }\n      /**\r\n       * Specifies whether or not the UI component checks the inner text for spelling mistakes.\r\n      \r\n       */\n\n    }, {\n      key: \"spellcheck\",\n      get: function get() {\n        return this._getOption('spellcheck');\n      },\n      set: function set(value) {\n        this._setOption('spellcheck', value);\n      }\n      /**\r\n       * Specifies how the UI component&apos;s text field is styled.\r\n      \r\n       */\n\n    }, {\n      key: \"stylingMode\",\n      get: function get() {\n        return this._getOption('stylingMode');\n      },\n      set: function set(value) {\n        this._setOption('stylingMode', value);\n      }\n      /**\r\n       * Specifies the number of the element when the Tab key is used for navigating.\r\n      \r\n       */\n\n    }, {\n      key: \"tabIndex\",\n      get: function get() {\n        return this._getOption('tabIndex');\n      },\n      set: function set(value) {\n        this._setOption('tabIndex', value);\n      }\n      /**\r\n       * The read-only property that holds the text displayed by the UI component input element.\r\n      \r\n       */\n\n    }, {\n      key: \"text\",\n      get: function get() {\n        return this._getOption('text');\n      },\n      set: function set(value) {\n        this._setOption('text', value);\n      }\n      /**\r\n       * Specifies whether the widget uses item&apos;s text a title attribute.\r\n      \r\n       */\n\n    }, {\n      key: \"useItemTextAsTitle\",\n      get: function get() {\n        return this._getOption('useItemTextAsTitle');\n      },\n      set: function set(value) {\n        this._setOption('useItemTextAsTitle', value);\n      }\n      /**\r\n       * Information on the broken validation rule. Contains the first item from the validationErrors array.\r\n      \r\n       */\n\n    }, {\n      key: \"validationError\",\n      get: function get() {\n        return this._getOption('validationError');\n      },\n      set: function set(value) {\n        this._setOption('validationError', value);\n      }\n      /**\r\n       * An array of the validation rules that failed.\r\n      \r\n       */\n\n    }, {\n      key: \"validationErrors\",\n      get: function get() {\n        return this._getOption('validationErrors');\n      },\n      set: function set(value) {\n        this._setOption('validationErrors', value);\n      }\n      /**\r\n       * Specifies how the message about the validation rules that are not satisfied by this editor&apos;s value is displayed.\r\n      \r\n       */\n\n    }, {\n      key: \"validationMessageMode\",\n      get: function get() {\n        return this._getOption('validationMessageMode');\n      },\n      set: function set(value) {\n        this._setOption('validationMessageMode', value);\n      }\n      /**\r\n       * Indicates or specifies the current validation status.\r\n      \r\n       */\n\n    }, {\n      key: \"validationStatus\",\n      get: function get() {\n        return this._getOption('validationStatus');\n      },\n      set: function set(value) {\n        this._setOption('validationStatus', value);\n      }\n      /**\r\n       * Specifies the currently selected value. May be an object if dataSource contains objects and valueExpr is not set.\r\n      \r\n       */\n\n    }, {\n      key: \"value\",\n      get: function get() {\n        return this._getOption('value');\n      },\n      set: function set(value) {\n        this._setOption('value', value);\n      }\n      /**\r\n       * Specifies the DOM events after which the UI component&apos;s value should be updated. Applies only if acceptCustomValue is set to true.\r\n      \r\n       */\n\n    }, {\n      key: \"valueChangeEvent\",\n      get: function get() {\n        return this._getOption('valueChangeEvent');\n      },\n      set: function set(value) {\n        this._setOption('valueChangeEvent', value);\n      }\n      /**\r\n       * Specifies which data field provides unique values to the UI component&apos;s value.\r\n      \r\n       */\n\n    }, {\n      key: \"valueExpr\",\n      get: function get() {\n        return this._getOption('valueExpr');\n      },\n      set: function set(value) {\n        this._setOption('valueExpr', value);\n      }\n      /**\r\n       * Specifies whether the UI component is visible.\r\n      \r\n       */\n\n    }, {\n      key: \"visible\",\n      get: function get() {\n        return this._getOption('visible');\n      },\n      set: function set(value) {\n        this._setOption('visible', value);\n      }\n      /**\r\n       * Specifies the UI component&apos;s width.\r\n      \r\n       */\n\n    }, {\n      key: \"width\",\n      get: function get() {\n        return this._getOption('width');\n      },\n      set: function set(value) {\n        this._setOption('width', value);\n      }\n      /**\r\n       * Specifies whether text that exceeds the drop-down list width should be wrapped.\r\n      \r\n       */\n\n    }, {\n      key: \"wrapItemText\",\n      get: function get() {\n        return this._getOption('wrapItemText');\n      },\n      set: function set(value) {\n        this._setOption('wrapItemText', value);\n      }\n    }, {\n      key: \"change\",\n      value: function change(_) {}\n    }, {\n      key: \"buttonsChildren\",\n      get: function get() {\n        return this._getOption('buttons');\n      },\n      set: function set(value) {\n        this.setChildren('buttons', value);\n      }\n    }, {\n      key: \"itemsChildren\",\n      get: function get() {\n        return this._getOption('items');\n      },\n      set: function set(value) {\n        this.setChildren('items', value);\n      }\n    }, {\n      key: \"_createInstance\",\n      value: function _createInstance(element, options) {\n        return new DxSelectBox(element, options);\n      }\n    }, {\n      key: \"writeValue\",\n      value: function writeValue(value) {\n        this.eventHelper.lockedValueChangeEvent = true;\n        this.value = value;\n        this.eventHelper.lockedValueChangeEvent = false;\n      }\n    }, {\n      key: \"setDisabledState\",\n      value: function setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n      }\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        this.change = fn;\n      }\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(fn) {\n        this.touched = fn;\n      }\n    }, {\n      key: \"_createWidget\",\n      value: function _createWidget(element) {\n        var _this2 = this;\n\n        _get(_getPrototypeOf(DxSelectBoxComponent.prototype), \"_createWidget\", this).call(this, element);\n\n        this.instance.on('focusOut', function (e) {\n          _this2.eventHelper.fireNgEvent('onBlur', [e]);\n        });\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._destroyWidget();\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        _get(_getPrototypeOf(DxSelectBoxComponent.prototype), \"ngOnChanges\", this).call(this, changes);\n\n        this.setupChanges('buttons', changes);\n        this.setupChanges('dataSource', changes);\n        this.setupChanges('items', changes);\n        this.setupChanges('searchExpr', changes);\n        this.setupChanges('validationErrors', changes);\n      }\n    }, {\n      key: \"setupChanges\",\n      value: function setupChanges(prop, changes) {\n        if (!(prop in this._optionsToUpdate)) {\n          this._idh.setup(prop, changes);\n        }\n      }\n    }, {\n      key: \"ngDoCheck\",\n      value: function ngDoCheck() {\n        this._idh.doCheck('buttons');\n\n        this._idh.doCheck('dataSource');\n\n        this._idh.doCheck('items');\n\n        this._idh.doCheck('searchExpr');\n\n        this._idh.doCheck('validationErrors');\n\n        this._watcherHelper.checkWatchers();\n\n        _get(_getPrototypeOf(DxSelectBoxComponent.prototype), \"ngDoCheck\", this).call(this);\n\n        _get(_getPrototypeOf(DxSelectBoxComponent.prototype), \"clearChangedOptions\", this).call(this);\n      }\n    }, {\n      key: \"_setOption\",\n      value: function _setOption(name, value) {\n        var isSetup = this._idh.setupSingle(name, value);\n\n        var isChanged = this._idh.getChanges(name, value) !== null;\n\n        if (isSetup || isChanged) {\n          _get(_getPrototypeOf(DxSelectBoxComponent.prototype), \"_setOption\", this).call(this, name, value);\n        }\n      }\n    }]);\n\n    return DxSelectBoxComponent;\n  }(DxComponent);\n\n  DxSelectBoxComponent.ɵfac = function DxSelectBoxComponent_Factory(t) {\n    return new (t || DxSelectBoxComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DxTemplateHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.WatcherHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IterableDifferHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TransferState), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n\n  DxSelectBoxComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: DxSelectBoxComponent,\n    selectors: [[\"dx-select-box\"]],\n    contentQueries: function DxSelectBoxComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, DxiButtonComponent, 4);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, DxiItemComponent, 4);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.buttonsChildren = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.itemsChildren = _t);\n      }\n    },\n    hostBindings: function DxSelectBoxComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"onBlur\", function DxSelectBoxComponent_onBlur_HostBindingHandler($event) {\n          return ctx.touched($event);\n        })(\"valueChange\", function DxSelectBoxComponent_valueChange_HostBindingHandler($event) {\n          return ctx.change($event);\n        });\n      }\n    },\n    inputs: {\n      acceptCustomValue: \"acceptCustomValue\",\n      accessKey: \"accessKey\",\n      activeStateEnabled: \"activeStateEnabled\",\n      buttons: \"buttons\",\n      dataSource: \"dataSource\",\n      deferRendering: \"deferRendering\",\n      disabled: \"disabled\",\n      displayExpr: \"displayExpr\",\n      displayValue: \"displayValue\",\n      dropDownButtonTemplate: \"dropDownButtonTemplate\",\n      dropDownOptions: \"dropDownOptions\",\n      elementAttr: \"elementAttr\",\n      fieldTemplate: \"fieldTemplate\",\n      focusStateEnabled: \"focusStateEnabled\",\n      grouped: \"grouped\",\n      groupTemplate: \"groupTemplate\",\n      height: \"height\",\n      hint: \"hint\",\n      hoverStateEnabled: \"hoverStateEnabled\",\n      inputAttr: \"inputAttr\",\n      isValid: \"isValid\",\n      items: \"items\",\n      itemTemplate: \"itemTemplate\",\n      label: \"label\",\n      labelMode: \"labelMode\",\n      maxLength: \"maxLength\",\n      minSearchLength: \"minSearchLength\",\n      name: \"name\",\n      noDataText: \"noDataText\",\n      opened: \"opened\",\n      openOnFieldClick: \"openOnFieldClick\",\n      placeholder: \"placeholder\",\n      readOnly: \"readOnly\",\n      rtlEnabled: \"rtlEnabled\",\n      searchEnabled: \"searchEnabled\",\n      searchExpr: \"searchExpr\",\n      searchMode: \"searchMode\",\n      searchTimeout: \"searchTimeout\",\n      selectedItem: \"selectedItem\",\n      showClearButton: \"showClearButton\",\n      showDataBeforeSearch: \"showDataBeforeSearch\",\n      showDropDownButton: \"showDropDownButton\",\n      showSelectionControls: \"showSelectionControls\",\n      spellcheck: \"spellcheck\",\n      stylingMode: \"stylingMode\",\n      tabIndex: \"tabIndex\",\n      text: \"text\",\n      useItemTextAsTitle: \"useItemTextAsTitle\",\n      validationError: \"validationError\",\n      validationErrors: \"validationErrors\",\n      validationMessageMode: \"validationMessageMode\",\n      validationStatus: \"validationStatus\",\n      value: \"value\",\n      valueChangeEvent: \"valueChangeEvent\",\n      valueExpr: \"valueExpr\",\n      visible: \"visible\",\n      width: \"width\",\n      wrapItemText: \"wrapItemText\"\n    },\n    outputs: {\n      onChange: \"onChange\",\n      onClosed: \"onClosed\",\n      onContentReady: \"onContentReady\",\n      onCopy: \"onCopy\",\n      onCustomItemCreating: \"onCustomItemCreating\",\n      onCut: \"onCut\",\n      onDisposing: \"onDisposing\",\n      onEnterKey: \"onEnterKey\",\n      onFocusIn: \"onFocusIn\",\n      onFocusOut: \"onFocusOut\",\n      onInitialized: \"onInitialized\",\n      onInput: \"onInput\",\n      onItemClick: \"onItemClick\",\n      onKeyDown: \"onKeyDown\",\n      onKeyUp: \"onKeyUp\",\n      onOpened: \"onOpened\",\n      onOptionChanged: \"onOptionChanged\",\n      onPaste: \"onPaste\",\n      onSelectionChanged: \"onSelectionChanged\",\n      onValueChanged: \"onValueChanged\",\n      acceptCustomValueChange: \"acceptCustomValueChange\",\n      accessKeyChange: \"accessKeyChange\",\n      activeStateEnabledChange: \"activeStateEnabledChange\",\n      buttonsChange: \"buttonsChange\",\n      dataSourceChange: \"dataSourceChange\",\n      deferRenderingChange: \"deferRenderingChange\",\n      disabledChange: \"disabledChange\",\n      displayExprChange: \"displayExprChange\",\n      displayValueChange: \"displayValueChange\",\n      dropDownButtonTemplateChange: \"dropDownButtonTemplateChange\",\n      dropDownOptionsChange: \"dropDownOptionsChange\",\n      elementAttrChange: \"elementAttrChange\",\n      fieldTemplateChange: \"fieldTemplateChange\",\n      focusStateEnabledChange: \"focusStateEnabledChange\",\n      groupedChange: \"groupedChange\",\n      groupTemplateChange: \"groupTemplateChange\",\n      heightChange: \"heightChange\",\n      hintChange: \"hintChange\",\n      hoverStateEnabledChange: \"hoverStateEnabledChange\",\n      inputAttrChange: \"inputAttrChange\",\n      isValidChange: \"isValidChange\",\n      itemsChange: \"itemsChange\",\n      itemTemplateChange: \"itemTemplateChange\",\n      labelChange: \"labelChange\",\n      labelModeChange: \"labelModeChange\",\n      maxLengthChange: \"maxLengthChange\",\n      minSearchLengthChange: \"minSearchLengthChange\",\n      nameChange: \"nameChange\",\n      noDataTextChange: \"noDataTextChange\",\n      openedChange: \"openedChange\",\n      openOnFieldClickChange: \"openOnFieldClickChange\",\n      placeholderChange: \"placeholderChange\",\n      readOnlyChange: \"readOnlyChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      searchEnabledChange: \"searchEnabledChange\",\n      searchExprChange: \"searchExprChange\",\n      searchModeChange: \"searchModeChange\",\n      searchTimeoutChange: \"searchTimeoutChange\",\n      selectedItemChange: \"selectedItemChange\",\n      showClearButtonChange: \"showClearButtonChange\",\n      showDataBeforeSearchChange: \"showDataBeforeSearchChange\",\n      showDropDownButtonChange: \"showDropDownButtonChange\",\n      showSelectionControlsChange: \"showSelectionControlsChange\",\n      spellcheckChange: \"spellcheckChange\",\n      stylingModeChange: \"stylingModeChange\",\n      tabIndexChange: \"tabIndexChange\",\n      textChange: \"textChange\",\n      useItemTextAsTitleChange: \"useItemTextAsTitleChange\",\n      validationErrorChange: \"validationErrorChange\",\n      validationErrorsChange: \"validationErrorsChange\",\n      validationMessageModeChange: \"validationMessageModeChange\",\n      validationStatusChange: \"validationStatusChange\",\n      valueChange: \"valueChange\",\n      valueChangeEventChange: \"valueChangeEventChange\",\n      valueExprChange: \"valueExprChange\",\n      visibleChange: \"visibleChange\",\n      widthChange: \"widthChange\",\n      wrapItemTextChange: \"wrapItemTextChange\",\n      onBlur: \"onBlur\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, CUSTOM_VALUE_ACCESSOR_PROVIDER, NestedOptionHost, IterableDifferHelper]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function DxSelectBoxComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxSelectBoxComponent.prototype, \"acceptCustomValue\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxSelectBoxComponent.prototype, \"accessKey\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxSelectBoxComponent.prototype, \"activeStateEnabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Array), __metadata(\"design:paramtypes\", [Array])], DxSelectBoxComponent.prototype, \"buttons\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxSelectBoxComponent.prototype, \"dataSource\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxSelectBoxComponent.prototype, \"deferRendering\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxSelectBoxComponent.prototype, \"disabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxSelectBoxComponent.prototype, \"displayExpr\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxSelectBoxComponent.prototype, \"displayValue\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxSelectBoxComponent.prototype, \"dropDownButtonTemplate\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxSelectBoxComponent.prototype, \"dropDownOptions\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxSelectBoxComponent.prototype, \"elementAttr\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxSelectBoxComponent.prototype, \"fieldTemplate\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxSelectBoxComponent.prototype, \"focusStateEnabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxSelectBoxComponent.prototype, \"grouped\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxSelectBoxComponent.prototype, \"groupTemplate\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxSelectBoxComponent.prototype, \"height\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxSelectBoxComponent.prototype, \"hint\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxSelectBoxComponent.prototype, \"hoverStateEnabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxSelectBoxComponent.prototype, \"inputAttr\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxSelectBoxComponent.prototype, \"isValid\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Array), __metadata(\"design:paramtypes\", [Array])], DxSelectBoxComponent.prototype, \"items\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxSelectBoxComponent.prototype, \"itemTemplate\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxSelectBoxComponent.prototype, \"label\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxSelectBoxComponent.prototype, \"labelMode\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxSelectBoxComponent.prototype, \"maxLength\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], DxSelectBoxComponent.prototype, \"minSearchLength\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxSelectBoxComponent.prototype, \"name\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxSelectBoxComponent.prototype, \"noDataText\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxSelectBoxComponent.prototype, \"opened\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxSelectBoxComponent.prototype, \"openOnFieldClick\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxSelectBoxComponent.prototype, \"placeholder\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxSelectBoxComponent.prototype, \"readOnly\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxSelectBoxComponent.prototype, \"rtlEnabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxSelectBoxComponent.prototype, \"searchEnabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxSelectBoxComponent.prototype, \"searchExpr\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxSelectBoxComponent.prototype, \"searchMode\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], DxSelectBoxComponent.prototype, \"searchTimeout\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxSelectBoxComponent.prototype, \"selectedItem\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxSelectBoxComponent.prototype, \"showClearButton\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxSelectBoxComponent.prototype, \"showDataBeforeSearch\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxSelectBoxComponent.prototype, \"showDropDownButton\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxSelectBoxComponent.prototype, \"showSelectionControls\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxSelectBoxComponent.prototype, \"spellcheck\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxSelectBoxComponent.prototype, \"stylingMode\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], DxSelectBoxComponent.prototype, \"tabIndex\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxSelectBoxComponent.prototype, \"text\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxSelectBoxComponent.prototype, \"useItemTextAsTitle\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxSelectBoxComponent.prototype, \"validationError\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Array), __metadata(\"design:paramtypes\", [Array])], DxSelectBoxComponent.prototype, \"validationErrors\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxSelectBoxComponent.prototype, \"validationMessageMode\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxSelectBoxComponent.prototype, \"validationStatus\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxSelectBoxComponent.prototype, \"value\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxSelectBoxComponent.prototype, \"valueChangeEvent\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxSelectBoxComponent.prototype, \"valueExpr\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxSelectBoxComponent.prototype, \"visible\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxSelectBoxComponent.prototype, \"width\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxSelectBoxComponent.prototype, \"wrapItemText\", null);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"onChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"onClosed\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"onContentReady\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"onCopy\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"onCustomItemCreating\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"onCut\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"onDisposing\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"onEnterKey\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"onFocusIn\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"onFocusOut\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"onInitialized\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"onInput\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"onItemClick\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"onKeyDown\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"onKeyUp\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"onOpened\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"onOptionChanged\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"onPaste\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"onSelectionChanged\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"onValueChanged\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"acceptCustomValueChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"accessKeyChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"activeStateEnabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"buttonsChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"dataSourceChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"deferRenderingChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"disabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"displayExprChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"displayValueChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"dropDownButtonTemplateChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"dropDownOptionsChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"elementAttrChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"fieldTemplateChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"focusStateEnabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"groupedChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"groupTemplateChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"heightChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"hintChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"hoverStateEnabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"inputAttrChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"isValidChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"itemsChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"itemTemplateChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"labelChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"labelModeChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"maxLengthChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"minSearchLengthChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"nameChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"noDataTextChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"openedChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"openOnFieldClickChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"placeholderChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"readOnlyChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"rtlEnabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"searchEnabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"searchExprChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"searchModeChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"searchTimeoutChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"selectedItemChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"showClearButtonChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"showDataBeforeSearchChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"showDropDownButtonChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"showSelectionControlsChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"spellcheckChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"stylingModeChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"tabIndexChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"textChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"useItemTextAsTitleChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"validationErrorChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"validationErrorsChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"validationMessageModeChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"validationStatusChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"valueChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"valueChangeEventChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"valueExprChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"visibleChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"widthChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"wrapItemTextChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSelectBoxComponent.prototype, \"onBlur\", void 0);\n\n  __decorate([HostListener('valueChange', ['$event']), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], DxSelectBoxComponent.prototype, \"change\", null);\n\n  __decorate([HostListener('onBlur', ['$event']), __metadata(\"design:type\", Object)], DxSelectBoxComponent.prototype, \"touched\", void 0);\n\n  __decorate([ContentChildren(DxiButtonComponent), __metadata(\"design:type\", QueryList), __metadata(\"design:paramtypes\", [Object])], DxSelectBoxComponent.prototype, \"buttonsChildren\", null);\n\n  __decorate([ContentChildren(DxiItemComponent), __metadata(\"design:type\", QueryList), __metadata(\"design:paramtypes\", [Object])], DxSelectBoxComponent.prototype, \"itemsChildren\", null);\n\n  DxSelectBoxComponent = __decorate([__param(7, Inject(PLATFORM_ID)), __metadata(\"design:paramtypes\", [ElementRef, NgZone, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, TransferState, Object])], DxSelectBoxComponent);\n  return DxSelectBoxComponent;\n})();\nvar DxSelectBoxModule = /*#__PURE__*/(function () {\n  var DxSelectBoxModule = /*#__PURE__*/_createClass(function DxSelectBoxModule() {\n    _classCallCheck(this, DxSelectBoxModule);\n  });\n\n  DxSelectBoxModule.ɵfac = function DxSelectBoxModule_Factory(t) {\n    return new (t || DxSelectBoxModule)();\n  };\n\n  DxSelectBoxModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: DxSelectBoxModule\n  });\n  DxSelectBoxModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[DxiButtonModule, DxoOptionsModule, DxoDropDownOptionsModule, DxoAnimationModule, DxoHideModule, DxoFromModule, DxoPositionModule, DxoAtModule, DxoBoundaryOffsetModule, DxoCollisionModule, DxoMyModule, DxoOffsetModule, DxoToModule, DxoShowModule, DxiToolbarItemModule, DxiItemModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxiButtonModule, DxoOptionsModule, DxoDropDownOptionsModule, DxoAnimationModule, DxoHideModule, DxoFromModule, DxoPositionModule, DxoAtModule, DxoBoundaryOffsetModule, DxoCollisionModule, DxoMyModule, DxoOffsetModule, DxoToModule, DxoShowModule, DxiToolbarItemModule, DxiItemModule, DxTemplateModule]\n  });\n  return DxSelectBoxModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxSelectBoxModule, {\n    declarations: function declarations() {\n      return [DxSelectBoxComponent];\n    },\n    imports: function imports() {\n      return [DxiButtonModule, DxoOptionsModule, DxoDropDownOptionsModule, DxoAnimationModule, DxoHideModule, DxoFromModule, DxoPositionModule, DxoAtModule, DxoBoundaryOffsetModule, DxoCollisionModule, DxoMyModule, DxoOffsetModule, DxoToModule, DxoShowModule, DxiToolbarItemModule, DxiItemModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule];\n    },\n    exports: function exports() {\n      return [DxSelectBoxComponent, DxiButtonModule, DxoOptionsModule, DxoDropDownOptionsModule, DxoAnimationModule, DxoHideModule, DxoFromModule, DxoPositionModule, DxoAtModule, DxoBoundaryOffsetModule, DxoCollisionModule, DxoMyModule, DxoOffsetModule, DxoToModule, DxoShowModule, DxiToolbarItemModule, DxiItemModule, DxTemplateModule];\n    }\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DxSelectBoxComponent, DxSelectBoxModule }; //# sourceMappingURL=devextreme-angular-ui-select-box.js.map","map":null,"metadata":{},"sourceType":"module"}