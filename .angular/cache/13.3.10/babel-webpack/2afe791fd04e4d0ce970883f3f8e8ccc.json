{"ast":null,"code":"import _toConsumableArray from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n\n/**\r\n * DevExtreme (esm/data/data_source/data_source.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport Class from \"../../core/class\";\nimport { extend } from \"../../core/utils/extend\";\nimport { executeAsync } from \"../../core/utils/common\";\nimport { each } from \"../../core/utils/iterator\";\nimport { isString, isNumeric, isBoolean, isDefined, isPlainObject } from \"../../core/utils/type\";\nimport { throttleChanges } from \"../utils\";\nimport { applyBatch } from \"../array_utils\";\nimport CustomStore from \"../custom_store\";\nimport { EventsStrategy } from \"../../core/events_strategy\";\nimport { errors } from \"../errors\";\nimport { isEmpty } from \"../../core/utils/array\";\nimport { create } from \"../../core/utils/queue\";\nimport { Deferred, when } from \"../../core/utils/deferred\";\nimport OperationManager from \"./operation_manager\";\nimport { normalizeDataSourceOptions, normalizeStoreLoadOptionAccessorArguments, CANCELED_TOKEN, isPending, normalizeLoadResult, mapDataRespectingGrouping } from \"./utils\";\nexport var DataSource = Class.inherit({\n  ctor: function ctor(options) {\n    var _this2 = this;\n\n    var _options$reshapeOnPus;\n\n    options = normalizeDataSourceOptions(options);\n    this._eventsStrategy = new EventsStrategy(this, {\n      syncStrategy: true\n    });\n    this._store = options.store;\n    this._changedTime = 0;\n    var needThrottling = 0 !== options.pushAggregationTimeout;\n\n    if (needThrottling) {\n      var throttlingTimeout = void 0 === options.pushAggregationTimeout ? function () {\n        return 5 * _this2._changedTime;\n      } : options.pushAggregationTimeout;\n      var pushDeferred;\n      var lastPushWaiters;\n      var throttlingPushHandler = throttleChanges(function (changes) {\n        pushDeferred.resolve();\n        var storePushPending = when.apply(void 0, _toConsumableArray(lastPushWaiters));\n        storePushPending.done(function () {\n          return _this2._onPush(changes);\n        });\n        lastPushWaiters = void 0;\n        pushDeferred = void 0;\n      }, throttlingTimeout);\n\n      this._onPushHandler = function (args) {\n        _this2._aggregationTimeoutId = throttlingPushHandler(args.changes);\n\n        if (!pushDeferred) {\n          pushDeferred = new Deferred();\n        }\n\n        lastPushWaiters = args.waitFor;\n        args.waitFor.push(pushDeferred.promise());\n      };\n\n      this._store.on(\"beforePush\", this._onPushHandler);\n    } else {\n      this._onPushHandler = function (changes) {\n        return _this2._onPush(changes);\n      };\n\n      this._store.on(\"push\", this._onPushHandler);\n    }\n\n    this._storeLoadOptions = this._extractLoadOptions(options);\n    this._mapFunc = options.map;\n    this._postProcessFunc = options.postProcess;\n    this._pageIndex = void 0 !== options.pageIndex ? options.pageIndex : 0;\n    this._pageSize = void 0 !== options.pageSize ? options.pageSize : 20;\n    this._loadingCount = 0;\n    this._loadQueue = this._createLoadQueue();\n    this._searchValue = \"searchValue\" in options ? options.searchValue : null;\n    this._searchOperation = options.searchOperation || \"contains\";\n    this._searchExpr = options.searchExpr;\n    this._paginate = options.paginate;\n    this._reshapeOnPush = null !== (_options$reshapeOnPus = options.reshapeOnPush) && void 0 !== _options$reshapeOnPus ? _options$reshapeOnPus : false;\n    each([\"onChanged\", \"onLoadError\", \"onLoadingChanged\", \"onCustomizeLoadResult\", \"onCustomizeStoreLoadOptions\"], function (_, optionName) {\n      if (optionName in options) {\n        _this2.on(optionName.substr(2, 1).toLowerCase() + optionName.substr(3), options[optionName]);\n      }\n    });\n    this._operationManager = new OperationManager();\n\n    this._init();\n  },\n  _init: function _init() {\n    this._items = [];\n    this._userData = {};\n    this._totalCount = -1;\n    this._isLoaded = false;\n\n    if (!isDefined(this._paginate)) {\n      this._paginate = !this.group();\n    }\n\n    this._isLastPage = !this._paginate;\n  },\n  dispose: function dispose() {\n    var _this$_delayedLoadTas;\n\n    this._store.off(\"beforePush\", this._onPushHandler);\n\n    this._store.off(\"push\", this._onPushHandler);\n\n    this._eventsStrategy.dispose();\n\n    clearTimeout(this._aggregationTimeoutId);\n    null === (_this$_delayedLoadTas = this._delayedLoadTask) || void 0 === _this$_delayedLoadTas ? void 0 : _this$_delayedLoadTas.abort();\n\n    this._operationManager.cancelAll();\n\n    delete this._store;\n    delete this._items;\n    delete this._delayedLoadTask;\n    this._disposed = true;\n  },\n  _extractLoadOptions: function _extractLoadOptions(options) {\n    var result = {};\n    var names = [\"sort\", \"filter\", \"select\", \"group\", \"requireTotalCount\"];\n\n    var customNames = this._store._customLoadOptions();\n\n    if (customNames) {\n      names = names.concat(customNames);\n    }\n\n    each(names, function () {\n      result[this] = options[this];\n    });\n    return result;\n  },\n  loadOptions: function loadOptions() {\n    return this._storeLoadOptions;\n  },\n  items: function items() {\n    return this._items;\n  },\n  pageIndex: function pageIndex(newIndex) {\n    if (!isNumeric(newIndex)) {\n      return this._pageIndex;\n    }\n\n    this._pageIndex = newIndex;\n    this._isLastPage = !this._paginate;\n  },\n  paginate: function paginate(value) {\n    if (!isBoolean(value)) {\n      return this._paginate;\n    }\n\n    if (this._paginate !== value) {\n      this._paginate = value;\n      this.pageIndex(0);\n    }\n  },\n  pageSize: function pageSize(value) {\n    if (!isNumeric(value)) {\n      return this._pageSize;\n    }\n\n    this._pageSize = value;\n  },\n  isLastPage: function isLastPage() {\n    return this._isLastPage;\n  },\n  generateStoreLoadOptionAccessor: function generateStoreLoadOptionAccessor(optionName) {\n    var _this3 = this;\n\n    return function (args) {\n      var normalizedArgs = normalizeStoreLoadOptionAccessorArguments(args);\n\n      if (void 0 === normalizedArgs) {\n        return _this3._storeLoadOptions[optionName];\n      }\n\n      _this3._storeLoadOptions[optionName] = normalizedArgs;\n    };\n  },\n  sort: function sort() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return this.generateStoreLoadOptionAccessor(\"sort\")(args);\n  },\n  filter: function filter() {\n    var newFilter = normalizeStoreLoadOptionAccessorArguments(arguments);\n\n    if (void 0 === newFilter) {\n      return this._storeLoadOptions.filter;\n    }\n\n    this._storeLoadOptions.filter = newFilter;\n    this.pageIndex(0);\n  },\n  group: function group() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return this.generateStoreLoadOptionAccessor(\"group\")(args);\n  },\n  select: function select() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    return this.generateStoreLoadOptionAccessor(\"select\")(args);\n  },\n  requireTotalCount: function requireTotalCount(value) {\n    if (!isBoolean(value)) {\n      return this._storeLoadOptions.requireTotalCount;\n    }\n\n    this._storeLoadOptions.requireTotalCount = value;\n  },\n  searchValue: function searchValue(value) {\n    if (arguments.length < 1) {\n      return this._searchValue;\n    }\n\n    this._searchValue = value;\n    this.pageIndex(0);\n  },\n  searchOperation: function searchOperation(op) {\n    if (!isString(op)) {\n      return this._searchOperation;\n    }\n\n    this._searchOperation = op;\n    this.pageIndex(0);\n  },\n  searchExpr: function searchExpr(expr) {\n    var argc = arguments.length;\n\n    if (0 === argc) {\n      return this._searchExpr;\n    }\n\n    if (argc > 1) {\n      expr = [].slice.call(arguments);\n    }\n\n    this._searchExpr = expr;\n    this.pageIndex(0);\n  },\n  store: function store() {\n    return this._store;\n  },\n  key: function key() {\n    var _this$_store;\n\n    return null === (_this$_store = this._store) || void 0 === _this$_store ? void 0 : _this$_store.key();\n  },\n  totalCount: function totalCount() {\n    return this._totalCount;\n  },\n  isLoaded: function isLoaded() {\n    return this._isLoaded;\n  },\n  isLoading: function isLoading() {\n    return this._loadingCount > 0;\n  },\n  beginLoading: function beginLoading() {\n    this._changeLoadingCount(1);\n  },\n  endLoading: function endLoading() {\n    this._changeLoadingCount(-1);\n  },\n  _createLoadQueue: function _createLoadQueue() {\n    return create();\n  },\n  _changeLoadingCount: function _changeLoadingCount(increment) {\n    var oldLoading = this.isLoading();\n    this._loadingCount += increment;\n    var newLoading = this.isLoading();\n\n    if (oldLoading ^ newLoading) {\n      this._eventsStrategy.fireEvent(\"loadingChanged\", [newLoading]);\n    }\n  },\n  _scheduleLoadCallbacks: function _scheduleLoadCallbacks(deferred) {\n    var _this4 = this;\n\n    this.beginLoading();\n    deferred.always(function () {\n      _this4.endLoading();\n    });\n  },\n  _scheduleFailCallbacks: function _scheduleFailCallbacks(deferred) {\n    var _this = this;\n\n    deferred.fail(function () {\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      if (args[0] === CANCELED_TOKEN) {\n        return;\n      }\n\n      _this._eventsStrategy.fireEvent(\"loadError\", args);\n    });\n  },\n  _fireChanged: function _fireChanged(args) {\n    var date = new Date();\n\n    this._eventsStrategy.fireEvent(\"changed\", args);\n\n    this._changedTime = new Date() - date;\n  },\n  _scheduleChangedCallbacks: function _scheduleChangedCallbacks(deferred) {\n    var _this5 = this;\n\n    deferred.done(function () {\n      return _this5._fireChanged();\n    });\n  },\n  loadSingle: function loadSingle(propName, propValue) {\n    var _this6 = this;\n\n    var d = new Deferred();\n    var key = this.key();\n    var store = this._store;\n\n    var options = this._createStoreLoadOptions();\n\n    this._scheduleFailCallbacks(d);\n\n    if (arguments.length < 2) {\n      propValue = propName;\n      propName = key;\n    }\n\n    delete options.skip;\n    delete options.group;\n    delete options.refresh;\n    delete options.pageIndex;\n    delete options.searchString;\n    (function () {\n      if (propName === key || store instanceof CustomStore && !store._byKeyViaLoad()) {\n        return store.byKey(propValue, options);\n      }\n\n      options.take = 1;\n      options.filter = options.filter ? [options.filter, [propName, propValue]] : [propName, propValue];\n      return store.load(options);\n    })().fail(d.reject).done(function (data) {\n      if (!isDefined(data) || isEmpty(data)) {\n        d.reject(new errors.Error(\"E4009\"));\n      } else {\n        if (!Array.isArray(data)) {\n          data = [data];\n        }\n\n        d.resolve(_this6._applyMapFunction(data)[0]);\n      }\n    });\n    return d.promise();\n  },\n  load: function load() {\n    var _this7 = this;\n\n    var d = new Deferred();\n\n    var loadTask = function loadTask() {\n      if (_this7._disposed) {\n        return;\n      }\n\n      if (!isPending(d)) {\n        return;\n      }\n\n      return _this7._loadFromStore(loadOperation, d);\n    };\n\n    this._scheduleLoadCallbacks(d);\n\n    this._scheduleFailCallbacks(d);\n\n    this._scheduleChangedCallbacks(d);\n\n    var loadOperation = this._createLoadOperation(d);\n\n    this._eventsStrategy.fireEvent(\"customizeStoreLoadOptions\", [loadOperation]);\n\n    this._loadQueue.add(function () {\n      if (\"number\" === typeof loadOperation.delay) {\n        _this7._delayedLoadTask = executeAsync(loadTask, loadOperation.delay);\n      } else {\n        loadTask();\n      }\n\n      return d.promise();\n    });\n\n    return d.promise({\n      operationId: loadOperation.operationId\n    });\n  },\n  _onPush: function _onPush(changes) {\n    var _this8 = this;\n\n    if (this._reshapeOnPush) {\n      this.load();\n    } else {\n      this._eventsStrategy.fireEvent(\"changing\", [{\n        changes: changes\n      }]);\n\n      var group = this.group();\n      var items = this.items();\n      var groupLevel = 0;\n      var dataSourceChanges = this.paginate() || group ? changes.filter(function (item) {\n        return \"update\" === item.type;\n      }) : changes;\n\n      if (group) {\n        groupLevel = Array.isArray(group) ? group.length : 1;\n      }\n\n      if (this._mapFunc) {\n        dataSourceChanges.forEach(function (item) {\n          if (\"insert\" === item.type) {\n            item.data = _this8._mapFunc(item.data);\n          }\n        });\n      }\n\n      applyBatch({\n        keyInfo: this.store(),\n        data: items,\n        changes: dataSourceChanges,\n        groupCount: groupLevel,\n        useInsertIndex: true\n      });\n\n      this._fireChanged([{\n        changes: changes\n      }]);\n    }\n  },\n  _createLoadOperation: function _createLoadOperation(deferred) {\n    var _this9 = this;\n\n    var operationId = this._operationManager.add(deferred);\n\n    var storeLoadOptions = this._createStoreLoadOptions();\n\n    deferred.always(function () {\n      return _this9._operationManager.remove(operationId);\n    });\n    return {\n      operationId: operationId,\n      storeLoadOptions: storeLoadOptions\n    };\n  },\n  reload: function reload() {\n    var store = this.store();\n\n    if (store instanceof CustomStore) {\n      store.clearRawDataCache();\n    }\n\n    this._init();\n\n    return this.load();\n  },\n  cancel: function cancel(operationId) {\n    return this._operationManager.cancel(operationId);\n  },\n  cancelAll: function cancelAll() {\n    return this._operationManager.cancelAll();\n  },\n  _addSearchOptions: function _addSearchOptions(storeLoadOptions) {\n    if (this._disposed) {\n      return;\n    }\n\n    if (this.store()._useDefaultSearch) {\n      this._addSearchFilter(storeLoadOptions);\n    } else {\n      storeLoadOptions.searchOperation = this._searchOperation;\n      storeLoadOptions.searchValue = this._searchValue;\n      storeLoadOptions.searchExpr = this._searchExpr;\n    }\n  },\n  _createStoreLoadOptions: function _createStoreLoadOptions() {\n    var result = extend({}, this._storeLoadOptions);\n\n    this._addSearchOptions(result);\n\n    if (this._paginate) {\n      if (this._pageSize) {\n        result.skip = this._pageIndex * this._pageSize;\n        result.take = this._pageSize;\n      }\n    }\n\n    result.userData = this._userData;\n    return result;\n  },\n  _addSearchFilter: function _addSearchFilter(storeLoadOptions) {\n    var value = this._searchValue;\n    var op = this._searchOperation;\n    var selector = this._searchExpr;\n    var searchFilter = [];\n\n    if (!value) {\n      return;\n    }\n\n    if (!selector) {\n      selector = \"this\";\n    }\n\n    if (!Array.isArray(selector)) {\n      selector = [selector];\n    }\n\n    each(selector, function (i, item) {\n      if (searchFilter.length) {\n        searchFilter.push(\"or\");\n      }\n\n      searchFilter.push([item, op, value]);\n    });\n\n    if (storeLoadOptions.filter) {\n      storeLoadOptions.filter = [searchFilter, storeLoadOptions.filter];\n    } else {\n      storeLoadOptions.filter = searchFilter;\n    }\n  },\n  _loadFromStore: function _loadFromStore(loadOptions, pendingDeferred) {\n    var _this10 = this;\n\n    var handleSuccess = function handleSuccess(data, extra) {\n      if (_this10._disposed) {\n        return;\n      }\n\n      if (!isPending(pendingDeferred)) {\n        return;\n      }\n\n      var loadResult = extend(normalizeLoadResult(data, extra), loadOptions);\n\n      _this10._eventsStrategy.fireEvent(\"customizeLoadResult\", [loadResult]);\n\n      when(loadResult.data).done(function (data) {\n        loadResult.data = data;\n\n        _this10._processStoreLoadResult(loadResult, pendingDeferred);\n      }).fail(pendingDeferred.reject);\n    };\n\n    if (loadOptions.data) {\n      return new Deferred().resolve(loadOptions.data).done(handleSuccess);\n    }\n\n    return this.store().load(loadOptions.storeLoadOptions).done(handleSuccess).fail(pendingDeferred.reject);\n  },\n  _processStoreLoadResult: function _processStoreLoadResult(loadResult, pendingDeferred) {\n    var _this11 = this;\n\n    var data = loadResult.data;\n    var extra = loadResult.extra;\n    var storeLoadOptions = loadResult.storeLoadOptions;\n\n    var resolvePendingDeferred = function resolvePendingDeferred() {\n      _this11._isLoaded = true;\n      _this11._totalCount = isFinite(extra.totalCount) ? extra.totalCount : -1;\n      return pendingDeferred.resolve(data, extra);\n    };\n\n    if (this._disposed) {\n      return;\n    }\n\n    data = this._applyPostProcessFunction(this._applyMapFunction(data));\n\n    if (!isPlainObject(extra)) {\n      extra = {};\n    }\n\n    this._items = data;\n\n    if (!data.length || !this._paginate || this._pageSize && data.length < this._pageSize) {\n      this._isLastPage = true;\n    }\n\n    if (storeLoadOptions.requireTotalCount && !isFinite(extra.totalCount)) {\n      (function () {\n        _this11.store().totalCount(storeLoadOptions).done(function (count) {\n          extra.totalCount = count;\n          resolvePendingDeferred();\n        }).fail(pendingDeferred.reject);\n      })();\n    } else {\n      resolvePendingDeferred();\n    }\n  },\n  _applyMapFunction: function _applyMapFunction(data) {\n    if (this._mapFunc) {\n      return mapDataRespectingGrouping(data, this._mapFunc, this.group());\n    }\n\n    return data;\n  },\n  _applyPostProcessFunction: function _applyPostProcessFunction(data) {\n    if (this._postProcessFunc) {\n      return this._postProcessFunc(data);\n    }\n\n    return data;\n  },\n  on: function on(eventName, eventHandler) {\n    this._eventsStrategy.on(eventName, eventHandler);\n\n    return this;\n  },\n  off: function off(eventName, eventHandler) {\n    this._eventsStrategy.off(eventName, eventHandler);\n\n    return this;\n  }\n});","map":null,"metadata":{},"sourceType":"module"}