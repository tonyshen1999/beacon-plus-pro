{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/tree_list/ui.tree_list.editing.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport \"./ui.tree_list.editor_factory\";\nimport $ from \"../../core/renderer\";\nimport errors from \"../widget/ui.errors\";\nimport { isDefined } from \"../../core/utils/type\";\nimport { extend } from \"../../core/utils/extend\";\nimport { Deferred } from \"../../core/utils/deferred\";\nimport messageLocalization from \"../../localization/message\";\nimport treeListCore from \"./ui.tree_list.core\";\nimport gridCoreUtils from \"../grid_core/ui.grid_core.utils\";\nimport { editingModule } from \"../grid_core/ui.grid_core.editing\";\nvar TREELIST_EXPAND_ICON_CONTAINER_CLASS = \"dx-treelist-icon-container\";\nvar SELECT_CHECKBOX_CLASS = \"dx-select-checkbox\";\nvar DATA_EDIT_DATA_INSERT_TYPE = \"insert\";\nvar EditingController = editingModule.controllers.editing.inherit({\n  _generateNewItem: function _generateNewItem(key) {\n    var item = this.callBase(key);\n    item.data = {\n      key: key\n    };\n    item.children = [];\n    item.level = 0;\n    item.parentKey = this.option(\"rootValue\");\n    return item;\n  },\n  _isProcessedItem: function _isProcessedItem() {\n    return true;\n  },\n  _setInsertAfterOrBeforeKey: function _setInsertAfterOrBeforeKey(change, parentKey) {\n    if (void 0 !== parentKey && parentKey !== this.option(\"rootValue\")) {\n      change.insertAfterKey = parentKey;\n    } else {\n      this.callBase.apply(this, arguments);\n    }\n  },\n  _getLoadedRowIndex: function _getLoadedRowIndex(items, change) {\n    var dataController = this.getController(\"data\");\n    var dataSourceAdapter = dataController.dataSource();\n    var parentKey = null === dataSourceAdapter || void 0 === dataSourceAdapter ? void 0 : dataSourceAdapter.parentKeyOf(change.data);\n\n    if (void 0 !== parentKey && parentKey !== this.option(\"rootValue\")) {\n      var rowIndex = gridCoreUtils.getIndexByKey(parentKey, items);\n\n      if (rowIndex >= 0 && this._dataController.isRowExpanded(parentKey)) {\n        return rowIndex + 1;\n      }\n\n      return -1;\n    }\n\n    return this.callBase.apply(this, arguments);\n  },\n  _isEditColumnVisible: function _isEditColumnVisible() {\n    var result = this.callBase.apply(this, arguments);\n    var editingOptions = this.option(\"editing\");\n    return result || editingOptions.allowAdding;\n  },\n  _isDefaultButtonVisible: function _isDefaultButtonVisible(button, options) {\n    var result = this.callBase.apply(this, arguments);\n    var row = options.row;\n\n    if (\"add\" === button.name) {\n      return this.allowAdding(options) && row.rowIndex !== this._getVisibleEditRowIndex() && !(row.removed || row.isNewRow);\n    }\n\n    return result;\n  },\n  _getEditingButtons: function _getEditingButtons(options) {\n    var buttons = this.callBase.apply(this, arguments);\n\n    if (!options.column.buttons) {\n      buttons.unshift(this._getButtonConfig(\"add\", options));\n    }\n\n    return buttons;\n  },\n  _beforeSaveEditData: function _beforeSaveEditData(change) {\n    var dataController = this._dataController;\n    var result = this.callBase.apply(this, arguments);\n\n    if (change && change.type !== DATA_EDIT_DATA_INSERT_TYPE) {\n      var store = null === dataController || void 0 === dataController ? void 0 : dataController.store();\n      var key = null === store || void 0 === store ? void 0 : store.key();\n\n      if (!isDefined(key)) {\n        throw errors.Error(\"E1045\");\n      }\n    }\n\n    return result;\n  },\n  addRowByRowIndex: function addRowByRowIndex(rowIndex) {\n    var dataController = this.getController(\"data\");\n    var row = dataController.getVisibleRows()[rowIndex];\n    return this.addRow(row ? row.key : void 0);\n  },\n  addRow: function addRow(key) {\n    if (void 0 === key) {\n      key = this.option(\"rootValue\");\n    }\n\n    return this.callBase.call(this, key);\n  },\n  _addRowCore: function _addRowCore(data, parentKey, oldEditRowIndex) {\n    var _this = this;\n\n    var callBase = this.callBase;\n    var rootValue = this.option(\"rootValue\");\n    var dataController = this.getController(\"data\");\n    var dataSourceAdapter = dataController.dataSource();\n    var parentKeyGetter = dataSourceAdapter.createParentIdGetter();\n    parentKey = parentKeyGetter(data);\n\n    if (void 0 !== parentKey && parentKey !== rootValue && !dataController.isRowExpanded(parentKey)) {\n      var deferred = new Deferred();\n      dataController.expandRow(parentKey).done(function () {\n        setTimeout(function () {\n          callBase.call(_this, data, parentKey, oldEditRowIndex).done(deferred.resolve).fail(deferred.reject);\n        });\n      }).fail(deferred.reject);\n      return deferred.promise();\n    }\n\n    return callBase.call(this, data, parentKey, oldEditRowIndex);\n  },\n  _initNewRow: function _initNewRow(options, parentKey) {\n    var dataController = this.getController(\"data\");\n    var dataSourceAdapter = dataController.dataSource();\n    var parentIdSetter = dataSourceAdapter.createParentIdSetter();\n    parentIdSetter(options.data, parentKey);\n    return this.callBase.apply(this, arguments);\n  },\n  allowAdding: function allowAdding(options) {\n    return this._allowEditAction(\"allowAdding\", options);\n  },\n  _needToCloseEditableCell: function _needToCloseEditableCell($targetElement) {\n    return this.callBase.apply(this, arguments) || $targetElement.closest(\".\" + TREELIST_EXPAND_ICON_CONTAINER_CLASS).length && this.isEditing();\n  },\n  getButtonLocalizationNames: function getButtonLocalizationNames() {\n    var names = this.callBase.apply(this);\n    names.add = \"dxTreeList-editingAddRowToNode\";\n    return names;\n  }\n});\nvar originalRowClick = editingModule.extenders.views.rowsView._rowClick;\nvar originalRowDblClick = editingModule.extenders.views.rowsView._rowDblClick;\n\nvar validateClick = function validateClick(e) {\n  var $targetElement = $(e.event.target);\n  var originalClickHandler = \"dxdblclick\" === e.event.type ? originalRowDblClick : originalRowClick;\n\n  if ($targetElement.closest(\".\" + SELECT_CHECKBOX_CLASS).length) {\n    return false;\n  }\n\n  return !needToCallOriginalClickHandler.call(this, e, originalClickHandler);\n};\n\nfunction needToCallOriginalClickHandler(e, originalClickHandler) {\n  var $targetElement = $(e.event.target);\n\n  if (!$targetElement.closest(\".\" + TREELIST_EXPAND_ICON_CONTAINER_CLASS).length) {\n    originalClickHandler.call(this, e);\n    return true;\n  }\n\n  return false;\n}\n\nvar RowsViewExtender = extend({}, editingModule.extenders.views.rowsView, {\n  _renderCellCommandContent: function _renderCellCommandContent($container, options) {\n    var editingController = this._editingController;\n    var isEditRow = options.row && editingController.isEditRow(options.row.rowIndex);\n    var isEditing = options.isEditing || isEditRow;\n\n    if (!isEditing) {\n      return this.callBase.apply(this, arguments);\n    }\n\n    return false;\n  },\n  _rowClick: function _rowClick(e) {\n    if (validateClick.call(this, e)) {\n      this.callBase.apply(this, arguments);\n    }\n  },\n  _rowDblClick: function _rowDblClick(e) {\n    if (validateClick.call(this, e)) {\n      this.callBase.apply(this, arguments);\n    }\n  }\n});\ntreeListCore.registerModule(\"editing\", {\n  defaultOptions: function defaultOptions() {\n    return extend(true, editingModule.defaultOptions(), {\n      editing: {\n        texts: {\n          addRowToNode: messageLocalization.format(\"dxTreeList-editingAddRowToNode\")\n        }\n      }\n    });\n  },\n  controllers: {\n    editing: EditingController\n  },\n  extenders: {\n    controllers: extend(true, {}, editingModule.extenders.controllers, {\n      data: {\n        changeRowExpand: function changeRowExpand() {\n          this._editingController.refresh();\n\n          return this.callBase.apply(this, arguments);\n        }\n      }\n    }),\n    views: {\n      rowsView: RowsViewExtender,\n      headerPanel: editingModule.extenders.views.headerPanel\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"module"}