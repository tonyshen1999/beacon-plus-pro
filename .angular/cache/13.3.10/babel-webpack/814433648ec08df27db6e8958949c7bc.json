{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scroll_view/ui.scroll_view.native.swipe_down.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getOuterHeight } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport Callbacks from \"../../core/utils/callbacks\";\nimport { move } from \"../../animation/translator\";\nimport { eventData } from \"../../events/utils/index\";\nimport NativeStrategy from \"./ui.scrollable.native\";\nimport LoadIndicator from \"../load_indicator\";\nimport { Deferred } from \"../../core/utils/deferred\";\nvar SCROLLVIEW_PULLDOWN_DOWN_LOADING_CLASS = \"dx-scrollview-pull-down-loading\";\nvar SCROLLVIEW_PULLDOWN_INDICATOR_CLASS = \"dx-scrollview-pull-down-indicator\";\nvar SCROLLVIEW_PULLDOWN_REFRESHING_CLASS = \"dx-scrollview-pull-down-refreshing\";\nvar PULLDOWN_ICON_CLASS = \"dx-icon-pulldown\";\nvar STATE_RELEASED = 0;\nvar STATE_READY = 1;\nvar STATE_REFRESHING = 2;\nvar STATE_TOUCHED = 4;\nvar STATE_PULLED = 5;\nvar SwipeDownNativeScrollViewStrategy = NativeStrategy.inherit({\n  _init: function _init(scrollView) {\n    this.callBase(scrollView);\n    this._$topPocket = scrollView._$topPocket;\n    this._$pullDown = scrollView._$pullDown;\n    this._$scrollViewContent = $(scrollView.content());\n    this._$container = $(scrollView.container());\n\n    this._initCallbacks();\n\n    this._location = 0;\n  },\n  _initCallbacks: function _initCallbacks() {\n    this.pullDownCallbacks = Callbacks();\n    this.releaseCallbacks = Callbacks();\n    this.reachBottomCallbacks = Callbacks();\n  },\n  render: function render() {\n    this.callBase();\n\n    this._renderPullDown();\n\n    this._releaseState();\n  },\n  _renderPullDown: function _renderPullDown() {\n    var $loadContainer = $(\"<div>\").addClass(SCROLLVIEW_PULLDOWN_INDICATOR_CLASS);\n    var $loadIndicator = new LoadIndicator($(\"<div>\")).$element();\n    this._$icon = $(\"<div>\").addClass(PULLDOWN_ICON_CLASS);\n\n    this._$pullDown.empty().append(this._$icon).append($loadContainer.append($loadIndicator));\n  },\n  _releaseState: function _releaseState() {\n    this._state = STATE_RELEASED;\n\n    this._releasePullDown();\n\n    this._updateDimensions();\n  },\n  _releasePullDown: function _releasePullDown() {\n    this._$pullDown.css({\n      opacity: 0\n    });\n  },\n  _updateDimensions: function _updateDimensions() {\n    this.callBase();\n    this._topPocketSize = this._$topPocket.get(0).clientHeight;\n\n    var contentEl = this._$scrollViewContent.get(0);\n\n    var containerEl = this._$container.get(0);\n\n    this._bottomBoundary = Math.max(contentEl.clientHeight - containerEl.clientHeight, 0);\n  },\n  _allowedDirections: function _allowedDirections() {\n    var allowedDirections = this.callBase();\n    allowedDirections.vertical = allowedDirections.vertical || this._pullDownEnabled;\n    return allowedDirections;\n  },\n  handleInit: function handleInit(e) {\n    this.callBase(e);\n\n    if (this._state === STATE_RELEASED && 0 === this._location) {\n      this._startClientY = eventData(e.originalEvent).y;\n      this._state = STATE_TOUCHED;\n    }\n  },\n  handleMove: function handleMove(e) {\n    this.callBase(e);\n    this._deltaY = eventData(e.originalEvent).y - this._startClientY;\n\n    if (this._state === STATE_TOUCHED) {\n      if (this._pullDownEnabled && this._deltaY > 0) {\n        this._state = STATE_PULLED;\n      } else {\n        this._complete();\n      }\n    }\n\n    if (this._state === STATE_PULLED) {\n      e.preventDefault();\n\n      this._movePullDown();\n    }\n  },\n  _movePullDown: function _movePullDown() {\n    var pullDownHeight = this._getPullDownHeight();\n\n    var top = Math.min(3 * pullDownHeight, this._deltaY + this._getPullDownStartPosition());\n    var angle = 180 * top / pullDownHeight / 3;\n\n    this._$pullDown.css({\n      opacity: 1\n    }).toggleClass(SCROLLVIEW_PULLDOWN_REFRESHING_CLASS, top < pullDownHeight);\n\n    move(this._$pullDown, {\n      top: top\n    });\n\n    this._$icon.css({\n      transform: \"rotate(\" + angle + \"deg)\"\n    });\n  },\n  _isPullDown: function _isPullDown() {\n    return this._pullDownEnabled && this._state === STATE_PULLED && this._deltaY >= this._getPullDownHeight() - this._getPullDownStartPosition();\n  },\n  _getPullDownHeight: function _getPullDownHeight() {\n    return Math.round(.05 * getOuterHeight(this._$element));\n  },\n  _getPullDownStartPosition: function _getPullDownStartPosition() {\n    return -Math.round(1.5 * getOuterHeight(this._$pullDown));\n  },\n  handleEnd: function handleEnd() {\n    if (this._isPullDown()) {\n      this._pullDownRefreshing();\n    }\n\n    this._complete();\n  },\n  handleStop: function handleStop() {\n    this._complete();\n  },\n  _complete: function _complete() {\n    if (this._state === STATE_TOUCHED || this._state === STATE_PULLED) {\n      this._releaseState();\n    }\n  },\n  handleScroll: function handleScroll(e) {\n    this.callBase(e);\n\n    if (this._state === STATE_REFRESHING) {\n      return;\n    }\n\n    var currentLocation = this.location().top;\n    var scrollDelta = this._location - currentLocation;\n    this._location = currentLocation;\n\n    if (scrollDelta > 0 && this._isReachBottom()) {\n      this._reachBottom();\n    } else {\n      this._stateReleased();\n    }\n  },\n  _isReachBottom: function _isReachBottom() {\n    return this._reachBottomEnabled && Math.round(this._bottomBoundary + Math.floor(this._location)) <= 1;\n  },\n  _reachBottom: function _reachBottom() {\n    this.reachBottomCallbacks.fire();\n  },\n  _stateReleased: function _stateReleased() {\n    if (this._state === STATE_RELEASED) {\n      return;\n    }\n\n    this._$pullDown.removeClass(SCROLLVIEW_PULLDOWN_DOWN_LOADING_CLASS);\n\n    this._releaseState();\n  },\n  _pullDownRefreshing: function _pullDownRefreshing() {\n    this._state = STATE_REFRESHING;\n\n    this._pullDownRefreshHandler();\n  },\n  _pullDownRefreshHandler: function _pullDownRefreshHandler() {\n    this._refreshPullDown();\n\n    this.pullDownCallbacks.fire();\n  },\n  _refreshPullDown: function _refreshPullDown() {\n    this._$pullDown.addClass(SCROLLVIEW_PULLDOWN_DOWN_LOADING_CLASS);\n\n    move(this._$pullDown, {\n      top: this._getPullDownHeight()\n    });\n  },\n  pullDownEnable: function pullDownEnable(enabled) {\n    this._$topPocket.toggle(enabled);\n\n    this._pullDownEnabled = enabled;\n  },\n  reachBottomEnable: function reachBottomEnable(enabled) {\n    this._reachBottomEnabled = enabled;\n  },\n  pendingRelease: function pendingRelease() {\n    this._state = STATE_READY;\n  },\n  release: function release() {\n    var deferred = new Deferred();\n\n    this._updateDimensions();\n\n    clearTimeout(this._releaseTimeout);\n    this._releaseTimeout = setTimeout(function () {\n      this._stateReleased();\n\n      this.releaseCallbacks.fire();\n\n      this._updateAction();\n\n      deferred.resolve();\n    }.bind(this), 800);\n    return deferred.promise();\n  },\n  dispose: function dispose() {\n    clearTimeout(this._pullDownRefreshTimeout);\n    clearTimeout(this._releaseTimeout);\n    this.callBase();\n  }\n});\nexport default SwipeDownNativeScrollViewStrategy;","map":null,"metadata":{},"sourceType":"module"}