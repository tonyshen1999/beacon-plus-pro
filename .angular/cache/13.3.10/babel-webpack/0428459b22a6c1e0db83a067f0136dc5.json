{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.context_menu.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { getPublicElement } from \"../../core/element\";\nimport { noop } from \"../../core/utils/common\";\nimport { each } from \"../../core/utils/iterator\";\nimport modules from \"./ui.grid_core.modules\";\nimport ContextMenu from \"../context_menu\";\nvar CONTEXT_MENU = \"dx-context-menu\";\nvar viewName = {\n  columnHeadersView: \"header\",\n  rowsView: \"content\",\n  footerView: \"footer\",\n  headerPanel: \"headerPanel\"\n};\nvar VIEW_NAMES = [\"columnHeadersView\", \"rowsView\", \"footerView\", \"headerPanel\"];\nvar ContextMenuController = modules.ViewController.inherit({\n  init: function init() {\n    this.createAction(\"onContextMenuPreparing\");\n  },\n  getContextMenuItems: function getContextMenuItems(dxEvent) {\n    if (!dxEvent) {\n      return false;\n    }\n\n    var that = this;\n    var $targetElement = $(dxEvent.target);\n    var $element;\n    var $targetRowElement;\n    var $targetCellElement;\n    var menuItems;\n    each(VIEW_NAMES, function () {\n      var view = that.getView(this);\n      $element = view && view.element();\n\n      if ($element && ($element.is($targetElement) || $element.find($targetElement).length)) {\n        var _rowOptions$cells;\n\n        $targetCellElement = $targetElement.closest(\".dx-row > td, .dx-row > tr\");\n        $targetRowElement = $targetCellElement.parent();\n        var rowIndex = view.getRowIndex($targetRowElement);\n        var columnIndex = $targetCellElement[0] && $targetCellElement[0].cellIndex;\n        var rowOptions = $targetRowElement.data(\"options\");\n        var options = {\n          event: dxEvent,\n          targetElement: getPublicElement($targetElement),\n          target: viewName[this],\n          rowIndex: rowIndex,\n          row: view._getRows()[rowIndex],\n          columnIndex: columnIndex,\n          column: null === rowOptions || void 0 === rowOptions ? void 0 : null === (_rowOptions$cells = rowOptions.cells) || void 0 === _rowOptions$cells ? void 0 : _rowOptions$cells[columnIndex].column\n        };\n        options.items = view.getContextMenuItems && view.getContextMenuItems(options);\n        that.executeAction(\"onContextMenuPreparing\", options);\n\n        that._contextMenuPrepared(options);\n\n        menuItems = options.items;\n\n        if (menuItems) {\n          return false;\n        }\n      }\n    });\n    return menuItems;\n  },\n  _contextMenuPrepared: noop\n});\nvar ContextMenuView = modules.View.inherit({\n  _renderCore: function _renderCore() {\n    var that = this;\n    var $element = that.element().addClass(CONTEXT_MENU);\n    this.setAria(\"role\", \"presentation\", $element);\n\n    this._createComponent($element, ContextMenu, {\n      onPositioning: function onPositioning(actionArgs) {\n        var event = actionArgs.event;\n        var contextMenuInstance = actionArgs.component;\n        var items = that.getController(\"contextMenu\").getContextMenuItems(event);\n\n        if (items) {\n          contextMenuInstance.option(\"items\", items);\n          event.stopPropagation();\n        } else {\n          actionArgs.cancel = true;\n        }\n      },\n      onItemClick: function onItemClick(params) {\n        params.itemData.onItemClick && params.itemData.onItemClick(params);\n      },\n      cssClass: that.getWidgetContainerClass(),\n      target: that.component.$element()\n    });\n  }\n});\nexport var contextMenuModule = {\n  defaultOptions: function defaultOptions() {\n    return {\n      onContextMenuPreparing: null\n    };\n  },\n  controllers: {\n    contextMenu: ContextMenuController\n  },\n  views: {\n    contextMenuView: ContextMenuView\n  }\n};","map":null,"metadata":{},"sourceType":"module"}