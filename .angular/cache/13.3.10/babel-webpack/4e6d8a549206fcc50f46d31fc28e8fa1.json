{"ast":null,"code":"import _toConsumableArray from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/header/header.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport $ from \"../../../core/renderer\";\nimport { extend } from \"../../../core/utils/extend\";\nimport registerComponent from \"../../../core/component_registrator\";\nimport errors from \"../../../core/errors\";\nimport devices from \"../../../core/devices\";\nimport Widget from \"../../widget/ui.widget\";\nimport Toolbar from \"../../toolbar\";\nimport SchedulerCalendar from \"./calendar\";\nimport dateUtils from \"../../../core/utils/date\";\nimport { getViewSwitcher, getDropDownViewSwitcher } from \"./viewSwitcher\";\nimport { getDateNavigator } from \"./dateNavigator\";\nimport \"../../../ui/button_group\";\nimport \"../../../ui/drop_down_button\";\nimport { getCaption, getNextIntervalDate, validateViews, getStep, getViewType, nextWeek } from \"./utils\";\nvar DEFAULT_ELEMENT = \"defaultElement\";\nvar VIEW_SWITCHER = \"viewSwitcher\";\nvar DATE_NAVIGATOR = \"dateNavigator\";\nvar COMPONENT_CLASS = \"dx-scheduler-header\";\nexport var SchedulerHeader = /*#__PURE__*/function (_Widget) {\n  _inherits(SchedulerHeader, _Widget);\n\n  var _super = _createSuper(SchedulerHeader);\n\n  function SchedulerHeader() {\n    _classCallCheck(this, SchedulerHeader);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SchedulerHeader, [{\n    key: \"views\",\n    get: function get() {\n      return this.option(\"views\");\n    }\n  }, {\n    key: \"captionText\",\n    get: function get() {\n      return this._getCaption().text;\n    }\n  }, {\n    key: \"intervalOptions\",\n    get: function get() {\n      var step = getStep(this.currentView);\n      var intervalCount = this.option(\"intervalCount\");\n      var firstDayOfWeek = this.option(\"firstDayOfWeek\");\n      var agendaDuration = this.option(\"agendaDuration\");\n      return {\n        step: step,\n        intervalCount: intervalCount,\n        firstDayOfWeek: firstDayOfWeek,\n        agendaDuration: agendaDuration\n      };\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function _getDefaultOptions() {\n      return extend(_get(_getPrototypeOf(SchedulerHeader.prototype), \"_getDefaultOptions\", this).call(this), {\n        _useShortDateFormat: !devices.real().generic || devices.isSimulator()\n      });\n    }\n  }, {\n    key: \"_createEventMap\",\n    value: function _createEventMap() {\n      var _this = this;\n\n      this.eventMap = new Map([[\"currentView\", [function (view) {\n        return _this.currentView = view;\n      }]], [\"items\", [this.repaint.bind(this)]], [\"views\", [validateViews]], [\"currentDate\", [this._getCalendarOptionUpdater(\"date\")]], [\"min\", [this._getCalendarOptionUpdater(\"min\")]], [\"max\", [this._getCalendarOptionUpdater(\"max\")]], [\"tabIndex\", [this.repaint.bind(this)]], [\"focusStateEnabled\", [this.repaint.bind(this)]], [\"useDropDownViewSwitcher\", [this.repaint.bind(this)]]]);\n    }\n  }, {\n    key: \"_addEvent\",\n    value: function _addEvent(name, event) {\n      if (!this.eventMap.has(name)) {\n        this.eventMap.set(name, []);\n      }\n\n      var events = this.eventMap.get(name);\n      this.eventMap.set(name, [].concat(_toConsumableArray(events), [event]));\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function _optionChanged(args) {\n      var name = args.name,\n          value = args.value;\n\n      if (this.eventMap.has(name)) {\n        var events = this.eventMap.get(name);\n        events.forEach(function (event) {\n          event(value);\n        });\n      }\n    }\n  }, {\n    key: \"_init\",\n    value: function _init() {\n      _get(_getPrototypeOf(SchedulerHeader.prototype), \"_init\", this).call(this);\n\n      this._createEventMap();\n\n      this.$element().addClass(COMPONENT_CLASS);\n      this.currentView = this.option(\"currentView\");\n    }\n  }, {\n    key: \"_render\",\n    value: function _render() {\n      _get(_getPrototypeOf(SchedulerHeader.prototype), \"_render\", this).call(this);\n\n      this._createEventMap();\n\n      this._renderToolbar();\n    }\n  }, {\n    key: \"_renderToolbar\",\n    value: function _renderToolbar() {\n      var config = this._createToolbarConfig();\n\n      var toolbarElement = $(\"<div>\");\n      toolbarElement.appendTo(this.$element());\n      this._toolbar = this._createComponent(toolbarElement, Toolbar, config);\n    }\n  }, {\n    key: \"_createToolbarConfig\",\n    value: function _createToolbarConfig() {\n      var _this2 = this;\n\n      var items = this.option(\"items\");\n      var parsedItems = items.map(function (element) {\n        return _this2._parseItem(element);\n      });\n      return {\n        items: parsedItems\n      };\n    }\n  }, {\n    key: \"_parseItem\",\n    value: function _parseItem(item) {\n      var isDefaultElement = this._isDefaultItem(item);\n\n      if (isDefaultElement) {\n        var defaultElementType = item[DEFAULT_ELEMENT];\n\n        switch (defaultElementType) {\n          case VIEW_SWITCHER:\n            if (this.option(\"useDropDownViewSwitcher\")) {\n              return getDropDownViewSwitcher(this, item);\n            }\n\n            return getViewSwitcher(this, item);\n\n          case DATE_NAVIGATOR:\n            this._renderCalendar();\n\n            return getDateNavigator(this, item);\n\n          default:\n            errors.log(\"Unknown default element type: \".concat(defaultElementType));\n        }\n      }\n\n      return item;\n    }\n  }, {\n    key: \"_callEvent\",\n    value: function _callEvent(event, arg) {\n      if (this.eventMap.has(event)) {\n        var events = this.eventMap.get(event);\n        events.forEach(function (event) {\n          return event(arg);\n        });\n      }\n    }\n  }, {\n    key: \"_updateCurrentView\",\n    value: function _updateCurrentView(view) {\n      var onCurrentViewChange = this.option(\"onCurrentViewChange\");\n      onCurrentViewChange(view.name);\n\n      this._callEvent(\"currentView\", view);\n    }\n  }, {\n    key: \"_updateCurrentDate\",\n    value: function _updateCurrentDate(date) {\n      var onCurrentDateChange = this.option(\"onCurrentDateChange\");\n      onCurrentDateChange(date);\n\n      this._callEvent(\"currentDate\", date);\n    }\n  }, {\n    key: \"_renderCalendar\",\n    value: function _renderCalendar() {\n      var _this3 = this;\n\n      this._calendar = this._createComponent(\"<div>\", SchedulerCalendar, {\n        date: this.option(\"currentDate\"),\n        min: this.option(\"min\"),\n        max: this.option(\"max\"),\n        firstDayOfWeek: this.option(\"firstDayOfWeek\"),\n        focusStateEnabled: this.option(\"focusStateEnabled\"),\n        tabIndex: this.option(\"tabIndex\"),\n        onValueChanged: function onValueChanged(e) {\n          var date = e.value;\n\n          _this3._updateCurrentDate(date);\n\n          _this3._calendar.hide();\n        }\n      });\n\n      this._calendar.$element().appendTo(this.$element());\n    }\n  }, {\n    key: \"_getCalendarOptionUpdater\",\n    value: function _getCalendarOptionUpdater(name) {\n      var _this4 = this;\n\n      return function (value) {\n        if (_this4._calendar) {\n          _this4._calendar.option(name, value);\n        }\n      };\n    }\n  }, {\n    key: \"_getNextDate\",\n    value: function _getNextDate(direction) {\n      var initialDate = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;\n      var date = initialDate || this.option(\"currentDate\");\n\n      var options = _extends({}, this.intervalOptions, {\n        date: date\n      });\n\n      return getNextIntervalDate(options, direction);\n    }\n  }, {\n    key: \"_isMonth\",\n    value: function _isMonth() {\n      var currentView = this.currentView;\n      return \"month\" === getViewType(currentView);\n    }\n  }, {\n    key: \"_getDisplayedDate\",\n    value: function _getDisplayedDate() {\n      var startViewDate = this.option(\"startViewDate\");\n\n      if (this._isMonth()) {\n        return nextWeek(startViewDate);\n      }\n\n      return new Date(startViewDate);\n    }\n  }, {\n    key: \"_getCaption\",\n    value: function _getCaption() {\n      var date = this.option(\"currentDate\");\n\n      if (this.option(\"startViewDate\")) {\n        date = this._getDisplayedDate();\n      }\n\n      date = dateUtils.trimTime(date);\n\n      var options = _extends({}, this.intervalOptions, {\n        date: date\n      });\n\n      var customizationFunction = this.option(\"customizeDateNavigatorText\");\n      var useShortDateFormat = this.option(\"_useShortDateFormat\");\n      return getCaption(options, useShortDateFormat, customizationFunction);\n    }\n  }, {\n    key: \"_updateDateByDirection\",\n    value: function _updateDateByDirection(direction) {\n      var date = this._getNextDate(direction);\n\n      this._updateCurrentDate(date);\n    }\n  }, {\n    key: \"_showCalendar\",\n    value: function _showCalendar(e) {\n      this._calendar.show(e.element);\n    }\n  }, {\n    key: \"_hideCalendar\",\n    value: function _hideCalendar() {\n      this._calendar.hide();\n    }\n  }, {\n    key: \"_isDefaultItem\",\n    value: function _isDefaultItem(item) {\n      return Object.prototype.hasOwnProperty.call(item, DEFAULT_ELEMENT);\n    }\n  }]);\n\n  return SchedulerHeader;\n}(Widget);\nregisterComponent(\"dxSchedulerHeader\", SchedulerHeader);","map":null,"metadata":{},"sourceType":"module"}