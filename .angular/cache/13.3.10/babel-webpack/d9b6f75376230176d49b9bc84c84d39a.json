{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.notification.progress_panel.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport { ensureDefined } from \"../../core/utils/common\";\nimport { getImageContainer } from \"../../core/utils/icon\";\nimport messageLocalization from \"../../localization/message\";\nimport Widget from \"../widget/ui.widget\";\nimport ProgressBar from \"../progress_bar\";\nimport Button from \"../button\";\nimport ScrollView from \"../scroll_view\";\nvar FILE_MANAGER_PROGRESS_PANEL_CLASS = \"dx-filemanager-progress-panel\";\nvar FILE_MANAGER_PROGRESS_PANEL_CONTAINER_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_PANEL_CLASS, \"-container\");\nvar FILE_MANAGER_PROGRESS_PANEL_TITLE_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_PANEL_CLASS, \"-title\");\nvar FILE_MANAGER_PROGRESS_PANEL_TITLE_TEXT_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_PANEL_CLASS, \"-title-text\");\nvar FILE_MANAGER_PROGRESS_PANEL_CLOSE_BUTTON_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_PANEL_CLASS, \"-close-button\");\nvar FILE_MANAGER_PROGRESS_PANEL_INFOS_CONTAINER_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_PANEL_CLASS, \"-infos-container\");\nvar FILE_MANAGER_PROGRESS_PANEL_SEPARATOR_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_PANEL_CLASS, \"-separator\");\nvar FILE_MANAGER_PROGRESS_PANEL_INFO_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_PANEL_CLASS, \"-info\");\nvar FILE_MANAGER_PROGRESS_PANEL_COMMON_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_PANEL_CLASS, \"-common\");\nvar FILE_MANAGER_PROGRESS_PANEL_INFO_WITH_DETAILS_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_PANEL_CLASS, \"-info-with-details\");\nvar FILE_MANAGER_PROGRESS_PANEL_DETAILS_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_PANEL_CLASS, \"-details\");\nvar FILE_MANAGER_PROGRESS_BOX_CLASS = \"dx-filemanager-progress-box\";\nvar FILE_MANAGER_PROGRESS_BOX_ERROR_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_BOX_CLASS, \"-error\");\nvar FILE_MANAGER_PROGRESS_BOX_WITHOUT_CLOSE_BUTTON_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_BOX_CLASS, \"-without-close-button\");\nvar FILE_MANAGER_PROGRESS_BOX_IMAGE_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_BOX_CLASS, \"-image\");\nvar FILE_MANAGER_PROGRESS_BOX_WRAPPER_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_BOX_CLASS, \"-wrapper\");\nvar FILE_MANAGER_PROGRESS_BOX_COMMON_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_BOX_CLASS, \"-common\");\nvar FILE_MANAGER_PROGRESS_BOX_PROGRESS_BAR_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_BOX_CLASS, \"-progress-bar\");\nvar FILE_MANAGER_PROGRESS_BOX_CLOSE_BUTTON_CLASS = \"\".concat(FILE_MANAGER_PROGRESS_BOX_CLASS, \"-close-button\");\nvar DX_CARD_CLASS = \"dx-card\";\n\nvar FileManagerProgressPanel = /*#__PURE__*/function (_Widget) {\n  _inherits(FileManagerProgressPanel, _Widget);\n\n  var _super = _createSuper(FileManagerProgressPanel);\n\n  function FileManagerProgressPanel() {\n    _classCallCheck(this, FileManagerProgressPanel);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FileManagerProgressPanel, [{\n    key: \"_initMarkup\",\n    value: function _initMarkup() {\n      var _this = this;\n\n      _get(_getPrototypeOf(FileManagerProgressPanel.prototype), \"_initMarkup\", this).call(this);\n\n      this._initActions();\n\n      this._operationCount = 0;\n      this.$element().addClass(FILE_MANAGER_PROGRESS_PANEL_CLASS);\n      var $scrollView = $(\"<div>\").appendTo(this.$element());\n      var $container = $(\"<div>\").addClass(FILE_MANAGER_PROGRESS_PANEL_CONTAINER_CLASS).appendTo($scrollView);\n      this._scrollView = this._createComponent($scrollView, ScrollView, {\n        scrollByContent: true,\n        scrollByThumb: true,\n        showScrollbar: \"onScroll\"\n      });\n      var $title = $(\"<div>\").addClass(FILE_MANAGER_PROGRESS_PANEL_TITLE_CLASS).appendTo($container);\n      $(\"<div>\").text(messageLocalization.format(\"dxFileManager-notificationProgressPanelTitle\")).addClass(FILE_MANAGER_PROGRESS_PANEL_TITLE_TEXT_CLASS).appendTo($title);\n      var $closeButton = $(\"<div>\").addClass(FILE_MANAGER_PROGRESS_PANEL_CLOSE_BUTTON_CLASS).appendTo($title);\n\n      this._createComponent($closeButton, Button, {\n        icon: \"close\",\n        stylingMode: \"text\",\n        onClick: function onClick() {\n          return _this._raisePanelClosed();\n        }\n      });\n\n      this._$infosContainer = $(\"<div>\").addClass(FILE_MANAGER_PROGRESS_PANEL_INFOS_CONTAINER_CLASS).appendTo($container);\n\n      this._renderEmptyListText();\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function _getDefaultOptions() {\n      return extend(_get(_getPrototypeOf(FileManagerProgressPanel.prototype), \"_getDefaultOptions\", this).call(this), {\n        onOperationClosed: null,\n        onOperationCanceled: null,\n        onOperationItemCanceled: null,\n        onPanelClosed: null\n      });\n    }\n  }, {\n    key: \"_initActions\",\n    value: function _initActions() {\n      this._actions = {\n        onOperationClosed: this._createActionByOption(\"onOperationClosed\"),\n        onOperationCanceled: this._createActionByOption(\"onOperationCanceled\"),\n        onOperationItemCanceled: this._createActionByOption(\"onOperationItemCanceled\"),\n        onPanelClosed: this._createActionByOption(\"onPanelClosed\")\n      };\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function _optionChanged(args) {\n      var name = args.name;\n\n      switch (name) {\n        case \"test\":\n          break;\n\n        case \"onOperationClosed\":\n        case \"onOperationCanceled\":\n        case \"onOperationItemCanceled\":\n          this._actions[name] = this._createActionByOption(name);\n          break;\n\n        default:\n          _get(_getPrototypeOf(FileManagerProgressPanel.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }, {\n    key: \"addOperation\",\n    value: function addOperation(commonText, showCloseButtonAlways, allowProgressAutoUpdate) {\n      var _this2 = this;\n\n      if (this._operationCount) {\n        $(\"<div>\").addClass(FILE_MANAGER_PROGRESS_PANEL_SEPARATOR_CLASS).prependTo(this._$infosContainer);\n      } else {\n        this._$infosContainer.empty();\n      }\n\n      this._operationCount++;\n      var info = {\n        customCloseHandling: showCloseButtonAlways,\n        allowProgressAutoUpdate: ensureDefined(allowProgressAutoUpdate, true)\n      };\n      var $info = $(\"<div>\").addClass(FILE_MANAGER_PROGRESS_PANEL_INFO_CLASS).prependTo(this._$infosContainer);\n      info.$info = $info;\n      var $common = $(\"<div>\").addClass(FILE_MANAGER_PROGRESS_PANEL_COMMON_CLASS).appendTo($info);\n      info.common = this._createProgressBox($common, {\n        commonText: commonText,\n        showCloseButton: true,\n        showCloseButtonAlways: showCloseButtonAlways,\n        onCloseButtonClick: function onCloseButtonClick() {\n          return _this2._closeOperation(info);\n        }\n      });\n      return info;\n    }\n  }, {\n    key: \"addOperationDetails\",\n    value: function addOperationDetails(info, details, showCloseButton) {\n      var _this3 = this;\n\n      info.$info.addClass(FILE_MANAGER_PROGRESS_PANEL_INFO_WITH_DETAILS_CLASS);\n      var $details = $(\"<div>\").addClass(FILE_MANAGER_PROGRESS_PANEL_DETAILS_CLASS).appendTo(info.$info);\n      info.details = details.map(function (itemInfo, index) {\n        itemInfo.info = info;\n        return _this3._createDetailsItem($details, itemInfo, index, false, showCloseButton);\n      });\n    }\n  }, {\n    key: \"_createDetailsItem\",\n    value: function _createDetailsItem($container, item, itemIndex, skipProgressBox, showCloseButton) {\n      var _this4 = this;\n\n      var $detailsItem = $(\"<div>\").appendTo($container);\n\n      if (-1 !== itemIndex) {\n        $detailsItem.addClass(DX_CARD_CLASS);\n      }\n\n      return this._createProgressBox($detailsItem, {\n        commonText: item.commonText,\n        imageUrl: item.imageUrl,\n        skipProgressBox: skipProgressBox,\n        showCloseButton: showCloseButton,\n        showCloseButtonAlways: showCloseButton,\n        onCloseButtonClick: function onCloseButtonClick() {\n          return _this4._cancelOperationItem(item, itemIndex);\n        }\n      });\n    }\n  }, {\n    key: \"completeOperationItem\",\n    value: function completeOperationItem(operationInfo, itemIndex, commonProgress) {\n      if (operationInfo.allowProgressAutoUpdate) {\n        this.updateOperationItemProgress(operationInfo, itemIndex, 100, commonProgress);\n      }\n\n      this._setCloseButtonVisible(operationInfo.details[itemIndex], false);\n    }\n  }, {\n    key: \"updateOperationItemProgress\",\n    value: function updateOperationItemProgress(operationInfo, itemIndex, itemProgress, commonProgress) {\n      operationInfo.common.progressBar.option(\"value\", commonProgress);\n\n      if (operationInfo.details) {\n        var detailsItem = operationInfo.details[itemIndex];\n        detailsItem.progressBar.option(\"value\", itemProgress);\n      }\n    }\n  }, {\n    key: \"completeOperation\",\n    value: function completeOperation(info, commonText, isError, statusText) {\n      info.completed = true;\n      info.common.$commonText.text(commonText);\n\n      if (isError) {\n        this._removeProgressBar(info.common);\n      } else if (info.allowProgressAutoUpdate) {\n        info.common.progressBar.option(\"value\", 100);\n      }\n\n      if (statusText) {\n        this._setProgressBarText(info.common, statusText);\n      }\n\n      this._setCloseButtonVisible(info.common, true);\n    }\n  }, {\n    key: \"completeSingleOperationWithError\",\n    value: function completeSingleOperationWithError(info, errorText) {\n      var _info$details;\n\n      var detailsItem = null === (_info$details = info.details) || void 0 === _info$details ? void 0 : _info$details[0];\n      info.completed = true;\n\n      this._renderOperationError(detailsItem || info.common, errorText);\n\n      this._setCloseButtonVisible(info.common, true);\n\n      if (detailsItem) {\n        this._setCloseButtonVisible(detailsItem, false);\n      }\n    }\n  }, {\n    key: \"addOperationDetailsError\",\n    value: function addOperationDetailsError(info, index, errorText) {\n      var detailsItem = info.details[index];\n\n      this._renderOperationError(detailsItem, errorText);\n\n      this._setCloseButtonVisible(detailsItem, false);\n    }\n  }, {\n    key: \"_renderError\",\n    value: function _renderError($container, $target, errorText) {\n      $(\"<div>\").text(errorText).addClass(FILE_MANAGER_PROGRESS_BOX_ERROR_CLASS).appendTo($container);\n    }\n  }, {\n    key: \"_renderEmptyListText\",\n    value: function _renderEmptyListText() {\n      this._$infosContainer.text(messageLocalization.format(\"dxFileManager-notificationProgressPanelEmptyListText\"));\n    }\n  }, {\n    key: \"_renderOperationError\",\n    value: function _renderOperationError(info, errorText) {\n      this._removeProgressBar(info);\n\n      this._renderError(info.$wrapper, info.$commonText, errorText);\n    }\n  }, {\n    key: \"_removeProgressBar\",\n    value: function _removeProgressBar(progressBox) {\n      if (progressBox.progressBar) {\n        progressBox.progressBar.dispose();\n        progressBox.progressBar.$element().remove();\n        progressBox.progressBar = null;\n      }\n    }\n  }, {\n    key: \"_createProgressBox\",\n    value: function _createProgressBox($container, options) {\n      var _this5 = this;\n\n      $container.addClass(FILE_MANAGER_PROGRESS_BOX_CLASS);\n\n      if (!options.showCloseButtonAlways) {\n        $container.addClass(FILE_MANAGER_PROGRESS_BOX_WITHOUT_CLOSE_BUTTON_CLASS);\n      }\n\n      if (options.imageUrl) {\n        getImageContainer(options.imageUrl).addClass(FILE_MANAGER_PROGRESS_BOX_IMAGE_CLASS).appendTo($container);\n      }\n\n      var $wrapper = $(\"<div>\").addClass(FILE_MANAGER_PROGRESS_BOX_WRAPPER_CLASS).appendTo($container);\n      var $commonText = $(\"<div>\").addClass(FILE_MANAGER_PROGRESS_BOX_COMMON_CLASS).text(options.commonText).appendTo($wrapper);\n      var progressBar = null;\n\n      if (!options.skipProgressBox) {\n        var $progressBar = $(\"<div>\").addClass(FILE_MANAGER_PROGRESS_BOX_PROGRESS_BAR_CLASS).appendTo($wrapper);\n        progressBar = this._createComponent($progressBar, ProgressBar, {\n          min: 0,\n          max: 100,\n          width: \"100%\",\n          validationMessageMode: \"always\",\n          statusFormat: function statusFormat(ratio, value) {\n            return _this5._getStatusString(ratio, value);\n          }\n        });\n      }\n\n      var closeButton = null;\n\n      if (options.showCloseButton) {\n        var $button = $(\"<div>\").addClass(FILE_MANAGER_PROGRESS_BOX_CLOSE_BUTTON_CLASS).appendTo($container);\n        closeButton = this._createComponent($button, Button, {\n          icon: \"dx-filemanager-i dx-filemanager-i-cancel\",\n          stylingMode: \"text\",\n          visible: options.showCloseButtonAlways,\n          onClick: options.onCloseButtonClick\n        });\n      }\n\n      return {\n        $commonText: $commonText,\n        progressBar: progressBar,\n        $element: $container,\n        $wrapper: $wrapper,\n        closeButton: closeButton\n      };\n    }\n  }, {\n    key: \"_setCloseButtonVisible\",\n    value: function _setCloseButtonVisible(progressBox, visible) {\n      if (progressBox.closeButton) {\n        progressBox.$element.toggleClass(FILE_MANAGER_PROGRESS_BOX_WITHOUT_CLOSE_BUTTON_CLASS, !visible);\n        progressBox.closeButton.option(\"visible\", visible);\n      }\n    }\n  }, {\n    key: \"_setProgressBarText\",\n    value: function _setProgressBarText(progressBox, text) {\n      progressBox.progressBar.option(\"statusFormat\", function () {\n        return text;\n      });\n    }\n  }, {\n    key: \"_closeOperation\",\n    value: function _closeOperation(info) {\n      var _this6 = this;\n\n      if (info.customCloseHandling && !info.completed) {\n        this._raiseOperationCanceled(info);\n\n        this._setCloseButtonVisible(info.common, false);\n\n        info.details.forEach(function (item) {\n          return _this6._displayClosedOperationItem(item);\n        });\n      } else {\n        this._raiseOperationClosed(info);\n\n        info.$info.next(\".\".concat(FILE_MANAGER_PROGRESS_PANEL_SEPARATOR_CLASS)).remove();\n        info.$info.remove();\n        this._operationCount--;\n\n        if (!this._operationCount) {\n          this._renderEmptyListText();\n        }\n      }\n    }\n  }, {\n    key: \"_cancelOperationItem\",\n    value: function _cancelOperationItem(item, itemIndex) {\n      this._raiseOperationItemCanceled(item, itemIndex);\n\n      var itemInfo = item.info.details[itemIndex];\n\n      this._displayClosedOperationItem(itemInfo);\n    }\n  }, {\n    key: \"_displayClosedOperationItem\",\n    value: function _displayClosedOperationItem(itemInfo) {\n      this._setProgressBarText(itemInfo, messageLocalization.format(\"dxFileManager-notificationProgressPanelOperationCanceled\"));\n\n      this._setCloseButtonVisible(itemInfo, false);\n    }\n  }, {\n    key: \"_getStatusString\",\n    value: function _getStatusString(ratio, value) {\n      return 1 === ratio ? messageLocalization.format(\"Done\") : Math.round(100 * ratio) + \"%\";\n    }\n  }, {\n    key: \"_raiseOperationClosed\",\n    value: function _raiseOperationClosed(info) {\n      this._actions.onOperationClosed({\n        info: info\n      });\n    }\n  }, {\n    key: \"_raiseOperationCanceled\",\n    value: function _raiseOperationCanceled(info) {\n      this._actions.onOperationCanceled({\n        info: info\n      });\n    }\n  }, {\n    key: \"_raiseOperationItemCanceled\",\n    value: function _raiseOperationItemCanceled(item, itemIndex) {\n      this._actions.onOperationItemCanceled({\n        item: item,\n        itemIndex: itemIndex\n      });\n    }\n  }, {\n    key: \"_raisePanelClosed\",\n    value: function _raisePanelClosed() {\n      this._actions.onPanelClosed();\n    }\n  }]);\n\n  return FileManagerProgressPanel;\n}(Widget);\n\nexport default FileManagerProgressPanel;","map":null,"metadata":{},"sourceType":"module"}