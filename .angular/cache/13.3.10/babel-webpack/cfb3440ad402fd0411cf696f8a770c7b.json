{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/pivot_grid/ui.pivot_grid.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { getWindow, hasWindow } from \"../../core/utils/window\";\nvar window = getWindow();\nimport eventsEngine from \"../../events/core/events_engine\";\nimport registerComponent from \"../../core/component_registrator\";\nimport { getPublicElement } from \"../../core/element\";\nimport { format as formatString } from \"../../core/utils/string\";\nimport { noop, deferRender, deferUpdate } from \"../../core/utils/common\";\nimport { each } from \"../../core/utils/iterator\";\nimport { isDefined } from \"../../core/utils/type\";\nimport { extend } from \"../../core/utils/extend\";\nimport { name as clickEventName } from \"../../events/click\";\nimport localizationMessage from \"../../localization/message\";\nimport Widget from \"../widget/ui.widget\";\nimport { addNamespace } from \"../../events/utils/index\";\nimport gridCoreUtils from \"../grid_core/ui.grid_core.utils\";\nimport { setFieldProperty, findField, mergeArraysByMaxValue } from \"./ui.pivot_grid.utils\";\nimport { DataController } from \"./ui.pivot_grid.data_controller\";\nimport { DataArea } from \"./ui.pivot_grid.data_area\";\nimport { VerticalHeadersArea, HorizontalHeadersArea } from \"./ui.pivot_grid.headers_area\";\nimport { setHeight, getHeight, getWidth, getOuterHeight } from \"../../core/utils/size\";\nimport { FieldsArea } from \"./ui.pivot_grid.fields_area\";\nimport PivotGridFieldChooser from \"./ui.pivot_grid.field_chooser\";\nimport PivotGridFieldChooserBase from \"./ui.pivot_grid.field_chooser_base\";\nimport { ExportController } from \"./ui.pivot_grid.export\";\nimport chartIntegrationMixin from \"./ui.pivot_grid.chart_integration\";\nimport Popup from \"../popup\";\nimport ContextMenu from \"../context_menu\";\nimport { when, Deferred } from \"../../core/utils/deferred\";\nvar DATA_AREA_CELL_CLASS = \"dx-area-data-cell\";\nvar ROW_AREA_CELL_CLASS = \"dx-area-row-cell\";\nvar COLUMN_AREA_CELL_CLASS = \"dx-area-column-cell\";\nvar DESCRIPTION_AREA_CELL_CLASS = \"dx-area-description-cell\";\nvar BORDERS_CLASS = \"dx-pivotgrid-border\";\nvar PIVOTGRID_CLASS = \"dx-pivotgrid\";\nvar ROW_LINES_CLASS = \"dx-row-lines\";\nvar BOTTOM_ROW_CLASS = \"dx-bottom-row\";\nvar BOTTOM_BORDER_CLASS = \"dx-bottom-border\";\nvar FIELDS_CONTAINER_CLASS = \"dx-pivotgrid-fields-container\";\nvar FIELDS_CLASS = \"dx-area-fields\";\nvar FIELD_CHOOSER_POPUP_CLASS = \"dx-fieldchooser-popup\";\nvar INCOMPRESSIBLE_FIELDS_CLASS = \"dx-incompressible-fields\";\nvar OVERFLOW_HIDDEN_CLASS = \"dx-overflow-hidden\";\nvar TR = \"<tr>\";\nvar TD = \"<td>\";\nvar DIV = \"<div>\";\nvar TEST_HEIGHT = 66666;\nvar FIELD_CALCULATED_OPTIONS = [\"allowSorting\", \"allowSortingBySummary\", \"allowFiltering\", \"allowExpandAll\"];\n\nfunction getArraySum(array) {\n  var sum = 0;\n  each(array, function (_, value) {\n    sum += value || 0;\n  });\n  return sum;\n}\n\nfunction adjustSizeArray(sizeArray, space) {\n  var delta = space / sizeArray.length;\n\n  for (var i = 0; i < sizeArray.length; i++) {\n    sizeArray[i] -= delta;\n  }\n}\n\nfunction unsubscribeScrollEvents(area) {\n  area.off(\"scroll\").off(\"stop\");\n}\n\nfunction subscribeToScrollEvent(area, handler) {\n  unsubscribeScrollEvents(area);\n  area.on(\"scroll\", handler).on(\"stop\", handler);\n}\n\nfunction getCommonBorderWidth(elements, direction) {\n  var borderStyleNames = \"width\" === direction ? [\"borderLeftWidth\", \"borderRightWidth\"] : [\"borderTopWidth\", \"borderBottomWidth\"];\n  var width = 0;\n  each(elements, function (_, elem) {\n    var computedStyle = window.getComputedStyle(elem.get(0));\n    borderStyleNames.forEach(function (borderStyleName) {\n      width += parseFloat(computedStyle[borderStyleName]) || 0;\n    });\n  });\n  return width;\n}\n\nfunction clickedOnFieldsArea($targetElement) {\n  return $targetElement.closest(\".\" + FIELDS_CLASS).length || $targetElement.find(\".\" + FIELDS_CLASS).length;\n}\n\nvar PivotGrid = Widget.inherit({\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      scrolling: {\n        timeout: 300,\n        renderingThreshold: 150,\n        minTimeout: 10,\n        mode: \"standard\",\n        useNative: \"auto\",\n        removeInvisiblePages: true,\n        virtualRowHeight: 50,\n        virtualColumnWidth: 100,\n        loadTwoPagesOnStart: true\n      },\n      encodeHtml: true,\n      dataSource: null,\n      activeStateEnabled: false,\n      fieldChooser: {\n        minWidth: 250,\n        minHeight: 250,\n        enabled: true,\n        allowSearch: false,\n        searchTimeout: 500,\n        layout: 0,\n        title: localizationMessage.format(\"dxPivotGrid-fieldChooserTitle\"),\n        width: 600,\n        height: 600,\n        applyChangesMode: \"instantly\"\n      },\n      onContextMenuPreparing: null,\n      allowSorting: false,\n      allowSortingBySummary: false,\n      allowFiltering: false,\n      allowExpandAll: false,\n      wordWrapEnabled: true,\n      fieldPanel: {\n        showColumnFields: true,\n        showFilterFields: true,\n        showDataFields: true,\n        showRowFields: true,\n        allowFieldDragging: true,\n        visible: false,\n        texts: {\n          columnFieldArea: localizationMessage.format(\"dxPivotGrid-columnFieldArea\"),\n          rowFieldArea: localizationMessage.format(\"dxPivotGrid-rowFieldArea\"),\n          filterFieldArea: localizationMessage.format(\"dxPivotGrid-filterFieldArea\"),\n          dataFieldArea: localizationMessage.format(\"dxPivotGrid-dataFieldArea\")\n        }\n      },\n      dataFieldArea: \"column\",\n      export: {\n        enabled: false,\n        fileName: \"PivotGrid\",\n        proxyUrl: void 0,\n        ignoreExcelErrors: true\n      },\n      showRowTotals: true,\n      showRowGrandTotals: true,\n      showColumnTotals: true,\n      showColumnGrandTotals: true,\n      hideEmptySummaryCells: true,\n      showTotalsPrior: \"none\",\n      rowHeaderLayout: \"standard\",\n      loadPanel: {\n        enabled: true,\n        text: localizationMessage.format(\"Loading\"),\n        width: 200,\n        height: 70,\n        showIndicator: true,\n        indicatorSrc: \"\",\n        showPane: true\n      },\n      texts: {\n        grandTotal: localizationMessage.format(\"dxPivotGrid-grandTotal\"),\n        total: localizationMessage.getFormatter(\"dxPivotGrid-total\"),\n        noData: localizationMessage.format(\"dxDataGrid-noDataText\"),\n        showFieldChooser: localizationMessage.format(\"dxPivotGrid-showFieldChooser\"),\n        expandAll: localizationMessage.format(\"dxPivotGrid-expandAll\"),\n        collapseAll: localizationMessage.format(\"dxPivotGrid-collapseAll\"),\n        sortColumnBySummary: localizationMessage.getFormatter(\"dxPivotGrid-sortColumnBySummary\"),\n        sortRowBySummary: localizationMessage.getFormatter(\"dxPivotGrid-sortRowBySummary\"),\n        removeAllSorting: localizationMessage.format(\"dxPivotGrid-removeAllSorting\"),\n        exportToExcel: localizationMessage.format(\"dxDataGrid-exportToExcel\"),\n        dataNotAvailable: localizationMessage.format(\"dxPivotGrid-dataNotAvailable\")\n      },\n      onCellClick: null,\n      onCellPrepared: null,\n      showBorders: false,\n      stateStoring: {\n        enabled: false,\n        storageKey: null,\n        type: \"localStorage\",\n        customLoad: null,\n        customSave: null,\n        savingTimeout: 2e3\n      },\n      onExpandValueChanging: null,\n      renderCellCountLimit: 2e4,\n      onExporting: null,\n      onExported: null,\n      onFileSaving: null,\n      headerFilter: {\n        width: 252,\n        height: 325,\n        allowSearch: false,\n        showRelevantValues: false,\n        searchTimeout: 500,\n        texts: {\n          emptyValue: localizationMessage.format(\"dxDataGrid-headerFilterEmptyValue\"),\n          ok: localizationMessage.format(\"dxDataGrid-headerFilterOK\"),\n          cancel: localizationMessage.format(\"dxDataGrid-headerFilterCancel\")\n        }\n      }\n    });\n  },\n  _updateCalculatedOptions: function _updateCalculatedOptions(fields) {\n    var that = this;\n    each(fields, function (index, field) {\n      each(FIELD_CALCULATED_OPTIONS, function (_, optionName) {\n        var isCalculated = field._initProperties && optionName in field._initProperties && void 0 === field._initProperties[optionName];\n        var needUpdate = void 0 === field[optionName] || isCalculated;\n\n        if (needUpdate) {\n          setFieldProperty(field, optionName, that.option(optionName));\n        }\n      });\n    });\n  },\n  _getDataControllerOptions: function _getDataControllerOptions() {\n    var that = this;\n    return {\n      component: that,\n      dataSource: that.option(\"dataSource\"),\n      texts: that.option(\"texts\"),\n      showRowTotals: that.option(\"showRowTotals\"),\n      showRowGrandTotals: that.option(\"showRowGrandTotals\"),\n      showColumnTotals: that.option(\"showColumnTotals\"),\n      showTotalsPrior: that.option(\"showTotalsPrior\"),\n      showColumnGrandTotals: that.option(\"showColumnGrandTotals\"),\n      dataFieldArea: that.option(\"dataFieldArea\"),\n      rowHeaderLayout: that.option(\"rowHeaderLayout\"),\n      hideEmptySummaryCells: that.option(\"hideEmptySummaryCells\"),\n      onFieldsPrepared: function onFieldsPrepared(fields) {\n        that._updateCalculatedOptions(fields);\n      }\n    };\n  },\n  _initDataController: function _initDataController() {\n    var that = this;\n    that._dataController && that._dataController.dispose();\n    that._dataController = new DataController(that._getDataControllerOptions());\n\n    if (hasWindow()) {\n      that._dataController.changed.add(function () {\n        that._render();\n      });\n    }\n\n    that._dataController.scrollChanged.add(function (options) {\n      that._scrollLeft = options.left;\n      that._scrollTop = options.top;\n    });\n\n    that._dataController.loadingChanged.add(function (isLoading) {\n      that._updateLoading();\n    });\n\n    that._dataController.progressChanged.add(that._updateLoading.bind(that));\n\n    that._dataController.dataSourceChanged.add(function () {\n      that._trigger(\"onChanged\");\n    });\n\n    var expandValueChanging = that.option(\"onExpandValueChanging\");\n\n    if (expandValueChanging) {\n      that._dataController.expandValueChanging.add(function (e) {\n        expandValueChanging(e);\n      });\n    }\n  },\n  _init: function _init() {\n    this.callBase();\n\n    this._initDataController();\n\n    this._scrollLeft = this._scrollTop = null;\n\n    this._initActions();\n  },\n  _initActions: function _initActions() {\n    this._actions = {\n      onChanged: this._createActionByOption(\"onChanged\"),\n      onContextMenuPreparing: this._createActionByOption(\"onContextMenuPreparing\"),\n      onCellClick: this._createActionByOption(\"onCellClick\"),\n      onExporting: this._createActionByOption(\"onExporting\"),\n      onExported: this._createActionByOption(\"onExported\"),\n      onFileSaving: this._createActionByOption(\"onFileSaving\"),\n      onCellPrepared: this._createActionByOption(\"onCellPrepared\")\n    };\n  },\n  _trigger: function _trigger(eventName, eventArg) {\n    this._actions[eventName](eventArg);\n  },\n  _optionChanged: function _optionChanged(args) {\n    if (FIELD_CALCULATED_OPTIONS.indexOf(args.name) >= 0) {\n      var fields = this.getDataSource().fields();\n\n      this._updateCalculatedOptions(fields);\n    }\n\n    switch (args.name) {\n      case \"dataSource\":\n      case \"allowSorting\":\n      case \"allowFiltering\":\n      case \"allowExpandAll\":\n      case \"allowSortingBySummary\":\n      case \"scrolling\":\n      case \"stateStoring\":\n        this._initDataController();\n\n        this._fieldChooserPopup.hide();\n\n        this._renderFieldChooser();\n\n        this._invalidate();\n\n        break;\n\n      case \"texts\":\n      case \"showTotalsPrior\":\n      case \"showRowTotals\":\n      case \"showRowGrandTotals\":\n      case \"showColumnTotals\":\n      case \"showColumnGrandTotals\":\n      case \"hideEmptySummaryCells\":\n      case \"dataFieldArea\":\n        this._dataController.updateViewOptions(this._getDataControllerOptions());\n\n        break;\n\n      case \"useNativeScrolling\":\n      case \"encodeHtml\":\n      case \"renderCellCountLimit\":\n        break;\n\n      case \"rtlEnabled\":\n        this.callBase(args);\n\n        this._renderFieldChooser();\n\n        this._renderContextMenu();\n\n        hasWindow() && this._renderLoadPanel(this._dataArea.groupElement(), this.$element());\n\n        this._invalidate();\n\n        break;\n\n      case \"export\":\n        this._renderDescriptionArea();\n\n        break;\n\n      case \"onExpandValueChanging\":\n        break;\n\n      case \"onCellClick\":\n      case \"onContextMenuPreparing\":\n      case \"onExporting\":\n      case \"onExported\":\n      case \"onFileSaving\":\n      case \"onCellPrepared\":\n        this._actions[args.name] = this._createActionByOption(args.name);\n        break;\n\n      case \"fieldChooser\":\n        this._renderFieldChooser();\n\n        this._renderDescriptionArea();\n\n        break;\n\n      case \"loadPanel\":\n        if (hasWindow()) {\n          if (\"loadPanel.enabled\" === args.fullName) {\n            clearTimeout(this._hideLoadingTimeoutID);\n\n            this._renderLoadPanel(this._dataArea.groupElement(), this.$element());\n          } else {\n            this._renderLoadPanel(this._dataArea.groupElement(), this.$element());\n\n            this._invalidate();\n          }\n        }\n\n        break;\n\n      case \"fieldPanel\":\n        this._renderDescriptionArea();\n\n        this._invalidate();\n\n        break;\n\n      case \"headerFilter\":\n        this._renderFieldChooser();\n\n        this._invalidate();\n\n        break;\n\n      case \"showBorders\":\n        this._tableElement().toggleClass(BORDERS_CLASS, !!args.value);\n\n        this.updateDimensions();\n        break;\n\n      case \"wordWrapEnabled\":\n        this._tableElement().toggleClass(\"dx-word-wrap\", !!args.value);\n\n        this.updateDimensions();\n        break;\n\n      case \"rowHeaderLayout\":\n        this._tableElement().find(\".\" + ROW_AREA_CELL_CLASS).toggleClass(\"dx-area-tree-view\", \"tree\" === args.value);\n\n        this._dataController.updateViewOptions(this._getDataControllerOptions());\n\n        break;\n\n      case \"height\":\n      case \"width\":\n        this._hasHeight = null;\n        this.callBase(args);\n        this.resize();\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  _updateScrollPosition: function _updateScrollPosition(columnsArea, rowsArea, dataArea) {\n    var scrollTop;\n    var scrollLeft;\n    var scrolled = this._scrollTop || this._scrollLeft;\n\n    if (this._scrollUpdating) {\n      return;\n    }\n\n    this._scrollUpdating = true;\n\n    if (rowsArea && !rowsArea.hasScroll() && this._hasHeight) {\n      this._scrollTop = null;\n    }\n\n    if (columnsArea && !columnsArea.hasScroll()) {\n      this._scrollLeft = null;\n    }\n\n    if (null !== this._scrollTop || null !== this._scrollLeft || scrolled || this.option(\"rtlEnabled\")) {\n      scrollTop = this._scrollTop || 0;\n      scrollLeft = this._scrollLeft || 0;\n      dataArea.scrollTo({\n        left: scrollLeft,\n        top: scrollTop\n      });\n      columnsArea.scrollTo({\n        left: scrollLeft\n      });\n      rowsArea.scrollTo({\n        top: scrollTop\n      });\n\n      this._dataController.updateWindowScrollPosition(this._scrollTop);\n    }\n\n    this._scrollUpdating = false;\n  },\n  _subscribeToEvents: function _subscribeToEvents(columnsArea, rowsArea, dataArea) {\n    var that = this;\n    each([columnsArea, rowsArea, dataArea], function (_, area) {\n      subscribeToScrollEvent(area, function (e) {\n        return function (e, area) {\n          var scrollOffset = e.scrollOffset;\n\n          var scrollable = area._getScrollable();\n\n          var leftOffset = \"vertical\" !== scrollable.option(\"direction\") ? scrollOffset.left : that._scrollLeft;\n          var topOffset = \"horizontal\" !== scrollable.option(\"direction\") && that._hasHeight ? scrollOffset.top : that._scrollTop;\n\n          if ((that._scrollLeft || 0) !== (leftOffset || 0) || (that._scrollTop || 0) !== (topOffset || 0)) {\n            that._scrollLeft = leftOffset;\n            that._scrollTop = topOffset;\n\n            that._updateScrollPosition(columnsArea, rowsArea, dataArea);\n\n            if (\"virtual\" === that.option(\"scrolling.mode\")) {\n              that._dataController.setViewportPosition(that._scrollLeft, that._scrollTop);\n            }\n          }\n        }(e, area);\n      });\n    });\n    !that._hasHeight && that._dataController.subscribeToWindowScrollEvents(dataArea.groupElement());\n  },\n  _clean: noop,\n  _needDelayResizing: function _needDelayResizing(cellsInfo) {\n    var cellsCount = cellsInfo.length * (cellsInfo.length ? cellsInfo[0].length : 0);\n    return cellsCount > this.option(\"renderCellCountLimit\");\n  },\n  _renderFieldChooser: function _renderFieldChooser() {\n    var that = this;\n    var container = that._pivotGridContainer;\n    var fieldChooserOptions = that.option(\"fieldChooser\") || {};\n    var toolbarItems = \"onDemand\" === fieldChooserOptions.applyChangesMode ? [{\n      toolbar: \"bottom\",\n      location: \"after\",\n      widget: \"dxButton\",\n      options: {\n        text: localizationMessage.format(\"OK\"),\n        onClick: function onClick(e) {\n          that._fieldChooserPopup.$content().dxPivotGridFieldChooser(\"applyChanges\");\n\n          that._fieldChooserPopup.hide();\n        }\n      }\n    }, {\n      toolbar: \"bottom\",\n      location: \"after\",\n      widget: \"dxButton\",\n      options: {\n        text: localizationMessage.format(\"Cancel\"),\n        onClick: function onClick(e) {\n          that._fieldChooserPopup.hide();\n        }\n      }\n    }] : [];\n    var fieldChooserComponentOptions = {\n      layout: fieldChooserOptions.layout,\n      texts: fieldChooserOptions.texts || {},\n      dataSource: that.getDataSource(),\n      allowSearch: fieldChooserOptions.allowSearch,\n      searchTimeout: fieldChooserOptions.searchTimeout,\n      width: void 0,\n      height: void 0,\n      headerFilter: that.option(\"headerFilter\"),\n      encodeHtml: that.option(\"encodeHtml\"),\n      applyChangesMode: fieldChooserOptions.applyChangesMode,\n      onContextMenuPreparing: function onContextMenuPreparing(e) {\n        that._trigger(\"onContextMenuPreparing\", e);\n      }\n    };\n    var popupOptions = {\n      shading: false,\n      title: fieldChooserOptions.title,\n      width: fieldChooserOptions.width,\n      height: fieldChooserOptions.height,\n      showCloseButton: true,\n      resizeEnabled: true,\n      minWidth: fieldChooserOptions.minWidth,\n      minHeight: fieldChooserOptions.minHeight,\n      toolbarItems: toolbarItems,\n      onResize: function onResize(e) {\n        e.component.$content().dxPivotGridFieldChooser(\"updateDimensions\");\n      },\n      onShown: function onShown(e) {\n        that._createComponent(e.component.content(), PivotGridFieldChooser, fieldChooserComponentOptions);\n      },\n      onHidden: function onHidden(e) {\n        var fieldChooser = e.component.$content().dxPivotGridFieldChooser(\"instance\");\n        fieldChooser.resetTreeView();\n        fieldChooser.cancelChanges();\n      }\n    };\n\n    if (that._fieldChooserPopup) {\n      that._fieldChooserPopup.option(popupOptions);\n\n      that._fieldChooserPopup.$content().dxPivotGridFieldChooser(fieldChooserComponentOptions);\n    } else {\n      that._fieldChooserPopup = that._createComponent($(DIV).addClass(FIELD_CHOOSER_POPUP_CLASS).appendTo(container), Popup, popupOptions);\n    }\n  },\n  _renderContextMenu: function _renderContextMenu() {\n    var that = this;\n    var $container = that._pivotGridContainer;\n\n    if (that._contextMenu) {\n      that._contextMenu.$element().remove();\n    }\n\n    that._contextMenu = that._createComponent($(DIV).appendTo($container), ContextMenu, {\n      onPositioning: function onPositioning(actionArgs) {\n        var event = actionArgs.event;\n        actionArgs.cancel = true;\n\n        if (!event) {\n          return;\n        }\n\n        var targetElement = event.target.cellIndex >= 0 ? event.target : $(event.target).closest(\"td\").get(0);\n\n        if (!targetElement) {\n          return;\n        }\n\n        var args = that._createEventArgs(targetElement, event);\n\n        var items = that._getContextMenuItems(args);\n\n        if (items) {\n          actionArgs.component.option(\"items\", items);\n          actionArgs.cancel = false;\n          return;\n        }\n      },\n      onItemClick: function onItemClick(params) {\n        params.itemData.onItemClick && params.itemData.onItemClick(params);\n      },\n      cssClass: PIVOTGRID_CLASS,\n      target: that.$element()\n    });\n  },\n  _getContextMenuItems: function _getContextMenuItems(e) {\n    var that = this;\n    var items = [];\n    var texts = that.option(\"texts\");\n\n    if (\"row\" === e.area || \"column\" === e.area) {\n      var areaFields = e[e.area + \"Fields\"];\n      var oppositeAreaFields = e[\"column\" === e.area ? \"rowFields\" : \"columnFields\"];\n      var field = e.cell.path && areaFields[e.cell.path.length - 1];\n      var dataSource = that.getDataSource();\n\n      if (field && field.allowExpandAll && e.cell.path.length < e[e.area + \"Fields\"].length && !dataSource.paginate()) {\n        items.push({\n          beginGroup: true,\n          icon: \"none\",\n          text: texts.expandAll,\n          onItemClick: function onItemClick() {\n            dataSource.expandAll(field.index);\n          }\n        });\n        items.push({\n          text: texts.collapseAll,\n          icon: \"none\",\n          onItemClick: function onItemClick() {\n            dataSource.collapseAll(field.index);\n          }\n        });\n      }\n\n      if (e.cell.isLast && !dataSource.paginate()) {\n        var sortingBySummaryItemCount = 0;\n        each(oppositeAreaFields, function (index, field) {\n          if (!field.allowSortingBySummary) {\n            return;\n          }\n\n          each(e.dataFields, function (dataIndex, dataField) {\n            if (isDefined(e.cell.dataIndex) && e.cell.dataIndex !== dataIndex) {\n              return;\n            }\n\n            var showDataFieldCaption = !isDefined(e.cell.dataIndex) && e.dataFields.length > 1;\n            var textFormat = \"column\" === e.area ? texts.sortColumnBySummary : texts.sortRowBySummary;\n            var checked = findField(e.dataFields, field.sortBySummaryField) === dataIndex && (e.cell.path || []).join(\"/\") === (field.sortBySummaryPath || []).join(\"/\");\n            var text = formatString(textFormat, showDataFieldCaption ? field.caption + \" - \" + dataField.caption : field.caption);\n            items.push({\n              beginGroup: 0 === sortingBySummaryItemCount,\n              icon: checked ? \"desc\" === field.sortOrder ? \"sortdowntext\" : \"sortuptext\" : \"none\",\n              text: text,\n              onItemClick: function onItemClick() {\n                dataSource.field(field.index, {\n                  sortBySummaryField: dataField.name || dataField.caption || dataField.dataField,\n                  sortBySummaryPath: e.cell.path,\n                  sortOrder: \"desc\" === field.sortOrder ? \"asc\" : \"desc\"\n                });\n                dataSource.load();\n              }\n            });\n            sortingBySummaryItemCount++;\n          });\n        });\n        each(oppositeAreaFields, function (index, field) {\n          if (!field.allowSortingBySummary || !isDefined(field.sortBySummaryField)) {\n            return;\n          }\n\n          items.push({\n            beginGroup: 0 === sortingBySummaryItemCount,\n            icon: \"none\",\n            text: texts.removeAllSorting,\n            onItemClick: function onItemClick() {\n              each(oppositeAreaFields, function (index, field) {\n                dataSource.field(field.index, {\n                  sortBySummaryField: void 0,\n                  sortBySummaryPath: void 0,\n                  sortOrder: void 0\n                });\n              });\n              dataSource.load();\n            }\n          });\n          return false;\n        });\n      }\n    }\n\n    if (that.option(\"fieldChooser.enabled\")) {\n      items.push({\n        beginGroup: true,\n        icon: \"columnchooser\",\n        text: texts.showFieldChooser,\n        onItemClick: function onItemClick() {\n          that._fieldChooserPopup.show();\n        }\n      });\n    }\n\n    if (that.option(\"export.enabled\")) {\n      items.push({\n        beginGroup: true,\n        icon: \"xlsxfile\",\n        text: texts.exportToExcel,\n        onItemClick: function onItemClick() {\n          that.exportToExcel();\n        }\n      });\n    }\n\n    e.items = items;\n\n    that._trigger(\"onContextMenuPreparing\", e);\n\n    items = e.items;\n\n    if (items && items.length) {\n      return items;\n    }\n  },\n  _createEventArgs: function _createEventArgs(targetElement, dxEvent) {\n    var dataSource = this.getDataSource();\n    var args = {\n      rowFields: dataSource.getAreaFields(\"row\"),\n      columnFields: dataSource.getAreaFields(\"column\"),\n      dataFields: dataSource.getAreaFields(\"data\"),\n      event: dxEvent\n    };\n\n    if (clickedOnFieldsArea($(targetElement))) {\n      return extend(this._createFieldArgs(targetElement), args);\n    } else {\n      return extend(this._createCellArgs(targetElement), args);\n    }\n  },\n  _createFieldArgs: function _createFieldArgs(targetElement) {\n    var field = $(targetElement).children().data(\"field\");\n    var args = {\n      field: field\n    };\n    return isDefined(field) ? args : {};\n  },\n  _createCellArgs: function _createCellArgs(cellElement) {\n    var $cellElement = $(cellElement);\n    var columnIndex = cellElement.cellIndex;\n    var rowIndex = cellElement.parentElement.rowIndex;\n    var $table = $cellElement.closest(\"table\");\n    var data = $table.data(\"data\");\n    var cell = data && data[rowIndex] && data[rowIndex][columnIndex];\n    var args = {\n      area: $table.data(\"area\"),\n      rowIndex: rowIndex,\n      columnIndex: columnIndex,\n      cellElement: getPublicElement($cellElement),\n      cell: cell\n    };\n    return args;\n  },\n  _handleCellClick: function _handleCellClick(e) {\n    var that = this;\n\n    var args = that._createEventArgs(e.currentTarget, e);\n\n    var cell = args.cell;\n\n    if (!cell || !args.area && (args.rowIndex || args.columnIndex)) {\n      return;\n    }\n\n    that._trigger(\"onCellClick\", args);\n\n    cell && !args.cancel && isDefined(cell.expanded) && setTimeout(function () {\n      that._dataController[cell.expanded ? \"collapseHeaderItem\" : \"expandHeaderItem\"](args.area, cell.path);\n    });\n  },\n  _getNoDataText: function _getNoDataText() {\n    return this.option(\"texts.noData\");\n  },\n  _renderNoDataText: gridCoreUtils.renderNoDataText,\n  _renderLoadPanel: gridCoreUtils.renderLoadPanel,\n  _updateLoading: function _updateLoading(progress) {\n    var that = this;\n\n    var isLoading = that._dataController.isLoading();\n\n    if (!that._loadPanel) {\n      return;\n    }\n\n    var loadPanelVisible = that._loadPanel.option(\"visible\");\n\n    if (!loadPanelVisible) {\n      that._startLoadingTime = new Date();\n    }\n\n    if (isLoading) {\n      if (progress) {\n        if (new Date() - that._startLoadingTime >= 1e3) {\n          that._loadPanel.option(\"message\", Math.floor(100 * progress) + \"%\");\n        }\n      } else {\n        that._loadPanel.option(\"message\", that.option(\"loadPanel.text\"));\n      }\n    }\n\n    clearTimeout(that._hideLoadingTimeoutID);\n\n    if (loadPanelVisible && !isLoading) {\n      that._hideLoadingTimeoutID = setTimeout(function () {\n        that._loadPanel.option(\"visible\", false);\n\n        that.$element().removeClass(OVERFLOW_HIDDEN_CLASS);\n      });\n    } else {\n      var visibilityOptions = {\n        visible: isLoading\n      };\n\n      if (isLoading) {\n        visibilityOptions.position = gridCoreUtils.calculateLoadPanelPosition(that._dataArea.groupElement());\n      }\n\n      that._loadPanel.option(visibilityOptions);\n\n      that.$element().toggleClass(OVERFLOW_HIDDEN_CLASS, !isLoading);\n    }\n  },\n  _renderDescriptionArea: function _renderDescriptionArea() {\n    var _this = this;\n\n    var $element = this.$element();\n    var $descriptionCell = $element.find(\".\" + DESCRIPTION_AREA_CELL_CLASS);\n    var $toolbarContainer = $(DIV).addClass(\"dx-pivotgrid-toolbar\");\n    var fieldPanel = this.option(\"fieldPanel\");\n    var $filterHeader = $element.find(\".dx-filter-header\");\n    var $columnHeader = $element.find(\".dx-column-header\");\n    var $targetContainer;\n\n    if (fieldPanel.visible && fieldPanel.showFilterFields) {\n      $targetContainer = $filterHeader;\n    } else if (fieldPanel.visible && (fieldPanel.showDataFields || fieldPanel.showColumnFields)) {\n      $targetContainer = $columnHeader;\n    } else {\n      $targetContainer = $descriptionCell;\n    }\n\n    $columnHeader.toggleClass(BOTTOM_BORDER_CLASS, !!(fieldPanel.visible && (fieldPanel.showDataFields || fieldPanel.showColumnFields)));\n    $filterHeader.toggleClass(BOTTOM_BORDER_CLASS, !!(fieldPanel.visible && fieldPanel.showFilterFields));\n    $descriptionCell.toggleClass(\"dx-pivotgrid-background\", fieldPanel.visible && (fieldPanel.showDataFields || fieldPanel.showColumnFields || fieldPanel.showRowFields));\n    this.$element().find(\".dx-pivotgrid-toolbar\").remove();\n    $toolbarContainer.prependTo($targetContainer);\n\n    if (this.option(\"fieldChooser.enabled\")) {\n      var $buttonElement = $(DIV).appendTo($toolbarContainer).addClass(\"dx-pivotgrid-field-chooser-button\");\n      var buttonOptions = {\n        icon: \"columnchooser\",\n        hint: this.option(\"texts.showFieldChooser\"),\n        onClick: function onClick() {\n          _this.getFieldChooserPopup().show();\n        }\n      };\n\n      this._createComponent($buttonElement, \"dxButton\", buttonOptions);\n    }\n\n    if (this.option(\"export.enabled\")) {\n      var _$buttonElement = $(DIV).appendTo($toolbarContainer).addClass(\"dx-pivotgrid-export-button\");\n\n      var _buttonOptions = {\n        icon: \"xlsxfile\",\n        hint: this.option(\"texts.exportToExcel\"),\n        onClick: function onClick() {\n          _this.exportToExcel();\n        }\n      };\n\n      this._createComponent(_$buttonElement, \"dxButton\", _buttonOptions);\n    }\n  },\n  _detectHasContainerHeight: function _detectHasContainerHeight() {\n    var element = this.$element();\n\n    if (isDefined(this._hasHeight)) {\n      var height = this.option(\"height\") || this.$element().get(0).style.height;\n\n      if (height && this._hasHeight ^ \"auto\" !== height) {\n        this._hasHeight = null;\n      }\n    }\n\n    if (isDefined(this._hasHeight) || element.is(\":hidden\")) {\n      return;\n    }\n\n    this._pivotGridContainer.addClass(\"dx-hidden\");\n\n    var testElement = $(DIV);\n    setHeight(testElement, TEST_HEIGHT);\n    element.append(testElement);\n    this._hasHeight = getHeight(element) !== TEST_HEIGHT;\n\n    this._pivotGridContainer.removeClass(\"dx-hidden\");\n\n    testElement.remove();\n  },\n  _renderHeaders: function _renderHeaders(rowHeaderContainer, columnHeaderContainer, filterHeaderContainer, dataHeaderContainer) {\n    var dataSource = this.getDataSource();\n    this._rowFields = this._rowFields || new FieldsArea(this, \"row\");\n\n    this._rowFields.render(rowHeaderContainer, dataSource.getAreaFields(\"row\"));\n\n    this._columnFields = this._columnFields || new FieldsArea(this, \"column\");\n\n    this._columnFields.render(columnHeaderContainer, dataSource.getAreaFields(\"column\"));\n\n    this._filterFields = this._filterFields || new FieldsArea(this, \"filter\");\n\n    this._filterFields.render(filterHeaderContainer, dataSource.getAreaFields(\"filter\"));\n\n    this._dataFields = this._dataFields || new FieldsArea(this, \"data\");\n\n    this._dataFields.render(dataHeaderContainer, dataSource.getAreaFields(\"data\"));\n\n    this.$element().dxPivotGridFieldChooserBase(\"instance\").renderSortable();\n  },\n  _createTableElement: function _createTableElement() {\n    var $table = $(\"<table>\").css({\n      width: \"100%\"\n    }).toggleClass(BORDERS_CLASS, !!this.option(\"showBorders\")).toggleClass(\"dx-word-wrap\", !!this.option(\"wordWrapEnabled\"));\n    eventsEngine.on($table, addNamespace(clickEventName, \"dxPivotGrid\"), \"td\", this._handleCellClick.bind(this));\n    return $table;\n  },\n  _renderDataArea: function _renderDataArea(dataAreaElement) {\n    var dataArea = this._dataArea || new DataArea(this);\n    this._dataArea = dataArea;\n    dataArea.render(dataAreaElement, this._dataController.getCellsInfo());\n    return dataArea;\n  },\n  _renderRowsArea: function _renderRowsArea(rowsAreaElement) {\n    var rowsArea = this._rowsArea || new VerticalHeadersArea(this);\n    this._rowsArea = rowsArea;\n    rowsArea.render(rowsAreaElement, this._dataController.getRowsInfo());\n    return rowsArea;\n  },\n  _renderColumnsArea: function _renderColumnsArea(columnsAreaElement) {\n    var columnsArea = this._columnsArea || new HorizontalHeadersArea(this);\n    this._columnsArea = columnsArea;\n    columnsArea.render(columnsAreaElement, this._dataController.getColumnsInfo());\n    return columnsArea;\n  },\n  _initMarkup: function _initMarkup() {\n    var that = this;\n    that.callBase.apply(this, arguments);\n    that.$element().addClass(PIVOTGRID_CLASS);\n  },\n  _renderContentImpl: function _renderContentImpl() {\n    var columnsAreaElement;\n    var rowsAreaElement;\n    var dataAreaElement;\n    var tableElement;\n    var isFirstDrawing = !this._pivotGridContainer;\n    var rowHeaderContainer;\n    var columnHeaderContainer;\n    var filterHeaderContainer;\n    var dataHeaderContainer;\n    tableElement = !isFirstDrawing && this._tableElement();\n\n    if (!tableElement) {\n      this.$element().addClass(ROW_LINES_CLASS).addClass(FIELDS_CONTAINER_CLASS);\n      this._pivotGridContainer = $(DIV).addClass(\"dx-pivotgrid-container\");\n\n      this._renderFieldChooser();\n\n      this._renderContextMenu();\n\n      columnsAreaElement = $(TD).addClass(COLUMN_AREA_CELL_CLASS);\n      rowsAreaElement = $(TD).addClass(ROW_AREA_CELL_CLASS);\n      dataAreaElement = $(TD).addClass(DATA_AREA_CELL_CLASS);\n      tableElement = this._createTableElement();\n      dataHeaderContainer = $(TD).addClass(\"dx-data-header\");\n      filterHeaderContainer = $(\"<td>\").attr(\"colspan\", \"2\").addClass(\"dx-filter-header\");\n      columnHeaderContainer = $(TD).addClass(\"dx-column-header\");\n      rowHeaderContainer = $(TD).addClass(DESCRIPTION_AREA_CELL_CLASS);\n      $(TR).append(filterHeaderContainer).appendTo(tableElement);\n      $(TR).append(dataHeaderContainer).append(columnHeaderContainer).appendTo(tableElement);\n      $(TR).append(rowHeaderContainer).append(columnsAreaElement).appendTo(tableElement);\n      $(TR).addClass(BOTTOM_ROW_CLASS).append(rowsAreaElement).append(dataAreaElement).appendTo(tableElement);\n\n      this._pivotGridContainer.append(tableElement);\n\n      this.$element().append(this._pivotGridContainer);\n\n      if (\"tree\" === this.option(\"rowHeaderLayout\")) {\n        rowsAreaElement.addClass(\"dx-area-tree-view\");\n      }\n    }\n\n    this.$element().addClass(OVERFLOW_HIDDEN_CLASS);\n\n    this._createComponent(this.$element(), PivotGridFieldChooserBase, {\n      dataSource: this.getDataSource(),\n      encodeHtml: this.option(\"encodeHtml\"),\n      allowFieldDragging: this.option(\"fieldPanel.allowFieldDragging\"),\n      headerFilter: this.option(\"headerFilter\"),\n      visible: this.option(\"visible\")\n    });\n\n    var dataArea = this._renderDataArea(dataAreaElement);\n\n    var rowsArea = this._renderRowsArea(rowsAreaElement);\n\n    var columnsArea = this._renderColumnsArea(columnsAreaElement);\n\n    dataArea.tableElement().prepend(columnsArea.headElement());\n\n    if (isFirstDrawing) {\n      this._renderLoadPanel(dataArea.groupElement().parent(), this.$element());\n\n      this._renderDescriptionArea();\n\n      rowsArea.renderScrollable();\n      columnsArea.renderScrollable();\n      dataArea.renderScrollable();\n    }\n\n    [dataArea, rowsArea, columnsArea].forEach(function (area) {\n      unsubscribeScrollEvents(area);\n    });\n\n    this._renderHeaders(rowHeaderContainer, columnHeaderContainer, filterHeaderContainer, dataHeaderContainer);\n\n    this._update(isFirstDrawing);\n  },\n  _update: function _update(isFirstDrawing) {\n    var that = this;\n\n    var updateHandler = function updateHandler() {\n      that.updateDimensions();\n    };\n\n    if (that._needDelayResizing(that._dataArea.getData()) && isFirstDrawing) {\n      setTimeout(updateHandler);\n    } else {\n      updateHandler();\n    }\n  },\n  _fireContentReadyAction: function _fireContentReadyAction() {\n    if (!this._dataController.isLoading()) {\n      this.callBase();\n    }\n  },\n  getScrollPath: function getScrollPath(area) {\n    if (\"column\" === area) {\n      return this._columnsArea.getScrollPath(this._scrollLeft);\n    } else {\n      return this._rowsArea.getScrollPath(this._scrollTop);\n    }\n  },\n  getDataSource: function getDataSource() {\n    return this._dataController.getDataSource();\n  },\n  getFieldChooserPopup: function getFieldChooserPopup() {\n    return this._fieldChooserPopup;\n  },\n  hasScroll: function hasScroll(area) {\n    return \"column\" === area ? this._columnsArea.hasScroll() : this._rowsArea.hasScroll();\n  },\n  _dimensionChanged: function _dimensionChanged() {\n    this.updateDimensions();\n  },\n  _visibilityChanged: function _visibilityChanged(visible) {\n    if (visible) {\n      this.updateDimensions();\n    }\n  },\n  _dispose: function _dispose() {\n    var that = this;\n    clearTimeout(that._hideLoadingTimeoutID);\n    that.callBase.apply(that, arguments);\n\n    if (that._dataController) {\n      that._dataController.dispose();\n    }\n  },\n  _tableElement: function _tableElement() {\n    return this.$element().find(\"table\").first();\n  },\n  addWidgetPrefix: function addWidgetPrefix(className) {\n    return \"dx-pivotgrid-\" + className;\n  },\n  resize: function resize() {\n    this.updateDimensions();\n  },\n  isReady: function isReady() {\n    return this.callBase() && !this._dataController.isLoading();\n  },\n  updateDimensions: function updateDimensions() {\n    var that = this;\n    var groupWidth;\n\n    var tableElement = that._tableElement();\n\n    var bordersWidth;\n    var totalWidth = 0;\n    var totalHeight = 0;\n    var rowsAreaWidth = 0;\n    var hasRowsScroll;\n    var hasColumnsScroll;\n    var dataAreaCell = tableElement.find(\".\" + DATA_AREA_CELL_CLASS);\n    var rowAreaCell = tableElement.find(\".\" + ROW_AREA_CELL_CLASS);\n    var columnAreaCell = tableElement.find(\".\" + COLUMN_AREA_CELL_CLASS);\n    var descriptionCell = tableElement.find(\".\" + DESCRIPTION_AREA_CELL_CLASS);\n    var filterHeaderCell = tableElement.find(\".dx-filter-header\");\n    var columnHeaderCell = tableElement.find(\".dx-column-header\");\n    var rowFieldsHeader = that._rowFields;\n    var d = new Deferred();\n\n    if (!hasWindow()) {\n      return;\n    }\n\n    var needSynchronizeFieldPanel = rowFieldsHeader.isVisible() && \"tree\" !== that.option(\"rowHeaderLayout\");\n\n    that._detectHasContainerHeight();\n\n    if (!that._dataArea.headElement().length) {\n      that._dataArea.tableElement().prepend(that._columnsArea.headElement());\n    }\n\n    if (needSynchronizeFieldPanel) {\n      that._rowsArea.updateColspans(rowFieldsHeader.getColumnsCount());\n\n      that._rowsArea.tableElement().prepend(rowFieldsHeader.headElement());\n    }\n\n    tableElement.addClass(INCOMPRESSIBLE_FIELDS_CLASS);\n\n    that._dataArea.reset();\n\n    that._rowsArea.reset();\n\n    that._columnsArea.reset();\n\n    rowFieldsHeader.reset();\n\n    var calculateHasScroll = function calculateHasScroll(areaSize, totalSize) {\n      return totalSize - areaSize >= 1;\n    };\n\n    var calculateGroupHeight = function calculateGroupHeight(dataAreaHeight, totalHeight, hasRowsScroll, hasColumnsScroll, scrollBarWidth) {\n      return hasRowsScroll ? dataAreaHeight : totalHeight + (hasColumnsScroll ? scrollBarWidth : 0);\n    };\n\n    deferUpdate(function () {\n      var resultWidths = that._dataArea.getColumnsWidth();\n\n      var rowHeights = that._rowsArea.getRowsHeight();\n\n      var rowsAreaHeights = needSynchronizeFieldPanel ? rowHeights.slice(1) : rowHeights;\n\n      var dataAreaHeights = that._dataArea.getRowsHeight();\n\n      var descriptionCellHeight = getOuterHeight(descriptionCell[0], true) + (needSynchronizeFieldPanel ? rowHeights[0] : 0);\n\n      var columnsAreaRowCount = that._dataController.getColumnsInfo().length;\n\n      var resultHeights = mergeArraysByMaxValue(rowsAreaHeights, dataAreaHeights.slice(columnsAreaRowCount));\n      var columnsAreaRowHeights = dataAreaHeights.slice(0, columnsAreaRowCount);\n      var columnsAreaHeight = getArraySum(columnsAreaRowHeights);\n\n      var rowsAreaColumnWidths = that._rowsArea.getColumnsWidth();\n\n      var filterAreaHeight = 0;\n      var dataAreaHeight = 0;\n\n      if (that._hasHeight) {\n        filterAreaHeight = getHeight(filterHeaderCell);\n        var $dataHeader = tableElement.find(\".dx-data-header\");\n        var dataHeaderHeight = getHeight($dataHeader);\n        bordersWidth = getCommonBorderWidth([columnAreaCell, dataAreaCell, tableElement, columnHeaderCell, filterHeaderCell], \"height\");\n        dataAreaHeight = getHeight(that.$element()) - filterAreaHeight - dataHeaderHeight - (Math.max(getHeight(that._dataArea.headElement()), getHeight(columnAreaCell), descriptionCellHeight) + bordersWidth);\n      }\n\n      totalWidth = getWidth(that._dataArea.tableElement());\n      totalHeight = getArraySum(resultHeights);\n\n      if (!totalWidth || !totalHeight) {\n        d.resolve();\n        return;\n      }\n\n      rowsAreaWidth = getArraySum(rowsAreaColumnWidths);\n      var elementWidth = getWidth(that.$element());\n      bordersWidth = getCommonBorderWidth([rowAreaCell, dataAreaCell, tableElement], \"width\");\n      groupWidth = elementWidth - rowsAreaWidth - bordersWidth;\n      groupWidth = groupWidth > 0 ? groupWidth : totalWidth;\n      var diff = totalWidth - groupWidth;\n      var needAdjustWidthOnZoom = diff >= 0 && diff <= 2;\n\n      if (needAdjustWidthOnZoom) {\n        adjustSizeArray(resultWidths, diff);\n        totalWidth = groupWidth;\n      }\n\n      hasRowsScroll = that._hasHeight && calculateHasScroll(dataAreaHeight, totalHeight);\n      hasColumnsScroll = calculateHasScroll(groupWidth, totalWidth);\n\n      var scrollBarWidth = that._dataArea.getScrollbarWidth();\n\n      var groupHeight = calculateGroupHeight(dataAreaHeight, totalHeight, hasRowsScroll, hasColumnsScroll, scrollBarWidth);\n      deferRender(function () {\n        that._columnsArea.tableElement().append(that._dataArea.headElement());\n\n        rowFieldsHeader.tableElement().append(that._rowsArea.headElement());\n\n        if (!hasColumnsScroll && hasRowsScroll && scrollBarWidth) {\n          adjustSizeArray(resultWidths, scrollBarWidth);\n          totalWidth -= scrollBarWidth;\n        }\n\n        if (descriptionCellHeight > columnsAreaHeight) {\n          adjustSizeArray(columnsAreaRowHeights, columnsAreaHeight - descriptionCellHeight);\n\n          that._columnsArea.setRowsHeight(columnsAreaRowHeights);\n        }\n\n        tableElement.removeClass(INCOMPRESSIBLE_FIELDS_CLASS);\n        columnHeaderCell.children().css(\"maxWidth\", groupWidth);\n\n        that._columnsArea.setGroupWidth(groupWidth);\n\n        that._columnsArea.processScrollBarSpacing(hasRowsScroll ? scrollBarWidth : 0);\n\n        that._columnsArea.setColumnsWidth(resultWidths);\n\n        that._rowsArea.setGroupHeight(that._hasHeight ? groupHeight : \"auto\");\n\n        that._rowsArea.processScrollBarSpacing(hasColumnsScroll ? scrollBarWidth : 0);\n\n        that._rowsArea.setColumnsWidth(rowsAreaColumnWidths);\n\n        that._rowsArea.setRowsHeight(resultHeights);\n\n        that._dataArea.setColumnsWidth(resultWidths);\n\n        that._dataArea.setRowsHeight(resultHeights);\n\n        that._dataArea.setGroupWidth(groupWidth);\n\n        that._dataArea.setGroupHeight(that._hasHeight ? groupHeight : \"auto\");\n\n        needSynchronizeFieldPanel && rowFieldsHeader.setColumnsWidth(rowsAreaColumnWidths);\n        dataAreaCell.toggleClass(BOTTOM_BORDER_CLASS, !hasRowsScroll);\n        rowAreaCell.toggleClass(BOTTOM_BORDER_CLASS, !hasRowsScroll);\n\n        if (!that._hasHeight && elementWidth !== getWidth(that.$element())) {\n          var _diff = elementWidth - getWidth(that.$element());\n\n          if (!hasColumnsScroll) {\n            adjustSizeArray(resultWidths, _diff);\n\n            that._columnsArea.setColumnsWidth(resultWidths);\n\n            that._dataArea.setColumnsWidth(resultWidths);\n          }\n\n          that._dataArea.setGroupWidth(groupWidth - _diff);\n\n          that._columnsArea.setGroupWidth(groupWidth - _diff);\n        }\n\n        if (that._hasHeight && that._filterFields.isVisible() && getHeight(filterHeaderCell) !== filterAreaHeight) {\n          var _diff2 = getHeight(filterHeaderCell) - filterAreaHeight;\n\n          if (_diff2 > 0) {\n            hasRowsScroll = calculateHasScroll(dataAreaHeight - _diff2, totalHeight);\n\n            var _groupHeight = calculateGroupHeight(dataAreaHeight - _diff2, totalHeight, hasRowsScroll, hasColumnsScroll, scrollBarWidth);\n\n            that._dataArea.setGroupHeight(_groupHeight);\n\n            that._rowsArea.setGroupHeight(_groupHeight);\n          }\n        }\n\n        var scrollingOptions = that.option(\"scrolling\");\n\n        if (\"virtual\" === scrollingOptions.mode) {\n          that._setVirtualContentParams(scrollingOptions, resultWidths, resultHeights, groupWidth, groupHeight, that._hasHeight, rowsAreaWidth);\n        }\n\n        var updateScrollableResults = [];\n\n        that._dataArea.updateScrollableOptions({\n          direction: that._dataArea.getScrollableDirection(hasColumnsScroll, hasRowsScroll),\n          rtlEnabled: that.option(\"rtlEnabled\")\n        });\n\n        each([that._columnsArea, that._rowsArea, that._dataArea], function (_, area) {\n          updateScrollableResults.push(area && area.updateScrollable());\n        });\n\n        that._updateLoading();\n\n        that._renderNoDataText(dataAreaCell);\n\n        when.apply($, updateScrollableResults).done(function () {\n          that._updateScrollPosition(that._columnsArea, that._rowsArea, that._dataArea);\n\n          that._subscribeToEvents(that._columnsArea, that._rowsArea, that._dataArea);\n\n          d.resolve();\n        });\n      });\n    });\n    return d;\n  },\n  _setVirtualContentParams: function _setVirtualContentParams(scrollingOptions, resultWidths, resultHeights, groupWidth, groupHeight, hasHeight, rowsAreaWidth) {\n    var virtualContentParams = this._dataController.calculateVirtualContentParams({\n      virtualRowHeight: scrollingOptions.virtualRowHeight,\n      virtualColumnWidth: scrollingOptions.virtualColumnWidth,\n      itemWidths: resultWidths,\n      itemHeights: resultHeights,\n      rowCount: resultHeights.length,\n      columnCount: resultWidths.length,\n      viewportWidth: groupWidth,\n      viewportHeight: hasHeight ? groupHeight : getOuterHeight(window)\n    });\n\n    this._dataArea.setVirtualContentParams({\n      top: virtualContentParams.contentTop,\n      left: virtualContentParams.contentLeft,\n      width: virtualContentParams.width,\n      height: virtualContentParams.height\n    });\n\n    this._rowsArea.setVirtualContentParams({\n      top: virtualContentParams.contentTop,\n      width: rowsAreaWidth,\n      height: virtualContentParams.height\n    });\n\n    this._columnsArea.setVirtualContentParams({\n      left: virtualContentParams.contentLeft,\n      width: virtualContentParams.width,\n      height: getHeight(this._columnsArea.groupElement())\n    });\n  },\n  applyPartialDataSource: function applyPartialDataSource(area, path, dataSource) {\n    this._dataController.applyPartialDataSource(area, path, dataSource);\n  }\n}).inherit(ExportController).include(chartIntegrationMixin);\nregisterComponent(\"dxPivotGrid\", PivotGrid);\nexport default PivotGrid;","map":null,"metadata":{},"sourceType":"module"}