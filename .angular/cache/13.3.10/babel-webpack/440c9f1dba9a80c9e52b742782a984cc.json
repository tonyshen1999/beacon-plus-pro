{"ast":null,"code":"import _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/appointments/cellPositionCalculator.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { isDefined } from \"../../../core/utils/type\";\nimport dateUtils from \"../../../core/utils/date\";\n\nvar BaseStrategy = /*#__PURE__*/function () {\n  function BaseStrategy(options) {\n    _classCallCheck(this, BaseStrategy);\n\n    this.options = options;\n  }\n\n  _createClass(BaseStrategy, [{\n    key: \"DOMMetaData\",\n    get: function get() {\n      return this.options.DOMMetaData;\n    }\n  }, {\n    key: \"appointments\",\n    get: function get() {\n      return this.options.dateSettings;\n    }\n  }, {\n    key: \"viewDataProvider\",\n    get: function get() {\n      return this.options.viewDataProvider;\n    }\n  }, {\n    key: \"positionHelper\",\n    get: function get() {\n      return this.options.positionHelper;\n    }\n  }, {\n    key: \"startViewDate\",\n    get: function get() {\n      return this.options.startViewDate;\n    }\n  }, {\n    key: \"viewStartDayHour\",\n    get: function get() {\n      return this.options.viewStartDayHour;\n    }\n  }, {\n    key: \"viewEndDayHour\",\n    get: function get() {\n      return this.options.viewEndDayHour;\n    }\n  }, {\n    key: \"cellDuration\",\n    get: function get() {\n      return this.options.cellDuration;\n    }\n  }, {\n    key: \"getPositionShift\",\n    get: function get() {\n      return this.options.getPositionShiftCallback;\n    }\n  }, {\n    key: \"groupCount\",\n    get: function get() {\n      return this.options.groupCount;\n    }\n  }, {\n    key: \"rtlEnabled\",\n    get: function get() {\n      return this.options.rtlEnabled;\n    }\n  }, {\n    key: \"isVerticalGrouping\",\n    get: function get() {\n      return this.options.isVerticalOrientation;\n    }\n  }, {\n    key: \"showAllDayPanel\",\n    get: function get() {\n      return this.options.showAllDayPanel;\n    }\n  }, {\n    key: \"supportAllDayRow\",\n    get: function get() {\n      return this.options.supportAllDayRow;\n    }\n  }, {\n    key: \"isGroupedAllDayPanel\",\n    get: function get() {\n      return this.options.isGroupedAllDayPanel;\n    }\n  }, {\n    key: \"isVirtualScrolling\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"calculateCellPositions\",\n    value: function calculateCellPositions(groupIndices, isAllDayRowAppointment, isRecurrentAppointment) {\n      var _this = this;\n\n      var result = [];\n      this.appointments.forEach(function (dateSetting, index) {\n        var coordinates = _this.getCoordinateInfos({\n          appointment: dateSetting,\n          groupIndices: groupIndices,\n          isAllDayRowAppointment: isAllDayRowAppointment,\n          isRecurrentAppointment: isRecurrentAppointment\n        });\n\n        coordinates.forEach(function (item) {\n          !!item && result.push(_this._prepareObject(item, index));\n        });\n      });\n      return result;\n    }\n  }, {\n    key: \"getCoordinateInfos\",\n    value: function getCoordinateInfos(options) {\n      var appointment = options.appointment,\n          isAllDayRowAppointment = options.isAllDayRowAppointment,\n          groupIndices = options.groupIndices,\n          recurrent = options.recurrent;\n      var startDate = appointment.startDate;\n      var groupIndex = !recurrent ? appointment.source.groupIndex : void 0;\n      return this.getCoordinatesByDateInGroup(startDate, groupIndices, isAllDayRowAppointment, groupIndex);\n    }\n  }, {\n    key: \"_prepareObject\",\n    value: function _prepareObject(position, dateSettingIndex) {\n      position.dateSettingIndex = dateSettingIndex;\n      return {\n        coordinates: position,\n        dateSettingIndex: dateSettingIndex\n      };\n    }\n  }, {\n    key: \"getCoordinatesByDate\",\n    value: function getCoordinatesByDate(date, groupIndex, inAllDayRow) {\n      var validGroupIndex = groupIndex || 0;\n      var cellInfo = {\n        groupIndex: validGroupIndex,\n        startDate: date,\n        isAllDay: inAllDayRow\n      };\n      var positionByMap = this.viewDataProvider.findCellPositionInMap(cellInfo);\n\n      if (!positionByMap) {\n        return;\n      }\n\n      var position = this.getCellPosition(positionByMap, inAllDayRow && !this.isVerticalGrouping);\n      var timeShift = inAllDayRow ? 0 : this.getTimeShift(date);\n      var shift = this.getPositionShift(timeShift, inAllDayRow);\n      var horizontalHMax = this.positionHelper.getHorizontalMax(validGroupIndex, date);\n      var verticalMax = this.positionHelper.getVerticalMax({\n        groupIndex: validGroupIndex,\n        isVirtualScrolling: this.isVirtualScrolling,\n        showAllDayPanel: this.showAllDayPanel,\n        supportAllDayRow: this.supportAllDayRow,\n        isGroupedAllDayPanel: this.isGroupedAllDayPanel,\n        isVerticalGrouping: this.isVerticalGrouping\n      });\n      return {\n        positionByMap: positionByMap,\n        cellPosition: position.left + shift.cellPosition,\n        top: position.top + shift.top,\n        left: position.left + shift.left,\n        rowIndex: position.rowIndex,\n        columnIndex: position.columnIndex,\n        hMax: horizontalHMax,\n        vMax: verticalMax,\n        groupIndex: validGroupIndex\n      };\n    }\n  }, {\n    key: \"getCoordinatesByDateInGroup\",\n    value: function getCoordinatesByDateInGroup(startDate, groupIndices, inAllDayRow, groupIndex) {\n      var _this2 = this;\n\n      var result = [];\n\n      if (this.viewDataProvider.isSkippedDate(startDate)) {\n        return result;\n      }\n\n      var validGroupIndices = [groupIndex];\n\n      if (!isDefined(groupIndex)) {\n        validGroupIndices = this.groupCount ? groupIndices : [0];\n      }\n\n      validGroupIndices.forEach(function (groupIndex) {\n        var coordinates = _this2.getCoordinatesByDate(startDate, groupIndex, inAllDayRow);\n\n        if (coordinates) {\n          result.push(coordinates);\n        }\n      });\n      return result;\n    }\n  }, {\n    key: \"getCellPosition\",\n    value: function getCellPosition(cellCoordinates, isAllDayPanel) {\n      var _this$DOMMetaData = this.DOMMetaData,\n          dateTableCellsMeta = _this$DOMMetaData.dateTableCellsMeta,\n          allDayPanelCellsMeta = _this$DOMMetaData.allDayPanelCellsMeta;\n      var columnIndex = cellCoordinates.columnIndex,\n          rowIndex = cellCoordinates.rowIndex;\n      var position = isAllDayPanel ? allDayPanelCellsMeta[columnIndex] : dateTableCellsMeta[rowIndex][columnIndex];\n\n      var validPosition = _extends({}, position);\n\n      if (this.rtlEnabled) {\n        validPosition.left += position.width;\n      }\n\n      if (validPosition) {\n        validPosition.rowIndex = cellCoordinates.rowIndex;\n        validPosition.columnIndex = cellCoordinates.columnIndex;\n      }\n\n      return validPosition;\n    }\n  }, {\n    key: \"getTimeShift\",\n    value: function getTimeShift(date) {\n      var currentDayStart = new Date(date);\n      var currentDayEndHour = new Date(new Date(date).setHours(this.viewEndDayHour, 0, 0));\n\n      if (date.getTime() <= currentDayEndHour.getTime()) {\n        currentDayStart.setHours(this.viewStartDayHour, 0, 0, 0);\n      }\n\n      var timeZoneDifference = dateUtils.getTimezonesDifference(date, currentDayStart);\n      var currentDateTime = date.getTime();\n      var currentDayStartTime = currentDayStart.getTime();\n      var minTime = this.startViewDate.getTime();\n      return currentDateTime > minTime ? (currentDateTime - currentDayStartTime + timeZoneDifference) % this.cellDuration / this.cellDuration : 0;\n    }\n  }]);\n\n  return BaseStrategy;\n}();\n\nvar VirtualStrategy = /*#__PURE__*/function (_BaseStrategy) {\n  _inherits(VirtualStrategy, _BaseStrategy);\n\n  var _super = _createSuper(VirtualStrategy);\n\n  function VirtualStrategy() {\n    _classCallCheck(this, VirtualStrategy);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(VirtualStrategy, [{\n    key: \"isVirtualScrolling\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"calculateCellPositions\",\n    value: function calculateCellPositions(groupIndices, isAllDayRowAppointment, isRecurrentAppointment) {\n      var _this3 = this;\n\n      var appointments = isAllDayRowAppointment ? this.appointments : this.appointments.filter(function (_ref) {\n        var source = _ref.source,\n            startDate = _ref.startDate,\n            endDate = _ref.endDate;\n        return _this3.viewDataProvider.isGroupIntersectDateInterval(source.groupIndex, startDate, endDate);\n      });\n\n      if (isRecurrentAppointment) {\n        return this.createRecurrentAppointmentInfos(appointments, isAllDayRowAppointment);\n      }\n\n      return _get(_getPrototypeOf(VirtualStrategy.prototype), \"calculateCellPositions\", this).call(this, groupIndices, isAllDayRowAppointment, isRecurrentAppointment);\n    }\n  }, {\n    key: \"createRecurrentAppointmentInfos\",\n    value: function createRecurrentAppointmentInfos(dateSettings, isAllDayRowAppointment) {\n      var _this4 = this;\n\n      var result = [];\n      dateSettings.forEach(function (_ref2, index) {\n        var source = _ref2.source,\n            startDate = _ref2.startDate;\n\n        var coordinate = _this4.getCoordinatesByDate(startDate, source.groupIndex, isAllDayRowAppointment);\n\n        if (coordinate) {\n          result.push(_this4._prepareObject(coordinate, index));\n        }\n      });\n      return result;\n    }\n  }]);\n\n  return VirtualStrategy;\n}(BaseStrategy);\n\nexport var CellPositionCalculator = /*#__PURE__*/function () {\n  function CellPositionCalculator(options) {\n    _classCallCheck(this, CellPositionCalculator);\n\n    this.options = options;\n  }\n\n  _createClass(CellPositionCalculator, [{\n    key: \"calculateCellPositions\",\n    value: function calculateCellPositions(groupIndices, isAllDayRowAppointment, isRecurrentAppointment) {\n      var strategy = this.options.isVirtualScrolling ? new VirtualStrategy(this.options) : new BaseStrategy(this.options);\n      return strategy.calculateCellPositions(groupIndices, isAllDayRowAppointment, isRecurrentAppointment);\n    }\n  }]);\n\n  return CellPositionCalculator;\n}();","map":null,"metadata":{},"sourceType":"module"}