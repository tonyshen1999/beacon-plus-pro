{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/drop_down_editor/ui.drop_down_list.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getOuterHeight } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport { getWindow } from \"../../core/utils/window\";\nvar window = getWindow();\nimport eventsEngine from \"../../events/core/events_engine\";\nimport Guid from \"../../core/guid\";\nimport registerComponent from \"../../core/component_registrator\";\nimport { noop, ensureDefined, grep } from \"../../core/utils/common\";\nimport { isWindow, isDefined, isObject } from \"../../core/utils/type\";\nimport { extend } from \"../../core/utils/extend\";\nimport { inArray } from \"../../core/utils/array\";\nimport DropDownEditor from \"./ui.drop_down_editor\";\nimport List from \"../list_light\";\nimport errors from \"../widget/ui.errors\";\nimport { addNamespace } from \"../../events/utils/index\";\nimport devices from \"../../core/devices\";\nimport dataQuery from \"../../data/query\";\nimport { each } from \"../../core/utils/iterator\";\nimport DataExpressionMixin from \"../editor/ui.data_expression\";\nimport messageLocalization from \"../../localization/message\";\nimport { ChildDefaultTemplate } from \"../../core/templates/child_default_template\";\nimport { Deferred } from \"../../core/utils/deferred\";\nimport DataConverterMixin from \"../shared/grouped_data_converter_mixin\";\nvar LIST_ITEM_SELECTOR = \".dx-list-item\";\nvar LIST_ITEM_DATA_KEY = \"dxListItemData\";\nvar DROPDOWNLIST_POPUP_WRAPPER_CLASS = \"dx-dropdownlist-popup-wrapper\";\nvar SKIP_GESTURE_EVENT_CLASS = \"dx-skip-gesture-event\";\nvar SEARCH_EVENT = \"input\";\nvar SEARCH_MODES = [\"startswith\", \"contains\", \"endwith\", \"notcontains\"];\nvar useCompositionEvents = \"android\" !== devices.real().platform;\nvar DropDownList = DropDownEditor.inherit({\n  _supportedKeys: function _supportedKeys() {\n    var parent = this.callBase();\n    return extend({}, parent, {\n      tab: function tab(e) {\n        if (this._allowSelectItemByTab()) {\n          this._saveValueChangeEvent(e);\n\n          var $focusedItem = $(this._list.option(\"focusedElement\"));\n          $focusedItem.length && this._setSelectedElement($focusedItem);\n        }\n\n        parent.tab.apply(this, arguments);\n      },\n      space: noop,\n      home: noop,\n      end: noop\n    });\n  },\n  _allowSelectItemByTab: function _allowSelectItemByTab() {\n    return this.option(\"opened\") && \"instantly\" === this.option(\"applyValueMode\");\n  },\n  _setSelectedElement: function _setSelectedElement($element) {\n    var value = this._valueGetter(this._list._getItemData($element));\n\n    this._setValue(value);\n  },\n  _setValue: function _setValue(value) {\n    this.option(\"value\", value);\n  },\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), extend(DataExpressionMixin._dataExpressionDefaultOptions(), {\n      displayValue: void 0,\n      searchEnabled: false,\n      searchMode: \"contains\",\n      searchTimeout: 500,\n      minSearchLength: 0,\n      searchExpr: null,\n      valueChangeEvent: \"input change keyup\",\n      selectedItem: null,\n      noDataText: messageLocalization.format(\"dxCollectionWidget-noDataText\"),\n      onSelectionChanged: null,\n      onItemClick: noop,\n      showDataBeforeSearch: false,\n      grouped: false,\n      groupTemplate: \"group\",\n      popupPosition: {\n        my: \"left top\",\n        at: \"left bottom\",\n        offset: {\n          h: 0,\n          v: 0\n        },\n        collision: \"flip\"\n      },\n      wrapItemText: false,\n      useItemTextAsTitle: false\n    }));\n  },\n  _defaultOptionsRules: function _defaultOptionsRules() {\n    return this.callBase().concat([{\n      device: {\n        platform: \"ios\"\n      },\n      options: {\n        popupPosition: {\n          offset: {\n            v: -1\n          }\n        }\n      }\n    }, {\n      device: {\n        platform: \"generic\"\n      },\n      options: {\n        buttonsLocation: \"bottom center\"\n      }\n    }]);\n  },\n  _setOptionsByReference: function _setOptionsByReference() {\n    this.callBase();\n    extend(this._optionsByReference, {\n      value: true,\n      selectedItem: true,\n      displayValue: true\n    });\n  },\n  _init: function _init() {\n    this.callBase();\n\n    this._initDataExpressions();\n\n    this._initActions();\n\n    this._setListDataSource();\n\n    this._validateSearchMode();\n\n    this._clearSelectedItem();\n\n    this._initItems();\n  },\n  _setListFocusedElementOptionChange: function _setListFocusedElementOptionChange() {\n    this._list._updateParentActiveDescendant = this._updateActiveDescendant.bind(this);\n  },\n  _initItems: function _initItems() {\n    var items = this.option().items;\n\n    if (items && !items.length && this._dataSource) {\n      this.option().items = this._dataSource.items();\n    }\n  },\n  _initActions: function _initActions() {\n    this._initContentReadyAction();\n\n    this._initSelectionChangedAction();\n\n    this._initItemClickAction();\n  },\n  _initContentReadyAction: function _initContentReadyAction() {\n    this._contentReadyAction = this._createActionByOption(\"onContentReady\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n  },\n  _initSelectionChangedAction: function _initSelectionChangedAction() {\n    this._selectionChangedAction = this._createActionByOption(\"onSelectionChanged\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n  },\n  _initItemClickAction: function _initItemClickAction() {\n    this._itemClickAction = this._createActionByOption(\"onItemClick\");\n  },\n  _initTemplates: function _initTemplates() {\n    this.callBase();\n\n    this._templateManager.addDefaultTemplates({\n      item: new ChildDefaultTemplate(\"item\")\n    });\n  },\n  _isEditable: function _isEditable() {\n    return this.callBase() || this.option(\"searchEnabled\");\n  },\n  _saveFocusOnWidget: function _saveFocusOnWidget(e) {\n    if (this._list && this._list.initialOption(\"focusStateEnabled\")) {\n      this._focusInput();\n    }\n  },\n  _fitIntoRange: function _fitIntoRange(value, start, end) {\n    if (value > end) {\n      return start;\n    }\n\n    if (value < start) {\n      return end;\n    }\n\n    return value;\n  },\n  _items: function _items() {\n    var items = this._getPlainItems(!this._list && this._dataSource.items());\n\n    var availableItems = new dataQuery(items).filter(\"disabled\", \"<>\", true).toArray();\n    return availableItems;\n  },\n  _calcNextItem: function _calcNextItem(step) {\n    var items = this._items();\n\n    var nextIndex = this._fitIntoRange(this._getSelectedIndex() + step, 0, items.length - 1);\n\n    return items[nextIndex];\n  },\n  _getSelectedIndex: function _getSelectedIndex() {\n    var items = this._items();\n\n    var selectedItem = this.option(\"selectedItem\");\n    var result = -1;\n    each(items, function (index, item) {\n      if (this._isValueEquals(item, selectedItem)) {\n        result = index;\n        return false;\n      }\n    }.bind(this));\n    return result;\n  },\n  _createPopup: function _createPopup() {\n    this.callBase();\n\n    this._updateCustomBoundaryContainer();\n\n    this._popup.$wrapper().addClass(this._popupWrapperClass());\n\n    var $popupContent = this._popup.$content();\n\n    eventsEngine.off($popupContent, \"mouseup\");\n    eventsEngine.on($popupContent, \"mouseup\", this._saveFocusOnWidget.bind(this));\n    var that = this;\n\n    this._popup.on({\n      shown: function shown() {\n        that.$element().addClass(SKIP_GESTURE_EVENT_CLASS);\n      },\n      hidden: function hidden() {\n        that.$element().removeClass(SKIP_GESTURE_EVENT_CLASS);\n      }\n    });\n  },\n  _updateCustomBoundaryContainer: function _updateCustomBoundaryContainer() {\n    var customContainer = this.option(\"dropDownOptions.container\");\n    var $container = customContainer && $(customContainer);\n\n    if ($container && $container.length && !isWindow($container.get(0))) {\n      var $containerWithParents = [].slice.call($container.parents());\n      $containerWithParents.unshift($container.get(0));\n      each($containerWithParents, function (i, parent) {\n        if (parent === $(\"body\").get(0)) {\n          return false;\n        } else if (\"hidden\" === window.getComputedStyle(parent).overflowY) {\n          this._$customBoundaryContainer = $(parent);\n          return false;\n        }\n      }.bind(this));\n    }\n  },\n  _popupWrapperClass: function _popupWrapperClass() {\n    return DROPDOWNLIST_POPUP_WRAPPER_CLASS;\n  },\n  _renderInputValue: function _renderInputValue() {\n    var value = this._getCurrentValue();\n\n    this._rejectValueLoading();\n\n    return this._loadInputValue(value, this._setSelectedItem.bind(this)).always(this.callBase.bind(this, value));\n  },\n  _loadInputValue: function _loadInputValue(value, callback) {\n    return this._loadItem(value).always(callback);\n  },\n  _getItemFromPlain: function _getItemFromPlain(value, cache) {\n    var plainItems;\n    var selectedItem;\n\n    if (cache && \"object\" !== typeof value) {\n      if (!cache.itemByValue) {\n        cache.itemByValue = {};\n        plainItems = this._getPlainItems();\n        plainItems.forEach(function (item) {\n          cache.itemByValue[this._valueGetter(item)] = item;\n        }, this);\n      }\n\n      selectedItem = cache.itemByValue[value];\n    }\n\n    if (!selectedItem) {\n      plainItems = this._getPlainItems();\n      selectedItem = grep(plainItems, function (item) {\n        return this._isValueEquals(this._valueGetter(item), value);\n      }.bind(this))[0];\n    }\n\n    return selectedItem;\n  },\n  _loadItem: function _loadItem(value, cache) {\n    var selectedItem = this._getItemFromPlain(value, cache);\n\n    return void 0 !== selectedItem ? new Deferred().resolve(selectedItem).promise() : this._loadValue(value);\n  },\n  _getPlainItems: function _getPlainItems(items) {\n    var plainItems = [];\n    items = items || this.option(\"items\") || this._dataSource.items() || [];\n\n    for (var i = 0; i < items.length; i++) {\n      if (items[i] && items[i].items) {\n        plainItems = plainItems.concat(items[i].items);\n      } else {\n        plainItems.push(items[i]);\n      }\n    }\n\n    return plainItems;\n  },\n  _updateActiveDescendant: function _updateActiveDescendant() {\n    var _this$_list;\n\n    var opened = this.option(\"opened\");\n    var listFocusedItemId = null === (_this$_list = this._list) || void 0 === _this$_list ? void 0 : _this$_list.getFocusedItemId();\n    var isElementOnDom = $(\"#\".concat(listFocusedItemId)).length > 0;\n    var activedescendant = opened && isElementOnDom && listFocusedItemId;\n    this.setAria({\n      activedescendant: activedescendant || null\n    });\n  },\n  _setSelectedItem: function _setSelectedItem(item) {\n    var displayValue = this._displayValue(item);\n\n    this.option(\"selectedItem\", ensureDefined(item, null));\n    this.option(\"displayValue\", displayValue);\n  },\n  _displayValue: function _displayValue(item) {\n    return this._displayGetter(item);\n  },\n  _refreshSelected: function _refreshSelected() {\n    var cache = {};\n\n    this._listItemElements().each(function (_, itemElement) {\n      var $itemElement = $(itemElement);\n\n      var itemValue = this._valueGetter($itemElement.data(LIST_ITEM_DATA_KEY));\n\n      var isItemSelected = this._isSelectedValue(itemValue, cache);\n\n      if (isItemSelected) {\n        this._list.selectItem($itemElement);\n      } else {\n        this._list.unselectItem($itemElement);\n      }\n    }.bind(this));\n  },\n  _popupShownHandler: function _popupShownHandler() {\n    this.callBase();\n\n    this._setFocusPolicy();\n  },\n  _setFocusPolicy: function _setFocusPolicy() {\n    if (!this.option(\"focusStateEnabled\") || !this._list) {\n      return;\n    }\n\n    this._list.option(\"focusedElement\", null);\n  },\n  _isSelectedValue: function _isSelectedValue(value) {\n    return this._isValueEquals(value, this.option(\"value\"));\n  },\n  _validateSearchMode: function _validateSearchMode() {\n    var searchMode = this.option(\"searchMode\");\n    var normalizedSearchMode = searchMode.toLowerCase();\n\n    if (inArray(normalizedSearchMode, SEARCH_MODES) < 0) {\n      throw errors.Error(\"E1019\", searchMode);\n    }\n  },\n  _clearSelectedItem: function _clearSelectedItem() {\n    this.option(\"selectedItem\", null);\n  },\n  _processDataSourceChanging: function _processDataSourceChanging() {\n    this._setListDataSource();\n\n    this._renderInputValue().fail(function () {\n      if (this._isCustomValueAllowed()) {\n        return;\n      }\n\n      this._clearSelectedItem();\n    }.bind(this));\n  },\n  _isCustomValueAllowed: function _isCustomValueAllowed() {\n    return this.option(\"displayCustomValue\");\n  },\n  reset: function reset() {\n    this.callBase();\n\n    this._clearFilter();\n\n    this._clearSelectedItem();\n  },\n  _listItemElements: function _listItemElements() {\n    return this._$list ? this._$list.find(LIST_ITEM_SELECTOR) : $();\n  },\n  _popupConfig: function _popupConfig() {\n    return extend(this.callBase(), {\n      templatesRenderAsynchronously: false,\n      autoResizeEnabled: false,\n      maxHeight: this._getMaxHeight.bind(this)\n    });\n  },\n  _renderPopupContent: function _renderPopupContent() {\n    this.callBase();\n\n    this._renderList();\n  },\n  _getKeyboardListeners: function _getKeyboardListeners() {\n    var canListHaveFocus = this._canListHaveFocus();\n\n    return this.callBase().concat([!canListHaveFocus && this._list]);\n  },\n  _setAriaTargetForList: function _setAriaTargetForList() {\n    this._list._getAriaTarget = this._getAriaTarget.bind(this);\n  },\n  _renderList: function _renderList() {\n    this._listId = \"dx-\" + new Guid()._value;\n    var $list = this._$list = $(\"<div>\").attr(\"id\", this._listId).appendTo(this._popup.$content());\n    this._list = this._createComponent($list, List, this._listConfig());\n\n    this._refreshList();\n\n    this._setAriaTargetForList();\n\n    this._list.option(\"_listAttributes\", {\n      role: \"combobox\"\n    });\n\n    this._renderPreventBlurOnListClick();\n\n    this._setListFocusedElementOptionChange();\n  },\n  _renderPreventBlurOnListClick: function _renderPreventBlurOnListClick() {\n    var eventName = addNamespace(\"mousedown\", \"dxDropDownList\");\n    eventsEngine.off(this._$list, eventName);\n    eventsEngine.on(this._$list, eventName, function (e) {\n      return e.preventDefault();\n    });\n  },\n  _renderOpenedState: function _renderOpenedState() {\n    this.callBase();\n    this._list && this._updateActiveDescendant();\n    this.setAria({\n      controls: this._list && this._listId,\n      owns: this._popup && this._popupContentId\n    });\n  },\n  _setDefaultAria: function _setDefaultAria() {\n    this.setAria({\n      haspopup: \"listbox\",\n      autocomplete: \"list\"\n    });\n  },\n  _refreshList: function _refreshList() {\n    if (this._list && this._shouldRefreshDataSource()) {\n      this._setListDataSource();\n    }\n  },\n  _shouldRefreshDataSource: function _shouldRefreshDataSource() {\n    var dataSourceProvided = !!this._list.option(\"dataSource\");\n    return dataSourceProvided !== this._needPassDataSourceToList();\n  },\n  _isDesktopDevice: function _isDesktopDevice() {\n    return \"desktop\" === devices.real().deviceType;\n  },\n  _listConfig: function _listConfig() {\n    var options = {\n      selectionMode: \"single\",\n      _templates: this.option(\"_templates\"),\n      templateProvider: this.option(\"templateProvider\"),\n      noDataText: this.option(\"noDataText\"),\n      grouped: this.option(\"grouped\"),\n      wrapItemText: this.option(\"wrapItemText\"),\n      useItemTextAsTitle: this.option(\"useItemTextAsTitle\"),\n      onContentReady: this._listContentReadyHandler.bind(this),\n      itemTemplate: this.option(\"itemTemplate\"),\n      indicateLoading: false,\n      keyExpr: this._getCollectionKeyExpr(),\n      displayExpr: this._displayGetterExpr(),\n      groupTemplate: this.option(\"groupTemplate\"),\n      onItemClick: this._listItemClickAction.bind(this),\n      dataSource: this._getDataSource(),\n      _revertPageOnEmptyLoad: true,\n      hoverStateEnabled: this._isDesktopDevice() ? this.option(\"hoverStateEnabled\") : false,\n      focusStateEnabled: this._isDesktopDevice() ? this.option(\"focusStateEnabled\") : false\n    };\n\n    if (!this._canListHaveFocus()) {\n      options.tabIndex = null;\n    }\n\n    return options;\n  },\n  _canListHaveFocus: function _canListHaveFocus() {\n    return false;\n  },\n  _getDataSource: function _getDataSource() {\n    return this._needPassDataSourceToList() ? this._dataSource : null;\n  },\n  _dataSourceOptions: function _dataSourceOptions() {\n    return {\n      paginate: false\n    };\n  },\n  _getGroupedOption: function _getGroupedOption() {\n    return this.option(\"grouped\");\n  },\n  _dataSourceFromUrlLoadMode: function _dataSourceFromUrlLoadMode() {\n    return \"raw\";\n  },\n  _listContentReadyHandler: function _listContentReadyHandler() {\n    this._list = this._list || this._$list.dxList(\"instance\");\n\n    if (!this.option(\"deferRendering\")) {\n      this._refreshSelected();\n    }\n\n    this._dimensionChanged();\n\n    this._contentReadyAction();\n  },\n  _setListOption: function _setListOption(optionName, value) {\n    this._setWidgetOption(\"_list\", arguments);\n  },\n  _listItemClickAction: function _listItemClickAction(e) {\n    this._listItemClickHandler(e);\n\n    this._itemClickAction(e);\n  },\n  _listItemClickHandler: noop,\n  _setListDataSource: function _setListDataSource() {\n    if (!this._list) {\n      return;\n    }\n\n    this._setListOption(\"dataSource\", this._getDataSource());\n\n    if (!this._needPassDataSourceToList()) {\n      this._setListOption(\"items\", []);\n    }\n  },\n  _needPassDataSourceToList: function _needPassDataSourceToList() {\n    return this.option(\"showDataBeforeSearch\") || this._isMinSearchLengthExceeded();\n  },\n  _isMinSearchLengthExceeded: function _isMinSearchLengthExceeded() {\n    return this._searchValue().toString().length >= this.option(\"minSearchLength\");\n  },\n  _needClearFilter: function _needClearFilter() {\n    return this._canKeepDataSource() ? false : this._needPassDataSourceToList();\n  },\n  _canKeepDataSource: function _canKeepDataSource() {\n    var _this$_dataSource;\n\n    var isMinSearchLengthExceeded = this._isMinSearchLengthExceeded();\n\n    return (null === (_this$_dataSource = this._dataSource) || void 0 === _this$_dataSource ? void 0 : _this$_dataSource.isLoaded()) && this.option(\"showDataBeforeSearch\") && this.option(\"minSearchLength\") && !isMinSearchLengthExceeded && !this._isLastMinSearchLengthExceeded;\n  },\n  _searchValue: function _searchValue() {\n    return this._input().val() || \"\";\n  },\n  _getSearchEvent: function _getSearchEvent() {\n    return addNamespace(SEARCH_EVENT, this.NAME + \"Search\");\n  },\n  _getCompositionStartEvent: function _getCompositionStartEvent() {\n    return addNamespace(\"compositionstart\", this.NAME + \"CompositionStart\");\n  },\n  _getCompositionEndEvent: function _getCompositionEndEvent() {\n    return addNamespace(\"compositionend\", this.NAME + \"CompositionEnd\");\n  },\n  _getSetFocusPolicyEvent: function _getSetFocusPolicyEvent() {\n    return addNamespace(\"input\", this.NAME + \"FocusPolicy\");\n  },\n  _renderEvents: function _renderEvents() {\n    var _this = this;\n\n    this.callBase();\n    eventsEngine.on(this._input(), this._getSetFocusPolicyEvent(), function () {\n      _this._setFocusPolicy();\n    });\n\n    if (this._shouldRenderSearchEvent()) {\n      eventsEngine.on(this._input(), this._getSearchEvent(), function (e) {\n        _this._searchHandler(e);\n      });\n\n      if (useCompositionEvents) {\n        eventsEngine.on(this._input(), this._getCompositionStartEvent(), function () {\n          _this._isTextCompositionInProgress(true);\n        });\n        eventsEngine.on(this._input(), this._getCompositionEndEvent(), function (e) {\n          _this._isTextCompositionInProgress(void 0);\n\n          _this._searchHandler(e, _this._searchValue());\n        });\n      }\n    }\n  },\n  _shouldRenderSearchEvent: function _shouldRenderSearchEvent() {\n    return this.option(\"searchEnabled\");\n  },\n  _refreshEvents: function _refreshEvents() {\n    eventsEngine.off(this._input(), this._getSearchEvent());\n    eventsEngine.off(this._input(), this._getSetFocusPolicyEvent());\n\n    if (useCompositionEvents) {\n      eventsEngine.off(this._input(), this._getCompositionStartEvent());\n      eventsEngine.off(this._input(), this._getCompositionEndEvent());\n    }\n\n    this.callBase();\n  },\n  _isTextCompositionInProgress: function _isTextCompositionInProgress(value) {\n    if (arguments.length) {\n      this._isTextComposition = value;\n    } else {\n      return this._isTextComposition;\n    }\n  },\n  _searchHandler: function _searchHandler(e, searchValue) {\n    var _this2 = this;\n\n    if (this._isTextCompositionInProgress()) {\n      return;\n    }\n\n    if (!this._isMinSearchLengthExceeded()) {\n      this._searchCanceled();\n\n      return;\n    }\n\n    var searchTimeout = this.option(\"searchTimeout\");\n\n    if (searchTimeout) {\n      this._clearSearchTimer();\n\n      this._searchTimer = setTimeout(function () {\n        _this2._searchDataSource(searchValue);\n      }, searchTimeout);\n    } else {\n      this._searchDataSource(searchValue);\n    }\n  },\n  _searchCanceled: function _searchCanceled() {\n    this._clearSearchTimer();\n\n    if (this._needClearFilter()) {\n      this._filterDataSource(null);\n    }\n\n    this._refreshList();\n  },\n  _searchDataSource: function _searchDataSource() {\n    var searchValue = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this._searchValue();\n\n    this._filterDataSource(searchValue);\n  },\n  _filterDataSource: function _filterDataSource(searchValue) {\n    this._clearSearchTimer();\n\n    var dataSource = this._dataSource;\n\n    if (dataSource) {\n      dataSource.searchExpr(this.option(\"searchExpr\") || this._displayGetterExpr());\n      dataSource.searchOperation(this.option(\"searchMode\"));\n      dataSource.searchValue(searchValue);\n      dataSource.load().done(this._dataSourceFiltered.bind(this, searchValue));\n    }\n  },\n  _clearFilter: function _clearFilter() {\n    var dataSource = this._dataSource;\n    dataSource && dataSource.searchValue() && dataSource.searchValue(null);\n  },\n  _dataSourceFiltered: function _dataSourceFiltered() {\n    this._isLastMinSearchLengthExceeded = this._isMinSearchLengthExceeded();\n\n    this._refreshList();\n\n    this._refreshPopupVisibility();\n  },\n  _shouldOpenPopup: function _shouldOpenPopup() {\n    return this._hasItemsToShow();\n  },\n  _refreshPopupVisibility: function _refreshPopupVisibility() {\n    if (this.option(\"readOnly\") || !this._searchValue()) {\n      return;\n    }\n\n    var shouldOpenPopup = this._shouldOpenPopup();\n\n    if (shouldOpenPopup && !this._isFocused()) {\n      return;\n    }\n\n    this.option(\"opened\", shouldOpenPopup);\n\n    if (shouldOpenPopup) {\n      this._dimensionChanged();\n    }\n  },\n  _dataSourceChangedHandler: function _dataSourceChangedHandler(newItems) {\n    if (0 === this._dataSource.pageIndex()) {\n      this.option().items = newItems;\n    } else {\n      this.option().items = this.option().items.concat(newItems);\n    }\n  },\n  _hasItemsToShow: function _hasItemsToShow() {\n    var resultItems = this._dataSource && this._dataSource.items() || [];\n    var resultAmount = resultItems.length;\n\n    var isMinSearchLengthExceeded = this._needPassDataSourceToList();\n\n    return !!(isMinSearchLengthExceeded && resultAmount);\n  },\n  _clearSearchTimer: function _clearSearchTimer() {\n    clearTimeout(this._searchTimer);\n    delete this._searchTimer;\n  },\n  _popupShowingHandler: function _popupShowingHandler() {\n    this._dimensionChanged();\n  },\n  _dimensionChanged: function _dimensionChanged() {\n    this.callBase(arguments);\n    this._popup && this._updatePopupDimensions();\n  },\n  _needPopupRepaint: function _needPopupRepaint() {\n    if (!this._dataSource) {\n      return false;\n    }\n\n    var currentPageIndex = this._dataSource.pageIndex();\n\n    var needRepaint = isDefined(this._pageIndex) && currentPageIndex <= this._pageIndex;\n\n    this._pageIndex = currentPageIndex;\n    return needRepaint;\n  },\n  _updatePopupDimensions: function _updatePopupDimensions() {\n    if (this._needPopupRepaint()) {\n      this._popup.repaint();\n    }\n\n    this._list && this._list.updateDimensions();\n  },\n  _getMaxHeight: function _getMaxHeight() {\n    var $element = this.$element();\n    var $customBoundaryContainer = this._$customBoundaryContainer;\n    var offsetTop = $element.offset().top - ($customBoundaryContainer ? $customBoundaryContainer.offset().top : 0);\n    var windowHeight = getOuterHeight(window);\n    var containerHeight = $customBoundaryContainer ? Math.min(getOuterHeight($customBoundaryContainer), windowHeight) : windowHeight;\n    var maxHeight = Math.max(offsetTop, containerHeight - offsetTop - getOuterHeight($element));\n    return Math.min(.5 * containerHeight, maxHeight);\n  },\n  _clean: function _clean() {\n    if (this._list) {\n      delete this._list;\n    }\n\n    delete this._isLastMinSearchLengthExceeded;\n    this.callBase();\n  },\n  _dispose: function _dispose() {\n    this._clearSearchTimer();\n\n    this.callBase();\n  },\n  _setCollectionWidgetOption: function _setCollectionWidgetOption() {\n    this._setListOption.apply(this, arguments);\n  },\n  _setSubmitValue: function _setSubmitValue() {\n    var value = this.option(\"value\");\n    var submitValue = this._shouldUseDisplayValue(value) ? this._displayGetter(value) : value;\n\n    this._getSubmitElement().val(submitValue);\n  },\n  _shouldUseDisplayValue: function _shouldUseDisplayValue(value) {\n    return \"this\" === this.option(\"valueExpr\") && isObject(value);\n  },\n  _optionChanged: function _optionChanged(args) {\n    this._dataExpressionOptionChanged(args);\n\n    switch (args.name) {\n      case \"hoverStateEnabled\":\n      case \"focusStateEnabled\":\n        this._isDesktopDevice() && this._setListOption(args.name, args.value);\n        this.callBase(args);\n        break;\n\n      case \"items\":\n        if (!this.option(\"dataSource\")) {\n          this._processDataSourceChanging();\n        }\n\n        break;\n\n      case \"dataSource\":\n        this._processDataSourceChanging();\n\n        break;\n\n      case \"valueExpr\":\n        this._renderValue();\n\n        this._setListOption(\"keyExpr\", this._getCollectionKeyExpr());\n\n        break;\n\n      case \"displayExpr\":\n        this._renderValue();\n\n        this._setListOption(\"displayExpr\", this._displayGetterExpr());\n\n        break;\n\n      case \"searchMode\":\n        this._validateSearchMode();\n\n        break;\n\n      case \"minSearchLength\":\n        this._refreshList();\n\n        break;\n\n      case \"searchEnabled\":\n      case \"showDataBeforeSearch\":\n      case \"searchExpr\":\n        this._invalidate();\n\n        break;\n\n      case \"onContentReady\":\n        this._initContentReadyAction();\n\n        break;\n\n      case \"onSelectionChanged\":\n        this._initSelectionChangedAction();\n\n        break;\n\n      case \"onItemClick\":\n        this._initItemClickAction();\n\n        break;\n\n      case \"grouped\":\n      case \"groupTemplate\":\n      case \"wrapItemText\":\n      case \"noDataText\":\n      case \"useItemTextAsTitle\":\n        this._setListOption(args.name);\n\n        break;\n\n      case \"displayValue\":\n        this.option(\"text\", args.value);\n        break;\n\n      case \"itemTemplate\":\n      case \"searchTimeout\":\n        break;\n\n      case \"selectedItem\":\n        if (args.previousValue !== args.value) {\n          this._selectionChangedAction({\n            selectedItem: args.value\n          });\n        }\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  }\n}).include(DataExpressionMixin, DataConverterMixin);\nregisterComponent(\"dxDropDownList\", DropDownList);\nexport default DropDownList;","map":null,"metadata":{},"sourceType":"module"}