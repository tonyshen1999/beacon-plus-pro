{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/ui/diagram/ui.diagram.scroll_view.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getWidth, getHeight } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport Widget from \"../widget/ui.widget\";\nimport ScrollView from \"../scroll_view\";\nimport { calculateScrollbarWidth } from \"../pivot_grid/utils/calculate_scrollbar_width\";\nimport { getDiagram } from \"./diagram.importer\";\n\nvar DiagramScrollView = /*#__PURE__*/function (_Widget) {\n  _inherits(DiagramScrollView, _Widget);\n\n  var _super = _createSuper(DiagramScrollView);\n\n  function DiagramScrollView() {\n    _classCallCheck(this, DiagramScrollView);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DiagramScrollView, [{\n    key: \"_init\",\n    value: function _init() {\n      _get(_getPrototypeOf(DiagramScrollView.prototype), \"_init\", this).call(this);\n\n      var _getDiagram = getDiagram(),\n          EventDispatcher = _getDiagram.EventDispatcher;\n\n      this.onScroll = new EventDispatcher();\n\n      this._createOnCreateDiagramAction();\n    }\n  }, {\n    key: \"_initMarkup\",\n    value: function _initMarkup() {\n      var _this = this;\n\n      _get(_getPrototypeOf(DiagramScrollView.prototype), \"_initMarkup\", this).call(this);\n\n      var $scrollViewWrapper = $(\"<div>\").appendTo(this.$element());\n      var options = {\n        direction: \"both\",\n        bounceEnabled: false,\n        onScroll: function onScroll(_ref) {\n          var scrollOffset = _ref.scrollOffset;\n\n          _this._raiseOnScroll(scrollOffset.left, scrollOffset.top);\n        }\n      };\n      var useNativeScrolling = this.option(\"useNativeScrolling\");\n\n      if (void 0 !== useNativeScrolling) {\n        options.useNative = useNativeScrolling;\n      }\n\n      this._scrollView = this._createComponent($scrollViewWrapper, ScrollView, options);\n\n      this._onCreateDiagramAction({\n        $parent: $(this._scrollView.content()),\n        scrollView: this\n      });\n    }\n  }, {\n    key: \"setScroll\",\n    value: function setScroll(left, top) {\n      this._scrollView.scrollTo({\n        left: left,\n        top: top\n      });\n\n      this._raiseOnScrollWithoutPoint();\n    }\n  }, {\n    key: \"offsetScroll\",\n    value: function offsetScroll(left, top) {\n      this._scrollView.scrollBy({\n        left: left,\n        top: top\n      });\n\n      this._raiseOnScrollWithoutPoint();\n    }\n  }, {\n    key: \"getSize\",\n    value: function getSize() {\n      var _getDiagram2 = getDiagram(),\n          Size = _getDiagram2.Size;\n\n      var $element = this._scrollView.$element();\n\n      return new Size(Math.floor(getWidth($element)), Math.floor(getHeight($element)));\n    }\n  }, {\n    key: \"getScrollContainer\",\n    value: function getScrollContainer() {\n      return this._scrollView.$element()[0];\n    }\n  }, {\n    key: \"getScrollBarWidth\",\n    value: function getScrollBarWidth() {\n      return this.option(\"useNativeScrolling\") ? calculateScrollbarWidth() : 0;\n    }\n  }, {\n    key: \"detachEvents\",\n    value: function detachEvents() {}\n  }, {\n    key: \"_raiseOnScroll\",\n    value: function _raiseOnScroll(left, top) {\n      var _getDiagram3 = getDiagram(),\n          Point = _getDiagram3.Point;\n\n      this.onScroll.raise(\"notifyScrollChanged\", function () {\n        return new Point(left, top);\n      });\n    }\n  }, {\n    key: \"_raiseOnScrollWithoutPoint\",\n    value: function _raiseOnScrollWithoutPoint() {\n      var _this2 = this;\n\n      var _getDiagram4 = getDiagram(),\n          Point = _getDiagram4.Point;\n\n      this.onScroll.raise(\"notifyScrollChanged\", function () {\n        return new Point(_this2._scrollView.scrollLeft(), _this2._scrollView.scrollTop());\n      });\n    }\n  }, {\n    key: \"_createOnCreateDiagramAction\",\n    value: function _createOnCreateDiagramAction() {\n      this._onCreateDiagramAction = this._createActionByOption(\"onCreateDiagram\");\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function _optionChanged(args) {\n      switch (args.name) {\n        case \"onCreateDiagram\":\n          this._createOnCreateDiagramAction();\n\n          break;\n\n        case \"useNativeScrolling\":\n          break;\n\n        default:\n          _get(_getPrototypeOf(DiagramScrollView.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }]);\n\n  return DiagramScrollView;\n}(Widget);\n\nexport default DiagramScrollView;","map":null,"metadata":{},"sourceType":"module"}