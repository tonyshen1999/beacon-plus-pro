{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/chart_components/scroll_bar.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { fireEvent } from \"../../events/utils/index\";\nimport { extend } from \"../../core/utils/extend\";\nimport { Translator2D } from \"../translators/translator2d\";\nimport { isDefined } from \"../../core/utils/type\";\nimport { noop } from \"../../core/utils/common\";\nimport { start as dragEventStart, move as dragEventMove, end as dragEventEnd } from \"../../events/drag\";\nvar _min = Math.min;\nvar _max = Math.max;\nvar MIN_SCROLL_BAR_SIZE = 2;\nexport var ScrollBar = function ScrollBar(renderer, group) {\n  this._translator = new Translator2D({}, {}, {});\n  this._scroll = renderer.rect().append(group);\n\n  this._addEvents();\n};\n\nfunction _getXCoord(canvas, pos, offset, width) {\n  var x = 0;\n\n  if (\"right\" === pos) {\n    x = canvas.width - canvas.right + offset;\n  } else if (\"left\" === pos) {\n    x = canvas.left - offset - width;\n  }\n\n  return x;\n}\n\nfunction _getYCoord(canvas, pos, offset, width) {\n  var y = 0;\n\n  if (\"top\" === pos) {\n    y = canvas.top - offset;\n  } else if (\"bottom\" === pos) {\n    y = canvas.height - canvas.bottom + width + offset;\n  }\n\n  return y;\n}\n\nScrollBar.prototype = {\n  _addEvents: function _addEvents() {\n    var _this = this;\n\n    var scrollElement = this._scroll.element;\n    eventsEngine.on(scrollElement, dragEventStart, function (e) {\n      fireEvent({\n        type: \"dxc-scroll-start\",\n        originalEvent: e,\n        target: scrollElement\n      });\n    });\n    eventsEngine.on(scrollElement, dragEventMove, function (e) {\n      var dX = -e.offset.x * _this._scale;\n      var dY = -e.offset.y * _this._scale;\n      var lx = _this._offset - (_this._layoutOptions.vertical ? dY : dX) / _this._scale;\n\n      _this._applyPosition(lx, lx + _this._translator.canvasLength / _this._scale);\n\n      fireEvent({\n        type: \"dxc-scroll-move\",\n        originalEvent: e,\n        target: scrollElement,\n        offset: {\n          x: dX,\n          y: dY\n        }\n      });\n    });\n    eventsEngine.on(scrollElement, dragEventEnd, function (e) {\n      fireEvent({\n        type: \"dxc-scroll-end\",\n        originalEvent: e,\n        target: scrollElement,\n        offset: {\n          x: -e.offset.x * _this._scale,\n          y: -e.offset.y * _this._scale\n        }\n      });\n    });\n  },\n  update: function update(options) {\n    var position = options.position;\n    var isVertical = options.rotated;\n    var defaultPosition = isVertical ? \"right\" : \"top\";\n    var secondaryPosition = isVertical ? \"left\" : \"bottom\";\n\n    if (position !== defaultPosition && position !== secondaryPosition) {\n      position = defaultPosition;\n    }\n\n    this._scroll.attr({\n      rotate: !options.rotated ? -90 : 0,\n      rotateX: 0,\n      rotateY: 0,\n      fill: options.color,\n      width: options.width,\n      opacity: options.opacity\n    });\n\n    this._layoutOptions = {\n      width: options.width,\n      offset: options.offset,\n      vertical: isVertical,\n      position: position\n    };\n    return this;\n  },\n  init: function init(range, stick) {\n    var isDiscrete = \"discrete\" === range.axisType;\n    this._translateWithOffset = isDiscrete && !stick ? 1 : 0;\n\n    this._translator.update(extend({}, range, {\n      minVisible: null,\n      maxVisible: null,\n      visibleCategories: null\n    }, isDiscrete && {\n      min: null,\n      max: null\n    } || {}), this._canvas, {\n      isHorizontal: !this._layoutOptions.vertical,\n      stick: stick\n    });\n\n    return this;\n  },\n  getOptions: function getOptions() {\n    return this._layoutOptions;\n  },\n  setPane: function setPane(panes) {\n    var position = this._layoutOptions.position;\n    var pane;\n\n    if (\"left\" === position || \"top\" === position) {\n      pane = panes[0];\n    } else {\n      pane = panes[panes.length - 1];\n    }\n\n    this.pane = pane.name;\n    return this;\n  },\n  updateSize: function updateSize(canvas) {\n    this._canvas = extend({}, canvas);\n    var options = this._layoutOptions;\n    var pos = options.position;\n    var offset = options.offset;\n    var width = options.width;\n\n    this._scroll.attr({\n      translateX: _getXCoord(canvas, pos, offset, width),\n      translateY: _getYCoord(canvas, pos, offset, width)\n    });\n  },\n  getMultipleAxesSpacing: function getMultipleAxesSpacing() {\n    return 0;\n  },\n  estimateMargins: function estimateMargins() {\n    return this.getMargins();\n  },\n  getMargins: function getMargins() {\n    var options = this._layoutOptions;\n    var margins = {\n      left: 0,\n      top: 0,\n      right: 0,\n      bottom: 0\n    };\n    margins[options.position] = options.width + options.offset;\n    return margins;\n  },\n  shift: function shift(margins) {\n    var _that$_scroll$attr, _that$_scroll$attr2;\n\n    var options = this._layoutOptions;\n    var side = options.position;\n    var isVertical = options.vertical;\n    var attr = {\n      translateX: null !== (_that$_scroll$attr = this._scroll.attr(\"translateX\")) && void 0 !== _that$_scroll$attr ? _that$_scroll$attr : 0,\n      translateY: null !== (_that$_scroll$attr2 = this._scroll.attr(\"translateY\")) && void 0 !== _that$_scroll$attr2 ? _that$_scroll$attr2 : 0\n    };\n    var shift = margins[side];\n    attr[isVertical ? \"translateX\" : \"translateY\"] += (\"left\" === side || \"top\" === side ? -1 : 1) * shift;\n\n    this._scroll.attr(attr);\n  },\n  hideTitle: noop,\n  hideOuterElements: noop,\n  setPosition: function setPosition(min, max) {\n    var translator = this._translator;\n    var minPoint = isDefined(min) ? translator.translate(min, -this._translateWithOffset) : translator.translate(\"canvas_position_start\");\n    var maxPoint = isDefined(max) ? translator.translate(max, this._translateWithOffset) : translator.translate(\"canvas_position_end\");\n    this._offset = _min(minPoint, maxPoint);\n    this._scale = translator.getScale(min, max);\n\n    this._applyPosition(_min(minPoint, maxPoint), _max(minPoint, maxPoint));\n  },\n  customPositionIsAvailable: function customPositionIsAvailable() {\n    return false;\n  },\n  dispose: function dispose() {\n    this._scroll.dispose();\n\n    this._scroll = this._translator = null;\n  },\n  _applyPosition: function _applyPosition(x1, x2) {\n    var visibleArea = this._translator.getCanvasVisibleArea();\n\n    x1 = _max(x1, visibleArea.min);\n    x1 = _min(x1, visibleArea.max);\n    x2 = _min(x2, visibleArea.max);\n    x2 = _max(x2, visibleArea.min);\n    var height = Math.abs(x2 - x1);\n\n    this._scroll.attr({\n      y: x1,\n      height: height < MIN_SCROLL_BAR_SIZE ? MIN_SCROLL_BAR_SIZE : height\n    });\n  }\n};","map":null,"metadata":{},"sourceType":"module"}