{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.header_filter_core.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport modules from \"./ui.grid_core.modules\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nimport { isDefined, isFunction } from \"../../core/utils/type\";\nimport { each } from \"../../core/utils/iterator\";\nimport { extend } from \"../../core/utils/extend\";\nimport Popup from \"../popup\";\nimport TreeView from \"../tree_view\";\nimport List from \"../list_light\";\nimport \"../list/modules/search\";\nimport \"../list/modules/selection\";\nvar HEADER_FILTER_CLASS = \"dx-header-filter\";\nvar HEADER_FILTER_MENU_CLASS = \"dx-header-filter-menu\";\nvar DEFAULT_SEARCH_EXPRESSION = \"text\";\n\nfunction resetChildrenItemSelection(items) {\n  items = items || [];\n\n  for (var i = 0; i < items.length; i++) {\n    items[i].selected = false;\n    resetChildrenItemSelection(items[i].items);\n  }\n}\n\nfunction updateSelectAllState(e, filterValues) {\n  if (e.component.option(\"searchValue\")) {\n    return;\n  }\n\n  var selectAllCheckBox = $(e.element).find(\".dx-list-select-all-checkbox\").data(\"dxCheckBox\");\n\n  if (selectAllCheckBox && filterValues && filterValues.length) {\n    selectAllCheckBox.option(\"value\", void 0);\n  }\n}\n\nfunction isSearchEnabled(that, options) {\n  var headerFilter = options.headerFilter;\n\n  if (headerFilter && isDefined(headerFilter.allowSearch)) {\n    return headerFilter.allowSearch;\n  }\n\n  return that.option(\"headerFilter.allowSearch\");\n}\n\nexport function updateHeaderFilterItemSelectionState(item, filterValuesMatch, isExcludeFilter) {\n  if (filterValuesMatch ^ isExcludeFilter) {\n    item.selected = true;\n\n    if (isExcludeFilter && item.items) {\n      for (var j = 0; j < item.items.length; j++) {\n        if (!item.items[j].selected) {\n          item.selected = void 0;\n          break;\n        }\n      }\n    }\n  } else if (isExcludeFilter || item.selected) {\n    item.selected = false;\n    resetChildrenItemSelection(item.items);\n  }\n}\nexport var HeaderFilterView = modules.View.inherit({\n  getPopupContainer: function getPopupContainer() {\n    return this._popupContainer;\n  },\n  getListContainer: function getListContainer() {\n    return this._listContainer;\n  },\n  applyHeaderFilter: function applyHeaderFilter(options) {\n    var list = this.getListContainer();\n    var searchValue = list.option(\"searchValue\");\n    var isSelectAll = !searchValue && !options.isFilterBuilder && list.$element().find(\".dx-checkbox\").eq(0).hasClass(\"dx-checkbox-checked\");\n    var filterValues = [];\n\n    if (!isSelectAll) {\n      if (\"tree\" === options.type) {\n        if (options.filterType) {\n          options.filterType = \"include\";\n        }\n\n        !function fillSelectedItemKeys(filterValues, items, isExclude) {\n          each(items, function (_, item) {\n            if (void 0 !== item.selected && !!item.selected ^ isExclude) {\n              var node = list._getNode(item);\n\n              var hasChildren = list._hasChildren(node);\n\n              var hasChildrenWithSelection = hasChildren && item.items && item.items.some(function (item) {\n                return item.selected;\n              });\n\n              if (!searchValue || !hasChildrenWithSelection) {\n                filterValues.push(item.value);\n                return;\n              }\n            }\n\n            if (item.items && item.items.length) {\n              fillSelectedItemKeys(filterValues, item.items, isExclude);\n            }\n          });\n        }(filterValues, list.option(\"items\"), false);\n        options.filterValues = filterValues;\n      }\n    } else {\n      if (\"tree\" === options.type) {\n        options.filterType = \"exclude\";\n      }\n\n      if (Array.isArray(options.filterValues)) {\n        options.filterValues = [];\n      }\n    }\n\n    if (options.filterValues && !options.filterValues.length) {\n      options.filterValues = null;\n    }\n\n    options.apply();\n    this.hideHeaderFilterMenu();\n  },\n  showHeaderFilterMenu: function showHeaderFilterMenu($columnElement, options) {\n    if (options) {\n      this._initializePopupContainer(options);\n\n      var popupContainer = this.getPopupContainer();\n      this.hideHeaderFilterMenu();\n      this.updatePopup($columnElement, options);\n      popupContainer.show();\n    }\n  },\n  hideHeaderFilterMenu: function hideHeaderFilterMenu() {\n    var headerFilterMenu = this.getPopupContainer();\n    headerFilterMenu && headerFilterMenu.hide();\n  },\n  updatePopup: function updatePopup($element, options) {\n    var showColumnLines = this.option(\"showColumnLines\");\n    var alignment = \"right\" === options.alignment ^ !showColumnLines ? \"left\" : \"right\";\n\n    if (this._popupContainer) {\n      this._cleanPopupContent();\n\n      this._popupContainer.option(\"position\", {\n        my: alignment + \" top\",\n        at: alignment + \" bottom\",\n        of: $element,\n        collision: \"flip fit\"\n      });\n    }\n  },\n  _getSearchExpr: function _getSearchExpr(options) {\n    var lookup = options.lookup;\n    var useDefaultSearchExpr = options.useDefaultSearchExpr;\n    var headerFilterDataSource = options.headerFilter && options.headerFilter.dataSource;\n\n    if (useDefaultSearchExpr || isDefined(headerFilterDataSource) && !isFunction(headerFilterDataSource)) {\n      return DEFAULT_SEARCH_EXPRESSION;\n    }\n\n    if (lookup) {\n      return lookup.displayExpr || \"this\";\n    }\n\n    if (options.dataSource) {\n      var group = options.dataSource.group;\n\n      if (Array.isArray(group) && group.length > 0) {\n        return group[0].selector;\n      } else if (isFunction(group) && !options.remoteFiltering) {\n        return group;\n      }\n    }\n\n    return options.dataField || options.selector;\n  },\n  _cleanPopupContent: function _cleanPopupContent() {\n    this._popupContainer && this._popupContainer.$content().empty();\n  },\n  _initializePopupContainer: function _initializePopupContainer(options) {\n    var that = this;\n    var $element = that.element();\n    var headerFilterOptions = that.option(\"headerFilter\");\n    var width = options.headerFilter && options.headerFilter.width || headerFilterOptions && headerFilterOptions.width;\n    var height = options.headerFilter && options.headerFilter.height || headerFilterOptions && headerFilterOptions.height;\n    var dxPopupOptions = {\n      width: width,\n      height: height,\n      visible: false,\n      shading: false,\n      showTitle: false,\n      showCloseButton: false,\n      hideOnParentScroll: false,\n      dragEnabled: false,\n      closeOnOutsideClick: true,\n      focusStateEnabled: false,\n      copyRootClassesToWrapper: true,\n      _ignoreCopyRootClassesToWrapperDeprecation: true,\n      toolbarItems: [{\n        toolbar: \"bottom\",\n        location: \"after\",\n        widget: \"dxButton\",\n        options: {\n          text: headerFilterOptions.texts.ok,\n          onClick: function onClick() {\n            that.applyHeaderFilter(options);\n          }\n        }\n      }, {\n        toolbar: \"bottom\",\n        location: \"after\",\n        widget: \"dxButton\",\n        options: {\n          text: headerFilterOptions.texts.cancel,\n          onClick: function onClick() {\n            that.hideHeaderFilterMenu();\n          }\n        }\n      }],\n      resizeEnabled: true,\n      onShowing: function onShowing(e) {\n        e.component.$content().parent().addClass(\"dx-dropdowneditor-overlay\");\n\n        that._initializeListContainer(options);\n\n        options.onShowing && options.onShowing(e);\n      },\n      onShown: function onShown() {\n        that.getListContainer().focus();\n      },\n      onHidden: options.onHidden,\n      onInitialized: function onInitialized(e) {\n        var component = e.component;\n        component.option(\"animation\", component._getDefaultOptions().animation);\n      }\n    };\n\n    if (!isDefined(that._popupContainer)) {\n      that._popupContainer = that._createComponent($element, Popup, dxPopupOptions);\n    } else {\n      that._popupContainer.option(dxPopupOptions);\n    }\n  },\n  _initializeListContainer: function _initializeListContainer(options) {\n    var that = this;\n\n    var $content = that._popupContainer.$content();\n\n    var widgetOptions = {\n      searchEnabled: isSearchEnabled(that, options),\n      searchTimeout: that.option(\"headerFilter.searchTimeout\"),\n      searchMode: options.headerFilter && options.headerFilter.searchMode || \"\",\n      dataSource: options.dataSource,\n      onContentReady: function onContentReady() {\n        that.renderCompleted.fire();\n      },\n      itemTemplate: function itemTemplate(data, _, element) {\n        var $element = $(element);\n\n        if (options.encodeHtml) {\n          return $element.text(data.text);\n        }\n\n        return $element.html(data.text);\n      }\n    };\n\n    function onOptionChanged(e) {\n      if (\"searchValue\" === e.fullName && !options.isFilterBuilder && false !== that.option(\"headerFilter.hideSelectAllOnSearch\")) {\n        if (\"tree\" === options.type) {\n          e.component.option(\"showCheckBoxesMode\", e.value ? \"normal\" : \"selectAll\");\n        } else {\n          e.component.option(\"selectionMode\", e.value ? \"multiple\" : \"all\");\n        }\n      }\n    }\n\n    if (\"tree\" === options.type) {\n      that._listContainer = that._createComponent($(\"<div>\").appendTo($content), TreeView, extend(widgetOptions, {\n        showCheckBoxesMode: options.isFilterBuilder ? \"normal\" : \"selectAll\",\n        onOptionChanged: onOptionChanged,\n        keyExpr: \"id\"\n      }));\n    } else {\n      that._listContainer = that._createComponent($(\"<div>\").appendTo($content), List, extend(widgetOptions, {\n        searchExpr: that._getSearchExpr(options),\n        pageLoadMode: \"scrollBottom\",\n        showSelectionControls: true,\n        selectionMode: options.isFilterBuilder ? \"multiple\" : \"all\",\n        onOptionChanged: onOptionChanged,\n        onSelectionChanged: function onSelectionChanged(e) {\n          var items = e.component.option(\"items\");\n          var selectedItems = e.component.option(\"selectedItems\");\n\n          if (!e.component._selectedItemsUpdating && !e.component.option(\"searchValue\") && !options.isFilterBuilder) {\n            var filterValues = options.filterValues || [];\n            var isExclude = \"exclude\" === options.filterType;\n\n            if (0 === selectedItems.length && items.length && (filterValues.length <= 1 || isExclude && filterValues.length === items.length - 1)) {\n              options.filterType = \"include\";\n              options.filterValues = [];\n            } else if (selectedItems.length === items.length) {\n              options.filterType = \"exclude\";\n              options.filterValues = [];\n            }\n          }\n\n          each(items, function (index, item) {\n            var selected = gridCoreUtils.getIndexByKey(item, selectedItems, null) >= 0;\n            var oldSelected = !!item.selected;\n\n            if (oldSelected !== selected) {\n              item.selected = selected;\n              options.filterValues = options.filterValues || [];\n              var filterValueIndex = gridCoreUtils.getIndexByKey(item.value, options.filterValues, null);\n\n              if (filterValueIndex >= 0) {\n                options.filterValues.splice(filterValueIndex, 1);\n              }\n\n              if (selected ^ \"exclude\" === options.filterType) {\n                options.filterValues.push(item.value);\n              }\n            }\n          });\n          updateSelectAllState(e, options.filterValues);\n        },\n        onContentReady: function onContentReady(e) {\n          var component = e.component;\n          var items = component.option(\"items\");\n          var selectedItems = [];\n          each(items, function () {\n            if (this.selected) {\n              selectedItems.push(this);\n            }\n          });\n          component._selectedItemsUpdating = true;\n          component.option(\"selectedItems\", selectedItems);\n          component._selectedItemsUpdating = false;\n          updateSelectAllState(e, options.filterValues);\n        }\n      }));\n    }\n  },\n  _renderCore: function _renderCore() {\n    this.element().addClass(HEADER_FILTER_MENU_CLASS);\n  }\n});\nexport var allowHeaderFiltering = function allowHeaderFiltering(column) {\n  return isDefined(column.allowHeaderFiltering) ? column.allowHeaderFiltering : column.allowFiltering;\n};\nexport var headerFilterMixin = {\n  _applyColumnState: function _applyColumnState(options) {\n    var $headerFilterIndicator;\n    var rootElement = options.rootElement;\n    var column = options.column;\n\n    if (\"headerFilter\" === options.name) {\n      rootElement.find(\".\" + HEADER_FILTER_CLASS).remove();\n\n      if (allowHeaderFiltering(column)) {\n        $headerFilterIndicator = this.callBase(options).toggleClass(\"dx-header-filter-empty\", this._isHeaderFilterEmpty(column));\n\n        if (!this.option(\"useLegacyKeyboardNavigation\")) {\n          $headerFilterIndicator.attr(\"tabindex\", this.option(\"tabindex\") || 0);\n        }\n      }\n\n      return $headerFilterIndicator;\n    }\n\n    return this.callBase(options);\n  },\n  _isHeaderFilterEmpty: function _isHeaderFilterEmpty(column) {\n    return !column.filterValues || !column.filterValues.length;\n  },\n  _getIndicatorClassName: function _getIndicatorClassName(name) {\n    if (\"headerFilter\" === name) {\n      return HEADER_FILTER_CLASS;\n    }\n\n    return this.callBase(name);\n  },\n  _renderIndicator: function _renderIndicator(options) {\n    var $container = options.container;\n    var $indicator = options.indicator;\n\n    if (\"headerFilter\" === options.name) {\n      var rtlEnabled = this.option(\"rtlEnabled\");\n\n      if ($container.children().length && (!rtlEnabled && \"right\" === options.columnAlignment || rtlEnabled && \"left\" === options.columnAlignment)) {\n        $container.prepend($indicator);\n        return;\n      }\n    }\n\n    this.callBase(options);\n  },\n  optionChanged: function optionChanged(args) {\n    if (\"headerFilter\" === args.name) {\n      var requireReady = \"columnHeadersView\" === this.name;\n\n      this._invalidate(requireReady, requireReady);\n\n      args.handled = true;\n    } else {\n      this.callBase(args);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}