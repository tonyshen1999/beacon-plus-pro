{"ast":null,"code":"import _toConsumableArray from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.dialog.folder_chooser.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport messageLocalization from \"../../localization/message\";\nimport { getMapFromObject } from \"./ui.file_manager.common\";\nimport FileManagerDialogBase from \"./ui.file_manager.dialog\";\nimport FileManagerFilesTreeView from \"./ui.file_manager.files_tree_view\";\nvar FILE_MANAGER_DIALOG_FOLDER_CHOOSER = \"dx-filemanager-dialog-folder-chooser\";\nvar FILE_MANAGER_DIALOG_FOLDER_CHOOSER_POPUP = \"dx-filemanager-dialog-folder-chooser-popup\";\n\nvar FileManagerFolderChooserDialog = /*#__PURE__*/function (_FileManagerDialogBas) {\n  _inherits(FileManagerFolderChooserDialog, _FileManagerDialogBas);\n\n  var _super = _createSuper(FileManagerFolderChooserDialog);\n\n  function FileManagerFolderChooserDialog() {\n    _classCallCheck(this, FileManagerFolderChooserDialog);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FileManagerFolderChooserDialog, [{\n    key: \"show\",\n    value: function show() {\n      var _this$_filesTreeView;\n\n      this._resetDialogSelectedDirectory();\n\n      null === (_this$_filesTreeView = this._filesTreeView) || void 0 === _this$_filesTreeView ? void 0 : _this$_filesTreeView.refresh();\n\n      _get(_getPrototypeOf(FileManagerFolderChooserDialog.prototype), \"show\", this).call(this);\n    }\n  }, {\n    key: \"switchToCopyDialog\",\n    value: function switchToCopyDialog(targetItemInfos) {\n      this._targetItemInfos = targetItemInfos;\n\n      this._setTitle(messageLocalization.format(\"dxFileManager-dialogDirectoryChooserCopyTitle\"));\n\n      this._setButtonText(messageLocalization.format(\"dxFileManager-dialogDirectoryChooserCopyButtonText\"));\n    }\n  }, {\n    key: \"switchToMoveDialog\",\n    value: function switchToMoveDialog(targetItemInfos) {\n      this._targetItemInfos = targetItemInfos;\n\n      this._setTitle(messageLocalization.format(\"dxFileManager-dialogDirectoryChooserMoveTitle\"));\n\n      this._setButtonText(messageLocalization.format(\"dxFileManager-dialogDirectoryChooserMoveButtonText\"));\n    }\n  }, {\n    key: \"_getDialogOptions\",\n    value: function _getDialogOptions() {\n      return extend(_get(_getPrototypeOf(FileManagerFolderChooserDialog.prototype), \"_getDialogOptions\", this).call(this), {\n        contentCssClass: FILE_MANAGER_DIALOG_FOLDER_CHOOSER,\n        popupCssClass: FILE_MANAGER_DIALOG_FOLDER_CHOOSER_POPUP\n      });\n    }\n  }, {\n    key: \"_createContentTemplate\",\n    value: function _createContentTemplate(element) {\n      var _this = this;\n\n      _get(_getPrototypeOf(FileManagerFolderChooserDialog.prototype), \"_createContentTemplate\", this).call(this, element);\n\n      this._filesTreeView = this._createComponent($(\"<div>\"), FileManagerFilesTreeView, {\n        getDirectories: this.option(\"getDirectories\"),\n        getCurrentDirectory: function getCurrentDirectory() {\n          return _this._getDialogSelectedDirectory();\n        },\n        onDirectoryClick: function onDirectoryClick(e) {\n          return _this._onFilesTreeViewDirectoryClick(e);\n        },\n        onFilesTreeViewContentReady: function onFilesTreeViewContentReady() {\n          return _this._toggleUnavailableLocationsDisabled(true);\n        }\n      });\n\n      this._$contentElement.append(this._filesTreeView.$element());\n    }\n  }, {\n    key: \"_getDialogResult\",\n    value: function _getDialogResult() {\n      var result = this._getDialogSelectedDirectory();\n\n      return result ? {\n        folder: result\n      } : result;\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function _getDefaultOptions() {\n      return extend(_get(_getPrototypeOf(FileManagerFolderChooserDialog.prototype), \"_getDefaultOptions\", this).call(this), {\n        getItems: null\n      });\n    }\n  }, {\n    key: \"_getDialogSelectedDirectory\",\n    value: function _getDialogSelectedDirectory() {\n      return this._selectedDirectoryInfo;\n    }\n  }, {\n    key: \"_resetDialogSelectedDirectory\",\n    value: function _resetDialogSelectedDirectory() {\n      this._selectedDirectoryInfo = null;\n    }\n  }, {\n    key: \"_onFilesTreeViewDirectoryClick\",\n    value: function _onFilesTreeViewDirectoryClick(_ref) {\n      var itemData = _ref.itemData;\n      this._selectedDirectoryInfo = itemData;\n\n      this._filesTreeView.updateCurrentDirectory();\n    }\n  }, {\n    key: \"_onPopupShown\",\n    value: function _onPopupShown() {\n      this._toggleUnavailableLocationsDisabled(true);\n\n      _get(_getPrototypeOf(FileManagerFolderChooserDialog.prototype), \"_onPopupShown\", this).call(this);\n    }\n  }, {\n    key: \"_onPopupHidden\",\n    value: function _onPopupHidden() {\n      this._toggleUnavailableLocationsDisabled(false);\n\n      _get(_getPrototypeOf(FileManagerFolderChooserDialog.prototype), \"_onPopupHidden\", this).call(this);\n    }\n  }, {\n    key: \"_toggleUnavailableLocationsDisabled\",\n    value: function _toggleUnavailableLocationsDisabled(isDisabled) {\n      var _this2 = this;\n\n      if (!this._filesTreeView) {\n        return;\n      }\n\n      var locations = this._getLocationsToProcess(isDisabled);\n\n      this._filesTreeView.toggleDirectoryExpandedStateRecursive(locations.locationsToExpand[0], isDisabled).then(function () {\n        return _this2._filesTreeView.toggleDirectoryLineExpandedState(locations.locationsToCollapse, !isDisabled).then(function () {\n          return locations.locationKeysToDisable.forEach(function (key) {\n            return _this2._filesTreeView.toggleNodeDisabledState(key, isDisabled);\n          });\n        });\n      });\n    }\n  }, {\n    key: \"_getLocationsToProcess\",\n    value: function _getLocationsToProcess(isDisabled) {\n      var _expandMap$keys;\n\n      var expandLocations = {};\n      var collapseLocations = {};\n\n      this._targetItemInfos.forEach(function (itemInfo) {\n        if (itemInfo.parentDirectory) {\n          expandLocations[itemInfo.parentDirectory.getInternalKey()] = itemInfo.parentDirectory;\n        }\n\n        if (itemInfo.fileItem.isDirectory) {\n          collapseLocations[itemInfo.getInternalKey()] = itemInfo;\n        }\n      });\n\n      var expandMap = getMapFromObject(expandLocations);\n      var collapseMap = getMapFromObject(collapseLocations);\n      return {\n        locationsToExpand: isDisabled ? expandMap.values : [],\n        locationsToCollapse: isDisabled ? collapseMap.values : [],\n        locationKeysToDisable: (_expandMap$keys = expandMap.keys).concat.apply(_expandMap$keys, _toConsumableArray(collapseMap.keys))\n      };\n    }\n  }]);\n\n  return FileManagerFolderChooserDialog;\n}(FileManagerDialogBase);\n\nexport default FileManagerFolderChooserDialog;","map":null,"metadata":{},"sourceType":"module"}