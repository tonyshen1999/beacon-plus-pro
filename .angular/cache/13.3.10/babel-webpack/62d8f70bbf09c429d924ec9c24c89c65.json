{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/ui/diagram/ui.diagram.toolbar.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { setWidth, getWidth } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport Toolbar from \"../toolbar\";\nimport ContextMenu from \"../context_menu\";\nimport DiagramBar from \"./diagram.bar\";\nimport { extend } from \"../../core/utils/extend\";\nimport { hasWindow, getWindow } from \"../../core/utils/window\";\nimport DiagramPanel from \"./ui.diagram.panel\";\nimport DiagramMenuHelper from \"./ui.diagram.menu_helper\";\nimport { getDiagram } from \"./diagram.importer\";\nimport \"../select_box\";\nimport \"../color_box\";\nimport \"../check_box\";\nvar ACTIVE_FORMAT_CLASS = \"dx-format-active\";\nvar DIAGRAM_TOOLBAR_CLASS = \"dx-diagram-toolbar\";\nvar DIAGRAM_TOOLBAR_SEPARATOR_CLASS = \"dx-diagram-toolbar-separator\";\nvar DIAGRAM_TOOLBAR_MENU_SEPARATOR_CLASS = \"dx-diagram-toolbar-menu-separator\";\nvar DIAGRAM_MOBILE_TOOLBAR_COLOR_BOX_OPENED_CLASS = \"dx-diagram-mobile-toolbar-color-box-opened\";\n\nvar DiagramToolbar = /*#__PURE__*/function (_DiagramPanel) {\n  _inherits(DiagramToolbar, _DiagramPanel);\n\n  var _super = _createSuper(DiagramToolbar);\n\n  function DiagramToolbar() {\n    _classCallCheck(this, DiagramToolbar);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DiagramToolbar, [{\n    key: \"_init\",\n    value: function _init() {\n      this._commands = [];\n      this._itemHelpers = {};\n      this._commandContextMenus = {};\n      this._contextMenuList = [];\n      this._valueConverters = {};\n      this.bar = new DiagramToolbarBar(this);\n\n      this._createOnInternalCommand();\n\n      this._createOnCustomCommand();\n\n      this._createOnSubMenuVisibilityChangingAction();\n\n      _get(_getPrototypeOf(DiagramToolbar.prototype), \"_init\", this).call(this);\n    }\n  }, {\n    key: \"_initMarkup\",\n    value: function _initMarkup() {\n      _get(_getPrototypeOf(DiagramToolbar.prototype), \"_initMarkup\", this).call(this);\n\n      var isServerSide = !hasWindow();\n\n      if (!this.option(\"skipAdjustSize\") && !isServerSide) {\n        setWidth(this.$element(), \"\");\n      }\n\n      this._commands = this._getCommands();\n      this._itemHelpers = {};\n      this._commandContextMenus = {};\n      this._contextMenuList = [];\n\n      var $toolbar = this._createMainElement();\n\n      this._renderToolbar($toolbar);\n\n      if (!this.option(\"skipAdjustSize\") && !isServerSide) {\n        var $toolbarContent = this.$element().find(\".dx-toolbar-before\");\n        setWidth(this.$element(), getWidth($toolbarContent));\n      }\n    }\n  }, {\n    key: \"_createMainElement\",\n    value: function _createMainElement() {\n      return $(\"<div>\").addClass(DIAGRAM_TOOLBAR_CLASS).appendTo(this._$element);\n    }\n  }, {\n    key: \"_getCommands\",\n    value: function _getCommands() {\n      return this.option(\"commands\") || [];\n    }\n  }, {\n    key: \"_renderToolbar\",\n    value: function _renderToolbar($toolbar) {\n      var beforeCommands = this._commands.filter(function (command) {\n        return -1 === [\"after\", \"center\"].indexOf(command.location);\n      });\n\n      var centerCommands = this._commands.filter(function (command) {\n        return \"center\" === command.location;\n      });\n\n      var afterCommands = this._commands.filter(function (command) {\n        return \"after\" === command.location;\n      });\n\n      var dataSource = [].concat(this._prepareToolbarItems(beforeCommands, \"before\", this._executeCommand)).concat(this._prepareToolbarItems(centerCommands, \"center\", this._executeCommand)).concat(this._prepareToolbarItems(afterCommands, \"after\", this._executeCommand));\n      this._toolbarInstance = this._createComponent($toolbar, Toolbar, {\n        dataSource: dataSource\n      });\n    }\n  }, {\n    key: \"_prepareToolbarItems\",\n    value: function _prepareToolbarItems(items, location, actionHandler) {\n      var _this = this;\n\n      return items.map(function (item) {\n        return extend(true, {\n          location: location,\n          locateInMenu: _this.option(\"locateInMenu\")\n        }, _this._createItem(item, location, actionHandler), _this._createItemOptions(item), _this._createItemActionOptions(item, actionHandler));\n      });\n    }\n  }, {\n    key: \"_createItem\",\n    value: function _createItem(item, location, actionHandler) {\n      var _this2 = this;\n\n      if (item.getCommandValue || item.getEditorValue || item.getEditorDisplayValue) {\n        this._valueConverters[item.command] = {\n          getCommandValue: item.getCommandValue,\n          getEditorValue: item.getEditorValue,\n          getEditorDisplayValue: item.getEditorDisplayValue\n        };\n      }\n\n      if (\"separator\" === item.widget) {\n        return {\n          template: function template(data, index, element) {\n            $(element).addClass(DIAGRAM_TOOLBAR_SEPARATOR_CLASS);\n          },\n          menuItemTemplate: function menuItemTemplate(data, index, element) {\n            $(element).addClass(DIAGRAM_TOOLBAR_MENU_SEPARATOR_CLASS);\n          }\n        };\n      }\n\n      return {\n        widget: item.widget || \"dxButton\",\n        cssClass: item.cssClass,\n        options: {\n          stylingMode: this.option(\"buttonStylingMode\"),\n          type: this.option(\"buttonType\"),\n          text: item.text,\n          hint: item.hint,\n          icon: item.icon || item.iconUnchecked || item.iconChecked,\n          iconChecked: item.iconChecked,\n          iconUnchecked: item.iconUnchecked,\n          onInitialized: function onInitialized(e) {\n            return _this2._onItemInitialized(e.component, item);\n          },\n          onContentReady: function onContentReady(e) {\n            return _this2._onItemContentReady(e.component, item, actionHandler);\n          }\n        }\n      };\n    }\n  }, {\n    key: \"_createItemOptions\",\n    value: function _createItemOptions(_ref) {\n      var widget = _ref.widget,\n          command = _ref.command,\n          items = _ref.items,\n          valueExpr = _ref.valueExpr,\n          displayExpr = _ref.displayExpr,\n          showText = _ref.showText,\n          hint = _ref.hint,\n          icon = _ref.icon;\n\n      if (\"dxSelectBox\" === widget) {\n        return this._createSelectBoxItemOptions(command, hint, items, valueExpr, displayExpr);\n      } else if (\"dxTextBox\" === widget) {\n        return this._createTextBoxItemOptions(command, hint);\n      } else if (\"dxColorBox\" === widget) {\n        return this._createColorBoxItemOptions(command, hint, icon);\n      } else if (!widget || \"dxButton\" === widget) {\n        return {\n          showText: showText || \"inMenu\"\n        };\n      }\n    }\n  }, {\n    key: \"_createSelectBoxItemOptions\",\n    value: function _createSelectBoxItemOptions(command, hint, items, valueExpr, displayExpr) {\n      var options = this._createTextEditorItemOptions(hint);\n\n      options = extend(true, options, {\n        options: {\n          dataSource: items,\n          displayExpr: displayExpr || \"text\",\n          valueExpr: valueExpr || \"value\"\n        }\n      });\n      var isSelectButton = items && items.every(function (i) {\n        return void 0 !== i.icon;\n      });\n\n      if (isSelectButton) {\n        options = extend(true, options, {\n          options: {\n            fieldTemplate: function fieldTemplate(data, container) {\n              $(\"<i>\").addClass(data && data.icon || \"dx-diagram-i-selectbox-null-icon dx-diagram-i\").appendTo(container);\n              $(\"<div>\").dxTextBox({\n                readOnly: true,\n                stylingMode: \"outlined\"\n              }).appendTo(container);\n            },\n            itemTemplate: function itemTemplate(data, index, container) {\n              $(container).attr(\"title\", data.hint);\n              return '<i class=\"'.concat(data.icon, '\"></i>');\n            }\n          }\n        });\n      }\n\n      return options;\n    }\n  }, {\n    key: \"_createTextBoxItemOptions\",\n    value: function _createTextBoxItemOptions(command, hint) {\n      var _this3 = this;\n\n      var options = this._createTextEditorItemOptions(hint);\n\n      options = extend(true, options, {\n        options: {\n          readOnly: true,\n          focusStateEnabled: false,\n          hoverStateEnabled: false,\n          buttons: [{\n            name: \"dropDown\",\n            location: \"after\",\n            options: {\n              icon: \"spindown\",\n              disabled: false,\n              stylingMode: \"text\",\n              onClick: function onClick(e) {\n                var contextMenu = _this3._commandContextMenus[command];\n\n                if (contextMenu) {\n                  _this3._toggleContextMenu(contextMenu);\n                }\n              }\n            }\n          }]\n        }\n      });\n      return options;\n    }\n  }, {\n    key: \"_createColorBoxItemOptions\",\n    value: function _createColorBoxItemOptions(command, hint, icon) {\n      var _this4 = this;\n\n      var options = this._createTextEditorItemOptions(hint);\n\n      if (icon) {\n        options = extend(true, options, {\n          options: {\n            openOnFieldClick: true,\n            fieldTemplate: function fieldTemplate(data, container) {\n              $(\"<i>\").addClass(icon).css(\"borderBottomColor\", data).appendTo(container);\n              $(\"<div>\").dxTextBox({\n                readOnly: true,\n                stylingMode: \"outlined\"\n              }).appendTo(container);\n            }\n          }\n        });\n      }\n\n      options = extend(true, options, {\n        options: {\n          onOpened: function onOpened() {\n            if (_this4.option(\"isMobileView\")) {\n              $(\"body\").addClass(DIAGRAM_MOBILE_TOOLBAR_COLOR_BOX_OPENED_CLASS);\n            }\n          },\n          onClosed: function onClosed() {\n            $(\"body\").removeClass(DIAGRAM_MOBILE_TOOLBAR_COLOR_BOX_OPENED_CLASS);\n          }\n        }\n      });\n      return options;\n    }\n  }, {\n    key: \"_createTextEditorItemOptions\",\n    value: function _createTextEditorItemOptions(hint) {\n      return {\n        options: {\n          stylingMode: this.option(\"editorStylingMode\"),\n          hint: hint\n        }\n      };\n    }\n  }, {\n    key: \"_createItemActionOptions\",\n    value: function _createItemActionOptions(item, handler) {\n      var _this5 = this;\n\n      switch (item.widget) {\n        case \"dxSelectBox\":\n        case \"dxColorBox\":\n        case \"dxCheckBox\":\n          return {\n            options: {\n              onValueChanged: function onValueChanged(e) {\n                var parameter = DiagramMenuHelper.getItemCommandParameter(_this5, item, e.component.option(\"value\"));\n                handler.call(_this5, item.command, item.name, parameter);\n              }\n            }\n          };\n\n        case \"dxTextBox\":\n          return {};\n\n        default:\n          return {\n            options: {\n              onClick: function onClick(e) {\n                if (!item.items) {\n                  var parameter = DiagramMenuHelper.getItemCommandParameter(_this5, item);\n                  handler.call(_this5, item.command, item.name, parameter);\n                } else {\n                  var contextMenu = e.component._contextMenu;\n\n                  if (contextMenu) {\n                    _this5._toggleContextMenu(contextMenu);\n                  }\n                }\n              }\n            }\n          };\n      }\n    }\n  }, {\n    key: \"_toggleContextMenu\",\n    value: function _toggleContextMenu(contextMenu) {\n      this._contextMenuList.forEach(function (cm) {\n        if (contextMenu !== cm) {\n          cm.hide();\n        }\n      });\n\n      contextMenu.toggle();\n    }\n  }, {\n    key: \"_onItemInitialized\",\n    value: function _onItemInitialized(widget, item) {\n      this._addItemHelper(item.command, new DiagramToolbarItemHelper(widget));\n    }\n  }, {\n    key: \"_onItemContentReady\",\n    value: function _onItemContentReady(widget, item, actionHandler) {\n      var _this6 = this;\n\n      if ((\"dxButton\" === widget.NAME || \"dxTextBox\" === widget.NAME) && item.items) {\n        var isTouchMode = this._isTouchMode();\n\n        var $menuContainer = $(\"<div>\").appendTo(this.$element());\n        widget._contextMenu = this._createComponent($menuContainer, ContextMenu, {\n          items: item.items,\n          target: widget.$element(),\n          cssClass: DiagramMenuHelper.getContextMenuCssClass(),\n          showEvent: \"\",\n          closeOnOutsideClick: function closeOnOutsideClick(e) {\n            return !isTouchMode && 0 === $(e.target).closest(widget._contextMenu._dropDownButtonElement).length;\n          },\n          focusStateEnabled: false,\n          position: {\n            at: \"left bottom\"\n          },\n          itemTemplate: function itemTemplate(itemData, itemIndex, itemElement) {\n            DiagramMenuHelper.getContextMenuItemTemplate(this, itemData, itemIndex, itemElement);\n          },\n          onItemClick: function onItemClick(_ref2) {\n            var component = _ref2.component,\n                itemData = _ref2.itemData;\n            DiagramMenuHelper.onContextMenuItemClick(_this6, itemData, actionHandler.bind(_this6));\n\n            if (!itemData.items || !itemData.items.length) {\n              component.hide();\n            }\n          },\n          onShowing: function onShowing(e) {\n            if (_this6._showingSubMenu) {\n              return;\n            }\n\n            _this6._showingSubMenu = e.component;\n\n            _this6._onSubMenuVisibilityChangingAction({\n              visible: true,\n              component: _this6\n            });\n\n            e.component.option(\"items\", e.component.option(\"items\"));\n            delete _this6._showingSubMenu;\n          },\n          onInitialized: function onInitialized(_ref3) {\n            var component = _ref3.component;\n            return _this6._onContextMenuInitialized(component, item, widget);\n          },\n          onDisposing: function onDisposing(_ref4) {\n            var component = _ref4.component;\n            return _this6._onContextMenuDisposing(component, item);\n          }\n        });\n\n        if (!isTouchMode) {\n          widget._contextMenu._dropDownButtonElement = widget.$element();\n\n          if (\"dxTextBox\" === widget.NAME) {\n            widget._contextMenu._dropDownButtonElement = widget.getButton(\"dropDown\").element();\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_isTouchMode\",\n    value: function _isTouchMode() {\n      var _getDiagram = getDiagram(),\n          Browser = _getDiagram.Browser;\n\n      if (Browser.TouchUI) {\n        return true;\n      }\n\n      if (!hasWindow()) {\n        return false;\n      }\n\n      var window = getWindow();\n      return window.navigator && window.navigator.maxTouchPoints > 0;\n    }\n  }, {\n    key: \"_onContextMenuInitialized\",\n    value: function _onContextMenuInitialized(widget, item, rootWidget) {\n      this._contextMenuList.push(widget);\n\n      if (item.command) {\n        this._commandContextMenus[item.command] = widget;\n      }\n\n      this._addContextMenuHelper(item, widget, [], rootWidget);\n    }\n  }, {\n    key: \"_addItemHelper\",\n    value: function _addItemHelper(command, helper) {\n      if (void 0 !== command) {\n        if (this._itemHelpers[command]) {\n          throw new Error(\"Toolbar cannot contain duplicated commands.\");\n        }\n\n        this._itemHelpers[command] = helper;\n      }\n    }\n  }, {\n    key: \"_addContextMenuHelper\",\n    value: function _addContextMenuHelper(item, widget, indexPath, rootWidget) {\n      var _this7 = this;\n\n      if (item.items) {\n        item.items.forEach(function (subItem, index) {\n          var itemIndexPath = indexPath.concat(index);\n\n          _this7._addItemHelper(subItem.command, new DiagramToolbarSubItemHelper(widget, itemIndexPath, subItem.command, rootWidget));\n\n          _this7._addContextMenuHelper(subItem, widget, itemIndexPath, rootWidget);\n        });\n      }\n    }\n  }, {\n    key: \"_onContextMenuDisposing\",\n    value: function _onContextMenuDisposing(widget, item) {\n      this._contextMenuList.splice(this._contextMenuList.indexOf(widget), 1);\n\n      delete this._commandContextMenus[item.command];\n    }\n  }, {\n    key: \"_executeCommand\",\n    value: function _executeCommand(command, name, value) {\n      if (this._updateLocked) {\n        return;\n      }\n\n      if (\"number\" === typeof command) {\n        var valueConverter = this._valueConverters[command];\n\n        if (valueConverter && valueConverter.getCommandValue) {\n          value = valueConverter.getCommandValue(value);\n        }\n\n        this.bar.raiseBarCommandExecuted(command, value);\n      } else if (\"string\" === typeof command) {\n        this._onInternalCommandAction({\n          command: command\n        });\n      }\n\n      if (void 0 !== name) {\n        this._onCustomCommandAction({\n          name: name\n        });\n      }\n    }\n  }, {\n    key: \"_createOnInternalCommand\",\n    value: function _createOnInternalCommand() {\n      this._onInternalCommandAction = this._createActionByOption(\"onInternalCommand\");\n    }\n  }, {\n    key: \"_createOnCustomCommand\",\n    value: function _createOnCustomCommand() {\n      this._onCustomCommandAction = this._createActionByOption(\"onCustomCommand\");\n    }\n  }, {\n    key: \"_setItemEnabled\",\n    value: function _setItemEnabled(command, enabled) {\n      if (command in this._itemHelpers) {\n        var helper = this._itemHelpers[command];\n\n        if (helper.canUpdate(this._showingSubMenu)) {\n          helper.setEnabled(enabled);\n        }\n      }\n    }\n  }, {\n    key: \"_setEnabled\",\n    value: function _setEnabled(enabled) {\n      this._toolbarInstance.option(\"disabled\", !enabled);\n\n      this._contextMenuList.forEach(function (contextMenu) {\n        contextMenu.option(\"disabled\", !enabled);\n      });\n    }\n  }, {\n    key: \"_setItemValue\",\n    value: function _setItemValue(command, value) {\n      try {\n        this._updateLocked = true;\n\n        if (command in this._itemHelpers) {\n          var helper = this._itemHelpers[command];\n\n          if (helper.canUpdate(this._showingSubMenu)) {\n            var valueConverter = this._valueConverters[command];\n\n            if (valueConverter && valueConverter.getEditorValue) {\n              value = valueConverter.getEditorValue(value);\n            }\n\n            var displayValue;\n\n            if (valueConverter && valueConverter.getEditorDisplayValue) {\n              displayValue = valueConverter.getEditorDisplayValue(value);\n            }\n\n            var contextMenu = this._commandContextMenus[command];\n            helper.setValue(value, displayValue, contextMenu, contextMenu && command);\n          }\n        }\n      } finally {\n        this._updateLocked = false;\n      }\n    }\n  }, {\n    key: \"_setItemSubItems\",\n    value: function _setItemSubItems(command, items) {\n      this._updateLocked = true;\n\n      if (command in this._itemHelpers) {\n        var helper = this._itemHelpers[command];\n\n        if (helper.canUpdate(this._showingSubMenu)) {\n          var contextMenu = this._commandContextMenus[command];\n          helper.setItems(items, contextMenu, contextMenu && command);\n        }\n      }\n\n      this._updateLocked = false;\n    }\n  }, {\n    key: \"_createOnSubMenuVisibilityChangingAction\",\n    value: function _createOnSubMenuVisibilityChangingAction() {\n      this._onSubMenuVisibilityChangingAction = this._createActionByOption(\"onSubMenuVisibilityChanging\");\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function _optionChanged(args) {\n      switch (args.name) {\n        case \"isMobileView\":\n          $(\"body\").removeClass(DIAGRAM_MOBILE_TOOLBAR_COLOR_BOX_OPENED_CLASS);\n\n          this._invalidate();\n\n          break;\n\n        case \"onSubMenuVisibilityChanging\":\n          this._createOnSubMenuVisibilityChangingAction();\n\n          break;\n\n        case \"onInternalCommand\":\n          this._createOnInternalCommand();\n\n          break;\n\n        case \"onCustomCommand\":\n          this._createOnCustomCommand();\n\n          break;\n\n        case \"container\":\n        case \"commands\":\n          this._invalidate();\n\n          break;\n\n        case \"export\":\n          break;\n\n        default:\n          _get(_getPrototypeOf(DiagramToolbar.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function _getDefaultOptions() {\n      return extend(_get(_getPrototypeOf(DiagramToolbar.prototype), \"_getDefaultOptions\", this).call(this), {\n        isMobileView: false,\n        export: {\n          fileName: \"Diagram\",\n          proxyUrl: void 0\n        },\n        locateInMenu: \"auto\",\n        buttonStylingMode: \"text\",\n        buttonType: \"normal\",\n        editorStylingMode: \"filled\",\n        skipAdjustSize: false\n      });\n    }\n  }, {\n    key: \"setCommandChecked\",\n    value: function setCommandChecked(command, checked) {\n      this._setItemValue(command, checked);\n    }\n  }, {\n    key: \"setCommandEnabled\",\n    value: function setCommandEnabled(command, enabled) {\n      this._setItemEnabled(command, enabled);\n    }\n  }]);\n\n  return DiagramToolbar;\n}(DiagramPanel);\n\nvar DiagramToolbarBar = /*#__PURE__*/function (_DiagramBar) {\n  _inherits(DiagramToolbarBar, _DiagramBar);\n\n  var _super2 = _createSuper(DiagramToolbarBar);\n\n  function DiagramToolbarBar() {\n    _classCallCheck(this, DiagramToolbarBar);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(DiagramToolbarBar, [{\n    key: \"getCommandKeys\",\n    value: function getCommandKeys() {\n      return this._getKeys(this._owner._commands);\n    }\n  }, {\n    key: \"setItemValue\",\n    value: function setItemValue(key, value) {\n      this._owner._setItemValue(key, value);\n    }\n  }, {\n    key: \"setItemEnabled\",\n    value: function setItemEnabled(key, enabled) {\n      this._owner._setItemEnabled(key, enabled);\n    }\n  }, {\n    key: \"setEnabled\",\n    value: function setEnabled(enabled) {\n      this._owner._setEnabled(enabled);\n    }\n  }, {\n    key: \"setItemSubItems\",\n    value: function setItemSubItems(key, items) {\n      this._owner._setItemSubItems(key, items);\n    }\n  }]);\n\n  return DiagramToolbarBar;\n}(DiagramBar);\n\nvar DiagramToolbarItemHelper = /*#__PURE__*/function () {\n  function DiagramToolbarItemHelper(widget) {\n    _classCallCheck(this, DiagramToolbarItemHelper);\n\n    this._widget = widget;\n  }\n\n  _createClass(DiagramToolbarItemHelper, [{\n    key: \"canUpdate\",\n    value: function canUpdate(showingSubMenu) {\n      return void 0 === showingSubMenu;\n    }\n  }, {\n    key: \"setEnabled\",\n    value: function setEnabled(enabled) {\n      this._widget.option(\"disabled\", !enabled);\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(value, displayValue, contextMenu, rootCommandKey) {\n      if (\"value\" in this._widget.option()) {\n        this._updateEditorValue(value, displayValue);\n      } else if (void 0 !== value) {\n        this._updateButtonValue(value);\n      }\n\n      if (contextMenu) {\n        this._updateContextMenuItemValue(contextMenu, \"\", rootCommandKey, value);\n      }\n    }\n  }, {\n    key: \"setItems\",\n    value: function setItems(items, contextMenu, rootCommandKey) {\n      if (contextMenu) {\n        this._updateContextMenuItems(contextMenu, \"\", rootCommandKey, items);\n      } else {\n        this._updateEditorItems(items);\n      }\n    }\n  }, {\n    key: \"_updateContextMenuItems\",\n    value: function _updateContextMenuItems(contextMenu, itemOptionText, rootCommandKey, items) {\n      DiagramMenuHelper.updateContextMenuItems(contextMenu, itemOptionText, rootCommandKey, items);\n    }\n  }, {\n    key: \"_updateEditorItems\",\n    value: function _updateEditorItems(items) {\n      if (\"items\" in this._widget.option()) {\n        this._widget.option(\"items\", items.map(function (item) {\n          return {\n            value: DiagramMenuHelper.getItemValue(item),\n            text: item.text\n          };\n        }));\n      }\n    }\n  }, {\n    key: \"_updateEditorValue\",\n    value: function _updateEditorValue(value, displayValue) {\n      this._widget.option(\"value\", value);\n\n      if (!this._widget.option(\"selectedItem\") && displayValue) {\n        this._widget.option(\"value\", displayValue);\n      }\n    }\n  }, {\n    key: \"_updateButtonValue\",\n    value: function _updateButtonValue(value) {\n      if (this._widget.option(\"iconChecked\") && this._widget.option(\"iconUnchecked\")) {\n        this._widget.option(\"icon\", value ? this._widget.option(\"iconChecked\") : this._widget.option(\"iconUnchecked\"));\n      } else {\n        this._widget.$element().toggleClass(ACTIVE_FORMAT_CLASS, value);\n      }\n    }\n  }, {\n    key: \"_updateContextMenuItemValue\",\n    value: function _updateContextMenuItemValue(contextMenu, itemOptionText, rootCommandKey, value) {\n      DiagramMenuHelper.updateContextMenuItemValue(contextMenu, itemOptionText, rootCommandKey, value);\n    }\n  }]);\n\n  return DiagramToolbarItemHelper;\n}();\n\nvar DiagramToolbarSubItemHelper = /*#__PURE__*/function (_DiagramToolbarItemHe) {\n  _inherits(DiagramToolbarSubItemHelper, _DiagramToolbarItemHe);\n\n  var _super3 = _createSuper(DiagramToolbarSubItemHelper);\n\n  function DiagramToolbarSubItemHelper(widget, indexPath, rootCommandKey, rootWidget) {\n    var _this8;\n\n    _classCallCheck(this, DiagramToolbarSubItemHelper);\n\n    _this8 = _super3.call(this, widget);\n    _this8._indexPath = indexPath;\n    _this8._rootCommandKey = rootCommandKey;\n    _this8._rootWidget = rootWidget;\n    return _this8;\n  }\n\n  _createClass(DiagramToolbarSubItemHelper, [{\n    key: \"canUpdate\",\n    value: function canUpdate(showingSubMenu) {\n      return _get(_getPrototypeOf(DiagramToolbarSubItemHelper.prototype), \"canUpdate\", this).call(this, showingSubMenu) || showingSubMenu === this._widget;\n    }\n  }, {\n    key: \"setEnabled\",\n    value: function setEnabled(enabled) {\n      this._widget.option(this._getItemOptionText() + \"disabled\", !enabled);\n\n      var rootEnabled = this._hasEnabledCommandItems(this._widget.option(\"items\"));\n\n      this._rootWidget.option(\"disabled\", !rootEnabled);\n    }\n  }, {\n    key: \"_hasEnabledCommandItems\",\n    value: function _hasEnabledCommandItems(items) {\n      var _this9 = this;\n\n      if (items) {\n        return items.some(function (item) {\n          return void 0 !== item.command && !item.disabled || _this9._hasEnabledCommandItems(item.items);\n        });\n      }\n\n      return false;\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(value) {\n      this._updateContextMenuItemValue(this._widget, this._getItemOptionText(), this._rootCommandKey, value);\n    }\n  }, {\n    key: \"setItems\",\n    value: function setItems(items) {\n      this._updateContextMenuItems(this._widget, this._getItemOptionText(), this._rootCommandKey, items);\n    }\n  }, {\n    key: \"_getItemOptionText\",\n    value: function _getItemOptionText() {\n      return DiagramMenuHelper.getItemOptionText(this._widget, this._indexPath);\n    }\n  }]);\n\n  return DiagramToolbarSubItemHelper;\n}(DiagramToolbarItemHelper);\n\nexport default DiagramToolbar;","map":null,"metadata":{},"sourceType":"module"}