{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/ui/diagram/ui.diagram.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getOuterWidth, getHeight, getOuterHeight } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport Widget from \"../widget/ui.widget\";\nimport LoadIndicator from \"../load_indicator\";\nimport registerComponent from \"../../core/component_registrator\";\nimport { extend } from \"../../core/utils/extend\";\nimport { isFunction, isDefined } from \"../../core/utils/type\";\nimport { compileSetter, compileGetter } from \"../../core/utils/data\";\nimport positionUtils from \"../../animation/position\";\nimport { getDiagram } from \"./diagram.importer\";\nimport { getWindow, hasWindow } from \"../../core/utils/window\";\nimport { getPublicElement } from \"../../core/element\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { addNamespace } from \"../../events/utils/index\";\nimport messageLocalization from \"../../localization/message\";\nimport numberLocalization from \"../../localization/number\";\nimport * as zIndexPool from \"../overlay/z_index\";\nimport Overlay from \"../overlay/ui.overlay\";\nimport DiagramToolbar from \"./ui.diagram.toolbar\";\nimport DiagramMainToolbar from \"./ui.diagram.main_toolbar\";\nimport DiagramHistoryToolbar from \"./ui.diagram.history_toolbar\";\nimport DiagramViewToolbar from \"./ui.diagram.view_toolbar\";\nimport DiagramPropertiesToolbar from \"./ui.diagram.properties_toolbar\";\nimport diagramContextMenuModule from \"./ui.diagram.context_menu\";\nimport DiagramContextToolbox from \"./ui.diagram.context_toolbox\";\nimport DiagramDialog from \"./ui.diagram.dialogs\";\nimport DiagramScrollView from \"./ui.diagram.scroll_view\";\nimport DiagramToolboxManager from \"./diagram.toolbox_manager\";\nimport DiagramToolbox from \"./ui.diagram.toolbox\";\nimport DiagramPropertiesPanel from \"./ui.diagram.properties_panel\";\nimport DiagramOptionsUpdateBar from \"./diagram.options_update\";\nimport DiagramDialogManager from \"./ui.diagram.dialog_manager\";\nimport DiagramCommandsManager from \"./diagram.commands_manager\";\nimport NodesOption from \"./diagram.nodes_option\";\nimport EdgesOption from \"./diagram.edges_option\";\nvar DIAGRAM_CLASS = \"dx-diagram\";\nvar DIAGRAM_FULLSCREEN_CLASS = \"dx-diagram-fullscreen\";\nvar DIAGRAM_OVERLAY_CONTENT_CLASS = \"dx-overlay-content\";\nvar DIAGRAM_TOOLBAR_WRAPPER_CLASS = DIAGRAM_CLASS + \"-toolbar-wrapper\";\nvar DIAGRAM_CONTENT_WRAPPER_CLASS = DIAGRAM_CLASS + \"-content-wrapper\";\nvar DIAGRAM_CONTENT_CLASS = DIAGRAM_CLASS + \"-content\";\nvar DIAGRAM_SCROLL_VIEW_CLASS = DIAGRAM_CLASS + \"-scroll-view\";\nvar DIAGRAM_FLOATING_TOOLBAR_CONTAINER_CLASS = DIAGRAM_CLASS + \"-floating-toolbar-container\";\nvar DIAGRAM_PROPERTIES_PANEL_TOOLBAR_CONTAINER_CLASS = DIAGRAM_CLASS + \"-properties-panel-toolbar-container\";\nvar DIAGRAM_LOADING_INDICATOR_CLASS = DIAGRAM_CLASS + \"-loading-indicator\";\nvar DIAGRAM_FLOATING_PANEL_OFFSET = 12;\nvar DIAGRAM_DEFAULT_UNIT = \"in\";\nvar DIAGRAM_DEFAULT_ZOOMLEVEL = 1;\nvar DIAGRAM_DEFAULT_AUTOZOOM_MODE = \"disabled\";\nvar DIAGRAM_DEFAULT_PAGE_ORIENTATION = \"portrait\";\nvar DIAGRAM_DEFAULT_PAGE_COLOR = \"#ffffff\";\nvar DIAGRAM_MAX_MOBILE_WINDOW_WIDTH = 576;\nvar DIAGRAM_TOOLBOX_SHAPE_SPACING = 12;\nvar DIAGRAM_TOOLBOX_SHAPES_PER_ROW = 3;\nvar DIAGRAM_CONTEXT_TOOLBOX_SHAPE_SPACING = 12;\nvar DIAGRAM_CONTEXT_TOOLBOX_SHAPES_PER_ROW = 4;\nvar DIAGRAM_CONTEXT_TOOLBOX_DEFAULT_WIDTH = 152;\nvar DIAGRAM_NAMESPACE = \"dxDiagramEvent\";\nvar FULLSCREEN_CHANGE_EVENT_NAME = addNamespace(\"fullscreenchange\", DIAGRAM_NAMESPACE);\nvar IE_FULLSCREEN_CHANGE_EVENT_NAME = addNamespace(\"msfullscreenchange\", DIAGRAM_NAMESPACE);\nvar WEBKIT_FULLSCREEN_CHANGE_EVENT_NAME = addNamespace(\"webkitfullscreenchange\", DIAGRAM_NAMESPACE);\nvar MOZ_FULLSCREEN_CHANGE_EVENT_NAME = addNamespace(\"mozfullscreenchange\", DIAGRAM_NAMESPACE);\n\nvar Diagram = /*#__PURE__*/function (_Widget) {\n  _inherits(Diagram, _Widget);\n\n  var _super = _createSuper(Diagram);\n\n  function Diagram() {\n    _classCallCheck(this, Diagram);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Diagram, [{\n    key: \"_init\",\n    value: function _init() {\n      this._updateDiagramLockCount = 0;\n      this.toggleFullscreenLock = 0;\n      this._toolbars = [];\n\n      _get(_getPrototypeOf(Diagram.prototype), \"_init\", this).call(this);\n\n      this._initDiagram();\n\n      this._createCustomCommand();\n    }\n  }, {\n    key: \"_initMarkup\",\n    value: function _initMarkup() {\n      var _this = this;\n\n      _get(_getPrototypeOf(Diagram.prototype), \"_initMarkup\", this).call(this);\n\n      this._toolbars = [];\n      delete this._isMobileScreenSize;\n      var isServerSide = !hasWindow();\n      this.$element().addClass(DIAGRAM_CLASS);\n      delete this._mainToolbar;\n\n      if (this.option(\"mainToolbar.visible\")) {\n        this._renderMainToolbar();\n      }\n\n      var $contentWrapper = $(\"<div>\").addClass(DIAGRAM_CONTENT_WRAPPER_CLASS).appendTo(this.$element());\n      delete this._historyToolbar;\n      delete this._historyToolbarResizeCallback;\n\n      if (this._isHistoryToolbarVisible()) {\n        this._renderHistoryToolbar($contentWrapper);\n      }\n\n      delete this._propertiesToolbar;\n      delete this._propertiesToolbarResizeCallback;\n\n      if (this._isPropertiesPanelEnabled()) {\n        this._renderPropertiesToolbar($contentWrapper);\n      }\n\n      delete this._viewToolbar;\n      delete this._viewToolbarResizeCallback;\n\n      if (this.option(\"viewToolbar.visible\")) {\n        this._renderViewToolbar($contentWrapper);\n      }\n\n      delete this._toolbox;\n      delete this._toolboxResizeCallback;\n\n      if (this._isToolboxEnabled()) {\n        this._renderToolbox($contentWrapper);\n      }\n\n      delete this._propertiesPanel;\n      delete this._propertiesPanelResizeCallback;\n\n      if (this._isPropertiesPanelEnabled()) {\n        this._renderPropertiesPanel($contentWrapper);\n      }\n\n      this._$content = $(\"<div>\").addClass(DIAGRAM_CONTENT_CLASS).appendTo($contentWrapper);\n      delete this._contextMenu;\n      this._diagramInstance.settings.contextMenuEnabled = this.option(\"contextMenu.enabled\");\n\n      if (this._diagramInstance.settings.contextMenuEnabled) {\n        this._renderContextMenu($contentWrapper);\n      }\n\n      delete this._contextToolbox;\n\n      if (this.option(\"contextToolbox.enabled\")) {\n        this._renderContextToolbox($contentWrapper);\n      }\n\n      this._renderDialog($contentWrapper);\n\n      if (!isServerSide) {\n        var $scrollViewWrapper = $(\"<div>\").addClass(DIAGRAM_SCROLL_VIEW_CLASS).appendTo(this._$content);\n\n        this._createComponent($scrollViewWrapper, DiagramScrollView, {\n          useNativeScrolling: this.option(\"useNativeScrolling\"),\n          onCreateDiagram: function onCreateDiagram(e) {\n            _this._diagramInstance.createDocument(e.$parent[0], e.scrollView, $contentWrapper[0]);\n          }\n        });\n      }\n\n      this._setCustomCommandChecked(DiagramCommandsManager.SHOW_PROPERTIES_PANEL_COMMAND_NAME, this._isPropertiesPanelVisible());\n\n      this._setCustomCommandChecked(DiagramCommandsManager.SHOW_TOOLBOX_COMMAND_NAME, this._isToolboxVisible());\n\n      this._createOptionsUpdateBar();\n    }\n  }, {\n    key: \"_dimensionChanged\",\n    value: function _dimensionChanged() {\n      this._isMobileScreenSize = void 0;\n\n      this._processDiagramResize();\n    }\n  }, {\n    key: \"_visibilityChanged\",\n    value: function _visibilityChanged(visible) {\n      if (visible) {\n        this._bindDiagramData();\n\n        this.repaint();\n      }\n    }\n  }, {\n    key: \"_processDiagramResize\",\n    value: function _processDiagramResize() {\n      this._diagramInstance.onDimensionChanged();\n\n      if (this._historyToolbarResizeCallback) {\n        this._historyToolbarResizeCallback.call(this);\n      }\n\n      if (this._propertiesToolbarResizeCallback) {\n        this._propertiesToolbarResizeCallback.call(this);\n      }\n\n      if (this._propertiesPanelResizeCallback) {\n        this._propertiesPanelResizeCallback.call(this);\n      }\n\n      if (this._viewToolbarResizeCallback) {\n        this._viewToolbarResizeCallback.call(this);\n      }\n\n      if (this._toolboxResizeCallback) {\n        this._toolboxResizeCallback.call(this);\n      }\n    }\n  }, {\n    key: \"isMobileScreenSize\",\n    value: function isMobileScreenSize() {\n      if (void 0 === this._isMobileScreenSize) {\n        this._isMobileScreenSize = hasWindow() && getOuterWidth(this.$element()) < DIAGRAM_MAX_MOBILE_WINDOW_WIDTH;\n      }\n\n      return this._isMobileScreenSize;\n    }\n  }, {\n    key: \"_captureFocus\",\n    value: function _captureFocus() {\n      if (this._diagramInstance) {\n        this._diagramInstance.captureFocus();\n      }\n    }\n  }, {\n    key: \"_captureFocusOnTimeout\",\n    value: function _captureFocusOnTimeout() {\n      var _this2 = this;\n\n      this._captureFocusTimeout = setTimeout(function () {\n        _this2._captureFocus();\n\n        delete _this2._captureFocusTimeout;\n      }, 100);\n    }\n  }, {\n    key: \"_killCaptureFocusTimeout\",\n    value: function _killCaptureFocusTimeout() {\n      if (this._captureFocusTimeout) {\n        clearTimeout(this._captureFocusTimeout);\n        delete this._captureFocusTimeout;\n      }\n    }\n  }, {\n    key: \"notifyBarCommandExecuted\",\n    value: function notifyBarCommandExecuted() {\n      this._captureFocusOnTimeout();\n    }\n  }, {\n    key: \"_registerToolbar\",\n    value: function _registerToolbar(component) {\n      this._registerBar(component);\n\n      this._toolbars.push(component);\n    }\n  }, {\n    key: \"_registerBar\",\n    value: function _registerBar(component) {\n      component.bar.onChanged.add(this);\n\n      this._diagramInstance.registerBar(component.bar);\n    }\n  }, {\n    key: \"_getExcludeCommands\",\n    value: function _getExcludeCommands() {\n      var excludeCommands = [];\n\n      if (!this._isToolboxEnabled()) {\n        excludeCommands.push(DiagramCommandsManager.SHOW_TOOLBOX_COMMAND_NAME);\n      }\n\n      if (!this._isPropertiesPanelEnabled()) {\n        excludeCommands.push(DiagramCommandsManager.SHOW_PROPERTIES_PANEL_COMMAND_NAME);\n      }\n\n      return excludeCommands;\n    }\n  }, {\n    key: \"_getToolbarBaseOptions\",\n    value: function _getToolbarBaseOptions() {\n      var _this3 = this;\n\n      return {\n        onContentReady: function onContentReady(_ref) {\n          var component = _ref.component;\n          return _this3._registerToolbar(component);\n        },\n        onSubMenuVisibilityChanging: function onSubMenuVisibilityChanging(_ref2) {\n          var component = _ref2.component;\n          return _this3._diagramInstance.updateBarItemsState(component.bar);\n        },\n        onPointerUp: this._onPanelPointerUp.bind(this),\n        export: this.option(\"export\"),\n        excludeCommands: this._getExcludeCommands(),\n        onInternalCommand: this._onInternalCommand.bind(this),\n        onCustomCommand: this._onCustomCommand.bind(this),\n        isMobileView: this.isMobileScreenSize()\n      };\n    }\n  }, {\n    key: \"_onInternalCommand\",\n    value: function _onInternalCommand(e) {\n      switch (e.command) {\n        case DiagramCommandsManager.SHOW_TOOLBOX_COMMAND_NAME:\n          if (this._toolbox) {\n            this._toolbox.toggle();\n          }\n\n          break;\n\n        case DiagramCommandsManager.SHOW_PROPERTIES_PANEL_COMMAND_NAME:\n          if (this._propertiesPanel) {\n            this._propertiesPanel.toggle();\n          }\n\n      }\n    }\n  }, {\n    key: \"_onCustomCommand\",\n    value: function _onCustomCommand(e) {\n      this._customCommandAction({\n        name: e.name\n      });\n    }\n  }, {\n    key: \"_renderMainToolbar\",\n    value: function _renderMainToolbar() {\n      var $toolbarWrapper = $(\"<div>\").addClass(DIAGRAM_TOOLBAR_WRAPPER_CLASS).appendTo(this.$element());\n      this._mainToolbar = this._createComponent($toolbarWrapper, DiagramMainToolbar, extend(this._getToolbarBaseOptions(), {\n        commands: this.option(\"mainToolbar.commands\"),\n        skipAdjustSize: true\n      }));\n    }\n  }, {\n    key: \"_isHistoryToolbarVisible\",\n    value: function _isHistoryToolbarVisible() {\n      return this.option(\"historyToolbar.visible\") && !this.isReadOnlyMode();\n    }\n  }, {\n    key: \"_renderHistoryToolbar\",\n    value: function _renderHistoryToolbar($parent) {\n      var _this4 = this;\n\n      var $container = $(\"<div>\").addClass(DIAGRAM_FLOATING_TOOLBAR_CONTAINER_CLASS).appendTo($parent);\n      this._historyToolbar = this._createComponent($container, DiagramHistoryToolbar, extend(this._getToolbarBaseOptions(), {\n        commands: this.option(\"historyToolbar.commands\"),\n        locateInMenu: \"never\"\n      }));\n\n      this._updateHistoryToolbarPosition();\n\n      this._historyToolbarResizeCallback = function () {\n        _this4._historyToolbar.option(\"isMobileView\", _this4.isMobileScreenSize());\n      };\n    }\n  }, {\n    key: \"_updateHistoryToolbarPosition\",\n    value: function _updateHistoryToolbarPosition() {\n      if (!hasWindow()) {\n        return;\n      }\n\n      positionUtils.setup(this._historyToolbar.$element(), {\n        my: \"left top\",\n        at: \"left top\",\n        of: this._historyToolbar.$element().parent(),\n        offset: DIAGRAM_FLOATING_PANEL_OFFSET + \" \" + DIAGRAM_FLOATING_PANEL_OFFSET\n      });\n    }\n  }, {\n    key: \"_isToolboxEnabled\",\n    value: function _isToolboxEnabled() {\n      return \"disabled\" !== this.option(\"toolbox.visibility\") && !this.isReadOnlyMode();\n    }\n  }, {\n    key: \"_isToolboxVisible\",\n    value: function _isToolboxVisible() {\n      return \"visible\" === this.option(\"toolbox.visibility\") || \"auto\" === this.option(\"toolbox.visibility\") && !this.isMobileScreenSize();\n    }\n  }, {\n    key: \"_renderToolbox\",\n    value: function _renderToolbox($parent) {\n      var _this5 = this;\n\n      var isServerSide = !hasWindow();\n      var $toolBox = $(\"<div>\").appendTo($parent);\n\n      var bounds = this._getToolboxBounds($parent, isServerSide);\n\n      this._toolbox = this._createComponent($toolBox, DiagramToolbox, {\n        isMobileView: this.isMobileScreenSize(),\n        isVisible: this._isToolboxVisible(),\n        container: this.$element(),\n        height: bounds.height,\n        offsetParent: $parent,\n        offsetX: bounds.offsetX,\n        offsetY: bounds.offsetY,\n        showSearch: this.option(\"toolbox.showSearch\"),\n        toolboxGroups: this._getToolboxGroups(),\n        toolboxWidth: this.option(\"toolbox.width\"),\n        onShapeCategoryRendered: function onShapeCategoryRendered(e) {\n          if (isServerSide) {\n            return;\n          }\n\n          _this5._diagramInstance.createToolbox(e.$element[0], \"texts\" === e.displayMode, e.shapes || e.category, {\n            shapeIconSpacing: DIAGRAM_TOOLBOX_SHAPE_SPACING,\n            shapeIconCountInRow: _this5.option(\"toolbox.shapeIconsPerRow\"),\n            shapeIconAttributes: {\n              \"data-toggle\": e.dataToggle\n            },\n            toolboxClass: DIAGRAM_OVERLAY_CONTENT_CLASS\n          });\n        },\n        onFilterChanged: function onFilterChanged(e) {\n          if (isServerSide) {\n            return;\n          }\n\n          _this5._diagramInstance.applyToolboxFilter(e.text, e.filteringToolboxes);\n        },\n        onVisibilityChanging: function onVisibilityChanging(e) {\n          if (isServerSide) {\n            return;\n          }\n\n          _this5._setCustomCommandChecked(DiagramCommandsManager.SHOW_TOOLBOX_COMMAND_NAME, e.visible);\n\n          if (_this5._propertiesPanel) {\n            if (e.visible && _this5.isMobileScreenSize()) {\n              _this5._propertiesPanel.hide();\n            }\n          }\n\n          if (_this5._historyToolbar) {\n            if (e.visible && _this5.isMobileScreenSize()) {\n              _this5._historyToolbarZIndex = zIndexPool.create(Overlay.baseZIndex());\n\n              _this5._historyToolbar.$element().css(\"zIndex\", _this5._historyToolbarZIndex);\n\n              _this5._historyToolbar.$element().css(\"boxShadow\", \"none\");\n            }\n          }\n\n          if (_this5._viewToolbar) {\n            _this5._viewToolbar.$element().css(\"opacity\", e.visible && _this5.isMobileScreenSize() ? \"0\" : \"1\");\n\n            _this5._viewToolbar.$element().css(\"pointerEvents\", e.visible && _this5.isMobileScreenSize() ? \"none\" : \"\");\n          }\n        },\n        onVisibilityChanged: function onVisibilityChanged(e) {\n          if (!e.visible && !_this5._textInputStarted) {\n            _this5._captureFocus();\n          }\n\n          if (!isServerSide) {\n            if (_this5._historyToolbar) {\n              if (!e.visible && _this5.isMobileScreenSize() && _this5._historyToolbarZIndex) {\n                zIndexPool.remove(_this5._historyToolbarZIndex);\n\n                _this5._historyToolbar.$element().css(\"zIndex\", \"\");\n\n                _this5._historyToolbar.$element().css(\"boxShadow\", \"\");\n\n                _this5._historyToolbarZIndex = void 0;\n              }\n            }\n          }\n        },\n        onPointerUp: this._onPanelPointerUp.bind(this)\n      });\n\n      this._toolbox._popup.option(\"propagateOutsideClick\", !this.option(\"fullScreen\"));\n\n      this._toolboxResizeCallback = function () {\n        var bounds = _this5._getToolboxBounds($parent, isServerSide);\n\n        _this5._toolbox.option(\"height\", bounds.height);\n\n        var prevIsMobileView = _this5._toolbox.option(\"isMobileView\");\n\n        if (prevIsMobileView !== _this5.isMobileScreenSize()) {\n          _this5._toolbox.option({\n            isMobileView: _this5.isMobileScreenSize(),\n            isVisible: _this5._isToolboxVisible()\n          });\n\n          _this5._setCustomCommandChecked(DiagramCommandsManager.SHOW_TOOLBOX_COMMAND_NAME, _this5._isToolboxVisible());\n        }\n\n        _this5._toolbox.updateMaxHeight();\n      };\n    }\n  }, {\n    key: \"_getToolboxBounds\",\n    value: function _getToolboxBounds($parent, isServerSide) {\n      var result = {\n        offsetX: DIAGRAM_FLOATING_PANEL_OFFSET,\n        offsetY: DIAGRAM_FLOATING_PANEL_OFFSET,\n        height: !isServerSide ? getHeight($parent) - 2 * DIAGRAM_FLOATING_PANEL_OFFSET : 0\n      };\n\n      if (this._historyToolbar && !isServerSide) {\n        result.offsetY += getOuterHeight(this._historyToolbar.$element()) + DIAGRAM_FLOATING_PANEL_OFFSET;\n        result.height -= getOuterHeight(this._historyToolbar.$element()) + DIAGRAM_FLOATING_PANEL_OFFSET;\n      }\n\n      if (this._viewToolbar && !isServerSide) {\n        result.height -= getOuterHeight(this._viewToolbar.$element()) + this._getViewToolbarYOffset(isServerSide);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_renderViewToolbar\",\n    value: function _renderViewToolbar($parent) {\n      var _this6 = this;\n\n      var isServerSide = !hasWindow();\n      var $container = $(\"<div>\").addClass(DIAGRAM_FLOATING_TOOLBAR_CONTAINER_CLASS).appendTo($parent);\n      this._viewToolbar = this._createComponent($container, DiagramViewToolbar, extend(this._getToolbarBaseOptions(), {\n        commands: this.option(\"viewToolbar.commands\"),\n        locateInMenu: \"never\"\n      }));\n\n      this._updateViewToolbarPosition($container, $parent, isServerSide);\n\n      this._viewToolbarResizeCallback = function () {\n        _this6._updateViewToolbarPosition($container, $parent, isServerSide);\n      };\n    }\n  }, {\n    key: \"_getViewToolbarYOffset\",\n    value: function _getViewToolbarYOffset(isServerSide) {\n      if (isServerSide) {\n        return;\n      }\n\n      var result = DIAGRAM_FLOATING_PANEL_OFFSET;\n\n      if (this._viewToolbar && this._propertiesToolbar) {\n        result += (getOuterHeight(this._propertiesToolbar.$element()) - getOuterHeight(this._viewToolbar.$element())) / 2;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_updateViewToolbarPosition\",\n    value: function _updateViewToolbarPosition($container, $parent, isServerSide) {\n      if (isServerSide) {\n        return;\n      }\n\n      positionUtils.setup($container, {\n        my: \"left bottom\",\n        at: \"left bottom\",\n        of: $parent,\n        offset: DIAGRAM_FLOATING_PANEL_OFFSET + \" -\" + this._getViewToolbarYOffset(isServerSide)\n      });\n    }\n  }, {\n    key: \"_isPropertiesPanelEnabled\",\n    value: function _isPropertiesPanelEnabled() {\n      return \"disabled\" !== this.option(\"propertiesPanel.visibility\") && !this.isReadOnlyMode();\n    }\n  }, {\n    key: \"_isPropertiesPanelVisible\",\n    value: function _isPropertiesPanelVisible() {\n      return \"visible\" === this.option(\"propertiesPanel.visibility\");\n    }\n  }, {\n    key: \"_renderPropertiesToolbar\",\n    value: function _renderPropertiesToolbar($parent) {\n      var _this7 = this;\n\n      var isServerSide = !hasWindow();\n      var $container = $(\"<div>\").addClass(DIAGRAM_FLOATING_TOOLBAR_CONTAINER_CLASS).addClass(DIAGRAM_PROPERTIES_PANEL_TOOLBAR_CONTAINER_CLASS).appendTo($parent);\n      this._propertiesToolbar = this._createComponent($container, DiagramPropertiesToolbar, extend(this._getToolbarBaseOptions(), {\n        buttonStylingMode: \"contained\",\n        buttonType: \"default\",\n        locateInMenu: \"never\"\n      }));\n\n      this._updatePropertiesToolbarPosition($container, $parent, isServerSide);\n\n      this._propertiesToolbarResizeCallback = function () {\n        _this7._updatePropertiesToolbarPosition($container, $parent, isServerSide);\n      };\n    }\n  }, {\n    key: \"_updatePropertiesToolbarPosition\",\n    value: function _updatePropertiesToolbarPosition($container, $parent, isServerSide) {\n      if (isServerSide) {\n        return;\n      }\n\n      positionUtils.setup($container, {\n        my: \"right bottom\",\n        at: \"right bottom\",\n        of: $parent,\n        offset: \"-\" + DIAGRAM_FLOATING_PANEL_OFFSET + \" -\" + DIAGRAM_FLOATING_PANEL_OFFSET\n      });\n    }\n  }, {\n    key: \"_renderPropertiesPanel\",\n    value: function _renderPropertiesPanel($parent) {\n      var _this8 = this;\n\n      var isServerSide = !hasWindow();\n      var $propertiesPanel = $(\"<div>\").appendTo($parent);\n      var offsetX = DIAGRAM_FLOATING_PANEL_OFFSET;\n      var offsetY = 2 * DIAGRAM_FLOATING_PANEL_OFFSET + (!isServerSide ? getOuterHeight(this._propertiesToolbar.$element()) : 0);\n      this._propertiesPanel = this._createComponent($propertiesPanel, DiagramPropertiesPanel, {\n        isMobileView: this.isMobileScreenSize(),\n        isVisible: this._isPropertiesPanelVisible(),\n        container: this.$element(),\n        offsetParent: $parent,\n        offsetX: offsetX,\n        offsetY: offsetY,\n        propertyTabs: this.option(\"propertiesPanel.tabs\"),\n        onCreateToolbar: function onCreateToolbar(e) {\n          e.toolbar = _this8._createComponent(e.$parent, DiagramToolbar, extend(_this8._getToolbarBaseOptions(), {\n            commands: e.commands,\n            locateInMenu: \"never\",\n            editorStylingMode: \"outlined\"\n          }));\n        },\n        onVisibilityChanging: function onVisibilityChanging(e) {\n          if (isServerSide) {\n            return;\n          }\n\n          _this8._updatePropertiesPanelGroupBars(e.component);\n\n          _this8._setCustomCommandChecked(DiagramCommandsManager.SHOW_PROPERTIES_PANEL_COMMAND_NAME, e.visible);\n\n          if (_this8._toolbox) {\n            if (e.visible && _this8.isMobileScreenSize()) {\n              _this8._toolbox.hide();\n            }\n          }\n        },\n        onVisibilityChanged: function onVisibilityChanged(e) {\n          if (!e.visible && !_this8._textInputStarted) {\n            _this8._captureFocus();\n          }\n        },\n        onSelectedGroupChanged: function onSelectedGroupChanged(_ref3) {\n          var component = _ref3.component;\n          return _this8._updatePropertiesPanelGroupBars(component);\n        },\n        onPointerUp: this._onPanelPointerUp.bind(this)\n      });\n\n      this._propertiesPanelResizeCallback = function () {\n        var prevIsMobileView = _this8._propertiesPanel.option(\"isMobileView\");\n\n        if (prevIsMobileView !== _this8.isMobileScreenSize()) {\n          _this8._propertiesPanel.option({\n            isMobileView: _this8.isMobileScreenSize(),\n            isVisible: _this8._isPropertiesPanelVisible()\n          });\n\n          _this8._setCustomCommandChecked(DiagramCommandsManager.SHOW_PROPERTIES_PANEL_COMMAND_NAME, _this8._isPropertiesPanelVisible());\n        }\n      };\n    }\n  }, {\n    key: \"_updatePropertiesPanelGroupBars\",\n    value: function _updatePropertiesPanelGroupBars(component) {\n      var _this9 = this;\n\n      component.getActiveToolbars().forEach(function (toolbar) {\n        _this9._diagramInstance.updateBarItemsState(toolbar.bar);\n      });\n    }\n  }, {\n    key: \"_onPanelPointerUp\",\n    value: function _onPanelPointerUp() {\n      this._captureFocusOnTimeout();\n    }\n  }, {\n    key: \"_renderContextMenu\",\n    value: function _renderContextMenu($parent) {\n      var _this10 = this;\n\n      var $contextMenu = $(\"<div>\").appendTo($parent);\n      this._contextMenu = this._createComponent($contextMenu, diagramContextMenuModule.DiagramContextMenuWrapper, {\n        commands: this.option(\"contextMenu.commands\"),\n        onContentReady: function onContentReady(_ref4) {\n          var component = _ref4.component;\n          return _this10._registerBar(component);\n        },\n        onVisibilityChanging: function onVisibilityChanging(_ref5) {\n          var component = _ref5.component;\n          return _this10._diagramInstance.updateBarItemsState(component.bar);\n        },\n        onItemClick: function onItemClick(itemData) {\n          return _this10._onBeforeCommandExecuted(itemData.command);\n        },\n        export: this.option(\"export\"),\n        excludeCommands: this._getExcludeCommands(),\n        onInternalCommand: this._onInternalCommand.bind(this),\n        onCustomCommand: this._onCustomCommand.bind(this)\n      });\n    }\n  }, {\n    key: \"_renderContextToolbox\",\n    value: function _renderContextToolbox($parent) {\n      var _this11 = this;\n\n      var isServerSide = !hasWindow();\n      var category = this.option(\"contextToolbox.category\");\n      var displayMode = this.option(\"contextToolbox.displayMode\");\n      var shapes = this.option(\"contextToolbox.shapes\");\n      var $contextToolbox = $(\"<div>\").appendTo($parent);\n      this._contextToolbox = this._createComponent($contextToolbox, DiagramContextToolbox, {\n        toolboxWidth: this.option(\"contextToolbox.width\"),\n        onShown: function onShown(e) {\n          if (isServerSide) {\n            return;\n          }\n\n          var $toolboxContainer = $(e.$element);\n          var isTextGroup = \"texts\" === displayMode;\n\n          if (!shapes && !category && !isTextGroup) {\n            var group = _this11._getToolboxGroups().filter(function (g) {\n              return g.category === e.category;\n            })[0];\n\n            if (group) {\n              isTextGroup = \"texts\" === group.displayMode;\n            }\n          }\n\n          _this11._diagramInstance.createContextToolbox($toolboxContainer[0], isTextGroup, shapes || category || e.category, {\n            shapeIconSpacing: DIAGRAM_CONTEXT_TOOLBOX_SHAPE_SPACING,\n            shapeIconCountInRow: _this11.option(\"contextToolbox.shapeIconsPerRow\")\n          }, function (shapeType) {\n            e.callback(shapeType);\n\n            _this11._captureFocus();\n\n            e.hide();\n          });\n        }\n      });\n    }\n  }, {\n    key: \"_setCustomCommandChecked\",\n    value: function _setCustomCommandChecked(command, checked) {\n      this._toolbars.forEach(function (tb) {\n        tb.setCommandChecked(command, checked);\n      });\n    }\n  }, {\n    key: \"_onBeforeCommandExecuted\",\n    value: function _onBeforeCommandExecuted(command) {\n      var dialogParameters = DiagramDialogManager.getDialogParameters(command);\n\n      if (dialogParameters) {\n        this._showDialog(dialogParameters);\n      }\n\n      return !!dialogParameters;\n    }\n  }, {\n    key: \"_renderDialog\",\n    value: function _renderDialog($parent) {\n      var $dialogElement = $(\"<div>\").appendTo($parent);\n      this._dialogInstance = this._createComponent($dialogElement, DiagramDialog, {});\n    }\n  }, {\n    key: \"_showDialog\",\n    value: function _showDialog(dialogParameters) {\n      if (this._dialogInstance) {\n        this._dialogInstance.option(\"onGetContent\", dialogParameters.onGetContent);\n\n        this._dialogInstance.option(\"onHidden\", function () {\n          this._captureFocus();\n        }.bind(this));\n\n        this._dialogInstance.option(\"command\", this._diagramInstance.getCommand(dialogParameters.command));\n\n        this._dialogInstance.option(\"title\", dialogParameters.title);\n\n        this._dialogInstance._show();\n      }\n    }\n  }, {\n    key: \"_showLoadingIndicator\",\n    value: function _showLoadingIndicator() {\n      this._loadingIndicator = $(\"<div>\").addClass(DIAGRAM_LOADING_INDICATOR_CLASS);\n\n      this._createComponent(this._loadingIndicator, LoadIndicator, {});\n\n      var $parent = this._$content || this.$element();\n      $parent.append(this._loadingIndicator);\n    }\n  }, {\n    key: \"_hideLoadingIndicator\",\n    value: function _hideLoadingIndicator() {\n      if (!this._loadingIndicator) {\n        return;\n      }\n\n      this._loadingIndicator.remove();\n\n      this._loadingIndicator = null;\n    }\n  }, {\n    key: \"_initDiagram\",\n    value: function _initDiagram() {\n      var _getDiagram = getDiagram(),\n          DiagramControl = _getDiagram.DiagramControl;\n\n      this._diagramInstance = new DiagramControl();\n      this._diagramInstance.onChanged = this._raiseDataChangeAction.bind(this);\n      this._diagramInstance.onEdgeInserted = this._raiseEdgeInsertedAction.bind(this);\n      this._diagramInstance.onEdgeUpdated = this._raiseEdgeUpdatedAction.bind(this);\n      this._diagramInstance.onEdgeRemoved = this._raiseEdgeRemovedAction.bind(this);\n      this._diagramInstance.onNodeInserted = this._raiseNodeInsertedAction.bind(this);\n      this._diagramInstance.onNodeUpdated = this._raiseNodeUpdatedAction.bind(this);\n      this._diagramInstance.onNodeRemoved = this._raiseNodeRemovedAction.bind(this);\n      this._diagramInstance.onToolboxDragStart = this._raiseToolboxDragStart.bind(this);\n      this._diagramInstance.onToolboxDragEnd = this._raiseToolboxDragEnd.bind(this);\n      this._diagramInstance.onTextInputStart = this._raiseTextInputStart.bind(this);\n      this._diagramInstance.onTextInputEnd = this._raiseTextInputEnd.bind(this);\n      this._diagramInstance.onToggleFullscreen = this._onToggleFullScreen.bind(this);\n      this._diagramInstance.onShowContextMenu = this._onShowContextMenu.bind(this);\n      this._diagramInstance.onHideContextMenu = this._onHideContextMenu.bind(this);\n      this._diagramInstance.onShowContextToolbox = this._onShowContextToolbox.bind(this);\n      this._diagramInstance.onHideContextToolbox = this._onHideContextToolbox.bind(this);\n\n      this._diagramInstance.onNativeAction.add({\n        notifyItemClick: this._raiseItemClickAction.bind(this),\n        notifyItemDblClick: this._raiseItemDblClickAction.bind(this),\n        notifySelectionChanged: this._raiseSelectionChanged.bind(this)\n      });\n\n      this._diagramInstance.onRequestOperation = this._raiseRequestEditOperation.bind(this);\n\n      this._updateEventSubscriptionMethods();\n\n      this._updateDefaultItemProperties();\n\n      this._updateEditingSettings();\n\n      this._updateShapeTexts();\n\n      this._updateUnitItems();\n\n      this._updateFormatUnitsMethod();\n\n      if (this.option(\"units\") !== DIAGRAM_DEFAULT_UNIT) {\n        this._updateUnitsState();\n      }\n\n      if (this.isReadOnlyMode()) {\n        this._updateReadOnlyState();\n      }\n\n      if (this.option(\"pageSize\")) {\n        if (this.option(\"pageSize.items\")) {\n          this._updatePageSizeItemsState();\n        }\n\n        if (this.option(\"pageSize.width\") && this.option(\"pageSize.height\")) {\n          this._updatePageSizeState();\n        }\n      }\n\n      if (this.option(\"pageOrientation\") !== DIAGRAM_DEFAULT_PAGE_ORIENTATION) {\n        this._updatePageOrientationState();\n      }\n\n      if (this.option(\"pageColor\") !== DIAGRAM_DEFAULT_PAGE_COLOR) {\n        this._updatePageColorState();\n      }\n\n      if (this.option(\"viewUnits\") !== DIAGRAM_DEFAULT_UNIT) {\n        this._updateViewUnitsState();\n      }\n\n      if (!this.option(\"showGrid\")) {\n        this._updateShowGridState();\n      }\n\n      if (!this.option(\"snapToGrid\")) {\n        this._updateSnapToGridState();\n      }\n\n      if (this.option(\"gridSize\")) {\n        this._updateGridSizeState();\n      }\n\n      if (this.option(\"zoomLevel\") !== DIAGRAM_DEFAULT_ZOOMLEVEL) {\n        this._updateZoomLevelState();\n      }\n\n      if (this.option(\"simpleView\")) {\n        this._updateSimpleViewState();\n      }\n\n      if (this.option(\"autoZoomMode\") !== DIAGRAM_DEFAULT_AUTOZOOM_MODE) {\n        this._updateAutoZoomState();\n      }\n\n      if (this.option(\"fullScreen\")) {\n        var window = getWindow();\n\n        if (window && window.self !== window.top) {\n          this.option(\"fullScreen\", false);\n        } else {\n          this._updateFullscreenState();\n        }\n      }\n\n      this._createOptionsUpdateBar();\n\n      if (hasWindow()) {\n        this._diagramInstance.initMeasurer(this.$element()[0]);\n      }\n\n      this._updateCustomShapes(this._getCustomShapes());\n\n      this._refreshDataSources();\n    }\n  }, {\n    key: \"_createOptionsUpdateBar\",\n    value: function _createOptionsUpdateBar() {\n      if (!this.optionsUpdateBar) {\n        this.optionsUpdateBar = new DiagramOptionsUpdateBar(this);\n\n        this._diagramInstance.registerBar(this.optionsUpdateBar);\n      }\n    }\n  }, {\n    key: \"_deleteOptionsUpdateBar\",\n    value: function _deleteOptionsUpdateBar() {\n      delete this.optionsUpdateBar;\n    }\n  }, {\n    key: \"_clean\",\n    value: function _clean() {\n      if (this._diagramInstance) {\n        this._diagramInstance.cleanMarkup(function (element) {\n          $(element).empty();\n        });\n\n        this._deleteOptionsUpdateBar();\n      }\n\n      _get(_getPrototypeOf(Diagram.prototype), \"_clean\", this).call(this);\n    }\n  }, {\n    key: \"_dispose\",\n    value: function _dispose() {\n      this._killCaptureFocusTimeout();\n\n      _get(_getPrototypeOf(Diagram.prototype), \"_dispose\", this).call(this);\n\n      this._diagramInstance = void 0;\n    }\n  }, {\n    key: \"_executeDiagramCommand\",\n    value: function _executeDiagramCommand(command, parameter) {\n      this._diagramInstance.getCommand(command).execute(parameter);\n    }\n  }, {\n    key: \"getNodeDataSource\",\n    value: function getNodeDataSource() {\n      return this._nodesOption && this._nodesOption.getDataSource();\n    }\n  }, {\n    key: \"getEdgeDataSource\",\n    value: function getEdgeDataSource() {\n      return this._edgesOption && this._edgesOption.getDataSource();\n    }\n  }, {\n    key: \"_refreshDataSources\",\n    value: function _refreshDataSources() {\n      this._beginUpdateDiagram();\n\n      this._refreshNodesDataSource();\n\n      this._refreshEdgesDataSource();\n\n      this._endUpdateDiagram();\n    }\n  }, {\n    key: \"_refreshNodesDataSource\",\n    value: function _refreshNodesDataSource() {\n      if (this._nodesOption) {\n        this._nodesOption._disposeDataSource();\n\n        delete this._nodesOption;\n      }\n\n      if (this.option(\"nodes.dataSource\")) {\n        this._nodesOption = new NodesOption(this);\n\n        this._nodesOption.option(\"dataSource\", this.option(\"nodes.dataSource\"));\n\n        this._nodesOption._refreshDataSource();\n      }\n    }\n  }, {\n    key: \"_refreshEdgesDataSource\",\n    value: function _refreshEdgesDataSource() {\n      if (this._edgesOption) {\n        this._edgesOption._disposeDataSource();\n\n        delete this._edgesOption;\n      }\n\n      if (this.option(\"edges.dataSource\")) {\n        this._edgesOption = new EdgesOption(this);\n\n        this._edgesOption.option(\"dataSource\", this.option(\"edges.dataSource\"));\n\n        this._edgesOption._refreshDataSource();\n      }\n    }\n  }, {\n    key: \"_getDiagramData\",\n    value: function _getDiagramData() {\n      var value;\n\n      var _getDiagram2 = getDiagram(),\n          DiagramCommand = _getDiagram2.DiagramCommand;\n\n      this._executeDiagramCommand(DiagramCommand.Export, function (data) {\n        value = data;\n      });\n\n      return value;\n    }\n  }, {\n    key: \"_setDiagramData\",\n    value: function _setDiagramData(data, keepExistingItems) {\n      var _getDiagram3 = getDiagram(),\n          DiagramCommand = _getDiagram3.DiagramCommand;\n\n      this._executeDiagramCommand(DiagramCommand.Import, {\n        data: data,\n        keepExistingItems: keepExistingItems\n      });\n    }\n  }, {\n    key: \"isReadOnlyMode\",\n    value: function isReadOnlyMode() {\n      return this.option(\"readOnly\") || this.option(\"disabled\");\n    }\n  }, {\n    key: \"_onDataSourceChanged\",\n    value: function _onDataSourceChanged() {\n      this._bindDiagramData();\n    }\n  }, {\n    key: \"_getChangesKeys\",\n    value: function _getChangesKeys(changes) {\n      return changes.map(function (change) {\n        if (isDefined(change.internalKey)) {\n          return change.internalKey;\n        } else if (isDefined(change.key)) {\n          return change.key;\n        } else {\n          return null;\n        }\n      }).filter(function (key) {\n        return isDefined(key);\n      });\n    }\n  }, {\n    key: \"_createOptionGetter\",\n    value: function _createOptionGetter(optionName) {\n      var expr = this.option(optionName);\n      return expr && compileGetter(expr);\n    }\n  }, {\n    key: \"_onRequestUpdateLayout\",\n    value: function _onRequestUpdateLayout(changes) {\n      if (!this._requestLayoutUpdateAction) {\n        this._createRequestLayoutUpdateAction();\n      }\n\n      var eventArgs = {\n        changes: changes,\n        allowed: false\n      };\n\n      this._requestLayoutUpdateAction(eventArgs);\n\n      return eventArgs.allowed;\n    }\n  }, {\n    key: \"_createOptionSetter\",\n    value: function _createOptionSetter(optionName) {\n      var expr = this.option(optionName);\n\n      if (isFunction(expr)) {\n        return expr;\n      }\n\n      return expr && compileSetter(expr);\n    }\n  }, {\n    key: \"_bindDiagramData\",\n    value: function _bindDiagramData() {\n      if (this._updateDiagramLockCount || !this._isBindingMode()) {\n        return;\n      }\n\n      var _getDiagram4 = getDiagram(),\n          DiagramCommand = _getDiagram4.DiagramCommand,\n          ConnectorLineOption = _getDiagram4.ConnectorLineOption,\n          ConnectorLineEnding = _getDiagram4.ConnectorLineEnding;\n\n      var lineOptionGetter;\n      var lineOptionSetter;\n      var startLineEndingGetter;\n      var startLineEndingSetter;\n      var endLineEndingGetter;\n      var endLineEndingSetter;\n      var containerChildrenGetter;\n      var containerChildrenSetter;\n      var data = {\n        nodeDataSource: this._nodesOption && this._nodesOption.getItems(),\n        edgeDataSource: this._edgesOption && this._edgesOption.getItems(),\n        nodeDataImporter: {\n          getKey: this._createOptionGetter(\"nodes.keyExpr\"),\n          setKey: this._createOptionSetter(\"nodes.keyExpr\"),\n          getCustomData: this._createOptionGetter(\"nodes.customDataExpr\"),\n          setCustomData: this._createOptionSetter(\"nodes.customDataExpr\"),\n          getLocked: this._createOptionGetter(\"nodes.lockedExpr\"),\n          setLocked: this._createOptionSetter(\"nodes.lockedExpr\"),\n          getStyle: this._createOptionGetter(\"nodes.styleExpr\"),\n          setStyle: this._createOptionSetter(\"nodes.styleExpr\"),\n          getStyleText: this._createOptionGetter(\"nodes.textStyleExpr\"),\n          setStyleText: this._createOptionSetter(\"nodes.textStyleExpr\"),\n          getZIndex: this._createOptionGetter(\"nodes.zIndexExpr\"),\n          setZIndex: this._createOptionSetter(\"nodes.zIndexExpr\"),\n          getType: this._createOptionGetter(\"nodes.typeExpr\"),\n          setType: this._createOptionSetter(\"nodes.typeExpr\"),\n          getText: this._createOptionGetter(\"nodes.textExpr\"),\n          setText: this._createOptionSetter(\"nodes.textExpr\"),\n          getImage: this._createOptionGetter(\"nodes.imageUrlExpr\"),\n          setImage: this._createOptionSetter(\"nodes.imageUrlExpr\"),\n          getLeft: this._createOptionGetter(\"nodes.leftExpr\"),\n          setLeft: this._createOptionSetter(\"nodes.leftExpr\"),\n          getTop: this._createOptionGetter(\"nodes.topExpr\"),\n          setTop: this._createOptionSetter(\"nodes.topExpr\"),\n          getWidth: this._createOptionGetter(\"nodes.widthExpr\"),\n          setWidth: this._createOptionSetter(\"nodes.widthExpr\"),\n          getHeight: this._createOptionGetter(\"nodes.heightExpr\"),\n          setHeight: this._createOptionSetter(\"nodes.heightExpr\"),\n          getParentKey: this._createOptionGetter(\"nodes.parentKeyExpr\"),\n          setParentKey: this._createOptionSetter(\"nodes.parentKeyExpr\"),\n          getItems: this._createOptionGetter(\"nodes.itemsExpr\"),\n          setItems: this._createOptionSetter(\"nodes.itemsExpr\"),\n          getChildren: containerChildrenGetter = this._createOptionGetter(\"nodes.containerChildrenExpr\"),\n          setChildren: containerChildrenSetter = this._createOptionSetter(\"nodes.containerChildrenExpr\"),\n          getContainerKey: !containerChildrenGetter && !containerChildrenSetter && this._createOptionGetter(\"nodes.containerKeyExpr\"),\n          setContainerKey: !containerChildrenGetter && !containerChildrenSetter && this._createOptionSetter(\"nodes.containerKeyExpr\")\n        },\n        edgeDataImporter: {\n          getKey: this._createOptionGetter(\"edges.keyExpr\"),\n          setKey: this._createOptionSetter(\"edges.keyExpr\"),\n          getCustomData: this._createOptionGetter(\"edges.customDataExpr\"),\n          setCustomData: this._createOptionSetter(\"edges.customDataExpr\"),\n          getLocked: this._createOptionGetter(\"edges.lockedExpr\"),\n          setLocked: this._createOptionSetter(\"edges.lockedExpr\"),\n          getStyle: this._createOptionGetter(\"edges.styleExpr\"),\n          setStyle: this._createOptionSetter(\"edges.styleExpr\"),\n          getStyleText: this._createOptionGetter(\"edges.textStyleExpr\"),\n          setStyleText: this._createOptionSetter(\"edges.textStyleExpr\"),\n          getZIndex: this._createOptionGetter(\"edges.zIndexExpr\"),\n          setZIndex: this._createOptionSetter(\"edges.zIndexExpr\"),\n          getFrom: this._createOptionGetter(\"edges.fromExpr\"),\n          setFrom: this._createOptionSetter(\"edges.fromExpr\"),\n          getFromPointIndex: this._createOptionGetter(\"edges.fromPointIndexExpr\"),\n          setFromPointIndex: this._createOptionSetter(\"edges.fromPointIndexExpr\"),\n          getTo: this._createOptionGetter(\"edges.toExpr\"),\n          setTo: this._createOptionSetter(\"edges.toExpr\"),\n          getToPointIndex: this._createOptionGetter(\"edges.toPointIndexExpr\"),\n          setToPointIndex: this._createOptionSetter(\"edges.toPointIndexExpr\"),\n          getPoints: this._createOptionGetter(\"edges.pointsExpr\"),\n          setPoints: this._createOptionSetter(\"edges.pointsExpr\"),\n          getText: this._createOptionGetter(\"edges.textExpr\"),\n          setText: this._createOptionSetter(\"edges.textExpr\"),\n          getLineOption: (lineOptionGetter = this._createOptionGetter(\"edges.lineTypeExpr\")) && function (obj) {\n            var lineType = lineOptionGetter(obj);\n            return this._getConnectorLineOption(lineType);\n          }.bind(this),\n          setLineOption: (lineOptionSetter = this._createOptionSetter(\"edges.lineTypeExpr\")) && function (obj, value) {\n            switch (value) {\n              case ConnectorLineOption.Straight:\n                value = \"straight\";\n                break;\n\n              case ConnectorLineOption.Orthogonal:\n                value = \"orthogonal\";\n            }\n\n            lineOptionSetter(obj, value);\n          }.bind(this),\n          getStartLineEnding: (startLineEndingGetter = this._createOptionGetter(\"edges.fromLineEndExpr\")) && function (obj) {\n            var lineEnd = startLineEndingGetter(obj);\n            return this._getConnectorLineEnding(lineEnd);\n          }.bind(this),\n          setStartLineEnding: (startLineEndingSetter = this._createOptionSetter(\"edges.fromLineEndExpr\")) && function (obj, value) {\n            switch (value) {\n              case ConnectorLineEnding.Arrow:\n                value = \"arrow\";\n                break;\n\n              case ConnectorLineEnding.OutlinedTriangle:\n                value = \"outlinedTriangle\";\n                break;\n\n              case ConnectorLineEnding.FilledTriangle:\n                value = \"filledTriangle\";\n                break;\n\n              case ConnectorLineEnding.None:\n                value = \"none\";\n            }\n\n            startLineEndingSetter(obj, value);\n          }.bind(this),\n          getEndLineEnding: (endLineEndingGetter = this._createOptionGetter(\"edges.toLineEndExpr\")) && function (obj) {\n            var lineEnd = endLineEndingGetter(obj);\n            return this._getConnectorLineEnding(lineEnd);\n          }.bind(this),\n          setEndLineEnding: (endLineEndingSetter = this._createOptionSetter(\"edges.toLineEndExpr\")) && function (obj, value) {\n            switch (value) {\n              case ConnectorLineEnding.Arrow:\n                value = \"arrow\";\n                break;\n\n              case ConnectorLineEnding.OutlinedTriangle:\n                value = \"outlinedTriangle\";\n                break;\n\n              case ConnectorLineEnding.FilledTriangle:\n                value = \"filledTriangle\";\n                break;\n\n              case ConnectorLineEnding.None:\n                value = \"none\";\n            }\n\n            endLineEndingSetter(obj, value);\n          }.bind(this)\n        },\n        layoutParameters: this._getDataBindingLayoutParameters()\n      };\n\n      this._executeDiagramCommand(DiagramCommand.BindDocument, data);\n    }\n  }, {\n    key: \"_reloadContentByChanges\",\n    value: function _reloadContentByChanges(changes, isExternalChanges) {\n      var keys = this._getChangesKeys(changes);\n\n      var applyLayout = this._onRequestUpdateLayout(changes);\n\n      this._reloadContent(keys, applyLayout, isExternalChanges);\n    }\n  }, {\n    key: \"_reloadContent\",\n    value: function _reloadContent(itemKeys, applyLayout, isExternalChanges) {\n      var _this12 = this;\n\n      this._diagramInstance.reloadContent(itemKeys, function () {\n        var nodeDataSource;\n        var edgeDataSource;\n\n        if (_this12._nodesOption && isExternalChanges) {\n          nodeDataSource = _this12._nodesOption.getItems();\n        }\n\n        if (_this12._edgesOption && isExternalChanges) {\n          edgeDataSource = _this12._edgesOption.getItems();\n        }\n\n        return {\n          nodeDataSource: nodeDataSource,\n          edgeDataSource: edgeDataSource\n        };\n      }, applyLayout && this._getDataBindingLayoutParameters(), isExternalChanges);\n    }\n  }, {\n    key: \"_getConnectorLineOption\",\n    value: function _getConnectorLineOption(lineType) {\n      var _getDiagram5 = getDiagram(),\n          ConnectorLineOption = _getDiagram5.ConnectorLineOption;\n\n      switch (lineType) {\n        case \"straight\":\n          return ConnectorLineOption.Straight;\n\n        default:\n          return ConnectorLineOption.Orthogonal;\n      }\n    }\n  }, {\n    key: \"_getConnectorLineEnding\",\n    value: function _getConnectorLineEnding(lineEnd) {\n      var _getDiagram6 = getDiagram(),\n          ConnectorLineEnding = _getDiagram6.ConnectorLineEnding;\n\n      switch (lineEnd) {\n        case \"arrow\":\n          return ConnectorLineEnding.Arrow;\n\n        case \"outlinedTriangle\":\n          return ConnectorLineEnding.OutlinedTriangle;\n\n        case \"filledTriangle\":\n          return ConnectorLineEnding.FilledTriangle;\n\n        default:\n          return ConnectorLineEnding.None;\n      }\n    }\n  }, {\n    key: \"_getDataBindingLayoutParameters\",\n    value: function _getDataBindingLayoutParameters() {\n      var _getDiagram7 = getDiagram(),\n          DataLayoutType = _getDiagram7.DataLayoutType,\n          DataLayoutOrientation = _getDiagram7.DataLayoutOrientation;\n\n      var layoutParametersOption = this.option(\"nodes.autoLayout\") || \"off\";\n      var layoutType = layoutParametersOption.type || layoutParametersOption;\n      var parameters = {};\n\n      if (\"off\" !== layoutType && (\"auto\" !== layoutType || !this._hasNodePositionExprs())) {\n        switch (layoutType) {\n          case \"tree\":\n            parameters.type = DataLayoutType.Tree;\n            break;\n\n          default:\n            parameters.type = DataLayoutType.Sugiyama;\n        }\n\n        switch (layoutParametersOption.orientation) {\n          case \"vertical\":\n            parameters.orientation = DataLayoutOrientation.Vertical;\n            break;\n\n          case \"horizontal\":\n            parameters.orientation = DataLayoutOrientation.Horizontal;\n        }\n\n        if (this.option(\"edges.fromPointIndexExpr\") || this.option(\"edges.toPointIndexExpr\")) {\n          parameters.skipPointIndices = true;\n        }\n      }\n\n      parameters.autoSizeEnabled = !!this.option(\"nodes.autoSizeEnabled\");\n      return parameters;\n    }\n  }, {\n    key: \"_hasNodePositionExprs\",\n    value: function _hasNodePositionExprs() {\n      return this.option(\"nodes.topExpr\") && this.option(\"nodes.leftExpr\");\n    }\n  }, {\n    key: \"_getAutoZoomValue\",\n    value: function _getAutoZoomValue(option) {\n      var _getDiagram8 = getDiagram(),\n          AutoZoomMode = _getDiagram8.AutoZoomMode;\n\n      switch (option) {\n        case \"fitContent\":\n          return AutoZoomMode.FitContent;\n\n        case \"fitWidth\":\n          return AutoZoomMode.FitToWidth;\n\n        default:\n          return AutoZoomMode.Disabled;\n      }\n    }\n  }, {\n    key: \"_isBindingMode\",\n    value: function _isBindingMode() {\n      return this._nodesOption && this._nodesOption.hasItems() || this._edgesOption && this._edgesOption.hasItems();\n    }\n  }, {\n    key: \"_beginUpdateDiagram\",\n    value: function _beginUpdateDiagram() {\n      this._updateDiagramLockCount++;\n    }\n  }, {\n    key: \"_endUpdateDiagram\",\n    value: function _endUpdateDiagram() {\n      this._updateDiagramLockCount = Math.max(this._updateDiagramLockCount - 1, 0);\n\n      if (!this._updateDiagramLockCount) {\n        this._bindDiagramData();\n      }\n    }\n  }, {\n    key: \"_getCustomShapes\",\n    value: function _getCustomShapes() {\n      return this.option(\"customShapes\") || [];\n    }\n  }, {\n    key: \"_getToolboxGroups\",\n    value: function _getToolboxGroups() {\n      return DiagramToolboxManager.getGroups(this.option(\"toolbox.groups\"));\n    }\n  }, {\n    key: \"_updateAllCustomShapes\",\n    value: function _updateAllCustomShapes() {\n      this._diagramInstance.removeAllCustomShapes();\n\n      this._updateCustomShapes(this._getCustomShapes());\n    }\n  }, {\n    key: \"_updateCustomShapes\",\n    value: function _updateCustomShapes(customShapes, prevCustomShapes) {\n      var _this13 = this;\n\n      if (Array.isArray(prevCustomShapes)) {\n        this._diagramInstance.removeCustomShapes(prevCustomShapes.map(function (s) {\n          return s.type;\n        }));\n      }\n\n      if (Array.isArray(customShapes)) {\n        this._diagramInstance.addCustomShapes(customShapes.map(function (s) {\n          var templateOption = s.template || _this13.option(\"customShapeTemplate\");\n\n          var template = templateOption && _this13._getTemplate(templateOption);\n\n          var toolboxTemplateOption = s.toolboxTemplate || _this13.option(\"customShapeToolboxTemplate\");\n\n          var toolboxTemplate = toolboxTemplateOption && _this13._getTemplate(toolboxTemplateOption);\n\n          return {\n            category: s.category,\n            type: s.type,\n            baseType: s.baseType,\n            title: s.title,\n            svgUrl: s.backgroundImageUrl,\n            svgToolboxUrl: s.backgroundImageToolboxUrl,\n            svgLeft: s.backgroundImageLeft,\n            svgTop: s.backgroundImageTop,\n            svgWidth: s.backgroundImageWidth,\n            svgHeight: s.backgroundImageHeight,\n            defaultWidth: s.defaultWidth,\n            defaultHeight: s.defaultHeight,\n            toolboxWidthToHeightRatio: s.toolboxWidthToHeightRatio,\n            minWidth: s.minWidth,\n            minHeight: s.minHeight,\n            maxWidth: s.maxWidth,\n            maxHeight: s.maxHeight,\n            allowResize: s.allowResize,\n            defaultText: s.defaultText,\n            allowEditText: s.allowEditText,\n            textLeft: s.textLeft,\n            textTop: s.textTop,\n            textWidth: s.textWidth,\n            textHeight: s.textHeight,\n            defaultImageUrl: s.defaultImageUrl,\n            allowEditImage: s.allowEditImage,\n            imageLeft: s.imageLeft,\n            imageTop: s.imageTop,\n            imageWidth: s.imageWidth,\n            imageHeight: s.imageHeight,\n            connectionPoints: s.connectionPoints && s.connectionPoints.map(function (pt) {\n              return {\n                x: pt.x,\n                y: pt.y\n              };\n            }),\n            createTemplate: template && function (container, item) {\n              template.render({\n                model: _this13._nativeItemToDiagramItem(item),\n                container: getPublicElement($(container))\n              });\n            },\n            createToolboxTemplate: toolboxTemplate && function (container, item) {\n              toolboxTemplate.render({\n                model: _this13._nativeItemToDiagramItem(item),\n                container: getPublicElement($(container))\n              });\n            },\n            destroyTemplate: template && function (container) {\n              $(container).empty();\n            },\n            templateLeft: s.templateLeft,\n            templateTop: s.templateTop,\n            templateWidth: s.templateWidth,\n            templateHeight: s.templateHeight,\n            keepRatioOnAutoSize: s.keepRatioOnAutoSize\n          };\n        }));\n      }\n    }\n  }, {\n    key: \"_getViewport\",\n    value: function _getViewport() {\n      var $viewPort = this.$element().closest(\".dx-viewport\");\n      return $viewPort.length ? $viewPort : $(\"body\");\n    }\n  }, {\n    key: \"_onToggleFullScreen\",\n    value: function _onToggleFullScreen(fullScreen) {\n      if (this.toggleFullscreenLock > 0) {\n        return;\n      }\n\n      this._changeNativeFullscreen(fullScreen);\n\n      if (fullScreen) {\n        this._prevParent = this.$element().parent();\n        this._prevFullScreenZIndex = this.$element().css(\"zIndex\");\n        this._fullScreenZIndex = zIndexPool.create(Overlay.baseZIndex());\n        this.$element().css(\"zIndex\", this._fullScreenZIndex);\n        this.$element().appendTo(this._getViewport());\n      } else {\n        this.$element().appendTo(this._prevParent);\n\n        if (this._fullScreenZIndex) {\n          zIndexPool.remove(this._fullScreenZIndex);\n          this.$element().css(\"zIndex\", this._prevFullScreenZIndex);\n        }\n      }\n\n      this.$element().toggleClass(DIAGRAM_FULLSCREEN_CLASS, fullScreen);\n\n      this._processDiagramResize();\n\n      if (this._toolbox) {\n        this._toolbox.repaint();\n\n        this._toolbox._popup.option(\"propagateOutsideClick\", !fullScreen);\n      }\n\n      if (this._propertiesPanel) {\n        this._propertiesPanel.repaint();\n      }\n\n      if (this._historyToolbar) {\n        this._updateHistoryToolbarPosition();\n      }\n    }\n  }, {\n    key: \"_changeNativeFullscreen\",\n    value: function _changeNativeFullscreen(setModeOn) {\n      var window = getWindow();\n\n      if (window.self === window.top || setModeOn === this._inNativeFullscreen()) {\n        return;\n      }\n\n      if (setModeOn) {\n        this._subscribeFullscreenNativeChanged();\n      } else {\n        this._unsubscribeFullscreenNativeChanged();\n      }\n\n      this._setNativeFullscreen(setModeOn);\n    }\n  }, {\n    key: \"_setNativeFullscreen\",\n    value: function _setNativeFullscreen(on) {\n      var window = getWindow();\n      var document = window.self.document;\n      var body = window.self.document.body;\n\n      if (on) {\n        if (body.requestFullscreen) {\n          body.requestFullscreen();\n        } else if (body.mozRequestFullscreen) {\n          body.mozRequestFullscreen();\n        } else if (body.webkitRequestFullscreen) {\n          body.webkitRequestFullscreen();\n        } else if (body.msRequestFullscreen) {\n          body.msRequestFullscreen();\n        }\n      } else if (document.exitFullscreen) {\n        document.exitFullscreen();\n      } else if (document.mozCancelFullscreen) {\n        document.mozCancelFullscreen();\n      } else if (document.webkitExitFullscreen) {\n        document.webkitExitFullscreen();\n      } else if (document.msExitFullscreen) {\n        document.msExitFullscreen();\n      }\n    }\n  }, {\n    key: \"_inNativeFullscreen\",\n    value: function _inNativeFullscreen() {\n      var document = getWindow().document;\n      var fullscreenElement = document.fullscreenElement || document.msFullscreenElement || document.webkitFullscreenElement;\n      var isInFullscreen = fullscreenElement === document.body || document.webkitIsFullscreen;\n      return !!isInFullscreen;\n    }\n  }, {\n    key: \"_subscribeFullscreenNativeChanged\",\n    value: function _subscribeFullscreenNativeChanged() {\n      var document = getWindow().document;\n\n      var handler = this._onNativeFullscreenChangeHandler.bind(this);\n\n      eventsEngine.on(document, FULLSCREEN_CHANGE_EVENT_NAME, handler);\n      eventsEngine.on(document, IE_FULLSCREEN_CHANGE_EVENT_NAME, handler);\n      eventsEngine.on(document, WEBKIT_FULLSCREEN_CHANGE_EVENT_NAME, handler);\n      eventsEngine.on(document, MOZ_FULLSCREEN_CHANGE_EVENT_NAME, handler);\n    }\n  }, {\n    key: \"_unsubscribeFullscreenNativeChanged\",\n    value: function _unsubscribeFullscreenNativeChanged() {\n      var document = getWindow().document;\n      eventsEngine.off(document, FULLSCREEN_CHANGE_EVENT_NAME);\n      eventsEngine.off(document, IE_FULLSCREEN_CHANGE_EVENT_NAME);\n      eventsEngine.off(document, WEBKIT_FULLSCREEN_CHANGE_EVENT_NAME);\n      eventsEngine.off(document, MOZ_FULLSCREEN_CHANGE_EVENT_NAME);\n    }\n  }, {\n    key: \"_onNativeFullscreenChangeHandler\",\n    value: function _onNativeFullscreenChangeHandler() {\n      if (!this._inNativeFullscreen()) {\n        this._unsubscribeFullscreenNativeChanged();\n\n        this.option(\"fullScreen\", false);\n      }\n    }\n  }, {\n    key: \"_executeDiagramFullscreenCommand\",\n    value: function _executeDiagramFullscreenCommand(fullscreen) {\n      var _getDiagram9 = getDiagram(),\n          DiagramCommand = _getDiagram9.DiagramCommand;\n\n      this.toggleFullscreenLock++;\n\n      this._executeDiagramCommand(DiagramCommand.Fullscreen, fullscreen);\n\n      this.toggleFullscreenLock--;\n    }\n  }, {\n    key: \"_onShowContextMenu\",\n    value: function _onShowContextMenu(x, y, isTouchMode, selection) {\n      if (this._contextMenu) {\n        this._contextMenu._isTouchMode = isTouchMode;\n\n        this._contextMenu._show(x, y, selection);\n      }\n    }\n  }, {\n    key: \"_onHideContextMenu\",\n    value: function _onHideContextMenu() {\n      if (this._contextMenu) {\n        this._contextMenu._hide();\n      }\n    }\n  }, {\n    key: \"_onShowContextToolbox\",\n    value: function _onShowContextToolbox(x, y, side, category, callback) {\n      if (this._contextToolbox) {\n        this._contextToolbox._show(x, y, side, category, callback);\n      }\n    }\n  }, {\n    key: \"_onHideContextToolbox\",\n    value: function _onHideContextToolbox() {\n      if (this._contextToolbox) {\n        this._contextToolbox._hide();\n      }\n    }\n  }, {\n    key: \"_getDiagramUnitValue\",\n    value: function _getDiagramUnitValue(value) {\n      var _getDiagram10 = getDiagram(),\n          DiagramUnit = _getDiagram10.DiagramUnit;\n\n      switch (value) {\n        case \"in\":\n          return DiagramUnit.In;\n\n        case \"cm\":\n          return DiagramUnit.Cm;\n\n        case \"px\":\n          return DiagramUnit.Px;\n\n        default:\n          return DiagramUnit.In;\n      }\n    }\n  }, {\n    key: \"_updateReadOnlyState\",\n    value: function _updateReadOnlyState() {\n      var _getDiagram11 = getDiagram(),\n          DiagramCommand = _getDiagram11.DiagramCommand;\n\n      var readOnly = this.isReadOnlyMode();\n\n      this._executeDiagramCommand(DiagramCommand.ToggleReadOnly, readOnly);\n    }\n  }, {\n    key: \"_updateZoomLevelState\",\n    value: function _updateZoomLevelState() {\n      if (this.option(\"zoomLevel.items\")) {\n        this._updateZoomLevelItemsState();\n\n        var zoomLevel = this.option(\"zoomLevel.value\");\n\n        if (!zoomLevel) {\n          return;\n        }\n\n        var _getDiagram12 = getDiagram(),\n            DiagramCommand = _getDiagram12.DiagramCommand;\n\n        this._executeDiagramCommand(DiagramCommand.ZoomLevel, zoomLevel);\n      } else {\n        var _zoomLevel = this.option(\"zoomLevel.value\") || this.option(\"zoomLevel\");\n\n        if (!_zoomLevel) {\n          return;\n        }\n\n        var _getDiagram13 = getDiagram(),\n            _DiagramCommand = _getDiagram13.DiagramCommand;\n\n        this._executeDiagramCommand(_DiagramCommand.ZoomLevel, _zoomLevel);\n      }\n    }\n  }, {\n    key: \"_updateZoomLevelItemsState\",\n    value: function _updateZoomLevelItemsState() {\n      var zoomLevelItems = this.option(\"zoomLevel.items\");\n\n      if (!Array.isArray(zoomLevelItems)) {\n        return;\n      }\n\n      var _getDiagram14 = getDiagram(),\n          DiagramCommand = _getDiagram14.DiagramCommand;\n\n      this._executeDiagramCommand(DiagramCommand.ZoomLevelItems, zoomLevelItems);\n    }\n  }, {\n    key: \"_updateAutoZoomState\",\n    value: function _updateAutoZoomState() {\n      var _getDiagram15 = getDiagram(),\n          DiagramCommand = _getDiagram15.DiagramCommand;\n\n      this._executeDiagramCommand(DiagramCommand.SwitchAutoZoom, this._getAutoZoomValue(this.option(\"autoZoomMode\")));\n    }\n  }, {\n    key: \"_updateSimpleViewState\",\n    value: function _updateSimpleViewState() {\n      var _getDiagram16 = getDiagram(),\n          DiagramCommand = _getDiagram16.DiagramCommand;\n\n      this._executeDiagramCommand(DiagramCommand.ToggleSimpleView, this.option(\"simpleView\"));\n    }\n  }, {\n    key: \"_updateFullscreenState\",\n    value: function _updateFullscreenState() {\n      var fullscreen = this.option(\"fullScreen\");\n\n      this._executeDiagramFullscreenCommand(fullscreen);\n\n      this._onToggleFullScreen(fullscreen);\n    }\n  }, {\n    key: \"_updateShowGridState\",\n    value: function _updateShowGridState() {\n      var _getDiagram17 = getDiagram(),\n          DiagramCommand = _getDiagram17.DiagramCommand;\n\n      this._executeDiagramCommand(DiagramCommand.ShowGrid, this.option(\"showGrid\"));\n    }\n  }, {\n    key: \"_updateSnapToGridState\",\n    value: function _updateSnapToGridState() {\n      var _getDiagram18 = getDiagram(),\n          DiagramCommand = _getDiagram18.DiagramCommand;\n\n      this._executeDiagramCommand(DiagramCommand.SnapToGrid, this.option(\"snapToGrid\"));\n    }\n  }, {\n    key: \"_updateGridSizeState\",\n    value: function _updateGridSizeState() {\n      if (this.option(\"gridSize.items\")) {\n        this._updateGridSizeItemsState();\n\n        var gridSize = this.option(\"gridSize.value\");\n\n        if (!gridSize) {\n          return;\n        }\n\n        var _getDiagram19 = getDiagram(),\n            DiagramCommand = _getDiagram19.DiagramCommand;\n\n        this._executeDiagramCommand(DiagramCommand.GridSize, gridSize);\n      } else {\n        var _gridSize = this.option(\"gridSize.value\") || this.option(\"gridSize\");\n\n        if (!_gridSize) {\n          return;\n        }\n\n        var _getDiagram20 = getDiagram(),\n            _DiagramCommand2 = _getDiagram20.DiagramCommand;\n\n        this._executeDiagramCommand(_DiagramCommand2.GridSize, _gridSize);\n      }\n    }\n  }, {\n    key: \"_updateGridSizeItemsState\",\n    value: function _updateGridSizeItemsState() {\n      var gridSizeItems = this.option(\"gridSize.items\");\n\n      if (!Array.isArray(gridSizeItems)) {\n        return;\n      }\n\n      var _getDiagram21 = getDiagram(),\n          DiagramCommand = _getDiagram21.DiagramCommand;\n\n      this._executeDiagramCommand(DiagramCommand.GridSizeItems, gridSizeItems);\n    }\n  }, {\n    key: \"_updateUnitItems\",\n    value: function _updateUnitItems() {\n      var _getDiagram22 = getDiagram(),\n          DiagramLocalizationService = _getDiagram22.DiagramLocalizationService;\n\n      var items = this._getUnitItems();\n\n      if (this._unitItems !== items) {\n        this._unitItems = items;\n        DiagramLocalizationService.unitItems = items;\n      }\n    }\n  }, {\n    key: \"_getUnitItems\",\n    value: function _getUnitItems() {\n      var _getDiagram23 = getDiagram(),\n          DiagramUnit = _getDiagram23.DiagramUnit;\n\n      var items = {};\n      items[DiagramUnit.In] = messageLocalization.format(\"dxDiagram-unitIn\");\n      items[DiagramUnit.Cm] = messageLocalization.format(\"dxDiagram-unitCm\");\n      items[DiagramUnit.Px] = messageLocalization.format(\"dxDiagram-unitPx\");\n      return items;\n    }\n  }, {\n    key: \"_updateFormatUnitsMethod\",\n    value: function _updateFormatUnitsMethod() {\n      var _getDiagram24 = getDiagram(),\n          DiagramLocalizationService = _getDiagram24.DiagramLocalizationService;\n\n      DiagramLocalizationService.formatUnit = function (value) {\n        return numberLocalization.format(value);\n      };\n    }\n  }, {\n    key: \"_updateViewUnitsState\",\n    value: function _updateViewUnitsState() {\n      var _getDiagram25 = getDiagram(),\n          DiagramCommand = _getDiagram25.DiagramCommand;\n\n      this._executeDiagramCommand(DiagramCommand.ViewUnits, this._getDiagramUnitValue(this.option(\"viewUnits\")));\n    }\n  }, {\n    key: \"_updateUnitsState\",\n    value: function _updateUnitsState() {\n      var _getDiagram26 = getDiagram(),\n          DiagramCommand = _getDiagram26.DiagramCommand;\n\n      this._executeDiagramCommand(DiagramCommand.Units, this._getDiagramUnitValue(this.option(\"units\")));\n    }\n  }, {\n    key: \"_updatePageSizeState\",\n    value: function _updatePageSizeState() {\n      var pageSize = this.option(\"pageSize\");\n\n      if (!pageSize || !pageSize.width || !pageSize.height) {\n        return;\n      }\n\n      var _getDiagram27 = getDiagram(),\n          DiagramCommand = _getDiagram27.DiagramCommand;\n\n      this._executeDiagramCommand(DiagramCommand.PageSize, pageSize);\n    }\n  }, {\n    key: \"_updatePageSizeItemsState\",\n    value: function _updatePageSizeItemsState() {\n      var pageSizeItems = this.option(\"pageSize.items\");\n\n      if (!Array.isArray(pageSizeItems)) {\n        return;\n      }\n\n      var _getDiagram28 = getDiagram(),\n          DiagramCommand = _getDiagram28.DiagramCommand;\n\n      this._executeDiagramCommand(DiagramCommand.PageSizeItems, pageSizeItems);\n    }\n  }, {\n    key: \"_updatePageOrientationState\",\n    value: function _updatePageOrientationState() {\n      var _getDiagram29 = getDiagram(),\n          DiagramCommand = _getDiagram29.DiagramCommand;\n\n      this._executeDiagramCommand(DiagramCommand.PageLandscape, \"landscape\" === this.option(\"pageOrientation\"));\n    }\n  }, {\n    key: \"_updatePageColorState\",\n    value: function _updatePageColorState() {\n      var _getDiagram30 = getDiagram(),\n          DiagramCommand = _getDiagram30.DiagramCommand;\n\n      this._executeDiagramCommand(DiagramCommand.PageColor, this.option(\"pageColor\"));\n    }\n  }, {\n    key: \"_updateShapeTexts\",\n    value: function _updateShapeTexts() {\n      var _getDiagram31 = getDiagram(),\n          DiagramLocalizationService = _getDiagram31.DiagramLocalizationService;\n\n      var texts = this._getShapeTexts();\n\n      if (this._shapeTexts !== texts) {\n        this._shapeTexts = texts;\n        DiagramLocalizationService.shapeTexts = texts;\n      }\n    }\n  }, {\n    key: \"_getShapeTexts\",\n    value: function _getShapeTexts() {\n      var _getDiagram32 = getDiagram(),\n          ShapeTypes = _getDiagram32.ShapeTypes;\n\n      var texts = {};\n      texts[ShapeTypes.Text] = messageLocalization.format(\"dxDiagram-shapeText\");\n      texts[ShapeTypes.Rectangle] = messageLocalization.format(\"dxDiagram-shapeRectangle\");\n      texts[ShapeTypes.Ellipse] = messageLocalization.format(\"dxDiagram-shapeEllipse\");\n      texts[ShapeTypes.Cross] = messageLocalization.format(\"dxDiagram-shapeCross\");\n      texts[ShapeTypes.Triangle] = messageLocalization.format(\"dxDiagram-shapeTriangle\");\n      texts[ShapeTypes.Diamond] = messageLocalization.format(\"dxDiagram-shapeDiamond\");\n      texts[ShapeTypes.Heart] = messageLocalization.format(\"dxDiagram-shapeHeart\");\n      texts[ShapeTypes.Pentagon] = messageLocalization.format(\"dxDiagram-shapePentagon\");\n      texts[ShapeTypes.Hexagon] = messageLocalization.format(\"dxDiagram-shapeHexagon\");\n      texts[ShapeTypes.Octagon] = messageLocalization.format(\"dxDiagram-shapeOctagon\");\n      texts[ShapeTypes.Star] = messageLocalization.format(\"dxDiagram-shapeStar\");\n      texts[ShapeTypes.ArrowLeft] = messageLocalization.format(\"dxDiagram-shapeArrowLeft\");\n      texts[ShapeTypes.ArrowUp] = messageLocalization.format(\"dxDiagram-shapeArrowUp\");\n      texts[ShapeTypes.ArrowRight] = messageLocalization.format(\"dxDiagram-shapeArrowRight\");\n      texts[ShapeTypes.ArrowDown] = messageLocalization.format(\"dxDiagram-shapeArrowDown\");\n      texts[ShapeTypes.ArrowUpDown] = messageLocalization.format(\"dxDiagram-shapeArrowUpDown\");\n      texts[ShapeTypes.ArrowLeftRight] = messageLocalization.format(\"dxDiagram-shapeArrowLeftRight\");\n      texts[ShapeTypes.Process] = messageLocalization.format(\"dxDiagram-shapeProcess\");\n      texts[ShapeTypes.Decision] = messageLocalization.format(\"dxDiagram-shapeDecision\");\n      texts[ShapeTypes.Terminator] = messageLocalization.format(\"dxDiagram-shapeTerminator\");\n      texts[ShapeTypes.PredefinedProcess] = messageLocalization.format(\"dxDiagram-shapePredefinedProcess\");\n      texts[ShapeTypes.Document] = messageLocalization.format(\"dxDiagram-shapeDocument\");\n      texts[ShapeTypes.MultipleDocuments] = messageLocalization.format(\"dxDiagram-shapeMultipleDocuments\");\n      texts[ShapeTypes.ManualInput] = messageLocalization.format(\"dxDiagram-shapeManualInput\");\n      texts[ShapeTypes.Preparation] = messageLocalization.format(\"dxDiagram-shapePreparation\");\n      texts[ShapeTypes.Data] = messageLocalization.format(\"dxDiagram-shapeData\");\n      texts[ShapeTypes.Database] = messageLocalization.format(\"dxDiagram-shapeDatabase\");\n      texts[ShapeTypes.HardDisk] = messageLocalization.format(\"dxDiagram-shapeHardDisk\");\n      texts[ShapeTypes.InternalStorage] = messageLocalization.format(\"dxDiagram-shapeInternalStorage\");\n      texts[ShapeTypes.PaperTape] = messageLocalization.format(\"dxDiagram-shapePaperTape\");\n      texts[ShapeTypes.ManualOperation] = messageLocalization.format(\"dxDiagram-shapeManualOperation\");\n      texts[ShapeTypes.Delay] = messageLocalization.format(\"dxDiagram-shapeDelay\");\n      texts[ShapeTypes.StoredData] = messageLocalization.format(\"dxDiagram-shapeStoredData\");\n      texts[ShapeTypes.Display] = messageLocalization.format(\"dxDiagram-shapeDisplay\");\n      texts[ShapeTypes.Merge] = messageLocalization.format(\"dxDiagram-shapeMerge\");\n      texts[ShapeTypes.Connector] = messageLocalization.format(\"dxDiagram-shapeConnector\");\n      texts[ShapeTypes.Or] = messageLocalization.format(\"dxDiagram-shapeOr\");\n      texts[ShapeTypes.SummingJunction] = messageLocalization.format(\"dxDiagram-shapeSummingJunction\");\n      texts[ShapeTypes.Container] = messageLocalization.format(\"dxDiagram-shapeContainerDefaultText\");\n      texts[ShapeTypes.VerticalContainer] = messageLocalization.format(\"dxDiagram-shapeVerticalContainer\");\n      texts[ShapeTypes.HorizontalContainer] = messageLocalization.format(\"dxDiagram-shapeHorizontalContainer\");\n      texts[ShapeTypes.Card] = messageLocalization.format(\"dxDiagram-shapeCardDefaultText\");\n      texts[ShapeTypes.CardWithImageOnLeft] = messageLocalization.format(\"dxDiagram-shapeCardWithImageOnLeft\");\n      texts[ShapeTypes.CardWithImageOnTop] = messageLocalization.format(\"dxDiagram-shapeCardWithImageOnTop\");\n      texts[ShapeTypes.CardWithImageOnRight] = messageLocalization.format(\"dxDiagram-shapeCardWithImageOnRight\");\n      return texts;\n    }\n  }, {\n    key: \"_updateEventSubscriptionMethods\",\n    value: function _updateEventSubscriptionMethods() {\n      var _getDiagram33 = getDiagram(),\n          RenderHelper = _getDiagram33.RenderHelper;\n\n      RenderHelper.addEventListener = function (element, eventName, handler) {\n        eventsEngine.on(element, eventName, handler);\n      };\n\n      RenderHelper.removeEventListener = function (element, eventName, handler) {\n        eventsEngine.off(element, eventName, handler);\n      };\n    }\n  }, {\n    key: \"_updateDefaultItemProperties\",\n    value: function _updateDefaultItemProperties() {\n      if (this.option(\"defaultItemProperties.style\")) {\n        this._diagramInstance.setInitialStyleProperties(this.option(\"defaultItemProperties.style\"));\n      }\n\n      if (this.option(\"defaultItemProperties.textStyle\")) {\n        this._diagramInstance.setInitialTextStyleProperties(this.option(\"defaultItemProperties.textStyle\"));\n      }\n\n      this._diagramInstance.setInitialConnectorProperties({\n        lineOption: this._getConnectorLineOption(this.option(\"defaultItemProperties.connectorLineType\")),\n        startLineEnding: this._getConnectorLineEnding(this.option(\"defaultItemProperties.connectorLineStart\")),\n        endLineEnding: this._getConnectorLineEnding(this.option(\"defaultItemProperties.connectorLineEnd\"))\n      });\n\n      this._diagramInstance.applyShapeSizeSettings({\n        shapeMinWidth: this.option(\"defaultItemProperties.shapeMinWidth\"),\n        shapeMaxWidth: this.option(\"defaultItemProperties.shapeMaxWidth\"),\n        shapeMinHeight: this.option(\"defaultItemProperties.shapeMinHeight\"),\n        shapeMaxHeight: this.option(\"defaultItemProperties.shapeMaxHeight\")\n      });\n    }\n  }, {\n    key: \"_updateEditingSettings\",\n    value: function _updateEditingSettings() {\n      this._diagramInstance.applyOperationSettings({\n        addShape: this.option(\"editing.allowAddShape\"),\n        addShapeFromToolbox: this.option(\"editing.allowAddShape\"),\n        deleteShape: this.option(\"editing.allowDeleteShape\"),\n        deleteConnector: this.option(\"editing.allowDeleteConnector\"),\n        changeConnection: this.option(\"editing.allowChangeConnection\"),\n        changeConnectorPoints: this.option(\"editing.allowChangeConnectorPoints\"),\n        changeShapeText: this.option(\"editing.allowChangeShapeText\"),\n        changeConnectorText: this.option(\"editing.allowChangeConnectorText\"),\n        resizeShape: this.option(\"editing.allowResizeShape\"),\n        moveShape: this.option(\"editing.allowMoveShape\")\n      });\n    }\n  }, {\n    key: \"fitToContent\",\n    value: function fitToContent() {\n      var _getDiagram34 = getDiagram(),\n          DiagramCommand = _getDiagram34.DiagramCommand;\n\n      this._executeDiagramCommand(DiagramCommand.FitToScreen);\n    }\n  }, {\n    key: \"fitToWidth\",\n    value: function fitToWidth() {\n      var _getDiagram35 = getDiagram(),\n          DiagramCommand = _getDiagram35.DiagramCommand;\n\n      this._executeDiagramCommand(DiagramCommand.FitToWidth);\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this._captureFocus();\n    }\n  }, {\n    key: \"export\",\n    value: function _export() {\n      return this._getDiagramData();\n    }\n  }, {\n    key: \"exportTo\",\n    value: function exportTo(format, callback) {\n      var command = this._getDiagramExportToCommand(format);\n\n      this._executeDiagramCommand(command, callback);\n    }\n  }, {\n    key: \"_getDiagramExportToCommand\",\n    value: function _getDiagramExportToCommand(format) {\n      var _getDiagram36 = getDiagram(),\n          DiagramCommand = _getDiagram36.DiagramCommand;\n\n      switch (format) {\n        case \"png\":\n          return DiagramCommand.ExportPng;\n\n        case \"jpg\":\n          return DiagramCommand.ExportJpg;\n\n        default:\n          return DiagramCommand.ExportSvg;\n      }\n    }\n  }, {\n    key: \"import\",\n    value: function _import(data, updateExistingItemsOnly) {\n      this._setDiagramData(data, updateExistingItemsOnly);\n\n      this._raiseDataChangeAction();\n    }\n  }, {\n    key: \"updateToolbox\",\n    value: function updateToolbox() {\n      this._diagramInstance && this._diagramInstance.refreshToolbox();\n\n      if (this._toolbox) {\n        this._toolbox.updateTooltips();\n\n        this._toolbox.updateFilter();\n\n        this._toolbox.updateMaxHeight();\n      }\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function _getDefaultOptions() {\n      return extend(_get(_getPrototypeOf(Diagram.prototype), \"_getDefaultOptions\", this).call(this), {\n        readOnly: false,\n        zoomLevel: DIAGRAM_DEFAULT_ZOOMLEVEL,\n        simpleView: false,\n        autoZoomMode: DIAGRAM_DEFAULT_AUTOZOOM_MODE,\n        fullScreen: false,\n        showGrid: true,\n        snapToGrid: true,\n        units: DIAGRAM_DEFAULT_UNIT,\n        viewUnits: DIAGRAM_DEFAULT_UNIT,\n        pageOrientation: DIAGRAM_DEFAULT_PAGE_ORIENTATION,\n        pageColor: DIAGRAM_DEFAULT_PAGE_COLOR,\n        hasChanges: false,\n        nodes: {\n          dataSource: null,\n          keyExpr: \"id\",\n          customDataExpr: void 0,\n          lockedExpr: void 0,\n          styleExpr: void 0,\n          textStyleExpr: void 0,\n          zIndexExpr: void 0,\n          typeExpr: \"type\",\n          textExpr: \"text\",\n          imageUrlExpr: void 0,\n          parentKeyExpr: void 0,\n          itemsExpr: void 0,\n          leftExpr: void 0,\n          topExpr: void 0,\n          widthExpr: void 0,\n          heightExpr: void 0,\n          containerKeyExpr: \"containerKey\",\n          containerChildrenExpr: void 0,\n          autoLayout: \"auto\",\n          autoSizeEnabled: true\n        },\n        edges: {\n          dataSource: null,\n          keyExpr: \"id\",\n          customDataExpr: void 0,\n          lockedExpr: void 0,\n          styleExpr: void 0,\n          textStyleExpr: void 0,\n          zIndexExpr: void 0,\n          fromExpr: \"from\",\n          fromPointIndexExpr: void 0,\n          toExpr: \"to\",\n          toPointIndexExpr: void 0,\n          pointsExpr: void 0,\n          textExpr: void 0,\n          lineTypeExpr: void 0,\n          fromLineEndExpr: void 0,\n          toLineEndExpr: void 0\n        },\n        customShapes: [],\n        toolbox: {\n          visibility: \"auto\",\n          shapeIconsPerRow: DIAGRAM_TOOLBOX_SHAPES_PER_ROW,\n          showSearch: true\n        },\n        mainToolbar: {\n          visible: false\n        },\n        historyToolbar: {\n          visible: true\n        },\n        viewToolbar: {\n          visible: true\n        },\n        contextMenu: {\n          enabled: true\n        },\n        contextToolbox: {\n          enabled: true,\n          shapeIconsPerRow: DIAGRAM_CONTEXT_TOOLBOX_SHAPES_PER_ROW,\n          width: DIAGRAM_CONTEXT_TOOLBOX_DEFAULT_WIDTH\n        },\n        propertiesPanel: {\n          visibility: \"auto\"\n        },\n        defaultItemProperties: {\n          connectorLineType: \"orthogonal\",\n          connectorLineStart: \"none\",\n          connectorLineEnd: \"arrow\"\n        },\n        editing: {\n          allowAddShape: true,\n          allowDeleteShape: true,\n          allowDeleteConnector: true,\n          allowChangeConnection: true,\n          allowChangeConnectorPoints: true,\n          allowChangeShapeText: true,\n          allowChangeConnectorText: true,\n          allowResizeShape: true,\n          allowMoveShape: true\n        },\n        export: {\n          fileName: \"Diagram\",\n          proxyUrl: void 0\n        },\n        onItemClick: null,\n        onItemDblClick: null,\n        onSelectionChanged: null,\n        onRequestEditOperation: null,\n        onRequestLayoutUpdate: null\n      });\n    }\n  }, {\n    key: \"_raiseDataChangeAction\",\n    value: function _raiseDataChangeAction() {\n      if (this._initialized) {\n        this.option(\"hasChanges\", true);\n      }\n    }\n  }, {\n    key: \"_raiseEdgeInsertedAction\",\n    value: function _raiseEdgeInsertedAction(data, callback, errorCallback) {\n      if (this._edgesOption) {\n        this._edgesOption.insert(data, callback, errorCallback);\n      }\n    }\n  }, {\n    key: \"_raiseEdgeUpdatedAction\",\n    value: function _raiseEdgeUpdatedAction(key, data, callback, errorCallback) {\n      if (this._edgesOption) {\n        this._edgesOption.update(key, data, callback, errorCallback);\n      }\n    }\n  }, {\n    key: \"_raiseEdgeRemovedAction\",\n    value: function _raiseEdgeRemovedAction(key, data, callback, errorCallback) {\n      if (this._edgesOption) {\n        this._edgesOption.remove(key, data, callback, errorCallback);\n      }\n    }\n  }, {\n    key: \"_raiseNodeInsertedAction\",\n    value: function _raiseNodeInsertedAction(data, callback, errorCallback) {\n      if (this._nodesOption) {\n        this._nodesOption.insert(data, callback, errorCallback);\n      }\n    }\n  }, {\n    key: \"_raiseNodeUpdatedAction\",\n    value: function _raiseNodeUpdatedAction(key, data, callback, errorCallback) {\n      if (this._nodesOption) {\n        this._nodesOption.update(key, data, callback, errorCallback);\n      }\n    }\n  }, {\n    key: \"_raiseNodeRemovedAction\",\n    value: function _raiseNodeRemovedAction(key, data, callback, errorCallback) {\n      if (this._nodesOption) {\n        this._nodesOption.remove(key, data, callback, errorCallback);\n      }\n    }\n  }, {\n    key: \"_raiseToolboxDragStart\",\n    value: function _raiseToolboxDragStart() {\n      if (this._toolbox) {\n        this._toolbox._raiseToolboxDragStart();\n\n        if (this.isMobileScreenSize()) {\n          this._toolbox.hide();\n\n          this._toolboxDragHidden = true;\n        }\n      }\n    }\n  }, {\n    key: \"_raiseToolboxDragEnd\",\n    value: function _raiseToolboxDragEnd() {\n      if (this._toolbox) {\n        this._toolbox._raiseToolboxDragEnd();\n\n        if (this._toolboxDragHidden) {\n          this._toolbox.show();\n\n          delete this._toolboxDragHidden;\n        }\n      }\n    }\n  }, {\n    key: \"_raiseTextInputStart\",\n    value: function _raiseTextInputStart() {\n      this._textInputStarted = true;\n\n      if (this._propertiesPanel) {\n        if (this.isMobileScreenSize() && this._propertiesPanel.isVisible()) {\n          this._propertiesPanel.hide();\n\n          this._propertiesPanelTextInputHidden = true;\n        }\n      }\n\n      if (this._toolbox) {\n        if (this.isMobileScreenSize() && this._toolbox.isVisible()) {\n          this._toolbox.hide();\n\n          this._toolboxTextInputHidden = true;\n        }\n      }\n    }\n  }, {\n    key: \"_raiseTextInputEnd\",\n    value: function _raiseTextInputEnd() {\n      if (this._propertiesPanel) {\n        if (this._propertiesPanelTextInputHidden) {\n          this._propertiesPanel.show();\n\n          delete this._propertiesPanelTextInputHidden;\n        }\n      }\n\n      if (this._toolbox) {\n        if (this._toolboxTextInputHidden) {\n          this._toolbox.show();\n\n          delete this._toolboxTextInputHidden;\n        }\n      }\n\n      this._textInputStarted = false;\n    }\n  }, {\n    key: \"_createItemClickAction\",\n    value: function _createItemClickAction() {\n      this._itemClickAction = this._createActionByOption(\"onItemClick\");\n    }\n  }, {\n    key: \"_createItemDblClickAction\",\n    value: function _createItemDblClickAction() {\n      this._itemDblClickAction = this._createActionByOption(\"onItemDblClick\");\n    }\n  }, {\n    key: \"_createSelectionChangedAction\",\n    value: function _createSelectionChangedAction() {\n      this._selectionChangedAction = this._createActionByOption(\"onSelectionChanged\");\n    }\n  }, {\n    key: \"_createRequestEditOperationAction\",\n    value: function _createRequestEditOperationAction() {\n      this._requestEditOperationAction = this._createActionByOption(\"onRequestEditOperation\");\n    }\n  }, {\n    key: \"_createRequestLayoutUpdateAction\",\n    value: function _createRequestLayoutUpdateAction() {\n      this._requestLayoutUpdateAction = this._createActionByOption(\"onRequestLayoutUpdate\");\n    }\n  }, {\n    key: \"_createCustomCommand\",\n    value: function _createCustomCommand() {\n      this._customCommandAction = this._createActionByOption(\"onCustomCommand\");\n    }\n  }, {\n    key: \"_raiseItemClickAction\",\n    value: function _raiseItemClickAction(nativeItem) {\n      if (!this._itemClickAction) {\n        this._createItemClickAction();\n      }\n\n      this._itemClickAction({\n        item: this._nativeItemToDiagramItem(nativeItem)\n      });\n    }\n  }, {\n    key: \"_raiseItemDblClickAction\",\n    value: function _raiseItemDblClickAction(nativeItem) {\n      if (!this._itemDblClickAction) {\n        this._createItemDblClickAction();\n      }\n\n      this._itemDblClickAction({\n        item: this._nativeItemToDiagramItem(nativeItem)\n      });\n    }\n  }, {\n    key: \"_raiseSelectionChanged\",\n    value: function _raiseSelectionChanged(nativeItems) {\n      if (!this._selectionChangedAction) {\n        this._createSelectionChangedAction();\n      }\n\n      this._selectionChangedAction({\n        items: nativeItems.map(this._nativeItemToDiagramItem.bind(this))\n      });\n    }\n  }, {\n    key: \"_raiseRequestEditOperation\",\n    value: function _raiseRequestEditOperation(operation, args) {\n      if (!this._requestEditOperationAction) {\n        this._createRequestEditOperationAction();\n      }\n\n      var eventArgs = this._getRequestEditOperationEventArgs(operation, args);\n\n      this._requestEditOperationAction(eventArgs);\n\n      args.allowed = eventArgs.allowed;\n    }\n  }, {\n    key: \"_getModelOperation\",\n    value: function _getModelOperation(operation) {\n      var _getDiagram37 = getDiagram(),\n          DiagramModelOperation = _getDiagram37.DiagramModelOperation;\n\n      switch (operation) {\n        case DiagramModelOperation.AddShape:\n          return \"addShape\";\n\n        case DiagramModelOperation.AddShapeFromToolbox:\n          return \"addShapeFromToolbox\";\n\n        case DiagramModelOperation.DeleteShape:\n          return \"deleteShape\";\n\n        case DiagramModelOperation.DeleteConnector:\n          return \"deleteConnector\";\n\n        case DiagramModelOperation.ChangeConnection:\n          return \"changeConnection\";\n\n        case DiagramModelOperation.ChangeConnectorPoints:\n          return \"changeConnectorPoints\";\n\n        case DiagramModelOperation.BeforeChangeShapeText:\n          return \"beforeChangeShapeText\";\n\n        case DiagramModelOperation.ChangeShapeText:\n          return \"changeShapeText\";\n\n        case DiagramModelOperation.BeforeChangeConnectorText:\n          return \"beforeChangeConnectorText\";\n\n        case DiagramModelOperation.ChangeConnectorText:\n          return \"changeConnectorText\";\n\n        case DiagramModelOperation.ResizeShape:\n          return \"resizeShape\";\n\n        case DiagramModelOperation.MoveShape:\n          return \"moveShape\";\n      }\n    }\n  }, {\n    key: \"_getRequestEditOperationEventArgs\",\n    value: function _getRequestEditOperationEventArgs(operation, args) {\n      var _getDiagram38 = getDiagram(),\n          DiagramModelOperation = _getDiagram38.DiagramModelOperation,\n          ConnectorPosition = _getDiagram38.ConnectorPosition;\n\n      var eventArgs = {\n        operation: this._getModelOperation(operation),\n        allowed: args.allowed,\n        updateUI: args.updateUI,\n        reason: args.updateUI ? \"checkUIElementAvailability\" : \"modelModification\"\n      };\n\n      switch (operation) {\n        case DiagramModelOperation.AddShape:\n          eventArgs.args = {\n            shape: args.shape && this._nativeItemToDiagramItem(args.shape),\n            position: args.position && {\n              x: args.position.x,\n              y: args.position.y\n            }\n          };\n          break;\n\n        case DiagramModelOperation.AddShapeFromToolbox:\n          eventArgs.args = {\n            shapeType: args.shapeType\n          };\n          break;\n\n        case DiagramModelOperation.DeleteShape:\n          eventArgs.args = {\n            shape: args.shape && this._nativeItemToDiagramItem(args.shape)\n          };\n          break;\n\n        case DiagramModelOperation.DeleteConnector:\n          eventArgs.args = {\n            connector: args.connector && this._nativeItemToDiagramItem(args.connector)\n          };\n          break;\n\n        case DiagramModelOperation.ChangeConnection:\n          eventArgs.args = {\n            newShape: args.shape && this._nativeItemToDiagramItem(args.shape),\n            oldShape: args.oldShape && this._nativeItemToDiagramItem(args.oldShape),\n            connector: args.connector && this._nativeItemToDiagramItem(args.connector),\n            connectionPointIndex: args.connectionPointIndex,\n            connectorPosition: args.position === ConnectorPosition.Begin ? \"start\" : \"end\"\n          };\n          break;\n\n        case DiagramModelOperation.ChangeConnectorPoints:\n          eventArgs.args = {\n            connector: args.connector && this._nativeItemToDiagramItem(args.connector),\n            newPoints: args.points && args.points.map(function (pt) {\n              return {\n                x: pt.x,\n                y: pt.y\n              };\n            }),\n            oldPoints: args.oldPoints && args.oldPoints.map(function (pt) {\n              return {\n                x: pt.x,\n                y: pt.y\n              };\n            })\n          };\n          break;\n\n        case DiagramModelOperation.BeforeChangeShapeText:\n          eventArgs.args = {\n            shape: args.shape && this._nativeItemToDiagramItem(args.shape)\n          };\n          break;\n\n        case DiagramModelOperation.ChangeShapeText:\n          eventArgs.args = {\n            shape: args.shape && this._nativeItemToDiagramItem(args.shape),\n            text: args.text\n          };\n          break;\n\n        case DiagramModelOperation.BeforeChangeConnectorText:\n          eventArgs.args = {\n            connector: args.connector && this._nativeItemToDiagramItem(args.connector),\n            index: args.index\n          };\n          break;\n\n        case DiagramModelOperation.ChangeConnectorText:\n          eventArgs.args = {\n            connector: args.connector && this._nativeItemToDiagramItem(args.connector),\n            index: args.index,\n            text: args.text\n          };\n          break;\n\n        case DiagramModelOperation.ResizeShape:\n          eventArgs.args = {\n            shape: args.shape && this._nativeItemToDiagramItem(args.shape),\n            newSize: args.size && {\n              width: args.size.width,\n              height: args.size.height\n            },\n            oldSize: args.oldSize && {\n              width: args.oldSize.width,\n              height: args.oldSize.height\n            }\n          };\n          break;\n\n        case DiagramModelOperation.MoveShape:\n          eventArgs.args = {\n            shape: args.shape && this._nativeItemToDiagramItem(args.shape),\n            newPosition: args.position && {\n              x: args.position.x,\n              y: args.position.y\n            },\n            oldPosition: args.oldPosition && {\n              x: args.oldPosition.x,\n              y: args.oldPosition.y\n            }\n          };\n      }\n\n      return eventArgs;\n    }\n  }, {\n    key: \"_nativeItemToDiagramItem\",\n    value: function _nativeItemToDiagramItem(nativeItem) {\n      var _getDiagram39 = getDiagram(),\n          NativeShape = _getDiagram39.NativeShape;\n\n      var createMethod = nativeItem instanceof NativeShape ? this._nativeShapeToDiagramShape.bind(this) : this._nativeConnectorToDiagramConnector.bind(this);\n      return extend({\n        id: nativeItem.id,\n        key: nativeItem.key,\n        dataItem: void 0\n      }, createMethod(nativeItem));\n    }\n  }, {\n    key: \"_nativeShapeToDiagramShape\",\n    value: function _nativeShapeToDiagramShape(nativeShape) {\n      return {\n        dataItem: this._nodesOption && this._nodesOption.findItem(nativeShape.key),\n        itemType: \"shape\",\n        text: nativeShape.text,\n        type: nativeShape.type,\n        position: {\n          x: nativeShape.position.x,\n          y: nativeShape.position.y\n        },\n        size: {\n          width: nativeShape.size.width,\n          height: nativeShape.size.height\n        },\n        attachedConnectorIds: nativeShape.attachedConnectorIds,\n        containerId: nativeShape.containerId,\n        containerChildItemIds: nativeShape.containerChildItemIds,\n        containerExpanded: nativeShape.containerExpanded\n      };\n    }\n  }, {\n    key: \"_nativeConnectorToDiagramConnector\",\n    value: function _nativeConnectorToDiagramConnector(nativeConnector) {\n      return {\n        dataItem: this._edgesOption && this._edgesOption.findItem(nativeConnector.key),\n        itemType: \"connector\",\n        texts: nativeConnector.texts,\n        fromKey: nativeConnector.fromKey,\n        toKey: nativeConnector.toKey,\n        fromId: nativeConnector.fromId,\n        fromPointIndex: nativeConnector.fromPointIndex,\n        toId: nativeConnector.toId,\n        toPointIndex: nativeConnector.toPointIndex,\n        points: nativeConnector.points.map(function (pt) {\n          return {\n            x: pt.x,\n            y: pt.y\n          };\n        })\n      };\n    }\n  }, {\n    key: \"getItemByKey\",\n    value: function getItemByKey(key) {\n      var nativeItem = this._diagramInstance && this._diagramInstance.getNativeItemByDataKey(key);\n\n      return nativeItem && this._nativeItemToDiagramItem(nativeItem);\n    }\n  }, {\n    key: \"getItemById\",\n    value: function getItemById(id) {\n      var nativeItem = this._diagramInstance && this._diagramInstance.getNativeItemByKey(id);\n\n      return nativeItem && this._nativeItemToDiagramItem(nativeItem);\n    }\n  }, {\n    key: \"getItems\",\n    value: function getItems() {\n      var _this14 = this;\n\n      return this._diagramInstance.getNativeItems().map(function (nativeItem) {\n        return nativeItem && _this14._nativeItemToDiagramItem(nativeItem);\n      });\n    }\n  }, {\n    key: \"getSelectedItems\",\n    value: function getSelectedItems() {\n      var _this15 = this;\n\n      return this._diagramInstance.getNativeSelectedItems().map(function (nativeItem) {\n        return nativeItem && _this15._nativeItemToDiagramItem(nativeItem);\n      });\n    }\n  }, {\n    key: \"setSelectedItems\",\n    value: function setSelectedItems(items) {\n      return this._diagramInstance.setSelectedItems(items.map(function (item) {\n        return item.id;\n      }));\n    }\n  }, {\n    key: \"scrollToItem\",\n    value: function scrollToItem(item) {\n      return this._diagramInstance.scrollToItems([item.id]);\n    }\n  }, {\n    key: \"_invalidateContextMenuCommands\",\n    value: function _invalidateContextMenuCommands() {\n      if (this._contextMenu) {\n        this._contextMenu.option({\n          commands: this.option(\"contextMenu.commands\")\n        });\n      }\n    }\n  }, {\n    key: \"_invalidateMainToolbarCommands\",\n    value: function _invalidateMainToolbarCommands() {\n      if (this._mainToolbar) {\n        this._mainToolbar.option({\n          commands: this.option(\"mainToolbar.commands\")\n        });\n      }\n    }\n  }, {\n    key: \"_invalidateHistoryToolbarCommands\",\n    value: function _invalidateHistoryToolbarCommands() {\n      if (this._historyToolbar) {\n        this._historyToolbar.option({\n          commands: this.option(\"historyToolbar.commands\")\n        });\n      }\n    }\n  }, {\n    key: \"_invalidateViewToolbarCommands\",\n    value: function _invalidateViewToolbarCommands() {\n      if (this._viewToolbar) {\n        this._viewToolbar.option({\n          commands: this.option(\"viewToolbar.commands\")\n        });\n      }\n    }\n  }, {\n    key: \"_invalidateToolboxGroups\",\n    value: function _invalidateToolboxGroups() {\n      if (this._toolbox) {\n        this._toolbox.option({\n          toolboxGroups: this._getToolboxGroups()\n        });\n      }\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function _optionChanged(args) {\n      if (this.optionsUpdateBar.isUpdateLocked()) {\n        return;\n      }\n\n      this.optionsUpdateBar.beginUpdate();\n\n      try {\n        this._optionChangedCore(args);\n      } finally {\n        this.optionsUpdateBar.endUpdate();\n      }\n    }\n  }, {\n    key: \"_optionChangedCore\",\n    value: function _optionChangedCore(args) {\n      var _this16 = this;\n\n      switch (args.name) {\n        case \"readOnly\":\n        case \"disabled\":\n          this._updateReadOnlyState();\n\n          this._invalidate();\n\n          break;\n\n        case \"zoomLevel\":\n          if (\"zoomLevel\" === args.fullName || \"zoomLevel.items\" === args.fullName || \"zoomLevel.value\" === args.fullName) {\n            this._updateZoomLevelState();\n          }\n\n          break;\n\n        case \"autoZoomMode\":\n          this._updateAutoZoomState();\n\n          break;\n\n        case \"simpleView\":\n          this._updateSimpleViewState();\n\n          break;\n\n        case \"useNativeScrolling\":\n          this._invalidate();\n\n          break;\n\n        case \"fullScreen\":\n          this._updateFullscreenState();\n\n          break;\n\n        case \"showGrid\":\n          this._updateShowGridState();\n\n          break;\n\n        case \"snapToGrid\":\n          this._updateSnapToGridState();\n\n          break;\n\n        case \"gridSize\":\n          if (\"gridSize\" === args.fullName || \"gridSize.items\" === args.fullName || \"gridSize.value\" === args.fullName) {\n            this._updateGridSizeState();\n          }\n\n          break;\n\n        case \"viewUnits\":\n          this._updateViewUnitsState();\n\n          break;\n\n        case \"units\":\n          this._updateUnitsState();\n\n          break;\n\n        case \"pageSize\":\n          if (\"pageSize\" === args.fullName || \"pageSize.items\" === args.fullName) {\n            this._updatePageSizeItemsState();\n          }\n\n          if (\"pageSize\" === args.fullName || \"pageSize.width\" === args.fullName || \"pageSize.height\" === args.fullName) {\n            this._updatePageSizeState();\n          }\n\n          break;\n\n        case \"pageOrientation\":\n          this._updatePageOrientationState();\n\n          break;\n\n        case \"pageColor\":\n          this._updatePageColorState();\n\n          break;\n\n        case \"nodes\":\n          if (0 === args.fullName.indexOf(\"nodes.autoLayout\")) {\n            this._refreshDataSources();\n          } else {\n            this._refreshNodesDataSource();\n          }\n\n          break;\n\n        case \"edges\":\n          this._refreshEdgesDataSource();\n\n          break;\n\n        case \"customShapes\":\n          if (args.fullName !== args.name) {\n            this._updateAllCustomShapes();\n          } else {\n            this._updateCustomShapes(args.value, args.previousValue);\n          }\n\n          this._invalidate();\n\n          break;\n\n        case \"contextMenu\":\n          if (\"contextMenu.commands\" === args.fullName) {\n            this._invalidateContextMenuCommands();\n          } else {\n            this._invalidate();\n          }\n\n          break;\n\n        case \"contextToolbox\":\n        case \"propertiesPanel\":\n          this._invalidate();\n\n          break;\n\n        case \"toolbox\":\n          if (\"toolbox.groups\" === args.fullName) {\n            this._invalidateToolboxGroups();\n          } else {\n            this._invalidate();\n          }\n\n          break;\n\n        case \"mainToolbar\":\n          if (\"mainToolbar.commands\" === args.fullName) {\n            this._invalidateMainToolbarCommands();\n          } else {\n            this._invalidate();\n          }\n\n          break;\n\n        case \"historyToolbar\":\n          if (\"historyToolbar.commands\" === args.fullName) {\n            this._invalidateHistoryToolbarCommands();\n          } else {\n            this._invalidate();\n          }\n\n          break;\n\n        case \"viewToolbar\":\n          if (\"viewToolbar.commands\" === args.fullName) {\n            this._invalidateViewToolbarCommands();\n          } else {\n            this._invalidate();\n          }\n\n          break;\n\n        case \"onItemClick\":\n          this._createItemClickAction();\n\n          break;\n\n        case \"onItemDblClick\":\n          this._createItemDblClickAction();\n\n          break;\n\n        case \"onSelectionChanged\":\n          this._createSelectionChangedAction();\n\n          break;\n\n        case \"onRequestEditOperation\":\n          this._createRequestEditOperationAction();\n\n          break;\n\n        case \"onRequestLayoutUpdate\":\n          this._createRequestLayoutUpdateAction();\n\n          break;\n\n        case \"onCustomCommand\":\n          this._createCustomCommand();\n\n          break;\n\n        case \"defaultItemProperties\":\n          this._updateDefaultItemProperties();\n\n          break;\n\n        case \"editing\":\n          this._updateEditingSettings();\n\n          break;\n\n        case \"export\":\n          this._toolbars.forEach(function (toolbar) {\n            toolbar.option(\"export\", _this16.option(\"export\"));\n          });\n\n          if (this._contextMenu) {\n            this._contextMenu.option(\"export\", this.option(\"export\"));\n          }\n\n          break;\n\n        case \"hasChanges\":\n          break;\n\n        default:\n          _get(_getPrototypeOf(Diagram.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }]);\n\n  return Diagram;\n}(Widget);\n\nregisterComponent(\"dxDiagram\", Diagram);\nexport default Diagram;","map":null,"metadata":{},"sourceType":"module"}