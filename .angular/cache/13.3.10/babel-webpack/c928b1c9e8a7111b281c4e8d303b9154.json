{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/calendar/ui.calendar.views.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport BaseView from \"./ui.calendar.base_view\";\nimport { noop } from \"../../core/utils/common\";\nimport dateUtils from \"../../core/utils/date\";\nimport { extend } from \"../../core/utils/extend\";\nimport dateLocalization from \"../../localization/date\";\nimport dateSerialization from \"../../core/utils/date_serialization\";\nimport { isDefined } from \"../../core/utils/type\";\nvar CALENDAR_OTHER_MONTH_CLASS = \"dx-calendar-other-month\";\nvar CALENDAR_OTHER_VIEW_CLASS = \"dx-calendar-other-view\";\nvar Views = {\n  month: BaseView.inherit({\n    _getViewName: function _getViewName() {\n      return \"month\";\n    },\n    _getDefaultOptions: function _getDefaultOptions() {\n      return extend(this.callBase(), {\n        firstDayOfWeek: void 0,\n        rowCount: 6,\n        colCount: 7\n      });\n    },\n    _renderImpl: function _renderImpl() {\n      this.callBase();\n\n      this._renderHeader();\n    },\n    _renderBody: function _renderBody() {\n      this.callBase();\n\n      this._$table.find(\".\".concat(CALENDAR_OTHER_VIEW_CLASS)).addClass(CALENDAR_OTHER_MONTH_CLASS);\n    },\n    _renderFocusTarget: noop,\n    getCellAriaLabel: function getCellAriaLabel(date) {\n      return dateLocalization.format(date, \"longdate\");\n    },\n    _renderHeader: function _renderHeader() {\n      var $headerRow = $(\"<tr>\");\n      var $header = $(\"<thead>\").append($headerRow);\n\n      this._$table.prepend($header);\n\n      for (var colIndex = 0, colCount = this.option(\"colCount\"); colIndex < colCount; colIndex++) {\n        this._renderHeaderCell(colIndex, $headerRow);\n      }\n    },\n    _renderHeaderCell: function _renderHeaderCell(cellIndex, $headerRow) {\n      var _this$_getDayCaption = this._getDayCaption(this._getFirstDayOfWeek() + cellIndex),\n          fullCaption = _this$_getDayCaption.full,\n          abbrCaption = _this$_getDayCaption.abbreviated;\n\n      var $cell = $(\"<th>\").attr({\n        scope: \"col\",\n        abbr: fullCaption\n      }).text(abbrCaption);\n\n      this._appendCell($headerRow, $cell);\n    },\n    getNavigatorCaption: function getNavigatorCaption() {\n      return dateLocalization.format(this.option(\"date\"), \"monthandyear\");\n    },\n    _isTodayCell: function _isTodayCell(cellDate) {\n      var today = this.option(\"_todayDate\")();\n      return dateUtils.sameDate(cellDate, today);\n    },\n    _isDateOutOfRange: function _isDateOutOfRange(cellDate) {\n      var minDate = this.option(\"min\");\n      var maxDate = this.option(\"max\");\n      return !dateUtils.dateInRange(cellDate, minDate, maxDate, \"date\");\n    },\n    _isOtherView: function _isOtherView(cellDate) {\n      return cellDate.getMonth() !== this.option(\"date\").getMonth();\n    },\n    _getCellText: function _getCellText(cellDate) {\n      return dateLocalization.format(cellDate, \"d\");\n    },\n    _getDayCaption: function _getDayCaption(day) {\n      var daysInWeek = this.option(\"colCount\");\n      var dayIndex = day % daysInWeek;\n      return {\n        full: dateLocalization.getDayNames()[dayIndex],\n        abbreviated: dateLocalization.getDayNames(\"abbreviated\")[dayIndex]\n      };\n    },\n    _getFirstCellData: function _getFirstCellData() {\n      var firstDay = dateUtils.getFirstMonthDate(this.option(\"date\"));\n      var firstMonthDayOffset = this._getFirstDayOfWeek() - firstDay.getDay();\n      var daysInWeek = this.option(\"colCount\");\n\n      if (firstMonthDayOffset >= 0) {\n        firstMonthDayOffset -= daysInWeek;\n      }\n\n      firstDay.setDate(firstDay.getDate() + firstMonthDayOffset);\n      return firstDay;\n    },\n    _getNextCellData: function _getNextCellData(date) {\n      date = new Date(date);\n      date.setDate(date.getDate() + 1);\n      return date;\n    },\n    _getFirstDayOfWeek: function _getFirstDayOfWeek() {\n      return isDefined(this.option(\"firstDayOfWeek\")) ? this.option(\"firstDayOfWeek\") : dateLocalization.firstDayOfWeekIndex();\n    },\n    _getCellByDate: function _getCellByDate(date) {\n      return this._$table.find(\"td[data-value='\".concat(dateSerialization.serializeDate(date, dateUtils.getShortDateFormat()), \"']\"));\n    },\n    isBoundary: function isBoundary(date) {\n      return dateUtils.sameMonthAndYear(date, this.option(\"min\")) || dateUtils.sameMonthAndYear(date, this.option(\"max\"));\n    },\n    _getDefaultDisabledDatesHandler: function _getDefaultDisabledDatesHandler(disabledDates) {\n      return function (args) {\n        var isDisabledDate = disabledDates.some(function (item) {\n          return dateUtils.sameDate(item, args.date);\n        });\n\n        if (isDisabledDate) {\n          return true;\n        }\n      };\n    }\n  }),\n  year: BaseView.inherit({\n    _getViewName: function _getViewName() {\n      return \"year\";\n    },\n    _isTodayCell: function _isTodayCell(cellDate) {\n      var today = this.option(\"_todayDate\")();\n      return dateUtils.sameMonthAndYear(cellDate, today);\n    },\n    _isDateOutOfRange: function _isDateOutOfRange(cellDate) {\n      return !dateUtils.dateInRange(cellDate, dateUtils.getFirstMonthDate(this.option(\"min\")), dateUtils.getLastMonthDate(this.option(\"max\")));\n    },\n    _isOtherView: function _isOtherView() {\n      return false;\n    },\n    _getCellText: function _getCellText(cellDate) {\n      return dateLocalization.getMonthNames(\"abbreviated\")[cellDate.getMonth()];\n    },\n    _getFirstCellData: function _getFirstCellData() {\n      var currentDate = this.option(\"date\");\n      var data = new Date(currentDate);\n      data.setDate(1);\n      data.setMonth(0);\n      return data;\n    },\n    _getNextCellData: function _getNextCellData(date) {\n      date = new Date(date);\n      date.setMonth(date.getMonth() + 1);\n      return date;\n    },\n    _getCellByDate: function _getCellByDate(date) {\n      var foundDate = new Date(date);\n      foundDate.setDate(1);\n      return this._$table.find(\"td[data-value='\".concat(dateSerialization.serializeDate(foundDate, dateUtils.getShortDateFormat()), \"']\"));\n    },\n    getCellAriaLabel: function getCellAriaLabel(date) {\n      return dateLocalization.format(date, \"monthandyear\");\n    },\n    getNavigatorCaption: function getNavigatorCaption() {\n      return dateLocalization.format(this.option(\"date\"), \"yyyy\");\n    },\n    isBoundary: function isBoundary(date) {\n      return dateUtils.sameYear(date, this.option(\"min\")) || dateUtils.sameYear(date, this.option(\"max\"));\n    }\n  }),\n  decade: BaseView.inherit({\n    _getViewName: function _getViewName() {\n      return \"decade\";\n    },\n    _isTodayCell: function _isTodayCell(cellDate) {\n      var today = this.option(\"_todayDate\")();\n      return dateUtils.sameYear(cellDate, today);\n    },\n    _isDateOutOfRange: function _isDateOutOfRange(cellDate) {\n      var min = this.option(\"min\");\n      var max = this.option(\"max\");\n      return !dateUtils.dateInRange(cellDate.getFullYear(), min && min.getFullYear(), max && max.getFullYear());\n    },\n    _isOtherView: function _isOtherView(cellDate) {\n      var date = new Date(cellDate);\n      date.setMonth(1);\n      return !dateUtils.sameDecade(date, this.option(\"date\"));\n    },\n    _getCellText: function _getCellText(cellDate) {\n      return dateLocalization.format(cellDate, \"yyyy\");\n    },\n    _getFirstCellData: function _getFirstCellData() {\n      var year = dateUtils.getFirstYearInDecade(this.option(\"date\")) - 1;\n      return dateUtils.createDateWithFullYear(year, 0, 1);\n    },\n    _getNextCellData: function _getNextCellData(date) {\n      date = new Date(date);\n      date.setFullYear(date.getFullYear() + 1);\n      return date;\n    },\n    getNavigatorCaption: function getNavigatorCaption() {\n      var currentDate = this.option(\"date\");\n      var firstYearInDecade = dateUtils.getFirstYearInDecade(currentDate);\n      var startDate = new Date(currentDate);\n      var endDate = new Date(currentDate);\n      startDate.setFullYear(firstYearInDecade);\n      endDate.setFullYear(firstYearInDecade + 9);\n      return dateLocalization.format(startDate, \"yyyy\") + \"-\" + dateLocalization.format(endDate, \"yyyy\");\n    },\n    _isValueOnCurrentView: function _isValueOnCurrentView(currentDate, value) {\n      return dateUtils.sameDecade(currentDate, value);\n    },\n    _getCellByDate: function _getCellByDate(date) {\n      var foundDate = new Date(date);\n      foundDate.setDate(1);\n      foundDate.setMonth(0);\n      return this._$table.find(\"td[data-value='\".concat(dateSerialization.serializeDate(foundDate, dateUtils.getShortDateFormat()), \"']\"));\n    },\n    isBoundary: function isBoundary(date) {\n      return dateUtils.sameDecade(date, this.option(\"min\")) || dateUtils.sameDecade(date, this.option(\"max\"));\n    }\n  }),\n  century: BaseView.inherit({\n    _getViewName: function _getViewName() {\n      return \"century\";\n    },\n    _isTodayCell: function _isTodayCell(cellDate) {\n      var today = this.option(\"_todayDate\")();\n      return dateUtils.sameDecade(cellDate, today);\n    },\n    _isDateOutOfRange: function _isDateOutOfRange(cellDate) {\n      var decade = dateUtils.getFirstYearInDecade(cellDate);\n      var minDecade = dateUtils.getFirstYearInDecade(this.option(\"min\"));\n      var maxDecade = dateUtils.getFirstYearInDecade(this.option(\"max\"));\n      return !dateUtils.dateInRange(decade, minDecade, maxDecade);\n    },\n    _isOtherView: function _isOtherView(cellDate) {\n      var date = new Date(cellDate);\n      date.setMonth(1);\n      return !dateUtils.sameCentury(date, this.option(\"date\"));\n    },\n    _getCellText: function _getCellText(cellDate) {\n      var startDate = dateLocalization.format(cellDate, \"yyyy\");\n      var endDate = new Date(cellDate);\n      endDate.setFullYear(endDate.getFullYear() + 9);\n      return startDate + \" - \" + dateLocalization.format(endDate, \"yyyy\");\n    },\n    _getFirstCellData: function _getFirstCellData() {\n      var decade = dateUtils.getFirstDecadeInCentury(this.option(\"date\")) - 10;\n      return dateUtils.createDateWithFullYear(decade, 0, 1);\n    },\n    _getNextCellData: function _getNextCellData(date) {\n      date = new Date(date);\n      date.setFullYear(date.getFullYear() + 10);\n      return date;\n    },\n    _getCellByDate: function _getCellByDate(date) {\n      var foundDate = new Date(date);\n      foundDate.setDate(1);\n      foundDate.setMonth(0);\n      foundDate.setFullYear(dateUtils.getFirstYearInDecade(foundDate));\n      return this._$table.find(\"td[data-value='\".concat(dateSerialization.serializeDate(foundDate, dateUtils.getShortDateFormat()), \"']\"));\n    },\n    getNavigatorCaption: function getNavigatorCaption() {\n      var currentDate = this.option(\"date\");\n      var firstDecadeInCentury = dateUtils.getFirstDecadeInCentury(currentDate);\n      var startDate = new Date(currentDate);\n      var endDate = new Date(currentDate);\n      startDate.setFullYear(firstDecadeInCentury);\n      endDate.setFullYear(firstDecadeInCentury + 99);\n      return dateLocalization.format(startDate, \"yyyy\") + \"-\" + dateLocalization.format(endDate, \"yyyy\");\n    },\n    isBoundary: function isBoundary(date) {\n      return dateUtils.sameCentury(date, this.option(\"min\")) || dateUtils.sameCentury(date, this.option(\"max\"));\n    }\n  })\n};\nexport default Views;","map":null,"metadata":{},"sourceType":"module"}