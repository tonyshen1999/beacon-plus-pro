{"ast":null,"code":"import _toConsumableArray from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/cells_selection_state.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport dateUtils from \"../../../core/utils/date\";\n\nvar CellsSelectionState = /*#__PURE__*/function () {\n  function CellsSelectionState(viewDataProvider) {\n    _classCallCheck(this, CellsSelectionState);\n\n    this._viewDataProvider = viewDataProvider;\n    this._focusedCell = null;\n    this._selectedCells = null;\n    this._firstSelectedCell = null;\n    this._prevFocusedCell = null;\n    this._prevSelectedCells = null;\n  }\n\n  _createClass(CellsSelectionState, [{\n    key: \"viewDataProvider\",\n    get: function get() {\n      return this._viewDataProvider;\n    }\n  }, {\n    key: \"focusedCell\",\n    get: function get() {\n      var focusedCell = this._focusedCell;\n\n      if (!focusedCell) {\n        return;\n      }\n\n      var groupIndex = focusedCell.groupIndex,\n          startDate = focusedCell.startDate,\n          allDay = focusedCell.allDay;\n      var cellInfo = {\n        groupIndex: groupIndex,\n        startDate: startDate,\n        isAllDay: allDay,\n        index: focusedCell.index\n      };\n      var cellPosition = this.viewDataProvider.findCellPositionInMap(cellInfo);\n      return {\n        coordinates: cellPosition,\n        cellData: focusedCell\n      };\n    }\n  }, {\n    key: \"setFocusedCell\",\n    value: function setFocusedCell(rowIndex, columnIndex, isAllDay) {\n      if (rowIndex >= 0) {\n        var cell = this._viewDataProvider.getCellData(rowIndex, columnIndex, isAllDay);\n\n        this._focusedCell = cell;\n      }\n    }\n  }, {\n    key: \"setSelectedCells\",\n    value: function setSelectedCells(lastCellCoordinates) {\n      var _this = this;\n\n      var firstCellCoordinates = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : void 0;\n      var viewDataProvider = this._viewDataProvider;\n      var lastRowIndex = lastCellCoordinates.rowIndex,\n          lastColumnIndex = lastCellCoordinates.columnIndex,\n          isLastCellAllDay = lastCellCoordinates.allDay;\n\n      if (lastRowIndex < 0) {\n        return;\n      }\n\n      var firstCell = firstCellCoordinates ? viewDataProvider.getCellData(firstCellCoordinates.rowIndex, firstCellCoordinates.columnIndex, firstCellCoordinates.allDay) : this._firstSelectedCell;\n      var lastCell = viewDataProvider.getCellData(lastRowIndex, lastColumnIndex, isLastCellAllDay);\n      this._firstSelectedCell = firstCell;\n\n      if (firstCell.startDate.getTime() > lastCell.startDate.getTime()) {\n        var _ref = [lastCell, firstCell];\n        firstCell = _ref[0];\n        lastCell = _ref[1];\n      }\n\n      var _firstCell = firstCell,\n          firstStartDate = _firstCell.startDate,\n          firstGroupIndex = _firstCell.groupIndex,\n          firstCellIndex = _firstCell.index;\n      var _lastCell = lastCell,\n          lastStartDate = _lastCell.startDate,\n          lastCellIndex = _lastCell.index;\n      var cells = viewDataProvider.getCellsByGroupIndexAndAllDay(firstGroupIndex, isLastCellAllDay);\n      var filteredCells = cells.reduce(function (selectedCells, cellsRow) {\n        var filterData = {\n          firstDate: firstStartDate,\n          lastDate: lastStartDate,\n          firstIndex: firstCellIndex,\n          lastIndex: lastCellIndex\n        };\n\n        var filteredRow = _this._filterCellsByDateAndIndex(cellsRow, filterData);\n\n        selectedCells.push.apply(selectedCells, _toConsumableArray(filteredRow));\n        return selectedCells;\n      }, []);\n      this._selectedCells = filteredCells.sort(function (firstCell, secondCell) {\n        return firstCell.startDate.getTime() - secondCell.startDate.getTime();\n      });\n    }\n  }, {\n    key: \"setSelectedCellsByData\",\n    value: function setSelectedCellsByData(selectedCellsData) {\n      this._selectedCells = selectedCellsData;\n    }\n  }, {\n    key: \"getSelectedCells\",\n    value: function getSelectedCells() {\n      return this._selectedCells;\n    }\n  }, {\n    key: \"releaseSelectedAndFocusedCells\",\n    value: function releaseSelectedAndFocusedCells() {\n      this.releaseSelectedCells();\n      this.releaseFocusedCell();\n    }\n  }, {\n    key: \"releaseSelectedCells\",\n    value: function releaseSelectedCells() {\n      this._prevSelectedCells = this._selectedCells;\n      this._prevFirstSelectedCell = this._firstSelectedCell;\n      this._selectedCells = null;\n      this._firstSelectedCell = null;\n    }\n  }, {\n    key: \"releaseFocusedCell\",\n    value: function releaseFocusedCell() {\n      this._prevFocusedCell = this._focusedCell;\n      this._focusedCell = null;\n    }\n  }, {\n    key: \"restoreSelectedAndFocusedCells\",\n    value: function restoreSelectedAndFocusedCells() {\n      this._selectedCells = this._selectedCells || this._prevSelectedCells;\n      this._focusedCell = this._focusedCell || this._prevFocusedCell;\n      this._firstSelectedCell = this._firstSelectedCell || this._prevFirstSelectedCell;\n      this._prevSelectedCells = null;\n      this._prevFirstSelectedCell = null;\n      this._prevFocusedCell = null;\n    }\n  }, {\n    key: \"clearSelectedAndFocusedCells\",\n    value: function clearSelectedAndFocusedCells() {\n      this._prevSelectedCells = null;\n      this._selectedCells = null;\n      this._prevFocusedCell = null;\n      this._focusedCell = null;\n    }\n  }, {\n    key: \"_filterCellsByDateAndIndex\",\n    value: function _filterCellsByDateAndIndex(cellsRow, filterData) {\n      var _this2 = this;\n\n      var firstDate = filterData.firstDate,\n          lastDate = filterData.lastDate,\n          firstIndex = filterData.firstIndex,\n          lastIndex = filterData.lastIndex;\n      var firstDay = dateUtils.trimTime(firstDate).getTime();\n      var lastDay = dateUtils.trimTime(lastDate).getTime();\n      return cellsRow.filter(function (cell) {\n        var startDate = cell.startDate,\n            index = cell.index;\n        var day = dateUtils.trimTime(startDate).getTime();\n        var daysAndIndexes = {\n          day: day,\n          index: index,\n          firstDay: firstDay,\n          firstIndex: firstIndex,\n          lastDay: lastDay,\n          lastIndex: lastIndex\n        };\n        return _this2._compareCellsByDateAndIndex(daysAndIndexes);\n      });\n    }\n  }, {\n    key: \"_compareCellsByDateAndIndex\",\n    value: function _compareCellsByDateAndIndex(daysAndIndexes) {\n      var day = daysAndIndexes.day,\n          index = daysAndIndexes.index,\n          firstDay = daysAndIndexes.firstDay,\n          firstIndex = daysAndIndexes.firstIndex,\n          lastDay = daysAndIndexes.lastDay,\n          lastIndex = daysAndIndexes.lastIndex;\n\n      if (firstDay === lastDay) {\n        var validFirstIndex = firstIndex;\n        var validLastIndex = lastIndex;\n\n        if (validFirstIndex > validLastIndex) {\n          var _ref2 = [validLastIndex, validFirstIndex];\n          validFirstIndex = _ref2[0];\n          validLastIndex = _ref2[1];\n        }\n\n        return firstDay === day && index >= validFirstIndex && index <= validLastIndex;\n      } else {\n        return day === firstDay && index >= firstIndex || day === lastDay && index <= lastIndex || firstDay < day && day < lastDay;\n      }\n    }\n  }]);\n\n  return CellsSelectionState;\n}();\n\nexport { CellsSelectionState as default };","map":null,"metadata":{},"sourceType":"module"}