{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/map.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../core/renderer\";\nimport eventsEngine from \"../events/core/events_engine\";\nimport Promise from \"../core/polyfills/promise\";\nimport { fromPromise } from \"../core/utils/deferred\";\nimport registerComponent from \"../core/component_registrator\";\nimport errors from \"./widget/ui.errors\";\nimport devices from \"../core/devices\";\nimport Widget from \"./widget/ui.widget\";\nimport { titleize } from \"../core/utils/inflector\";\nimport { each } from \"../core/utils/iterator\";\nimport { extend } from \"../core/utils/extend\";\nimport { inArray, wrapToArray } from \"../core/utils/array\";\nimport { isNumeric } from \"../core/utils/type\";\nimport { addNamespace } from \"../events/utils/index\";\nimport pointerEvents from \"../events/pointer\";\nimport googleStatic from \"./map/provider.google_static\";\nimport google from \"./map/provider.dynamic.google\";\nimport bing from \"./map/provider.dynamic.bing\";\nvar PROVIDERS = {\n  googleStatic: googleStatic,\n  google: google,\n  bing: bing\n};\nvar MAP_CLASS = \"dx-map\";\nvar MAP_CONTAINER_CLASS = \"dx-map-container\";\nvar MAP_SHIELD_CLASS = \"dx-map-shield\";\nvar NATIVE_CLICK_CLASS = \"dx-native-click\";\nvar Map = Widget.inherit({\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      bounds: {\n        northEast: null,\n        southWest: null\n      },\n      center: {\n        lat: 0,\n        lng: 0\n      },\n      zoom: 1,\n      width: 300,\n      height: 300,\n      type: \"roadmap\",\n      provider: \"google\",\n      autoAdjust: true,\n      markers: [],\n      markerIconSrc: null,\n      onMarkerAdded: null,\n      onMarkerRemoved: null,\n      routes: [],\n      onRouteAdded: null,\n      onRouteRemoved: null,\n      apiKey: {\n        bing: \"\",\n        google: \"\",\n        googleStatic: \"\"\n      },\n      controls: false,\n      onReady: null,\n      onUpdated: null,\n      onClick: null\n    });\n  },\n  _defaultOptionsRules: function _defaultOptionsRules() {\n    return this.callBase().concat([{\n      device: function device() {\n        return \"desktop\" === devices.real().deviceType && !devices.isSimulator();\n      },\n      options: {\n        focusStateEnabled: true\n      }\n    }]);\n  },\n  _init: function _init() {\n    this.callBase();\n    this.$element().addClass(MAP_CLASS).addClass(NATIVE_CLICK_CLASS);\n    this._lastAsyncAction = Promise.resolve();\n\n    this._checkOption(\"provider\");\n\n    this._checkOption(\"markers\");\n\n    this._checkOption(\"routes\");\n\n    this._initContainer();\n\n    this._grabEvents();\n\n    this._rendered = {};\n  },\n  _useTemplates: function _useTemplates() {\n    return false;\n  },\n  _checkOption: function _checkOption(option) {\n    var value = this.option(option);\n\n    if (\"markers\" === option && !Array.isArray(value)) {\n      throw errors.Error(\"E1022\");\n    }\n\n    if (\"routes\" === option && !Array.isArray(value)) {\n      throw errors.Error(\"E1023\");\n    }\n  },\n  _initContainer: function _initContainer() {\n    this._$container = $(\"<div>\").addClass(MAP_CONTAINER_CLASS);\n    this.$element().append(this._$container);\n  },\n  _grabEvents: function _grabEvents() {\n    var eventName = addNamespace(pointerEvents.down, this.NAME);\n    eventsEngine.on(this.$element(), eventName, this._cancelEvent.bind(this));\n  },\n  _cancelEvent: function _cancelEvent(e) {\n    var cancelByProvider = this._provider && this._provider.isEventsCanceled(e) && !this.option(\"disabled\");\n\n    if (cancelByProvider) {\n      e.stopPropagation();\n    }\n  },\n  _saveRendered: function _saveRendered(option) {\n    var value = this.option(option);\n    this._rendered[option] = value.slice();\n  },\n  _render: function _render() {\n    this.callBase();\n\n    this._renderShield();\n\n    this._saveRendered(\"markers\");\n\n    this._saveRendered(\"routes\");\n\n    this._provider = new PROVIDERS[this.option(\"provider\")](this, this._$container);\n\n    this._queueAsyncAction(\"render\", this._rendered.markers, this._rendered.routes);\n  },\n  _renderShield: function _renderShield() {\n    var $shield;\n\n    if (this.option(\"disabled\")) {\n      $shield = $(\"<div>\").addClass(MAP_SHIELD_CLASS);\n      this.$element().append($shield);\n    } else {\n      $shield = this.$element().find(\".\" + MAP_SHIELD_CLASS);\n      $shield.remove();\n    }\n  },\n  _clean: function _clean() {\n    this._cleanFocusState();\n\n    if (this._provider) {\n      this._provider.clean();\n    }\n\n    this._provider = null;\n    this._lastAsyncAction = Promise.resolve();\n    this.setOptionSilent(\"bounds\", {\n      northEast: null,\n      southWest: null\n    });\n    delete this._suppressAsyncAction;\n  },\n  _optionChanged: function _optionChanged(args) {\n    var name = args.name;\n    var changeBag = this._optionChangeBag;\n    this._optionChangeBag = null;\n\n    switch (name) {\n      case \"disabled\":\n        this._renderShield();\n\n        this.callBase(args);\n        break;\n\n      case \"width\":\n      case \"height\":\n        this.callBase(args);\n\n        this._dimensionChanged();\n\n        break;\n\n      case \"provider\":\n        this._suppressAsyncAction = true;\n\n        this._invalidate();\n\n        break;\n\n      case \"apiKey\":\n        errors.log(\"W1001\");\n        break;\n\n      case \"bounds\":\n        this._queueAsyncAction(\"updateBounds\");\n\n        break;\n\n      case \"center\":\n        this._queueAsyncAction(\"updateCenter\");\n\n        break;\n\n      case \"zoom\":\n        this._queueAsyncAction(\"updateZoom\");\n\n        break;\n\n      case \"type\":\n        this._queueAsyncAction(\"updateMapType\");\n\n        break;\n\n      case \"controls\":\n        this._queueAsyncAction(\"updateControls\", this._rendered.markers, this._rendered.routes);\n\n        break;\n\n      case \"autoAdjust\":\n        this._queueAsyncAction(\"adjustViewport\");\n\n        break;\n\n      case \"markers\":\n      case \"routes\":\n        this._checkOption(name);\n\n        var prevValue = this._rendered[name];\n\n        this._saveRendered(name);\n\n        this._queueAsyncAction(\"update\" + titleize(name), changeBag ? changeBag.removed : prevValue, changeBag ? changeBag.added : this._rendered[name]).then(function (result) {\n          if (changeBag) {\n            changeBag.resolve(result);\n          }\n        });\n\n        break;\n\n      case \"markerIconSrc\":\n        this._queueAsyncAction(\"updateMarkers\", this._rendered.markers, this._rendered.markers);\n\n        break;\n\n      case \"onReady\":\n      case \"onUpdated\":\n      case \"onMarkerAdded\":\n      case \"onMarkerRemoved\":\n      case \"onRouteAdded\":\n      case \"onRouteRemoved\":\n      case \"onClick\":\n        break;\n\n      default:\n        this.callBase.apply(this, arguments);\n    }\n  },\n  _visibilityChanged: function _visibilityChanged(visible) {\n    if (visible) {\n      this._dimensionChanged();\n    }\n  },\n  _dimensionChanged: function _dimensionChanged() {\n    this._queueAsyncAction(\"updateDimensions\");\n  },\n  _queueAsyncAction: function _queueAsyncAction(name) {\n    var options = [].slice.call(arguments).slice(1);\n    var isActionSuppressed = this._suppressAsyncAction;\n    this._lastAsyncAction = this._lastAsyncAction.then(function () {\n      if (!this._provider || isActionSuppressed) {\n        return Promise.resolve();\n      }\n\n      return this._provider[name].apply(this._provider, options).then(function (result) {\n        result = wrapToArray(result);\n        var mapRefreshed = result[0];\n\n        if (mapRefreshed && !this._disposed) {\n          this._triggerReadyAction();\n        }\n\n        return result[1];\n      }.bind(this));\n    }.bind(this));\n    return this._lastAsyncAction;\n  },\n  _triggerReadyAction: function _triggerReadyAction() {\n    this._createActionByOption(\"onReady\")({\n      originalMap: this._provider.map()\n    });\n  },\n  _triggerUpdateAction: function _triggerUpdateAction() {\n    this._createActionByOption(\"onUpdated\")();\n  },\n  setOptionSilent: function setOptionSilent(name, value) {\n    this._setOptionWithoutOptionChange(name, value);\n  },\n  addMarker: function addMarker(marker) {\n    return this._addFunction(\"markers\", marker);\n  },\n  removeMarker: function removeMarker(marker) {\n    return this._removeFunction(\"markers\", marker);\n  },\n  addRoute: function addRoute(route) {\n    return this._addFunction(\"routes\", route);\n  },\n  removeRoute: function removeRoute(route) {\n    return this._removeFunction(\"routes\", route);\n  },\n  _addFunction: function _addFunction(optionName, addingValue) {\n    var optionValue = this.option(optionName);\n    var addingValues = wrapToArray(addingValue);\n    optionValue.push.apply(optionValue, addingValues);\n    return this._partialArrayOptionChange(optionName, optionValue, addingValues, []);\n  },\n  _removeFunction: function _removeFunction(optionName, removingValue) {\n    var optionValue = this.option(optionName);\n    var removingValues = wrapToArray(removingValue);\n    each(removingValues, function (removingIndex, removingValue) {\n      var index = isNumeric(removingValue) ? removingValue : inArray(removingValue, optionValue);\n\n      if (-1 !== index) {\n        var removing = optionValue.splice(index, 1)[0];\n        removingValues.splice(removingIndex, 1, removing);\n      } else {\n        throw errors.log(\"E1021\", titleize(optionName.substring(0, optionName.length - 1)), removingValue);\n      }\n    });\n    return this._partialArrayOptionChange(optionName, optionValue, [], removingValues);\n  },\n  _partialArrayOptionChange: function _partialArrayOptionChange(optionName, optionValue, addingValues, removingValues) {\n    return fromPromise(new Promise(function (resolve) {\n      this._optionChangeBag = {\n        resolve: resolve,\n        added: addingValues,\n        removed: removingValues\n      };\n      this.option(optionName, optionValue);\n    }.bind(this)).then(function (result) {\n      return result && 1 === result.length ? result[0] : result;\n    }), this);\n  }\n});\nregisterComponent(\"dxMap\", Map);\nexport default Map;","map":null,"metadata":{},"sourceType":"module"}