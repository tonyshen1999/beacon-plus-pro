{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/renovation/ui/pager/resizable_container.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"contentTemplate\", \"pagerProps\"];\nimport { createComponentVNode, normalizeProps } from \"inferno\";\nimport { InfernoEffect, InfernoComponent } from \"@devextreme/runtime/inferno\";\nimport resizeCallbacks from \"../../../core/utils/resize_callbacks\";\nimport { getElementWidth, getElementStyle } from \"./utils/get_element_width\";\nimport { isDefined } from \"../../../core/utils/type\";\nexport var viewFunction = function viewFunction(_ref) {\n  var contentAttributes = _ref.contentAttributes,\n      infoTextRef = _ref.infoTextRef,\n      infoTextVisible = _ref.infoTextVisible,\n      isLargeDisplayMode = _ref.isLargeDisplayMode,\n      pageSizesRef = _ref.pageSizesRef,\n      pagesRef = _ref.pagesRef,\n      parentRef = _ref.parentRef,\n      Content = _ref.props.contentTemplate;\n  return Content(_extends({\n    rootElementRef: parentRef,\n    pageSizesRef: pageSizesRef,\n    infoTextRef: infoTextRef,\n    pagesRef: pagesRef,\n    infoTextVisible: infoTextVisible,\n    isLargeDisplayMode: isLargeDisplayMode\n  }, contentAttributes));\n};\nexport function calculateAdaptivityProps(_ref2) {\n  var infoWidth = _ref2.info,\n      pageSizesWidth = _ref2.pageSizes,\n      pagesWidth = _ref2.pages,\n      parentWidth = _ref2.parent;\n  var minimalWidth = pageSizesWidth + pagesWidth + infoWidth;\n  var infoTextVisible = parentWidth - minimalWidth > 0;\n  var isLargeDisplayMode = parentWidth - (pageSizesWidth + pagesWidth) > 0;\n  return {\n    infoTextVisible: infoTextVisible,\n    isLargeDisplayMode: isLargeDisplayMode\n  };\n}\n\nfunction getElementsWidth(_ref3) {\n  var info = _ref3.info,\n      pageSizes = _ref3.pageSizes,\n      pages = _ref3.pages,\n      parent = _ref3.parent;\n  var parentWidth = getElementWidth(parent);\n  var pageSizesWidth = getElementWidth(pageSizes);\n  var infoWidth = getElementWidth(info);\n  var pagesHtmlWidth = getElementWidth(pages);\n  return {\n    parent: parentWidth,\n    pageSizes: pageSizesWidth,\n    info: infoWidth + getElementStyle(\"marginLeft\", info) + getElementStyle(\"marginRight\", info),\n    pages: pagesHtmlWidth\n  };\n}\n\nexport var ResizableContainerProps = {};\nimport { createRef as infernoCreateRef } from \"inferno\";\n\nvar getTemplate = function getTemplate(TemplateProp) {\n  return TemplateProp && (TemplateProp.defaultProps ? function (props) {\n    return normalizeProps(createComponentVNode(2, TemplateProp, _extends({}, props)));\n  } : TemplateProp);\n};\n\nexport var ResizableContainer = /*#__PURE__*/(function () {\n  var ResizableContainer = /*#__PURE__*/function (_InfernoComponent) {\n    _inherits(ResizableContainer, _InfernoComponent);\n\n    var _super = _createSuper(ResizableContainer);\n\n    function ResizableContainer(props) {\n      var _this;\n\n      _classCallCheck(this, ResizableContainer);\n\n      _this = _super.call(this, props);\n      _this.parentRef = infernoCreateRef();\n      _this.pageSizesRef = infernoCreateRef();\n      _this.infoTextRef = infernoCreateRef();\n      _this.pagesRef = infernoCreateRef();\n      _this.state = {\n        infoTextVisible: true,\n        isLargeDisplayMode: true\n      };\n      _this.subscribeToResize = _this.subscribeToResize.bind(_assertThisInitialized(_this));\n      _this.effectUpdateChildProps = _this.effectUpdateChildProps.bind(_assertThisInitialized(_this));\n      _this.updateAdaptivityProps = _this.updateAdaptivityProps.bind(_assertThisInitialized(_this));\n      return _this;\n    }\n\n    _createClass(ResizableContainer, [{\n      key: \"createEffects\",\n      value: function createEffects() {\n        return [new InfernoEffect(this.subscribeToResize, [this.state.infoTextVisible, this.state.isLargeDisplayMode]), new InfernoEffect(this.effectUpdateChildProps, [this.props, this.state.infoTextVisible, this.state.isLargeDisplayMode, this.props.pagerProps, this.props.contentTemplate])];\n      }\n    }, {\n      key: \"updateEffects\",\n      value: function updateEffects() {\n        var _this$_effects$, _this$_effects$2;\n\n        null === (_this$_effects$ = this._effects[0]) || void 0 === _this$_effects$ ? void 0 : _this$_effects$.update([this.state.infoTextVisible, this.state.isLargeDisplayMode]);\n        null === (_this$_effects$2 = this._effects[1]) || void 0 === _this$_effects$2 ? void 0 : _this$_effects$2.update([this.props, this.state.infoTextVisible, this.state.isLargeDisplayMode, this.props.pagerProps, this.props.contentTemplate]);\n      }\n    }, {\n      key: \"subscribeToResize\",\n      value: function subscribeToResize() {\n        var _this2 = this;\n\n        var callback = function callback() {\n          _this2.parentWidth > 0 && _this2.updateAdaptivityProps();\n        };\n\n        resizeCallbacks.add(callback);\n        return function () {\n          resizeCallbacks.remove(callback);\n        };\n      }\n    }, {\n      key: \"effectUpdateChildProps\",\n      value: function effectUpdateChildProps() {\n        if (this.parentWidth > 0) {\n          this.updateAdaptivityProps();\n        }\n      }\n    }, {\n      key: \"contentAttributes\",\n      get: function get() {\n        var _this$props$pagerProp = this.props.pagerProps,\n            className = _this$props$pagerProp.className,\n            displayMode = _this$props$pagerProp.displayMode,\n            gridCompatibility = _this$props$pagerProp.gridCompatibility,\n            hasKnownLastPage = _this$props$pagerProp.hasKnownLastPage,\n            infoText = _this$props$pagerProp.infoText,\n            lightModeEnabled = _this$props$pagerProp.lightModeEnabled,\n            maxPagesCount = _this$props$pagerProp.maxPagesCount,\n            onKeyDown = _this$props$pagerProp.onKeyDown,\n            pageCount = _this$props$pagerProp.pageCount,\n            pageIndex = _this$props$pagerProp.pageIndex,\n            pageIndexChange = _this$props$pagerProp.pageIndexChange,\n            pageSize = _this$props$pagerProp.pageSize,\n            pageSizeChange = _this$props$pagerProp.pageSizeChange,\n            pageSizes = _this$props$pagerProp.pageSizes,\n            pagesCountText = _this$props$pagerProp.pagesCountText,\n            pagesNavigatorVisible = _this$props$pagerProp.pagesNavigatorVisible,\n            rtlEnabled = _this$props$pagerProp.rtlEnabled,\n            showInfo = _this$props$pagerProp.showInfo,\n            showNavigationButtons = _this$props$pagerProp.showNavigationButtons,\n            showPageSizes = _this$props$pagerProp.showPageSizes,\n            totalCount = _this$props$pagerProp.totalCount,\n            visible = _this$props$pagerProp.visible;\n        return _extends({}, this.restAttributes, {\n          pageSize: pageSize,\n          pageIndex: pageIndex,\n          pageIndexChange: pageIndexChange,\n          pageSizeChange: pageSizeChange,\n          gridCompatibility: gridCompatibility,\n          className: className,\n          showInfo: showInfo,\n          infoText: infoText,\n          lightModeEnabled: lightModeEnabled,\n          displayMode: displayMode,\n          maxPagesCount: maxPagesCount,\n          pageCount: pageCount,\n          pagesCountText: pagesCountText,\n          visible: visible,\n          hasKnownLastPage: hasKnownLastPage,\n          pagesNavigatorVisible: pagesNavigatorVisible,\n          showPageSizes: showPageSizes,\n          pageSizes: pageSizes,\n          rtlEnabled: rtlEnabled,\n          showNavigationButtons: showNavigationButtons,\n          totalCount: totalCount,\n          onKeyDown: onKeyDown\n        });\n      }\n    }, {\n      key: \"parentWidth\",\n      get: function get() {\n        return this.parentRef.current ? getElementWidth(this.parentRef.current) : 0;\n      }\n    }, {\n      key: \"updateAdaptivityProps\",\n      value: function updateAdaptivityProps() {\n        var _this3 = this;\n\n        var currentElementsWidth = getElementsWidth({\n          parent: this.parentRef.current,\n          pageSizes: this.pageSizesRef.current,\n          info: this.infoTextRef.current,\n          pages: this.pagesRef.current\n        });\n\n        if (isDefined(this.actualAdaptivityProps) && (this.actualAdaptivityProps.infoTextVisible !== this.state.infoTextVisible || this.actualAdaptivityProps.isLargeDisplayMode !== this.state.isLargeDisplayMode)) {\n          return;\n        }\n\n        var isEmpty = !isDefined(this.elementsWidth);\n\n        if (isEmpty) {\n          this.elementsWidth = {};\n        }\n\n        if (isEmpty || this.state.isLargeDisplayMode) {\n          this.elementsWidth.pageSizes = currentElementsWidth.pageSizes;\n          this.elementsWidth.pages = currentElementsWidth.pages;\n        }\n\n        if (isEmpty || this.state.infoTextVisible) {\n          this.elementsWidth.info = currentElementsWidth.info;\n        }\n\n        this.actualAdaptivityProps = calculateAdaptivityProps(_extends({\n          parent: currentElementsWidth.parent\n        }, this.elementsWidth));\n        this.setState(function (__state_argument) {\n          return {\n            infoTextVisible: _this3.actualAdaptivityProps.infoTextVisible\n          };\n        });\n        this.setState(function (__state_argument) {\n          return {\n            isLargeDisplayMode: _this3.actualAdaptivityProps.isLargeDisplayMode\n          };\n        });\n      }\n    }, {\n      key: \"restAttributes\",\n      get: function get() {\n        var _this$props = this.props,\n            restProps = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n        return restProps;\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var props = this.props;\n        return viewFunction({\n          props: _extends({}, props, {\n            contentTemplate: getTemplate(props.contentTemplate)\n          }),\n          infoTextVisible: this.state.infoTextVisible,\n          isLargeDisplayMode: this.state.isLargeDisplayMode,\n          parentRef: this.parentRef,\n          pageSizesRef: this.pageSizesRef,\n          infoTextRef: this.infoTextRef,\n          pagesRef: this.pagesRef,\n          contentAttributes: this.contentAttributes,\n          parentWidth: this.parentWidth,\n          updateAdaptivityProps: this.updateAdaptivityProps,\n          restAttributes: this.restAttributes\n        });\n      }\n    }]);\n\n    return ResizableContainer;\n  }(InfernoComponent);\n\n  ResizableContainer.defaultProps = ResizableContainerProps;\n  return ResizableContainer;\n})();","map":null,"metadata":{},"sourceType":"module"}