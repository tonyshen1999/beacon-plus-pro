{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/tree_map/hover.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport TreeMapBase from \"./tree_map.base\";\nimport Node from \"./node\";\nimport { expand } from \"../core/helpers\";\nimport { buildRectAppearance } from \"./common\";\nimport { parseScalar as _parseScalar } from \"../core/utils\";\nvar proto = TreeMapBase.prototype;\nvar nodeProto = Node.prototype;\nvar STATE_CODE = 1;\nimport \"./api\";\nimport \"./states\";\nproto._eventsMap.onHoverChanged = {\n  name: \"hoverChanged\"\n};\nexpand(proto._handlers, \"calculateAdditionalStates\", function (states, options) {\n  states[1] = options.hoverStyle ? buildRectAppearance(options.hoverStyle) : {};\n});\nTreeMapBase.addChange({\n  code: \"HOVER_ENABLED\",\n  handler: function handler() {\n    var hoverEnabled = _parseScalar(this._getOption(\"hoverEnabled\", true), true);\n\n    if (!hoverEnabled) {\n      this.clearHover();\n    }\n\n    this._hoverEnabled = hoverEnabled;\n  },\n  isThemeDependent: true,\n  isOptionChange: true,\n  option: \"hoverEnabled\"\n});\nnodeProto.statesMap[1] = 1;\nnodeProto.additionalStates.push(1);\nexpand(proto, \"_extendProxyType\", function (proto) {\n  var that = this;\n\n  proto.setHover = function () {\n    that._hoverNode(this._id);\n  };\n\n  proto.isHovered = function () {\n    return that._hoverIndex === this._id;\n  };\n});\nexpand(proto, \"_onNodesCreated\", function () {\n  this._hoverIndex = -1;\n});\nexpand(proto, \"_changeGroupSettings\", function () {\n  this._groupHoverEnabled = _parseScalar(this._getOption(\"group\").hoverEnabled, true);\n\n  if (!this._groupHoverEnabled) {\n    this.clearHover();\n  }\n});\n\nproto._applyHoverState = function (index, state) {\n  setNodeStateRecursive(this._nodes[index], STATE_CODE, state);\n\n  this._eventTrigger(\"hoverChanged\", {\n    node: this._nodes[index].proxy\n  });\n};\n\nfunction setNodeStateRecursive(node, code, state) {\n  var nodes = node.isNode() && node.nodes;\n  var i;\n  var ii = nodes && nodes.length;\n  node.setState(code, state);\n\n  for (i = 0; i < ii; ++i) {\n    setNodeStateRecursive(nodes[i], code, state);\n  }\n}\n\nproto._hoverNode = function (index) {\n  var currentIndex = this._hoverIndex;\n\n  if (this._hoverEnabled && currentIndex !== index) {\n    if (!this._groupHoverEnabled && index >= 0 && this._nodes[index].isNode()) {\n      this.clearHover();\n      return;\n    }\n\n    this._context.suspend();\n\n    this._hoverIndex = -1;\n\n    if (currentIndex >= 0) {\n      this._applyHoverState(currentIndex, false);\n    }\n\n    this._hoverIndex = index;\n\n    if (index >= 0) {\n      this._applyHoverState(index, true);\n    }\n\n    this._context.resume();\n  }\n};\n\nproto.clearHover = function () {\n  this._hoverNode(-1);\n};","map":null,"metadata":{},"sourceType":"module"}