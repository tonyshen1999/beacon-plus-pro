{"ast":null,"code":"import _defineProperty from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/renovation/ui/pager/content.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"className\", \"displayMode\", \"gridCompatibility\", \"hasKnownLastPage\", \"infoText\", \"infoTextRef\", \"infoTextVisible\", \"isLargeDisplayMode\", \"lightModeEnabled\", \"maxPagesCount\", \"onKeyDown\", \"pageCount\", \"pageIndex\", \"pageIndexChange\", \"pageSize\", \"pageSizeChange\", \"pageSizes\", \"pageSizesRef\", \"pagesCountText\", \"pagesNavigatorVisible\", \"pagesRef\", \"rootElementRef\", \"rtlEnabled\", \"showInfo\", \"showNavigationButtons\", \"showPageSizes\", \"totalCount\", \"visible\"];\nimport { createVNode, createComponentVNode, normalizeProps } from \"inferno\";\nimport { InfernoEffect, InfernoComponent, normalizeStyles } from \"@devextreme/runtime/inferno\";\nimport { InfoText } from \"./info\";\nimport { PageIndexSelector } from \"./pages/page_index_selector\";\nimport { PageSizeSelector } from \"./page_size/selector\";\nimport { PAGER_PAGES_CLASS, PAGER_PAGE_INDEXES_CLASS, LIGHT_MODE_CLASS, PAGER_CLASS } from \"./common/consts\";\nimport { InternalPagerProps } from \"./common/pager_props\";\nimport { combineClasses } from \"../../utils/combine_classes\";\nimport { Widget } from \"../common/widget\";\nimport { registerKeyboardAction as _registerKeyboardAction } from \"../../../ui/shared/accessibility\";\nexport var viewFunction = function viewFunction(_ref) {\n  var classes = _ref.classes,\n      infoVisible = _ref.infoVisible,\n      isLargeDisplayMode = _ref.isLargeDisplayMode,\n      pageIndexSelectorVisible = _ref.pageIndexSelectorVisible,\n      pagesContainerVisibility = _ref.pagesContainerVisibility,\n      pagesContainerVisible = _ref.pagesContainerVisible,\n      _ref$props = _ref.props,\n      hasKnownLastPage = _ref$props.hasKnownLastPage,\n      infoText = _ref$props.infoText,\n      infoTextRef = _ref$props.infoTextRef,\n      maxPagesCount = _ref$props.maxPagesCount,\n      pageCount = _ref$props.pageCount,\n      pageIndex = _ref$props.pageIndex,\n      pageIndexChange = _ref$props.pageIndexChange,\n      pageSize = _ref$props.pageSize,\n      pageSizeChange = _ref$props.pageSizeChange,\n      pageSizes = _ref$props.pageSizes,\n      pageSizesRef = _ref$props.pageSizesRef,\n      pagesCountText = _ref$props.pagesCountText,\n      pagesRef = _ref$props.pagesRef,\n      rtlEnabled = _ref$props.rtlEnabled,\n      showNavigationButtons = _ref$props.showNavigationButtons,\n      showPageSizes = _ref$props.showPageSizes,\n      totalCount = _ref$props.totalCount,\n      visible = _ref$props.visible,\n      restAttributes = _ref.restAttributes,\n      widgetRootElementRef = _ref.widgetRootElementRef;\n  return normalizeProps(createComponentVNode(2, Widget, _extends({\n    rootElementRef: widgetRootElementRef,\n    rtlEnabled: rtlEnabled,\n    classes: classes,\n    visible: visible\n  }, restAttributes, {\n    children: [showPageSizes && createComponentVNode(2, PageSizeSelector, {\n      rootElementRef: pageSizesRef,\n      isLargeDisplayMode: isLargeDisplayMode,\n      pageSize: pageSize,\n      pageSizeChange: pageSizeChange,\n      pageSizes: pageSizes\n    }), pagesContainerVisible && createVNode(1, \"div\", PAGER_PAGES_CLASS, [infoVisible && createComponentVNode(2, InfoText, {\n      rootElementRef: infoTextRef,\n      infoText: infoText,\n      pageCount: pageCount,\n      pageIndex: pageIndex,\n      totalCount: totalCount\n    }), pageIndexSelectorVisible && createVNode(1, \"div\", PAGER_PAGE_INDEXES_CLASS, createComponentVNode(2, PageIndexSelector, {\n      hasKnownLastPage: hasKnownLastPage,\n      isLargeDisplayMode: isLargeDisplayMode,\n      maxPagesCount: maxPagesCount,\n      pageCount: pageCount,\n      pageIndex: pageIndex,\n      pageIndexChange: pageIndexChange,\n      pagesCountText: pagesCountText,\n      showNavigationButtons: showNavigationButtons,\n      totalCount: totalCount\n    }), 2, null, null, pagesRef)], 0, {\n      style: normalizeStyles({\n        visibility: pagesContainerVisibility\n      })\n    })]\n  })));\n};\nexport var PagerContentProps = Object.create(Object.prototype, _extends(Object.getOwnPropertyDescriptors(InternalPagerProps), Object.getOwnPropertyDescriptors({\n  infoTextVisible: true,\n  isLargeDisplayMode: true\n})));\nimport { createRef as infernoCreateRef } from \"inferno\";\nexport var PagerContent = /*#__PURE__*/(function () {\n  var PagerContent = /*#__PURE__*/function (_InfernoComponent) {\n    _inherits(PagerContent, _InfernoComponent);\n\n    var _super = _createSuper(PagerContent);\n\n    function PagerContent(props) {\n      var _this;\n\n      _classCallCheck(this, PagerContent);\n\n      _this = _super.call(this, props);\n      _this.state = {};\n      _this.widgetRootElementRef = infernoCreateRef();\n      _this.__getterCache = {};\n      _this.setRootElementRef = _this.setRootElementRef.bind(_assertThisInitialized(_this));\n      _this.createFakeInstance = _this.createFakeInstance.bind(_assertThisInitialized(_this));\n      return _this;\n    }\n\n    _createClass(PagerContent, [{\n      key: \"createEffects\",\n      value: function createEffects() {\n        return [new InfernoEffect(this.setRootElementRef, [])];\n      }\n    }, {\n      key: \"getChildContext\",\n      value: function getChildContext() {\n        return _extends({}, this.context, {\n          KeyboardActionContext: this.keyboardAction\n        });\n      }\n    }, {\n      key: \"setRootElementRef\",\n      value: function setRootElementRef() {\n        var rootElementRef = this.props.rootElementRef;\n\n        if (rootElementRef) {\n          rootElementRef.current = this.widgetRootElementRef.current;\n        }\n      }\n    }, {\n      key: \"createFakeInstance\",\n      value: function createFakeInstance() {\n        var _this2 = this;\n\n        return {\n          option: function option() {\n            return false;\n          },\n          element: function element() {\n            return _this2.widgetRootElementRef.current;\n          },\n          _createActionByOption: function _createActionByOption() {\n            return function (e) {\n              var _this$props$onKeyDown, _this$props;\n\n              null === (_this$props$onKeyDown = (_this$props = _this2.props).onKeyDown) || void 0 === _this$props$onKeyDown ? void 0 : _this$props$onKeyDown.call(_this$props, e);\n            };\n          }\n        };\n      }\n    }, {\n      key: \"keyboardAction\",\n      get: function get() {\n        var _this3 = this;\n\n        if (void 0 !== this.__getterCache.keyboardAction) {\n          return this.__getterCache.keyboardAction;\n        }\n\n        return this.__getterCache.keyboardAction = function () {\n          return {\n            registerKeyboardAction: function registerKeyboardAction(element, action) {\n              var fakePagerInstance = _this3.createFakeInstance();\n\n              return _registerKeyboardAction(\"pager\", fakePagerInstance, element, void 0, action);\n            }\n          };\n        }();\n      }\n    }, {\n      key: \"infoVisible\",\n      get: function get() {\n        var _this$props3 = this.props,\n            infoTextVisible = _this$props3.infoTextVisible,\n            showInfo = _this$props3.showInfo;\n        return showInfo && infoTextVisible && this.isLargeDisplayMode;\n      }\n    }, {\n      key: \"pageIndexSelectorVisible\",\n      get: function get() {\n        return 0 !== this.props.pageSize;\n      }\n    }, {\n      key: \"normalizedDisplayMode\",\n      get: function get() {\n        var _this$props4 = this.props,\n            displayMode = _this$props4.displayMode,\n            lightModeEnabled = _this$props4.lightModeEnabled;\n\n        if (\"adaptive\" === displayMode && void 0 !== lightModeEnabled) {\n          return lightModeEnabled ? \"compact\" : \"full\";\n        }\n\n        return displayMode;\n      }\n    }, {\n      key: \"pagesContainerVisible\",\n      get: function get() {\n        return !!this.props.pagesNavigatorVisible && this.props.pageCount > 0;\n      }\n    }, {\n      key: \"pagesContainerVisibility\",\n      get: function get() {\n        if (\"auto\" === this.props.pagesNavigatorVisible && 1 === this.props.pageCount && this.props.hasKnownLastPage) {\n          return \"hidden\";\n        }\n\n        return;\n      }\n    }, {\n      key: \"isLargeDisplayMode\",\n      get: function get() {\n        var displayMode = this.normalizedDisplayMode;\n        var result = false;\n\n        if (\"adaptive\" === displayMode) {\n          result = this.props.isLargeDisplayMode;\n        } else {\n          result = \"full\" === displayMode;\n        }\n\n        return result;\n      }\n    }, {\n      key: \"classes\",\n      get: function get() {\n        var _classesMap;\n\n        var classesMap = (_classesMap = {}, _defineProperty(_classesMap, \"\".concat(this.props.className), !!this.props.className), _defineProperty(_classesMap, PAGER_CLASS, true), _defineProperty(_classesMap, LIGHT_MODE_CLASS, !this.isLargeDisplayMode), _classesMap);\n        return combineClasses(classesMap);\n      }\n    }, {\n      key: \"restAttributes\",\n      get: function get() {\n        var _this$props2 = this.props,\n            restProps = _objectWithoutPropertiesLoose(_this$props2, _excluded);\n\n        return restProps;\n      }\n    }, {\n      key: \"componentWillUpdate\",\n      value: function componentWillUpdate(nextProps, nextState, context) {\n        _get(_getPrototypeOf(PagerContent.prototype), \"componentWillUpdate\", this).call(this);\n\n        if (this.props.onKeyDown !== nextProps.onKeyDown) {\n          this.__getterCache.keyboardAction = void 0;\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var props = this.props;\n        return viewFunction({\n          props: _extends({}, props),\n          widgetRootElementRef: this.widgetRootElementRef,\n          keyboardAction: this.keyboardAction,\n          infoVisible: this.infoVisible,\n          pageIndexSelectorVisible: this.pageIndexSelectorVisible,\n          pagesContainerVisible: this.pagesContainerVisible,\n          pagesContainerVisibility: this.pagesContainerVisibility,\n          isLargeDisplayMode: this.isLargeDisplayMode,\n          classes: this.classes,\n          restAttributes: this.restAttributes\n        });\n      }\n    }]);\n\n    return PagerContent;\n  }(InfernoComponent);\n\n  PagerContent.defaultProps = PagerContentProps;\n  return PagerContent;\n})();","map":null,"metadata":{},"sourceType":"module"}