{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/funnel/funnel.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { addAlgorithm, getAlgorithm } from \"./tiling\";\nimport dynamicSlope from \"./tiling.funnel\";\nimport dynamicHeight from \"./tiling.pyramid\";\nimport { noop } from \"../../core/utils/common\";\nimport baseWidget from \"../core/base_widget\";\nimport componentRegistrator from \"../../core/component_registrator\";\nimport Item from \"./item\";\nvar NODES_CREATE_CHANGE = \"NODES_CREATE\";\naddAlgorithm(\"dynamicslope\", dynamicSlope, true);\naddAlgorithm(\"dynamicheight\", dynamicHeight);\n\nfunction invertFigure(figure) {\n  return figure.map(function (coord, index) {\n    return index % 2 ? 1 - coord : coord;\n  });\n}\n\nfunction getLegendItemState(itemState) {\n  return {\n    fill: itemState.fill,\n    hatching: itemState.hatching\n  };\n}\n\nvar dxFunnel = baseWidget.inherit({\n  _rootClass: \"dxf-funnel\",\n  _rootClassPrefix: \"dxf\",\n  _proxyData: [],\n  _optionChangesMap: {\n    dataSource: \"DATA_SOURCE\",\n    neckWidth: NODES_CREATE_CHANGE,\n    neckHeight: NODES_CREATE_CHANGE,\n    inverted: NODES_CREATE_CHANGE,\n    algorithm: NODES_CREATE_CHANGE,\n    item: NODES_CREATE_CHANGE,\n    valueField: NODES_CREATE_CHANGE,\n    argumentField: NODES_CREATE_CHANGE,\n    colorField: NODES_CREATE_CHANGE,\n    palette: NODES_CREATE_CHANGE,\n    paletteExtensionMode: NODES_CREATE_CHANGE,\n    sortData: NODES_CREATE_CHANGE\n  },\n  _themeDependentChanges: [NODES_CREATE_CHANGE],\n  _getDefaultSize: function _getDefaultSize() {\n    return {\n      width: 400,\n      height: 400\n    };\n  },\n  _themeSection: \"funnel\",\n  _fontFields: [\"legend.title.font\", \"legend.title.subtitle.font\", \"legend.font\"],\n  _optionChangesOrder: [\"DATA_SOURCE\"],\n  _initialChanges: [\"DATA_SOURCE\"],\n  _initCore: function _initCore() {\n    this._group = this._renderer.g().append(this._renderer.root);\n    this._items = [];\n  },\n  _eventsMap: {\n    onHoverChanged: {\n      name: \"hoverChanged\"\n    },\n    onSelectionChanged: {\n      name: \"selectionChanged\"\n    }\n  },\n  _disposeCore: noop,\n  _applySize: function _applySize(rect) {\n    this._rect = rect.slice();\n\n    this._change([\"TILING\"]);\n\n    return this._rect;\n  },\n  _getAlignmentRect: function _getAlignmentRect() {\n    return this._rect;\n  },\n  _change_TILING: function _change_TILING() {\n    var that = this;\n    var items = that._items;\n    var rect = that._rect;\n\n    var convertCoord = function convertCoord(coord, index) {\n      var offset = index % 2;\n      return rect[0 + offset] + (rect[2 + offset] - rect[0 + offset]) * coord;\n    };\n\n    this._group.clear();\n\n    items.forEach(function (item, index) {\n      var coords = item.figure.map(convertCoord);\n\n      var element = that._renderer.path([], \"area\").attr({\n        points: coords\n      }).append(that._group);\n\n      item.coords = coords;\n      item.element = element;\n    });\n\n    this._requestChange([\"TILES\"]);\n  },\n  _customChangesOrder: [NODES_CREATE_CHANGE, \"LAYOUT\", \"TILING\", \"TILES\", \"DRAWN\"],\n  _dataSourceChangedHandler: function _dataSourceChangedHandler() {\n    this._requestChange([NODES_CREATE_CHANGE]);\n  },\n  _change_DRAWN: function _change_DRAWN() {\n    this._drawn();\n  },\n  _change_DATA_SOURCE: function _change_DATA_SOURCE() {\n    this._change([\"DRAWN\"]);\n\n    this._updateDataSource();\n  },\n  _change_NODES_CREATE: function _change_NODES_CREATE() {\n    this._buildNodes();\n  },\n  _change_TILES: function _change_TILES() {\n    this._applyTilesAppearance();\n  },\n  _suspend: function _suspend() {\n    if (!this._applyingChanges) {\n      this._suspendChanges();\n    }\n  },\n  _resume: function _resume() {\n    if (!this._applyingChanges) {\n      this._resumeChanges();\n    }\n  },\n  _applyTilesAppearance: function _applyTilesAppearance() {\n    this._items.forEach(function (item) {\n      var state = item.getState();\n      item.element.smartAttr(item.states[state]);\n    });\n  },\n  _hitTestTargets: function _hitTestTargets(x, y) {\n    var that = this;\n    var data;\n\n    this._proxyData.some(function (callback) {\n      data = callback.call(that, x, y);\n\n      if (data) {\n        return true;\n      }\n    });\n\n    return data;\n  },\n  clearHover: function clearHover() {\n    this._suspend();\n\n    this._items.forEach(function (item) {\n      item.isHovered() && item.hover(false);\n    });\n\n    this._resume();\n  },\n  clearSelection: function clearSelection() {\n    this._suspend();\n\n    this._items.forEach(function (item) {\n      item.isSelected() && item.select(false);\n    });\n\n    this._resume();\n  },\n  _getData: function _getData() {\n    var data = this._dataSourceItems() || [];\n\n    var valueField = this._getOption(\"valueField\", true);\n\n    var argumentField = this._getOption(\"argumentField\", true);\n\n    var colorField = this._getOption(\"colorField\", true);\n\n    var processedData = data.reduce(function (d, item) {\n      var value = Number(item[valueField]);\n\n      if (value >= 0) {\n        d[0].push({\n          value: value,\n          color: item[colorField],\n          argument: item[argumentField],\n          dataItem: item\n        });\n        d[1] += value;\n      }\n\n      return d;\n    }, [[], 0]);\n    var items = processedData[0];\n\n    if (data.length > 0 && 0 === items.length) {\n      this._incidentOccurred(\"E2005\", valueField);\n    }\n\n    if (!processedData[1]) {\n      return [];\n    }\n\n    if (this._getOption(\"sortData\", true)) {\n      items.sort(function (a, b) {\n        return b.value - a.value;\n      });\n    }\n\n    return items;\n  },\n  _buildNodes: function _buildNodes() {\n    var that = this;\n\n    var data = that._getData();\n\n    var algorithm = getAlgorithm(that._getOption(\"algorithm\", true));\n    var percents = algorithm.normalizeValues(data);\n\n    var itemOptions = that._getOption(\"item\");\n\n    var figures = algorithm.getFigures(percents, that._getOption(\"neckWidth\", true), that._getOption(\"neckHeight\", true));\n\n    var palette = that._themeManager.createPalette(that._getOption(\"palette\", true), {\n      useHighlight: true,\n      extensionMode: that._getOption(\"paletteExtensionMode\", true),\n      count: figures.length\n    });\n\n    that._items = figures.map(function (figure, index) {\n      var curData = data[index];\n      var node = new Item(that, {\n        figure: figure,\n        data: curData,\n        percent: percents[index],\n        id: index,\n        color: curData.color || palette.getNextColor(),\n        itemOptions: itemOptions\n      });\n      return node;\n    });\n\n    if (that._getOption(\"inverted\", true)) {\n      that._items.forEach(function (item) {\n        item.figure = invertFigure(item.figure);\n      });\n    }\n\n    that._renderer.initHatching();\n\n    that._change([\"TILING\", \"DRAWN\"]);\n  },\n  _showTooltip: noop,\n  hideTooltip: noop,\n  getAllItems: function getAllItems() {\n    return this._items.slice();\n  },\n  _getLegendData: function _getLegendData() {\n    return this._items.map(function (item) {\n      var states = item.states;\n      return {\n        id: item.id,\n        visible: true,\n        text: item.argument,\n        item: item,\n        states: {\n          normal: getLegendItemState(states.normal),\n          hover: getLegendItemState(states.hover),\n          selection: getLegendItemState(states.selection)\n        }\n      };\n    });\n  },\n  _getMinSize: function _getMinSize() {\n    var adaptiveLayout = this._getOption(\"adaptiveLayout\");\n\n    return [adaptiveLayout.width, adaptiveLayout.height];\n  }\n});\ncomponentRegistrator(\"dxFunnel\", dxFunnel);\nexport default dxFunnel;\nimport { plugin } from \"../core/data_source\";\ndxFunnel.addPlugin(plugin);","map":null,"metadata":{},"sourceType":"module"}