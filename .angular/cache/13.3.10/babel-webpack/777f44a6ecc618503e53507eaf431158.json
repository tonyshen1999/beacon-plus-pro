{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/ui/date_box/ui.date_view_roller.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getHeight } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport registerComponent from \"../../core/component_registrator\";\nimport { extend } from \"../../core/utils/extend\";\nimport { each } from \"../../core/utils/iterator\";\nimport { addNamespace } from \"../../events/utils/index\";\nimport { name as clickEventName } from \"../../events/click\";\nimport Scrollable from \"../scroll_view/ui.scrollable\";\nimport devices from \"../../core/devices\";\nimport fx from \"../../animation/fx\";\nimport { resetPosition } from \"../../animation/translator\";\nimport { convertToLocation } from \"../../renovation/ui/scroll_view/utils/convert_location\";\nvar DATEVIEW_ROLLER_CLASS = \"dx-dateviewroller\";\nvar DATEVIEW_ROLLER_ACTIVE_CLASS = \"dx-state-active\";\nvar DATEVIEW_ROLLER_CURRENT_CLASS = \"dx-dateviewroller-current\";\nvar DATEVIEW_ROLLER_ITEM_CLASS = \"dx-dateview-item\";\nvar DATEVIEW_ROLLER_ITEM_SELECTED_CLASS = \"dx-dateview-item-selected\";\nvar DATEVIEW_ROLLER_ITEM_SELECTED_FRAME_CLASS = \"dx-dateview-item-selected-frame\";\nvar DATEVIEW_ROLLER_ITEM_SELECTED_BORDER_CLASS = \"dx-dateview-item-selected-border\";\n\nvar DateViewRoller = /*#__PURE__*/function (_Scrollable) {\n  _inherits(DateViewRoller, _Scrollable);\n\n  var _super = _createSuper(DateViewRoller);\n\n  function DateViewRoller() {\n    _classCallCheck(this, DateViewRoller);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DateViewRoller, [{\n    key: \"_getDefaultOptions\",\n    value: function _getDefaultOptions() {\n      return extend(_get(_getPrototypeOf(DateViewRoller.prototype), \"_getDefaultOptions\", this).call(this), {\n        showScrollbar: \"never\",\n        useNative: false,\n        selectedIndex: 0,\n        bounceEnabled: false,\n        items: [],\n        showOnClick: false,\n        onClick: null,\n        onSelectedIndexChanged: null,\n        scrollByContent: true\n      });\n    }\n  }, {\n    key: \"_init\",\n    value: function _init() {\n      _get(_getPrototypeOf(DateViewRoller.prototype), \"_init\", this).call(this);\n\n      this.option(\"onVisibilityChange\", this._visibilityChangedHandler.bind(this));\n      this.option(\"onEnd\", this._endActionHandler.bind(this));\n    }\n  }, {\n    key: \"_render\",\n    value: function _render() {\n      _get(_getPrototypeOf(DateViewRoller.prototype), \"_render\", this).call(this);\n\n      this._renderSelectedItemFrame();\n\n      this.$element().addClass(DATEVIEW_ROLLER_CLASS);\n\n      this._renderContainerClick();\n\n      this._renderItems();\n\n      this._renderSelectedValue();\n\n      this._renderItemsClick();\n\n      this._renderWheelEvent();\n\n      this._renderSelectedIndexChanged();\n    }\n  }, {\n    key: \"_renderSelectedIndexChanged\",\n    value: function _renderSelectedIndexChanged() {\n      this._selectedIndexChanged = this._createActionByOption(\"onSelectedIndexChanged\");\n    }\n  }, {\n    key: \"_renderWheelEvent\",\n    value: function _renderWheelEvent() {\n      var _this = this;\n\n      eventsEngine.on($(this.container()), \"dxmousewheel\", function (e) {\n        _this._isWheelScrolled = true;\n      });\n    }\n  }, {\n    key: \"_renderContainerClick\",\n    value: function _renderContainerClick() {\n      if (!this.option(\"showOnClick\")) {\n        return;\n      }\n\n      var eventName = addNamespace(clickEventName, this.NAME);\n\n      var clickAction = this._createActionByOption(\"onClick\");\n\n      eventsEngine.off($(this.container()), eventName);\n      eventsEngine.on($(this.container()), eventName, function (e) {\n        clickAction({\n          event: e\n        });\n      });\n    }\n  }, {\n    key: \"_renderItems\",\n    value: function _renderItems() {\n      var items = this.option(\"items\") || [];\n      var $items = $();\n      $(this.content()).empty();\n      items.forEach(function (item) {\n        $items = $items.add($(\"<div>\").addClass(DATEVIEW_ROLLER_ITEM_CLASS).append(item));\n      });\n      $(this.content()).append($items);\n      this._$items = $items;\n      this.update();\n    }\n  }, {\n    key: \"_renderSelectedItemFrame\",\n    value: function _renderSelectedItemFrame() {\n      $(\"<div>\").addClass(DATEVIEW_ROLLER_ITEM_SELECTED_FRAME_CLASS).append($(\"<div>\").addClass(DATEVIEW_ROLLER_ITEM_SELECTED_BORDER_CLASS)).appendTo($(this.container()));\n    }\n  }, {\n    key: \"_renderSelectedValue\",\n    value: function _renderSelectedValue(selectedIndex) {\n      var index = this._fitIndex(null !== selectedIndex && void 0 !== selectedIndex ? selectedIndex : this.option(\"selectedIndex\"));\n\n      this._moveTo({\n        top: this._getItemPosition(index)\n      });\n\n      this._renderActiveStateItem();\n    }\n  }, {\n    key: \"_fitIndex\",\n    value: function _fitIndex(index) {\n      var items = this.option(\"items\") || [];\n      var itemCount = items.length;\n\n      if (index >= itemCount) {\n        return itemCount - 1;\n      }\n\n      if (index < 0) {\n        return 0;\n      }\n\n      return index;\n    }\n  }, {\n    key: \"_getItemPosition\",\n    value: function _getItemPosition(index) {\n      return Math.round(this._itemHeight() * index);\n    }\n  }, {\n    key: \"_renderItemsClick\",\n    value: function _renderItemsClick() {\n      var itemSelector = this._getItemSelector();\n\n      var eventName = addNamespace(clickEventName, this.NAME);\n      eventsEngine.off(this.$element(), eventName, itemSelector);\n      eventsEngine.on(this.$element(), eventName, itemSelector, this._itemClickHandler.bind(this));\n    }\n  }, {\n    key: \"_getItemSelector\",\n    value: function _getItemSelector() {\n      return \".\" + DATEVIEW_ROLLER_ITEM_CLASS;\n    }\n  }, {\n    key: \"_itemClickHandler\",\n    value: function _itemClickHandler(e) {\n      this.option(\"selectedIndex\", this._itemElementIndex(e.currentTarget));\n    }\n  }, {\n    key: \"_itemElementIndex\",\n    value: function _itemElementIndex(itemElement) {\n      return this._itemElements().index(itemElement);\n    }\n  }, {\n    key: \"_itemElements\",\n    value: function _itemElements() {\n      return this.$element().find(this._getItemSelector());\n    }\n  }, {\n    key: \"_renderActiveStateItem\",\n    value: function _renderActiveStateItem() {\n      var selectedIndex = this.option(\"selectedIndex\");\n      each(this._$items, function (index) {\n        $(this).toggleClass(DATEVIEW_ROLLER_ITEM_SELECTED_CLASS, selectedIndex === index);\n      });\n    }\n  }, {\n    key: \"_shouldScrollToNeighborItem\",\n    value: function _shouldScrollToNeighborItem() {\n      return \"desktop\" === devices.real().deviceType && this._isWheelScrolled;\n    }\n  }, {\n    key: \"_moveTo\",\n    value: function _moveTo(targetLocation) {\n      var _convertToLocation = convertToLocation(targetLocation),\n          top = _convertToLocation.top,\n          left = _convertToLocation.left;\n\n      var location = this.scrollOffset();\n      var delta = {\n        x: location.left - left,\n        y: location.top - top\n      };\n\n      if (this._isVisible() && (delta.x || delta.y)) {\n        this._prepareDirections(true);\n\n        if (this._animation && !this._shouldScrollToNeighborItem()) {\n          var that = this;\n          fx.stop($(this.content()));\n          fx.animate($(this.content()), {\n            duration: 200,\n            type: \"slide\",\n            to: {\n              top: Math.floor(delta.y)\n            },\n            complete: function complete() {\n              resetPosition($(that.content()));\n              that.handleMove({\n                delta: delta\n              });\n            }\n          });\n          delete this._animation;\n        } else {\n          this.handleMove({\n            delta: delta\n          });\n        }\n      }\n    }\n  }, {\n    key: \"_validate\",\n    value: function _validate(e) {\n      return this._moveIsAllowed(e);\n    }\n  }, {\n    key: \"_fitSelectedIndexInRange\",\n    value: function _fitSelectedIndexInRange(index) {\n      var itemsCount = this.option(\"items\").length;\n      return Math.max(Math.min(index, itemsCount - 1), 0);\n    }\n  }, {\n    key: \"_isInNullNeighborhood\",\n    value: function _isInNullNeighborhood(x) {\n      return -.1 <= x && x <= .1;\n    }\n  }, {\n    key: \"_getSelectedIndexAfterScroll\",\n    value: function _getSelectedIndexAfterScroll(currentSelectedIndex) {\n      var locationTop = this.scrollOffset().top;\n\n      var currentSelectedIndexPosition = currentSelectedIndex * this._itemHeight();\n\n      var dy = locationTop - currentSelectedIndexPosition;\n\n      if (this._isInNullNeighborhood(dy)) {\n        return currentSelectedIndex;\n      }\n\n      var direction = dy > 0 ? 1 : -1;\n\n      var newSelectedIndex = this._fitSelectedIndexInRange(currentSelectedIndex + direction);\n\n      return newSelectedIndex;\n    }\n  }, {\n    key: \"_getNewSelectedIndex\",\n    value: function _getNewSelectedIndex(currentSelectedIndex) {\n      if (this._shouldScrollToNeighborItem()) {\n        return this._getSelectedIndexAfterScroll(currentSelectedIndex);\n      }\n\n      this._animation = true;\n\n      var ratio = this.scrollOffset().top / this._itemHeight();\n\n      return Math.round(ratio);\n    }\n  }, {\n    key: \"_endActionHandler\",\n    value: function _endActionHandler() {\n      var currentSelectedIndex = this.option(\"selectedIndex\");\n\n      var newSelectedIndex = this._getNewSelectedIndex(currentSelectedIndex);\n\n      if (newSelectedIndex === currentSelectedIndex) {\n        this._renderSelectedValue(newSelectedIndex);\n      } else {\n        this.option(\"selectedIndex\", newSelectedIndex);\n      }\n\n      this._isWheelScrolled = false;\n    }\n  }, {\n    key: \"_itemHeight\",\n    value: function _itemHeight() {\n      var $item = this._$items.first();\n\n      return getHeight($item);\n    }\n  }, {\n    key: \"_toggleActive\",\n    value: function _toggleActive(state) {\n      this.$element().toggleClass(DATEVIEW_ROLLER_ACTIVE_CLASS, state);\n    }\n  }, {\n    key: \"_isVisible\",\n    value: function _isVisible() {\n      return $(this.container()).is(\":visible\");\n    }\n  }, {\n    key: \"_fireSelectedIndexChanged\",\n    value: function _fireSelectedIndexChanged(value, previousValue) {\n      this._selectedIndexChanged({\n        value: value,\n        previousValue: previousValue,\n        event: void 0\n      });\n    }\n  }, {\n    key: \"_visibilityChanged\",\n    value: function _visibilityChanged(visible) {\n      _get(_getPrototypeOf(DateViewRoller.prototype), \"_visibilityChanged\", this).call(this, visible);\n\n      this._visibilityChangedHandler(visible);\n    }\n  }, {\n    key: \"_visibilityChangedHandler\",\n    value: function _visibilityChangedHandler(visible) {\n      var _this2 = this;\n\n      if (visible) {\n        this._visibilityTimer = setTimeout(function () {\n          _this2._renderSelectedValue(_this2.option(\"selectedIndex\"));\n        });\n      }\n\n      this.toggleActiveState(false);\n    }\n  }, {\n    key: \"toggleActiveState\",\n    value: function toggleActiveState(state) {\n      this.$element().toggleClass(DATEVIEW_ROLLER_CURRENT_CLASS, state);\n    }\n  }, {\n    key: \"_refreshSelectedIndex\",\n    value: function _refreshSelectedIndex() {\n      var selectedIndex = this.option(\"selectedIndex\");\n\n      var fitIndex = this._fitIndex(selectedIndex);\n\n      if (fitIndex === selectedIndex) {\n        this._renderActiveStateItem();\n      } else {\n        this.option(\"selectedIndex\", fitIndex);\n      }\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function _optionChanged(args) {\n      switch (args.name) {\n        case \"selectedIndex\":\n          this._fireSelectedIndexChanged(args.value, args.previousValue);\n\n          this._renderSelectedValue(args.value);\n\n          break;\n\n        case \"items\":\n          this._renderItems();\n\n          this._refreshSelectedIndex();\n\n          break;\n\n        case \"onClick\":\n        case \"showOnClick\":\n          this._renderContainerClick();\n\n          break;\n\n        case \"onSelectedIndexChanged\":\n          this._renderSelectedIndexChanged();\n\n          break;\n\n        default:\n          _get(_getPrototypeOf(DateViewRoller.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }, {\n    key: \"_dispose\",\n    value: function _dispose() {\n      clearTimeout(this._visibilityTimer);\n\n      _get(_getPrototypeOf(DateViewRoller.prototype), \"_dispose\", this).call(this);\n    }\n  }]);\n\n  return DateViewRoller;\n}(Scrollable);\n\nregisterComponent(\"dxDateViewRoller\", DateViewRoller);\nexport default DateViewRoller;","map":null,"metadata":{},"sourceType":"module"}