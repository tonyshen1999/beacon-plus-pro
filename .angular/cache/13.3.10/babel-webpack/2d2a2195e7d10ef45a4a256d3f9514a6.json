{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __decorate, __metadata, __param } from 'tslib';\nimport { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, Component, NgModule } from '@angular/core';\nimport DxSortable from 'devextreme/ui/sortable';\nimport { DxComponent, DxTemplateHost, WatcherHelper, NestedOptionHost, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxoCursorOffsetModule } from 'devextreme-angular/ui/nested';\n/*!\r\n * devextreme-angular\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\n/**\r\n * Sortable is a user interface utility that allows a UI component&apos;s items to be reordered via drag and drop gestures.\r\n\r\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'devextreme-angular/core';\nimport * as ɵngcc2 from '@angular/platform-browser';\nvar _c0 = [\"*\"];\nvar DxSortableComponent = /*#__PURE__*/(function () {\n  var DxSortableComponent = /*#__PURE__*/function (_DxComponent) {\n    _inherits(DxSortableComponent, _DxComponent);\n\n    var _super = _createSuper(DxSortableComponent);\n\n    function DxSortableComponent(elementRef, ngZone, templateHost, _watcherHelper, optionHost, transferState, platformId) {\n      var _this;\n\n      _classCallCheck(this, DxSortableComponent);\n\n      _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n\n      _this._createEventEmitters([{\n        subscribe: 'add',\n        emit: 'onAdd'\n      }, {\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'dragChange',\n        emit: 'onDragChange'\n      }, {\n        subscribe: 'dragEnd',\n        emit: 'onDragEnd'\n      }, {\n        subscribe: 'dragMove',\n        emit: 'onDragMove'\n      }, {\n        subscribe: 'dragStart',\n        emit: 'onDragStart'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        subscribe: 'remove',\n        emit: 'onRemove'\n      }, {\n        subscribe: 'reorder',\n        emit: 'onReorder'\n      }, {\n        emit: 'allowDropInsideItemChange'\n      }, {\n        emit: 'allowReorderingChange'\n      }, {\n        emit: 'autoScrollChange'\n      }, {\n        emit: 'boundaryChange'\n      }, {\n        emit: 'containerChange'\n      }, {\n        emit: 'cursorOffsetChange'\n      }, {\n        emit: 'dataChange'\n      }, {\n        emit: 'dragDirectionChange'\n      }, {\n        emit: 'dragTemplateChange'\n      }, {\n        emit: 'dropFeedbackModeChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'filterChange'\n      }, {\n        emit: 'groupChange'\n      }, {\n        emit: 'handleChange'\n      }, {\n        emit: 'heightChange'\n      }, {\n        emit: 'itemOrientationChange'\n      }, {\n        emit: 'moveItemOnDropChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'scrollSensitivityChange'\n      }, {\n        emit: 'scrollSpeedChange'\n      }, {\n        emit: 'widthChange'\n      }]);\n\n      optionHost.setHost(_assertThisInitialized(_this));\n      return _this;\n    }\n    /**\r\n     * Allows a user to drop an item inside another item.\r\n    \r\n     */\n\n\n    _createClass(DxSortableComponent, [{\n      key: \"allowDropInsideItem\",\n      get: function get() {\n        return this._getOption('allowDropInsideItem');\n      },\n      set: function set(value) {\n        this._setOption('allowDropInsideItem', value);\n      }\n      /**\r\n       * Allows a user to reorder sortable items.\r\n      \r\n       */\n\n    }, {\n      key: \"allowReordering\",\n      get: function get() {\n        return this._getOption('allowReordering');\n      },\n      set: function set(value) {\n        this._setOption('allowReordering', value);\n      }\n      /**\r\n       * Enables automatic scrolling while dragging an item beyond the viewport.\r\n      \r\n       */\n\n    }, {\n      key: \"autoScroll\",\n      get: function get() {\n        return this._getOption('autoScroll');\n      },\n      set: function set(value) {\n        this._setOption('autoScroll', value);\n      }\n      /**\r\n       * Specifies a DOM element that limits the dragging area.\r\n      \r\n       */\n\n    }, {\n      key: \"boundary\",\n      get: function get() {\n        return this._getOption('boundary');\n      },\n      set: function set(value) {\n        this._setOption('boundary', value);\n      }\n      /**\r\n       * Specifies a custom container in which the draggable item should be rendered.\r\n      \r\n       */\n\n    }, {\n      key: \"container\",\n      get: function get() {\n        return this._getOption('container');\n      },\n      set: function set(value) {\n        this._setOption('container', value);\n      }\n      /**\r\n       * Specifies the cursor offset from the dragged item.\r\n      \r\n       */\n\n    }, {\n      key: \"cursorOffset\",\n      get: function get() {\n        return this._getOption('cursorOffset');\n      },\n      set: function set(value) {\n        this._setOption('cursorOffset', value);\n      }\n      /**\r\n       * A container for custom data.\r\n      \r\n       */\n\n    }, {\n      key: \"data\",\n      get: function get() {\n        return this._getOption('data');\n      },\n      set: function set(value) {\n        this._setOption('data', value);\n      }\n      /**\r\n       * Specifies the directions in which an item can be dragged.\r\n      \r\n       */\n\n    }, {\n      key: \"dragDirection\",\n      get: function get() {\n        return this._getOption('dragDirection');\n      },\n      set: function set(value) {\n        this._setOption('dragDirection', value);\n      }\n      /**\r\n       * Specifies custom markup to be shown instead of the item being dragged.\r\n      \r\n       */\n\n    }, {\n      key: \"dragTemplate\",\n      get: function get() {\n        return this._getOption('dragTemplate');\n      },\n      set: function set(value) {\n        this._setOption('dragTemplate', value);\n      }\n      /**\r\n       * Specifies how to highlight the item&apos;s drop position.\r\n      \r\n       */\n\n    }, {\n      key: \"dropFeedbackMode\",\n      get: function get() {\n        return this._getOption('dropFeedbackMode');\n      },\n      set: function set(value) {\n        this._setOption('dropFeedbackMode', value);\n      }\n      /**\r\n       * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n      \r\n       */\n\n    }, {\n      key: \"elementAttr\",\n      get: function get() {\n        return this._getOption('elementAttr');\n      },\n      set: function set(value) {\n        this._setOption('elementAttr', value);\n      }\n      /**\r\n       * Specifies a CSS selector for the items that can be dragged.\r\n      \r\n       */\n\n    }, {\n      key: \"filter\",\n      get: function get() {\n        return this._getOption('filter');\n      },\n      set: function set(value) {\n        this._setOption('filter', value);\n      }\n      /**\r\n       * Allows you to group several UI components, so that users can drag and drop items between them.\r\n      \r\n       */\n\n    }, {\n      key: \"group\",\n      get: function get() {\n        return this._getOption('group');\n      },\n      set: function set(value) {\n        this._setOption('group', value);\n      }\n      /**\r\n       * Specifies a CSS selector (ID or class) that should act as the drag handle(s) for the item(s).\r\n      \r\n       */\n\n    }, {\n      key: \"handle\",\n      get: function get() {\n        return this._getOption('handle');\n      },\n      set: function set(value) {\n        this._setOption('handle', value);\n      }\n      /**\r\n       * Specifies the UI component&apos;s height.\r\n      \r\n       */\n\n    }, {\n      key: \"height\",\n      get: function get() {\n        return this._getOption('height');\n      },\n      set: function set(value) {\n        this._setOption('height', value);\n      }\n      /**\r\n       * Notifies the UI component of the items&apos; orientation.\r\n      \r\n       */\n\n    }, {\n      key: \"itemOrientation\",\n      get: function get() {\n        return this._getOption('itemOrientation');\n      },\n      set: function set(value) {\n        this._setOption('itemOrientation', value);\n      }\n      /**\r\n       * Moves an element in the HTML markup when it is dropped.\r\n      \r\n       */\n\n    }, {\n      key: \"moveItemOnDrop\",\n      get: function get() {\n        return this._getOption('moveItemOnDrop');\n      },\n      set: function set(value) {\n        this._setOption('moveItemOnDrop', value);\n      }\n      /**\r\n       * Switches the UI component to a right-to-left representation.\r\n      \r\n       */\n\n    }, {\n      key: \"rtlEnabled\",\n      get: function get() {\n        return this._getOption('rtlEnabled');\n      },\n      set: function set(value) {\n        this._setOption('rtlEnabled', value);\n      }\n      /**\r\n       * Specifies the distance in pixels from the edge of viewport at which scrolling should start. Applies only if autoScroll is true.\r\n      \r\n       */\n\n    }, {\n      key: \"scrollSensitivity\",\n      get: function get() {\n        return this._getOption('scrollSensitivity');\n      },\n      set: function set(value) {\n        this._setOption('scrollSensitivity', value);\n      }\n      /**\r\n       * Specifies the scrolling speed when dragging an item beyond the viewport. Applies only if autoScroll is true.\r\n      \r\n       */\n\n    }, {\n      key: \"scrollSpeed\",\n      get: function get() {\n        return this._getOption('scrollSpeed');\n      },\n      set: function set(value) {\n        this._setOption('scrollSpeed', value);\n      }\n      /**\r\n       * Specifies the UI component&apos;s width.\r\n      \r\n       */\n\n    }, {\n      key: \"width\",\n      get: function get() {\n        return this._getOption('width');\n      },\n      set: function set(value) {\n        this._setOption('width', value);\n      }\n    }, {\n      key: \"_createInstance\",\n      value: function _createInstance(element, options) {\n        return new DxSortable(element, options);\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._destroyWidget();\n      }\n    }]);\n\n    return DxSortableComponent;\n  }(DxComponent);\n\n  DxSortableComponent.ɵfac = function DxSortableComponent_Factory(t) {\n    return new (t || DxSortableComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DxTemplateHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.WatcherHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TransferState), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n\n  DxSortableComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: DxSortableComponent,\n    selectors: [[\"dx-sortable\"]],\n    inputs: {\n      allowDropInsideItem: \"allowDropInsideItem\",\n      allowReordering: \"allowReordering\",\n      autoScroll: \"autoScroll\",\n      boundary: \"boundary\",\n      container: \"container\",\n      cursorOffset: \"cursorOffset\",\n      data: \"data\",\n      dragDirection: \"dragDirection\",\n      dragTemplate: \"dragTemplate\",\n      dropFeedbackMode: \"dropFeedbackMode\",\n      elementAttr: \"elementAttr\",\n      filter: \"filter\",\n      group: \"group\",\n      handle: \"handle\",\n      height: \"height\",\n      itemOrientation: \"itemOrientation\",\n      moveItemOnDrop: \"moveItemOnDrop\",\n      rtlEnabled: \"rtlEnabled\",\n      scrollSensitivity: \"scrollSensitivity\",\n      scrollSpeed: \"scrollSpeed\",\n      width: \"width\"\n    },\n    outputs: {\n      onAdd: \"onAdd\",\n      onDisposing: \"onDisposing\",\n      onDragChange: \"onDragChange\",\n      onDragEnd: \"onDragEnd\",\n      onDragMove: \"onDragMove\",\n      onDragStart: \"onDragStart\",\n      onInitialized: \"onInitialized\",\n      onOptionChanged: \"onOptionChanged\",\n      onRemove: \"onRemove\",\n      onReorder: \"onReorder\",\n      allowDropInsideItemChange: \"allowDropInsideItemChange\",\n      allowReorderingChange: \"allowReorderingChange\",\n      autoScrollChange: \"autoScrollChange\",\n      boundaryChange: \"boundaryChange\",\n      containerChange: \"containerChange\",\n      cursorOffsetChange: \"cursorOffsetChange\",\n      dataChange: \"dataChange\",\n      dragDirectionChange: \"dragDirectionChange\",\n      dragTemplateChange: \"dragTemplateChange\",\n      dropFeedbackModeChange: \"dropFeedbackModeChange\",\n      elementAttrChange: \"elementAttrChange\",\n      filterChange: \"filterChange\",\n      groupChange: \"groupChange\",\n      handleChange: \"handleChange\",\n      heightChange: \"heightChange\",\n      itemOrientationChange: \"itemOrientationChange\",\n      moveItemOnDropChange: \"moveItemOnDropChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      scrollSensitivityChange: \"scrollSensitivityChange\",\n      scrollSpeedChange: \"scrollSpeedChange\",\n      widthChange: \"widthChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, NestedOptionHost]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function DxSortableComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxSortableComponent.prototype, \"allowDropInsideItem\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxSortableComponent.prototype, \"allowReordering\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxSortableComponent.prototype, \"autoScroll\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxSortableComponent.prototype, \"boundary\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxSortableComponent.prototype, \"container\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxSortableComponent.prototype, \"cursorOffset\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxSortableComponent.prototype, \"data\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxSortableComponent.prototype, \"dragDirection\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxSortableComponent.prototype, \"dragTemplate\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxSortableComponent.prototype, \"dropFeedbackMode\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxSortableComponent.prototype, \"elementAttr\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxSortableComponent.prototype, \"filter\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxSortableComponent.prototype, \"group\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxSortableComponent.prototype, \"handle\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxSortableComponent.prototype, \"height\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxSortableComponent.prototype, \"itemOrientation\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxSortableComponent.prototype, \"moveItemOnDrop\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxSortableComponent.prototype, \"rtlEnabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], DxSortableComponent.prototype, \"scrollSensitivity\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], DxSortableComponent.prototype, \"scrollSpeed\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxSortableComponent.prototype, \"width\", null);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSortableComponent.prototype, \"onAdd\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSortableComponent.prototype, \"onDisposing\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSortableComponent.prototype, \"onDragChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSortableComponent.prototype, \"onDragEnd\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSortableComponent.prototype, \"onDragMove\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSortableComponent.prototype, \"onDragStart\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSortableComponent.prototype, \"onInitialized\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSortableComponent.prototype, \"onOptionChanged\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSortableComponent.prototype, \"onRemove\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSortableComponent.prototype, \"onReorder\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSortableComponent.prototype, \"allowDropInsideItemChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSortableComponent.prototype, \"allowReorderingChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSortableComponent.prototype, \"autoScrollChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSortableComponent.prototype, \"boundaryChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSortableComponent.prototype, \"containerChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSortableComponent.prototype, \"cursorOffsetChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSortableComponent.prototype, \"dataChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSortableComponent.prototype, \"dragDirectionChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSortableComponent.prototype, \"dragTemplateChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSortableComponent.prototype, \"dropFeedbackModeChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSortableComponent.prototype, \"elementAttrChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSortableComponent.prototype, \"filterChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSortableComponent.prototype, \"groupChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSortableComponent.prototype, \"handleChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSortableComponent.prototype, \"heightChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSortableComponent.prototype, \"itemOrientationChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSortableComponent.prototype, \"moveItemOnDropChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSortableComponent.prototype, \"rtlEnabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSortableComponent.prototype, \"scrollSensitivityChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSortableComponent.prototype, \"scrollSpeedChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSortableComponent.prototype, \"widthChange\", void 0);\n\n  DxSortableComponent = __decorate([__param(6, Inject(PLATFORM_ID)), __metadata(\"design:paramtypes\", [ElementRef, NgZone, DxTemplateHost, WatcherHelper, NestedOptionHost, TransferState, Object])], DxSortableComponent);\n  return DxSortableComponent;\n})();\nvar DxSortableModule = /*#__PURE__*/(function () {\n  var DxSortableModule = /*#__PURE__*/_createClass(function DxSortableModule() {\n    _classCallCheck(this, DxSortableModule);\n  });\n\n  DxSortableModule.ɵfac = function DxSortableModule_Factory(t) {\n    return new (t || DxSortableModule)();\n  };\n\n  DxSortableModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: DxSortableModule\n  });\n  DxSortableModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[DxoCursorOffsetModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxoCursorOffsetModule, DxTemplateModule]\n  });\n  return DxSortableModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxSortableModule, {\n    declarations: function declarations() {\n      return [DxSortableComponent];\n    },\n    imports: function imports() {\n      return [DxoCursorOffsetModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule];\n    },\n    exports: function exports() {\n      return [DxSortableComponent, DxoCursorOffsetModule, DxTemplateModule];\n    }\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DxSortableComponent, DxSortableModule }; //# sourceMappingURL=devextreme-angular-ui-sortable.js.map","map":null,"metadata":{},"sourceType":"module"}