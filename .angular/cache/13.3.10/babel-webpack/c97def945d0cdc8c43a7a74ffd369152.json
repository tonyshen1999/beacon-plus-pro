{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/**\r\n * DevExtreme (esm/ui/toolbar/ui.toolbar.drop_down_menu.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport domAdapter from \"../../core/dom_adapter\";\nimport ToolbarMenu from \"./ui.toolbar.menu\";\nimport DropDownMenu from \"../drop_down_menu\";\nimport devices from \"../../core/devices\";\nimport { each } from \"../../core/utils/iterator\";\nimport { compileGetter } from \"../../core/utils/data\";\nvar MENU_INVISIBLE_CLASS = \"dx-state-invisible\";\nvar TOOLBAR_dropDownMenu_CONTAINER_CLASS = \"dx-toolbar-menu-container\";\nvar POPOVER_BOUNDARY_OFFSET = 10;\n\nvar ToolbarDropDownMenu = /*#__PURE__*/function () {\n  function ToolbarDropDownMenu(toolbar) {\n    _classCallCheck(this, ToolbarDropDownMenu);\n\n    this._toolbar = toolbar;\n  }\n\n  _createClass(ToolbarDropDownMenu, [{\n    key: \"render\",\n    value: function render() {\n      if (!this._hasVisibleMenuItems()) {\n        return;\n      }\n\n      this._renderMenuButtonContainer();\n\n      var $menu = $(\"<div>\").appendTo(this._dropDownMenuContainer());\n      this._dropDownMenu = this._toolbar._createComponent($menu, DropDownMenu, this._dropDownMenuOptions());\n      this.renderMenuItems();\n    }\n  }, {\n    key: \"renderMenuItems\",\n    value: function renderMenuItems() {\n      if (!this._dropDownMenu) {\n        this.render();\n      }\n\n      this._dropDownMenu && this._dropDownMenu.option(\"items\", this._getMenuItems());\n\n      if (this._dropDownMenu && !this._dropDownMenu.option(\"items\").length) {\n        this._dropDownMenu.close();\n      }\n    }\n  }, {\n    key: \"_renderMenuButtonContainer\",\n    value: function _renderMenuButtonContainer() {\n      var $afterSection = this._toolbar._$afterSection;\n      this._$menuButtonContainer = $(\"<div>\").appendTo($afterSection).addClass(this._toolbar._buttonClass()).addClass(TOOLBAR_dropDownMenu_CONTAINER_CLASS);\n    }\n  }, {\n    key: \"_getMenuItemTemplate\",\n    value: function _getMenuItemTemplate() {\n      return this._toolbar._getTemplateByOption(\"menuItemTemplate\");\n    }\n  }, {\n    key: \"_dropDownMenuOptions\",\n    value: function _dropDownMenuOptions() {\n      var _this = this;\n\n      var itemClickAction = this._toolbar._createActionByOption(\"onItemClick\");\n\n      var topAndBottomOffset = 2 * POPOVER_BOUNDARY_OFFSET;\n      return {\n        disabled: this._toolbar.option(\"disabled\"),\n        itemTemplate: this._getMenuItemTemplate.bind(this),\n        onItemClick: function (e) {\n          itemClickAction(e);\n        }.bind(this),\n        deferRendering: true,\n        container: this._toolbar.option(\"menuContainer\"),\n        popupMaxHeight: \"android\" === devices.current().platform ? domAdapter.getDocumentElement().clientHeight - topAndBottomOffset : void 0,\n        menuWidget: ToolbarMenu,\n        onOptionChanged: function onOptionChanged(_ref) {\n          var name = _ref.name,\n              value = _ref.value;\n\n          if (\"opened\" === name) {\n            _this._toolbar.option(\"overflowMenuVisible\", value);\n          }\n\n          if (\"items\" === name) {\n            _this._updateMenuVisibility(value);\n          }\n        },\n        popupPosition: {\n          at: \"bottom right\",\n          my: \"top right\"\n        }\n      };\n    }\n  }, {\n    key: \"_updateMenuVisibility\",\n    value: function _updateMenuVisibility(menuItems) {\n      var items = menuItems || this._getMenuItems();\n\n      var isMenuVisible = items.length && this._hasVisibleMenuItems(items);\n\n      this._toggleMenuVisibility(isMenuVisible);\n    }\n  }, {\n    key: \"_getMenuItems\",\n    value: function _getMenuItems() {\n      return this._toolbar._getMenuItems();\n    }\n  }, {\n    key: \"_hasVisibleMenuItems\",\n    value: function _hasVisibleMenuItems(items) {\n      var menuItems = items || this._toolbar.option(\"items\");\n\n      var result = false;\n      var optionGetter = compileGetter(\"visible\");\n      var overflowGetter = compileGetter(\"locateInMenu\");\n      each(menuItems, function (index, item) {\n        var itemVisible = optionGetter(item, {\n          functionsAsIs: true\n        });\n        var itemOverflow = overflowGetter(item, {\n          functionsAsIs: true\n        });\n\n        if (false !== itemVisible && (\"auto\" === itemOverflow || \"always\" === itemOverflow) || \"menu\" === item.location) {\n          result = true;\n        }\n      });\n      return result;\n    }\n  }, {\n    key: \"_toggleMenuVisibility\",\n    value: function _toggleMenuVisibility(value) {\n      if (!this._dropDownMenuContainer()) {\n        return;\n      }\n\n      this._dropDownMenuContainer().toggleClass(MENU_INVISIBLE_CLASS, !value);\n    }\n  }, {\n    key: \"_dropDownMenuContainer\",\n    value: function _dropDownMenuContainer() {\n      return this._$menuButtonContainer;\n    }\n  }, {\n    key: \"widgetOption\",\n    value: function widgetOption(name, value) {\n      this._dropDownMenu && this._dropDownMenu.option(name, value);\n    }\n  }, {\n    key: \"itemOption\",\n    value: function itemOption(item, property, value) {\n      if (\"disabled\" === property || \"options.disabled\" === property) {\n        var _this$_dropDownMenu;\n\n        null === (_this$_dropDownMenu = this._dropDownMenu) || void 0 === _this$_dropDownMenu ? void 0 : _this$_dropDownMenu._itemOptionChanged(item, property, value);\n      } else {\n        this.renderMenuItems();\n      }\n    }\n  }]);\n\n  return ToolbarDropDownMenu;\n}();\n\nexport default ToolbarDropDownMenu;","map":null,"metadata":{},"sourceType":"module"}