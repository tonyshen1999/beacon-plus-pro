{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/ui/menu/ui.submenu.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getWidth, getHeight, setWidth, setHeight } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport { noop } from \"../../core/utils/common\";\nimport { getPublicElement } from \"../../core/element\";\nimport animationPosition from \"../../animation/position\";\nimport { extend } from \"../../core/utils/extend\";\nimport ContextMenu from \"../context_menu\";\nvar DX_CONTEXT_MENU_CONTENT_DELIMITER_CLASS = \"dx-context-menu-content-delimiter\";\nvar DX_SUBMENU_CLASS = \"dx-submenu\";\n\nvar Submenu = /*#__PURE__*/function (_ContextMenu) {\n  _inherits(Submenu, _ContextMenu);\n\n  var _super = _createSuper(Submenu);\n\n  function Submenu() {\n    _classCallCheck(this, Submenu);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Submenu, [{\n    key: \"_getDefaultOptions\",\n    value: function _getDefaultOptions() {\n      return extend(_get(_getPrototypeOf(Submenu.prototype), \"_getDefaultOptions\", this).call(this), {\n        orientation: \"horizontal\",\n        tabIndex: null,\n        onHoverStart: noop\n      });\n    }\n  }, {\n    key: \"_initDataAdapter\",\n    value: function _initDataAdapter() {\n      this._dataAdapter = this.option(\"_dataAdapter\");\n\n      if (!this._dataAdapter) {\n        _get(_getPrototypeOf(Submenu.prototype), \"_initDataAdapter\", this).call(this);\n      }\n    }\n  }, {\n    key: \"_renderContentImpl\",\n    value: function _renderContentImpl() {\n      this._renderContextMenuOverlay();\n\n      _get(_getPrototypeOf(Submenu.prototype), \"_renderContentImpl\", this).call(this);\n\n      var node = this._dataAdapter.getNodeByKey(this.option(\"_parentKey\"));\n\n      node && this._renderItems(this._getChildNodes(node));\n\n      this._renderDelimiter();\n    }\n  }, {\n    key: \"_renderDelimiter\",\n    value: function _renderDelimiter() {\n      this.$contentDelimiter = $(\"<div>\").appendTo(this._itemContainer()).addClass(DX_CONTEXT_MENU_CONTENT_DELIMITER_CLASS);\n    }\n  }, {\n    key: \"_getOverlayOptions\",\n    value: function _getOverlayOptions() {\n      return extend(_get(_getPrototypeOf(Submenu.prototype), \"_getOverlayOptions\", this).call(this), {\n        onPositioned: this._overlayPositionedActionHandler.bind(this)\n      });\n    }\n  }, {\n    key: \"_overlayPositionedActionHandler\",\n    value: function _overlayPositionedActionHandler(arg) {\n      this._showDelimiter(arg);\n    }\n  }, {\n    key: \"_hoverEndHandler\",\n    value: function _hoverEndHandler(e) {\n      _get(_getPrototypeOf(Submenu.prototype), \"_hoverEndHandler\", this).call(this, e);\n\n      this._toggleFocusClass(false, e.currentTarget);\n    }\n  }, {\n    key: \"_isMenuHorizontal\",\n    value: function _isMenuHorizontal() {\n      return \"horizontal\" === this.option(\"orientation\");\n    }\n  }, {\n    key: \"_hoverStartHandler\",\n    value: function _hoverStartHandler(e) {\n      var hoverStartAction = this.option(\"onHoverStart\");\n      hoverStartAction(e);\n\n      _get(_getPrototypeOf(Submenu.prototype), \"_hoverStartHandler\", this).call(this, e);\n\n      this._toggleFocusClass(true, e.currentTarget);\n    }\n  }, {\n    key: \"_drawSubmenu\",\n    value: function _drawSubmenu($rootItem) {\n      this._actions.onShowing({\n        rootItem: getPublicElement($rootItem),\n        submenu: this\n      });\n\n      _get(_getPrototypeOf(Submenu.prototype), \"_drawSubmenu\", this).call(this, $rootItem);\n\n      this._actions.onShown({\n        rootItem: getPublicElement($rootItem),\n        submenu: this\n      });\n    }\n  }, {\n    key: \"_hideSubmenu\",\n    value: function _hideSubmenu($rootItem) {\n      this._actions.onHiding({\n        cancel: true,\n        rootItem: getPublicElement($rootItem),\n        submenu: this\n      });\n\n      _get(_getPrototypeOf(Submenu.prototype), \"_hideSubmenu\", this).call(this, $rootItem);\n\n      this._actions.onHidden({\n        rootItem: getPublicElement($rootItem),\n        submenu: this\n      });\n    }\n  }, {\n    key: \"_showDelimiter\",\n    value: function _showDelimiter(arg) {\n      if (!this.$contentDelimiter) {\n        return;\n      }\n\n      var $submenu = this._itemContainer().children(\".\".concat(DX_SUBMENU_CLASS)).eq(0);\n\n      var $rootItem = this.option(\"position\").of;\n      var position = {\n        of: $submenu\n      };\n      var containerOffset = arg.position;\n      var vLocation = containerOffset.v.location;\n      var hLocation = containerOffset.h.location;\n      var rootOffset = $rootItem.offset();\n      var offsetLeft = Math.round(rootOffset.left);\n      var offsetTop = Math.round(rootOffset.top);\n      var rootWidth = getWidth($rootItem);\n      var rootHeight = getHeight($rootItem);\n      var submenuWidth = getWidth($submenu);\n      var submenuHeight = getHeight($submenu);\n      this.$contentDelimiter.css(\"display\", \"block\");\n      setWidth(this.$contentDelimiter, this._isMenuHorizontal() ? rootWidth < submenuWidth ? rootWidth - 2 : submenuWidth : 2);\n      setHeight(this.$contentDelimiter, this._isMenuHorizontal() ? 2 : rootHeight < submenuHeight ? rootHeight - 2 : submenuHeight);\n\n      if (this._isMenuHorizontal()) {\n        if (vLocation > offsetTop) {\n          if (Math.round(hLocation) === offsetLeft) {\n            position.offset = \"1 -1\";\n            position.at = position.my = \"left top\";\n          } else {\n            position.offset = \"-1 -1\";\n            position.at = position.my = \"right top\";\n          }\n        } else {\n          setHeight(this.$contentDelimiter, 5);\n\n          if (Math.round(hLocation) === offsetLeft) {\n            position.offset = \"1 4\";\n            position.at = position.my = \"left bottom\";\n          } else {\n            position.offset = \"-1 2\";\n            position.at = position.my = \"right bottom\";\n          }\n        }\n      } else if (hLocation > offsetLeft) {\n        if (Math.round(vLocation) === offsetTop) {\n          position.offset = \"-1 1\";\n          position.at = position.my = \"left top\";\n        } else {\n          position.offset = \"-1 -1\";\n          position.at = position.my = \"left bottom\";\n        }\n      } else if (Math.round(vLocation) === offsetTop) {\n        position.offset = \"1 1\";\n        position.at = position.my = \"right top\";\n      } else {\n        position.offset = \"1 -1\";\n        position.at = position.my = \"right bottom\";\n      }\n\n      animationPosition.setup(this.$contentDelimiter, position);\n    }\n  }, {\n    key: \"_getContextMenuPosition\",\n    value: function _getContextMenuPosition() {\n      return this.option(\"position\");\n    }\n  }, {\n    key: \"isOverlayVisible\",\n    value: function isOverlayVisible() {\n      return this._overlay.option(\"visible\");\n    }\n  }, {\n    key: \"getOverlayContent\",\n    value: function getOverlayContent() {\n      return this._overlay.$content();\n    }\n  }]);\n\n  return Submenu;\n}(ContextMenu);\n\nexport default Submenu;","map":null,"metadata":{},"sourceType":"module"}