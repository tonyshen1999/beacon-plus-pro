{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/appointments/rendering_strategies/strategy_horizontal.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport BaseAppointmentsStrategy from \"./strategy.base\";\nimport dateUtils from \"../../../../core/utils/date\";\nimport { ExpressionUtils } from \"../../expressionUtils\";\nimport getSkippedHoursInRange from \"../../../../renovation/ui/scheduler/view_model/appointments/utils/getSkippedHoursInRange\";\nvar DEFAULT_APPOINTMENT_HEIGHT = 60;\nvar MIN_APPOINTMENT_HEIGHT = 35;\nvar DROP_DOWN_BUTTON_OFFSET = 2;\nvar toMs = dateUtils.dateToMilliseconds;\n\nvar HorizontalRenderingStrategy = /*#__PURE__*/function (_BaseAppointmentsStra) {\n  _inherits(HorizontalRenderingStrategy, _BaseAppointmentsStra);\n\n  var _super = _createSuper(HorizontalRenderingStrategy);\n\n  function HorizontalRenderingStrategy() {\n    _classCallCheck(this, HorizontalRenderingStrategy);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(HorizontalRenderingStrategy, [{\n    key: \"_needVerifyItemSize\",\n    value: function _needVerifyItemSize() {\n      return true;\n    }\n  }, {\n    key: \"calculateAppointmentWidth\",\n    value: function calculateAppointmentWidth(appointment, position) {\n      var cellWidth = this.cellWidth || this.getAppointmentMinSize();\n      var allDay = ExpressionUtils.getField(this.dataAccessors, \"allDay\", appointment);\n      var startDate = position.info.appointment.startDate;\n      var endDate = position.info.appointment.endDate;\n      var normalizedEndDate = position.info.appointment.normalizedEndDate;\n      var duration = this.getAppointmentDurationInMs(startDate, normalizedEndDate, allDay);\n      duration = this._adjustDurationByDaylightDiff(duration, startDate, normalizedEndDate);\n      var cellDuration = this.cellDurationInMinutes * toMs(\"minute\");\n      var skippedHours = getSkippedHoursInRange(startDate, endDate, this.viewDataProvider);\n      var durationInCells = (duration - skippedHours * toMs(\"hour\")) / cellDuration;\n      var width = this.cropAppointmentWidth(durationInCells * cellWidth, cellWidth);\n      return width;\n    }\n  }, {\n    key: \"_needAdjustDuration\",\n    value: function _needAdjustDuration(diff) {\n      return diff < 0;\n    }\n  }, {\n    key: \"getAppointmentGeometry\",\n    value: function getAppointmentGeometry(coordinates) {\n      var result = this._customizeAppointmentGeometry(coordinates);\n\n      return _get(_getPrototypeOf(HorizontalRenderingStrategy.prototype), \"getAppointmentGeometry\", this).call(this, result);\n    }\n  }, {\n    key: \"_customizeAppointmentGeometry\",\n    value: function _customizeAppointmentGeometry(coordinates) {\n      var config = this._calculateGeometryConfig(coordinates);\n\n      return this._customizeCoordinates(coordinates, config.height, config.appointmentCountPerCell, config.offset);\n    }\n  }, {\n    key: \"_getOffsets\",\n    value: function _getOffsets() {\n      return {\n        unlimited: 0,\n        auto: 0\n      };\n    }\n  }, {\n    key: \"_getCompactLeftCoordinate\",\n    value: function _getCompactLeftCoordinate(itemLeft, index) {\n      var cellWidth = this.cellWidth || this.getAppointmentMinSize();\n      return itemLeft + cellWidth * index;\n    }\n  }, {\n    key: \"_getMaxHeight\",\n    value: function _getMaxHeight() {\n      return this.cellHeight || this.getAppointmentMinSize();\n    }\n  }, {\n    key: \"_getAppointmentCount\",\n    value: function _getAppointmentCount(overlappingMode, coordinates) {\n      return this._getMaxAppointmentCountPerCellByType(false);\n    }\n  }, {\n    key: \"_getAppointmentDefaultHeight\",\n    value: function _getAppointmentDefaultHeight() {\n      return DEFAULT_APPOINTMENT_HEIGHT;\n    }\n  }, {\n    key: \"_getAppointmentMinHeight\",\n    value: function _getAppointmentMinHeight() {\n      return MIN_APPOINTMENT_HEIGHT;\n    }\n  }, {\n    key: \"_sortCondition\",\n    value: function _sortCondition(a, b) {\n      return this._columnCondition(a, b);\n    }\n  }, {\n    key: \"_getOrientation\",\n    value: function _getOrientation() {\n      return [\"left\", \"right\", \"top\"];\n    }\n  }, {\n    key: \"getDropDownAppointmentWidth\",\n    value: function getDropDownAppointmentWidth() {\n      return this.cellWidth - 2 * DROP_DOWN_BUTTON_OFFSET;\n    }\n  }, {\n    key: \"getDeltaTime\",\n    value: function getDeltaTime(args, initialSize) {\n      var deltaTime;\n      var deltaWidth = args.width - initialSize.width;\n      deltaTime = toMs(\"minute\") * Math.round(deltaWidth / this.cellWidth * this.cellDurationInMinutes);\n      return deltaTime;\n    }\n  }, {\n    key: \"isAllDay\",\n    value: function isAllDay(appointmentData) {\n      return ExpressionUtils.getField(this.dataAccessors, \"allDay\", appointmentData);\n    }\n  }, {\n    key: \"_isItemsCross\",\n    value: function _isItemsCross(firstItem, secondItem) {\n      var orientation = this._getOrientation();\n\n      return this._checkItemsCrossing(firstItem, secondItem, orientation);\n    }\n  }, {\n    key: \"getPositionShift\",\n    value: function getPositionShift(timeShift) {\n      var positionShift = _get(_getPrototypeOf(HorizontalRenderingStrategy.prototype), \"getPositionShift\", this).call(this, timeShift);\n\n      var left = this.cellWidth * timeShift;\n\n      if (this.rtlEnabled) {\n        left *= -1;\n      }\n\n      left += positionShift.left;\n      return {\n        top: 0,\n        left: left,\n        cellPosition: left\n      };\n    }\n  }, {\n    key: \"supportCompactDropDownAppointments\",\n    value: function supportCompactDropDownAppointments() {\n      return false;\n    }\n  }]);\n\n  return HorizontalRenderingStrategy;\n}(BaseAppointmentsStrategy);\n\nexport default HorizontalRenderingStrategy;","map":null,"metadata":{},"sourceType":"module"}