{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/translators/logarithmic_translator.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { raiseToExt as raiseTo, getLogExt as getLog } from \"../core/utils\";\nimport { isDefined } from \"../../core/utils/type\";\nexport default {\n  fromValue: function fromValue(value) {\n    return null !== value ? getLog(value, this._canvasOptions.base, this._businessRange.allowNegatives, this._businessRange.linearThreshold) : value;\n  },\n  toValue: function toValue(value) {\n    return null !== value ? raiseTo(value, this._canvasOptions.base, this._businessRange.allowNegatives, this._businessRange.linearThreshold) : value;\n  },\n  getMinBarSize: function getMinBarSize(minBarSize) {\n    var visibleArea = this.getCanvasVisibleArea();\n    var minValue = this.from(visibleArea.min + minBarSize);\n    var canvasOptions = this._canvasOptions;\n    return Math.pow(canvasOptions.base, canvasOptions.rangeMinVisible + this.fromValue(this.from(visibleArea.min)) - this.fromValue(!isDefined(minValue) ? this.from(visibleArea.max) : minValue));\n  },\n  checkMinBarSize: function checkMinBarSize(initialValue, minShownValue, stackValue) {\n    var canvasOptions = this._canvasOptions;\n    var prevValue = stackValue - initialValue;\n    var baseMethod = this.constructor.prototype.checkMinBarSize;\n    var minBarSize;\n    var updateValue;\n\n    if (isDefined(minShownValue) && prevValue > 0) {\n      minBarSize = baseMethod(this.fromValue(stackValue / prevValue), this.fromValue(minShownValue) - canvasOptions.rangeMinVisible);\n      updateValue = Math.pow(canvasOptions.base, this.fromValue(prevValue) + minBarSize) - prevValue;\n    } else {\n      updateValue = baseMethod(initialValue, minShownValue);\n    }\n\n    return updateValue;\n  }\n};","map":null,"metadata":{},"sourceType":"module"}