{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/button_group.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../core/renderer\";\nimport Widget from \"./widget/ui.widget\";\nimport Button from \"./button\";\nimport CollectionWidget from \"./collection/ui.collection_widget.edit\";\nimport registerComponent from \"../core/component_registrator\";\nimport { extend } from \"../core/utils/extend\";\nimport { isDefined, isFunction } from \"../core/utils/type\";\nimport { BindableTemplate } from \"../core/templates/bindable_template\";\nvar BUTTON_GROUP_CLASS = \"dx-buttongroup\";\nvar BUTTON_GROUP_WRAPPER_CLASS = BUTTON_GROUP_CLASS + \"-wrapper\";\nvar BUTTON_GROUP_ITEM_CLASS = BUTTON_GROUP_CLASS + \"-item\";\nvar BUTTON_GROUP_FIRST_ITEM_CLASS = BUTTON_GROUP_CLASS + \"-first-item\";\nvar BUTTON_GROUP_LAST_ITEM_CLASS = BUTTON_GROUP_CLASS + \"-last-item\";\nvar BUTTON_GROUP_ITEM_HAS_WIDTH = BUTTON_GROUP_ITEM_CLASS + \"-has-width\";\nvar SHAPE_STANDARD_CLASS = \"dx-shape-standard\";\nvar ButtonCollection = CollectionWidget.inherit({\n  _initTemplates: function _initTemplates() {\n    var _this = this;\n\n    this.callBase();\n\n    this._templateManager.addDefaultTemplates({\n      item: new BindableTemplate(function ($container, data, model) {\n        _this._prepareItemStyles($container);\n\n        var template = _this.option(\"buttonTemplate\");\n\n        _this._createComponent($container, Button, extend({}, model, data, _this._getBasicButtonOptions(), {\n          _templateData: _this._hasCustomTemplate(template) ? model : {},\n          template: model.template || template\n        }));\n      }, [\"text\", \"type\", \"icon\", \"disabled\", \"visible\", \"hint\"], this.option(\"integrationOptions.watchMethod\"))\n    });\n  },\n  _getBasicButtonOptions: function _getBasicButtonOptions() {\n    return {\n      focusStateEnabled: false,\n      onClick: null,\n      hoverStateEnabled: this.option(\"hoverStateEnabled\"),\n      activeStateEnabled: this.option(\"activeStateEnabled\"),\n      stylingMode: this.option(\"stylingMode\")\n    };\n  },\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      itemTemplateProperty: null\n    });\n  },\n  _hasCustomTemplate: function _hasCustomTemplate(template) {\n    return isFunction(template) || this.option(\"integrationOptions.templates\")[template];\n  },\n  _prepareItemStyles: function _prepareItemStyles($item) {\n    var itemIndex = $item.data(\"dxItemIndex\");\n    0 === itemIndex && $item.addClass(BUTTON_GROUP_FIRST_ITEM_CLASS);\n    var items = this.option(\"items\");\n    items && itemIndex === items.length - 1 && $item.addClass(BUTTON_GROUP_LAST_ITEM_CLASS);\n    $item.addClass(SHAPE_STANDARD_CLASS);\n  },\n  _renderItemContent: function _renderItemContent(args) {\n    args.container = $(args.container).parent();\n    return this.callBase(args);\n  },\n  _renderItemContentByNode: function _renderItemContentByNode(args, $node) {\n    args.container = $(args.container.children().first());\n    return this.callBase(args, $node);\n  },\n  _focusTarget: function _focusTarget() {\n    return this.$element().parent();\n  },\n  _keyboardEventBindingTarget: function _keyboardEventBindingTarget() {\n    return this._focusTarget();\n  },\n  _refreshContent: function _refreshContent() {\n    this._prepareContent();\n\n    this._renderContent();\n  },\n  _itemClass: function _itemClass() {\n    return BUTTON_GROUP_ITEM_CLASS;\n  },\n  _itemSelectHandler: function _itemSelectHandler(e) {\n    if (\"single\" === this.option(\"selectionMode\") && this.isItemSelected(e.currentTarget)) {\n      return;\n    }\n\n    this.callBase(e);\n  }\n});\nvar ButtonGroup = Widget.inherit({\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      hoverStateEnabled: true,\n      focusStateEnabled: true,\n      selectionMode: \"single\",\n      selectedItems: [],\n      selectedItemKeys: [],\n      stylingMode: \"contained\",\n      keyExpr: \"text\",\n      items: [],\n      buttonTemplate: \"content\",\n      onSelectionChanged: null,\n      onItemClick: null\n    });\n  },\n  _init: function _init() {\n    this.callBase();\n\n    this._createItemClickAction();\n  },\n  _createItemClickAction: function _createItemClickAction() {\n    this._itemClickAction = this._createActionByOption(\"onItemClick\");\n  },\n  _initMarkup: function _initMarkup() {\n    this.setAria(\"role\", \"group\");\n    this.$element().addClass(BUTTON_GROUP_CLASS);\n\n    this._renderButtons();\n\n    this._syncSelectionOptions();\n\n    this.callBase();\n  },\n  _fireSelectionChangeEvent: function _fireSelectionChangeEvent(addedItems, removedItems) {\n    this._createActionByOption(\"onSelectionChanged\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    })({\n      addedItems: addedItems,\n      removedItems: removedItems\n    });\n  },\n  _renderButtons: function _renderButtons() {\n    var _this2 = this;\n\n    var $buttons = $(\"<div>\").addClass(BUTTON_GROUP_WRAPPER_CLASS).appendTo(this.$element());\n    var selectedItems = this.option(\"selectedItems\");\n    var options = {\n      selectionMode: this.option(\"selectionMode\"),\n      items: this.option(\"items\"),\n      keyExpr: this.option(\"keyExpr\"),\n      buttonTemplate: this.option(\"buttonTemplate\"),\n      scrollingEnabled: false,\n      selectedItemKeys: this.option(\"selectedItemKeys\"),\n      focusStateEnabled: this.option(\"focusStateEnabled\"),\n      hoverStateEnabled: this.option(\"hoverStateEnabled\"),\n      activeStateEnabled: this.option(\"activeStateEnabled\"),\n      stylingMode: this.option(\"stylingMode\"),\n      accessKey: this.option(\"accessKey\"),\n      tabIndex: this.option(\"tabIndex\"),\n      noDataText: \"\",\n      selectionRequired: false,\n      onItemRendered: function onItemRendered(e) {\n        var width = _this2.option(\"width\");\n\n        isDefined(width) && $(e.itemElement).addClass(BUTTON_GROUP_ITEM_HAS_WIDTH);\n      },\n      onSelectionChanged: function onSelectionChanged(e) {\n        _this2._syncSelectionOptions();\n\n        _this2._fireSelectionChangeEvent(e.addedItems, e.removedItems);\n      },\n      onItemClick: function onItemClick(e) {\n        _this2._itemClickAction(e);\n      }\n    };\n\n    if (isDefined(selectedItems) && selectedItems.length) {\n      options.selectedItems = selectedItems;\n    }\n\n    this._buttonsCollection = this._createComponent($buttons, ButtonCollection, options);\n  },\n  _syncSelectionOptions: function _syncSelectionOptions() {\n    this._setOptionWithoutOptionChange(\"selectedItems\", this._buttonsCollection.option(\"selectedItems\"));\n\n    this._setOptionWithoutOptionChange(\"selectedItemKeys\", this._buttonsCollection.option(\"selectedItemKeys\"));\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"stylingMode\":\n      case \"selectionMode\":\n      case \"keyExpr\":\n      case \"buttonTemplate\":\n      case \"items\":\n      case \"activeStateEnabled\":\n      case \"focusStateEnabled\":\n      case \"hoverStateEnabled\":\n      case \"tabIndex\":\n        this._invalidate();\n\n        break;\n\n      case \"selectedItemKeys\":\n      case \"selectedItems\":\n        this._buttonsCollection.option(args.name, args.value);\n\n        break;\n\n      case \"onItemClick\":\n        this._createItemClickAction();\n\n        break;\n\n      case \"onSelectionChanged\":\n        break;\n\n      case \"width\":\n        this.callBase(args);\n\n        this._buttonsCollection.itemElements().toggleClass(BUTTON_GROUP_ITEM_HAS_WIDTH, !!args.value);\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  }\n});\nregisterComponent(\"dxButtonGroup\", ButtonGroup);\nexport default ButtonGroup;","map":null,"metadata":{},"sourceType":"module"}