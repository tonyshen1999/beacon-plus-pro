{"ast":null,"code":"import _toConsumableArray from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n\n/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.editing.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport $ from \"../../core/renderer\";\nimport domAdapter from \"../../core/dom_adapter\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport Guid from \"../../core/guid\";\nimport { resetActiveElement } from \"../../core/utils/dom\";\nimport { isDefined, isObject, isFunction, isEmptyObject } from \"../../core/utils/type\";\nimport { each } from \"../../core/utils/iterator\";\nimport { extend } from \"../../core/utils/extend\";\nimport modules from \"./ui.grid_core.modules\";\nimport { name as clickEventName } from \"../../events/click\";\nimport pointerEvents from \"../../events/pointer\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nimport { createObjectWithChanges } from \"../../data/array_utils\";\nimport { addNamespace } from \"../../events/utils/index\";\nimport { confirm } from \"../dialog\";\nimport messageLocalization from \"../../localization/message\";\nimport devices from \"../../core/devices\";\nimport { when, Deferred, fromPromise } from \"../../core/utils/deferred\";\nimport { equalByValue, noop } from \"../../core/utils/common\";\nimport * as iconUtils from \"../../core/utils/icon\";\nimport { EDITOR_CELL_CLASS, ROW_CLASS, EDIT_FORM_CLASS, DATA_EDIT_DATA_INSERT_TYPE, DATA_EDIT_DATA_REMOVE_TYPE, EDITING_POPUP_OPTION_NAME, EDITING_EDITROWKEY_OPTION_NAME, EDITING_EDITCOLUMNNAME_OPTION_NAME, TARGET_COMPONENT_NAME, EDITORS_INPUT_SELECTOR, FOCUSABLE_ELEMENT_SELECTOR, EDIT_MODE_ROW, EDIT_MODES, ROW_BASED_MODES, FIRST_NEW_ROW_POSITION, LAST_NEW_ROW_POSITION, PAGE_BOTTOM_NEW_ROW_POSITION, PAGE_TOP_NEW_ROW_POSITION, VIEWPORT_BOTTOM_NEW_ROW_POSITION, VIEWPORT_TOP_NEW_ROW_POSITION } from \"./ui.grid_core.editing_constants\";\nvar READONLY_CLASS = \"readonly\";\nvar LINK_CLASS = \"dx-link\";\nvar ROW_SELECTED = \"dx-selection\";\nvar EDIT_BUTTON_CLASS = \"dx-edit-button\";\nvar COMMAND_EDIT_CLASS = \"dx-command-edit\";\nvar COMMAND_EDIT_WITH_ICONS_CLASS = COMMAND_EDIT_CLASS + \"-with-icons\";\nvar INSERT_INDEX = \"__DX_INSERT_INDEX__\";\nvar ROW_INSERTED = \"dx-row-inserted\";\nvar ROW_MODIFIED = \"dx-row-modified\";\nvar CELL_MODIFIED = \"dx-cell-modified\";\nvar EDITING_NAMESPACE = \"dxDataGridEditing\";\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\nvar DATA_EDIT_DATA_UPDATE_TYPE = \"update\";\nvar DEFAULT_START_EDIT_ACTION = \"click\";\nvar EDIT_LINK_CLASS = {\n  save: \"dx-link-save\",\n  cancel: \"dx-link-cancel\",\n  edit: \"dx-link-edit\",\n  undelete: \"dx-link-undelete\",\n  delete: \"dx-link-delete\",\n  add: \"dx-link-add\"\n};\nvar EDIT_ICON_CLASS = {\n  save: \"save\",\n  cancel: \"revert\",\n  edit: \"edit\",\n  undelete: \"revert\",\n  delete: \"trash\",\n  add: \"add\"\n};\nvar METHOD_NAMES = {\n  edit: \"editRow\",\n  delete: \"deleteRow\",\n  undelete: \"undeleteRow\",\n  save: \"saveEditData\",\n  cancel: \"cancelEditData\",\n  add: \"addRowByRowIndex\"\n};\nvar ACTION_OPTION_NAMES = {\n  add: \"allowAdding\",\n  edit: \"allowUpdating\",\n  delete: \"allowDeleting\"\n};\nvar BUTTON_NAMES = [\"edit\", \"save\", \"cancel\", \"delete\", \"undelete\"];\nvar EDITING_CHANGES_OPTION_NAME = \"editing.changes\";\n\nvar createFailureHandler = function createFailureHandler(deferred) {\n  return function (arg) {\n    var error = arg instanceof Error ? arg : new Error(arg && String(arg) || \"Unknown error\");\n    deferred.reject(error);\n  };\n};\n\nvar isEditingCell = function isEditingCell(isEditRow, cellOptions) {\n  return cellOptions.isEditing || isEditRow && cellOptions.column.allowEditing;\n};\n\nvar isEditingOrShowEditorAlwaysDataCell = function isEditingOrShowEditorAlwaysDataCell(isEditRow, cellOptions) {\n  var isCommandCell = !!cellOptions.column.command;\n  var isEditing = isEditingCell(isEditRow, cellOptions);\n  var isEditorCell = !isCommandCell && (isEditing || cellOptions.column.showEditorAlways);\n  return \"data\" === cellOptions.rowType && isEditorCell;\n};\n\nvar EditingController = modules.ViewController.inherit(function () {\n  var getButtonIndex = function getButtonIndex(buttons, name) {\n    var result = -1;\n    buttons.some(function (button, index) {\n      if (getButtonName(button) === name) {\n        result = index;\n        return true;\n      }\n    });\n    return result;\n  };\n\n  function getButtonName(button) {\n    return isObject(button) ? button.name : button;\n  }\n\n  return {\n    init: function init() {\n      this._columnsController = this.getController(\"columns\");\n      this._dataController = this.getController(\"data\");\n      this._rowsView = this.getView(\"rowsView\");\n      this._lastOperation = null;\n\n      if (this._deferreds) {\n        this._deferreds.forEach(function (d) {\n          return d.reject(\"cancel\");\n        });\n      }\n\n      this._deferreds = [];\n\n      if (!this._dataChangedHandler) {\n        this._dataChangedHandler = this._handleDataChanged.bind(this);\n\n        this._dataController.changed.add(this._dataChangedHandler);\n      }\n\n      if (!this._saveEditorHandler) {\n        this.createAction(\"onInitNewRow\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onRowInserting\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onRowInserted\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onEditingStart\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onRowUpdating\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onRowUpdated\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onRowRemoving\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onRowRemoved\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onSaved\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onSaving\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onEditCanceling\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onEditCanceled\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n      }\n\n      this._updateEditColumn();\n\n      this._updateEditButtons();\n\n      if (!this._internalState) {\n        this._internalState = [];\n      }\n\n      this.component._optionsByReference[EDITING_EDITROWKEY_OPTION_NAME] = true;\n      this.component._optionsByReference[EDITING_CHANGES_OPTION_NAME] = true;\n    },\n    getEditMode: function getEditMode() {\n      var editMode = this.option(\"editing.mode\");\n\n      if (-1 !== EDIT_MODES.indexOf(editMode)) {\n        return editMode;\n      }\n\n      return EDIT_MODE_ROW;\n    },\n    _getDefaultEditorTemplate: function _getDefaultEditorTemplate() {\n      var _this = this;\n\n      return function (container, options) {\n        var $editor = $(\"<div>\").appendTo(container);\n\n        _this.getController(\"editorFactory\").createEditor($editor, extend({}, options.column, {\n          value: options.value,\n          setValue: options.setValue,\n          row: options.row,\n          parentType: \"dataRow\",\n          width: null,\n          readOnly: !options.setValue,\n          isOnForm: options.isOnForm,\n          id: options.id\n        }));\n      };\n    },\n    _getNewRowPosition: function _getNewRowPosition() {\n      var newRowPosition = this.option(\"editing.newRowPosition\");\n      var scrollingMode = this.option(\"scrolling.mode\");\n\n      if (\"virtual\" === scrollingMode) {\n        switch (newRowPosition) {\n          case PAGE_TOP_NEW_ROW_POSITION:\n            return VIEWPORT_TOP_NEW_ROW_POSITION;\n\n          case PAGE_BOTTOM_NEW_ROW_POSITION:\n            return VIEWPORT_BOTTOM_NEW_ROW_POSITION;\n\n          default:\n            return newRowPosition;\n        }\n      }\n\n      return newRowPosition;\n    },\n    getChanges: function getChanges() {\n      return this.option(EDITING_CHANGES_OPTION_NAME);\n    },\n    getInsertRowCount: function getInsertRowCount() {\n      var changes = this.option(EDITING_CHANGES_OPTION_NAME);\n      return changes.filter(function (change) {\n        return \"insert\" === change.type;\n      }).length;\n    },\n    resetChanges: function resetChanges() {\n      var changes = this.getChanges();\n      var needReset = null === changes || void 0 === changes ? void 0 : changes.length;\n\n      if (needReset) {\n        this._silentOption(EDITING_CHANGES_OPTION_NAME, []);\n      }\n    },\n    _getInternalData: function _getInternalData(key) {\n      return this._internalState.filter(function (item) {\n        return equalByValue(item.key, key);\n      })[0];\n    },\n    _addInternalData: function _addInternalData(params) {\n      var internalData = this._getInternalData(params.key);\n\n      if (internalData) {\n        return extend(internalData, params);\n      }\n\n      this._internalState.push(params);\n\n      return params;\n    },\n    _getOldData: function _getOldData(key) {\n      var _this$_getInternalDat;\n\n      return null === (_this$_getInternalDat = this._getInternalData(key)) || void 0 === _this$_getInternalDat ? void 0 : _this$_getInternalDat.oldData;\n    },\n    getUpdatedData: function getUpdatedData(data) {\n      var key = this._dataController.keyOf(data);\n\n      var changes = this.getChanges();\n      var editIndex = gridCoreUtils.getIndexByKey(key, changes);\n\n      if (changes[editIndex]) {\n        return createObjectWithChanges(data, changes[editIndex].data);\n      }\n\n      return data;\n    },\n    getInsertedData: function getInsertedData() {\n      return this.getChanges().filter(function (change) {\n        return change.data && change.type === DATA_EDIT_DATA_INSERT_TYPE;\n      }).map(function (change) {\n        return change.data;\n      });\n    },\n    getRemovedData: function getRemovedData() {\n      var _this2 = this;\n\n      return this.getChanges().filter(function (change) {\n        return _this2._getOldData(change.key) && change.type === DATA_EDIT_DATA_REMOVE_TYPE;\n      }).map(function (change) {\n        return _this2._getOldData(change.key);\n      });\n    },\n    _fireDataErrorOccurred: function _fireDataErrorOccurred(arg) {\n      if (\"cancel\" === arg) {\n        return;\n      }\n\n      var $popupContent = this.getPopupContent();\n\n      this._dataController.dataErrorOccurred.fire(arg, $popupContent);\n    },\n    _needToCloseEditableCell: noop,\n    _closeEditItem: noop,\n    _handleDataChanged: noop,\n    _isDefaultButtonVisible: function _isDefaultButtonVisible(button, options) {\n      var result = true;\n\n      switch (button.name) {\n        case \"delete\":\n          result = this.allowDeleting(options);\n          break;\n\n        case \"undelete\":\n          result = false;\n      }\n\n      return result;\n    },\n    _isButtonVisible: function _isButtonVisible(button, options) {\n      var visible = button.visible;\n\n      if (!isDefined(visible)) {\n        return this._isDefaultButtonVisible(button, options);\n      }\n\n      return isFunction(visible) ? visible.call(button, {\n        component: options.component,\n        row: options.row,\n        column: options.column\n      }) : visible;\n    },\n    _isButtonDisabled: function _isButtonDisabled(button, options) {\n      var disabled = button.disabled;\n      return isFunction(disabled) ? disabled.call(button, {\n        component: options.component,\n        row: options.row,\n        column: options.column\n      }) : !!disabled;\n    },\n    _getButtonConfig: function _getButtonConfig(button, options) {\n      var _this3 = this;\n\n      var config = isObject(button) ? button : {};\n      var buttonName = getButtonName(button);\n\n      var editingTexts = function (options) {\n        var editingTexts = options.component.option(\"editing.texts\") || {};\n        return {\n          save: editingTexts.saveRowChanges,\n          cancel: editingTexts.cancelRowChanges,\n          edit: editingTexts.editRow,\n          undelete: editingTexts.undeleteRow,\n          delete: editingTexts.deleteRow,\n          add: editingTexts.addRowToNode\n        };\n      }(options);\n\n      var methodName = METHOD_NAMES[buttonName];\n      var editingOptions = this.option(\"editing\");\n      var actionName = ACTION_OPTION_NAMES[buttonName];\n      var allowAction = actionName ? editingOptions[actionName] : true;\n      return extend({\n        name: buttonName,\n        text: editingTexts[buttonName],\n        cssClass: EDIT_LINK_CLASS[buttonName]\n      }, {\n        onClick: methodName && function (e) {\n          var event = e.event;\n          event.stopPropagation();\n          event.preventDefault();\n          setTimeout(function () {\n            options.row && allowAction && _this3[methodName] && _this3[methodName](options.row.rowIndex);\n          });\n        }\n      }, config);\n    },\n    _getEditingButtons: function _getEditingButtons(options) {\n      var _this4 = this;\n\n      var buttonIndex;\n      var haveCustomButtons = !!options.column.buttons;\n      var buttons = (options.column.buttons || []).slice();\n\n      if (haveCustomButtons) {\n        buttonIndex = getButtonIndex(buttons, \"edit\");\n\n        if (buttonIndex >= 0) {\n          if (getButtonIndex(buttons, \"save\") < 0) {\n            buttons.splice(buttonIndex + 1, 0, \"save\");\n          }\n\n          if (getButtonIndex(buttons, \"cancel\") < 0) {\n            buttons.splice(getButtonIndex(buttons, \"save\") + 1, 0, \"cancel\");\n          }\n        }\n\n        buttonIndex = getButtonIndex(buttons, \"delete\");\n\n        if (buttonIndex >= 0 && getButtonIndex(buttons, \"undelete\") < 0) {\n          buttons.splice(buttonIndex + 1, 0, \"undelete\");\n        }\n      } else {\n        buttons = BUTTON_NAMES.slice();\n      }\n\n      return buttons.map(function (button) {\n        return _this4._getButtonConfig(button, options);\n      });\n    },\n    _renderEditingButtons: function _renderEditingButtons($container, buttons, options, change) {\n      var _this5 = this;\n\n      buttons.forEach(function (button) {\n        if (_this5._isButtonVisible(button, options)) {\n          _this5._createButton($container, button, options, change);\n        }\n      });\n    },\n    _getEditCommandCellTemplate: function _getEditCommandCellTemplate() {\n      var _this6 = this;\n\n      return function (container, options, change) {\n        var $container = $(container);\n\n        if (\"data\" === options.rowType) {\n          var buttons = _this6._getEditingButtons(options);\n\n          _this6._renderEditingButtons($container, buttons, options, change);\n\n          options.watch && options.watch(function () {\n            return buttons.map(function (button) {\n              return _this6._isButtonVisible(button, options);\n            });\n          }, function () {\n            $container.empty();\n\n            _this6._renderEditingButtons($container, buttons, options);\n          });\n        } else {\n          gridCoreUtils.setEmptyText($container);\n        }\n      };\n    },\n    isRowBasedEditMode: function isRowBasedEditMode() {\n      var editMode = this.getEditMode();\n      return -1 !== ROW_BASED_MODES.indexOf(editMode);\n    },\n    getFirstEditableColumnIndex: function getFirstEditableColumnIndex() {\n      var columnsController = this.getController(\"columns\");\n      var columnIndex;\n      var visibleColumns = columnsController.getVisibleColumns();\n      each(visibleColumns, function (index, column) {\n        if (column.allowEditing) {\n          columnIndex = index;\n          return false;\n        }\n      });\n      return columnIndex;\n    },\n    getFirstEditableCellInRow: function getFirstEditableCellInRow(rowIndex) {\n      var rowsView = this.getView(\"rowsView\");\n      return rowsView && rowsView._getCellElement(rowIndex ? rowIndex : 0, this.getFirstEditableColumnIndex());\n    },\n    getFocusedCellInRow: function getFocusedCellInRow(rowIndex) {\n      return this.getFirstEditableCellInRow(rowIndex);\n    },\n    getIndexByKey: function getIndexByKey(key, items) {\n      return gridCoreUtils.getIndexByKey(key, items);\n    },\n    hasChanges: function hasChanges(rowIndex) {\n      var changes = this.getChanges();\n      var result = false;\n\n      for (var i = 0; i < (null === changes || void 0 === changes ? void 0 : changes.length); i++) {\n        if (changes[i].type && (!isDefined(rowIndex) || this._dataController.getRowIndexByKey(changes[i].key) === rowIndex)) {\n          result = true;\n          break;\n        }\n      }\n\n      return result;\n    },\n    dispose: function dispose() {\n      this.callBase();\n      clearTimeout(this._inputFocusTimeoutID);\n      eventsEngine.off(domAdapter.getDocument(), pointerEvents.up, this._pointerUpEditorHandler);\n      eventsEngine.off(domAdapter.getDocument(), pointerEvents.down, this._pointerDownEditorHandler);\n      eventsEngine.off(domAdapter.getDocument(), clickEventName, this._saveEditorHandler);\n    },\n    optionChanged: function optionChanged(args) {\n      if (\"editing\" === args.name) {\n        var fullName = args.fullName;\n\n        if (fullName === EDITING_EDITROWKEY_OPTION_NAME) {\n          this._handleEditRowKeyChange(args);\n        } else if (fullName === EDITING_CHANGES_OPTION_NAME) {\n          this._handleChangesChange(args);\n        } else if (!args.handled) {\n          this._columnsController.reinit();\n\n          this.init();\n          this.resetChanges();\n\n          this._resetEditColumnName();\n\n          this._resetEditRowKey();\n        }\n\n        args.handled = true;\n      } else {\n        this.callBase(args);\n      }\n    },\n    _handleEditRowKeyChange: function _handleEditRowKeyChange(args) {\n      var rowIndex = this._dataController.getRowIndexByKey(args.value);\n\n      var oldRowIndexCorrection = this._getEditRowIndexCorrection();\n\n      var oldRowIndex = this._dataController.getRowIndexByKey(args.previousValue) + oldRowIndexCorrection;\n\n      if (isDefined(args.value)) {\n        if (args.value !== args.previousValue) {\n          this._editRowFromOptionChanged(rowIndex, oldRowIndex);\n        }\n      } else {\n        this.cancelEditData();\n      }\n    },\n    _handleChangesChange: function _handleChangesChange(args) {\n      var dataController = this._dataController;\n\n      if (!args.value.length && !args.previousValue.length) {\n        return;\n      }\n\n      this._processInsertChanges(args.value);\n\n      dataController.updateItems({\n        repaintChangesOnly: true\n      });\n    },\n    _processInsertChanges: function _processInsertChanges(changes) {\n      var _this7 = this;\n\n      changes.forEach(function (change) {\n        if (\"insert\" === change.type) {\n          _this7._addInsertInfo(change);\n        }\n      });\n    },\n    publicMethods: function publicMethods() {\n      return [\"addRow\", \"deleteRow\", \"undeleteRow\", \"editRow\", \"saveEditData\", \"cancelEditData\", \"hasEditData\"];\n    },\n    refresh: function refresh(isPageChanged) {\n      if (!isDefined(this._pageIndex)) {\n        return;\n      }\n\n      this._refreshCore(isPageChanged);\n    },\n    _refreshCore: noop,\n    isEditing: function isEditing() {\n      var isEditRowKeyDefined = isDefined(this.option(EDITING_EDITROWKEY_OPTION_NAME));\n      return isEditRowKeyDefined;\n    },\n    isEditRow: function isEditRow() {\n      return false;\n    },\n    _setEditRowKey: function _setEditRowKey(value, silent) {\n      if (silent) {\n        this._silentOption(EDITING_EDITROWKEY_OPTION_NAME, value);\n      } else {\n        this.option(EDITING_EDITROWKEY_OPTION_NAME, value);\n      }\n    },\n    _setEditRowKeyByIndex: function _setEditRowKeyByIndex(rowIndex, silent) {\n      var key = this._dataController.getKeyByRowIndex(rowIndex);\n\n      if (void 0 === key) {\n        this._dataController.fireError(\"E1043\");\n\n        return;\n      }\n\n      this._setEditRowKey(key, silent);\n    },\n    getEditRowIndex: function getEditRowIndex() {\n      return this._getVisibleEditRowIndex();\n    },\n    getEditFormRowIndex: function getEditFormRowIndex() {\n      return -1;\n    },\n    _isEditRowByIndex: function _isEditRowByIndex(rowIndex) {\n      var key = this._dataController.getKeyByRowIndex(rowIndex);\n\n      var isKeyEqual = isDefined(key) && equalByValue(this.option(EDITING_EDITROWKEY_OPTION_NAME), key);\n\n      if (isKeyEqual) {\n        return this._getVisibleEditRowIndex() === rowIndex;\n      }\n\n      return isKeyEqual;\n    },\n    isEditCell: function isEditCell(visibleRowIndex, columnIndex) {\n      return this._isEditRowByIndex(visibleRowIndex) && this._getVisibleEditColumnIndex() === columnIndex;\n    },\n    getPopupContent: noop,\n    _isProcessedItem: function _isProcessedItem(item) {\n      return false;\n    },\n    _getInsertRowIndex: function _getInsertRowIndex(items, change, isProcessedItems) {\n      var _this8 = this;\n\n      var result = -1;\n      var dataController = this._dataController;\n\n      var key = this._getInsertAfterOrBeforeKey(change);\n\n      if (!isDefined(key) && 0 === items.length) {\n        result = 0;\n      } else if (isDefined(key)) {\n        items.some(function (item, index) {\n          var isProcessedItem = isProcessedItems || _this8._isProcessedItem(item);\n\n          if (isObject(item)) {\n            if (isProcessedItem || isDefined(item[INSERT_INDEX])) {\n              if (equalByValue(item.key, key)) {\n                result = index;\n              }\n            } else if (equalByValue(dataController.keyOf(item), key)) {\n              result = index;\n            }\n          }\n\n          if (result >= 0) {\n            var nextItem = items[result + 1];\n\n            if (nextItem && (\"detail\" === nextItem.rowType || \"detailAdaptive\" === nextItem.rowType) && isDefined(change.insertAfterKey)) {\n              return;\n            }\n\n            if (isDefined(change.insertAfterKey)) {\n              result += 1;\n            }\n\n            return true;\n          }\n        });\n      }\n\n      return result;\n    },\n    _generateNewItem: function _generateNewItem(key) {\n      var _this$_getInternalDat2;\n\n      var item = {\n        key: key\n      };\n      var insertInfo = null === (_this$_getInternalDat2 = this._getInternalData(key)) || void 0 === _this$_getInternalDat2 ? void 0 : _this$_getInternalDat2.insertInfo;\n\n      if (null !== insertInfo && void 0 !== insertInfo && insertInfo[INSERT_INDEX]) {\n        item[INSERT_INDEX] = insertInfo[INSERT_INDEX];\n      }\n\n      return item;\n    },\n    _getLoadedRowIndex: function _getLoadedRowIndex(items, change, isProcessedItems) {\n      var loadedRowIndex = this._getInsertRowIndex(items, change, isProcessedItems);\n\n      var dataController = this._dataController;\n\n      if (loadedRowIndex < 0) {\n        var newRowPosition = this._getNewRowPosition();\n\n        var pageIndex = dataController.pageIndex();\n\n        var insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);\n\n        if (newRowPosition !== LAST_NEW_ROW_POSITION && 0 === pageIndex && !isDefined(insertAfterOrBeforeKey)) {\n          loadedRowIndex = 0;\n        } else if (newRowPosition === LAST_NEW_ROW_POSITION && dataController.isLastPageLoaded()) {\n          loadedRowIndex = items.length;\n        }\n      }\n\n      return loadedRowIndex;\n    },\n    processItems: function processItems(items, e) {\n      var _this9 = this;\n\n      var changeType = e.changeType;\n      this.update(changeType);\n      var changes = this.getChanges();\n      changes.forEach(function (change) {\n        var _this$_getInternalDat3;\n\n        var isInsert = change.type === DATA_EDIT_DATA_INSERT_TYPE;\n\n        if (!isInsert) {\n          return;\n        }\n\n        var key = change.key;\n        var insertInfo = null === (_this$_getInternalDat3 = _this9._getInternalData(key)) || void 0 === _this$_getInternalDat3 ? void 0 : _this$_getInternalDat3.insertInfo;\n\n        if (!isDefined(key) || !isDefined(insertInfo)) {\n          insertInfo = _this9._addInsertInfo(change);\n          key = insertInfo.key;\n        }\n\n        var loadedRowIndex = _this9._getLoadedRowIndex(items, change);\n\n        var item = _this9._generateNewItem(key);\n\n        if (loadedRowIndex >= 0) {\n          items.splice(loadedRowIndex, 0, item);\n        }\n      });\n      return items;\n    },\n    processDataItem: function processDataItem(item, options, generateDataValues) {\n      var columns = options.visibleColumns;\n      var key = item.data[INSERT_INDEX] ? item.data.key : item.key;\n      var changes = this.getChanges();\n      var editIndex = gridCoreUtils.getIndexByKey(key, changes);\n      item.isEditing = false;\n\n      if (editIndex >= 0) {\n        this._processDataItemCore(item, changes[editIndex], key, columns, generateDataValues);\n      }\n    },\n    _processDataItemCore: function _processDataItemCore(item, change, key, columns, generateDataValues) {\n      var data = change.data,\n          type = change.type;\n\n      switch (type) {\n        case DATA_EDIT_DATA_INSERT_TYPE:\n          item.isNewRow = true;\n          item.key = key;\n          item.data = data;\n          break;\n\n        case DATA_EDIT_DATA_UPDATE_TYPE:\n          item.modified = true;\n          item.oldData = item.data;\n          item.data = createObjectWithChanges(item.data, data);\n          item.modifiedValues = generateDataValues(data, columns, true);\n          break;\n\n        case DATA_EDIT_DATA_REMOVE_TYPE:\n          item.removed = true;\n      }\n    },\n    _initNewRow: function _initNewRow(options) {\n      var _this10 = this;\n\n      this.executeAction(\"onInitNewRow\", options);\n\n      if (options.promise) {\n        var deferred = new Deferred();\n        when(fromPromise(options.promise)).done(deferred.resolve).fail(createFailureHandler(deferred)).fail(function (arg) {\n          return _this10._fireDataErrorOccurred(arg);\n        });\n        return deferred;\n      }\n    },\n    _createInsertInfo: function _createInsertInfo() {\n      var insertInfo = {};\n      insertInfo[INSERT_INDEX] = this._getInsertIndex();\n      return insertInfo;\n    },\n    _addInsertInfo: function _addInsertInfo(change, parentKey) {\n      var _this$_getInternalDat4;\n\n      var insertInfo;\n      var key = change.key;\n\n      if (!isDefined(key)) {\n        key = String(new Guid());\n        change.key = key;\n      }\n\n      insertInfo = null === (_this$_getInternalDat4 = this._getInternalData(key)) || void 0 === _this$_getInternalDat4 ? void 0 : _this$_getInternalDat4.insertInfo;\n\n      if (!isDefined(insertInfo)) {\n        var insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);\n\n        insertInfo = this._createInsertInfo();\n\n        if (!isDefined(insertAfterOrBeforeKey)) {\n          this._setInsertAfterOrBeforeKey(change, parentKey);\n        }\n      }\n\n      this._addInternalData({\n        insertInfo: insertInfo,\n        key: key\n      });\n\n      return {\n        insertInfo: insertInfo,\n        key: key\n      };\n    },\n    _setInsertAfterOrBeforeKey: function _setInsertAfterOrBeforeKey(change, parentKey) {\n      var dataController = this._dataController;\n      var allItems = dataController.items(true);\n      var rowsView = this.getView(\"rowsView\");\n\n      var newRowPosition = this._getNewRowPosition();\n\n      switch (newRowPosition) {\n        case FIRST_NEW_ROW_POSITION:\n        case LAST_NEW_ROW_POSITION:\n          break;\n\n        case PAGE_TOP_NEW_ROW_POSITION:\n        case PAGE_BOTTOM_NEW_ROW_POSITION:\n          if (allItems.length) {\n            var itemIndex = newRowPosition === PAGE_TOP_NEW_ROW_POSITION ? 0 : allItems.length - 1;\n            change[0 === itemIndex ? \"insertBeforeKey\" : \"insertAfterKey\"] = allItems[itemIndex].key;\n          }\n\n          break;\n\n        default:\n          var isViewportBottom = newRowPosition === VIEWPORT_BOTTOM_NEW_ROW_POSITION;\n          var visibleItemIndex = isViewportBottom ? null === rowsView || void 0 === rowsView ? void 0 : rowsView.getBottomVisibleItemIndex() : null === rowsView || void 0 === rowsView ? void 0 : rowsView.getTopVisibleItemIndex();\n          var row = dataController.getVisibleRows()[visibleItemIndex];\n\n          if (row && (!row.isEditing && \"detail\" === row.rowType || \"detailAdaptive\" === row.rowType)) {\n            visibleItemIndex++;\n          }\n\n          var insertKey = dataController.getKeyByRowIndex(visibleItemIndex);\n\n          if (isDefined(insertKey)) {\n            change.insertBeforeKey = insertKey;\n          }\n\n      }\n    },\n    _getInsertIndex: function _getInsertIndex() {\n      var _this11 = this;\n\n      var maxInsertIndex = 0;\n      this.getChanges().forEach(function (editItem) {\n        var _this$_getInternalDat5;\n\n        var insertInfo = null === (_this$_getInternalDat5 = _this11._getInternalData(editItem.key)) || void 0 === _this$_getInternalDat5 ? void 0 : _this$_getInternalDat5.insertInfo;\n\n        if (isDefined(insertInfo) && editItem.type === DATA_EDIT_DATA_INSERT_TYPE && insertInfo[INSERT_INDEX] > maxInsertIndex) {\n          maxInsertIndex = insertInfo[INSERT_INDEX];\n        }\n      });\n      return maxInsertIndex + 1;\n    },\n    _getInsertAfterOrBeforeKey: function _getInsertAfterOrBeforeKey(insertChange) {\n      var _insertChange$insertA;\n\n      return null !== (_insertChange$insertA = insertChange.insertAfterKey) && void 0 !== _insertChange$insertA ? _insertChange$insertA : insertChange.insertBeforeKey;\n    },\n    _getPageIndexToInsertRow: function _getPageIndexToInsertRow() {\n      var newRowPosition = this._getNewRowPosition();\n\n      var dataController = this._dataController;\n      var pageIndex = dataController.pageIndex();\n      var lastPageIndex = dataController.pageCount() - 1;\n\n      if (newRowPosition === FIRST_NEW_ROW_POSITION && 0 !== pageIndex) {\n        return 0;\n      } else if (newRowPosition === LAST_NEW_ROW_POSITION && pageIndex !== lastPageIndex) {\n        return lastPageIndex;\n      }\n\n      return -1;\n    },\n    addRow: function addRow(parentKey) {\n      var dataController = this._dataController;\n      var store = dataController.store();\n\n      if (!store) {\n        dataController.fireError(\"E1052\", this.component.NAME);\n        return new Deferred().reject();\n      }\n\n      return this._addRow(parentKey);\n    },\n    _addRow: function _addRow(parentKey) {\n      var _this12 = this;\n\n      var dataController = this._dataController;\n      var store = dataController.store();\n      var key = store && store.key();\n      var param = {\n        data: {}\n      };\n\n      var oldEditRowIndex = this._getVisibleEditRowIndex();\n\n      var deferred = new Deferred();\n      this.refresh();\n\n      if (!this._allowRowAdding()) {\n        when(this._navigateToNewRow(oldEditRowIndex)).done(deferred.resolve).fail(deferred.reject);\n        return deferred.promise();\n      }\n\n      if (!key) {\n        param.data.__KEY__ = String(new Guid());\n      }\n\n      when(this._initNewRow(param, parentKey)).done(function () {\n        if (_this12._allowRowAdding()) {\n          when(_this12._addRowCore(param.data, parentKey, oldEditRowIndex)).done(deferred.resolve).fail(deferred.reject);\n        } else {\n          deferred.reject(\"cancel\");\n        }\n      }).fail(deferred.reject);\n      return deferred.promise();\n    },\n    _allowRowAdding: function _allowRowAdding() {\n      var insertIndex = this._getInsertIndex();\n\n      if (insertIndex > 1) {\n        return false;\n      }\n\n      return true;\n    },\n    _addRowCore: function _addRowCore(data, parentKey, initialOldEditRowIndex) {\n      var change = {\n        data: data,\n        type: DATA_EDIT_DATA_INSERT_TYPE\n      };\n\n      var editRowIndex = this._getVisibleEditRowIndex();\n\n      var insertInfo = this._addInsertInfo(change, parentKey);\n\n      var key = insertInfo.key;\n\n      this._setEditRowKey(key, true);\n\n      this._addChange(change);\n\n      return this._navigateToNewRow(initialOldEditRowIndex, change, editRowIndex);\n    },\n    _navigateToNewRow: function _navigateToNewRow(oldEditRowIndex, change, editRowIndex) {\n      var _this13 = this;\n\n      var _editRowIndex, _change;\n\n      var d = new Deferred();\n      var dataController = this._dataController;\n      var focusController = this.getController(\"focus\");\n      editRowIndex = null !== (_editRowIndex = editRowIndex) && void 0 !== _editRowIndex ? _editRowIndex : -1;\n      change = null !== (_change = change) && void 0 !== _change ? _change : this.getChanges().filter(function (c) {\n        return c.type === DATA_EDIT_DATA_INSERT_TYPE;\n      })[0];\n\n      if (!change) {\n        return d.reject(\"cancel\").promise();\n      }\n\n      var pageIndexToInsertRow = this._getPageIndexToInsertRow();\n\n      var rowIndex = this._getLoadedRowIndex(dataController.items(), change, true);\n\n      var navigateToRowByKey = function navigateToRowByKey(key) {\n        when(null === focusController || void 0 === focusController ? void 0 : focusController.navigateToRow(key)).done(function () {\n          rowIndex = dataController.getRowIndexByKey(change.key);\n          d.resolve();\n        });\n      };\n\n      var insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);\n\n      if (pageIndexToInsertRow >= 0) {\n        dataController.pageIndex(pageIndexToInsertRow).done(function () {\n          navigateToRowByKey(change.key);\n        }).fail(d.reject);\n      } else if (rowIndex < 0 && isDefined(insertAfterOrBeforeKey)) {\n        navigateToRowByKey(insertAfterOrBeforeKey);\n      } else {\n        dataController.updateItems({\n          changeType: \"update\",\n          rowIndices: [oldEditRowIndex, editRowIndex, rowIndex]\n        });\n        rowIndex = dataController.getRowIndexByKey(change.key);\n\n        if (rowIndex < 0) {\n          navigateToRowByKey(change.key);\n        } else {\n          d.resolve();\n        }\n      }\n\n      d.done(function () {\n        _this13._showAddedRow(rowIndex);\n\n        _this13._afterInsertRow(change.key);\n      });\n      return d.promise();\n    },\n    _showAddedRow: function _showAddedRow(rowIndex) {\n      this._focusFirstEditableCellInRow(rowIndex);\n    },\n    _beforeFocusElementInRow: noop,\n    _focusFirstEditableCellInRow: function _focusFirstEditableCellInRow(rowIndex) {\n      var _this14 = this;\n\n      var dataController = this._dataController;\n      var key = dataController.getKeyByRowIndex(rowIndex);\n      var $firstCell = this.getFirstEditableCellInRow(rowIndex);\n      this._editCellInProgress = true;\n\n      this._delayedInputFocus($firstCell, function () {\n        rowIndex = dataController.getRowIndexByKey(key);\n        _this14._editCellInProgress = false;\n\n        _this14._beforeFocusElementInRow(rowIndex);\n      });\n    },\n    _isEditingStart: function _isEditingStart(options) {\n      this.executeAction(\"onEditingStart\", options);\n      return options.cancel;\n    },\n    _beforeUpdateItems: noop,\n    _getVisibleEditColumnIndex: function _getVisibleEditColumnIndex() {\n      var editColumnName = this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME);\n\n      if (!isDefined(editColumnName)) {\n        return -1;\n      }\n\n      return this._columnsController.getVisibleColumnIndex(editColumnName);\n    },\n    _setEditColumnNameByIndex: function _setEditColumnNameByIndex(index, silent) {\n      var _visibleColumns$index;\n\n      var visibleColumns = this._columnsController.getVisibleColumns();\n\n      this._setEditColumnName(null === (_visibleColumns$index = visibleColumns[index]) || void 0 === _visibleColumns$index ? void 0 : _visibleColumns$index.name, silent);\n    },\n    _setEditColumnName: function _setEditColumnName(name, silent) {\n      if (silent) {\n        this._silentOption(EDITING_EDITCOLUMNNAME_OPTION_NAME, name);\n      } else {\n        this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME, name);\n      }\n    },\n    _resetEditColumnName: function _resetEditColumnName() {\n      this._setEditColumnName(null, true);\n    },\n    _getEditColumn: function _getEditColumn() {\n      var editColumnName = this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME);\n      return this._getColumnByName(editColumnName);\n    },\n    _getColumnByName: function _getColumnByName(name) {\n      var visibleColumns = this._columnsController.getVisibleColumns();\n\n      var editColumn;\n      isDefined(name) && visibleColumns.some(function (column) {\n        if (column.name === name) {\n          editColumn = column;\n          return true;\n        }\n      });\n      return editColumn;\n    },\n    _getVisibleEditRowIndex: function _getVisibleEditRowIndex(columnName) {\n      var dataController = this._dataController;\n      var editRowKey = this.option(EDITING_EDITROWKEY_OPTION_NAME);\n      var rowIndex = dataController.getRowIndexByKey(editRowKey);\n\n      if (-1 === rowIndex) {\n        return rowIndex;\n      }\n\n      return rowIndex + this._getEditRowIndexCorrection(columnName);\n    },\n    _getEditRowIndexCorrection: function _getEditRowIndexCorrection(columnName) {\n      var editColumn = columnName ? this._getColumnByName(columnName) : this._getEditColumn();\n      var isColumnHidden = \"adaptiveHidden\" === (null === editColumn || void 0 === editColumn ? void 0 : editColumn.visibleWidth);\n      return isColumnHidden ? 1 : 0;\n    },\n    _resetEditRowKey: function _resetEditRowKey() {\n      this._setEditRowKey(null, true);\n    },\n    _resetEditIndices: function _resetEditIndices() {\n      this._resetEditColumnName();\n\n      this._resetEditRowKey();\n    },\n    editRow: function editRow(rowIndex) {\n      var _item$oldData;\n\n      var dataController = this._dataController;\n      var items = dataController.items();\n      var item = items[rowIndex];\n      var params = {\n        data: item && item.data,\n        cancel: false\n      };\n\n      var oldRowIndex = this._getVisibleEditRowIndex();\n\n      if (!item) {\n        return;\n      }\n\n      if (rowIndex === oldRowIndex) {\n        return true;\n      }\n\n      if (void 0 === item.key) {\n        this._dataController.fireError(\"E1043\");\n\n        return;\n      }\n\n      if (!item.isNewRow) {\n        params.key = item.key;\n      }\n\n      if (this._isEditingStart(params)) {\n        return;\n      }\n\n      this.resetChanges();\n      this.init();\n\n      this._resetEditColumnName();\n\n      this._pageIndex = dataController.pageIndex();\n\n      this._addInternalData({\n        key: item.key,\n        oldData: null !== (_item$oldData = item.oldData) && void 0 !== _item$oldData ? _item$oldData : item.data\n      });\n\n      this._setEditRowKey(item.key);\n    },\n    _editRowFromOptionChanged: function _editRowFromOptionChanged(rowIndex, oldRowIndex) {\n      var rowIndices = [oldRowIndex, rowIndex];\n\n      this._beforeUpdateItems(rowIndices, rowIndex, oldRowIndex);\n\n      this._editRowFromOptionChangedCore(rowIndices, rowIndex, oldRowIndex);\n    },\n    _editRowFromOptionChangedCore: function _editRowFromOptionChangedCore(rowIndices, rowIndex, oldRowIndex) {\n      this._needFocusEditor = true;\n\n      this._dataController.updateItems({\n        changeType: \"update\",\n        rowIndices: rowIndices\n      });\n    },\n    _focusEditorIfNeed: noop,\n    _showEditPopup: noop,\n    _repaintEditPopup: noop,\n    _getEditPopupHiddenHandler: function _getEditPopupHiddenHandler() {\n      var _this15 = this;\n\n      return function (e) {\n        if (_this15.isEditing()) {\n          _this15.cancelEditData();\n        }\n      };\n    },\n    _getPopupEditFormTemplate: noop,\n    _getSaveButtonConfig: function _getSaveButtonConfig() {\n      return {\n        text: this.option(\"editing.texts.saveRowChanges\"),\n        onClick: this.saveEditData.bind(this)\n      };\n    },\n    _getCancelButtonConfig: function _getCancelButtonConfig() {\n      return {\n        text: this.option(\"editing.texts.cancelRowChanges\"),\n        onClick: this.cancelEditData.bind(this)\n      };\n    },\n    _removeInternalData: function _removeInternalData(key) {\n      var internalData = this._getInternalData(key);\n\n      var index = this._internalState.indexOf(internalData);\n\n      if (index > -1) {\n        this._internalState.splice(index, 1);\n      }\n    },\n    _updateInsertAfterOrBeforeKeys: function _updateInsertAfterOrBeforeKeys(changes, index) {\n      var _this16 = this;\n\n      var removeChange = changes[index];\n      changes.forEach(function (change) {\n        var insertAfterOrBeforeKey = _this16._getInsertAfterOrBeforeKey(change);\n\n        if (equalByValue(insertAfterOrBeforeKey, removeChange.key)) {\n          change[isDefined(change.insertAfterKey) ? \"insertAfterKey\" : \"insertBeforeKey\"] = _this16._getInsertAfterOrBeforeKey(removeChange);\n        }\n      });\n    },\n    _removeChange: function _removeChange(index) {\n      if (index >= 0) {\n        var changes = _toConsumableArray(this.getChanges());\n\n        var key = changes[index].key;\n\n        this._removeInternalData(key);\n\n        this._updateInsertAfterOrBeforeKeys(changes, index);\n\n        changes.splice(index, 1);\n\n        this._silentOption(EDITING_CHANGES_OPTION_NAME, changes);\n\n        if (equalByValue(this.option(EDITING_EDITROWKEY_OPTION_NAME), key)) {\n          this._resetEditIndices();\n        }\n      }\n    },\n    executeOperation: function executeOperation(deferred, func) {\n      var _this17 = this;\n\n      this._lastOperation && this._lastOperation.reject();\n      this._lastOperation = deferred;\n      this.waitForDeferredOperations().done(function () {\n        if (\"rejected\" === deferred.state()) {\n          return;\n        }\n\n        func();\n        _this17._lastOperation = null;\n      }).fail(function () {\n        deferred.reject();\n        _this17._lastOperation = null;\n      });\n    },\n    waitForDeferredOperations: function waitForDeferredOperations() {\n      return when.apply(void 0, _toConsumableArray(this._deferreds));\n    },\n    _processCanceledEditingCell: noop,\n    _repaintEditCell: function _repaintEditCell(column, oldColumn, oldEditRowIndex) {\n      this._needFocusEditor = true;\n\n      if (!column || !column.showEditorAlways || oldColumn && !oldColumn.showEditorAlways) {\n        this._editCellInProgress = true;\n        this.getController(\"editorFactory\").loseFocus();\n\n        this._dataController.updateItems({\n          changeType: \"update\",\n          rowIndices: [oldEditRowIndex, this._getVisibleEditRowIndex()]\n        });\n      } else if (column !== oldColumn) {\n        this._dataController.updateItems({\n          changeType: \"update\",\n          rowIndices: []\n        });\n      }\n    },\n    _delayedInputFocus: function _delayedInputFocus($cell, beforeFocusCallback, callBeforeFocusCallbackAlways) {\n      var _this18 = this;\n\n      var inputFocus = function inputFocus() {\n        if (beforeFocusCallback) {\n          beforeFocusCallback();\n        }\n\n        if ($cell) {\n          var $focusableElement = $cell.find(FOCUSABLE_ELEMENT_SELECTOR).first();\n          gridCoreUtils.focusAndSelectElement(_this18, $focusableElement);\n        }\n\n        _this18._beforeFocusCallback = null;\n      };\n\n      if (devices.real().ios || devices.real().android) {\n        inputFocus();\n      } else {\n        if (this._beforeFocusCallback) {\n          this._beforeFocusCallback();\n        }\n\n        clearTimeout(this._inputFocusTimeoutID);\n\n        if (callBeforeFocusCallbackAlways) {\n          this._beforeFocusCallback = beforeFocusCallback;\n        }\n\n        this._inputFocusTimeoutID = setTimeout(inputFocus);\n      }\n    },\n    _focusEditingCell: function _focusEditingCell(beforeFocusCallback, $editCell, callBeforeFocusCallbackAlways) {\n      var rowsView = this.getView(\"rowsView\");\n\n      var editColumnIndex = this._getVisibleEditColumnIndex();\n\n      $editCell = $editCell || rowsView && rowsView._getCellElement(this._getVisibleEditRowIndex(), editColumnIndex);\n\n      if ($editCell) {\n        this._delayedInputFocus($editCell, beforeFocusCallback, callBeforeFocusCallbackAlways);\n      }\n    },\n    deleteRow: function deleteRow(rowIndex) {\n      this._checkAndDeleteRow(rowIndex);\n    },\n    _checkAndDeleteRow: function _checkAndDeleteRow(rowIndex) {\n      var _this19 = this;\n\n      var editingOptions = this.option(\"editing\");\n      var editingTexts = null === editingOptions || void 0 === editingOptions ? void 0 : editingOptions.texts;\n      var confirmDelete = null === editingOptions || void 0 === editingOptions ? void 0 : editingOptions.confirmDelete;\n      var confirmDeleteMessage = null === editingTexts || void 0 === editingTexts ? void 0 : editingTexts.confirmDeleteMessage;\n\n      var item = this._dataController.items()[rowIndex];\n\n      var allowDeleting = !this.isEditing() || item.isNewRow;\n\n      if (item && allowDeleting) {\n        if (!confirmDelete || !confirmDeleteMessage) {\n          this._deleteRowCore(rowIndex);\n        } else {\n          var confirmDeleteTitle = editingTexts && editingTexts.confirmDeleteTitle;\n          var showDialogTitle = isDefined(confirmDeleteTitle) && confirmDeleteTitle.length > 0;\n          confirm(confirmDeleteMessage, confirmDeleteTitle, showDialogTitle).done(function (confirmResult) {\n            if (confirmResult) {\n              _this19._deleteRowCore(rowIndex);\n            }\n          });\n        }\n      }\n    },\n    _deleteRowCore: function _deleteRowCore(rowIndex) {\n      var dataController = this._dataController;\n      var item = dataController.items()[rowIndex];\n      var key = item && item.key;\n\n      var oldEditRowIndex = this._getVisibleEditRowIndex();\n\n      this.refresh();\n      var changes = this.getChanges();\n      var editIndex = gridCoreUtils.getIndexByKey(key, changes);\n\n      if (editIndex >= 0) {\n        if (changes[editIndex].type === DATA_EDIT_DATA_INSERT_TYPE) {\n          this._removeChange(editIndex);\n        } else {\n          this._addChange({\n            key: key,\n            type: DATA_EDIT_DATA_REMOVE_TYPE\n          });\n        }\n      } else {\n        this._addChange({\n          key: key,\n          oldData: item.data,\n          type: DATA_EDIT_DATA_REMOVE_TYPE\n        });\n      }\n\n      return this._afterDeleteRow(rowIndex, oldEditRowIndex);\n    },\n    _afterDeleteRow: function _afterDeleteRow(rowIndex, oldEditRowIndex) {\n      return this.saveEditData();\n    },\n    undeleteRow: function undeleteRow(rowIndex) {\n      var dataController = this._dataController;\n      var item = dataController.items()[rowIndex];\n\n      var oldEditRowIndex = this._getVisibleEditRowIndex();\n\n      var key = item && item.key;\n      var changes = this.getChanges();\n\n      if (item) {\n        var editIndex = gridCoreUtils.getIndexByKey(key, changes);\n\n        if (editIndex >= 0) {\n          var data = changes[editIndex].data;\n\n          if (isEmptyObject(data)) {\n            this._removeChange(editIndex);\n          } else {\n            this._addChange({\n              key: key,\n              type: DATA_EDIT_DATA_UPDATE_TYPE\n            });\n          }\n\n          dataController.updateItems({\n            changeType: \"update\",\n            rowIndices: [oldEditRowIndex, rowIndex]\n          });\n        }\n      }\n    },\n    _fireOnSaving: function _fireOnSaving() {\n      var _this20 = this;\n\n      var onSavingParams = {\n        cancel: false,\n        promise: null,\n        changes: _toConsumableArray(this.getChanges())\n      };\n      this.executeAction(\"onSaving\", onSavingParams);\n      var d = new Deferred();\n      when(fromPromise(onSavingParams.promise)).done(function () {\n        d.resolve(onSavingParams);\n      }).fail(function (arg) {\n        createFailureHandler(d);\n\n        _this20._fireDataErrorOccurred(arg);\n\n        d.resolve({\n          cancel: true\n        });\n      });\n      return d;\n    },\n    _executeEditingAction: function _executeEditingAction(actionName, params, func) {\n      if (this.component._disposed) {\n        return null;\n      }\n\n      var deferred = new Deferred();\n      this.executeAction(actionName, params);\n      when(fromPromise(params.cancel)).done(function (cancel) {\n        if (cancel) {\n          setTimeout(function () {\n            deferred.resolve(\"cancel\");\n          });\n        } else {\n          func(params).done(deferred.resolve).fail(createFailureHandler(deferred));\n        }\n      }).fail(createFailureHandler(deferred));\n      return deferred;\n    },\n    _processChanges: function _processChanges(deferreds, results, dataChanges, changes) {\n      var _this21 = this;\n\n      var store = this._dataController.store();\n\n      each(changes, function (index, change) {\n        var oldData = _this21._getOldData(change.key);\n\n        var data = change.data,\n            type = change.type;\n\n        var changeCopy = _extends({}, change);\n\n        var deferred;\n        var params;\n\n        if (_this21._beforeSaveEditData(change, index)) {\n          return;\n        }\n\n        switch (type) {\n          case DATA_EDIT_DATA_REMOVE_TYPE:\n            params = {\n              data: oldData,\n              key: change.key,\n              cancel: false\n            };\n            deferred = _this21._executeEditingAction(\"onRowRemoving\", params, function () {\n              return store.remove(change.key).done(function (key) {\n                dataChanges.push({\n                  type: \"remove\",\n                  key: key\n                });\n              });\n            });\n            break;\n\n          case DATA_EDIT_DATA_INSERT_TYPE:\n            params = {\n              data: data,\n              cancel: false\n            };\n            deferred = _this21._executeEditingAction(\"onRowInserting\", params, function () {\n              return store.insert(params.data).done(function (data, key) {\n                if (isDefined(key)) {\n                  changeCopy.key = key;\n                }\n\n                if (data && isObject(data) && data !== params.data) {\n                  changeCopy.data = data;\n                }\n\n                dataChanges.push({\n                  type: \"insert\",\n                  data: data,\n                  index: 0\n                });\n              });\n            });\n            break;\n\n          case DATA_EDIT_DATA_UPDATE_TYPE:\n            params = {\n              newData: data,\n              oldData: oldData,\n              key: change.key,\n              cancel: false\n            };\n            deferred = _this21._executeEditingAction(\"onRowUpdating\", params, function () {\n              return store.update(change.key, params.newData).done(function (data, key) {\n                if (data && isObject(data) && data !== params.newData) {\n                  changeCopy.data = data;\n                }\n\n                dataChanges.push({\n                  type: \"update\",\n                  key: key,\n                  data: data\n                });\n              });\n            });\n        }\n\n        changes[index] = changeCopy;\n\n        if (deferred) {\n          var doneDeferred = new Deferred();\n          deferred.always(function (data) {\n            results.push({\n              key: change.key,\n              result: data\n            });\n          }).always(doneDeferred.resolve);\n          deferreds.push(doneDeferred.promise());\n        }\n      });\n    },\n    _processRemoveIfError: function _processRemoveIfError(changes, editIndex) {\n      var change = changes[editIndex];\n\n      if ((null === change || void 0 === change ? void 0 : change.type) === DATA_EDIT_DATA_REMOVE_TYPE) {\n        if (editIndex >= 0) {\n          changes.splice(editIndex, 1);\n        }\n      }\n\n      return true;\n    },\n    _processRemove: function _processRemove(changes, editIndex, cancel) {\n      var change = changes[editIndex];\n\n      if (!cancel || !change || change.type === DATA_EDIT_DATA_REMOVE_TYPE) {\n        return this._processRemoveCore(changes, editIndex, !cancel || !change);\n      }\n    },\n    _processRemoveCore: function _processRemoveCore(changes, editIndex) {\n      if (editIndex >= 0) {\n        changes.splice(editIndex, 1);\n      }\n\n      return true;\n    },\n    _processSaveEditDataResult: function _processSaveEditDataResult(results) {\n      var hasSavedData = false;\n\n      var changes = _toConsumableArray(this.getChanges());\n\n      var changesLength = changes.length;\n\n      for (var i = 0; i < results.length; i++) {\n        var arg = results[i].result;\n        var cancel = \"cancel\" === arg;\n        var editIndex = gridCoreUtils.getIndexByKey(results[i].key, changes);\n        var change = changes[editIndex];\n        var isError = arg && arg instanceof Error;\n\n        if (isError) {\n          if (change) {\n            this._addInternalData({\n              key: change.key,\n              error: arg\n            });\n          }\n\n          this._fireDataErrorOccurred(arg);\n\n          if (this._processRemoveIfError(changes, editIndex)) {\n            break;\n          }\n        } else if (this._processRemove(changes, editIndex, cancel)) {\n          hasSavedData = !cancel;\n        }\n      }\n\n      if (changes.length < changesLength) {\n        this._silentOption(EDITING_CHANGES_OPTION_NAME, changes);\n      }\n\n      return hasSavedData;\n    },\n    _fireSaveEditDataEvents: function _fireSaveEditDataEvents(changes) {\n      var _this22 = this;\n\n      each(changes, function (_, _ref) {\n        var data = _ref.data,\n            key = _ref.key,\n            type = _ref.type;\n\n        var internalData = _this22._addInternalData({\n          key: key\n        });\n\n        var params = {\n          key: key,\n          data: data\n        };\n\n        if (internalData.error) {\n          params.error = internalData.error;\n        }\n\n        switch (type) {\n          case DATA_EDIT_DATA_REMOVE_TYPE:\n            _this22.executeAction(\"onRowRemoved\", extend({}, params, {\n              data: internalData.oldData\n            }));\n\n            break;\n\n          case DATA_EDIT_DATA_INSERT_TYPE:\n            _this22.executeAction(\"onRowInserted\", params);\n\n            break;\n\n          case DATA_EDIT_DATA_UPDATE_TYPE:\n            _this22.executeAction(\"onRowUpdated\", params);\n\n        }\n      });\n      this.executeAction(\"onSaved\", {\n        changes: changes\n      });\n    },\n    saveEditData: function saveEditData() {\n      var _this23 = this;\n\n      var deferred = new Deferred();\n      this.waitForDeferredOperations().done(function () {\n        if (_this23.isSaving()) {\n          _this23._resolveAfterSave(deferred);\n\n          return;\n        }\n\n        when(_this23._beforeSaveEditData()).done(function (cancel) {\n          if (cancel) {\n            _this23._resolveAfterSave(deferred, {\n              cancel: cancel\n            });\n\n            return;\n          }\n\n          _this23._saving = true;\n          var options = {};\n\n          _this23._saveEditDataInner(options).always(function () {\n            _this23._saving = false;\n            options.needFocusEditCell && _this23._focusEditingCell();\n          }).done(deferred.resolve).fail(deferred.reject);\n        }).fail(deferred.reject);\n      }).fail(deferred.reject);\n      return deferred.promise();\n    },\n    _resolveAfterSave: function _resolveAfterSave(deferred) {\n      var _ref3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n          cancel = _ref3.cancel,\n          error = _ref3.error;\n\n      when(this._afterSaveEditData(cancel)).done(function () {\n        deferred.resolve(error);\n      }).fail(deferred.reject);\n    },\n    _saveEditDataInner: function _saveEditDataInner(options) {\n      var _this24 = this;\n\n      var results = [];\n      var deferreds = [];\n      var dataChanges = [];\n      var dataController = this._dataController;\n      var dataSource = dataController.dataSource();\n      var result = new Deferred();\n      when(this._fireOnSaving()).done(function (_ref2) {\n        var cancel = _ref2.cancel,\n            changes = _ref2.changes;\n\n        if (cancel) {\n          return result.resolve().promise();\n        }\n\n        _this24._processChanges(deferreds, results, dataChanges, changes);\n\n        if (deferreds.length) {\n          null === dataSource || void 0 === dataSource ? void 0 : dataSource.beginLoading();\n          when.apply(void 0, deferreds).done(function () {\n            if (_this24._processSaveEditDataResult(results)) {\n              _this24._endSaving(dataChanges, changes, result);\n            } else {\n              null === dataSource || void 0 === dataSource ? void 0 : dataSource.endLoading();\n              result.resolve();\n            }\n          }).fail(function (error) {\n            null === dataSource || void 0 === dataSource ? void 0 : dataSource.endLoading();\n            result.resolve(error);\n          });\n          return result.always(function () {\n            options.needFocusEditCell = true;\n          }).promise();\n        }\n\n        _this24._cancelSaving(result);\n      }).fail(result.reject);\n      return result.promise();\n    },\n    _beforeEndSaving: function _beforeEndSaving(changes) {\n      this._resetEditIndices();\n    },\n    _endSaving: function _endSaving(dataChanges, changes, deferred) {\n      var dataSource = this._dataController.dataSource();\n\n      this._beforeEndSaving(changes);\n\n      null === dataSource || void 0 === dataSource ? void 0 : dataSource.endLoading();\n\n      this._refreshDataAfterSave(dataChanges, changes, deferred);\n    },\n    _cancelSaving: function _cancelSaving(result) {\n      this.executeAction(\"onSaved\", {\n        changes: []\n      });\n\n      this._resolveAfterSave(result);\n    },\n    _refreshDataAfterSave: function _refreshDataAfterSave(dataChanges, changes, deferred) {\n      var _this25 = this;\n\n      var dataController = this._dataController;\n      var refreshMode = this.option(\"editing.refreshMode\");\n      var isFullRefresh = \"reshape\" !== refreshMode && \"repaint\" !== refreshMode;\n\n      if (!isFullRefresh) {\n        dataController.push(dataChanges);\n      }\n\n      when(dataController.refresh({\n        selection: isFullRefresh,\n        reload: isFullRefresh,\n        load: \"reshape\" === refreshMode,\n        changesOnly: this.option(\"repaintChangesOnly\")\n      })).always(function () {\n        _this25._fireSaveEditDataEvents(changes);\n      }).done(function () {\n        _this25._resolveAfterSave(deferred);\n      }).fail(function (error) {\n        _this25._resolveAfterSave(deferred, {\n          error: error\n        });\n      });\n    },\n    isSaving: function isSaving() {\n      return this._saving;\n    },\n    _updateEditColumn: function _updateEditColumn() {\n      var isEditColumnVisible = this._isEditColumnVisible();\n\n      var useIcons = this.option(\"editing.useIcons\");\n      var cssClass = COMMAND_EDIT_CLASS + (useIcons ? \" \" + COMMAND_EDIT_WITH_ICONS_CLASS : \"\");\n\n      this._columnsController.addCommandColumn({\n        type: \"buttons\",\n        command: \"edit\",\n        visible: isEditColumnVisible,\n        cssClass: cssClass,\n        width: \"auto\",\n        alignment: \"center\",\n        cellTemplate: this._getEditCommandCellTemplate(),\n        fixedPosition: \"right\"\n      });\n\n      this._columnsController.columnOption(\"command:edit\", {\n        visible: isEditColumnVisible,\n        cssClass: cssClass\n      });\n    },\n    _isEditColumnVisible: function _isEditColumnVisible() {\n      var editingOptions = this.option(\"editing\");\n      return editingOptions.allowDeleting;\n    },\n    _isEditButtonDisabled: function _isEditButtonDisabled() {\n      var hasChanges = this.hasChanges();\n      var isEditRowDefined = isDefined(this.option(\"editing.editRowKey\"));\n      return !(isEditRowDefined || hasChanges);\n    },\n    _updateEditButtons: function _updateEditButtons() {\n      var headerPanel = this.getView(\"headerPanel\");\n\n      var isButtonDisabled = this._isEditButtonDisabled();\n\n      if (headerPanel) {\n        headerPanel.setToolbarItemDisabled(\"saveButton\", isButtonDisabled);\n        headerPanel.setToolbarItemDisabled(\"revertButton\", isButtonDisabled);\n      }\n    },\n    _applyModified: function _applyModified($element) {\n      $element && $element.addClass(CELL_MODIFIED);\n    },\n    _beforeCloseEditCellInBatchMode: noop,\n    cancelEditData: function cancelEditData() {\n      var changes = this.getChanges();\n      var params = {\n        cancel: false,\n        changes: changes\n      };\n      this.executeAction(\"onEditCanceling\", params);\n\n      if (!params.cancel) {\n        this._cancelEditDataCore();\n\n        this.executeAction(\"onEditCanceled\", {\n          changes: changes\n        });\n      }\n    },\n    _cancelEditDataCore: function _cancelEditDataCore() {\n      var rowIndex = this._getVisibleEditRowIndex();\n\n      this._beforeCancelEditData();\n\n      this.init();\n      this.resetChanges();\n\n      this._resetEditColumnName();\n\n      this._resetEditRowKey();\n\n      this._afterCancelEditData(rowIndex);\n    },\n    _afterCancelEditData: function _afterCancelEditData(rowIndex) {\n      var dataController = this._dataController;\n      dataController.updateItems({\n        repaintChangesOnly: this.option(\"repaintChangesOnly\")\n      });\n    },\n    _hideEditPopup: noop,\n    hasEditData: function hasEditData() {\n      return this.hasChanges();\n    },\n    update: function update(changeType) {\n      var dataController = this._dataController;\n\n      if (dataController && this._pageIndex !== dataController.pageIndex()) {\n        if (\"refresh\" === changeType) {\n          this.refresh(true);\n        }\n\n        this._pageIndex = dataController.pageIndex();\n      }\n\n      this._updateEditButtons();\n    },\n    _getRowIndicesForCascadeUpdating: function _getRowIndicesForCascadeUpdating(row, skipCurrentRow) {\n      return skipCurrentRow ? [] : [row.rowIndex];\n    },\n    addDeferred: function addDeferred(deferred) {\n      var _this26 = this;\n\n      if (this._deferreds.indexOf(deferred) < 0) {\n        this._deferreds.push(deferred);\n\n        deferred.always(function () {\n          var index = _this26._deferreds.indexOf(deferred);\n\n          if (index >= 0) {\n            _this26._deferreds.splice(index, 1);\n          }\n        });\n      }\n    },\n    _prepareChange: function _prepareChange(options, value, text) {\n      var _this27 = this;\n\n      var _options$row;\n\n      var newData = {};\n      var oldData = null === (_options$row = options.row) || void 0 === _options$row ? void 0 : _options$row.data;\n      var rowKey = options.key;\n      var deferred = new Deferred();\n\n      if (void 0 !== rowKey) {\n        options.value = value;\n        var setCellValueResult = fromPromise(options.column.setCellValue(newData, value, extend(true, {}, oldData), text));\n        setCellValueResult.done(function () {\n          deferred.resolve({\n            data: newData,\n            key: rowKey,\n            oldData: oldData,\n            type: DATA_EDIT_DATA_UPDATE_TYPE\n          });\n        }).fail(createFailureHandler(deferred)).fail(function (arg) {\n          return _this27._fireDataErrorOccurred(arg);\n        });\n\n        if (isDefined(text) && options.column.displayValueMap) {\n          options.column.displayValueMap[value] = text;\n        }\n\n        this._updateRowValues(options);\n\n        this.addDeferred(deferred);\n      }\n\n      return deferred;\n    },\n    _updateRowValues: function _updateRowValues(options) {\n      if (options.values) {\n        var dataController = this._dataController;\n        var rowIndex = dataController.getRowIndexByKey(options.key);\n        var row = dataController.getVisibleRows()[rowIndex];\n\n        if (row) {\n          options.values = row.values;\n        }\n\n        options.values[options.columnIndex] = options.value;\n      }\n    },\n    updateFieldValue: function updateFieldValue(options, value, text, forceUpdateRow) {\n      var _this28 = this;\n\n      var rowKey = options.key;\n      var deferred = new Deferred();\n\n      if (void 0 === rowKey) {\n        this._dataController.fireError(\"E1043\");\n      }\n\n      if (options.column.setCellValue) {\n        this._prepareChange(options, value, text).done(function (params) {\n          when(_this28._applyChange(options, params, forceUpdateRow)).always(function () {\n            deferred.resolve();\n          });\n        });\n      } else {\n        deferred.resolve();\n      }\n\n      return deferred.promise();\n    },\n    _focusPreviousEditingCellIfNeed: function _focusPreviousEditingCellIfNeed(options) {\n      if (this.hasEditData() && !this.isEditCell(options.rowIndex, options.columnIndex)) {\n        this._focusEditingCell();\n\n        this._updateEditRow(options.row, true);\n\n        return true;\n      }\n    },\n    _needUpdateRow: function _needUpdateRow(column) {\n      var visibleColumns = this._columnsController.getVisibleColumns();\n\n      if (!column) {\n        column = this._getEditColumn();\n      }\n\n      var isCustomSetCellValue = column && column.setCellValue !== column.defaultSetCellValue;\n      var isCustomCalculateCellValue = visibleColumns.some(function (visibleColumn) {\n        return visibleColumn.calculateCellValue !== visibleColumn.defaultCalculateCellValue;\n      });\n      return isCustomSetCellValue || isCustomCalculateCellValue;\n    },\n    _applyChange: function _applyChange(options, params, forceUpdateRow) {\n      var changeOptions = _extends({}, options, {\n        forceUpdateRow: forceUpdateRow\n      });\n\n      this._addChange(params, changeOptions);\n\n      this._updateEditButtons();\n\n      return this._applyChangeCore(options, changeOptions.forceUpdateRow);\n    },\n    _applyChangeCore: function _applyChangeCore(options, forceUpdateRow) {\n      var isCustomSetCellValue = options.column.setCellValue !== options.column.defaultSetCellValue;\n      var row = options.row;\n\n      if (row) {\n        if (forceUpdateRow || isCustomSetCellValue) {\n          this._updateEditRow(row, forceUpdateRow, isCustomSetCellValue);\n        } else if (row.update) {\n          row.update();\n        }\n      }\n    },\n    _updateEditRowCore: function _updateEditRowCore(row, skipCurrentRow, isCustomSetCellValue) {\n      this._dataController.updateItems({\n        changeType: \"update\",\n        rowIndices: this._getRowIndicesForCascadeUpdating(row, skipCurrentRow)\n      });\n    },\n    _updateEditRow: function _updateEditRow(row, forceUpdateRow, isCustomSetCellValue) {\n      if (forceUpdateRow) {\n        this._updateRowImmediately(row, forceUpdateRow, isCustomSetCellValue);\n      } else {\n        this._updateRowWithDelay(row, isCustomSetCellValue);\n      }\n    },\n    _updateRowImmediately: function _updateRowImmediately(row, forceUpdateRow, isCustomSetCellValue) {\n      this._updateEditRowCore(row, !forceUpdateRow, isCustomSetCellValue);\n\n      this._validateEditFormAfterUpdate(row, isCustomSetCellValue);\n\n      if (!forceUpdateRow) {\n        this._focusEditingCell();\n      }\n    },\n    _updateRowWithDelay: function _updateRowWithDelay(row, isCustomSetCellValue) {\n      var _this29 = this;\n\n      var deferred = new Deferred();\n      this.addDeferred(deferred);\n      setTimeout(function () {\n        var $focusedElement = $(domAdapter.getActiveElement());\n\n        var columnIndex = _this29._rowsView.getCellIndex($focusedElement, row.rowIndex);\n\n        var focusedElement = $focusedElement.get(0);\n        var selectionRange = gridCoreUtils.getSelectionRange(focusedElement);\n\n        _this29._updateEditRowCore(row, false, isCustomSetCellValue);\n\n        _this29._validateEditFormAfterUpdate(row, isCustomSetCellValue);\n\n        if (columnIndex >= 0) {\n          var $focusedItem = _this29._rowsView._getCellElement(row.rowIndex, columnIndex);\n\n          _this29._delayedInputFocus($focusedItem, function () {\n            setTimeout(function () {\n              focusedElement = domAdapter.getActiveElement();\n\n              if (selectionRange.selectionStart >= 0) {\n                gridCoreUtils.setSelectionRange(focusedElement, selectionRange);\n              }\n            });\n          });\n        }\n\n        deferred.resolve();\n      });\n    },\n    _validateEditFormAfterUpdate: noop,\n    _addChange: function _addChange(changeParams, options) {\n      var _this$getChanges;\n\n      var row = null === options || void 0 === options ? void 0 : options.row;\n\n      var changes = _toConsumableArray(this.getChanges());\n\n      var index = gridCoreUtils.getIndexByKey(changeParams.key, changes);\n\n      if (index < 0) {\n        index = changes.length;\n\n        this._addInternalData({\n          key: changeParams.key,\n          oldData: changeParams.oldData\n        });\n\n        delete changeParams.oldData;\n        changes.push(changeParams);\n      }\n\n      var change = _extends({}, changes[index]);\n\n      if (change) {\n        if (changeParams.data) {\n          change.data = createObjectWithChanges(change.data, changeParams.data);\n        }\n\n        if ((!change.type || !changeParams.data) && changeParams.type) {\n          change.type = changeParams.type;\n        }\n\n        if (row) {\n          row.oldData = this._getOldData(row.key);\n          row.data = createObjectWithChanges(row.data, changeParams.data);\n        }\n      }\n\n      changes[index] = change;\n\n      this._silentOption(EDITING_CHANGES_OPTION_NAME, changes);\n\n      if (options && change !== (null === (_this$getChanges = this.getChanges()) || void 0 === _this$getChanges ? void 0 : _this$getChanges[index])) {\n        options.forceUpdateRow = true;\n      }\n\n      return change;\n    },\n    _getFormEditItemTemplate: function _getFormEditItemTemplate(cellOptions, column) {\n      return column.editCellTemplate || this._getDefaultEditorTemplate();\n    },\n    getColumnTemplate: function getColumnTemplate(options) {\n      var _this30 = this;\n\n      var column = options.column;\n      var rowIndex = options.row && options.row.rowIndex;\n      var template;\n      var isRowMode = this.isRowBasedEditMode();\n      var isRowEditing = this.isEditRow(rowIndex);\n      var isCellEditing = this.isEditCell(rowIndex, options.columnIndex);\n      var editingStartOptions;\n\n      if ((column.showEditorAlways || column.setCellValue && (isRowEditing && column.allowEditing || isCellEditing)) && (\"data\" === options.rowType || \"detailAdaptive\" === options.rowType) && !column.command) {\n        var allowUpdating = this.allowUpdating(options);\n\n        if (((allowUpdating || isRowEditing) && column.allowEditing || isCellEditing) && (isRowEditing || !isRowMode)) {\n          if (column.showEditorAlways && !isRowMode) {\n            editingStartOptions = {\n              cancel: false,\n              key: options.row.isNewRow ? void 0 : options.row.key,\n              data: options.row.data,\n              column: column\n            };\n\n            this._isEditingStart(editingStartOptions);\n          }\n\n          if (!editingStartOptions || !editingStartOptions.cancel) {\n            options.setValue = function (value, text) {\n              _this30.updateFieldValue(options, value, text);\n            };\n          }\n        }\n\n        template = column.editCellTemplate || this._getDefaultEditorTemplate();\n      } else if (\"detail\" === column.command && \"detail\" === options.rowType && isRowEditing) {\n        template = null === this || void 0 === this ? void 0 : this.getEditFormTemplate(options);\n      }\n\n      return template;\n    },\n    _createButton: function _createButton($container, button, options, change) {\n      var icon = EDIT_ICON_CLASS[button.name];\n      var useIcons = this.option(\"editing.useIcons\");\n      var useLegacyColumnButtonTemplate = this.option(\"useLegacyColumnButtonTemplate\");\n      var $button = $(\"<a>\").attr(\"href\", \"#\").addClass(LINK_CLASS).addClass(button.cssClass);\n\n      if (button.template && useLegacyColumnButtonTemplate) {\n        this._rowsView.renderTemplate($container, button.template, options, true);\n      } else {\n        if (button.template) {\n          $button = $(\"<span>\").addClass(button.cssClass);\n        } else if (useIcons && icon || button.icon) {\n          icon = button.icon || icon;\n          var iconType = iconUtils.getImageSourceType(icon);\n\n          if (\"image\" === iconType || \"svg\" === iconType) {\n            $button = iconUtils.getImageContainer(icon).addClass(button.cssClass);\n          } else {\n            $button.addClass(\"dx-icon\" + (\"dxIcon\" === iconType ? \"-\" : \" \") + icon).attr(\"title\", button.text);\n          }\n\n          $button.addClass(\"dx-link-icon\");\n          $container.addClass(COMMAND_EDIT_WITH_ICONS_CLASS);\n          var localizationName = this.getButtonLocalizationNames()[button.name];\n          localizationName && $button.attr(\"aria-label\", messageLocalization.format(localizationName));\n        } else {\n          $button.text(button.text);\n        }\n\n        if (isDefined(button.hint)) {\n          $button.attr(\"title\", button.hint);\n        }\n\n        if (this._isButtonDisabled(button, options)) {\n          $button.addClass(\"dx-state-disabled\");\n        } else if (!button.template || button.onClick) {\n          eventsEngine.on($button, addNamespace(\"click\", EDITING_NAMESPACE), this.createAction(function (e) {\n            var _button$onClick;\n\n            null === (_button$onClick = button.onClick) || void 0 === _button$onClick ? void 0 : _button$onClick.call(button, extend({}, e, {\n              row: options.row,\n              column: options.column\n            }));\n            e.event.preventDefault();\n            e.event.stopPropagation();\n          }));\n        }\n\n        $container.append($button, \"&nbsp;\");\n\n        if (button.template) {\n          this._rowsView.renderTemplate($button, button.template, options, true, change);\n        }\n      }\n    },\n    getButtonLocalizationNames: function getButtonLocalizationNames() {\n      return {\n        edit: \"dxDataGrid-editingEditRow\",\n        save: \"dxDataGrid-editingSaveRowChanges\",\n        delete: \"dxDataGrid-editingDeleteRow\",\n        undelete: \"dxDataGrid-editingUndeleteRow\",\n        cancel: \"dxDataGrid-editingCancelRowChanges\"\n      };\n    },\n    prepareButtonItem: function prepareButtonItem(headerPanel, name, methodName, sortIndex) {\n      var _this31 = this;\n\n      var editingTexts = this.option(\"editing.texts\") || {};\n      var titleButtonTextByClassNames = {\n        revert: editingTexts.cancelAllChanges,\n        save: editingTexts.saveAllChanges,\n        addRow: editingTexts.addRow\n      };\n      var className = {\n        revert: \"cancel\",\n        save: \"save\",\n        addRow: \"addrow\"\n      }[name];\n      var hintText = titleButtonTextByClassNames[name];\n\n      var isButtonDisabled = (\"save\" === className || \"cancel\" === className) && this._isEditButtonDisabled();\n\n      return {\n        widget: \"dxButton\",\n        options: {\n          onInitialized: function onInitialized(e) {\n            $(e.element).addClass(headerPanel._getToolbarButtonClass(EDIT_BUTTON_CLASS + \" \" + _this31.addWidgetPrefix(className) + \"-button\"));\n          },\n          icon: \"edit-button-\" + className,\n          disabled: isButtonDisabled,\n          onClick: function onClick() {\n            setTimeout(function () {\n              _this31[methodName]();\n            });\n          },\n          text: hintText,\n          hint: hintText\n        },\n        showText: \"inMenu\",\n        name: name + \"Button\",\n        location: \"after\",\n        locateInMenu: \"auto\",\n        sortIndex: sortIndex\n      };\n    },\n    prepareEditButtons: function prepareEditButtons(headerPanel) {\n      var editingOptions = this.option(\"editing\") || {};\n      var buttonItems = [];\n\n      if (editingOptions.allowAdding) {\n        buttonItems.push(this.prepareButtonItem(headerPanel, \"addRow\", \"addRow\", 20));\n      }\n\n      return buttonItems;\n    },\n    highlightDataCell: function highlightDataCell($cell, parameters) {\n      var cellModified = this.isCellModified(parameters);\n      var shouldHighlight = cellModified && parameters.column.setCellValue && (this.getEditMode() !== EDIT_MODE_ROW || !parameters.row.isEditing);\n      shouldHighlight && $cell.addClass(CELL_MODIFIED);\n    },\n    _afterInsertRow: noop,\n    _beforeSaveEditData: function _beforeSaveEditData(change) {\n      if (change && !isDefined(change.key) && isDefined(change.type)) {\n        return true;\n      }\n    },\n    _afterSaveEditData: noop,\n    _beforeCancelEditData: noop,\n    _allowEditAction: function _allowEditAction(actionName, options) {\n      var allowEditAction = this.option(\"editing.\" + actionName);\n\n      if (isFunction(allowEditAction)) {\n        allowEditAction = allowEditAction({\n          component: this.component,\n          row: options.row\n        });\n      }\n\n      return allowEditAction;\n    },\n    allowUpdating: function allowUpdating(options, eventName) {\n      var startEditAction = this.option(\"editing.startEditAction\") || DEFAULT_START_EDIT_ACTION;\n      var needCallback = arguments.length > 1 ? startEditAction === eventName || \"down\" === eventName : true;\n      return needCallback && this._allowEditAction(\"allowUpdating\", options);\n    },\n    allowDeleting: function allowDeleting(options) {\n      return this._allowEditAction(\"allowDeleting\", options);\n    },\n    isCellModified: function isCellModified(parameters) {\n      var columnIndex = parameters.columnIndex;\n      var modifiedValues = parameters.row && (parameters.row.isNewRow ? parameters.row.values : parameters.row.modifiedValues);\n      return !!modifiedValues && void 0 !== modifiedValues[columnIndex];\n    },\n    isNewRowInEditMode: function isNewRowInEditMode() {\n      var visibleEditRowIndex = this._getVisibleEditRowIndex();\n\n      var rows = this._dataController.items();\n\n      return visibleEditRowIndex >= 0 ? rows[visibleEditRowIndex].isNewRow : false;\n    }\n  };\n}());\nexport var editingModule = {\n  defaultOptions: function defaultOptions() {\n    return {\n      editing: {\n        mode: \"row\",\n        refreshMode: \"full\",\n        newRowPosition: VIEWPORT_TOP_NEW_ROW_POSITION,\n        allowAdding: false,\n        allowUpdating: false,\n        allowDeleting: false,\n        useIcons: false,\n        selectTextOnEditStart: false,\n        confirmDelete: true,\n        texts: {\n          editRow: messageLocalization.format(\"dxDataGrid-editingEditRow\"),\n          saveAllChanges: messageLocalization.format(\"dxDataGrid-editingSaveAllChanges\"),\n          saveRowChanges: messageLocalization.format(\"dxDataGrid-editingSaveRowChanges\"),\n          cancelAllChanges: messageLocalization.format(\"dxDataGrid-editingCancelAllChanges\"),\n          cancelRowChanges: messageLocalization.format(\"dxDataGrid-editingCancelRowChanges\"),\n          addRow: messageLocalization.format(\"dxDataGrid-editingAddRow\"),\n          deleteRow: messageLocalization.format(\"dxDataGrid-editingDeleteRow\"),\n          undeleteRow: messageLocalization.format(\"dxDataGrid-editingUndeleteRow\"),\n          confirmDeleteMessage: messageLocalization.format(\"dxDataGrid-editingConfirmDeleteMessage\"),\n          confirmDeleteTitle: \"\"\n        },\n        form: {\n          colCount: 2\n        },\n        popup: {},\n        startEditAction: \"click\",\n        editRowKey: null,\n        editColumnName: null,\n        changes: []\n      },\n      useLegacyColumnButtonTemplate: false\n    };\n  },\n  controllers: {\n    editing: EditingController\n  },\n  extenders: {\n    controllers: {\n      data: {\n        init: function init() {\n          this._editingController = this.getController(\"editing\");\n          this.callBase();\n        },\n        reload: function reload(full, repaintChangesOnly) {\n          !repaintChangesOnly && this._editingController.refresh();\n          return this.callBase.apply(this, arguments);\n        },\n        repaintRows: function repaintRows() {\n          if (this.getController(\"editing\").isSaving()) {\n            return;\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _updateEditRow: function _updateEditRow(items) {\n          var editRowKey = this.option(EDITING_EDITROWKEY_OPTION_NAME);\n          var editRowIndex = gridCoreUtils.getIndexByKey(editRowKey, items);\n          var editItem = items[editRowIndex];\n\n          if (editItem) {\n            var _this$_updateEditItem;\n\n            editItem.isEditing = true;\n            null === (_this$_updateEditItem = this._updateEditItem) || void 0 === _this$_updateEditItem ? void 0 : _this$_updateEditItem.call(this, editItem);\n          }\n        },\n        _updateItemsCore: function _updateItemsCore(change) {\n          this.callBase(change);\n\n          this._updateEditRow(this.items(true));\n        },\n        _applyChangeUpdate: function _applyChangeUpdate(change) {\n          this._updateEditRow(change.items);\n\n          this.callBase(change);\n        },\n        _applyChangesOnly: function _applyChangesOnly(change) {\n          this._updateEditRow(change.items);\n\n          this.callBase(change);\n        },\n        _processItems: function _processItems(items, change) {\n          items = this._editingController.processItems(items, change);\n          return this.callBase(items, change);\n        },\n        _processDataItem: function _processDataItem(dataItem, options) {\n          this._editingController.processDataItem(dataItem, options, this.generateDataValues);\n\n          return this.callBase(dataItem, options);\n        },\n        _processItem: function _processItem(item, options) {\n          item = this.callBase(item, options);\n\n          if (item.isNewRow) {\n            options.dataIndex--;\n            delete item.dataIndex;\n          }\n\n          return item;\n        },\n        _getChangedColumnIndices: function _getChangedColumnIndices(oldItem, newItem, rowIndex, isLiveUpdate) {\n          if (oldItem.isNewRow !== newItem.isNewRow || oldItem.removed !== newItem.removed) {\n            return;\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _isCellChanged: function _isCellChanged(oldRow, newRow, visibleRowIndex, columnIndex, isLiveUpdate) {\n          var editingController = this.getController(\"editing\");\n          var cell = oldRow.cells && oldRow.cells[columnIndex];\n          var isEditing = editingController && editingController.isEditCell(visibleRowIndex, columnIndex);\n\n          if (isLiveUpdate && isEditing) {\n            return false;\n          }\n\n          if (cell && cell.column && !cell.column.showEditorAlways && cell.isEditing !== isEditing) {\n            return true;\n          }\n\n          return this.callBase.apply(this, arguments);\n        }\n      }\n    },\n    views: {\n      rowsView: {\n        init: function init() {\n          this.callBase();\n          this._editingController = this.getController(\"editing\");\n        },\n        getCellIndex: function getCellIndex($cell, rowIndex) {\n          if (!$cell.is(\"td\") && rowIndex >= 0) {\n            var $cellElements = this.getCellElements(rowIndex);\n            var cellIndex = -1;\n            each($cellElements, function (index, cellElement) {\n              if ($(cellElement).find($cell).length) {\n                cellIndex = index;\n              }\n            });\n            return cellIndex;\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        publicMethods: function publicMethods() {\n          return this.callBase().concat([\"cellValue\"]);\n        },\n        _getCellTemplate: function _getCellTemplate(options) {\n          var template = this._editingController.getColumnTemplate(options);\n\n          return template || this.callBase(options);\n        },\n        _isNativeClick: function _isNativeClick() {\n          return (devices.real().ios || devices.real().android) && this.option(\"editing.allowUpdating\");\n        },\n        _createRow: function _createRow(row) {\n          var $row = this.callBase.apply(this, arguments);\n\n          if (row) {\n            var isRowRemoved = !!row.removed;\n            var isRowInserted = !!row.isNewRow;\n            var isRowModified = !!row.modified;\n            isRowInserted && $row.addClass(ROW_INSERTED);\n            isRowModified && $row.addClass(ROW_MODIFIED);\n\n            if (isRowInserted || isRowRemoved) {\n              $row.removeClass(ROW_SELECTED);\n            }\n          }\n\n          return $row;\n        },\n        _getColumnIndexByElement: function _getColumnIndexByElement($element) {\n          var $tableElement = $element.closest(\"table\");\n          var $tableElements = this.getTableElements();\n\n          while ($tableElement.length && !$tableElements.filter($tableElement).length) {\n            $element = $tableElement.closest(\"td\");\n            $tableElement = $element.closest(\"table\");\n          }\n\n          return this._getColumnIndexByElementCore($element);\n        },\n        _getColumnIndexByElementCore: function _getColumnIndexByElementCore($element) {\n          var $targetElement = $element.closest(\".\" + ROW_CLASS + \"> td:not(.dx-master-detail-cell)\");\n          return this.getCellIndex($targetElement);\n        },\n        _editCellByClick: function _editCellByClick(e, eventName) {\n          var editingController = this._editingController;\n          var $targetElement = $(e.event.target);\n\n          var columnIndex = this._getColumnIndexByElement($targetElement);\n\n          var row = this._dataController.items()[e.rowIndex];\n\n          var allowUpdating = editingController.allowUpdating({\n            row: row\n          }, eventName) || row && row.isNewRow;\n\n          var column = this._columnsController.getVisibleColumns()[columnIndex];\n\n          var isEditedCell = editingController.isEditCell(e.rowIndex, columnIndex);\n          var allowEditing = allowUpdating && column && (column.allowEditing || isEditedCell);\n          var startEditAction = this.option(\"editing.startEditAction\") || \"click\";\n\n          if (\"down\" === eventName) {\n            if ((devices.real().ios || devices.real().android) && !isEditedCell) {\n              resetActiveElement();\n            }\n\n            return column && column.showEditorAlways && allowEditing && editingController.editCell(e.rowIndex, columnIndex);\n          }\n\n          if (\"click\" === eventName && \"dblClick\" === startEditAction && !isEditedCell) {\n            var withoutSaveEditData = null === row || void 0 === row ? void 0 : row.isNewRow;\n            editingController.closeEditCell(false, withoutSaveEditData);\n          }\n\n          if (allowEditing && eventName === startEditAction) {\n            return editingController.editCell(e.rowIndex, columnIndex) || editingController.isEditRow(e.rowIndex);\n          }\n        },\n        _rowPointerDown: function _rowPointerDown(e) {\n          var _this32 = this;\n\n          this._pointerDownTimeout = setTimeout(function () {\n            _this32._editCellByClick(e, \"down\");\n          });\n        },\n        _rowClick: function _rowClick(e) {\n          var isEditForm = $(e.rowElement).hasClass(this.addWidgetPrefix(EDIT_FORM_CLASS));\n          e.event[TARGET_COMPONENT_NAME] = this.component;\n\n          if (!this._editCellByClick(e, \"click\") && !isEditForm) {\n            this.callBase.apply(this, arguments);\n          }\n        },\n        _rowDblClick: function _rowDblClick(e) {\n          if (!this._editCellByClick(e, \"dblClick\")) {\n            this.callBase.apply(this, arguments);\n          }\n        },\n        _cellPrepared: function _cellPrepared($cell, parameters) {\n          var editingController = this._editingController;\n          var isCommandCell = !!parameters.column.command;\n          var isEditableCell = parameters.setValue;\n          var isEditRow = editingController.isEditRow(parameters.rowIndex);\n          var isEditing = isEditingCell(isEditRow, parameters);\n\n          if (isEditingOrShowEditorAlwaysDataCell(isEditRow, parameters)) {\n            var alignment = parameters.column.alignment;\n            $cell.toggleClass(this.addWidgetPrefix(READONLY_CLASS), !isEditableCell).toggleClass(CELL_FOCUS_DISABLED_CLASS, !isEditableCell);\n\n            if (alignment) {\n              $cell.find(EDITORS_INPUT_SELECTOR).first().css(\"textAlign\", alignment);\n            }\n          }\n\n          if (isEditing) {\n            this._editCellPrepared($cell);\n          }\n\n          if (parameters.column && !isCommandCell) {\n            editingController.highlightDataCell($cell, parameters);\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        _editCellPrepared: noop,\n        _formItemPrepared: noop,\n        _getCellOptions: function _getCellOptions(options) {\n          var cellOptions = this.callBase(options);\n          cellOptions.isEditing = this._editingController.isEditCell(cellOptions.rowIndex, cellOptions.columnIndex);\n          return cellOptions;\n        },\n        _createCell: function _createCell(options) {\n          var $cell = this.callBase(options);\n\n          var isEditRow = this._editingController.isEditRow(options.rowIndex);\n\n          isEditingOrShowEditorAlwaysDataCell(isEditRow, options) && $cell.addClass(EDITOR_CELL_CLASS);\n          return $cell;\n        },\n        cellValue: function cellValue(rowIndex, columnIdentifier, value, text) {\n          var cellOptions = this.getCellOptions(rowIndex, columnIdentifier);\n\n          if (cellOptions) {\n            if (void 0 === value) {\n              return cellOptions.value;\n            } else {\n              this._editingController.updateFieldValue(cellOptions, value, text, true);\n            }\n          }\n        },\n        dispose: function dispose() {\n          this.callBase.apply(this, arguments);\n          clearTimeout(this._pointerDownTimeout);\n        },\n        _renderCore: function _renderCore() {\n          this.callBase.apply(this, arguments);\n\n          this._editingController._focusEditorIfNeed();\n        }\n      },\n      headerPanel: {\n        _getToolbarItems: function _getToolbarItems() {\n          var items = this.callBase();\n          var editButtonItems = this.getController(\"editing\").prepareEditButtons(this);\n          return editButtonItems.concat(items);\n        },\n        optionChanged: function optionChanged(args) {\n          var fullName = args.fullName;\n\n          switch (args.name) {\n            case \"editing\":\n              var excludedOptions = [EDITING_POPUP_OPTION_NAME, EDITING_CHANGES_OPTION_NAME, EDITING_EDITCOLUMNNAME_OPTION_NAME, EDITING_EDITROWKEY_OPTION_NAME];\n              var shouldInvalidate = fullName && !excludedOptions.some(function (optionName) {\n                return optionName === fullName;\n              });\n              shouldInvalidate && this._invalidate();\n              this.callBase(args);\n              break;\n\n            case \"useLegacyColumnButtonTemplate\":\n              args.handled = true;\n              break;\n\n            default:\n              this.callBase(args);\n          }\n        },\n        isVisible: function isVisible() {\n          var editingOptions = this.getController(\"editing\").option(\"editing\");\n          return this.callBase() || (null === editingOptions || void 0 === editingOptions ? void 0 : editingOptions.allowAdding);\n        }\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}