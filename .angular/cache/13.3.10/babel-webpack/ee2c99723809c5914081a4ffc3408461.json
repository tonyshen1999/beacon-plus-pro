{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __decorate, __metadata, __param } from 'tslib';\nimport { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, Component, NgModule } from '@angular/core';\nimport DxFunnel from 'devextreme/viz/funnel';\nimport { DxComponent, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxoAdaptiveLayoutModule, DxoExportModule, DxoItemModule, DxoBorderModule, DxoHoverStyleModule, DxoHatchingModule, DxoSelectionStyleModule, DxoLabelModule, DxoConnectorModule, DxoFontModule, DxoFormatModule, DxoLegendModule, DxoMarginModule, DxoTitleModule, DxoSubtitleModule, DxoLoadingIndicatorModule, DxoSizeModule, DxoTooltipModule, DxoShadowModule } from 'devextreme-angular/ui/nested';\n/*!\r\n * devextreme-angular\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\n/**\r\n * The Funnel is a UI component that visualizes a value at different stages. It helps assess value changes throughout these stages and identify potential issues. The Funnel UI component conveys information using different interactive elements (tooltips, labels, legend) and enables you to create not only a funnel, but also a pyramid chart.\r\n\r\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'devextreme-angular/core';\nimport * as ɵngcc2 from '@angular/platform-browser';\nvar DxFunnelComponent = /*#__PURE__*/(function () {\n  var DxFunnelComponent = /*#__PURE__*/function (_DxComponent) {\n    _inherits(DxFunnelComponent, _DxComponent);\n\n    var _super = _createSuper(DxFunnelComponent);\n\n    function DxFunnelComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\n      var _this;\n\n      _classCallCheck(this, DxFunnelComponent);\n\n      _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n      _this._watcherHelper = _watcherHelper;\n      _this._idh = _idh;\n\n      _this._createEventEmitters([{\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'drawn',\n        emit: 'onDrawn'\n      }, {\n        subscribe: 'exported',\n        emit: 'onExported'\n      }, {\n        subscribe: 'exporting',\n        emit: 'onExporting'\n      }, {\n        subscribe: 'fileSaving',\n        emit: 'onFileSaving'\n      }, {\n        subscribe: 'hoverChanged',\n        emit: 'onHoverChanged'\n      }, {\n        subscribe: 'incidentOccurred',\n        emit: 'onIncidentOccurred'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'itemClick',\n        emit: 'onItemClick'\n      }, {\n        subscribe: 'legendClick',\n        emit: 'onLegendClick'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        subscribe: 'selectionChanged',\n        emit: 'onSelectionChanged'\n      }, {\n        emit: 'adaptiveLayoutChange'\n      }, {\n        emit: 'algorithmChange'\n      }, {\n        emit: 'argumentFieldChange'\n      }, {\n        emit: 'colorFieldChange'\n      }, {\n        emit: 'dataSourceChange'\n      }, {\n        emit: 'disabledChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'exportChange'\n      }, {\n        emit: 'hoverEnabledChange'\n      }, {\n        emit: 'invertedChange'\n      }, {\n        emit: 'itemChange'\n      }, {\n        emit: 'labelChange'\n      }, {\n        emit: 'legendChange'\n      }, {\n        emit: 'loadingIndicatorChange'\n      }, {\n        emit: 'marginChange'\n      }, {\n        emit: 'neckHeightChange'\n      }, {\n        emit: 'neckWidthChange'\n      }, {\n        emit: 'paletteChange'\n      }, {\n        emit: 'paletteExtensionModeChange'\n      }, {\n        emit: 'pathModifiedChange'\n      }, {\n        emit: 'redrawOnResizeChange'\n      }, {\n        emit: 'resolveLabelOverlappingChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'selectionModeChange'\n      }, {\n        emit: 'sizeChange'\n      }, {\n        emit: 'sortDataChange'\n      }, {\n        emit: 'themeChange'\n      }, {\n        emit: 'titleChange'\n      }, {\n        emit: 'tooltipChange'\n      }, {\n        emit: 'valueFieldChange'\n      }]);\n\n      _this._idh.setHost(_assertThisInitialized(_this));\n\n      optionHost.setHost(_assertThisInitialized(_this));\n      return _this;\n    }\n    /**\r\n     * Specifies adaptive layout properties.\r\n    \r\n     */\n\n\n    _createClass(DxFunnelComponent, [{\n      key: \"adaptiveLayout\",\n      get: function get() {\n        return this._getOption('adaptiveLayout');\n      },\n      set: function set(value) {\n        this._setOption('adaptiveLayout', value);\n      }\n      /**\r\n       * Specifies the algorithm for building the funnel.\r\n      \r\n       */\n\n    }, {\n      key: \"algorithm\",\n      get: function get() {\n        return this._getOption('algorithm');\n      },\n      set: function set(value) {\n        this._setOption('algorithm', value);\n      }\n      /**\r\n       * Specifies which data source field provides arguments for funnel items. The argument identifies a funnel item and represents it on the legend.\r\n      \r\n       */\n\n    }, {\n      key: \"argumentField\",\n      get: function get() {\n        return this._getOption('argumentField');\n      },\n      set: function set(value) {\n        this._setOption('argumentField', value);\n      }\n      /**\r\n       * Specifies which data source field provides colors for funnel items. If this field is absent, the palette provides the colors.\r\n      \r\n       */\n\n    }, {\n      key: \"colorField\",\n      get: function get() {\n        return this._getOption('colorField');\n      },\n      set: function set(value) {\n        this._setOption('colorField', value);\n      }\n      /**\r\n       * Binds the UI component to data.\r\n      \r\n       */\n\n    }, {\n      key: \"dataSource\",\n      get: function get() {\n        return this._getOption('dataSource');\n      },\n      set: function set(value) {\n        this._setOption('dataSource', value);\n      }\n      /**\r\n       * Specifies whether the UI component responds to user interaction.\r\n      \r\n       */\n\n    }, {\n      key: \"disabled\",\n      get: function get() {\n        return this._getOption('disabled');\n      },\n      set: function set(value) {\n        this._setOption('disabled', value);\n      }\n      /**\r\n       * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n      \r\n       */\n\n    }, {\n      key: \"elementAttr\",\n      get: function get() {\n        return this._getOption('elementAttr');\n      },\n      set: function set(value) {\n        this._setOption('elementAttr', value);\n      }\n      /**\r\n       * Configures the exporting and printing features.\r\n      \r\n       */\n\n    }, {\n      key: \"export\",\n      get: function get() {\n        return this._getOption('export');\n      },\n      set: function set(value) {\n        this._setOption('export', value);\n      }\n      /**\r\n       * Specifies whether funnel items change their style when a user pauses on them.\r\n      \r\n       */\n\n    }, {\n      key: \"hoverEnabled\",\n      get: function get() {\n        return this._getOption('hoverEnabled');\n      },\n      set: function set(value) {\n        this._setOption('hoverEnabled', value);\n      }\n      /**\r\n       * Turns the funnel upside down.\r\n      \r\n       */\n\n    }, {\n      key: \"inverted\",\n      get: function get() {\n        return this._getOption('inverted');\n      },\n      set: function set(value) {\n        this._setOption('inverted', value);\n      }\n      /**\r\n       * Configures funnel items&apos; appearance.\r\n      \r\n       */\n\n    }, {\n      key: \"item\",\n      get: function get() {\n        return this._getOption('item');\n      },\n      set: function set(value) {\n        this._setOption('item', value);\n      }\n      /**\r\n       * Configures funnel item labels.\r\n      \r\n       */\n\n    }, {\n      key: \"label\",\n      get: function get() {\n        return this._getOption('label');\n      },\n      set: function set(value) {\n        this._setOption('label', value);\n      }\n      /**\r\n       * Configures the legend.\r\n      \r\n       */\n\n    }, {\n      key: \"legend\",\n      get: function get() {\n        return this._getOption('legend');\n      },\n      set: function set(value) {\n        this._setOption('legend', value);\n      }\n      /**\r\n       * Configures the loading indicator.\r\n      \r\n       */\n\n    }, {\n      key: \"loadingIndicator\",\n      get: function get() {\n        return this._getOption('loadingIndicator');\n      },\n      set: function set(value) {\n        this._setOption('loadingIndicator', value);\n      }\n      /**\r\n       * Generates space around the UI component.\r\n      \r\n       */\n\n    }, {\n      key: \"margin\",\n      get: function get() {\n        return this._getOption('margin');\n      },\n      set: function set(value) {\n        this._setOption('margin', value);\n      }\n      /**\r\n       * Specifies the ratio between the height of the neck and that of the whole funnel. Accepts values from 0 to 1. Applies only if the algorithm is &apos;dynamicHeight&apos;.\r\n      \r\n       */\n\n    }, {\n      key: \"neckHeight\",\n      get: function get() {\n        return this._getOption('neckHeight');\n      },\n      set: function set(value) {\n        this._setOption('neckHeight', value);\n      }\n      /**\r\n       * Specifies the ratio between the width of the neck and that of the whole funnel. Accepts values from 0 to 1. Applies only if the algorithm is &apos;dynamicHeight&apos;.\r\n      \r\n       */\n\n    }, {\n      key: \"neckWidth\",\n      get: function get() {\n        return this._getOption('neckWidth');\n      },\n      set: function set(value) {\n        this._setOption('neckWidth', value);\n      }\n      /**\r\n       * Sets the palette to be used to colorize funnel items.\r\n      \r\n       */\n\n    }, {\n      key: \"palette\",\n      get: function get() {\n        return this._getOption('palette');\n      },\n      set: function set(value) {\n        this._setOption('palette', value);\n      }\n      /**\r\n       * Specifies what to do with colors in the palette when their number is less than the number of funnel items.\r\n      \r\n       */\n\n    }, {\n      key: \"paletteExtensionMode\",\n      get: function get() {\n        return this._getOption('paletteExtensionMode');\n      },\n      set: function set(value) {\n        this._setOption('paletteExtensionMode', value);\n      }\n      /**\r\n       * Notifies the UI component that it is embedded into an HTML page that uses a tag modifying the path.\r\n      \r\n       */\n\n    }, {\n      key: \"pathModified\",\n      get: function get() {\n        return this._getOption('pathModified');\n      },\n      set: function set(value) {\n        this._setOption('pathModified', value);\n      }\n      /**\r\n       * Specifies whether to redraw the UI component when the size of the parent browser window changes or a mobile device rotates.\r\n      \r\n       */\n\n    }, {\n      key: \"redrawOnResize\",\n      get: function get() {\n        return this._getOption('redrawOnResize');\n      },\n      set: function set(value) {\n        this._setOption('redrawOnResize', value);\n      }\n      /**\r\n       * Specifies how item labels should behave when they overlap.\r\n      \r\n       */\n\n    }, {\n      key: \"resolveLabelOverlapping\",\n      get: function get() {\n        return this._getOption('resolveLabelOverlapping');\n      },\n      set: function set(value) {\n        this._setOption('resolveLabelOverlapping', value);\n      }\n      /**\r\n       * Switches the UI component to a right-to-left representation.\r\n      \r\n       */\n\n    }, {\n      key: \"rtlEnabled\",\n      get: function get() {\n        return this._getOption('rtlEnabled');\n      },\n      set: function set(value) {\n        this._setOption('rtlEnabled', value);\n      }\n      /**\r\n       * Specifies whether a single or multiple funnel items can be in the selected state at a time. Assigning &apos;none&apos; disables the selection feature.\r\n      \r\n       */\n\n    }, {\n      key: \"selectionMode\",\n      get: function get() {\n        return this._getOption('selectionMode');\n      },\n      set: function set(value) {\n        this._setOption('selectionMode', value);\n      }\n      /**\r\n       * Specifies the UI component&apos;s size in pixels.\r\n      \r\n       */\n\n    }, {\n      key: \"size\",\n      get: function get() {\n        return this._getOption('size');\n      },\n      set: function set(value) {\n        this._setOption('size', value);\n      }\n      /**\r\n       * Specifies whether to sort funnel items.\r\n      \r\n       */\n\n    }, {\n      key: \"sortData\",\n      get: function get() {\n        return this._getOption('sortData');\n      },\n      set: function set(value) {\n        this._setOption('sortData', value);\n      }\n      /**\r\n       * Sets the name of the theme the UI component uses.\r\n      \r\n       */\n\n    }, {\n      key: \"theme\",\n      get: function get() {\n        return this._getOption('theme');\n      },\n      set: function set(value) {\n        this._setOption('theme', value);\n      }\n      /**\r\n       * Configures the UI component&apos;s title.\r\n      \r\n       */\n\n    }, {\n      key: \"title\",\n      get: function get() {\n        return this._getOption('title');\n      },\n      set: function set(value) {\n        this._setOption('title', value);\n      }\n      /**\r\n       * Configures tooltips - small pop-up rectangles that display information about a data-visualizing UI component element being pressed or hovered over with the mouse pointer.\r\n      \r\n       */\n\n    }, {\n      key: \"tooltip\",\n      get: function get() {\n        return this._getOption('tooltip');\n      },\n      set: function set(value) {\n        this._setOption('tooltip', value);\n      }\n      /**\r\n       * Specifies which data source field provides values for funnel items. The value defines a funnel item&apos;s area.\r\n      \r\n       */\n\n    }, {\n      key: \"valueField\",\n      get: function get() {\n        return this._getOption('valueField');\n      },\n      set: function set(value) {\n        this._setOption('valueField', value);\n      }\n    }, {\n      key: \"_createInstance\",\n      value: function _createInstance(element, options) {\n        return new DxFunnel(element, options);\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._destroyWidget();\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        _get(_getPrototypeOf(DxFunnelComponent.prototype), \"ngOnChanges\", this).call(this, changes);\n\n        this.setupChanges('dataSource', changes);\n        this.setupChanges('palette', changes);\n      }\n    }, {\n      key: \"setupChanges\",\n      value: function setupChanges(prop, changes) {\n        if (!(prop in this._optionsToUpdate)) {\n          this._idh.setup(prop, changes);\n        }\n      }\n    }, {\n      key: \"ngDoCheck\",\n      value: function ngDoCheck() {\n        this._idh.doCheck('dataSource');\n\n        this._idh.doCheck('palette');\n\n        this._watcherHelper.checkWatchers();\n\n        _get(_getPrototypeOf(DxFunnelComponent.prototype), \"ngDoCheck\", this).call(this);\n\n        _get(_getPrototypeOf(DxFunnelComponent.prototype), \"clearChangedOptions\", this).call(this);\n      }\n    }, {\n      key: \"_setOption\",\n      value: function _setOption(name, value) {\n        var isSetup = this._idh.setupSingle(name, value);\n\n        var isChanged = this._idh.getChanges(name, value) !== null;\n\n        if (isSetup || isChanged) {\n          _get(_getPrototypeOf(DxFunnelComponent.prototype), \"_setOption\", this).call(this, name, value);\n        }\n      }\n    }]);\n\n    return DxFunnelComponent;\n  }(DxComponent);\n\n  DxFunnelComponent.ɵfac = function DxFunnelComponent_Factory(t) {\n    return new (t || DxFunnelComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DxTemplateHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.WatcherHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IterableDifferHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TransferState), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n\n  DxFunnelComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: DxFunnelComponent,\n    selectors: [[\"dx-funnel\"]],\n    inputs: {\n      adaptiveLayout: \"adaptiveLayout\",\n      algorithm: \"algorithm\",\n      argumentField: \"argumentField\",\n      colorField: \"colorField\",\n      dataSource: \"dataSource\",\n      disabled: \"disabled\",\n      elementAttr: \"elementAttr\",\n      export: \"export\",\n      hoverEnabled: \"hoverEnabled\",\n      inverted: \"inverted\",\n      item: \"item\",\n      label: \"label\",\n      legend: \"legend\",\n      loadingIndicator: \"loadingIndicator\",\n      margin: \"margin\",\n      neckHeight: \"neckHeight\",\n      neckWidth: \"neckWidth\",\n      palette: \"palette\",\n      paletteExtensionMode: \"paletteExtensionMode\",\n      pathModified: \"pathModified\",\n      redrawOnResize: \"redrawOnResize\",\n      resolveLabelOverlapping: \"resolveLabelOverlapping\",\n      rtlEnabled: \"rtlEnabled\",\n      selectionMode: \"selectionMode\",\n      size: \"size\",\n      sortData: \"sortData\",\n      theme: \"theme\",\n      title: \"title\",\n      tooltip: \"tooltip\",\n      valueField: \"valueField\"\n    },\n    outputs: {\n      onDisposing: \"onDisposing\",\n      onDrawn: \"onDrawn\",\n      onExported: \"onExported\",\n      onExporting: \"onExporting\",\n      onFileSaving: \"onFileSaving\",\n      onHoverChanged: \"onHoverChanged\",\n      onIncidentOccurred: \"onIncidentOccurred\",\n      onInitialized: \"onInitialized\",\n      onItemClick: \"onItemClick\",\n      onLegendClick: \"onLegendClick\",\n      onOptionChanged: \"onOptionChanged\",\n      onSelectionChanged: \"onSelectionChanged\",\n      adaptiveLayoutChange: \"adaptiveLayoutChange\",\n      algorithmChange: \"algorithmChange\",\n      argumentFieldChange: \"argumentFieldChange\",\n      colorFieldChange: \"colorFieldChange\",\n      dataSourceChange: \"dataSourceChange\",\n      disabledChange: \"disabledChange\",\n      elementAttrChange: \"elementAttrChange\",\n      exportChange: \"exportChange\",\n      hoverEnabledChange: \"hoverEnabledChange\",\n      invertedChange: \"invertedChange\",\n      itemChange: \"itemChange\",\n      labelChange: \"labelChange\",\n      legendChange: \"legendChange\",\n      loadingIndicatorChange: \"loadingIndicatorChange\",\n      marginChange: \"marginChange\",\n      neckHeightChange: \"neckHeightChange\",\n      neckWidthChange: \"neckWidthChange\",\n      paletteChange: \"paletteChange\",\n      paletteExtensionModeChange: \"paletteExtensionModeChange\",\n      pathModifiedChange: \"pathModifiedChange\",\n      redrawOnResizeChange: \"redrawOnResizeChange\",\n      resolveLabelOverlappingChange: \"resolveLabelOverlappingChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      selectionModeChange: \"selectionModeChange\",\n      sizeChange: \"sizeChange\",\n      sortDataChange: \"sortDataChange\",\n      themeChange: \"themeChange\",\n      titleChange: \"titleChange\",\n      tooltipChange: \"tooltipChange\",\n      valueFieldChange: \"valueFieldChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function DxFunnelComponent_Template(rf, ctx) {},\n    styles: [\"[_nghost-%COMP%] {  display: block; }\"]\n  });\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxFunnelComponent.prototype, \"adaptiveLayout\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxFunnelComponent.prototype, \"algorithm\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxFunnelComponent.prototype, \"argumentField\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxFunnelComponent.prototype, \"colorField\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxFunnelComponent.prototype, \"dataSource\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxFunnelComponent.prototype, \"disabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxFunnelComponent.prototype, \"elementAttr\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxFunnelComponent.prototype, \"export\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxFunnelComponent.prototype, \"hoverEnabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxFunnelComponent.prototype, \"inverted\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxFunnelComponent.prototype, \"item\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxFunnelComponent.prototype, \"label\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxFunnelComponent.prototype, \"legend\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxFunnelComponent.prototype, \"loadingIndicator\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxFunnelComponent.prototype, \"margin\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], DxFunnelComponent.prototype, \"neckHeight\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], DxFunnelComponent.prototype, \"neckWidth\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxFunnelComponent.prototype, \"palette\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxFunnelComponent.prototype, \"paletteExtensionMode\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxFunnelComponent.prototype, \"pathModified\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxFunnelComponent.prototype, \"redrawOnResize\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxFunnelComponent.prototype, \"resolveLabelOverlapping\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxFunnelComponent.prototype, \"rtlEnabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxFunnelComponent.prototype, \"selectionMode\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxFunnelComponent.prototype, \"size\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxFunnelComponent.prototype, \"sortData\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxFunnelComponent.prototype, \"theme\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxFunnelComponent.prototype, \"title\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxFunnelComponent.prototype, \"tooltip\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxFunnelComponent.prototype, \"valueField\", null);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFunnelComponent.prototype, \"onDisposing\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFunnelComponent.prototype, \"onDrawn\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFunnelComponent.prototype, \"onExported\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFunnelComponent.prototype, \"onExporting\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFunnelComponent.prototype, \"onFileSaving\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFunnelComponent.prototype, \"onHoverChanged\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFunnelComponent.prototype, \"onIncidentOccurred\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFunnelComponent.prototype, \"onInitialized\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFunnelComponent.prototype, \"onItemClick\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFunnelComponent.prototype, \"onLegendClick\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFunnelComponent.prototype, \"onOptionChanged\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFunnelComponent.prototype, \"onSelectionChanged\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFunnelComponent.prototype, \"adaptiveLayoutChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFunnelComponent.prototype, \"algorithmChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFunnelComponent.prototype, \"argumentFieldChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFunnelComponent.prototype, \"colorFieldChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFunnelComponent.prototype, \"dataSourceChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFunnelComponent.prototype, \"disabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFunnelComponent.prototype, \"elementAttrChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFunnelComponent.prototype, \"exportChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFunnelComponent.prototype, \"hoverEnabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFunnelComponent.prototype, \"invertedChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFunnelComponent.prototype, \"itemChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFunnelComponent.prototype, \"labelChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFunnelComponent.prototype, \"legendChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFunnelComponent.prototype, \"loadingIndicatorChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFunnelComponent.prototype, \"marginChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFunnelComponent.prototype, \"neckHeightChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFunnelComponent.prototype, \"neckWidthChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFunnelComponent.prototype, \"paletteChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFunnelComponent.prototype, \"paletteExtensionModeChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFunnelComponent.prototype, \"pathModifiedChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFunnelComponent.prototype, \"redrawOnResizeChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFunnelComponent.prototype, \"resolveLabelOverlappingChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFunnelComponent.prototype, \"rtlEnabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFunnelComponent.prototype, \"selectionModeChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFunnelComponent.prototype, \"sizeChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFunnelComponent.prototype, \"sortDataChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFunnelComponent.prototype, \"themeChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFunnelComponent.prototype, \"titleChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFunnelComponent.prototype, \"tooltipChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxFunnelComponent.prototype, \"valueFieldChange\", void 0);\n\n  DxFunnelComponent = __decorate([__param(7, Inject(PLATFORM_ID)), __metadata(\"design:paramtypes\", [ElementRef, NgZone, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, TransferState, Object])], DxFunnelComponent);\n  return DxFunnelComponent;\n})();\nvar DxFunnelModule = /*#__PURE__*/(function () {\n  var DxFunnelModule = /*#__PURE__*/_createClass(function DxFunnelModule() {\n    _classCallCheck(this, DxFunnelModule);\n  });\n\n  DxFunnelModule.ɵfac = function DxFunnelModule_Factory(t) {\n    return new (t || DxFunnelModule)();\n  };\n\n  DxFunnelModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: DxFunnelModule\n  });\n  DxFunnelModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[DxoAdaptiveLayoutModule, DxoExportModule, DxoItemModule, DxoBorderModule, DxoHoverStyleModule, DxoHatchingModule, DxoSelectionStyleModule, DxoLabelModule, DxoConnectorModule, DxoFontModule, DxoFormatModule, DxoLegendModule, DxoMarginModule, DxoTitleModule, DxoSubtitleModule, DxoLoadingIndicatorModule, DxoSizeModule, DxoTooltipModule, DxoShadowModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxoAdaptiveLayoutModule, DxoExportModule, DxoItemModule, DxoBorderModule, DxoHoverStyleModule, DxoHatchingModule, DxoSelectionStyleModule, DxoLabelModule, DxoConnectorModule, DxoFontModule, DxoFormatModule, DxoLegendModule, DxoMarginModule, DxoTitleModule, DxoSubtitleModule, DxoLoadingIndicatorModule, DxoSizeModule, DxoTooltipModule, DxoShadowModule, DxTemplateModule]\n  });\n  return DxFunnelModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxFunnelModule, {\n    declarations: function declarations() {\n      return [DxFunnelComponent];\n    },\n    imports: function imports() {\n      return [DxoAdaptiveLayoutModule, DxoExportModule, DxoItemModule, DxoBorderModule, DxoHoverStyleModule, DxoHatchingModule, DxoSelectionStyleModule, DxoLabelModule, DxoConnectorModule, DxoFontModule, DxoFormatModule, DxoLegendModule, DxoMarginModule, DxoTitleModule, DxoSubtitleModule, DxoLoadingIndicatorModule, DxoSizeModule, DxoTooltipModule, DxoShadowModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule];\n    },\n    exports: function exports() {\n      return [DxFunnelComponent, DxoAdaptiveLayoutModule, DxoExportModule, DxoItemModule, DxoBorderModule, DxoHoverStyleModule, DxoHatchingModule, DxoSelectionStyleModule, DxoLabelModule, DxoConnectorModule, DxoFontModule, DxoFormatModule, DxoLegendModule, DxoMarginModule, DxoTitleModule, DxoSubtitleModule, DxoLoadingIndicatorModule, DxoSizeModule, DxoTooltipModule, DxoShadowModule, DxTemplateModule];\n    }\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DxFunnelComponent, DxFunnelModule }; //# sourceMappingURL=devextreme-angular-ui-funnel.js.map","map":null,"metadata":{},"sourceType":"module"}