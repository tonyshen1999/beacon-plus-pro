{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/color_box/color_box.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport Color from \"../../color\";\nimport ColorView from \"./color_view\";\nimport { extend } from \"../../core/utils/extend\";\nimport registerComponent from \"../../core/component_registrator\";\nimport DropDownEditor from \"../drop_down_editor/ui.drop_down_editor\";\nvar COLOR_BOX_CLASS = \"dx-colorbox\";\nvar COLOR_BOX_INPUT_CLASS = COLOR_BOX_CLASS + \"-input\";\nvar COLOR_BOX_INPUT_CONTAINER_CLASS = COLOR_BOX_INPUT_CLASS + \"-container\";\nvar COLOR_BOX_COLOR_RESULT_PREVIEW_CLASS = COLOR_BOX_CLASS + \"-color-result-preview\";\nvar COLOR_BOX_COLOR_IS_NOT_DEFINED = COLOR_BOX_CLASS + \"-color-is-not-defined\";\nvar COLOR_BOX_OVERLAY_CLASS = COLOR_BOX_CLASS + \"-overlay\";\nvar COLOR_BOX_CONTAINER_CELL_CLASS = \"dx-colorview-container-cell\";\nvar COLOR_BOX_BUTTON_CELL_CLASS = \"dx-colorview-button-cell\";\nvar COLOR_BOX_BUTTONS_CONTAINER_CLASS = \"dx-colorview-buttons-container\";\nvar COLOR_BOX_APPLY_BUTTON_CLASS = \"dx-colorview-apply-button\";\nvar COLOR_BOX_CANCEL_BUTTON_CLASS = \"dx-colorview-cancel-button\";\nvar colorEditorPrototype = ColorView.prototype;\nvar colorUtils = {\n  makeTransparentBackground: colorEditorPrototype._makeTransparentBackground.bind(colorEditorPrototype),\n  makeRgba: colorEditorPrototype._makeRgba.bind(colorEditorPrototype)\n};\nvar ColorBox = DropDownEditor.inherit({\n  _supportedKeys: function _supportedKeys() {\n    var arrowHandler = function arrowHandler(e) {\n      e.stopPropagation();\n\n      if (this.option(\"opened\")) {\n        e.preventDefault();\n        return true;\n      }\n    };\n\n    return extend(this.callBase(), {\n      tab: function tab(e) {\n        if (this.option(\"opened\")) {\n          e.preventDefault();\n\n          this._colorView._rgbInputs[0].focus();\n        }\n      },\n      enter: this._enterKeyHandler,\n      leftArrow: arrowHandler,\n      rightArrow: arrowHandler,\n      upArrow: function upArrow(e) {\n        if (!this.option(\"opened\")) {\n          e.preventDefault();\n          return false;\n        }\n\n        if (e.altKey) {\n          this.close();\n          return false;\n        }\n\n        return true;\n      },\n      downArrow: function downArrow(e) {\n        if (!this.option(\"opened\") && !e.altKey) {\n          e.preventDefault();\n          return false;\n        }\n\n        if (!this.option(\"opened\") && e.altKey) {\n          this._validatedOpening();\n\n          return false;\n        }\n\n        return true;\n      }\n    });\n  },\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      editAlphaChannel: false,\n      applyValueMode: \"useButtons\",\n      keyStep: 1,\n      fieldTemplate: null,\n      buttonsLocation: \"bottom after\"\n    });\n  },\n  _popupHidingHandler: function _popupHidingHandler() {\n    this.callBase();\n\n    if (\"useButtons\" === this.option(\"applyValueMode\")) {\n      this._updateColorViewValue(this.option(\"value\"));\n    }\n  },\n  _popupConfig: function _popupConfig() {\n    return extend(this.callBase(), {\n      width: \"\"\n    });\n  },\n  _contentReadyHandler: function _contentReadyHandler() {\n    this._createColorView();\n\n    this._addPopupBottomClasses();\n  },\n  _addPopupBottomClasses: function _addPopupBottomClasses() {\n    var $popupBottom = this._popup.bottomToolbar();\n\n    if ($popupBottom) {\n      $popupBottom.addClass(COLOR_BOX_CONTAINER_CELL_CLASS).addClass(COLOR_BOX_BUTTON_CELL_CLASS).find(\".dx-toolbar-items-container\").addClass(COLOR_BOX_BUTTONS_CONTAINER_CLASS);\n      $popupBottom.find(\".dx-popup-done\").addClass(COLOR_BOX_APPLY_BUTTON_CLASS);\n      $popupBottom.find(\".dx-popup-cancel\").addClass(COLOR_BOX_CANCEL_BUTTON_CLASS);\n    }\n  },\n  _createColorView: function _createColorView() {\n    this._popup.$overlayContent().addClass(COLOR_BOX_OVERLAY_CLASS);\n\n    var $colorView = $(\"<div>\").appendTo(this._popup.$content());\n    this._colorView = this._createComponent($colorView, ColorView, this._colorViewConfig());\n\n    this._colorView.registerKeyHandler(\"escape\", this._escapeHandler.bind(this));\n\n    eventsEngine.on($colorView, \"focus\", function () {\n      this.focus();\n    }.bind(this));\n  },\n  _escapeHandler: function _escapeHandler() {\n    this.close();\n    this.focus();\n  },\n  _applyNewColor: function _applyNewColor(value) {\n    this.option(\"value\", value);\n\n    if (value) {\n      colorUtils.makeTransparentBackground(this._$colorResultPreview, value);\n    }\n\n    if (this._colorViewEnterKeyPressed) {\n      this.close();\n      this._colorViewEnterKeyPressed = false;\n    }\n  },\n  _colorViewConfig: function _colorViewConfig() {\n    var that = this;\n    return {\n      value: that.option(\"value\"),\n      matchValue: that.option(\"value\"),\n      editAlphaChannel: that.option(\"editAlphaChannel\"),\n      applyValueMode: that.option(\"applyValueMode\"),\n      focusStateEnabled: that.option(\"focusStateEnabled\"),\n      stylingMode: this.option(\"stylingMode\"),\n      onEnterKeyPressed: function onEnterKeyPressed(_ref) {\n        var event = _ref.event;\n        that._colorViewEnterKeyPressed = true;\n\n        if (that._colorView.option(\"value\") !== that.option(\"value\")) {\n          that._saveValueChangeEvent(event);\n\n          that._applyNewColor(that._colorView.option(\"value\"));\n\n          that.close();\n        }\n      },\n      onValueChanged: function onValueChanged(_ref2) {\n        var event = _ref2.event,\n            value = _ref2.value,\n            previousValue = _ref2.previousValue;\n        var instantlyMode = \"instantly\" === that.option(\"applyValueMode\");\n        var isOldValue = colorUtils.makeRgba(value) === previousValue;\n        var changesApplied = instantlyMode || that._colorViewEnterKeyPressed;\n        var valueCleared = that._shouldSaveEmptyValue;\n\n        if (isOldValue || !changesApplied || valueCleared) {\n          return;\n        }\n\n        if (event) {\n          that._saveValueChangeEvent(event);\n        }\n\n        that._applyNewColor(value);\n      }\n    };\n  },\n  _enterKeyHandler: function _enterKeyHandler(e) {\n    var newValue = this._input().val();\n\n    var value = this.option(\"value\");\n    var oldValue = this.option(\"editAlphaChannel\") ? colorUtils.makeRgba(value) : value;\n\n    if (!newValue) {\n      return false;\n    }\n\n    var color = new Color(newValue);\n\n    if (color.colorIsInvalid) {\n      this._input().val(oldValue);\n\n      return;\n    }\n\n    if (newValue !== oldValue) {\n      this._applyColorFromInput(newValue);\n\n      this._saveValueChangeEvent(e);\n\n      this.option(\"value\", this.option(\"editAlphaChannel\") ? colorUtils.makeRgba(newValue) : newValue);\n    }\n\n    if (this._colorView) {\n      var colorViewValue = this._colorView.option(\"value\");\n\n      if (value !== colorViewValue) {\n        this._saveValueChangeEvent(e);\n\n        this.option(\"value\", colorViewValue);\n      }\n    }\n\n    this.close();\n    return false;\n  },\n  _applyButtonHandler: function _applyButtonHandler(e) {\n    this._saveValueChangeEvent(e.event);\n\n    this._applyNewColor(this._colorView.option(\"value\"));\n\n    this.callBase();\n  },\n  _cancelButtonHandler: function _cancelButtonHandler() {\n    this._resetInputValue();\n\n    this.callBase();\n  },\n  _getKeyboardListeners: function _getKeyboardListeners() {\n    return this.callBase().concat([this._colorView]);\n  },\n  _init: function _init() {\n    this.callBase();\n  },\n  _initMarkup: function _initMarkup() {\n    this.$element().addClass(COLOR_BOX_CLASS);\n    this.callBase();\n  },\n  _renderInput: function _renderInput() {\n    this.callBase();\n\n    this._input().addClass(COLOR_BOX_INPUT_CLASS);\n\n    this._renderColorPreview();\n  },\n  _renderColorPreview: function _renderColorPreview() {\n    this.$element().wrapInner($(\"<div>\").addClass(COLOR_BOX_INPUT_CONTAINER_CLASS));\n    this._$colorBoxInputContainer = this.$element().children().eq(0);\n    this._$colorResultPreview = $(\"<div>\").addClass(COLOR_BOX_COLOR_RESULT_PREVIEW_CLASS).appendTo(this._$textEditorInputContainer);\n\n    if (!this.option(\"value\")) {\n      this._$colorBoxInputContainer.addClass(COLOR_BOX_COLOR_IS_NOT_DEFINED);\n    } else {\n      colorUtils.makeTransparentBackground(this._$colorResultPreview, this.option(\"value\"));\n    }\n  },\n  _renderValue: function _renderValue() {\n    var value = this.option(\"value\");\n    var convertToColor = null !== value && this.option(\"editAlphaChannel\");\n    var text = convertToColor ? colorUtils.makeRgba(value) : value;\n    this.option(\"text\", text);\n    return this.callBase();\n  },\n  _resetInputValue: function _resetInputValue() {\n    var $input = this._input();\n\n    var value = this.option(\"value\");\n    $input.val(value);\n\n    this._updateColorViewValue(value);\n  },\n  _updateColorViewValue: function _updateColorViewValue(value) {\n    if (this._colorView) {\n      this._colorView.option({\n        value: value,\n        matchValue: value\n      });\n    }\n  },\n  _valueChangeEventHandler: function _valueChangeEventHandler(e) {\n    var value = this._input().val();\n\n    if (value) {\n      value = this._applyColorFromInput(value);\n\n      this._updateColorViewValue(value);\n    }\n\n    this.callBase(e, value);\n  },\n  _applyColorFromInput: function _applyColorFromInput(value) {\n    var newColor = new Color(value);\n\n    if (newColor.colorIsInvalid) {\n      this._resetInputValue();\n\n      value = this.option(\"value\");\n    }\n\n    return value;\n  },\n  _clean: function _clean() {\n    this.callBase();\n    delete this._shouldSaveEmptyValue;\n  },\n  _optionChanged: function _optionChanged(args) {\n    var value = args.value;\n    var name = args.name;\n\n    switch (name) {\n      case \"value\":\n        this._$colorBoxInputContainer.toggleClass(COLOR_BOX_COLOR_IS_NOT_DEFINED, !value);\n\n        if (value) {\n          colorUtils.makeTransparentBackground(this._$colorResultPreview, value);\n        } else {\n          this._$colorResultPreview.removeAttr(\"style\");\n        }\n\n        if (null === value) {\n          this._shouldSaveEmptyValue = true;\n        }\n\n        this._updateColorViewValue(value);\n\n        this._shouldSaveEmptyValue = false;\n        this.callBase(args);\n        break;\n\n      case \"applyButtonText\":\n      case \"cancelButtonText\":\n        this.callBase(args);\n        this._popup && this._addPopupBottomClasses();\n        break;\n\n      case \"editAlphaChannel\":\n      case \"keyStep\":\n        if (this._colorView) {\n          this._colorView.option(name, value);\n        }\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  }\n});\nregisterComponent(\"dxColorBox\", ColorBox);\nexport default ColorBox;","map":null,"metadata":{},"sourceType":"module"}