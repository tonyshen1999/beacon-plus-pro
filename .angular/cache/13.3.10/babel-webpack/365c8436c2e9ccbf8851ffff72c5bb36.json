{"ast":null,"code":"/**\r\n * DevExtreme (esm/events/click.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../core/renderer\";\nimport eventsEngine from \"../events/core/events_engine\";\nimport devices from \"../core/devices\";\nimport domAdapter from \"../core/dom_adapter\";\nimport { resetActiveElement, contains, closestCommonParent } from \"../core/utils/dom\";\nimport { requestAnimationFrame, cancelAnimationFrame } from \"../animation/frame\";\nimport { addNamespace, fireEvent, eventDelta, eventData } from \"./utils/index\";\nimport { subscribeNodesDisposing, unsubscribeNodesDisposing } from \"./utils/event_nodes_disposing\";\nimport pointerEvents from \"./pointer\";\nimport Emitter from \"./core/emitter\";\nimport registerEmitter from \"./core/emitter_registrator\";\nimport { compare as compareVersions } from \"../core/utils/version\";\nvar CLICK_EVENT_NAME = \"dxclick\";\nvar TOUCH_BOUNDARY = 10;\nvar abs = Math.abs;\n\nvar isInput = function isInput(element) {\n  return $(element).is(\"input, textarea, select, button ,:focus, :focus *\");\n};\n\nvar misc = {\n  requestAnimationFrame: requestAnimationFrame,\n  cancelAnimationFrame: cancelAnimationFrame\n};\nvar ClickEmitter = Emitter.inherit({\n  ctor: function ctor(element) {\n    this.callBase(element);\n\n    this._makeElementClickable($(element));\n  },\n  _makeElementClickable: function _makeElementClickable($element) {\n    if (!$element.attr(\"onclick\")) {\n      $element.attr(\"onclick\", \"void(0)\");\n    }\n  },\n  start: function start(e) {\n    this._blurPrevented = e.isDefaultPrevented();\n    this._startTarget = e.target;\n    this._startEventData = eventData(e);\n  },\n  end: function end(e) {\n    if (this._eventOutOfElement(e, this.getElement().get(0)) || e.type === pointerEvents.cancel) {\n      this._cancel(e);\n\n      return;\n    }\n\n    if (!isInput(e.target) && !this._blurPrevented) {\n      resetActiveElement();\n    }\n\n    this._accept(e);\n\n    this._clickAnimationFrame = misc.requestAnimationFrame(function () {\n      this._fireClickEvent(e);\n    }.bind(this));\n  },\n  _eventOutOfElement: function _eventOutOfElement(e, element) {\n    var target = e.target;\n    var targetChanged = !contains(element, target) && element !== target;\n    var gestureDelta = eventDelta(eventData(e), this._startEventData);\n    var boundsExceeded = abs(gestureDelta.x) > TOUCH_BOUNDARY || abs(gestureDelta.y) > TOUCH_BOUNDARY;\n    return targetChanged || boundsExceeded;\n  },\n  _fireClickEvent: function _fireClickEvent(e) {\n    this._fireEvent(CLICK_EVENT_NAME, e, {\n      target: closestCommonParent(this._startTarget, e.target)\n    });\n  },\n  dispose: function dispose() {\n    misc.cancelAnimationFrame(this._clickAnimationFrame);\n  }\n});\nvar realDevice = devices.real();\nvar useNativeClick = realDevice.generic || realDevice.ios && compareVersions(realDevice.version, [9, 3]) >= 0 || realDevice.android && compareVersions(realDevice.version, [5]) >= 0;\n!function () {\n  var isNativeClickEvent = function isNativeClickEvent(target) {\n    return useNativeClick || $(target).closest(\".dx-native-click\").length;\n  };\n\n  var prevented = null;\n  var lastFiredEvent = null;\n\n  function onNodeRemove() {\n    lastFiredEvent = null;\n  }\n\n  var clickHandler = function clickHandler(e) {\n    var originalEvent = e.originalEvent;\n    var eventAlreadyFired = lastFiredEvent === originalEvent || originalEvent && originalEvent.DXCLICK_FIRED;\n    var leftButton = !e.which || 1 === e.which;\n\n    if (leftButton && !prevented && isNativeClickEvent(e.target) && !eventAlreadyFired) {\n      if (originalEvent) {\n        originalEvent.DXCLICK_FIRED = true;\n      }\n\n      unsubscribeNodesDisposing(lastFiredEvent, onNodeRemove);\n      lastFiredEvent = originalEvent;\n      subscribeNodesDisposing(lastFiredEvent, onNodeRemove);\n      fireEvent({\n        type: CLICK_EVENT_NAME,\n        originalEvent: e\n      });\n    }\n  };\n\n  ClickEmitter = ClickEmitter.inherit({\n    _makeElementClickable: function _makeElementClickable($element) {\n      if (!isNativeClickEvent($element)) {\n        this.callBase($element);\n      }\n\n      eventsEngine.on($element, \"click\", clickHandler);\n    },\n    configure: function configure(data) {\n      this.callBase(data);\n\n      if (data.useNative) {\n        this.getElement().addClass(\"dx-native-click\");\n      }\n    },\n    start: function start(e) {\n      prevented = null;\n\n      if (!isNativeClickEvent(e.target)) {\n        this.callBase(e);\n      }\n    },\n    end: function end(e) {\n      if (!isNativeClickEvent(e.target)) {\n        this.callBase(e);\n      }\n    },\n    cancel: function cancel() {\n      prevented = true;\n    },\n    dispose: function dispose() {\n      this.callBase();\n      eventsEngine.off(this.getElement(), \"click\", clickHandler);\n    }\n  });\n}();\n!function () {\n  var desktopDevice = devices.real().generic;\n\n  if (!desktopDevice) {\n    var startTarget = null;\n    var blurPrevented = false;\n    var document = domAdapter.getDocument();\n    eventsEngine.subscribeGlobal(document, addNamespace(pointerEvents.down, \"NATIVE_CLICK_FIXER\"), function (e) {\n      startTarget = e.target;\n      blurPrevented = e.isDefaultPrevented();\n    });\n    eventsEngine.subscribeGlobal(document, addNamespace(\"click\", \"NATIVE_CLICK_FIXER\"), function (e) {\n      var $target = $(e.target);\n\n      if (!blurPrevented && startTarget && !$target.is(startTarget) && !$(startTarget).is(\"label\") && isInput($target)) {\n        resetActiveElement();\n      }\n\n      startTarget = null;\n      blurPrevented = false;\n    });\n  }\n}();\nregisterEmitter({\n  emitter: ClickEmitter,\n  bubble: true,\n  events: [CLICK_EVENT_NAME]\n});\nexport { CLICK_EVENT_NAME as name };","map":null,"metadata":{},"sourceType":"module"}