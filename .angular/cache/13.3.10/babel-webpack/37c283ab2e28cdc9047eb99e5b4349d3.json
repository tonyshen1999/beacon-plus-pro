{"ast":null,"code":"/**\r\n * DevExtreme (esm/localization/date.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport dependencyInjector from \"../core/utils/dependency_injector\";\nimport { isString } from \"../core/utils/type\";\nimport { each } from \"../core/utils/iterator\";\nimport { inArray } from \"../core/utils/array\";\nimport errors from \"../core/errors\";\nimport { getFormatter as getLDMLDateFormatter } from \"./ldml/date.formatter\";\nimport { getFormat as getLDMLDateFormat } from \"./ldml/date.format\";\nimport { getParser as getLDMLDateParser } from \"./ldml/date.parser\";\nimport defaultDateNames from \"./default_date_names\";\nimport firstDayOfWeekData from \"./cldr-data/first_day_of_week_data\";\nimport localizationCore from \"./core\";\nimport numberLocalization from \"./number\";\nimport intlDateLocalization from \"./intl/date\";\nvar DEFAULT_DAY_OF_WEEK_INDEX = 0;\nvar hasIntl = \"undefined\" !== typeof Intl;\nvar FORMATS_TO_PATTERN_MAP = {\n  shortdate: \"M/d/y\",\n  shorttime: \"h:mm a\",\n  longdate: \"EEEE, MMMM d, y\",\n  longtime: \"h:mm:ss a\",\n  monthandday: \"MMMM d\",\n  monthandyear: \"MMMM y\",\n  quarterandyear: \"QQQ y\",\n  day: \"d\",\n  year: \"y\",\n  shortdateshorttime: \"M/d/y, h:mm a\",\n  longdatelongtime: \"EEEE, MMMM d, y, h:mm:ss a\",\n  month: \"LLLL\",\n  shortyear: \"yy\",\n  dayofweek: \"EEEE\",\n  quarter: \"QQQ\",\n  hour: \"HH\",\n  minute: \"mm\",\n  second: \"ss\",\n  millisecond: \"SSS\",\n  \"datetime-local\": \"yyyy-MM-ddTHH':'mm':'ss\"\n};\nvar possiblePartPatterns = {\n  year: [\"y\", \"yy\", \"yyyy\"],\n  day: [\"d\", \"dd\"],\n  month: [\"M\", \"MM\", \"MMM\", \"MMMM\"],\n  hours: [\"H\", \"HH\", \"h\", \"hh\", \"ah\"],\n  minutes: [\"m\", \"mm\"],\n  seconds: [\"s\", \"ss\"],\n  milliseconds: [\"S\", \"SS\", \"SSS\"]\n};\nvar dateLocalization = dependencyInjector({\n  engine: function engine() {\n    return \"base\";\n  },\n  _getPatternByFormat: function _getPatternByFormat(format) {\n    return FORMATS_TO_PATTERN_MAP[format.toLowerCase()];\n  },\n  _expandPattern: function _expandPattern(pattern) {\n    return this._getPatternByFormat(pattern) || pattern;\n  },\n  formatUsesMonthName: function formatUsesMonthName(format) {\n    return -1 !== this._expandPattern(format).indexOf(\"MMMM\");\n  },\n  formatUsesDayName: function formatUsesDayName(format) {\n    return -1 !== this._expandPattern(format).indexOf(\"EEEE\");\n  },\n  getFormatParts: function getFormatParts(format) {\n    var pattern = this._getPatternByFormat(format) || format;\n    var result = [];\n    each(pattern.split(/\\W+/), function (_, formatPart) {\n      each(possiblePartPatterns, function (partName, possiblePatterns) {\n        if (inArray(formatPart, possiblePatterns) > -1) {\n          result.push(partName);\n        }\n      });\n    });\n    return result;\n  },\n  getMonthNames: function getMonthNames(format) {\n    return defaultDateNames.getMonthNames(format);\n  },\n  getDayNames: function getDayNames(format) {\n    return defaultDateNames.getDayNames(format);\n  },\n  getQuarterNames: function getQuarterNames(format) {\n    return defaultDateNames.getQuarterNames(format);\n  },\n  getPeriodNames: function getPeriodNames(format) {\n    return defaultDateNames.getPeriodNames(format);\n  },\n  getTimeSeparator: function getTimeSeparator() {\n    return \":\";\n  },\n  is24HourFormat: function is24HourFormat(format) {\n    var amTime = new Date(2017, 0, 20, 11, 0, 0, 0);\n    var pmTime = new Date(2017, 0, 20, 23, 0, 0, 0);\n    var amTimeFormatted = this.format(amTime, format);\n    var pmTimeFormatted = this.format(pmTime, format);\n\n    for (var i = 0; i < amTimeFormatted.length; i++) {\n      if (amTimeFormatted[i] !== pmTimeFormatted[i]) {\n        return !isNaN(parseInt(amTimeFormatted[i]));\n      }\n    }\n  },\n  format: function format(date, _format) {\n    if (!date) {\n      return;\n    }\n\n    if (!_format) {\n      return date;\n    }\n\n    var formatter;\n\n    if (\"function\" === typeof _format) {\n      formatter = _format;\n    } else if (_format.formatter) {\n      formatter = _format.formatter;\n    } else {\n      _format = _format.type || _format;\n\n      if (isString(_format)) {\n        _format = FORMATS_TO_PATTERN_MAP[_format.toLowerCase()] || _format;\n        return numberLocalization.convertDigits(getLDMLDateFormatter(_format, this)(date));\n      }\n    }\n\n    if (!formatter) {\n      return;\n    }\n\n    return formatter(date);\n  },\n  parse: function parse(text, format) {\n    var that = this;\n    var ldmlFormat;\n    var formatter;\n\n    if (!text) {\n      return;\n    }\n\n    if (!format) {\n      return this.parse(text, \"shortdate\");\n    }\n\n    if (format.parser) {\n      return format.parser(text);\n    }\n\n    if (\"string\" === typeof format && !FORMATS_TO_PATTERN_MAP[format.toLowerCase()]) {\n      ldmlFormat = format;\n    } else {\n      formatter = function formatter(value) {\n        var text = that.format(value, format);\n        return numberLocalization.convertDigits(text, true);\n      };\n\n      try {\n        ldmlFormat = getLDMLDateFormat(formatter);\n      } catch (e) {}\n    }\n\n    if (ldmlFormat) {\n      text = numberLocalization.convertDigits(text, true);\n      return getLDMLDateParser(ldmlFormat, this)(text);\n    }\n\n    errors.log(\"W0012\");\n    var result = new Date(text);\n\n    if (!result || isNaN(result.getTime())) {\n      return;\n    }\n\n    return result;\n  },\n  firstDayOfWeekIndex: function firstDayOfWeekIndex() {\n    var index = localizationCore.getValueByClosestLocale(function (locale) {\n      return firstDayOfWeekData[locale];\n    });\n    return void 0 === index ? DEFAULT_DAY_OF_WEEK_INDEX : index;\n  }\n});\n\nif (hasIntl) {\n  dateLocalization.inject(intlDateLocalization);\n}\n\nexport default dateLocalization;","map":null,"metadata":{},"sourceType":"module"}