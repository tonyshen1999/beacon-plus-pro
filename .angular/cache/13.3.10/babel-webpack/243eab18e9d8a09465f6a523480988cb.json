{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/tile_view.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getWidth, getHeight, setWidth, setHeight, getOuterWidth, getOuterHeight } from \"../core/utils/size\";\nimport $ from \"../core/renderer\";\nimport devices from \"../core/devices\";\nimport registerComponent from \"../core/component_registrator\";\nimport { map, each } from \"../core/utils/iterator\";\nimport { isDefined } from \"../core/utils/type\";\nimport { extend } from \"../core/utils/extend\";\nimport { hasWindow } from \"../core/utils/window\";\nimport { getPublicElement } from \"../core/element\";\nimport { deferRender } from \"../core/utils/common\";\nimport ScrollView from \"./scroll_view\";\nimport CollectionWidget from \"./collection/ui.collection_widget.edit\";\nvar TILEVIEW_CLASS = \"dx-tileview\";\nvar TILEVIEW_CONTAINER_CLASS = \"dx-tileview-wrapper\";\nvar TILEVIEW_ITEM_CLASS = \"dx-tile\";\nvar TILEVIEW_ITEM_SELECTOR = \".\" + TILEVIEW_ITEM_CLASS;\nvar TILEVIEW_ITEM_DATA_KEY = \"dxTileData\";\nvar CONFIGS = {\n  horizontal: {\n    itemMainRatio: \"widthRatio\",\n    itemCrossRatio: \"heightRatio\",\n    baseItemMainDimension: \"baseItemWidth\",\n    baseItemCrossDimension: \"baseItemHeight\",\n    mainDimension: \"width\",\n    crossDimension: \"height\",\n    mainPosition: \"left\",\n    crossPosition: \"top\"\n  },\n  vertical: {\n    itemMainRatio: \"heightRatio\",\n    itemCrossRatio: \"widthRatio\",\n    baseItemMainDimension: \"baseItemHeight\",\n    baseItemCrossDimension: \"baseItemWidth\",\n    mainDimension: \"height\",\n    crossDimension: \"width\",\n    mainPosition: \"top\",\n    crossPosition: \"left\"\n  }\n};\nvar TileView = CollectionWidget.inherit({\n  _activeStateUnit: TILEVIEW_ITEM_SELECTOR,\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      items: null,\n      direction: \"horizontal\",\n      hoverStateEnabled: true,\n      showScrollbar: \"never\",\n      height: 500,\n      baseItemWidth: 100,\n      baseItemHeight: 100,\n      itemMargin: 20,\n      activeStateEnabled: true,\n      indicateLoading: true\n    });\n  },\n  _defaultOptionsRules: function _defaultOptionsRules() {\n    return this.callBase().concat([{\n      device: function device() {\n        return \"desktop\" === devices.real().deviceType && !devices.isSimulator();\n      },\n      options: {\n        focusStateEnabled: true\n      }\n    }]);\n  },\n  _itemClass: function _itemClass() {\n    return TILEVIEW_ITEM_CLASS;\n  },\n  _itemDataKey: function _itemDataKey() {\n    return TILEVIEW_ITEM_DATA_KEY;\n  },\n  _itemContainer: function _itemContainer() {\n    return this._$container;\n  },\n  _init: function _init() {\n    this.callBase();\n    this.$element().addClass(TILEVIEW_CLASS);\n\n    this._initScrollView();\n  },\n  _dataSourceLoadingChangedHandler: function _dataSourceLoadingChangedHandler(isLoading) {\n    var scrollView = this._scrollView;\n\n    if (!scrollView || !scrollView.startLoading) {\n      return;\n    }\n\n    if (isLoading && this.option(\"indicateLoading\")) {\n      scrollView.startLoading();\n    } else {\n      scrollView.finishLoading();\n    }\n  },\n  _hideLoadingIfLoadIndicationOff: function _hideLoadingIfLoadIndicationOff() {\n    if (!this.option(\"indicateLoading\")) {\n      this._dataSourceLoadingChangedHandler(false);\n    }\n  },\n  _initScrollView: function _initScrollView() {\n    var _this$option = this.option(),\n        width = _this$option.width,\n        height = _this$option.height,\n        direction = _this$option.direction,\n        showScrollbar = _this$option.showScrollbar;\n\n    this._scrollView = this._createComponent(this.$element(), ScrollView, {\n      direction: direction,\n      width: width,\n      height: height,\n      scrollByContent: true,\n      useKeyboard: false,\n      showScrollbar: showScrollbar\n    });\n    this._$container = $(this._scrollView.content());\n\n    this._$container.addClass(TILEVIEW_CONTAINER_CLASS);\n\n    this._scrollView.option(\"onUpdated\", this._renderGeometry.bind(this));\n  },\n  _initMarkup: function _initMarkup() {\n    this.callBase();\n    deferRender(function () {\n      this._cellsPerDimension = 1;\n\n      this._renderGeometry();\n\n      this._updateScrollView();\n\n      this._fireContentReadyAction();\n    }.bind(this));\n  },\n  _updateScrollView: function _updateScrollView() {\n    this._scrollView.option(\"direction\", this.option(\"direction\"));\n\n    this._scrollView.update();\n\n    this._indicateLoadingIfAlreadyStarted();\n  },\n  _indicateLoadingIfAlreadyStarted: function _indicateLoadingIfAlreadyStarted() {\n    if (this._isDataSourceLoading()) {\n      this._dataSourceLoadingChangedHandler(true);\n    }\n  },\n  _renderGeometry: function _renderGeometry() {\n    this._config = CONFIGS[this.option(\"direction\")];\n    var items = this.option(\"items\") || [];\n    var config = this._config;\n    var itemMargin = this.option(\"itemMargin\");\n    var maxItemCrossRatio = Math.max.apply(Math, map(items || [], function (item) {\n      return Math.round(item[config.itemCrossRatio] || 1);\n    }));\n    var crossDimensionValue;\n\n    if (hasWindow) {\n      crossDimensionValue = (\"width\" === config.crossDimension ? getWidth : getHeight)(this.$element());\n    } else {\n      crossDimensionValue = parseInt(this.$element().get(0).style[config.crossDimension]);\n    }\n\n    this._cellsPerDimension = Math.floor(crossDimensionValue / (this.option(config.baseItemCrossDimension) + itemMargin));\n    this._cellsPerDimension = Math.max(this._cellsPerDimension, maxItemCrossRatio);\n    this._cells = [];\n\n    this._cells.push(new Array(this._cellsPerDimension));\n\n    this._arrangeItems(items);\n\n    this._renderContentSize(config, itemMargin);\n  },\n  _renderContentSize: function _renderContentSize(_ref, itemMargin) {\n    var mainDimension = _ref.mainDimension,\n        baseItemMainDimension = _ref.baseItemMainDimension;\n\n    if (hasWindow()) {\n      var actualContentSize = this._cells.length * this.option(baseItemMainDimension) + (this._cells.length + 1) * itemMargin;\n      var elementSize = (\"width\" === mainDimension ? getWidth : getHeight)(this.$element());\n      (\"width\" === mainDimension ? setWidth : setHeight)(this._$container, Math.max(actualContentSize, elementSize));\n    }\n  },\n  _arrangeItems: function _arrangeItems(items) {\n    var config = this._config;\n    var itemMainRatio = config.itemMainRatio;\n    var itemCrossRatio = config.itemCrossRatio;\n    var mainPosition = config.mainPosition;\n    this._itemsPositions = [];\n    each(items, function (index, item) {\n      var currentItem = {};\n      currentItem[itemMainRatio] = item[itemMainRatio] || 1;\n      currentItem[itemCrossRatio] = item[itemCrossRatio] || 1;\n      currentItem.index = index;\n      currentItem[itemMainRatio] = currentItem[itemMainRatio] <= 0 ? 0 : Math.round(currentItem[config.itemMainRatio]);\n      currentItem[itemCrossRatio] = currentItem[itemCrossRatio] <= 0 ? 0 : Math.round(currentItem[config.itemCrossRatio]);\n\n      var itemPosition = this._getItemPosition(currentItem);\n\n      if (-1 === itemPosition[mainPosition]) {\n        itemPosition[mainPosition] = this._cells.push(new Array(this._cellsPerDimension)) - 1;\n      }\n\n      this._occupyCells(currentItem, itemPosition);\n\n      this._arrangeItem(currentItem, itemPosition);\n\n      this._itemsPositions.push(itemPosition);\n    }.bind(this));\n  },\n  _getItemPosition: function _getItemPosition(item) {\n    var config = this._config;\n    var mainPosition = config.mainPosition;\n    var crossPosition = config.crossPosition;\n    var position = {};\n    position[mainPosition] = -1;\n    position[crossPosition] = 0;\n\n    for (var main = 0; main < this._cells.length; main++) {\n      for (var cross = 0; cross < this._cellsPerDimension; cross++) {\n        if (this._itemFit(main, cross, item)) {\n          position[mainPosition] = main;\n          position[crossPosition] = cross;\n          break;\n        }\n      }\n\n      if (position[mainPosition] > -1) {\n        break;\n      }\n    }\n\n    return position;\n  },\n  _itemFit: function _itemFit(mainPosition, crossPosition, item) {\n    var result = true;\n    var config = this._config;\n    var itemRatioMain = item[config.itemMainRatio];\n    var itemRatioCross = item[config.itemCrossRatio];\n\n    if (crossPosition + itemRatioCross > this._cellsPerDimension) {\n      return false;\n    }\n\n    for (var main = mainPosition; main < mainPosition + itemRatioMain; main++) {\n      for (var cross = crossPosition; cross < crossPosition + itemRatioCross; cross++) {\n        if (this._cells.length - 1 < main) {\n          this._cells.push(new Array(this._cellsPerDimension));\n        } else if (void 0 !== this._cells[main][cross]) {\n          result = false;\n          break;\n        }\n      }\n    }\n\n    return result;\n  },\n  _occupyCells: function _occupyCells(item, itemPosition) {\n    var config = this._config;\n    var itemPositionMain = itemPosition[config.mainPosition];\n    var itemPositionCross = itemPosition[config.crossPosition];\n    var itemRatioMain = item[config.itemMainRatio];\n    var itemRatioCross = item[config.itemCrossRatio];\n\n    for (var main = itemPositionMain; main < itemPositionMain + itemRatioMain; main++) {\n      for (var cross = itemPositionCross; cross < itemPositionCross + itemRatioCross; cross++) {\n        this._cells[main][cross] = item.index;\n      }\n    }\n  },\n  _arrangeItem: function _arrangeItem(item, itemPosition) {\n    var config = this._config;\n    var itemPositionMain = itemPosition[config.mainPosition];\n    var itemPositionCross = itemPosition[config.crossPosition];\n    var itemRatioMain = item[config.itemMainRatio];\n    var itemRatioCross = item[config.itemCrossRatio];\n    var baseItemCross = this.option(config.baseItemCrossDimension);\n    var baseItemMain = this.option(config.baseItemMainDimension);\n    var itemMargin = this.option(\"itemMargin\");\n    var cssProps = {\n      display: itemRatioMain <= 0 || itemRatioCross <= 0 ? \"none\" : \"\"\n    };\n    var mainDimension = itemRatioMain * baseItemMain + (itemRatioMain - 1) * itemMargin;\n    var crossDimension = itemRatioCross * baseItemCross + (itemRatioCross - 1) * itemMargin;\n    cssProps[config.mainDimension] = mainDimension < 0 ? 0 : mainDimension;\n    cssProps[config.crossDimension] = crossDimension < 0 ? 0 : crossDimension;\n    cssProps[config.mainPosition] = itemPositionMain * baseItemMain + (itemPositionMain + 1) * itemMargin;\n    cssProps[config.crossPosition] = itemPositionCross * baseItemCross + (itemPositionCross + 1) * itemMargin;\n\n    if (this.option(\"rtlEnabled\")) {\n      var offsetCorrection = getWidth(this._$container);\n      var baseItemWidth = this.option(\"baseItemWidth\");\n      var itemPositionX = itemPosition.left;\n      var offsetPosition = itemPositionX * baseItemWidth;\n      var itemBaseOffset = baseItemWidth + itemMargin;\n      var itemWidth = itemBaseOffset * item.widthRatio;\n      var subItemMargins = itemPositionX * itemMargin;\n      cssProps.left = offsetCorrection - (offsetPosition + itemWidth + subItemMargins);\n    }\n\n    this._itemElements().eq(item.index).css(cssProps);\n  },\n  _moveFocus: function _moveFocus(location) {\n    var FOCUS_UP = \"up\";\n    var FOCUS_DOWN = \"down\";\n    var FOCUS_LEFT = this.option(\"rtlEnabled\") ? \"right\" : \"left\";\n    var FOCUS_RIGHT = this.option(\"rtlEnabled\") ? \"left\" : \"right\";\n    var FOCUS_PAGE_UP = \"pageup\";\n    var FOCUS_PAGE_DOWN = \"pagedown\";\n    var horizontalDirection = \"horizontal\" === this.option(\"direction\");\n    var cells = this._cells;\n    var index = $(this.option(\"focusedElement\")).index();\n    var targetCol = this._itemsPositions[index].left;\n    var targetRow = this._itemsPositions[index].top;\n    var colCount = (horizontalDirection ? cells : cells[0]).length;\n    var rowCount = (horizontalDirection ? cells[0] : cells).length;\n\n    var getCell = function getCell(col, row) {\n      if (horizontalDirection) {\n        return cells[col][row];\n      }\n\n      return cells[row][col];\n    };\n\n    switch (location) {\n      case FOCUS_PAGE_UP:\n      case FOCUS_UP:\n        while (targetRow > 0 && index === getCell(targetCol, targetRow)) {\n          targetRow--;\n        }\n\n        if (targetRow < 0) {\n          targetRow = 0;\n        }\n\n        break;\n\n      case FOCUS_PAGE_DOWN:\n      case FOCUS_DOWN:\n        while (targetRow < rowCount && index === getCell(targetCol, targetRow)) {\n          targetRow++;\n        }\n\n        if (targetRow === rowCount) {\n          targetRow = rowCount - 1;\n        }\n\n        break;\n\n      case FOCUS_RIGHT:\n        while (targetCol < colCount && index === getCell(targetCol, targetRow)) {\n          targetCol++;\n        }\n\n        if (targetCol === colCount) {\n          targetCol = colCount - 1;\n        }\n\n        break;\n\n      case FOCUS_LEFT:\n        while (targetCol >= 0 && index === getCell(targetCol, targetRow)) {\n          targetCol--;\n        }\n\n        if (targetCol < 0) {\n          targetCol = 0;\n        }\n\n        break;\n\n      default:\n        this.callBase.apply(this, arguments);\n        return;\n    }\n\n    var newTargetIndex = getCell(targetCol, targetRow);\n\n    if (!isDefined(newTargetIndex)) {\n      return;\n    }\n\n    var $newTarget = this._itemElements().eq(newTargetIndex);\n\n    this.option(\"focusedElement\", getPublicElement($newTarget));\n\n    this._scrollToItem($newTarget);\n  },\n  _scrollToItem: function _scrollToItem($itemElement) {\n    if (!$itemElement.length) {\n      return;\n    }\n\n    var config = this._config;\n    var outerMainGetter = \"width\" === config.mainDimension ? getOuterWidth : getOuterHeight;\n    var itemMargin = this.option(\"itemMargin\");\n    var itemPosition = $itemElement.position()[config.mainPosition];\n    var itemDimension = outerMainGetter($itemElement);\n    var itemTail = itemPosition + itemDimension;\n    var scrollPosition = this.scrollPosition();\n    var clientWidth = outerMainGetter(this.$element());\n\n    if (scrollPosition <= itemPosition && itemTail <= scrollPosition + clientWidth) {\n      return;\n    }\n\n    if (scrollPosition > itemPosition) {\n      this._scrollView.scrollTo(itemPosition - itemMargin);\n    } else {\n      this._scrollView.scrollTo(itemPosition + itemDimension - clientWidth + itemMargin);\n    }\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"items\":\n        this.callBase(args);\n\n        this._renderGeometry();\n\n        this._updateScrollView();\n\n        break;\n\n      case \"showScrollbar\":\n        this._initScrollView();\n\n        break;\n\n      case \"disabled\":\n        this._scrollView.option(\"disabled\", args.value);\n\n        this.callBase(args);\n        break;\n\n      case \"baseItemWidth\":\n      case \"baseItemHeight\":\n      case \"itemMargin\":\n        this._renderGeometry();\n\n        break;\n\n      case \"width\":\n      case \"height\":\n        this.callBase(args);\n\n        this._renderGeometry();\n\n        this._scrollView.option(args.name, args.value);\n\n        this._updateScrollView();\n\n        break;\n\n      case \"direction\":\n        this._renderGeometry();\n\n        this._updateScrollView();\n\n        break;\n\n      case \"indicateLoading\":\n        this._hideLoadingIfLoadIndicationOff();\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  scrollPosition: function scrollPosition() {\n    return this._scrollView.scrollOffset()[this._config.mainPosition];\n  }\n});\nregisterComponent(\"dxTileView\", TileView);\nexport default TileView;","map":null,"metadata":{},"sourceType":"module"}