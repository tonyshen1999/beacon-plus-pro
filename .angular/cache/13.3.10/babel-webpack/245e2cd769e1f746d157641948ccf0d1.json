{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/**\r\n * DevExtreme (esm/ui/gantt/ui.gantt.mapping_helper.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { compileGetter, compileSetter } from \"../../core/utils/data\";\nvar GANTT_TASKS = \"tasks\";\nvar GANTT_MAPPED_FIELD_REGEX = /(\\w*)Expr/;\nexport var GanttMappingHelper = /*#__PURE__*/function () {\n  function GanttMappingHelper(gantt) {\n    _classCallCheck(this, GanttMappingHelper);\n\n    this._gantt = gantt;\n  }\n\n  _createClass(GanttMappingHelper, [{\n    key: \"_getMappedFieldName\",\n    value: function _getMappedFieldName(optionName, coreField) {\n      var coreFieldName = coreField;\n\n      if (\"id\" === coreField) {\n        coreFieldName = \"key\";\n      }\n\n      return this._gantt.option(\"\".concat(optionName, \".\").concat(coreFieldName, \"Expr\"));\n    }\n  }, {\n    key: \"getTaskMappedFieldNames\",\n    value: function getTaskMappedFieldNames() {\n      var mappedFields = [];\n\n      var mappedFieldsData = this._gantt.option(GANTT_TASKS);\n\n      for (var field in mappedFieldsData) {\n        var exprMatches = field.match(GANTT_MAPPED_FIELD_REGEX);\n        var mappedFieldName = exprMatches && mappedFieldsData[exprMatches[0]];\n\n        if (mappedFieldName) {\n          mappedFields.push(mappedFieldName);\n        }\n      }\n\n      return mappedFields;\n    }\n  }, {\n    key: \"convertCoreToMappedData\",\n    value: function convertCoreToMappedData(optionName, coreData) {\n      var _this = this;\n\n      return Object.keys(coreData).reduce(function (previous, f) {\n        var mappedField = _this._getMappedFieldName(optionName, f);\n\n        if (mappedField) {\n          var setter = compileSetter(mappedField);\n          setter(previous, coreData[f]);\n        }\n\n        return previous;\n      }, {});\n    }\n  }, {\n    key: \"convertMappedToCoreData\",\n    value: function convertMappedToCoreData(optionName, mappedData) {\n      var coreData = {};\n\n      if (mappedData) {\n        var mappedFields = this._gantt.option(optionName);\n\n        for (var field in mappedFields) {\n          var exprMatches = field.match(GANTT_MAPPED_FIELD_REGEX);\n          var mappedFieldName = exprMatches && mappedFields[exprMatches[0]];\n\n          if (mappedFieldName && void 0 !== mappedData[mappedFieldName]) {\n            var getter = compileGetter(mappedFieldName);\n            var coreFieldName = exprMatches[1];\n            coreData[coreFieldName] = getter(mappedData);\n          }\n        }\n      }\n\n      return coreData;\n    }\n  }, {\n    key: \"convertCoreToMappedFields\",\n    value: function convertCoreToMappedFields(optionName, fields) {\n      var _this2 = this;\n\n      return fields.reduce(function (previous, f) {\n        var mappedField = _this2._getMappedFieldName(optionName, f);\n\n        if (mappedField) {\n          previous.push(mappedField);\n        }\n\n        return previous;\n      }, []);\n    }\n  }, {\n    key: \"convertMappedToCoreFields\",\n    value: function convertMappedToCoreFields(optionName, fields) {\n      var coreFields = [];\n\n      var mappedFields = this._gantt.option(optionName);\n\n      for (var field in mappedFields) {\n        var exprMatches = field.match(GANTT_MAPPED_FIELD_REGEX);\n        var mappedFieldName = exprMatches && mappedFields[exprMatches[0]];\n\n        if (mappedFieldName && fields.indexOf(mappedFieldName) > -1) {\n          var coreFieldName = exprMatches[1];\n          coreFields.push(coreFieldName);\n        }\n      }\n\n      return coreFields;\n    }\n  }]);\n\n  return GanttMappingHelper;\n}();","map":null,"metadata":{},"sourceType":"module"}