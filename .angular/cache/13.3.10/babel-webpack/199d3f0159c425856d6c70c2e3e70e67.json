{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/**\r\n * DevExtreme (esm/core/template_manager.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"./renderer\";\nimport { isDefined, isFunction, isRenderer } from \"./utils/type\";\nimport { noop } from \"./utils/common\";\nimport { extend } from \"./utils/extend\";\nimport { FunctionTemplate } from \"./templates/function_template\";\nimport { EmptyTemplate } from \"./templates/empty_template\";\nimport { findTemplates, suitableTemplatesByName, templateKey, getNormalizedTemplateArgs, validateTemplateSource, defaultCreateElement, acquireTemplate } from \"./utils/template_manager\";\nvar TEXT_NODE = 3;\nvar ANONYMOUS_TEMPLATE_NAME = \"template\";\nvar TEMPLATE_OPTIONS_NAME = \"dxTemplate\";\nvar TEMPLATE_WRAPPER_CLASS = \"dx-template-wrapper\";\nvar DX_POLYMORPH_WIDGET_TEMPLATE = new FunctionTemplate(function (_ref) {\n  var model = _ref.model,\n      parent = _ref.parent;\n  var widgetName = model.widget;\n\n  if (!widgetName) {\n    return $();\n  }\n\n  var widgetElement = $(\"<div>\");\n  var widgetOptions = model.options || {};\n\n  if (parent) {\n    parent._createComponent(widgetElement, widgetName, widgetOptions);\n  } else {\n    widgetElement[widgetName](widgetOptions);\n  }\n\n  return widgetElement;\n});\nexport var TemplateManager = /*#__PURE__*/function () {\n  function TemplateManager(createElement, anonymousTemplateName) {\n    _classCallCheck(this, TemplateManager);\n\n    this._tempTemplates = [];\n    this._defaultTemplates = {};\n    this._anonymousTemplateName = anonymousTemplateName || ANONYMOUS_TEMPLATE_NAME;\n    this._createElement = createElement || defaultCreateElement;\n    this._createTemplateIfNeeded = this._createTemplateIfNeeded.bind(this);\n  }\n\n  _createClass(TemplateManager, [{\n    key: \"anonymousTemplateName\",\n    get: function get() {\n      return this._anonymousTemplateName;\n    }\n  }, {\n    key: \"addDefaultTemplates\",\n    value: function addDefaultTemplates(templates) {\n      this._defaultTemplates = extend({}, this._defaultTemplates, templates);\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this._tempTemplates.forEach(function (tempTemplate) {\n        tempTemplate.template.dispose && tempTemplate.template.dispose();\n      });\n\n      this._tempTemplates = [];\n    }\n  }, {\n    key: \"extractTemplates\",\n    value: function extractTemplates($el) {\n      var templates = this._extractTemplates($el);\n\n      var anonymousTemplateMeta = this._extractAnonymousTemplate($el);\n\n      return {\n        templates: templates,\n        anonymousTemplateMeta: anonymousTemplateMeta\n      };\n    }\n  }, {\n    key: \"_extractTemplates\",\n    value: function _extractTemplates($el) {\n      var _this = this;\n\n      var templates = findTemplates($el, TEMPLATE_OPTIONS_NAME);\n      var suitableTemplates = suitableTemplatesByName(templates);\n      templates.forEach(function (_ref2) {\n        var element = _ref2.element,\n            name = _ref2.options.name;\n\n        if (element === suitableTemplates[name]) {\n          $(element).addClass(TEMPLATE_WRAPPER_CLASS).detach();\n        } else {\n          $(element).remove();\n        }\n      });\n      return Object.keys(suitableTemplates).map(function (name) {\n        return {\n          name: name,\n          template: _this._createTemplate(suitableTemplates[name])\n        };\n      });\n    }\n  }, {\n    key: \"_extractAnonymousTemplate\",\n    value: function _extractAnonymousTemplate($el) {\n      var $anonymousTemplate = $el.contents().detach();\n      var $notJunkTemplateContent = $anonymousTemplate.filter(function (_, element) {\n        var isTextNode = element.nodeType === TEXT_NODE;\n        var isEmptyText = $(element).text().trim().length < 1;\n        return !(isTextNode && isEmptyText);\n      });\n      return $notJunkTemplateContent.length > 0 ? {\n        template: this._createTemplate($anonymousTemplate),\n        name: this._anonymousTemplateName\n      } : {};\n    }\n  }, {\n    key: \"_createTemplateIfNeeded\",\n    value: function _createTemplateIfNeeded(templateSource) {\n      var cachedTemplate = this._tempTemplates.filter(function (tempTemplate) {\n        return tempTemplate.source === templateKey(templateSource);\n      })[0];\n\n      if (cachedTemplate) {\n        return cachedTemplate.template;\n      }\n\n      var template = this._createTemplate(templateSource);\n\n      this._tempTemplates.push({\n        template: template,\n        source: templateKey(templateSource)\n      });\n\n      return template;\n    }\n  }, {\n    key: \"_createTemplate\",\n    value: function _createTemplate(templateSource) {\n      return this._createElement(validateTemplateSource(templateSource));\n    }\n  }, {\n    key: \"getTemplate\",\n    value: function getTemplate(templateSource, templates, _ref3, context) {\n      var _this2 = this;\n\n      var isAsyncTemplate = _ref3.isAsyncTemplate,\n          skipTemplates = _ref3.skipTemplates;\n\n      if (!isFunction(templateSource)) {\n        return acquireTemplate(templateSource, this._createTemplateIfNeeded, templates, isAsyncTemplate, skipTemplates, this._defaultTemplates);\n      }\n\n      return new FunctionTemplate(function (options) {\n        var templateSourceResult = templateSource.apply(context, getNormalizedTemplateArgs(options));\n\n        if (!isDefined(templateSourceResult)) {\n          return new EmptyTemplate();\n        }\n\n        var dispose = false;\n        var template = acquireTemplate(templateSourceResult, function (templateSource) {\n          if (templateSource.nodeType || isRenderer(templateSource) && !$(templateSource).is(\"script\")) {\n            return new FunctionTemplate(function () {\n              return templateSource;\n            });\n          }\n\n          dispose = true;\n          return _this2._createTemplate(templateSource);\n        }, templates, isAsyncTemplate, skipTemplates, _this2._defaultTemplates);\n        var result = template.render(options);\n        dispose && template.dispose && template.dispose();\n        return result;\n      });\n    }\n  }], [{\n    key: \"createDefaultOptions\",\n    value: function createDefaultOptions() {\n      return {\n        integrationOptions: {\n          watchMethod: function watchMethod(fn, callback) {\n            var options = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};\n\n            if (!options.skipImmediate) {\n              callback(fn());\n            }\n\n            return noop;\n          },\n          templates: {\n            \"dx-polymorph-widget\": DX_POLYMORPH_WIDGET_TEMPLATE\n          },\n          useDeferUpdateForTemplates: true\n        }\n      };\n    }\n  }]);\n\n  return TemplateManager;\n}();","map":null,"metadata":{},"sourceType":"module"}