{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/compactAppointmentsHelper.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport Button from \"../button\";\nimport { move, locate } from \"../../animation/translator\";\nimport messageLocalization from \"../../localization/message\";\nimport { FunctionTemplate } from \"../../core/templates/function_template\";\nimport { when } from \"../../core/utils/deferred\";\nimport { extendFromObject } from \"../../core/utils/extend\";\nimport { getBoundingRect } from \"../../core/utils/position\";\nimport { AppointmentTooltipInfo } from \"./dataStructures\";\nimport { LIST_ITEM_DATA_KEY, LIST_ITEM_CLASS } from \"./constants\";\nimport { createAppointmentAdapter } from \"./appointmentAdapter\";\nimport { getOverflowIndicatorColor } from \"../../renovation/ui/scheduler/appointment/overflow_indicator/utils\";\nvar APPOINTMENT_COLLECTOR_CLASS = \"dx-scheduler-appointment-collector\";\nvar COMPACT_APPOINTMENT_COLLECTOR_CLASS = APPOINTMENT_COLLECTOR_CLASS + \"-compact\";\nvar APPOINTMENT_COLLECTOR_CONTENT_CLASS = APPOINTMENT_COLLECTOR_CLASS + \"-content\";\nvar WEEK_VIEW_COLLECTOR_OFFSET = 5;\nvar COMPACT_THEME_WEEK_VIEW_COLLECTOR_OFFSET = 1;\nexport var CompactAppointmentsHelper = /*#__PURE__*/function () {\n  function CompactAppointmentsHelper(instance) {\n    _classCallCheck(this, CompactAppointmentsHelper);\n\n    this.instance = instance;\n    this.elements = [];\n  }\n\n  _createClass(CompactAppointmentsHelper, [{\n    key: \"render\",\n    value: function render(options) {\n      var isCompact = options.isCompact,\n          items = options.items,\n          buttonColor = options.buttonColor;\n\n      var template = this._createTemplate(items.data.length, isCompact);\n\n      var button = this._createCompactButton(template, options);\n\n      var $button = button.$element();\n\n      this._makeBackgroundColor($button, items.colors, buttonColor);\n\n      this._makeBackgroundDarker($button);\n\n      this.elements.push($button);\n      $button.data(\"items\", this._createTooltipInfos(items));\n      return $button;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.elements.forEach(function (button) {\n        button.detach();\n        button.remove();\n      });\n      this.elements = [];\n    }\n  }, {\n    key: \"_createTooltipInfos\",\n    value: function _createTooltipInfos(items) {\n      var _this = this;\n\n      return items.data.map(function (appointment, index) {\n        var _items$settings;\n\n        var targetedAdapter = createAppointmentAdapter(appointment, _this.instance._dataAccessors, _this.instance.timeZoneCalculator).clone();\n\n        if ((null === (_items$settings = items.settings) || void 0 === _items$settings ? void 0 : _items$settings.length) > 0) {\n          var info = items.settings[index].info;\n          targetedAdapter.startDate = info.sourceAppointment.startDate;\n          targetedAdapter.endDate = info.sourceAppointment.endDate;\n        }\n\n        return new AppointmentTooltipInfo(appointment, targetedAdapter.source(), items.colors[index], items.settings[index]);\n      });\n    }\n  }, {\n    key: \"_onButtonClick\",\n    value: function _onButtonClick(e, options) {\n      var $button = $(e.element);\n      this.instance.showAppointmentTooltipCore($button, $button.data(\"items\"), this._getExtraOptionsForTooltip(options, $button));\n    }\n  }, {\n    key: \"_getExtraOptionsForTooltip\",\n    value: function _getExtraOptionsForTooltip(options, $appointmentCollector) {\n      return {\n        clickEvent: this._clickEvent(options.onAppointmentClick).bind(this),\n        dragBehavior: options.allowDrag && this._createTooltipDragBehavior($appointmentCollector).bind(this),\n        dropDownAppointmentTemplate: this.instance.option().dropDownAppointmentTemplate,\n        isButtonClick: true\n      };\n    }\n  }, {\n    key: \"_clickEvent\",\n    value: function _clickEvent(onAppointmentClick) {\n      var _this2 = this;\n\n      return function (e) {\n        var config = {\n          itemData: e.itemData.appointment,\n          itemElement: e.itemElement,\n          targetedAppointment: e.itemData.targetedAppointment\n        };\n        var createClickEvent = extendFromObject(_this2.instance.fire(\"mapAppointmentFields\", config), e, false);\n        delete createClickEvent.itemData;\n        delete createClickEvent.itemIndex;\n        delete createClickEvent.itemElement;\n        onAppointmentClick(createClickEvent);\n      };\n    }\n  }, {\n    key: \"_createTooltipDragBehavior\",\n    value: function _createTooltipDragBehavior($appointmentCollector) {\n      var _this3 = this;\n\n      return function (e) {\n        var $element = $(e.element);\n\n        var workSpace = _this3.instance.getWorkSpace();\n\n        var initialPosition = locate($appointmentCollector);\n        var options = {\n          filter: \".\".concat(LIST_ITEM_CLASS),\n          isSetCursorOffset: true,\n          initialPosition: initialPosition,\n          getItemData: function getItemData(itemElement) {\n            var _$$data;\n\n            return null === (_$$data = $(itemElement).data(LIST_ITEM_DATA_KEY)) || void 0 === _$$data ? void 0 : _$$data.appointment;\n          },\n          getItemSettings: function getItemSettings(_, event) {\n            return event.itemSettings;\n          }\n        };\n\n        workSpace._createDragBehaviorBase($element, options);\n      };\n    }\n  }, {\n    key: \"_getCollectorOffset\",\n    value: function _getCollectorOffset(width, cellWidth) {\n      return cellWidth - width - this._getCollectorRightOffset();\n    }\n  }, {\n    key: \"_getCollectorRightOffset\",\n    value: function _getCollectorRightOffset() {\n      return this.instance.getRenderingStrategyInstance()._isCompactTheme() ? COMPACT_THEME_WEEK_VIEW_COLLECTOR_OFFSET : WEEK_VIEW_COLLECTOR_OFFSET;\n    }\n  }, {\n    key: \"_makeBackgroundDarker\",\n    value: function _makeBackgroundDarker(button) {\n      button.css(\"boxShadow\", \"inset \".concat(getBoundingRect(button.get(0)).width, \"px 0 0 0 rgba(0, 0, 0, 0.3)\"));\n    }\n  }, {\n    key: \"_makeBackgroundColor\",\n    value: function _makeBackgroundColor($button, colors, color) {\n      when.apply(null, colors).done(function () {\n        this._makeBackgroundColorCore($button, color, Array.prototype.slice.call(arguments));\n      }.bind(this));\n    }\n  }, {\n    key: \"_makeBackgroundColorCore\",\n    value: function _makeBackgroundColorCore($button, color, itemColors) {\n      color && color.done(function (color) {\n        var backgroundColor = getOverflowIndicatorColor(color, itemColors);\n\n        if (backgroundColor) {\n          $button.css(\"backgroundColor\", backgroundColor);\n        }\n      });\n    }\n  }, {\n    key: \"_setPosition\",\n    value: function _setPosition(element, position) {\n      move(element, {\n        top: position.top,\n        left: position.left\n      });\n    }\n  }, {\n    key: \"_createCompactButton\",\n    value: function _createCompactButton(template, options) {\n      var _this4 = this;\n\n      var $button = this._createCompactButtonElement(options);\n\n      return this.instance._createComponent($button, Button, {\n        type: \"default\",\n        width: options.width,\n        height: options.height,\n        onClick: function onClick(e) {\n          return _this4._onButtonClick(e, options);\n        },\n        template: this._renderTemplate(template, options.items, options.isCompact)\n      });\n    }\n  }, {\n    key: \"_createCompactButtonElement\",\n    value: function _createCompactButtonElement(_ref) {\n      var isCompact = _ref.isCompact,\n          $container = _ref.$container,\n          coordinates = _ref.coordinates;\n      var result = $(\"<div>\").addClass(APPOINTMENT_COLLECTOR_CLASS).toggleClass(COMPACT_APPOINTMENT_COLLECTOR_CLASS, isCompact).appendTo($container);\n\n      this._setPosition(result, coordinates);\n\n      return result;\n    }\n  }, {\n    key: \"_renderTemplate\",\n    value: function _renderTemplate(template, items, isCompact) {\n      return new FunctionTemplate(function (options) {\n        return template.render({\n          model: {\n            appointmentCount: items.data.length,\n            isCompact: isCompact\n          },\n          container: options.container\n        });\n      });\n    }\n  }, {\n    key: \"_createTemplate\",\n    value: function _createTemplate(count, isCompact) {\n      this._initButtonTemplate(count, isCompact);\n\n      return this.instance._getAppointmentTemplate(\"appointmentCollectorTemplate\");\n    }\n  }, {\n    key: \"_initButtonTemplate\",\n    value: function _initButtonTemplate(count, isCompact) {\n      var _this5 = this;\n\n      this.instance._templateManager.addDefaultTemplates({\n        appointmentCollector: new FunctionTemplate(function (options) {\n          return _this5._createButtonTemplate(count, $(options.container), isCompact);\n        })\n      });\n    }\n  }, {\n    key: \"_createButtonTemplate\",\n    value: function _createButtonTemplate(appointmentCount, element, isCompact) {\n      var text = isCompact ? appointmentCount : messageLocalization.getFormatter(\"dxScheduler-moreAppointments\")(appointmentCount);\n      return element.append($(\"<span>\").text(text)).addClass(APPOINTMENT_COLLECTOR_CONTENT_CLASS);\n    }\n  }]);\n\n  return CompactAppointmentsHelper;\n}();","map":null,"metadata":{},"sourceType":"module"}