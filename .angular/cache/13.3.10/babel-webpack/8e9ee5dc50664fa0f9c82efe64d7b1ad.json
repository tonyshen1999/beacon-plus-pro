{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.adaptivity.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getWidth } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport { isFunction } from \"../../core/utils/type\";\nimport { getWindow, hasWindow } from \"../../core/utils/window\";\nimport Widget from \"../widget/ui.widget\";\nimport Drawer from \"../drawer/ui.drawer\";\nimport SplitterControl from \"../splitter\";\nvar window = getWindow();\nvar ADAPTIVE_STATE_SCREEN_WIDTH = 573;\nvar FILE_MANAGER_ADAPTIVITY_DRAWER_PANEL_CLASS = \"dx-filemanager-adaptivity-drawer-panel\";\nvar DRAWER_PANEL_CONTENT_INITIAL = \"dx-drawer-panel-content-initial\";\nvar DRAWER_PANEL_CONTENT_ADAPTIVE = \"dx-drawer-panel-content-adaptive\";\n\nvar FileManagerAdaptivityControl = /*#__PURE__*/function (_Widget) {\n  _inherits(FileManagerAdaptivityControl, _Widget);\n\n  var _super = _createSuper(FileManagerAdaptivityControl);\n\n  function FileManagerAdaptivityControl() {\n    _classCallCheck(this, FileManagerAdaptivityControl);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FileManagerAdaptivityControl, [{\n    key: \"_initMarkup\",\n    value: function _initMarkup() {\n      _get(_getPrototypeOf(FileManagerAdaptivityControl.prototype), \"_initMarkup\", this).call(this);\n\n      this._initActions();\n\n      this._isInAdaptiveState = false;\n      var $drawer = $(\"<div>\").appendTo(this.$element());\n      $(\"<div>\").addClass(FILE_MANAGER_ADAPTIVITY_DRAWER_PANEL_CLASS).appendTo($drawer);\n      this._drawer = this._createComponent($drawer, Drawer);\n\n      this._drawer.option({\n        opened: true,\n        template: this._createDrawerTemplate.bind(this)\n      });\n\n      $(this._drawer.content()).addClass(DRAWER_PANEL_CONTENT_INITIAL);\n      var $drawerContent = $drawer.find(\".\".concat(FILE_MANAGER_ADAPTIVITY_DRAWER_PANEL_CLASS)).first();\n      var contentRenderer = this.option(\"contentTemplate\");\n\n      if (isFunction(contentRenderer)) {\n        contentRenderer($drawerContent);\n      }\n\n      this._updateDrawerMaxSize();\n    }\n  }, {\n    key: \"_createDrawerTemplate\",\n    value: function _createDrawerTemplate(container) {\n      this.option(\"drawerTemplate\")(container);\n      this._splitter = this._createComponent(\"<div>\", SplitterControl, {\n        container: this.$element(),\n        leftElement: $(this._drawer.content()),\n        rightElement: $(this._drawer.viewContent()),\n        onApplyPanelSize: this._onApplyPanelSize.bind(this),\n        onActiveStateChanged: this._onActiveStateChanged.bind(this)\n      });\n\n      this._splitter.$element().appendTo(container);\n\n      this._splitter.disableSplitterCalculation(true);\n    }\n  }, {\n    key: \"_render\",\n    value: function _render() {\n      _get(_getPrototypeOf(FileManagerAdaptivityControl.prototype), \"_render\", this).call(this);\n\n      this._checkAdaptiveState();\n    }\n  }, {\n    key: \"_onApplyPanelSize\",\n    value: function _onApplyPanelSize(e) {\n      if (!hasWindow()) {\n        return;\n      }\n\n      if (!this._splitter.isSplitterMoved()) {\n        this._setDrawerWidth(\"\");\n\n        return;\n      }\n\n      $(this._drawer.content()).removeClass(DRAWER_PANEL_CONTENT_INITIAL);\n\n      this._setDrawerWidth(e.leftPanelWidth);\n    }\n  }, {\n    key: \"_onActiveStateChanged\",\n    value: function _onActiveStateChanged(_ref) {\n      var isActive = _ref.isActive;\n\n      this._splitter.disableSplitterCalculation(!isActive);\n\n      !isActive && this._splitter.$element().css(\"left\", \"auto\");\n    }\n  }, {\n    key: \"_setDrawerWidth\",\n    value: function _setDrawerWidth(width) {\n      $(this._drawer.content()).css(\"width\", width);\n\n      this._updateDrawerMaxSize();\n\n      this._drawer.resizeViewContent();\n    }\n  }, {\n    key: \"_updateDrawerMaxSize\",\n    value: function _updateDrawerMaxSize() {\n      this._drawer.option(\"maxSize\", this._drawer.getRealPanelWidth());\n    }\n  }, {\n    key: \"_dimensionChanged\",\n    value: function _dimensionChanged(dimension) {\n      if (!dimension || \"height\" !== dimension) {\n        this._checkAdaptiveState();\n      }\n    }\n  }, {\n    key: \"_checkAdaptiveState\",\n    value: function _checkAdaptiveState() {\n      var oldState = this._isInAdaptiveState;\n      this._isInAdaptiveState = this._isSmallScreen();\n\n      if (oldState !== this._isInAdaptiveState) {\n        this.toggleDrawer(!this._isInAdaptiveState, true);\n        $(this._drawer.content()).toggleClass(DRAWER_PANEL_CONTENT_ADAPTIVE, this._isInAdaptiveState);\n\n        this._raiseAdaptiveStateChanged(this._isInAdaptiveState);\n      }\n\n      if (this._isInAdaptiveState && this._isDrawerOpened()) {\n        this._updateDrawerMaxSize();\n      }\n    }\n  }, {\n    key: \"_isSmallScreen\",\n    value: function _isSmallScreen() {\n      return getWidth(window) <= ADAPTIVE_STATE_SCREEN_WIDTH;\n    }\n  }, {\n    key: \"_isDrawerOpened\",\n    value: function _isDrawerOpened() {\n      return this._drawer.option(\"opened\");\n    }\n  }, {\n    key: \"_initActions\",\n    value: function _initActions() {\n      this._actions = {\n        onAdaptiveStateChanged: this._createActionByOption(\"onAdaptiveStateChanged\")\n      };\n    }\n  }, {\n    key: \"_raiseAdaptiveStateChanged\",\n    value: function _raiseAdaptiveStateChanged(enabled) {\n      this._actions.onAdaptiveStateChanged({\n        enabled: enabled\n      });\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function _getDefaultOptions() {\n      return extend(_get(_getPrototypeOf(FileManagerAdaptivityControl.prototype), \"_getDefaultOptions\", this).call(this), {\n        drawerTemplate: null,\n        contentTemplate: null,\n        onAdaptiveStateChanged: null\n      });\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function _optionChanged(args) {\n      var name = args.name;\n\n      switch (name) {\n        case \"drawerTemplate\":\n        case \"contentTemplate\":\n          this.repaint();\n          break;\n\n        case \"onAdaptiveStateChanged\":\n          this._actions[name] = this._createActionByOption(name);\n          break;\n\n        default:\n          _get(_getPrototypeOf(FileManagerAdaptivityControl.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }, {\n    key: \"isInAdaptiveState\",\n    value: function isInAdaptiveState() {\n      return this._isInAdaptiveState;\n    }\n  }, {\n    key: \"toggleDrawer\",\n    value: function toggleDrawer(showing, skipAnimation) {\n      this._updateDrawerMaxSize();\n\n      this._drawer.option(\"animationEnabled\", !skipAnimation);\n\n      this._drawer.toggle(showing);\n\n      var isSplitterActive = this._isDrawerOpened() && !this.isInAdaptiveState();\n\n      this._splitter.toggleDisabled(!isSplitterActive);\n    }\n  }, {\n    key: \"getSplitterElement\",\n    value: function getSplitterElement() {\n      return this._splitter.getSplitterBorderElement().get(0);\n    }\n  }]);\n\n  return FileManagerAdaptivityControl;\n}(Widget);\n\nexport default FileManagerAdaptivityControl;","map":null,"metadata":{},"sourceType":"module"}