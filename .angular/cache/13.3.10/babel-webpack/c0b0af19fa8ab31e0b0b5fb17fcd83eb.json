{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/appointments/dataProvider/appointmentDataProvider.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { AppointmentDataSource } from \"./appointmentDataSource\";\nimport { AppointmentFilterBaseStrategy, AppointmentFilterVirtualStrategy } from \"./appointmentFilter\";\nvar FilterStrategies = {\n  virtual: \"virtual\",\n  standard: \"standard\"\n};\nexport var AppointmentDataProvider = /*#__PURE__*/function () {\n  function AppointmentDataProvider(options) {\n    _classCallCheck(this, AppointmentDataProvider);\n\n    this.options = options;\n    this.dataSource = this.options.dataSource;\n    this.dataAccessors = this.options.dataAccessors;\n    this.timeZoneCalculator = this.options.timeZoneCalculator;\n    this.appointmentDataSource = new AppointmentDataSource(this.dataSource);\n    this.initFilterStrategy();\n  }\n\n  _createClass(AppointmentDataProvider, [{\n    key: \"filterMaker\",\n    get: function get() {\n      return this.getFilterStrategy().filterMaker;\n    }\n  }, {\n    key: \"keyName\",\n    get: function get() {\n      return this.appointmentDataSource.keyName;\n    }\n  }, {\n    key: \"filterStrategyName\",\n    get: function get() {\n      return this.options.getIsVirtualScrolling() ? FilterStrategies.virtual : FilterStrategies.standard;\n    }\n  }, {\n    key: \"getFilterStrategy\",\n    value: function getFilterStrategy() {\n      if (!this.filterStrategy || this.filterStrategy.strategyName !== this.filterStrategyName) {\n        this.initFilterStrategy();\n      }\n\n      return this.filterStrategy;\n    }\n  }, {\n    key: \"initFilterStrategy\",\n    value: function initFilterStrategy() {\n      var filterOptions = {\n        resources: this.options.resources,\n        dataSource: this.dataSource,\n        dataAccessors: this.dataAccessors,\n        startDayHour: this.options.startDayHour,\n        endDayHour: this.options.endDayHour,\n        showAllDayPanel: this.options.showAllDayPanel,\n        timeZoneCalculator: this.options.timeZoneCalculator,\n        loadedResources: this.options.getLoadedResources,\n        supportAllDayRow: this.options.getSupportAllDayRow,\n        viewType: this.options.getViewType,\n        viewDirection: this.options.getViewDirection,\n        dateRange: this.options.getDateRange,\n        groupCount: this.options.getGroupCount,\n        viewDataProvider: this.options.getViewDataProvider\n      };\n      this.filterStrategy = this.filterStrategyName === FilterStrategies.virtual ? new AppointmentFilterVirtualStrategy(filterOptions) : new AppointmentFilterBaseStrategy(filterOptions);\n    }\n  }, {\n    key: \"setDataSource\",\n    value: function setDataSource(dataSource) {\n      this.dataSource = dataSource;\n      this.initFilterStrategy();\n      this.appointmentDataSource.setDataSource(this.dataSource);\n    }\n  }, {\n    key: \"updateDataAccessors\",\n    value: function updateDataAccessors(dataAccessors) {\n      this.dataAccessors = dataAccessors;\n      this.initFilterStrategy();\n    }\n  }, {\n    key: \"filter\",\n    value: function filter(preparedItems) {\n      return this.getFilterStrategy().filter(preparedItems);\n    }\n  }, {\n    key: \"filterByDate\",\n    value: function filterByDate(min, max, remoteFiltering, dateSerializationFormat) {\n      this.getFilterStrategy().filterByDate(min, max, remoteFiltering, dateSerializationFormat);\n    }\n  }, {\n    key: \"hasAllDayAppointments\",\n    value: function hasAllDayAppointments(filteredItems, preparedItems) {\n      return this.getFilterStrategy().hasAllDayAppointments(filteredItems, preparedItems);\n    }\n  }, {\n    key: \"filterLoadedAppointments\",\n    value: function filterLoadedAppointments(filterOption, preparedItems) {\n      return this.getFilterStrategy().filterLoadedAppointments(filterOption, preparedItems);\n    }\n  }, {\n    key: \"calculateAppointmentEndDate\",\n    value: function calculateAppointmentEndDate(isAllDay, startDate) {\n      return this.getFilterStrategy().calculateAppointmentEndDate(isAllDay, startDate);\n    }\n  }, {\n    key: \"cleanState\",\n    value: function cleanState() {\n      this.appointmentDataSource.cleanState();\n    }\n  }, {\n    key: \"getUpdatedAppointment\",\n    value: function getUpdatedAppointment() {\n      return this.appointmentDataSource._updatedAppointment;\n    }\n  }, {\n    key: \"getUpdatedAppointmentKeys\",\n    value: function getUpdatedAppointmentKeys() {\n      return this.appointmentDataSource._updatedAppointmentKeys;\n    }\n  }, {\n    key: \"add\",\n    value: function add(rawAppointment) {\n      return this.appointmentDataSource.add(rawAppointment);\n    }\n  }, {\n    key: \"update\",\n    value: function update(target, rawAppointment) {\n      return this.appointmentDataSource.update(target, rawAppointment);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(rawAppointment) {\n      return this.appointmentDataSource.remove(rawAppointment);\n    }\n  }]);\n\n  return AppointmentDataProvider;\n}();","map":null,"metadata":{},"sourceType":"module"}