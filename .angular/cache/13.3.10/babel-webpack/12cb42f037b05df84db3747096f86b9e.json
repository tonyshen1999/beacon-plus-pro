{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __decorate, __metadata, __param } from 'tslib';\nimport { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, ContentChildren, QueryList, Component, NgModule } from '@angular/core';\nimport DxDiagram from 'devextreme/ui/diagram';\nimport { DxComponent, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxiCustomShapeComponent, DxoContextMenuModule, DxiCommandModule, DxiItemModule, DxoContextToolboxModule, DxiCustomShapeModule, DxiConnectionPointModule, DxoDefaultItemPropertiesModule, DxoEdgesModule, DxoEditingModule, DxoExportModule, DxoGridSizeModule, DxoHistoryToolbarModule, DxoMainToolbarModule, DxoNodesModule, DxoAutoLayoutModule, DxoPageSizeModule, DxoPropertiesPanelModule, DxiTabModule, DxiGroupModule, DxoToolboxModule, DxoViewToolbarModule, DxoZoomLevelModule } from 'devextreme-angular/ui/nested';\n/*!\r\n * devextreme-angular\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\n/**\r\n * The Diagram UI component provides a visual interface to help you design new and modify existing diagrams.\r\n\r\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'devextreme-angular/core';\nimport * as ɵngcc2 from '@angular/platform-browser';\nvar DxDiagramComponent = /*#__PURE__*/(function () {\n  var DxDiagramComponent = /*#__PURE__*/function (_DxComponent) {\n    _inherits(DxDiagramComponent, _DxComponent);\n\n    var _super = _createSuper(DxDiagramComponent);\n\n    function DxDiagramComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\n      var _this;\n\n      _classCallCheck(this, DxDiagramComponent);\n\n      _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n      _this._watcherHelper = _watcherHelper;\n      _this._idh = _idh;\n\n      _this._createEventEmitters([{\n        subscribe: 'contentReady',\n        emit: 'onContentReady'\n      }, {\n        subscribe: 'customCommand',\n        emit: 'onCustomCommand'\n      }, {\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'itemClick',\n        emit: 'onItemClick'\n      }, {\n        subscribe: 'itemDblClick',\n        emit: 'onItemDblClick'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        subscribe: 'requestEditOperation',\n        emit: 'onRequestEditOperation'\n      }, {\n        subscribe: 'requestLayoutUpdate',\n        emit: 'onRequestLayoutUpdate'\n      }, {\n        subscribe: 'selectionChanged',\n        emit: 'onSelectionChanged'\n      }, {\n        emit: 'autoZoomModeChange'\n      }, {\n        emit: 'contextMenuChange'\n      }, {\n        emit: 'contextToolboxChange'\n      }, {\n        emit: 'customShapesChange'\n      }, {\n        emit: 'customShapeTemplateChange'\n      }, {\n        emit: 'customShapeToolboxTemplateChange'\n      }, {\n        emit: 'defaultItemPropertiesChange'\n      }, {\n        emit: 'disabledChange'\n      }, {\n        emit: 'edgesChange'\n      }, {\n        emit: 'editingChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'exportChange'\n      }, {\n        emit: 'fullScreenChange'\n      }, {\n        emit: 'gridSizeChange'\n      }, {\n        emit: 'hasChangesChange'\n      }, {\n        emit: 'heightChange'\n      }, {\n        emit: 'historyToolbarChange'\n      }, {\n        emit: 'mainToolbarChange'\n      }, {\n        emit: 'nodesChange'\n      }, {\n        emit: 'pageColorChange'\n      }, {\n        emit: 'pageOrientationChange'\n      }, {\n        emit: 'pageSizeChange'\n      }, {\n        emit: 'propertiesPanelChange'\n      }, {\n        emit: 'readOnlyChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'showGridChange'\n      }, {\n        emit: 'simpleViewChange'\n      }, {\n        emit: 'snapToGridChange'\n      }, {\n        emit: 'toolboxChange'\n      }, {\n        emit: 'unitsChange'\n      }, {\n        emit: 'useNativeScrollingChange'\n      }, {\n        emit: 'viewToolbarChange'\n      }, {\n        emit: 'viewUnitsChange'\n      }, {\n        emit: 'visibleChange'\n      }, {\n        emit: 'widthChange'\n      }, {\n        emit: 'zoomLevelChange'\n      }]);\n\n      _this._idh.setHost(_assertThisInitialized(_this));\n\n      optionHost.setHost(_assertThisInitialized(_this));\n      return _this;\n    }\n    /**\r\n     * Specifies how the Diagram UI component automatically zooms the work area.\r\n    \r\n     */\n\n\n    _createClass(DxDiagramComponent, [{\n      key: \"autoZoomMode\",\n      get: function get() {\n        return this._getOption('autoZoomMode');\n      },\n      set: function set(value) {\n        this._setOption('autoZoomMode', value);\n      }\n      /**\r\n       * Configures the context menu&apos;s settings.\r\n      \r\n       */\n\n    }, {\n      key: \"contextMenu\",\n      get: function get() {\n        return this._getOption('contextMenu');\n      },\n      set: function set(value) {\n        this._setOption('contextMenu', value);\n      }\n      /**\r\n       * Configures the context toolbox&apos;s settings.\r\n      \r\n       */\n\n    }, {\n      key: \"contextToolbox\",\n      get: function get() {\n        return this._getOption('contextToolbox');\n      },\n      set: function set(value) {\n        this._setOption('contextToolbox', value);\n      }\n      /**\r\n       * Provide access to an array of custom shapes.\r\n      \r\n       */\n\n    }, {\n      key: \"customShapes\",\n      get: function get() {\n        return this._getOption('customShapes');\n      },\n      set: function set(value) {\n        this._setOption('customShapes', value);\n      }\n      /**\r\n       * Specifies a custom template for shapes.\r\n      \r\n       */\n\n    }, {\n      key: \"customShapeTemplate\",\n      get: function get() {\n        return this._getOption('customShapeTemplate');\n      },\n      set: function set(value) {\n        this._setOption('customShapeTemplate', value);\n      }\n      /**\r\n       * Specifies a custom template for shapes in the toolbox.\r\n      \r\n       */\n\n    }, {\n      key: \"customShapeToolboxTemplate\",\n      get: function get() {\n        return this._getOption('customShapeToolboxTemplate');\n      },\n      set: function set(value) {\n        this._setOption('customShapeToolboxTemplate', value);\n      }\n      /**\r\n       * Configures default item properties.\r\n      \r\n       */\n\n    }, {\n      key: \"defaultItemProperties\",\n      get: function get() {\n        return this._getOption('defaultItemProperties');\n      },\n      set: function set(value) {\n        this._setOption('defaultItemProperties', value);\n      }\n      /**\r\n       * Specifies whether the UI component responds to user interaction.\r\n      \r\n       */\n\n    }, {\n      key: \"disabled\",\n      get: function get() {\n        return this._getOption('disabled');\n      },\n      set: function set(value) {\n        this._setOption('disabled', value);\n      }\n      /**\r\n       * Allows you to bind the collection of diagram edges to a data source. For more information, see the Data Binding section.\r\n      \r\n       */\n\n    }, {\n      key: \"edges\",\n      get: function get() {\n        return this._getOption('edges');\n      },\n      set: function set(value) {\n        this._setOption('edges', value);\n      }\n      /**\r\n       * Specifies which editing operations a user can perform.\r\n      \r\n       */\n\n    }, {\n      key: \"editing\",\n      get: function get() {\n        return this._getOption('editing');\n      },\n      set: function set(value) {\n        this._setOption('editing', value);\n      }\n      /**\r\n       * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n      \r\n       */\n\n    }, {\n      key: \"elementAttr\",\n      get: function get() {\n        return this._getOption('elementAttr');\n      },\n      set: function set(value) {\n        this._setOption('elementAttr', value);\n      }\n      /**\r\n       * Configures export settings.\r\n      \r\n       */\n\n    }, {\n      key: \"export\",\n      get: function get() {\n        return this._getOption('export');\n      },\n      set: function set(value) {\n        this._setOption('export', value);\n      }\n      /**\r\n       * Specifies whether or not to display the UI component in full-screen mode.\r\n      \r\n       */\n\n    }, {\n      key: \"fullScreen\",\n      get: function get() {\n        return this._getOption('fullScreen');\n      },\n      set: function set(value) {\n        this._setOption('fullScreen', value);\n      }\n      /**\r\n       * Specifies the grid pitch.\r\n      \r\n       */\n\n    }, {\n      key: \"gridSize\",\n      get: function get() {\n        return this._getOption('gridSize');\n      },\n      set: function set(value) {\n        this._setOption('gridSize', value);\n      }\n      /**\r\n       * Indicates whether diagram content has unsaved changes.\r\n      \r\n       */\n\n    }, {\n      key: \"hasChanges\",\n      get: function get() {\n        return this._getOption('hasChanges');\n      },\n      set: function set(value) {\n        this._setOption('hasChanges', value);\n      }\n      /**\r\n       * Specifies the UI component&apos;s height.\r\n      \r\n       */\n\n    }, {\n      key: \"height\",\n      get: function get() {\n        return this._getOption('height');\n      },\n      set: function set(value) {\n        this._setOption('height', value);\n      }\n      /**\r\n       * Configures the history toolbar&apos;s settings.\r\n      \r\n       */\n\n    }, {\n      key: \"historyToolbar\",\n      get: function get() {\n        return this._getOption('historyToolbar');\n      },\n      set: function set(value) {\n        this._setOption('historyToolbar', value);\n      }\n      /**\r\n       * Configures the main toolbar settings.\r\n      \r\n       */\n\n    }, {\n      key: \"mainToolbar\",\n      get: function get() {\n        return this._getOption('mainToolbar');\n      },\n      set: function set(value) {\n        this._setOption('mainToolbar', value);\n      }\n      /**\r\n       * Allows you to bind the collection of diagram nodes to a data source. For more information, see the Data Binding section.\r\n      \r\n       */\n\n    }, {\n      key: \"nodes\",\n      get: function get() {\n        return this._getOption('nodes');\n      },\n      set: function set(value) {\n        this._setOption('nodes', value);\n      }\n      /**\r\n       * Specifies the color of a diagram page.\r\n      \r\n       */\n\n    }, {\n      key: \"pageColor\",\n      get: function get() {\n        return this._getOption('pageColor');\n      },\n      set: function set(value) {\n        this._setOption('pageColor', value);\n      }\n      /**\r\n       * Specifies the page orientation.\r\n      \r\n       */\n\n    }, {\n      key: \"pageOrientation\",\n      get: function get() {\n        return this._getOption('pageOrientation');\n      },\n      set: function set(value) {\n        this._setOption('pageOrientation', value);\n      }\n      /**\r\n       * Specifies a size of pages.\r\n      \r\n       */\n\n    }, {\n      key: \"pageSize\",\n      get: function get() {\n        return this._getOption('pageSize');\n      },\n      set: function set(value) {\n        this._setOption('pageSize', value);\n      }\n      /**\r\n       * Configures the Properties panel settings.\r\n      \r\n       */\n\n    }, {\n      key: \"propertiesPanel\",\n      get: function get() {\n        return this._getOption('propertiesPanel');\n      },\n      set: function set(value) {\n        this._setOption('propertiesPanel', value);\n      }\n      /**\r\n       * Specifies whether the diagram is read-only.\r\n      \r\n       */\n\n    }, {\n      key: \"readOnly\",\n      get: function get() {\n        return this._getOption('readOnly');\n      },\n      set: function set(value) {\n        this._setOption('readOnly', value);\n      }\n      /**\r\n       * Switches the UI component to a right-to-left representation.\r\n      \r\n       */\n\n    }, {\n      key: \"rtlEnabled\",\n      get: function get() {\n        return this._getOption('rtlEnabled');\n      },\n      set: function set(value) {\n        this._setOption('rtlEnabled', value);\n      }\n      /**\r\n       * Specifies whether grid lines are visible.\r\n      \r\n       */\n\n    }, {\n      key: \"showGrid\",\n      get: function get() {\n        return this._getOption('showGrid');\n      },\n      set: function set(value) {\n        this._setOption('showGrid', value);\n      }\n      /**\r\n       * Switch the Diagram UI component to simple view mode.\r\n      \r\n       */\n\n    }, {\n      key: \"simpleView\",\n      get: function get() {\n        return this._getOption('simpleView');\n      },\n      set: function set(value) {\n        this._setOption('simpleView', value);\n      }\n      /**\r\n       * Specifies whether diagram elements should snap to grid lines.\r\n      \r\n       */\n\n    }, {\n      key: \"snapToGrid\",\n      get: function get() {\n        return this._getOption('snapToGrid');\n      },\n      set: function set(value) {\n        this._setOption('snapToGrid', value);\n      }\n      /**\r\n       * Configures the toolbox settings.\r\n      \r\n       */\n\n    }, {\n      key: \"toolbox\",\n      get: function get() {\n        return this._getOption('toolbox');\n      },\n      set: function set(value) {\n        this._setOption('toolbox', value);\n      }\n      /**\r\n       * Specifies the measurement unit for size properties.\r\n      \r\n       */\n\n    }, {\n      key: \"units\",\n      get: function get() {\n        return this._getOption('units');\n      },\n      set: function set(value) {\n        this._setOption('units', value);\n      }\n      /**\r\n       * Specifies whether or not the UI component uses native scrolling.\r\n      \r\n       */\n\n    }, {\n      key: \"useNativeScrolling\",\n      get: function get() {\n        return this._getOption('useNativeScrolling');\n      },\n      set: function set(value) {\n        this._setOption('useNativeScrolling', value);\n      }\n      /**\r\n       * Configures the view toolbar settings.\r\n      \r\n       */\n\n    }, {\n      key: \"viewToolbar\",\n      get: function get() {\n        return this._getOption('viewToolbar');\n      },\n      set: function set(value) {\n        this._setOption('viewToolbar', value);\n      }\n      /**\r\n       * Specifies the measurement unit that is displayed in user interface elements.\r\n      \r\n       */\n\n    }, {\n      key: \"viewUnits\",\n      get: function get() {\n        return this._getOption('viewUnits');\n      },\n      set: function set(value) {\n        this._setOption('viewUnits', value);\n      }\n      /**\r\n       * Specifies whether the UI component is visible.\r\n      \r\n       */\n\n    }, {\n      key: \"visible\",\n      get: function get() {\n        return this._getOption('visible');\n      },\n      set: function set(value) {\n        this._setOption('visible', value);\n      }\n      /**\r\n       * Specifies the UI component&apos;s width.\r\n      \r\n       */\n\n    }, {\n      key: \"width\",\n      get: function get() {\n        return this._getOption('width');\n      },\n      set: function set(value) {\n        this._setOption('width', value);\n      }\n      /**\r\n       * Specifies the zoom level.\r\n      \r\n       */\n\n    }, {\n      key: \"zoomLevel\",\n      get: function get() {\n        return this._getOption('zoomLevel');\n      },\n      set: function set(value) {\n        this._setOption('zoomLevel', value);\n      }\n    }, {\n      key: \"customShapesChildren\",\n      get: function get() {\n        return this._getOption('customShapes');\n      },\n      set: function set(value) {\n        this.setChildren('customShapes', value);\n      }\n    }, {\n      key: \"_createInstance\",\n      value: function _createInstance(element, options) {\n        return new DxDiagram(element, options);\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._destroyWidget();\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        _get(_getPrototypeOf(DxDiagramComponent.prototype), \"ngOnChanges\", this).call(this, changes);\n\n        this.setupChanges('customShapes', changes);\n      }\n    }, {\n      key: \"setupChanges\",\n      value: function setupChanges(prop, changes) {\n        if (!(prop in this._optionsToUpdate)) {\n          this._idh.setup(prop, changes);\n        }\n      }\n    }, {\n      key: \"ngDoCheck\",\n      value: function ngDoCheck() {\n        this._idh.doCheck('customShapes');\n\n        this._watcherHelper.checkWatchers();\n\n        _get(_getPrototypeOf(DxDiagramComponent.prototype), \"ngDoCheck\", this).call(this);\n\n        _get(_getPrototypeOf(DxDiagramComponent.prototype), \"clearChangedOptions\", this).call(this);\n      }\n    }, {\n      key: \"_setOption\",\n      value: function _setOption(name, value) {\n        var isSetup = this._idh.setupSingle(name, value);\n\n        var isChanged = this._idh.getChanges(name, value) !== null;\n\n        if (isSetup || isChanged) {\n          _get(_getPrototypeOf(DxDiagramComponent.prototype), \"_setOption\", this).call(this, name, value);\n        }\n      }\n    }]);\n\n    return DxDiagramComponent;\n  }(DxComponent);\n\n  DxDiagramComponent.ɵfac = function DxDiagramComponent_Factory(t) {\n    return new (t || DxDiagramComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DxTemplateHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.WatcherHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IterableDifferHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TransferState), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n\n  DxDiagramComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: DxDiagramComponent,\n    selectors: [[\"dx-diagram\"]],\n    contentQueries: function DxDiagramComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, DxiCustomShapeComponent, 4);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customShapesChildren = _t);\n      }\n    },\n    inputs: {\n      autoZoomMode: \"autoZoomMode\",\n      contextMenu: \"contextMenu\",\n      contextToolbox: \"contextToolbox\",\n      customShapes: \"customShapes\",\n      customShapeTemplate: \"customShapeTemplate\",\n      customShapeToolboxTemplate: \"customShapeToolboxTemplate\",\n      defaultItemProperties: \"defaultItemProperties\",\n      disabled: \"disabled\",\n      edges: \"edges\",\n      editing: \"editing\",\n      elementAttr: \"elementAttr\",\n      export: \"export\",\n      fullScreen: \"fullScreen\",\n      gridSize: \"gridSize\",\n      hasChanges: \"hasChanges\",\n      height: \"height\",\n      historyToolbar: \"historyToolbar\",\n      mainToolbar: \"mainToolbar\",\n      nodes: \"nodes\",\n      pageColor: \"pageColor\",\n      pageOrientation: \"pageOrientation\",\n      pageSize: \"pageSize\",\n      propertiesPanel: \"propertiesPanel\",\n      readOnly: \"readOnly\",\n      rtlEnabled: \"rtlEnabled\",\n      showGrid: \"showGrid\",\n      simpleView: \"simpleView\",\n      snapToGrid: \"snapToGrid\",\n      toolbox: \"toolbox\",\n      units: \"units\",\n      useNativeScrolling: \"useNativeScrolling\",\n      viewToolbar: \"viewToolbar\",\n      viewUnits: \"viewUnits\",\n      visible: \"visible\",\n      width: \"width\",\n      zoomLevel: \"zoomLevel\"\n    },\n    outputs: {\n      onContentReady: \"onContentReady\",\n      onCustomCommand: \"onCustomCommand\",\n      onDisposing: \"onDisposing\",\n      onInitialized: \"onInitialized\",\n      onItemClick: \"onItemClick\",\n      onItemDblClick: \"onItemDblClick\",\n      onOptionChanged: \"onOptionChanged\",\n      onRequestEditOperation: \"onRequestEditOperation\",\n      onRequestLayoutUpdate: \"onRequestLayoutUpdate\",\n      onSelectionChanged: \"onSelectionChanged\",\n      autoZoomModeChange: \"autoZoomModeChange\",\n      contextMenuChange: \"contextMenuChange\",\n      contextToolboxChange: \"contextToolboxChange\",\n      customShapesChange: \"customShapesChange\",\n      customShapeTemplateChange: \"customShapeTemplateChange\",\n      customShapeToolboxTemplateChange: \"customShapeToolboxTemplateChange\",\n      defaultItemPropertiesChange: \"defaultItemPropertiesChange\",\n      disabledChange: \"disabledChange\",\n      edgesChange: \"edgesChange\",\n      editingChange: \"editingChange\",\n      elementAttrChange: \"elementAttrChange\",\n      exportChange: \"exportChange\",\n      fullScreenChange: \"fullScreenChange\",\n      gridSizeChange: \"gridSizeChange\",\n      hasChangesChange: \"hasChangesChange\",\n      heightChange: \"heightChange\",\n      historyToolbarChange: \"historyToolbarChange\",\n      mainToolbarChange: \"mainToolbarChange\",\n      nodesChange: \"nodesChange\",\n      pageColorChange: \"pageColorChange\",\n      pageOrientationChange: \"pageOrientationChange\",\n      pageSizeChange: \"pageSizeChange\",\n      propertiesPanelChange: \"propertiesPanelChange\",\n      readOnlyChange: \"readOnlyChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      showGridChange: \"showGridChange\",\n      simpleViewChange: \"simpleViewChange\",\n      snapToGridChange: \"snapToGridChange\",\n      toolboxChange: \"toolboxChange\",\n      unitsChange: \"unitsChange\",\n      useNativeScrollingChange: \"useNativeScrollingChange\",\n      viewToolbarChange: \"viewToolbarChange\",\n      viewUnitsChange: \"viewUnitsChange\",\n      visibleChange: \"visibleChange\",\n      widthChange: \"widthChange\",\n      zoomLevelChange: \"zoomLevelChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function DxDiagramComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxDiagramComponent.prototype, \"autoZoomMode\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxDiagramComponent.prototype, \"contextMenu\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxDiagramComponent.prototype, \"contextToolbox\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Array), __metadata(\"design:paramtypes\", [Array])], DxDiagramComponent.prototype, \"customShapes\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxDiagramComponent.prototype, \"customShapeTemplate\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxDiagramComponent.prototype, \"customShapeToolboxTemplate\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxDiagramComponent.prototype, \"defaultItemProperties\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxDiagramComponent.prototype, \"disabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxDiagramComponent.prototype, \"edges\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxDiagramComponent.prototype, \"editing\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxDiagramComponent.prototype, \"elementAttr\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxDiagramComponent.prototype, \"export\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxDiagramComponent.prototype, \"fullScreen\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxDiagramComponent.prototype, \"gridSize\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxDiagramComponent.prototype, \"hasChanges\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxDiagramComponent.prototype, \"height\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxDiagramComponent.prototype, \"historyToolbar\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxDiagramComponent.prototype, \"mainToolbar\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxDiagramComponent.prototype, \"nodes\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxDiagramComponent.prototype, \"pageColor\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxDiagramComponent.prototype, \"pageOrientation\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxDiagramComponent.prototype, \"pageSize\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxDiagramComponent.prototype, \"propertiesPanel\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxDiagramComponent.prototype, \"readOnly\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxDiagramComponent.prototype, \"rtlEnabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxDiagramComponent.prototype, \"showGrid\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxDiagramComponent.prototype, \"simpleView\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxDiagramComponent.prototype, \"snapToGrid\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxDiagramComponent.prototype, \"toolbox\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxDiagramComponent.prototype, \"units\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxDiagramComponent.prototype, \"useNativeScrolling\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxDiagramComponent.prototype, \"viewToolbar\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxDiagramComponent.prototype, \"viewUnits\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxDiagramComponent.prototype, \"visible\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxDiagramComponent.prototype, \"width\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxDiagramComponent.prototype, \"zoomLevel\", null);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDiagramComponent.prototype, \"onContentReady\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDiagramComponent.prototype, \"onCustomCommand\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDiagramComponent.prototype, \"onDisposing\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDiagramComponent.prototype, \"onInitialized\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDiagramComponent.prototype, \"onItemClick\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDiagramComponent.prototype, \"onItemDblClick\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDiagramComponent.prototype, \"onOptionChanged\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDiagramComponent.prototype, \"onRequestEditOperation\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDiagramComponent.prototype, \"onRequestLayoutUpdate\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDiagramComponent.prototype, \"onSelectionChanged\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDiagramComponent.prototype, \"autoZoomModeChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDiagramComponent.prototype, \"contextMenuChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDiagramComponent.prototype, \"contextToolboxChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDiagramComponent.prototype, \"customShapesChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDiagramComponent.prototype, \"customShapeTemplateChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDiagramComponent.prototype, \"customShapeToolboxTemplateChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDiagramComponent.prototype, \"defaultItemPropertiesChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDiagramComponent.prototype, \"disabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDiagramComponent.prototype, \"edgesChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDiagramComponent.prototype, \"editingChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDiagramComponent.prototype, \"elementAttrChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDiagramComponent.prototype, \"exportChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDiagramComponent.prototype, \"fullScreenChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDiagramComponent.prototype, \"gridSizeChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDiagramComponent.prototype, \"hasChangesChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDiagramComponent.prototype, \"heightChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDiagramComponent.prototype, \"historyToolbarChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDiagramComponent.prototype, \"mainToolbarChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDiagramComponent.prototype, \"nodesChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDiagramComponent.prototype, \"pageColorChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDiagramComponent.prototype, \"pageOrientationChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDiagramComponent.prototype, \"pageSizeChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDiagramComponent.prototype, \"propertiesPanelChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDiagramComponent.prototype, \"readOnlyChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDiagramComponent.prototype, \"rtlEnabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDiagramComponent.prototype, \"showGridChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDiagramComponent.prototype, \"simpleViewChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDiagramComponent.prototype, \"snapToGridChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDiagramComponent.prototype, \"toolboxChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDiagramComponent.prototype, \"unitsChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDiagramComponent.prototype, \"useNativeScrollingChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDiagramComponent.prototype, \"viewToolbarChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDiagramComponent.prototype, \"viewUnitsChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDiagramComponent.prototype, \"visibleChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDiagramComponent.prototype, \"widthChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxDiagramComponent.prototype, \"zoomLevelChange\", void 0);\n\n  __decorate([ContentChildren(DxiCustomShapeComponent), __metadata(\"design:type\", QueryList), __metadata(\"design:paramtypes\", [Object])], DxDiagramComponent.prototype, \"customShapesChildren\", null);\n\n  DxDiagramComponent = __decorate([__param(7, Inject(PLATFORM_ID)), __metadata(\"design:paramtypes\", [ElementRef, NgZone, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, TransferState, Object])], DxDiagramComponent);\n  return DxDiagramComponent;\n})();\nvar DxDiagramModule = /*#__PURE__*/(function () {\n  var DxDiagramModule = /*#__PURE__*/_createClass(function DxDiagramModule() {\n    _classCallCheck(this, DxDiagramModule);\n  });\n\n  DxDiagramModule.ɵfac = function DxDiagramModule_Factory(t) {\n    return new (t || DxDiagramModule)();\n  };\n\n  DxDiagramModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: DxDiagramModule\n  });\n  DxDiagramModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[DxoContextMenuModule, DxiCommandModule, DxiItemModule, DxoContextToolboxModule, DxiCustomShapeModule, DxiConnectionPointModule, DxoDefaultItemPropertiesModule, DxoEdgesModule, DxoEditingModule, DxoExportModule, DxoGridSizeModule, DxoHistoryToolbarModule, DxoMainToolbarModule, DxoNodesModule, DxoAutoLayoutModule, DxoPageSizeModule, DxoPropertiesPanelModule, DxiTabModule, DxiGroupModule, DxoToolboxModule, DxoViewToolbarModule, DxoZoomLevelModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxoContextMenuModule, DxiCommandModule, DxiItemModule, DxoContextToolboxModule, DxiCustomShapeModule, DxiConnectionPointModule, DxoDefaultItemPropertiesModule, DxoEdgesModule, DxoEditingModule, DxoExportModule, DxoGridSizeModule, DxoHistoryToolbarModule, DxoMainToolbarModule, DxoNodesModule, DxoAutoLayoutModule, DxoPageSizeModule, DxoPropertiesPanelModule, DxiTabModule, DxiGroupModule, DxoToolboxModule, DxoViewToolbarModule, DxoZoomLevelModule, DxTemplateModule]\n  });\n  return DxDiagramModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxDiagramModule, {\n    declarations: function declarations() {\n      return [DxDiagramComponent];\n    },\n    imports: function imports() {\n      return [DxoContextMenuModule, DxiCommandModule, DxiItemModule, DxoContextToolboxModule, DxiCustomShapeModule, DxiConnectionPointModule, DxoDefaultItemPropertiesModule, DxoEdgesModule, DxoEditingModule, DxoExportModule, DxoGridSizeModule, DxoHistoryToolbarModule, DxoMainToolbarModule, DxoNodesModule, DxoAutoLayoutModule, DxoPageSizeModule, DxoPropertiesPanelModule, DxiTabModule, DxiGroupModule, DxoToolboxModule, DxoViewToolbarModule, DxoZoomLevelModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule];\n    },\n    exports: function exports() {\n      return [DxDiagramComponent, DxoContextMenuModule, DxiCommandModule, DxiItemModule, DxoContextToolboxModule, DxiCustomShapeModule, DxiConnectionPointModule, DxoDefaultItemPropertiesModule, DxoEdgesModule, DxoEditingModule, DxoExportModule, DxoGridSizeModule, DxoHistoryToolbarModule, DxoMainToolbarModule, DxoNodesModule, DxoAutoLayoutModule, DxoPageSizeModule, DxoPropertiesPanelModule, DxiTabModule, DxiGroupModule, DxoToolboxModule, DxoViewToolbarModule, DxoZoomLevelModule, DxTemplateModule];\n    }\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DxDiagramComponent, DxDiagramModule }; //# sourceMappingURL=devextreme-angular-ui-diagram.js.map","map":null,"metadata":{},"sourceType":"module"}