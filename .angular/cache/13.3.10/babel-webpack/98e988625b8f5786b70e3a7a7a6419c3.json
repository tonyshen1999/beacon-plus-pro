{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.virtual_columns_core.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { extend } from \"../../core/utils/extend\";\nexport function foreachColumnInfo(info, callback, rowIndex, offsets, columnCount, lastProcessedIndexes) {\n  rowIndex = rowIndex || 0;\n  offsets = offsets || [];\n  lastProcessedIndexes = lastProcessedIndexes || [];\n  offsets[rowIndex] = offsets[rowIndex] || 0;\n  var row = info[rowIndex];\n  var startIndex = lastProcessedIndexes[rowIndex] + 1 || 0;\n  var processedColumnCount = 0;\n  var colIndex;\n\n  if (!row) {\n    return;\n  }\n\n  for (colIndex = startIndex; colIndex < row.length; colIndex++) {\n    var cell = row[colIndex];\n    var visibleIndex = colIndex + offsets[rowIndex];\n    var colspan = cell.colspan || 1;\n    foreachColumnInfo(info, callback, rowIndex + (cell.rowspan || 1), offsets, colspan, lastProcessedIndexes);\n    offsets[rowIndex] += colspan - 1;\n    processedColumnCount += colspan;\n\n    if (cell.rowspan) {\n      for (var i = rowIndex + 1; i < rowIndex + cell.rowspan; i++) {\n        offsets[i] = offsets[i] || 0;\n        offsets[i] += cell.colspan || 1;\n      }\n    }\n\n    if (false === callback(cell, visibleIndex, rowIndex, colIndex)) {\n      break;\n    }\n\n    if (void 0 !== columnCount && processedColumnCount >= columnCount) {\n      break;\n    }\n  }\n\n  lastProcessedIndexes[rowIndex] = colIndex;\n}\nexport function createColumnsInfo(info, startIndex, endIndex) {\n  var newInfo = [];\n  foreachColumnInfo(info, function (columnInfo, visibleIndex, rowIndex) {\n    var cell = columnInfo;\n    var colspan;\n    var cellColspan = cell.colspan || 1;\n    var isVisible = visibleIndex + cellColspan - 1 >= startIndex && visibleIndex < endIndex;\n    newInfo[rowIndex] = newInfo[rowIndex] || [];\n\n    if (isVisible) {\n      if (visibleIndex < startIndex) {\n        colspan = cellColspan - (startIndex - visibleIndex);\n        visibleIndex = startIndex;\n      } else {\n        colspan = cellColspan;\n      }\n\n      if (visibleIndex + colspan > endIndex) {\n        colspan = endIndex - visibleIndex;\n      }\n\n      if (colspan !== cellColspan) {\n        cell = extend({}, cell, {\n          colspan: colspan\n        });\n      }\n\n      newInfo[rowIndex].push(cell);\n    } else if (visibleIndex > endIndex) {\n      return false;\n    }\n  });\n\n  for (var i = 0; i < newInfo.length; i++) {\n    newInfo[i] = newInfo[i] || [];\n  }\n\n  return newInfo;\n}","map":null,"metadata":{},"sourceType":"module"}