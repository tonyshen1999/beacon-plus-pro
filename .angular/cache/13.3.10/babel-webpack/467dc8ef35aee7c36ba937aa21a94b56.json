{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/pivot_grid/ui.pivot_grid.fields_area.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { noop } from \"../../core/utils/common\";\nimport { each } from \"../../core/utils/iterator\";\nimport { AreaItem } from \"./ui.pivot_grid.area_item\";\nimport { capitalizeFirstLetter } from \"./ui.pivot_grid.utils\";\nimport { setHeight, setWidth } from \"../../core/utils/style\";\nimport Popup from \"../popup\";\nimport Button from \"../button\";\nvar DIV = \"<div>\";\nimport \"./ui.pivot_grid.field_chooser_base\";\nvar AREA_DRAG_CLASS = \"dx-pivotgrid-drag-action\";\n\nfunction renderGroupConnector(field, nextField, prevField, $container) {\n  if (prevField && prevField.groupName && prevField.groupName === field.groupName) {\n    $(DIV).addClass(\"dx-group-connector\").addClass(\"dx-group-connector-prev\").appendTo($container);\n  }\n\n  if (nextField && nextField.groupName && nextField.groupName === field.groupName) {\n    $(DIV).addClass(\"dx-group-connector\").addClass(\"dx-group-connector-next\").appendTo($container);\n  }\n}\n\nexport var FieldsArea = AreaItem.inherit({\n  ctor: function ctor(component, area) {\n    this.callBase(component);\n    this._area = area;\n  },\n  _getAreaName: function _getAreaName() {\n    return \"fields\";\n  },\n  _createGroupElement: function _createGroupElement() {\n    return $(DIV).addClass(\"dx-pivotgrid-fields-area\").addClass(\"dx-area-fields\").addClass(AREA_DRAG_CLASS).attr(\"group\", this._area);\n  },\n  isVisible: function isVisible() {\n    return !!this.option(\"fieldPanel.visible\") && this.option(\"fieldPanel.show\" + capitalizeFirstLetter(this._area) + \"Fields\");\n  },\n  _renderButton: function _renderButton(element) {\n    var that = this;\n    var container = $(\"<td>\").appendTo($(\"<tr>\").appendTo(element));\n\n    var button = that.component._createComponent($(DIV).appendTo(container), Button, {\n      text: \"Fields\",\n      icon: \"menu\",\n      width: \"auto\",\n      onClick: function onClick() {\n        var popup = that.tableElement().find(\".dx-fields-area-popup\").dxPopup(\"instance\");\n\n        if (!popup.option(\"visible\")) {\n          popup.show();\n        }\n      }\n    });\n\n    button.$element().addClass(\"dx-pivotgrid-fields-area-hamburger\");\n  },\n  _getPopupOptions: function _getPopupOptions(row, button) {\n    return {\n      contentTemplate: function contentTemplate() {\n        return $(\"<table>\").addClass(\"dx-area-field-container\").append($(\"<thead>\").addClass(\"dx-pivotgrid-fields-area-head\").append(row));\n      },\n      height: \"auto\",\n      width: \"auto\",\n      position: {\n        at: \"left\",\n        my: \"left\",\n        of: button\n      },\n      dragEnabled: false,\n      animation: {\n        show: {\n          type: \"pop\",\n          duration: 200\n        }\n      },\n      shading: false,\n      showTitle: false,\n      closeOnOutsideClick: true,\n      container: button.parent()\n    };\n  },\n  _renderPopup: function _renderPopup(tableElement, row) {\n    var button = tableElement.find(\".dx-button\");\n\n    var popupOptions = this._getPopupOptions(row, button);\n\n    var FieldChooserBase = this.component.$element().dxPivotGridFieldChooserBase(\"instance\");\n\n    if (this._rowPopup) {\n      this._rowPopup.$element().remove();\n    }\n\n    this._rowPopup = this.component._createComponent($(DIV).appendTo(tableElement), Popup, popupOptions);\n\n    this._rowPopup.$element().addClass(\"dx-fields-area-popup\");\n\n    this._rowPopup.content().addClass(\"dx-pivotgrid-fields-container\");\n\n    this._rowPopup.content().parent().attr(\"group\", \"row\");\n\n    FieldChooserBase.subscribeToEvents(this._rowPopup.content());\n    FieldChooserBase.renderSortable(this._rowPopup.content());\n  },\n  _shouldCreateButton: function _shouldCreateButton() {\n    return false;\n  },\n  _renderTableContent: function _renderTableContent(tableElement, data) {\n    var that = this;\n    var groupElement = this.groupElement();\n    var isVisible = this.isVisible();\n    var fieldChooserBase = that.component.$element().dxPivotGridFieldChooserBase(\"instance\");\n    var head = $(\"<thead>\").addClass(\"dx-pivotgrid-fields-area-head\").appendTo(tableElement);\n    var area = that._area;\n    var row = $(\"<tr>\");\n    groupElement.toggleClass(\"dx-hidden\", !isVisible);\n    tableElement.addClass(\"dx-area-field-container\");\n\n    if (!isVisible) {\n      return;\n    }\n\n    each(data, function (index, field) {\n      if (field.area === area && false !== field.visible) {\n        var td = $(\"<td>\").append(fieldChooserBase.renderField(field, \"row\" === field.area));\n        var indicators = td.find(\".dx-column-indicators\");\n\n        if (indicators.length && that._shouldCreateButton()) {\n          indicators.insertAfter(indicators.next());\n        }\n\n        td.appendTo(row);\n        renderGroupConnector(field, data[index + 1], data[index - 1], td);\n      }\n    });\n\n    if (!row.children().length) {\n      $(\"<td>\").append($(DIV).addClass(\"dx-empty-area-text\").text(this.option(\"fieldPanel.texts.\" + area + \"FieldArea\"))).appendTo(row);\n    }\n\n    if (that._shouldCreateButton()) {\n      that._renderButton(head);\n\n      that._renderPopup(tableElement, row);\n    } else {\n      head.append(row);\n    }\n  },\n  setGroupWidth: function setGroupWidth(value) {\n    setWidth(this.groupElement(), value);\n  },\n  setGroupHeight: function setGroupHeight(value) {\n    setHeight(this.groupElement(), value);\n  },\n  reset: function reset() {\n    this.callBase();\n    this.groupElement().css(\"marginTop\", 0);\n  },\n  _renderVirtualContent: noop\n});","map":null,"metadata":{},"sourceType":"module"}