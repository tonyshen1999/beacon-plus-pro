{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/list/ui.list.edit.decorator.selection.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { name as clickEventName } from \"../../events/click\";\nimport { extend } from \"../../core/utils/extend\";\nimport errors from \"../widget/ui.errors\";\nimport CheckBox from \"../check_box\";\nimport RadioButton from \"../radio_group/radio_button\";\nimport { addNamespace } from \"../../events/utils/index\";\nimport { register as registerDecorator } from \"./ui.list.edit.decorator_registry\";\nimport EditDecorator from \"./ui.list.edit.decorator\";\nvar SELECT_DECORATOR_ENABLED_CLASS = \"dx-list-select-decorator-enabled\";\nvar SELECT_DECORATOR_SELECT_ALL_CLASS = \"dx-list-select-all\";\nvar SELECT_DECORATOR_SELECT_ALL_CHECKBOX_CLASS = \"dx-list-select-all-checkbox\";\nvar SELECT_DECORATOR_SELECT_ALL_LABEL_CLASS = \"dx-list-select-all-label\";\nvar SELECT_CHECKBOX_CONTAINER_CLASS = \"dx-list-select-checkbox-container\";\nvar SELECT_CHECKBOX_CLASS = \"dx-list-select-checkbox\";\nvar SELECT_RADIO_BUTTON_CONTAINER_CLASS = \"dx-list-select-radiobutton-container\";\nvar SELECT_RADIO_BUTTON_CLASS = \"dx-list-select-radiobutton\";\nvar FOCUSED_STATE_CLASS = \"dx-state-focused\";\nvar CLICK_EVENT_NAME = addNamespace(clickEventName, \"dxListEditDecorator\");\nregisterDecorator(\"selection\", \"default\", EditDecorator.inherit({\n  _init: function _init() {\n    this.callBase.apply(this, arguments);\n\n    var selectionMode = this._list.option(\"selectionMode\");\n\n    this._singleStrategy = \"single\" === selectionMode;\n    this._containerClass = this._singleStrategy ? SELECT_RADIO_BUTTON_CONTAINER_CLASS : SELECT_CHECKBOX_CONTAINER_CLASS;\n    this._controlClass = this._singleStrategy ? SELECT_RADIO_BUTTON_CLASS : SELECT_CHECKBOX_CLASS;\n    this._controlWidget = this._singleStrategy ? RadioButton : CheckBox;\n\n    this._list.$element().addClass(SELECT_DECORATOR_ENABLED_CLASS);\n  },\n  beforeBag: function beforeBag(config) {\n    var $itemElement = config.$itemElement;\n    var $container = config.$container.addClass(this._containerClass);\n    var $control = $(\"<div>\").addClass(this._controlClass).appendTo($container);\n    new this._controlWidget($control, extend(this._commonOptions(), {\n      value: this._isSelected($itemElement),\n      focusStateEnabled: false,\n      hoverStateEnabled: false,\n      onValueChanged: function (e) {\n        e.event && this._list._saveSelectionChangeEvent(e.event);\n\n        this._processCheckedState($itemElement, e.value);\n\n        e.event && e.event.stopPropagation();\n      }.bind(this)\n    }));\n  },\n  modifyElement: function modifyElement(config) {\n    this.callBase.apply(this, arguments);\n    var $itemElement = config.$itemElement;\n\n    var control = this._controlWidget.getInstance($itemElement.find(\".\" + this._controlClass));\n\n    eventsEngine.on($itemElement, \"stateChanged\", function (e, state) {\n      control.option(\"value\", state);\n    }.bind(this));\n  },\n  _updateSelectAllState: function _updateSelectAllState() {\n    if (!this._$selectAll) {\n      return;\n    }\n\n    this._selectAllCheckBox.option(\"value\", this._list.isSelectAll());\n  },\n  afterRender: function afterRender() {\n    if (\"all\" !== this._list.option(\"selectionMode\")) {\n      return;\n    }\n\n    if (!this._$selectAll) {\n      this._renderSelectAll();\n    } else {\n      this._updateSelectAllState();\n    }\n  },\n  handleKeyboardEvents: function handleKeyboardEvents(currentFocusedIndex, moveFocusUp) {\n    var moveFocusDown = !moveFocusUp;\n    var list = this._list;\n    var $selectAll = this._$selectAll;\n\n    var lastItemIndex = list._getLastItemIndex();\n\n    var isFocusOutOfList = moveFocusUp && 0 === currentFocusedIndex || moveFocusDown && currentFocusedIndex === lastItemIndex;\n    var hasSelectAllItem = !!$selectAll;\n\n    if (hasSelectAllItem && isFocusOutOfList) {\n      list.option(\"focusedElement\", $selectAll);\n      list.scrollToItem(list.option(\"focusedElement\"));\n      return true;\n    }\n\n    return false;\n  },\n  handleEnterPressing: function handleEnterPressing(e) {\n    if (this._$selectAll && this._$selectAll.hasClass(FOCUSED_STATE_CLASS)) {\n      e.target = this._$selectAll.get(0);\n\n      this._list._saveSelectionChangeEvent(e);\n\n      this._selectAllCheckBox.option(\"value\", !this._selectAllCheckBox.option(\"value\"));\n\n      return true;\n    }\n  },\n  _renderSelectAll: function _renderSelectAll() {\n    var $selectAll = this._$selectAll = $(\"<div>\").addClass(SELECT_DECORATOR_SELECT_ALL_CLASS);\n    var list = this._list;\n\n    var downArrowHandler = list._supportedKeys().downArrow.bind(list);\n\n    this._selectAllCheckBox = list._createComponent($(\"<div>\").addClass(SELECT_DECORATOR_SELECT_ALL_CHECKBOX_CLASS).appendTo($selectAll), CheckBox, {\n      focusStateEnabled: false,\n      hoverStateEnabled: false\n    });\n\n    this._selectAllCheckBox.registerKeyHandler(\"downArrow\", downArrowHandler);\n\n    $(\"<div>\").addClass(SELECT_DECORATOR_SELECT_ALL_LABEL_CLASS).text(this._list.option(\"selectAllText\")).appendTo($selectAll);\n\n    this._list.itemsContainer().prepend($selectAll);\n\n    this._updateSelectAllState();\n\n    this._attachSelectAllHandler();\n  },\n  _attachSelectAllHandler: function _attachSelectAllHandler() {\n    this._selectAllCheckBox.option(\"onValueChanged\", this._selectAllHandler.bind(this));\n\n    eventsEngine.off(this._$selectAll, CLICK_EVENT_NAME);\n    eventsEngine.on(this._$selectAll, CLICK_EVENT_NAME, this._selectAllClickHandler.bind(this));\n  },\n  _selectAllHandler: function _selectAllHandler(e) {\n    e.event && e.event.stopPropagation();\n\n    var isSelectedAll = this._selectAllCheckBox.option(\"value\");\n\n    var result = this._list._createActionByOption(\"onSelectAllValueChanged\")({\n      value: isSelectedAll\n    });\n\n    if (false === result) {\n      return;\n    }\n\n    e.event && this._list._saveSelectionChangeEvent(e.event);\n\n    if (true === isSelectedAll) {\n      this._selectAllItems();\n    } else if (false === isSelectedAll) {\n      this._unselectAllItems();\n    }\n  },\n  _checkSelectAllCapability: function _checkSelectAllCapability() {\n    var list = this._list;\n    var dataSource = list.getDataSource();\n\n    if (\"allPages\" === list.option(\"selectAllMode\") && list.option(\"grouped\") && (!dataSource || !dataSource.group())) {\n      errors.log(\"W1010\");\n      return false;\n    }\n\n    return true;\n  },\n  _selectAllItems: function _selectAllItems() {\n    if (!this._checkSelectAllCapability()) {\n      return;\n    }\n\n    this._list._selection.selectAll(\"page\" === this._list.option(\"selectAllMode\"));\n  },\n  _unselectAllItems: function _unselectAllItems() {\n    if (!this._checkSelectAllCapability()) {\n      return;\n    }\n\n    this._list._selection.deselectAll(\"page\" === this._list.option(\"selectAllMode\"));\n  },\n  _selectAllClickHandler: function _selectAllClickHandler(e) {\n    this._list._saveSelectionChangeEvent(e);\n\n    this._selectAllCheckBox.option(\"value\", !this._selectAllCheckBox.option(\"value\"));\n  },\n  _isSelected: function _isSelected($itemElement) {\n    return this._list.isItemSelected($itemElement);\n  },\n  _processCheckedState: function _processCheckedState($itemElement, checked) {\n    if (checked) {\n      this._list.selectItem($itemElement);\n    } else {\n      this._list.unselectItem($itemElement);\n    }\n  },\n  dispose: function dispose() {\n    this._disposeSelectAll();\n\n    this._list.$element().removeClass(SELECT_DECORATOR_ENABLED_CLASS);\n\n    this.callBase.apply(this, arguments);\n  },\n  _disposeSelectAll: function _disposeSelectAll() {\n    if (this._$selectAll) {\n      this._$selectAll.remove();\n\n      this._$selectAll = null;\n    }\n  }\n}));","map":null,"metadata":{},"sourceType":"module"}