{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/tree_list/ui.tree_list.data_controller.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { extend } from \"../../core/utils/extend\";\nimport { Deferred } from \"../../core/utils/deferred\";\nimport treeListCore from \"./ui.tree_list.core\";\nimport { equalByValue } from \"../../core/utils/common\";\nimport dataSourceAdapterProvider from \"./ui.tree_list.data_source_adapter\";\nimport { dataControllerModule } from \"../grid_core/ui.grid_core.data_controller\";\nexport var DataController = dataControllerModule.controllers.data.inherit({\n  _getDataSourceAdapter: function _getDataSourceAdapter() {\n    return dataSourceAdapterProvider;\n  },\n  _getNodeLevel: function _getNodeLevel(node) {\n    var level = -1;\n\n    while (node.parent) {\n      if (node.visible) {\n        level++;\n      }\n\n      node = node.parent;\n    }\n\n    return level;\n  },\n  _generateDataItem: function _generateDataItem(node, options) {\n    return {\n      rowType: \"data\",\n      node: node,\n      key: node.key,\n      data: node.data,\n      isExpanded: this.isRowExpanded(node.key, options),\n      level: this._getNodeLevel(node)\n    };\n  },\n  _loadOnOptionChange: function _loadOnOptionChange() {\n    this._dataSource.load();\n  },\n  _isItemEquals: function _isItemEquals(item1, item2) {\n    if (!this.callBase.apply(this, arguments)) {\n      return false;\n    }\n\n    if (item1.node && item2.node && item1.node.hasChildren !== item2.node.hasChildren) {\n      return false;\n    }\n\n    if (item1.level !== item2.level || item1.isExpanded !== item2.isExpanded) {\n      return false;\n    }\n\n    return true;\n  },\n  init: function init() {\n    this.createAction(\"onRowExpanding\");\n    this.createAction(\"onRowExpanded\");\n    this.createAction(\"onRowCollapsing\");\n    this.createAction(\"onRowCollapsed\");\n    this.callBase.apply(this, arguments);\n  },\n  keyOf: function keyOf(data) {\n    var dataSource = this._dataSource;\n\n    if (dataSource) {\n      return dataSource.keyOf(data);\n    }\n  },\n  key: function key() {\n    var dataSource = this._dataSource;\n\n    if (dataSource) {\n      return dataSource.getKeyExpr();\n    }\n  },\n  publicMethods: function publicMethods() {\n    return this.callBase().concat([\"expandRow\", \"collapseRow\", \"isRowExpanded\", \"getRootNode\", \"getNodeByKey\", \"loadDescendants\", \"forEachNode\"]);\n  },\n  changeRowExpand: function changeRowExpand(key) {\n    var _this = this;\n\n    if (this._dataSource) {\n      var args = {\n        key: key\n      };\n      var isExpanded = this.isRowExpanded(key);\n      this.executeAction(isExpanded ? \"onRowCollapsing\" : \"onRowExpanding\", args);\n\n      if (!args.cancel) {\n        return this._dataSource.changeRowExpand(key).done(function () {\n          _this.executeAction(isExpanded ? \"onRowCollapsed\" : \"onRowExpanded\", args);\n        });\n      }\n    }\n\n    return new Deferred().resolve();\n  },\n  isRowExpanded: function isRowExpanded(key, cache) {\n    return this._dataSource && this._dataSource.isRowExpanded(key, cache);\n  },\n  expandRow: function expandRow(key) {\n    if (!this.isRowExpanded(key)) {\n      return this.changeRowExpand(key);\n    }\n\n    return new Deferred().resolve();\n  },\n  collapseRow: function collapseRow(key) {\n    if (this.isRowExpanded(key)) {\n      return this.changeRowExpand(key);\n    }\n\n    return new Deferred().resolve();\n  },\n  getRootNode: function getRootNode() {\n    return this._dataSource && this._dataSource.getRootNode();\n  },\n  optionChanged: function optionChanged(args) {\n    switch (args.name) {\n      case \"rootValue\":\n      case \"parentIdExpr\":\n      case \"itemsExpr\":\n      case \"filterMode\":\n      case \"expandNodesOnFiltering\":\n      case \"autoExpandAll\":\n      case \"hasItemsExpr\":\n      case \"dataStructure\":\n        this._columnsController.reset();\n\n        this._items = [];\n\n        this._refreshDataSource();\n\n        args.handled = true;\n        break;\n\n      case \"expandedRowKeys\":\n      case \"onNodesInitialized\":\n        if (this._dataSource && !this._dataSource._isNodesInitializing && !equalByValue(args.value, args.previousValue)) {\n          this._loadOnOptionChange();\n        }\n\n        args.handled = true;\n        break;\n\n      case \"maxFilterLengthInRequest\":\n        args.handled = true;\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  getNodeByKey: function getNodeByKey(key) {\n    if (!this._dataSource) {\n      return;\n    }\n\n    return this._dataSource.getNodeByKey(key);\n  },\n  getChildNodeKeys: function getChildNodeKeys(parentKey) {\n    if (!this._dataSource) {\n      return;\n    }\n\n    return this._dataSource.getChildNodeKeys(parentKey);\n  },\n  loadDescendants: function loadDescendants(keys, childrenOnly) {\n    if (!this._dataSource) {\n      return;\n    }\n\n    return this._dataSource.loadDescendants(keys, childrenOnly);\n  },\n  forEachNode: function forEachNode() {\n    this._dataSource.forEachNode.apply(this, arguments);\n  }\n});\ntreeListCore.registerModule(\"data\", {\n  defaultOptions: function defaultOptions() {\n    return extend({}, dataControllerModule.defaultOptions(), {\n      itemsExpr: \"items\",\n      parentIdExpr: \"parentId\",\n      rootValue: 0,\n      dataStructure: \"plain\",\n      expandedRowKeys: [],\n      filterMode: \"withAncestors\",\n      expandNodesOnFiltering: true,\n      autoExpandAll: false,\n      onNodesInitialized: null,\n      maxFilterLengthInRequest: 1500,\n      paging: {\n        enabled: false\n      }\n    });\n  },\n  controllers: {\n    data: DataController\n  }\n});","map":null,"metadata":{},"sourceType":"module"}