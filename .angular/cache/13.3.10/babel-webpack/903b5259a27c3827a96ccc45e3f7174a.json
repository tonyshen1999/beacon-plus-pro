{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/tree_map/node.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { extend as _extend } from \"../../core/utils/extend\";\n\nfunction Node() {}\n\nvar updateTile = [updateLeaf, updateGroup];\n\n_extend(Node.prototype, {\n  value: 0,\n  isNode: function isNode() {\n    return !!(this.nodes && this.level < this.ctx.maxLevel);\n  },\n  isActive: function isActive() {\n    var ctx = this.ctx;\n    return this.level >= ctx.minLevel && this.level <= ctx.maxLevel;\n  },\n  updateStyles: function updateStyles() {\n    var isNode = Number(this.isNode());\n    this.state = this._buildState(this.ctx.settings[isNode].state, !isNode && this.color && {\n      fill: this.color\n    });\n  },\n  _buildState: function _buildState(state, extra) {\n    var base = _extend({}, state);\n\n    return extra ? _extend(base, extra) : base;\n  },\n  updateLabelStyle: function updateLabelStyle() {\n    var settings = this.ctx.settings[Number(this.isNode())];\n    this.labelState = settings.labelState;\n    this.labelParams = settings.labelParams;\n  },\n  _getState: function _getState() {\n    return this.state;\n  },\n  applyState: function applyState() {\n    updateTile[Number(this.isNode())](this.tile, this._getState());\n  }\n});\n\nfunction updateLeaf(content, attrs) {\n  content.smartAttr(attrs);\n}\n\nfunction updateGroup(content, attrs) {\n  content.outer.attr({\n    stroke: attrs.stroke,\n    \"stroke-width\": attrs[\"stroke-width\"],\n    \"stroke-opacity\": attrs[\"stroke-opacity\"]\n  });\n  content.inner.smartAttr({\n    fill: attrs.fill,\n    opacity: attrs.opacity,\n    hatching: attrs.hatching\n  });\n}\n\nexport default Node;","map":null,"metadata":{},"sourceType":"module"}