{"ast":null,"code":"import _toConsumableArray from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.item_list.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { extend } from \"../../core/utils/extend\";\nimport { when } from \"../../core/utils/deferred\";\nimport { name as dblClickName } from \"../../events/double_click\";\nimport { addNamespace } from \"../../events/utils/index\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { getImageContainer } from \"../../core/utils/icon\";\nimport devices from \"../../core/devices\";\nimport CustomStore from \"../../data/custom_store\";\nimport Widget from \"../widget/ui.widget\";\nvar FILE_MANAGER_FILES_VIEW_CLASS = \"dx-filemanager-files-view\";\nvar FILE_MANAGER_ITEM_LIST_ITEM_OPEN_EVENT_NAMESPACE = \"dxFileManager_open\";\n\nvar FileManagerItemListBase = /*#__PURE__*/function (_Widget) {\n  _inherits(FileManagerItemListBase, _Widget);\n\n  var _super = _createSuper(FileManagerItemListBase);\n\n  function FileManagerItemListBase() {\n    _classCallCheck(this, FileManagerItemListBase);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FileManagerItemListBase, [{\n    key: \"_init\",\n    value: function _init() {\n      this._initActions();\n\n      this._lockFocusedItemProcessing = false;\n      this._focusedItemKey = this.option(\"focusedItemKey\");\n\n      _get(_getPrototypeOf(FileManagerItemListBase.prototype), \"_init\", this).call(this);\n    }\n  }, {\n    key: \"_initMarkup\",\n    value: function _initMarkup() {\n      this.$element().addClass(FILE_MANAGER_FILES_VIEW_CLASS);\n      var dblClickEventName = addNamespace(dblClickName, FILE_MANAGER_ITEM_LIST_ITEM_OPEN_EVENT_NAMESPACE);\n      eventsEngine.on(this.$element(), dblClickEventName, this._getItemSelector(), this._onItemDblClick.bind(this));\n\n      _get(_getPrototypeOf(FileManagerItemListBase.prototype), \"_initMarkup\", this).call(this);\n    }\n  }, {\n    key: \"_initActions\",\n    value: function _initActions() {\n      this._actions = {\n        onError: this._createActionByOption(\"onError\"),\n        onSelectionChanged: this._createActionByOption(\"onSelectionChanged\"),\n        onFocusedItemChanged: this._createActionByOption(\"onFocusedItemChanged\"),\n        onSelectedItemOpened: this._createActionByOption(\"onSelectedItemOpened\"),\n        onContextMenuShowing: this._createActionByOption(\"onContextMenuShowing\")\n      };\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function _getDefaultOptions() {\n      return extend(_get(_getPrototypeOf(FileManagerItemListBase.prototype), \"_getDefaultOptions\", this).call(this), {\n        selectionMode: \"single\",\n        selectedItemKeys: [],\n        focusedItemKey: void 0,\n        contextMenu: null,\n        getItems: null,\n        getItemThumbnail: null,\n        onError: null,\n        onSelectionChanged: null,\n        onFocusedItemChanged: null,\n        onSelectedItemOpened: null,\n        onContextMenuShowing: null\n      });\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function _optionChanged(args) {\n      var name = args.name;\n\n      switch (name) {\n        case \"selectionMode\":\n        case \"contextMenu\":\n        case \"getItems\":\n        case \"getItemThumbnail\":\n          this.repaint();\n          break;\n\n        case \"selectedItemKeys\":\n          this._setSelectedItemKeys(args.value);\n\n          break;\n\n        case \"focusedItemKey\":\n          if (!this._lockFocusedItemProcessing) {\n            this._setFocusedItemKey(args.value);\n          }\n\n          break;\n\n        case \"onError\":\n        case \"onSelectedItemOpened\":\n        case \"onSelectionChanged\":\n        case \"onFocusedItemChanged\":\n        case \"onContextMenuShowing\":\n          this._actions[name] = this._createActionByOption(name);\n          break;\n\n        default:\n          _get(_getPrototypeOf(FileManagerItemListBase.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }, {\n    key: \"_getItems\",\n    value: function _getItems() {\n      var _this = this;\n\n      return this._getItemsInternal().done(function (itemInfos) {\n        _this._itemCount = itemInfos.length;\n\n        if (0 === _this._itemCount) {\n          _this._resetFocus();\n        }\n\n        var parentDirectoryItem = _this._findParentDirectoryItem(itemInfos);\n\n        _this._hasParentDirectoryItem = !!parentDirectoryItem;\n        _this._parentDirectoryItemKey = parentDirectoryItem ? parentDirectoryItem.fileItem.key : null;\n      });\n    }\n  }, {\n    key: \"_getItemsInternal\",\n    value: function _getItemsInternal() {\n      var itemsGetter = this.option(\"getItems\");\n      var itemsResult = itemsGetter ? itemsGetter() : [];\n      return when(itemsResult);\n    }\n  }, {\n    key: \"_raiseOnError\",\n    value: function _raiseOnError(error) {\n      this._actions.onError({\n        error: error\n      });\n    }\n  }, {\n    key: \"_raiseSelectionChanged\",\n    value: function _raiseSelectionChanged(args) {\n      this._actions.onSelectionChanged(args);\n    }\n  }, {\n    key: \"_raiseFocusedItemChanged\",\n    value: function _raiseFocusedItemChanged(args) {\n      this._actions.onFocusedItemChanged(args);\n    }\n  }, {\n    key: \"_raiseSelectedItemOpened\",\n    value: function _raiseSelectedItemOpened(fileItemInfo) {\n      this._actions.onSelectedItemOpened({\n        fileItemInfo: fileItemInfo\n      });\n    }\n  }, {\n    key: \"_raiseContextMenuShowing\",\n    value: function _raiseContextMenuShowing(e) {\n      this._actions.onContextMenuShowing(e);\n    }\n  }, {\n    key: \"_tryRaiseSelectionChanged\",\n    value: function _tryRaiseSelectionChanged(_ref) {\n      var _this2 = this;\n\n      var selectedItemInfos = _ref.selectedItemInfos,\n          selectedItems = _ref.selectedItems,\n          selectedItemKeys = _ref.selectedItemKeys,\n          currentSelectedItemKeys = _ref.currentSelectedItemKeys,\n          currentDeselectedItemKeys = _ref.currentDeselectedItemKeys;\n\n      var parentDirectoryItem = this._findParentDirectoryItem(this.getSelectedItems());\n\n      if (parentDirectoryItem) {\n        this._deselectItem(parentDirectoryItem);\n      }\n\n      var raiseEvent = !this._hasParentDirectoryItem;\n      raiseEvent = raiseEvent || this._hasValidKeys(currentSelectedItemKeys) || this._hasValidKeys(currentDeselectedItemKeys);\n\n      if (raiseEvent) {\n        selectedItemInfos = this._filterOutItemByPredicate(selectedItemInfos, function (item) {\n          return item.fileItem.key === _this2._parentDirectoryItemKey;\n        });\n        selectedItems = this._filterOutParentDirectory(selectedItems);\n        selectedItemKeys = this._filterOutParentDirectoryKey(selectedItemKeys, true);\n        currentSelectedItemKeys = this._filterOutParentDirectoryKey(currentSelectedItemKeys, true);\n        currentDeselectedItemKeys = this._filterOutParentDirectoryKey(currentDeselectedItemKeys, true);\n\n        this._raiseSelectionChanged({\n          selectedItemInfos: selectedItemInfos,\n          selectedItems: selectedItems,\n          selectedItemKeys: selectedItemKeys,\n          currentSelectedItemKeys: currentSelectedItemKeys,\n          currentDeselectedItemKeys: currentDeselectedItemKeys\n        });\n      }\n    }\n  }, {\n    key: \"_onFocusedItemChanged\",\n    value: function _onFocusedItemChanged(args) {\n      if (this._focusedItemKey === args.itemKey) {\n        return;\n      }\n\n      this._focusedItemKey = args.itemKey;\n      this._lockFocusedItemProcessing = true;\n      this.option(\"focusedItemKey\", args.itemKey);\n      this._lockFocusedItemProcessing = false;\n\n      this._raiseFocusedItemChanged(args);\n    }\n  }, {\n    key: \"_resetFocus\",\n    value: function _resetFocus() {}\n  }, {\n    key: \"_getItemThumbnail\",\n    value: function _getItemThumbnail(fileInfo) {\n      var itemThumbnailGetter = this.option(\"getItemThumbnail\");\n      return itemThumbnailGetter ? itemThumbnailGetter(fileInfo) : {\n        thumbnail: \"\"\n      };\n    }\n  }, {\n    key: \"_getItemThumbnailContainer\",\n    value: function _getItemThumbnailContainer(fileInfo) {\n      var _this$_getItemThumbna = this._getItemThumbnail(fileInfo),\n          thumbnail = _this$_getItemThumbna.thumbnail,\n          cssClass = _this$_getItemThumbna.cssClass;\n\n      var $itemThumbnail = getImageContainer(thumbnail).addClass(this._getItemThumbnailCssClass());\n\n      if (cssClass) {\n        $itemThumbnail.addClass(cssClass);\n      }\n\n      return $itemThumbnail;\n    }\n  }, {\n    key: \"_getItemThumbnailCssClass\",\n    value: function _getItemThumbnailCssClass() {\n      return \"\";\n    }\n  }, {\n    key: \"_getItemSelector\",\n    value: function _getItemSelector() {}\n  }, {\n    key: \"_onItemDblClick\",\n    value: function _onItemDblClick(e) {}\n  }, {\n    key: \"_isDesktop\",\n    value: function _isDesktop() {\n      return \"desktop\" === devices.real().deviceType;\n    }\n  }, {\n    key: \"_showContextMenu\",\n    value: function _showContextMenu(items, element, event, target) {\n      this._contextMenu.showAt(items, element, event, target);\n    }\n  }, {\n    key: \"_contextMenu\",\n    get: function get() {\n      return this.option(\"contextMenu\");\n    }\n  }, {\n    key: \"_findParentDirectoryItem\",\n    value: function _findParentDirectoryItem(itemInfos) {\n      for (var i = 0; i < itemInfos.length; i++) {\n        var itemInfo = itemInfos[i];\n\n        if (this._isParentDirectoryItem(itemInfo)) {\n          return itemInfo;\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_getFileItemsForContextMenu\",\n    value: function _getFileItemsForContextMenu(fileItem) {\n      var result = this.getSelectedItems();\n\n      if (this._isParentDirectoryItem(fileItem)) {\n        result.push(fileItem);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_isParentDirectoryItem\",\n    value: function _isParentDirectoryItem(itemInfo) {\n      return itemInfo.fileItem.isParentFolder;\n    }\n  }, {\n    key: \"_hasValidKeys\",\n    value: function _hasValidKeys(keys) {\n      return keys.length > 1 || 1 === keys.length && keys[0] !== this._parentDirectoryItemKey;\n    }\n  }, {\n    key: \"_filterOutParentDirectory\",\n    value: function _filterOutParentDirectory(array, createNewArray) {\n      var _this3 = this;\n\n      return this._filterOutItemByPredicate(array, function (item) {\n        return item.key === _this3._parentDirectoryItemKey;\n      }, createNewArray);\n    }\n  }, {\n    key: \"_filterOutParentDirectoryKey\",\n    value: function _filterOutParentDirectoryKey(array, createNewArray) {\n      var _this4 = this;\n\n      return this._filterOutItemByPredicate(array, function (key) {\n        return key === _this4._parentDirectoryItemKey;\n      }, createNewArray);\n    }\n  }, {\n    key: \"_filterOutItemByPredicate\",\n    value: function _filterOutItemByPredicate(array, predicate, createNewArray) {\n      var result = array;\n      var index = -1;\n\n      for (var i = 0; i < array.length; i++) {\n        if (predicate(array[i])) {\n          index = i;\n          break;\n        }\n      }\n\n      if (-1 !== index) {\n        if (createNewArray) {\n          result = _toConsumableArray(array);\n        }\n\n        result.splice(index, 1);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_isMultipleSelectionMode\",\n    value: function _isMultipleSelectionMode() {\n      return \"multiple\" === this.option(\"selectionMode\");\n    }\n  }, {\n    key: \"_deselectItem\",\n    value: function _deselectItem(item) {}\n  }, {\n    key: \"_setSelectedItemKeys\",\n    value: function _setSelectedItemKeys(itemKeys) {}\n  }, {\n    key: \"_setFocusedItemKey\",\n    value: function _setFocusedItemKey(itemKey) {}\n  }, {\n    key: \"_createDataSource\",\n    value: function _createDataSource() {\n      return {\n        store: new CustomStore({\n          key: \"fileItem.key\",\n          load: this._getItems.bind(this)\n        })\n      };\n    }\n  }, {\n    key: \"getSelectedItems\",\n    value: function getSelectedItems() {}\n  }, {\n    key: \"clearSelection\",\n    value: function clearSelection() {}\n  }, {\n    key: \"selectItem\",\n    value: function selectItem() {}\n  }]);\n\n  return FileManagerItemListBase;\n}(Widget);\n\nexport default FileManagerItemListBase;","map":null,"metadata":{},"sourceType":"module"}