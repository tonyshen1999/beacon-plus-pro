{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/view_model/view_data_generator_month.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getToday, setOptionHour } from \"../../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\nimport { ViewDataGenerator } from \"./view_data_generator\";\nimport dateUtils from \"../../../../core/utils/date\";\nimport { calculateCellIndex, calculateStartViewDate, getCellText, isFirstCellInMonthWithIntervalCount, getViewStartByOptions } from \"../../../../renovation/ui/scheduler/view_model/to_test/views/utils/month\";\nvar DAY_IN_MILLISECONDS = dateUtils.dateToMilliseconds(\"day\");\nvar DAYS_IN_WEEK = 7;\nvar WEEKS_IN_MONTH = 4;\nexport var ViewDataGeneratorMonth = /*#__PURE__*/function (_ViewDataGenerator) {\n  _inherits(ViewDataGeneratorMonth, _ViewDataGenerator);\n\n  var _super = _createSuper(ViewDataGeneratorMonth);\n\n  function ViewDataGeneratorMonth() {\n    _classCallCheck(this, ViewDataGeneratorMonth);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ViewDataGeneratorMonth, [{\n    key: \"tableAllDay\",\n    get: function get() {\n      return;\n    }\n  }, {\n    key: \"getCellData\",\n    value: function getCellData(rowIndex, columnIndex, options, allDay) {\n      var data = _get(_getPrototypeOf(ViewDataGeneratorMonth.prototype), \"getCellData\", this).call(this, rowIndex, columnIndex, options, false);\n\n      var startDate = data.startDate;\n      var indicatorTime = options.indicatorTime,\n          timeZoneCalculator = options.timeZoneCalculator,\n          intervalCount = options.intervalCount;\n      data.today = this.isCurrentDate(startDate, indicatorTime, timeZoneCalculator);\n      data.otherMonth = this.isOtherMonth(startDate, this._minVisibleDate, this._maxVisibleDate);\n      data.firstDayOfMonth = isFirstCellInMonthWithIntervalCount(startDate, intervalCount);\n      data.text = getCellText(startDate, intervalCount);\n      return data;\n    }\n  }, {\n    key: \"isCurrentDate\",\n    value: function isCurrentDate(date, indicatorTime, timeZoneCalculator) {\n      return dateUtils.sameDate(date, getToday(indicatorTime, timeZoneCalculator));\n    }\n  }, {\n    key: \"isOtherMonth\",\n    value: function isOtherMonth(cellDate, minDate, maxDate) {\n      return !dateUtils.dateInRange(cellDate, minDate, maxDate, \"date\");\n    }\n  }, {\n    key: \"_calculateCellIndex\",\n    value: function _calculateCellIndex(rowIndex, columnIndex, rowCount, columnCount) {\n      return calculateCellIndex(rowIndex, columnIndex, rowCount, columnCount);\n    }\n  }, {\n    key: \"calculateEndDate\",\n    value: function calculateEndDate(startDate, interval, endDayHour) {\n      return setOptionHour(startDate, endDayHour);\n    }\n  }, {\n    key: \"getInterval\",\n    value: function getInterval() {\n      return DAY_IN_MILLISECONDS;\n    }\n  }, {\n    key: \"_calculateStartViewDate\",\n    value: function _calculateStartViewDate(options) {\n      return calculateStartViewDate(options.currentDate, options.startDayHour, options.startDate, options.intervalCount, this.getFirstDayOfWeek(options.firstDayOfWeek));\n    }\n  }, {\n    key: \"_setVisibilityDates\",\n    value: function _setVisibilityDates(options) {\n      var intervalCount = options.intervalCount,\n          startDate = options.startDate,\n          currentDate = options.currentDate;\n      var firstMonthDate = dateUtils.getFirstMonthDate(startDate);\n      var viewStart = getViewStartByOptions(startDate, currentDate, intervalCount, firstMonthDate);\n      this._minVisibleDate = new Date(viewStart.setDate(1));\n      var nextMonthDate = new Date(viewStart.setMonth(viewStart.getMonth() + intervalCount));\n      this._maxVisibleDate = new Date(nextMonthDate.setDate(0));\n    }\n  }, {\n    key: \"getCellCount\",\n    value: function getCellCount() {\n      return DAYS_IN_WEEK;\n    }\n  }, {\n    key: \"getRowCount\",\n    value: function getRowCount(options) {\n      return WEEKS_IN_MONTH * options.intervalCount + 2;\n    }\n  }, {\n    key: \"getCellCountInDay\",\n    value: function getCellCountInDay() {\n      return 1;\n    }\n  }, {\n    key: \"setHiddenInterval\",\n    value: function setHiddenInterval() {\n      this.hiddenInterval = 0;\n    }\n  }]);\n\n  return ViewDataGeneratorMonth;\n}(ViewDataGenerator);","map":null,"metadata":{},"sourceType":"module"}