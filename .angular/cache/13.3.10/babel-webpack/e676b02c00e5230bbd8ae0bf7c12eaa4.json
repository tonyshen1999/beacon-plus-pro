{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.file_uploader.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getInnerHeight, setHeight, setWidth } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport { Deferred } from \"../../core/utils/deferred\";\nimport { hasWindow } from \"../../core/utils/window\";\nimport Guid from \"../../core/guid\";\nimport Widget from \"../widget/ui.widget\";\nimport FileUploader from \"../file_uploader\";\nimport { whenSome } from \"./ui.file_manager.common\";\nvar FILE_MANAGER_FILE_UPLOADER_CLASS = \"dx-filemanager-fileuploader\";\nvar FILE_MANAGER_FILE_UPLOADER_DROPZONE_PLACEHOLER_CLASS = \"dx-filemanager-fileuploader-dropzone-placeholder\";\n\nvar FileManagerFileUploader = /*#__PURE__*/function (_Widget) {\n  _inherits(FileManagerFileUploader, _Widget);\n\n  var _super = _createSuper(FileManagerFileUploader);\n\n  function FileManagerFileUploader() {\n    _classCallCheck(this, FileManagerFileUploader);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FileManagerFileUploader, [{\n    key: \"_initMarkup\",\n    value: function _initMarkup() {\n      this._initActions();\n\n      this.$element().addClass(FILE_MANAGER_FILE_UPLOADER_CLASS);\n      this._uploaderInfos = [];\n\n      this._createInternalFileUploader();\n\n      this._createDropZonePlaceholder();\n\n      this._setDropZonePlaceholderVisible(false);\n\n      _get(_getPrototypeOf(FileManagerFileUploader.prototype), \"_initMarkup\", this).call(this);\n    }\n  }, {\n    key: \"_createInternalFileUploader\",\n    value: function _createInternalFileUploader() {\n      var _this = this;\n\n      var chunkSize = this._getController().chunkSize;\n\n      var $fileUploader = $(\"<div>\").appendTo(this.$element());\n\n      var fileUploader = this._createComponent($fileUploader, FileUploader, {\n        name: \"file\",\n        multiple: true,\n        showFileList: false,\n        activeStateEnabled: false,\n        focusStateEnabled: false,\n        hoverStateEnabled: false,\n        labelText: \"\",\n        readyToUploadMessage: \"\",\n        accept: \"*\",\n        chunkSize: chunkSize,\n        dropZone: this.option(\"dropZone\"),\n        onValueChanged: function onValueChanged(e) {\n          return _this._onFileUploaderValueChanged(e);\n        },\n        onProgress: function onProgress(e) {\n          return _this._onFileUploaderProgress(e);\n        },\n        onUploaded: function onUploaded(e) {\n          return _this._onFileUploaderUploaded(e);\n        },\n        onUploadAborted: function onUploadAborted(e) {\n          return _this._onFileUploaderUploadAborted(e);\n        },\n        onUploadError: function onUploadError(e) {\n          return _this._onFileUploaderUploadError(e);\n        },\n        onDropZoneEnter: function onDropZoneEnter() {\n          return _this._setDropZonePlaceholderVisible(true);\n        },\n        onDropZoneLeave: function onDropZoneLeave() {\n          return _this._setDropZonePlaceholderVisible(false);\n        }\n      });\n\n      fileUploader.option({\n        uploadChunk: function uploadChunk(file, chunksData) {\n          return _this._fileUploaderUploadChunk(fileUploader, file, chunksData);\n        },\n        abortUpload: function abortUpload(file, chunksData) {\n          return _this._fileUploaderAbortUpload(fileUploader, file, chunksData);\n        }\n      });\n      fileUploader._shouldRaiseDragLeaveBase = fileUploader._shouldRaiseDragLeave;\n\n      fileUploader._shouldRaiseDragLeave = function (e) {\n        return _this._shouldRaiseDragLeave(e, fileUploader);\n      };\n\n      var uploaderInfo = {\n        fileUploader: fileUploader\n      };\n\n      this._uploaderInfos.push(uploaderInfo);\n    }\n  }, {\n    key: \"tryUpload\",\n    value: function tryUpload() {\n      var info = this._findAndUpdateAvailableUploaderInfo();\n\n      if (info) {\n        info.fileUploader._selectButtonClickHandler();\n      }\n    }\n  }, {\n    key: \"cancelUpload\",\n    value: function cancelUpload(sessionId) {\n      this._cancelUpload(sessionId);\n    }\n  }, {\n    key: \"cancelFileUpload\",\n    value: function cancelFileUpload(sessionId, fileIndex) {\n      this._cancelUpload(sessionId, fileIndex);\n    }\n  }, {\n    key: \"_cancelUpload\",\n    value: function _cancelUpload(sessionId, fileIndex) {\n      var _this$_findUploaderIn = this._findUploaderInfoBySessionId(sessionId),\n          fileUploader = _this$_findUploaderIn.fileUploader;\n\n      fileUploader.abortUpload(fileIndex);\n    }\n  }, {\n    key: \"_fileUploaderUploadChunk\",\n    value: function _fileUploaderUploadChunk(fileUploader, file, chunksInfo) {\n      var _this$_findSessionByF = this._findSessionByFile(fileUploader, file),\n          session = _this$_findSessionByF.session,\n          fileIndex = _this$_findSessionByF.fileIndex;\n\n      var controller = session.controller;\n      chunksInfo.fileIndex = fileIndex;\n      return controller.uploadFileChunk(file, chunksInfo);\n    }\n  }, {\n    key: \"_fileUploaderAbortUpload\",\n    value: function _fileUploaderAbortUpload(fileUploader, file, chunksInfo) {\n      var _this$_findSessionByF2 = this._findSessionByFile(fileUploader, file),\n          session = _this$_findSessionByF2.session,\n          fileIndex = _this$_findSessionByF2.fileIndex;\n\n      var controller = session.controller;\n      chunksInfo.fileIndex = fileIndex;\n      return controller.abortFileUpload(file, chunksInfo);\n    }\n  }, {\n    key: \"_onFileUploaderValueChanged\",\n    value: function _onFileUploaderValueChanged(_ref) {\n      var _this2 = this;\n\n      var component = _ref.component,\n          value = _ref.value;\n\n      if (0 === value.length) {\n        return;\n      }\n\n      var files = value.slice();\n\n      var uploaderInfo = this._findUploaderInfo(component);\n\n      this._uploadFiles(uploaderInfo, files);\n\n      setTimeout(function () {\n        if (!_this2._findAndUpdateAvailableUploaderInfo()) {\n          _this2._createInternalFileUploader();\n        }\n      });\n    }\n  }, {\n    key: \"_onFileUploaderProgress\",\n    value: function _onFileUploaderProgress(_ref2) {\n      var component = _ref2.component,\n          file = _ref2.file,\n          bytesLoaded = _ref2.bytesLoaded,\n          bytesTotal = _ref2.bytesTotal;\n\n      var _this$_findSessionByF3 = this._findSessionByFile(component, file),\n          session = _this$_findSessionByF3.session,\n          fileIndex = _this$_findSessionByF3.fileIndex;\n\n      var fileValue = 0 !== bytesTotal ? bytesLoaded / bytesTotal : 1;\n      var commonValue = component.option(\"progress\") / 100;\n      var args = {\n        sessionId: session.id,\n        fileIndex: fileIndex,\n        commonValue: commonValue,\n        fileValue: fileValue\n      };\n\n      this._raiseUploadProgress(args);\n    }\n  }, {\n    key: \"_onFileUploaderUploaded\",\n    value: function _onFileUploaderUploaded(_ref3) {\n      var component = _ref3.component,\n          file = _ref3.file;\n\n      var deferred = this._getDeferredForFile(component, file);\n\n      deferred.resolve();\n    }\n  }, {\n    key: \"_onFileUploaderUploadAborted\",\n    value: function _onFileUploaderUploadAborted(_ref4) {\n      var component = _ref4.component,\n          file = _ref4.file;\n\n      var deferred = this._getDeferredForFile(component, file);\n\n      deferred.resolve({\n        canceled: true\n      });\n    }\n  }, {\n    key: \"_onFileUploaderUploadError\",\n    value: function _onFileUploaderUploadError(_ref5) {\n      var component = _ref5.component,\n          file = _ref5.file,\n          error = _ref5.error;\n\n      var deferred = this._getDeferredForFile(component, file);\n\n      deferred.reject(error);\n    }\n  }, {\n    key: \"_createDropZonePlaceholder\",\n    value: function _createDropZonePlaceholder() {\n      this._$dropZonePlaceholder = $(\"<div>\").addClass(FILE_MANAGER_FILE_UPLOADER_DROPZONE_PLACEHOLER_CLASS).appendTo(this.option(\"dropZonePlaceholderContainer\"));\n    }\n  }, {\n    key: \"_adjustDropZonePlaceholder\",\n    value: function _adjustDropZonePlaceholder() {\n      var $dropZoneTarget = this.option(\"dropZone\");\n\n      if (!hasWindow() || 0 === $dropZoneTarget.length) {\n        return;\n      }\n\n      var placeholderBorderTopWidth = parseFloat(this._$dropZonePlaceholder.css(\"borderTopWidth\"));\n      var placeholderBorderLeftWidth = parseFloat(this._$dropZonePlaceholder.css(\"borderLeftWidth\"));\n      var $placeholderContainer = this.option(\"dropZonePlaceholderContainer\");\n      var containerBorderBottomWidth = parseFloat($placeholderContainer.css(\"borderBottomWidth\"));\n      var containerBorderLeftWidth = parseFloat($placeholderContainer.css(\"borderLeftWidth\"));\n      var containerHeight = getInnerHeight($placeholderContainer);\n      var containerOffset = $placeholderContainer.offset();\n      var dropZoneOffset = $dropZoneTarget.offset();\n\n      this._$dropZonePlaceholder.css({\n        top: dropZoneOffset.top - containerOffset.top - containerHeight - containerBorderBottomWidth,\n        left: dropZoneOffset.left - containerOffset.left - containerBorderLeftWidth\n      });\n\n      setHeight(this._$dropZonePlaceholder, $dropZoneTarget.get(0).offsetHeight - 2 * placeholderBorderTopWidth);\n      setWidth(this._$dropZonePlaceholder, $dropZoneTarget.get(0).offsetWidth - 2 * placeholderBorderLeftWidth);\n    }\n  }, {\n    key: \"_setDropZonePlaceholderVisible\",\n    value: function _setDropZonePlaceholderVisible(visible) {\n      if (visible) {\n        this._adjustDropZonePlaceholder();\n\n        this._$dropZonePlaceholder.css(\"display\", \"\");\n      } else {\n        this._$dropZonePlaceholder.css(\"display\", \"none\");\n      }\n    }\n  }, {\n    key: \"_shouldRaiseDragLeave\",\n    value: function _shouldRaiseDragLeave(e, uploaderInstance) {\n      return uploaderInstance.isMouseOverElement(e, this.option(\"splitterElement\")) || uploaderInstance._shouldRaiseDragLeaveBase(e, true);\n    }\n  }, {\n    key: \"_uploadFiles\",\n    value: function _uploadFiles(uploaderInfo, files) {\n      this._setDropZonePlaceholderVisible(false);\n\n      var sessionId = new Guid().toString();\n\n      var controller = this._getController();\n\n      var deferreds = files.map(function () {\n        return new Deferred();\n      });\n      var session = {\n        id: sessionId,\n        controller: controller,\n        files: files,\n        deferreds: deferreds\n      };\n      uploaderInfo.session = session;\n      var sessionInfo = {\n        sessionId: sessionId,\n        deferreds: deferreds,\n        files: files\n      };\n\n      this._raiseUploadSessionStarted(sessionInfo);\n\n      return whenSome(deferreds).always(function () {\n        return setTimeout(function () {\n          uploaderInfo.fileUploader.reset();\n          uploaderInfo.session = null;\n        });\n      });\n    }\n  }, {\n    key: \"_getDeferredForFile\",\n    value: function _getDeferredForFile(fileUploader, file) {\n      var _this$_findSessionByF4 = this._findSessionByFile(fileUploader, file),\n          session = _this$_findSessionByF4.session,\n          fileIndex = _this$_findSessionByF4.fileIndex;\n\n      return session.deferreds[fileIndex];\n    }\n  }, {\n    key: \"_findSessionByFile\",\n    value: function _findSessionByFile(fileUploader, file) {\n      var uploaderInfo = this._findUploaderInfo(fileUploader);\n\n      var session = uploaderInfo.session;\n      var fileIndex = session.files.indexOf(file);\n      return {\n        session: session,\n        fileIndex: fileIndex\n      };\n    }\n  }, {\n    key: \"_findUploaderInfoBySessionId\",\n    value: function _findUploaderInfoBySessionId(sessionId) {\n      for (var i = 0; i < this._uploaderInfos.length; i++) {\n        var uploaderInfo = this._uploaderInfos[i];\n        var session = uploaderInfo.session;\n\n        if (session && session.id === sessionId) {\n          return uploaderInfo;\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_findAndUpdateAvailableUploaderInfo\",\n    value: function _findAndUpdateAvailableUploaderInfo() {\n      var _info;\n\n      var info = null;\n\n      for (var i = 0; i < this._uploaderInfos.length; i++) {\n        var currentInfo = this._uploaderInfos[i];\n        currentInfo.fileUploader.option(\"dropZone\", \"\");\n\n        if (!info && !currentInfo.session) {\n          info = currentInfo;\n        }\n      }\n\n      null === (_info = info) || void 0 === _info ? void 0 : _info.fileUploader.option(\"dropZone\", this.option(\"dropZone\"));\n      return info;\n    }\n  }, {\n    key: \"_findUploaderInfo\",\n    value: function _findUploaderInfo(fileUploader) {\n      for (var i = 0; i < this._uploaderInfos.length; i++) {\n        var info = this._uploaderInfos[i];\n\n        if (info.fileUploader === fileUploader) {\n          return info;\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_getController\",\n    value: function _getController() {\n      var controllerGetter = this.option(\"getController\");\n      return controllerGetter();\n    }\n  }, {\n    key: \"_raiseUploadSessionStarted\",\n    value: function _raiseUploadSessionStarted(sessionInfo) {\n      this._actions.onUploadSessionStarted({\n        sessionInfo: sessionInfo\n      });\n    }\n  }, {\n    key: \"_raiseUploadProgress\",\n    value: function _raiseUploadProgress(args) {\n      this._actions.onUploadProgress(args);\n    }\n  }, {\n    key: \"_initActions\",\n    value: function _initActions() {\n      this._actions = {\n        onUploadSessionStarted: this._createActionByOption(\"onUploadSessionStarted\"),\n        onUploadProgress: this._createActionByOption(\"onUploadProgress\")\n      };\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function _getDefaultOptions() {\n      return extend(_get(_getPrototypeOf(FileManagerFileUploader.prototype), \"_getDefaultOptions\", this).call(this), {\n        getController: null,\n        onUploadSessionStarted: null,\n        onUploadProgress: null,\n        splitterElement: null\n      });\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function _optionChanged(args) {\n      var name = args.name;\n\n      switch (name) {\n        case \"getController\":\n          this.repaint();\n          break;\n\n        case \"onUploadSessionStarted\":\n        case \"onUploadProgress\":\n          this._actions[name] = this._createActionByOption(name);\n          break;\n\n        case \"dropZone\":\n          this._findAndUpdateAvailableUploaderInfo();\n\n          this._adjustDropZonePlaceholder();\n\n          break;\n\n        case \"dropZonePlaceholderContainer\":\n          this._$dropZonePlaceholder.detach();\n\n          this._$dropZonePlaceholder.appendTo(args.value);\n\n          break;\n\n        case \"splitterElement\":\n          break;\n\n        default:\n          _get(_getPrototypeOf(FileManagerFileUploader.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }]);\n\n  return FileManagerFileUploader;\n}(Widget);\n\nexport default FileManagerFileUploader;","map":null,"metadata":{},"sourceType":"module"}