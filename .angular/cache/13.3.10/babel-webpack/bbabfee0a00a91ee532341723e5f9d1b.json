{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/shared/accessibility.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { normalizeKeyName } from \"../../events/utils/index\";\nimport { extend } from \"../../core/utils/extend\";\nimport domAdapter from \"../../core/dom_adapter\";\nimport { noop } from \"../../core/utils/common\";\nvar FOCUS_STATE_CLASS = \"dx-state-focused\";\nvar FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\nvar FOCUSED_ROW_SELECTOR = \".dx-row-focused\";\nvar GRID_ROW_SELECTOR = \".dx-datagrid-rowsview .dx-row\";\nvar GRID_CELL_SELECTOR = \"\".concat(GRID_ROW_SELECTOR, \" > td\");\nvar TREELIST_ROW_SELECTOR = \".dx-treelist-rowsview .dx-row\";\nvar TREELIST_CELL_SELECTOR = \"\".concat(TREELIST_ROW_SELECTOR, \" > td\");\nvar viewItemSelectorMap = {\n  groupPanel: [\".dx-datagrid-group-panel .dx-group-panel-item[tabindex]\"],\n  columnHeaders: [\".dx-datagrid-headers .dx-header-row > td.dx-datagrid-action\", \".dx-treelist-headers .dx-header-row > td.dx-treelist-action\"],\n  filterRow: [\".dx-datagrid-headers .dx-datagrid-filter-row .dx-editor-cell .dx-texteditor-input\", \".dx-treelist-headers .dx-treelist-filter-row .dx-editor-cell .dx-texteditor-input\"],\n  rowsView: [\"\".concat(FOCUSED_ROW_SELECTOR), \"\".concat(GRID_ROW_SELECTOR, \"[tabindex]\"), \"\".concat(GRID_CELL_SELECTOR, \"[tabindex]\"), \"\".concat(GRID_CELL_SELECTOR), \"\".concat(TREELIST_ROW_SELECTOR, \"[tabindex]\"), \"\".concat(TREELIST_CELL_SELECTOR, \"[tabindex]\"), \"\".concat(TREELIST_CELL_SELECTOR)],\n  footer: [\".dx-datagrid-total-footer .dx-datagrid-summary-item\", \".dx-treelist-total-footer .dx-treelist-summary-item\"],\n  filterPanel: [\".dx-datagrid-filter-panel .dx-icon-filter\", \".dx-treelist-filter-panel .dx-icon-filter\"],\n  pager: [\".dx-datagrid-pager [tabindex]\", \".dx-treelist-pager [tabindex]\"]\n};\nvar isMouseDown = false;\nvar isHiddenFocusing = false;\nvar focusedElementInfo = null;\n\nfunction processKeyDown(viewName, instance, event, action, $mainElement, executeKeyDown) {\n  var isHandled = fireKeyDownEvent(instance, event.originalEvent, executeKeyDown);\n\n  if (isHandled) {\n    return;\n  }\n\n  var keyName = normalizeKeyName(event);\n\n  if (\"enter\" === keyName || \"space\" === keyName) {\n    saveFocusedElementInfo(event.target, instance);\n    action && action({\n      event: event\n    });\n  } else if (\"tab\" === keyName) {\n    $mainElement.addClass(FOCUS_STATE_CLASS);\n  } else {\n    selectView(viewName, instance, event);\n  }\n}\n\nfunction saveFocusedElementInfo(target, instance) {\n  var $target = $(target);\n  var ariaLabel = $target.attr(\"aria-label\");\n  var $activeElements = getActiveAccessibleElements(ariaLabel, instance.element());\n  var targetIndex = $activeElements.index($target);\n  focusedElementInfo = extend({}, {\n    ariaLabel: ariaLabel,\n    index: targetIndex\n  }, {\n    viewInstance: instance\n  });\n}\n\nfunction getActiveAccessibleElements(ariaLabel, viewElement) {\n  var $viewElement = $(viewElement);\n  var $activeElements;\n\n  if (ariaLabel) {\n    $activeElements = $viewElement.find('[aria-label=\"'.concat(ariaLabel, '\"][tabindex]'));\n  } else {\n    $activeElements = $viewElement.find(\"[tabindex]\");\n  }\n\n  return $activeElements;\n}\n\nfunction findFocusedViewElement(viewSelectors) {\n  for (var index in viewSelectors) {\n    var selector = viewSelectors[index];\n    var $focusViewElement = $(selector).first();\n\n    if ($focusViewElement.length) {\n      return $focusViewElement;\n    }\n  }\n}\n\nfunction fireKeyDownEvent(instance, event, executeAction) {\n  var args = {\n    event: event,\n    handled: false\n  };\n\n  if (executeAction) {\n    executeAction(args);\n  } else {\n    instance._createActionByOption(\"onKeyDown\")(args);\n  }\n\n  return args.handled;\n}\n\nfunction onDocumentVisibilityChange() {\n  isHiddenFocusing = \"visible\" === domAdapter.getDocument().visibilityState;\n}\n\nexport function subscribeVisibilityChange() {\n  eventsEngine.on(domAdapter.getDocument(), \"visibilitychange\", onDocumentVisibilityChange);\n}\nexport function unsubscribeVisibilityChange() {\n  eventsEngine.off(domAdapter.getDocument(), \"visibilitychange\", onDocumentVisibilityChange);\n}\nexport function hiddenFocus(element) {\n  isHiddenFocusing = true;\n  element.focus();\n  isHiddenFocusing = false;\n}\nexport function registerKeyboardAction(viewName, instance, $element, selector, action, executeKeyDown) {\n  if (instance.option(\"useLegacyKeyboardNavigation\")) {\n    return noop;\n  }\n\n  var getMainElement = function getMainElement() {\n    return $(instance.element());\n  };\n\n  var keyDownHandler = function keyDownHandler(e) {\n    return processKeyDown(viewName, instance, e, action, getMainElement(), executeKeyDown);\n  };\n\n  var mouseDownHandler = function mouseDownHandler() {\n    isMouseDown = true;\n    getMainElement().removeClass(FOCUS_STATE_CLASS);\n  };\n\n  var focusinHandler = function focusinHandler() {\n    var needShowOverlay = !isMouseDown && !isHiddenFocusing;\n\n    if (needShowOverlay) {\n      getMainElement().addClass(FOCUS_STATE_CLASS);\n    }\n\n    isMouseDown = false;\n  };\n\n  eventsEngine.on($element, \"keydown\", selector, keyDownHandler);\n  eventsEngine.on($element, \"mousedown\", selector, mouseDownHandler);\n  eventsEngine.on($element, \"focusin\", selector, focusinHandler);\n  return function () {\n    eventsEngine.off($element, \"keydown\", selector, keyDownHandler);\n    eventsEngine.off($element, \"mousedown\", selector, mouseDownHandler);\n    eventsEngine.off($element, \"focusin\", selector, focusinHandler);\n  };\n}\nexport function restoreFocus(instance) {\n  if (!instance.option(\"useLegacyKeyboardNavigation\") && focusedElementInfo) {\n    var viewInstance = focusedElementInfo.viewInstance;\n\n    if (viewInstance) {\n      var $activeElements = getActiveAccessibleElements(focusedElementInfo.ariaLabel, viewInstance.element());\n      var $targetElement = $activeElements.eq(focusedElementInfo.index);\n      focusedElementInfo = null;\n      eventsEngine.trigger($targetElement, \"focus\");\n    }\n  }\n}\nexport function selectView(viewName, instance, event) {\n  var keyName = normalizeKeyName(event);\n\n  if (event.ctrlKey && (\"upArrow\" === keyName || \"downArrow\" === keyName)) {\n    var viewNames = Object.keys(viewItemSelectorMap);\n    var viewItemIndex = viewNames.indexOf(viewName);\n\n    while (viewItemIndex >= 0 && viewItemIndex < viewNames.length) {\n      viewItemIndex = \"upArrow\" === keyName ? --viewItemIndex : ++viewItemIndex;\n      var _viewName = viewNames[viewItemIndex];\n      var viewSelectors = viewItemSelectorMap[_viewName];\n      var $focusViewElement = findFocusedViewElement(viewSelectors);\n\n      if ($focusViewElement && $focusViewElement.length) {\n        $focusViewElement.attr(\"tabindex\", instance.option(\"tabindex\") || 0);\n        eventsEngine.trigger($focusViewElement, \"focus\");\n        $focusViewElement.removeClass(FOCUS_DISABLED_CLASS);\n        break;\n      }\n    }\n  }\n}\nexport function setTabIndex(instance, $element) {\n  if (!instance.option(\"useLegacyKeyboardnavigation\")) {\n    $element.attr(\"tabindex\", instance.option(\"tabindex\") || 0);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}