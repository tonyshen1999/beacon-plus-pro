{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/list/ui.list.edit.decorator.reorder.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { setWidth, getWidth } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { extend } from \"../../core/utils/extend\";\nimport { isMouseEvent } from \"../../events/utils/index\";\nimport { register as registerDecorator } from \"./ui.list.edit.decorator_registry\";\nimport EditDecorator from \"./ui.list.edit.decorator\";\nimport Sortable from \"../sortable\";\nvar REORDER_HANDLE_CONTAINER_CLASS = \"dx-list-reorder-handle-container\";\nvar REORDER_HANDLE_CLASS = \"dx-list-reorder-handle\";\nvar REORDERING_ITEM_GHOST_CLASS = \"dx-list-item-ghost-reordering\";\nvar STATE_HOVER_CLASS = \"dx-state-hover\";\nregisterDecorator(\"reorder\", \"default\", EditDecorator.inherit({\n  _init: function _init() {\n    var list = this._list;\n    this._groupedEnabled = this._list.option(\"grouped\");\n    this._lockedDrag = false;\n    var filter = this._groupedEnabled ? \"> .dx-list-group > .dx-list-group-body > .dx-list-item\" : \"> .dx-list-item\";\n    this._sortable = list._createComponent(list._scrollView.content(), Sortable, extend({\n      component: list,\n      contentTemplate: null,\n      allowReordering: false,\n      filter: filter,\n      container: list.$element(),\n      dragDirection: list.option(\"itemDragging.group\") ? \"both\" : \"vertical\",\n      handle: \".\".concat(REORDER_HANDLE_CLASS),\n      dragTemplate: this._dragTemplate,\n      onDragStart: this._dragStartHandler.bind(this),\n      onDragChange: this._dragChangeHandler.bind(this),\n      onReorder: this._reorderHandler.bind(this)\n    }, list.option(\"itemDragging\")));\n  },\n  afterRender: function afterRender() {\n    this._sortable.update();\n  },\n  _dragTemplate: function _dragTemplate(e) {\n    var result = $(e.itemElement).clone().addClass(REORDERING_ITEM_GHOST_CLASS).addClass(STATE_HOVER_CLASS);\n    setWidth(result, getWidth(e.itemElement));\n    return result;\n  },\n  _dragStartHandler: function _dragStartHandler(e) {\n    if (this._lockedDrag) {\n      e.cancel = true;\n      return;\n    }\n  },\n  _dragChangeHandler: function _dragChangeHandler(e) {\n    if (this._groupedEnabled && !this._sameParent(e.fromIndex, e.toIndex)) {\n      e.cancel = true;\n      return;\n    }\n  },\n  _sameParent: function _sameParent(fromIndex, toIndex) {\n    var $dragging = this._list.getItemElementByFlatIndex(fromIndex);\n\n    var $over = this._list.getItemElementByFlatIndex(toIndex);\n\n    return $over.parent().get(0) === $dragging.parent().get(0);\n  },\n  _reorderHandler: function _reorderHandler(e) {\n    var $targetElement = this._list.getItemElementByFlatIndex(e.toIndex);\n\n    this._list.reorderItem($(e.itemElement), $targetElement);\n  },\n  afterBag: function afterBag(config) {\n    var _this = this;\n\n    var $handle = $(\"<div>\").addClass(REORDER_HANDLE_CLASS);\n    eventsEngine.on($handle, \"dxpointerdown\", function (e) {\n      _this._lockedDrag = !isMouseEvent(e);\n    });\n    eventsEngine.on($handle, \"dxhold\", {\n      timeout: 30\n    }, function (e) {\n      e.cancel = true;\n      _this._lockedDrag = false;\n    });\n    config.$container.addClass(REORDER_HANDLE_CONTAINER_CLASS).append($handle);\n  }\n}));","map":null,"metadata":{},"sourceType":"module"}