{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/appointmentPopup/popup.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { getWidth } from \"../../../core/utils/size\";\nimport devices from \"../../../core/devices\";\nimport $ from \"../../../core/renderer\";\nimport dateUtils from \"../../../core/utils/date\";\nimport { Deferred, when } from \"../../../core/utils/deferred\";\nimport { getWindow, hasWindow } from \"../../../core/utils/window\";\nimport { triggerResizeEvent } from \"../../../events/visibility_change\";\nimport messageLocalization from \"../../../localization/message\";\nimport Popup from \"../../popup\";\nimport { hide as hideLoading, show as showLoading } from \"../loading\";\nimport { createAppointmentAdapter } from \"../appointmentAdapter\";\nimport { each } from \"../../../core/utils/iterator\";\nimport { isResourceMultiple } from \"../resources/utils\";\nimport { wrapToArray } from \"../../../core/utils/array\";\nvar toMs = dateUtils.dateToMilliseconds;\nvar APPOINTMENT_POPUP_CLASS = \"dx-scheduler-appointment-popup\";\n\nvar isMobile = function isMobile() {\n  return \"desktop\" !== devices.current().deviceType;\n};\n\nvar isIOSPlatform = function isIOSPlatform() {\n  return \"ios\" === devices.current().platform;\n};\n\nvar POPUP_WIDTH = {\n  DEFAULT: 485,\n  RECURRENCE: 970,\n  FULLSCREEN: 1e3,\n  MOBILE: {\n    DEFAULT: 350,\n    FULLSCREEN: 500\n  }\n};\nvar TOOLBAR_LOCATION = {\n  AFTER: \"after\",\n  BEFORE: \"before\"\n};\nvar DAY_IN_MS = toMs(\"day\");\nvar POPUP_CONFIG = {\n  height: \"auto\",\n  maxHeight: \"100%\",\n  showCloseButton: false,\n  showTitle: false,\n  defaultOptionsRules: [{\n    device: function device() {\n      return devices.current().android;\n    },\n    options: {\n      showTitle: false\n    }\n  }]\n};\n\nvar createDoneButtonConfig = function createDoneButtonConfig() {\n  return {\n    shortcut: \"done\",\n    options: {\n      text: messageLocalization.format(\"Done\")\n    },\n    location: TOOLBAR_LOCATION.AFTER\n  };\n};\n\nvar createCancelButtonConfig = function createCancelButtonConfig() {\n  return {\n    shortcut: \"cancel\",\n    location: isIOSPlatform() ? TOOLBAR_LOCATION.BEFORE : TOOLBAR_LOCATION.AFTER\n  };\n};\n\nvar modifyResourceFields = function modifyResourceFields(rawAppointment, dataAccessors, resources, returnedObject) {\n  each(dataAccessors.resources.getter, function (fieldName) {\n    var value = dataAccessors.resources.getter[fieldName](rawAppointment);\n    var isMultiple = isResourceMultiple(resources, fieldName);\n    returnedObject[fieldName] = isMultiple ? wrapToArray(value) : value;\n  });\n};\n\nexport var ACTION_TO_APPOINTMENT = {\n  CREATE: 0,\n  UPDATE: 1,\n  EXCLUDE_FROM_SERIES: 2\n};\nexport var AppointmentPopup = /*#__PURE__*/function () {\n  function AppointmentPopup(scheduler, form) {\n    _classCallCheck(this, AppointmentPopup);\n\n    this.scheduler = scheduler;\n    this.form = form;\n    this.popup = null;\n    this.state = {\n      action: null,\n      lastEditData: null,\n      saveChangesLocker: false,\n      appointment: {\n        data: null\n      }\n    };\n  }\n\n  _createClass(AppointmentPopup, [{\n    key: \"visible\",\n    get: function get() {\n      return this.popup ? this.popup.option(\"visible\") : false;\n    }\n  }, {\n    key: \"show\",\n    value: function show(appointment, config) {\n      this.state.appointment.data = appointment;\n      this.state.action = config.action;\n      this.state.excludeInfo = config.excludeInfo;\n\n      if (!this.popup) {\n        var popupConfig = this._createPopupConfig();\n\n        this.popup = this._createPopup(popupConfig);\n      }\n\n      this.popup.option(\"toolbarItems\", this._createPopupToolbarItems(config.isToolbarVisible));\n      this.popup.show();\n    }\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      this.popup.hide();\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      var _this$popup;\n\n      null === (_this$popup = this.popup) || void 0 === _this$popup ? void 0 : _this$popup.$element().remove();\n    }\n  }, {\n    key: \"_createPopup\",\n    value: function _createPopup(options) {\n      var popupElement = $(\"<div>\").addClass(APPOINTMENT_POPUP_CLASS).appendTo(this.scheduler.getElement());\n      return this.scheduler.createComponent(popupElement, Popup, options);\n    }\n  }, {\n    key: \"_createPopupConfig\",\n    value: function _createPopupConfig() {\n      var _this = this;\n\n      return _extends({}, POPUP_CONFIG, {\n        onHiding: function onHiding() {\n          return _this.scheduler.focus();\n        },\n        contentTemplate: function contentTemplate() {\n          return _this._createPopupContent();\n        },\n        onShowing: function onShowing(e) {\n          return _this._onShowing(e);\n        },\n        copyRootClassesToWrapper: true,\n        _ignoreCopyRootClassesToWrapperDeprecation: true\n      });\n    }\n  }, {\n    key: \"_onShowing\",\n    value: function _onShowing(e) {\n      var _this2 = this;\n\n      this._updateForm();\n\n      var arg = {\n        form: this.form.dxForm,\n        popup: this.popup,\n        appointmentData: this.state.appointment.data,\n        cancel: false\n      };\n      this.scheduler.getAppointmentFormOpening()(arg);\n      this.scheduler.processActionResult(arg, function (canceled) {\n        if (canceled) {\n          e.cancel = true;\n        } else {\n          _this2.updatePopupFullScreenMode();\n        }\n      });\n    }\n  }, {\n    key: \"_createPopupContent\",\n    value: function _createPopupContent() {\n      this._createForm();\n\n      return this.form.dxForm.$element();\n    }\n  }, {\n    key: \"_createFormData\",\n    value: function _createFormData(rawAppointment) {\n      var appointment = this._createAppointmentAdapter(rawAppointment);\n\n      var dataAccessors = this.scheduler.getDataAccessors();\n      var resources = this.scheduler.getResources();\n\n      var result = _extends({}, rawAppointment, {\n        repeat: !!appointment.recurrenceRule\n      });\n\n      modifyResourceFields(rawAppointment, dataAccessors, resources, result);\n      return result;\n    }\n  }, {\n    key: \"_createForm\",\n    value: function _createForm() {\n      var rawAppointment = this.state.appointment.data;\n\n      var formData = this._createFormData(rawAppointment);\n\n      this.form.create(this.triggerResize.bind(this), this.changeSize.bind(this), formData);\n    }\n  }, {\n    key: \"_isReadOnly\",\n    value: function _isReadOnly(rawAppointment) {\n      var appointment = this._createAppointmentAdapter(rawAppointment);\n\n      if (rawAppointment && appointment.disabled) {\n        return true;\n      }\n\n      if (this.state.action === ACTION_TO_APPOINTMENT.CREATE) {\n        return false;\n      }\n\n      return !this.scheduler.getEditingConfig().allowUpdating;\n    }\n  }, {\n    key: \"_createAppointmentAdapter\",\n    value: function _createAppointmentAdapter(rawAppointment) {\n      return createAppointmentAdapter(rawAppointment, this.scheduler.getDataAccessors(), this.scheduler.getTimeZoneCalculator());\n    }\n  }, {\n    key: \"_updateForm\",\n    value: function _updateForm() {\n      var data = this.state.appointment.data;\n\n      var appointment = this._createAppointmentAdapter(this._createFormData(data));\n\n      if (appointment.startDate) {\n        appointment.startDate = appointment.calculateStartDate(\"toAppointment\");\n      }\n\n      if (appointment.endDate) {\n        appointment.endDate = appointment.calculateEndDate(\"toAppointment\");\n      }\n\n      var formData = appointment.source();\n      this.form.readOnly = this._isReadOnly(formData);\n      this.form.updateFormData(formData);\n    }\n  }, {\n    key: \"_isPopupFullScreenNeeded\",\n    value: function _isPopupFullScreenNeeded() {\n      var width = this._tryGetWindowWidth();\n\n      if (width) {\n        return isMobile() ? width < POPUP_WIDTH.MOBILE.FULLSCREEN : width < POPUP_WIDTH.FULLSCREEN;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_tryGetWindowWidth\",\n    value: function _tryGetWindowWidth() {\n      if (hasWindow()) {\n        var window = getWindow();\n        return getWidth(window);\n      }\n    }\n  }, {\n    key: \"triggerResize\",\n    value: function triggerResize() {\n      if (this.popup) {\n        triggerResizeEvent(this.popup.$element());\n      }\n    }\n  }, {\n    key: \"_getMaxWidth\",\n    value: function _getMaxWidth(isRecurrence) {\n      if (isMobile()) {\n        return POPUP_WIDTH.MOBILE.DEFAULT;\n      }\n\n      return isRecurrence ? POPUP_WIDTH.RECURRENCE : POPUP_WIDTH.DEFAULT;\n    }\n  }, {\n    key: \"changeSize\",\n    value: function changeSize(isRecurrence) {\n      if (this.popup) {\n        var fullScreen = this._isPopupFullScreenNeeded();\n\n        this.popup.option({\n          fullScreen: fullScreen,\n          maxWidth: fullScreen ? \"100%\" : this._getMaxWidth(isRecurrence)\n        });\n      }\n    }\n  }, {\n    key: \"updatePopupFullScreenMode\",\n    value: function updatePopupFullScreenMode() {\n      if (this.form.dxForm) {\n        var formData = this.form.formData;\n        var isRecurrence = formData[this.scheduler.getDataAccessors().expr.recurrenceRuleExpr];\n\n        if (this.visible) {\n          this.changeSize(isRecurrence);\n        }\n      }\n    }\n  }, {\n    key: \"_createPopupToolbarItems\",\n    value: function _createPopupToolbarItems(isVisible) {\n      var _this3 = this;\n\n      var result = [];\n\n      if (isVisible) {\n        result.push(_extends({}, createDoneButtonConfig(), {\n          onClick: function onClick(e) {\n            return _this3._doneButtonClickHandler(e);\n          }\n        }));\n      }\n\n      result.push(createCancelButtonConfig());\n      return result;\n    }\n  }, {\n    key: \"saveChangesAsync\",\n    value: function saveChangesAsync(isShowLoadPanel) {\n      var _this4 = this;\n\n      var deferred = new Deferred();\n      var validation = this.form.dxForm.validate();\n      isShowLoadPanel && this._showLoadPanel();\n      when(validation && validation.complete || validation).done(function (validation) {\n        if (validation && !validation.isValid) {\n          hideLoading();\n          deferred.resolve(false);\n          return;\n        }\n\n        var adapter = _this4._createAppointmentAdapter(_this4.form.formData);\n\n        var appointment = adapter.clone({\n          pathTimeZone: \"fromAppointment\"\n        }).source();\n        delete appointment.repeat;\n\n        switch (_this4.state.action) {\n          case ACTION_TO_APPOINTMENT.CREATE:\n            _this4.scheduler.addAppointment(appointment).done(deferred.resolve);\n\n            break;\n\n          case ACTION_TO_APPOINTMENT.UPDATE:\n            _this4.scheduler.updateAppointment(_this4.state.appointment.data, appointment).done(deferred.resolve);\n\n            break;\n\n          case ACTION_TO_APPOINTMENT.EXCLUDE_FROM_SERIES:\n            _this4.scheduler.updateAppointment(_this4.state.excludeInfo.sourceAppointment, _this4.state.excludeInfo.updatedAppointment);\n\n            _this4.scheduler.addAppointment(appointment).done(deferred.resolve);\n\n        }\n\n        deferred.done(function () {\n          hideLoading();\n          _this4.state.lastEditData = appointment;\n        });\n      });\n      return deferred.promise();\n    }\n  }, {\n    key: \"_doneButtonClickHandler\",\n    value: function _doneButtonClickHandler(e) {\n      e.cancel = true;\n      this.saveEditDataAsync();\n    }\n  }, {\n    key: \"saveEditDataAsync\",\n    value: function saveEditDataAsync() {\n      var _this5 = this;\n\n      var deferred = new Deferred();\n\n      if (this._tryLockSaveChanges()) {\n        when(this.saveChangesAsync(true)).done(function () {\n          if (_this5.state.lastEditData) {\n            var adapter = _this5._createAppointmentAdapter(_this5.state.lastEditData);\n\n            var startDate = adapter.startDate,\n                endDate = adapter.endDate,\n                allDay = adapter.allDay;\n            var startTime = startDate.getTime();\n            var endTime = endDate.getTime();\n            var inAllDayRow = allDay || endTime - startTime >= DAY_IN_MS;\n            var resources = {};\n\n            var dataAccessors = _this5.scheduler.getDataAccessors();\n\n            var resourceList = _this5.scheduler.getResources();\n\n            modifyResourceFields(_this5.state.lastEditData, dataAccessors, resourceList, resources);\n\n            _this5.scheduler.updateScrollPosition(startDate, resources, inAllDayRow);\n\n            _this5.state.lastEditData = null;\n          }\n\n          _this5._unlockSaveChanges();\n\n          deferred.resolve();\n        });\n      }\n\n      return deferred.promise();\n    }\n  }, {\n    key: \"_showLoadPanel\",\n    value: function _showLoadPanel() {\n      var container = this.popup.$overlayContent();\n      showLoading({\n        container: container,\n        position: {\n          of: container\n        },\n        copyRootClassesToWrapper: true,\n        _ignoreCopyRootClassesToWrapperDeprecation: true\n      });\n    }\n  }, {\n    key: \"_tryLockSaveChanges\",\n    value: function _tryLockSaveChanges() {\n      if (false === this.state.saveChangesLocker) {\n        this.state.saveChangesLocker = true;\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_unlockSaveChanges\",\n    value: function _unlockSaveChanges() {\n      this.state.saveChangesLocker = false;\n    }\n  }]);\n\n  return AppointmentPopup;\n}();","map":null,"metadata":{},"sourceType":"module"}