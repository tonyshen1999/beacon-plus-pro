{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.agenda.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { setOuterHeight, setHeight } from \"../../../core/utils/size\";\nimport $ from \"../../../core/renderer\";\nimport domAdapter from \"../../../core/dom_adapter\";\nimport { noop } from \"../../../core/utils/common\";\nimport { each } from \"../../../core/utils/iterator\";\nimport { getPublicElement } from \"../../../core/element\";\nimport registerComponent from \"../../../core/component_registrator\";\nimport WorkSpace from \"./ui.scheduler.work_space\";\nimport { extend } from \"../../../core/utils/extend\";\nimport dateLocalization from \"../../../localization/date\";\nimport tableCreatorModule from \"../table_creator\";\nimport { TIME_PANEL_CLASS, DATE_TABLE_CLASS, DATE_TABLE_ROW_CLASS, GROUP_ROW_CLASS, GROUP_HEADER_CONTENT_CLASS } from \"../classes\";\nimport { createReducedResourcesTree, getDataAccessors, getPathToLeaf } from \"../resources/utils\";\nimport { calculateStartViewDate } from \"../../../renovation/ui/scheduler/view_model/to_test/views/utils/agenda\";\nimport { formatWeekday, getVerticalGroupCountClass } from \"../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\nimport { VIEWS } from \"../constants\";\nimport dateUtils from \"../../../core/utils/date\";\nvar tableCreator = tableCreatorModule.tableCreator;\nvar AGENDA_CLASS = \"dx-scheduler-agenda\";\nvar AGENDA_DATE_CLASS = \"dx-scheduler-agenda-date\";\nvar GROUP_TABLE_CLASS = \"dx-scheduler-group-table\";\nvar TIME_PANEL_ROW_CLASS = \"dx-scheduler-time-panel-row\";\nvar TIME_PANEL_CELL_CLASS = \"dx-scheduler-time-panel-cell\";\nvar NODATA_CONTAINER_CLASS = \"dx-scheduler-agenda-nodata\";\nvar LAST_ROW_CLASS = \"dx-scheduler-date-table-last-row\";\nvar INNER_CELL_MARGIN = 5;\nvar OUTER_CELL_MARGIN = 20;\n\nvar SchedulerAgenda = /*#__PURE__*/function (_WorkSpace) {\n  _inherits(SchedulerAgenda, _WorkSpace);\n\n  var _super = _createSuper(SchedulerAgenda);\n\n  function SchedulerAgenda() {\n    _classCallCheck(this, SchedulerAgenda);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SchedulerAgenda, [{\n    key: \"type\",\n    get: function get() {\n      return VIEWS.AGENDA;\n    }\n  }, {\n    key: \"renderingStrategy\",\n    get: function get() {\n      return this.invoke(\"getLayoutManager\").getRenderingStrategyInstance();\n    }\n  }, {\n    key: \"appointmentDataProvider\",\n    get: function get() {\n      return this.option(\"getAppointmentDataProvider\")();\n    }\n  }, {\n    key: \"getStartViewDate\",\n    value: function getStartViewDate() {\n      return this._startViewDate;\n    }\n  }, {\n    key: \"_init\",\n    value: function _init() {\n      _get(_getPrototypeOf(SchedulerAgenda.prototype), \"_init\", this).call(this);\n\n      this._activeStateUnit = void 0;\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function _getDefaultOptions() {\n      return extend(_get(_getPrototypeOf(SchedulerAgenda.prototype), \"_getDefaultOptions\", this).call(this), {\n        agendaDuration: 7,\n        rowHeight: 60,\n        noDataText: \"\"\n      });\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function _optionChanged(args) {\n      var name = args.name;\n      var value = args.value;\n\n      switch (name) {\n        case \"agendaDuration\":\n          break;\n\n        case \"noDataText\":\n        case \"rowHeight\":\n          this._recalculateAgenda(this._rows);\n\n          break;\n\n        case \"groups\":\n          if (!value || !value.length) {\n            if (this._$groupTable) {\n              this._$groupTable.remove();\n\n              this._$groupTable = null;\n\n              this._detachGroupCountClass();\n            }\n          } else if (!this._$groupTable) {\n            this._initGroupTable();\n\n            this._dateTableScrollable.$content().prepend(this._$groupTable);\n          }\n\n          _get(_getPrototypeOf(SchedulerAgenda.prototype), \"_optionChanged\", this).call(this, args);\n\n          break;\n\n        default:\n          _get(_getPrototypeOf(SchedulerAgenda.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }, {\n    key: \"_renderFocusState\",\n    value: function _renderFocusState() {\n      return noop();\n    }\n  }, {\n    key: \"_renderFocusTarget\",\n    value: function _renderFocusTarget() {\n      return noop();\n    }\n  }, {\n    key: \"_cleanFocusState\",\n    value: function _cleanFocusState() {\n      return noop();\n    }\n  }, {\n    key: \"supportAllDayRow\",\n    value: function supportAllDayRow() {\n      return false;\n    }\n  }, {\n    key: \"_isVerticalGroupedWorkSpace\",\n    value: function _isVerticalGroupedWorkSpace() {\n      return false;\n    }\n  }, {\n    key: \"_getElementClass\",\n    value: function _getElementClass() {\n      return AGENDA_CLASS;\n    }\n  }, {\n    key: \"_calculateStartViewDate\",\n    value: function _calculateStartViewDate() {\n      return calculateStartViewDate(this.option(\"currentDate\"), this.option(\"startDayHour\"));\n    }\n  }, {\n    key: \"_getRowCount\",\n    value: function _getRowCount() {\n      return this.option(\"agendaDuration\");\n    }\n  }, {\n    key: \"_getCellCount\",\n    value: function _getCellCount() {\n      return 1;\n    }\n  }, {\n    key: \"_getTimePanelRowCount\",\n    value: function _getTimePanelRowCount() {\n      return this.option(\"agendaDuration\");\n    }\n  }, {\n    key: \"_renderAllDayPanel\",\n    value: function _renderAllDayPanel() {\n      return noop();\n    }\n  }, {\n    key: \"_toggleAllDayVisibility\",\n    value: function _toggleAllDayVisibility() {\n      return noop();\n    }\n  }, {\n    key: \"_initWorkSpaceUnits\",\n    value: function _initWorkSpaceUnits() {\n      this._initGroupTable();\n\n      this._$timePanel = $(\"<table>\").addClass(TIME_PANEL_CLASS);\n      this._$dateTable = $(\"<table>\").addClass(DATE_TABLE_CLASS);\n      this._$dateTableScrollableContent = $(\"<div>\").addClass(\"dx-scheduler-date-table-scrollable-content\");\n      this._$dateTableContainer = $(\"<div>\").addClass(\"dx-scheduler-date-table-container\");\n    }\n  }, {\n    key: \"_initGroupTable\",\n    value: function _initGroupTable() {\n      var groups = this.option(\"groups\");\n\n      if (groups && groups.length) {\n        this._$groupTable = $(\"<table>\").addClass(GROUP_TABLE_CLASS);\n      }\n    }\n  }, {\n    key: \"_renderView\",\n    value: function _renderView() {\n      this._startViewDate = this._calculateStartViewDate();\n      this._rows = [];\n\n      this._initPositionHelper();\n    }\n  }, {\n    key: \"_recalculateAgenda\",\n    value: function _recalculateAgenda(rows) {\n      var cellTemplates = [];\n\n      this._cleanView();\n\n      if (this._rowsIsEmpty(rows)) {\n        this._renderNoData();\n\n        return;\n      }\n\n      this._rows = rows;\n\n      if (this._$groupTable) {\n        cellTemplates = this._renderGroupHeader();\n\n        this._setGroupHeaderCellsHeight();\n      }\n\n      this._renderTimePanel();\n\n      this._renderDateTable();\n\n      this.invoke(\"onAgendaReady\", rows);\n\n      this._applyCellTemplates(cellTemplates);\n\n      this._dateTableScrollable.update();\n    }\n  }, {\n    key: \"_renderNoData\",\n    value: function _renderNoData() {\n      this._$noDataContainer = $(\"<div>\").addClass(NODATA_CONTAINER_CLASS).html(this.option(\"noDataText\"));\n\n      this._dateTableScrollable.$content().append(this._$noDataContainer);\n    }\n  }, {\n    key: \"_setTableSizes\",\n    value: function _setTableSizes() {\n      return noop();\n    }\n  }, {\n    key: \"_toggleHorizontalScrollClass\",\n    value: function _toggleHorizontalScrollClass() {\n      return noop();\n    }\n  }, {\n    key: \"_createCrossScrollingConfig\",\n    value: function _createCrossScrollingConfig() {\n      return noop();\n    }\n  }, {\n    key: \"_setGroupHeaderCellsHeight\",\n    value: function _setGroupHeaderCellsHeight() {\n      var $cells = this._getGroupHeaderCells().filter(function (_, element) {\n        return !element.getAttribute(\"rowSpan\");\n      });\n\n      var rows = this._removeEmptyRows(this._rows);\n\n      if (!rows.length) {\n        return;\n      }\n\n      for (var i = 0; i < $cells.length; i++) {\n        var $cellContent = $cells.eq(i).find(\".dx-scheduler-group-header-content\");\n        setOuterHeight($cellContent, this._getGroupRowHeight(rows[i]));\n      }\n    }\n  }, {\n    key: \"_rowsIsEmpty\",\n    value: function _rowsIsEmpty(rows) {\n      var result = true;\n\n      for (var i = 0; i < rows.length; i++) {\n        var groupRow = rows[i];\n\n        for (var j = 0; j < groupRow.length; j++) {\n          if (groupRow[j]) {\n            result = false;\n            break;\n          }\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_attachGroupCountClass\",\n    value: function _attachGroupCountClass() {\n      var className = getVerticalGroupCountClass(this.option(\"groups\"));\n      this.$element().addClass(className);\n    }\n  }, {\n    key: \"_removeEmptyRows\",\n    value: function _removeEmptyRows(rows) {\n      var result = [];\n\n      for (var i = 0; i < rows.length; i++) {\n        if (rows[i].length && !(data = rows[i], !data.some(function (value) {\n          return value > 0;\n        }))) {\n          result.push(rows[i]);\n        }\n      }\n\n      var data;\n      return result;\n    }\n  }, {\n    key: \"_getGroupHeaderContainer\",\n    value: function _getGroupHeaderContainer() {\n      return this._$groupTable;\n    }\n  }, {\n    key: \"_makeGroupRows\",\n    value: function _makeGroupRows() {\n      var _this = this;\n\n      var tree = createReducedResourcesTree(this.option(\"loadedResources\"), function (field, action) {\n        return getDataAccessors(_this.option(\"getResourceDataAccessors\")(), field, action);\n      }, this.option(\"getFilteredItems\")());\n      var cellTemplate = this.option(\"resourceCellTemplate\");\n      var getGroupHeaderContentClass = GROUP_HEADER_CONTENT_CLASS;\n      var cellTemplates = [];\n      var table = tableCreator.makeGroupedTableFromJSON(tableCreator.VERTICAL, tree, {\n        cellTag: \"th\",\n        groupTableClass: GROUP_TABLE_CLASS,\n        groupRowClass: GROUP_ROW_CLASS,\n        groupCellClass: this._getGroupHeaderClass(),\n        groupCellCustomContent: function groupCellCustomContent(cell, cellText, index, data) {\n          var container = domAdapter.createElement(\"div\");\n          var contentWrapper = domAdapter.createElement(\"div\");\n          container.className = getGroupHeaderContentClass;\n          contentWrapper.appendChild(cellText);\n          container.appendChild(contentWrapper);\n          container.className = getGroupHeaderContentClass;\n\n          if (cellTemplate && cellTemplate.render) {\n            cellTemplates.push(cellTemplate.render.bind(cellTemplate, {\n              model: {\n                data: data.data,\n                id: data.value,\n                color: data.color,\n                text: cellText.textContent\n              },\n              container: getPublicElement($(container)),\n              index: index\n            }));\n          } else {\n            contentWrapper.appendChild(cellText);\n            container.appendChild(contentWrapper);\n          }\n\n          cell.appendChild(container);\n        },\n        cellTemplate: cellTemplate\n      });\n      return {\n        elements: $(table).find(\".\".concat(GROUP_ROW_CLASS)),\n        cellTemplates: cellTemplates\n      };\n    }\n  }, {\n    key: \"_cleanView\",\n    value: function _cleanView() {\n      this._$dateTable.empty();\n\n      this._$timePanel.empty();\n\n      if (this._$groupTable) {\n        this._$groupTable.empty();\n      }\n\n      if (this._$noDataContainer) {\n        this._$noDataContainer.empty();\n\n        this._$noDataContainer.remove();\n\n        delete this._$noDataContainer;\n      }\n    }\n  }, {\n    key: \"_createWorkSpaceElements\",\n    value: function _createWorkSpaceElements() {\n      this._createWorkSpaceStaticElements();\n    }\n  }, {\n    key: \"_createWorkSpaceStaticElements\",\n    value: function _createWorkSpaceStaticElements() {\n      this._$dateTableContainer.append(this._$dateTable);\n\n      this._dateTableScrollable.$content().append(this._$dateTableScrollableContent);\n\n      if (this._$groupTable) {\n        this._$dateTableScrollableContent.prepend(this._$groupTable);\n      }\n\n      this._$dateTableScrollableContent.append(this._$timePanel, this._$dateTableContainer);\n\n      this.$element().append(this._dateTableScrollable.$element());\n    }\n  }, {\n    key: \"_renderDateTable\",\n    value: function _renderDateTable() {\n      this._renderTableBody({\n        container: getPublicElement(this._$dateTable),\n        rowClass: DATE_TABLE_ROW_CLASS,\n        cellClass: this._getDateTableCellClass()\n      });\n    }\n  }, {\n    key: \"_attachTablesEvents\",\n    value: function _attachTablesEvents() {\n      return noop();\n    }\n  }, {\n    key: \"_attachEvents\",\n    value: function _attachEvents() {\n      return noop();\n    }\n  }, {\n    key: \"_cleanCellDataCache\",\n    value: function _cleanCellDataCache() {\n      return noop();\n    }\n  }, {\n    key: \"isIndicationAvailable\",\n    value: function isIndicationAvailable() {\n      return false;\n    }\n  }, {\n    key: \"_prepareCellTemplateOptions\",\n    value: function _prepareCellTemplateOptions(text, date, rowIndex, $cell) {\n      var groupsOpt = this.option(\"groups\");\n      var groups = {};\n      var isGroupedView = !!groupsOpt.length;\n      var path = isGroupedView && getPathToLeaf(rowIndex, groupsOpt) || [];\n      path.forEach(function (resourceValue, resourceIndex) {\n        var resourceName = groupsOpt[resourceIndex].name;\n        groups[resourceName] = resourceValue;\n      });\n      var groupIndex = isGroupedView ? this._getGroupIndexByResourceId(groups) : void 0;\n      return {\n        model: {\n          text: text,\n          date: date,\n          groups: groups,\n          groupIndex: groupIndex\n        },\n        container: getPublicElement($cell),\n        index: rowIndex\n      };\n    }\n  }, {\n    key: \"_renderTableBody\",\n    value: function _renderTableBody(options) {\n      var cellTemplates = [];\n      var cellTemplateOpt = options.cellTemplate;\n      this._$rows = [];\n      var i;\n\n      var fillTableBody = function (rowIndex, rowSize) {\n        if (rowSize) {\n          var date;\n          var cellDateNumber;\n          var cellDayName;\n          var $row = $(\"<tr>\");\n          var $td = $(\"<td>\");\n          setHeight($td, this._getRowHeight(rowSize));\n\n          if (options.getStartDate) {\n            date = options.getStartDate && options.getStartDate(rowIndex);\n            cellDateNumber = dateLocalization.format(date, \"d\");\n            cellDayName = dateLocalization.format(date, formatWeekday);\n          }\n\n          if (cellTemplateOpt && cellTemplateOpt.render) {\n            var templateOptions = this._prepareCellTemplateOptions(cellDateNumber + \" \" + cellDayName, date, i, $td);\n\n            cellTemplates.push(cellTemplateOpt.render.bind(cellTemplateOpt, templateOptions));\n          } else if (cellDateNumber && cellDayName) {\n            $td.addClass(AGENDA_DATE_CLASS).text(cellDateNumber + \" \" + cellDayName);\n          }\n\n          if (options.rowClass) {\n            $row.addClass(options.rowClass);\n          }\n\n          if (options.cellClass) {\n            $td.addClass(options.cellClass);\n          }\n\n          $row.append($td);\n\n          this._$rows.push($row);\n        }\n      }.bind(this);\n\n      for (i = 0; i < this._rows.length; i++) {\n        each(this._rows[i], fillTableBody);\n\n        this._setLastRowClass();\n      }\n\n      $(options.container).append($(\"<tbody>\").append(this._$rows));\n\n      this._applyCellTemplates(cellTemplates);\n    }\n  }, {\n    key: \"_setLastRowClass\",\n    value: function _setLastRowClass() {\n      if (this._rows.length > 1 && this._$rows.length) {\n        var $lastRow = this._$rows[this._$rows.length - 1];\n        $lastRow.addClass(LAST_ROW_CLASS);\n      }\n    }\n  }, {\n    key: \"_renderTimePanel\",\n    value: function _renderTimePanel() {\n      this._renderTableBody({\n        container: getPublicElement(this._$timePanel),\n        rowCount: this._getTimePanelRowCount(),\n        cellCount: 1,\n        rowClass: TIME_PANEL_ROW_CLASS,\n        cellClass: TIME_PANEL_CELL_CLASS,\n        cellTemplate: this.option(\"dateCellTemplate\"),\n        getStartDate: this._getTimePanelStartDate.bind(this)\n      });\n    }\n  }, {\n    key: \"_getTimePanelStartDate\",\n    value: function _getTimePanelStartDate(rowIndex) {\n      var current = new Date(this.option(\"currentDate\"));\n      var cellDate = new Date(current.setDate(current.getDate() + rowIndex));\n      return cellDate;\n    }\n  }, {\n    key: \"_getRowHeight\",\n    value: function _getRowHeight(rowSize) {\n      var baseHeight = this.option(\"rowHeight\");\n      var innerOffset = (rowSize - 1) * INNER_CELL_MARGIN;\n      return rowSize ? baseHeight * rowSize + innerOffset + OUTER_CELL_MARGIN : 0;\n    }\n  }, {\n    key: \"_getGroupRowHeight\",\n    value: function _getGroupRowHeight(groupRows) {\n      if (!groupRows) {\n        return;\n      }\n\n      var result = 0;\n\n      for (var i = 0; i < groupRows.length; i++) {\n        result += this._getRowHeight(groupRows[i]);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_calculateRows\",\n    value: function _calculateRows(appointments) {\n      return this.renderingStrategy.calculateRows(appointments, this.option(\"agendaDuration\"), this.option(\"currentDate\"));\n    }\n  }, {\n    key: \"onDataSourceChanged\",\n    value: function onDataSourceChanged(appointments) {\n      _get(_getPrototypeOf(SchedulerAgenda.prototype), \"onDataSourceChanged\", this).call(this);\n\n      this._renderView();\n\n      var rows = this._calculateRows(appointments);\n\n      this._recalculateAgenda(rows);\n    }\n  }, {\n    key: \"getAgendaVerticalStepHeight\",\n    value: function getAgendaVerticalStepHeight() {\n      return this.option(\"rowHeight\");\n    }\n  }, {\n    key: \"getEndViewDate\",\n    value: function getEndViewDate() {\n      var currentDate = new Date(this.option(\"currentDate\"));\n      var agendaDuration = this.option(\"agendaDuration\");\n      currentDate.setHours(this.option(\"endDayHour\"));\n      var result = currentDate.setDate(currentDate.getDate() + agendaDuration - 1) - 6e4;\n      return new Date(result);\n    }\n  }, {\n    key: \"getEndViewDateByEndDayHour\",\n    value: function getEndViewDateByEndDayHour() {\n      return this.getEndViewDate();\n    }\n  }, {\n    key: \"getCellDataByCoordinates\",\n    value: function getCellDataByCoordinates() {\n      return {\n        startDate: null,\n        endDate: null\n      };\n    }\n  }, {\n    key: \"updateScrollPosition\",\n    value: function updateScrollPosition(date) {\n      var newDate = this.timeZoneCalculator.createDate(date, {\n        path: \"toGrid\"\n      });\n      var bounds = this.getVisibleBounds();\n      var startDateHour = newDate.getHours();\n      var startDateMinutes = newDate.getMinutes();\n\n      if (this.needUpdateScrollPosition(startDateHour, startDateMinutes, bounds, newDate)) {\n        this.scrollToTime(startDateHour, startDateMinutes, newDate);\n      }\n    }\n  }, {\n    key: \"needUpdateScrollPosition\",\n    value: function needUpdateScrollPosition(hours, minutes, bounds) {\n      var isUpdateNeeded = false;\n\n      if (hours < bounds.top.hours || hours > bounds.bottom.hours) {\n        isUpdateNeeded = true;\n      }\n\n      if (hours === bounds.top.hours && minutes < bounds.top.minutes) {\n        isUpdateNeeded = true;\n      }\n\n      if (hours === bounds.bottom.hours && minutes > bounds.top.minutes) {\n        isUpdateNeeded = true;\n      }\n\n      return isUpdateNeeded;\n    }\n  }, {\n    key: \"renovatedRenderSupported\",\n    value: function renovatedRenderSupported() {\n      return false;\n    }\n  }, {\n    key: \"_setSelectedCellsByCellData\",\n    value: function _setSelectedCellsByCellData() {}\n  }, {\n    key: \"_getIntervalDuration\",\n    value: function _getIntervalDuration() {\n      return dateUtils.dateToMilliseconds(\"day\") * this.option(\"intervalCount\");\n    }\n  }, {\n    key: \"getDOMElementsMetaData\",\n    value: function getDOMElementsMetaData() {\n      return {\n        dateTableCellsMeta: [[{}]],\n        allDayPanelCellsMeta: [{}]\n      };\n    }\n  }]);\n\n  return SchedulerAgenda;\n}(WorkSpace);\n\nregisterComponent(\"dxSchedulerAgenda\", SchedulerAgenda);\nexport default SchedulerAgenda;","map":null,"metadata":{},"sourceType":"module"}