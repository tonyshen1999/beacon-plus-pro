{"ast":null,"code":"import _toConsumableArray from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n\n/**\r\n * DevExtreme (esm/ui/form/ui.form.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport $ from \"../../core/renderer\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport registerComponent from \"../../core/component_registrator\";\nimport Guid from \"../../core/guid\";\nimport { ensureDefined } from \"../../core/utils/common\";\nimport config from \"../../core/config\";\nimport { isDefined, isEmptyObject, isObject, isString } from \"../../core/utils/type\";\nimport { each } from \"../../core/utils/iterator\";\nimport { inArray } from \"../../core/utils/array\";\nimport { extend } from \"../../core/utils/extend\";\nimport { triggerResizeEvent, triggerShownEvent } from \"../../events/visibility_change\";\nimport { getPublicElement } from \"../../core/element\";\nimport messageLocalization from \"../../localization/message\";\nimport Widget from \"../widget/ui.widget\";\nimport Editor from \"../editor/editor\";\nimport { defaultScreenFactorFunc, getCurrentScreenFactor, hasWindow } from \"../../core/utils/window\";\nimport ValidationEngine from \"../validation_engine\";\nimport { default as FormItemsRunTimeInfo } from \"./ui.form.items_runtime_info\";\nimport TabPanel from \"../tab_panel\";\nimport Scrollable from \"../scroll_view/ui.scrollable\";\nimport { Deferred } from \"../../core/utils/deferred\";\nimport { isMaterial } from \"../themes\";\nimport tryCreateItemOptionAction from \"./ui.form.item_options_actions\";\nimport \"./ui.form.layout_manager\";\nimport { concatPaths, createItemPathByIndex, getFullOptionName, getOptionNameFromFullName, tryGetTabPath, getTextWithoutSpaces, isEqualToDataFieldOrNameOrTitleOrCaption, isFullPathContainsTabs, getItemPath, convertToLayoutManagerOptions } from \"./ui.form.utils\";\nimport { convertToLabelMarkOptions } from \"./ui.form.layout_manager.utils\";\nimport { setLabelWidthByMaxLabelWidth } from \"./components/label\";\nimport \"../validation_summary\";\nimport \"../validation_group\";\nimport { FORM_CLASS, FIELD_ITEM_CLASS, FORM_GROUP_CLASS, FORM_GROUP_CONTENT_CLASS, FIELD_ITEM_CONTENT_HAS_GROUP_CLASS, FIELD_ITEM_CONTENT_HAS_TABS_CLASS, FORM_GROUP_WITH_CAPTION_CLASS, FORM_GROUP_CAPTION_CLASS, FIELD_ITEM_TAB_CLASS, FORM_FIELD_ITEM_COL_CLASS, GROUP_COL_COUNT_CLASS, GROUP_COL_COUNT_ATTR, FIELD_ITEM_CONTENT_CLASS, FORM_VALIDATION_SUMMARY, ROOT_SIMPLE_ITEM_CLASS, FORM_UNDERLINED_CLASS } from \"./constants\";\nimport { TOOLBAR_CLASS } from \"../toolbar/constants\";\nvar FOCUSED_STATE_CLASS = \"dx-state-focused\";\nvar ITEM_OPTIONS_FOR_VALIDATION_UPDATING = [\"items\", \"isRequired\", \"validationRules\", \"visible\"];\nvar Form = Widget.inherit({\n  _init: function _init() {\n    this.callBase();\n    this._cachedColCountOptions = [];\n    this._itemsRunTimeInfo = new FormItemsRunTimeInfo();\n    this._groupsColCount = [];\n\n    this._attachSyncSubscriptions();\n  },\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      formID: \"dx-\" + new Guid(),\n      formData: {},\n      colCount: 1,\n      screenByWidth: defaultScreenFactorFunc,\n      colCountByScreen: void 0,\n      labelLocation: \"left\",\n      readOnly: false,\n      onFieldDataChanged: null,\n      customizeItem: null,\n      onEditorEnterKey: null,\n      minColWidth: 200,\n      alignItemLabels: true,\n      alignItemLabelsInAllGroups: true,\n      alignRootItemLabels: true,\n      showColonAfterLabel: true,\n      showRequiredMark: true,\n      showOptionalMark: false,\n      requiredMark: \"*\",\n      optionalMark: messageLocalization.format(\"dxForm-optionalMark\"),\n      requiredMessage: messageLocalization.getFormatter(\"dxForm-requiredMessage\"),\n      showValidationSummary: false,\n      items: void 0,\n      scrollingEnabled: false,\n      validationGroup: void 0,\n      stylingMode: config().editorStylingMode,\n      labelMode: \"outside\"\n    });\n  },\n  _defaultOptionsRules: function _defaultOptionsRules() {\n    return this.callBase().concat([{\n      device: function device() {\n        return isMaterial();\n      },\n      options: {\n        showColonAfterLabel: false,\n        labelLocation: \"top\"\n      }\n    }]);\n  },\n  _setOptionsByReference: function _setOptionsByReference() {\n    this.callBase();\n    extend(this._optionsByReference, {\n      formData: true,\n      validationGroup: true\n    });\n  },\n  _getGroupColCount: function _getGroupColCount($element) {\n    return parseInt($element.attr(GROUP_COL_COUNT_ATTR));\n  },\n  _applyLabelsWidthByCol: function _applyLabelsWidthByCol($container, index) {\n    var options = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};\n    var labelMarkOptions = arguments.length > 3 ? arguments[3] : void 0;\n    var fieldItemClass = options.inOneColumn ? FIELD_ITEM_CLASS : FORM_FIELD_ITEM_COL_CLASS + index;\n    var cssExcludeTabbedSelector = options.excludeTabbed ? \":not(.\".concat(FIELD_ITEM_TAB_CLASS, \")\") : \"\";\n    setLabelWidthByMaxLabelWidth($container, \".\".concat(fieldItemClass).concat(cssExcludeTabbedSelector), labelMarkOptions);\n    return;\n  },\n  _applyLabelsWidth: function _applyLabelsWidth($container, excludeTabbed, inOneColumn, colCount, labelMarkOptions) {\n    colCount = inOneColumn ? 1 : colCount || this._getGroupColCount($container);\n    var applyLabelsOptions = {\n      excludeTabbed: excludeTabbed,\n      inOneColumn: inOneColumn\n    };\n    var i;\n\n    for (i = 0; i < colCount; i++) {\n      this._applyLabelsWidthByCol($container, i, applyLabelsOptions, labelMarkOptions);\n    }\n  },\n  _getGroupElementsInColumn: function _getGroupElementsInColumn($container, columnIndex, colCount) {\n    var cssColCountSelector = isDefined(colCount) ? \".\" + GROUP_COL_COUNT_CLASS + colCount : \"\";\n    var groupSelector = \".\" + FORM_FIELD_ITEM_COL_CLASS + columnIndex + \" > .\" + FIELD_ITEM_CONTENT_CLASS + \" > .\" + FORM_GROUP_CLASS + cssColCountSelector;\n    return $container.find(groupSelector);\n  },\n  _applyLabelsWidthWithGroups: function _applyLabelsWidthWithGroups($container, colCount, excludeTabbed, labelMarkOptions) {\n    if (true === this.option(\"alignRootItemLabels\")) {\n      var $rootSimpleItems = $container.find(\".\".concat(ROOT_SIMPLE_ITEM_CLASS));\n\n      for (var colIndex = 0; colIndex < colCount; colIndex++) {\n        this._applyLabelsWidthByCol($rootSimpleItems, colIndex, excludeTabbed, labelMarkOptions);\n      }\n    }\n\n    var alignItemLabelsInAllGroups = this.option(\"alignItemLabelsInAllGroups\");\n\n    if (alignItemLabelsInAllGroups) {\n      this._applyLabelsWidthWithNestedGroups($container, colCount, excludeTabbed, labelMarkOptions);\n    } else {\n      var $groups = this.$element().find(\".\" + FORM_GROUP_CLASS);\n      var i;\n\n      for (i = 0; i < $groups.length; i++) {\n        this._applyLabelsWidth($groups.eq(i), excludeTabbed, void 0, void 0, labelMarkOptions);\n      }\n    }\n  },\n  _applyLabelsWidthWithNestedGroups: function _applyLabelsWidthWithNestedGroups($container, colCount, excludeTabbed, labelMarkOptions) {\n    var applyLabelsOptions = {\n      excludeTabbed: excludeTabbed\n    };\n    var colIndex;\n    var groupsColIndex;\n    var groupColIndex;\n    var $groupsByCol;\n\n    for (colIndex = 0; colIndex < colCount; colIndex++) {\n      $groupsByCol = this._getGroupElementsInColumn($container, colIndex);\n\n      this._applyLabelsWidthByCol($groupsByCol, 0, applyLabelsOptions, labelMarkOptions);\n\n      for (groupsColIndex = 0; groupsColIndex < this._groupsColCount.length; groupsColIndex++) {\n        $groupsByCol = this._getGroupElementsInColumn($container, colIndex, this._groupsColCount[groupsColIndex]);\n\n        var groupColCount = this._getGroupColCount($groupsByCol);\n\n        for (groupColIndex = 1; groupColIndex < groupColCount; groupColIndex++) {\n          this._applyLabelsWidthByCol($groupsByCol, groupColIndex, applyLabelsOptions, labelMarkOptions);\n        }\n      }\n    }\n  },\n  _labelLocation: function _labelLocation() {\n    return this.option(\"labelLocation\");\n  },\n  _alignLabelsInColumn: function _alignLabelsInColumn(_ref) {\n    var layoutManager = _ref.layoutManager,\n        inOneColumn = _ref.inOneColumn,\n        $container = _ref.$container,\n        excludeTabbed = _ref.excludeTabbed,\n        items = _ref.items;\n\n    if (!hasWindow() || \"top\" === this._labelLocation()) {\n      return;\n    }\n\n    var labelMarkOptions = convertToLabelMarkOptions(layoutManager._getMarkOptions());\n\n    if (inOneColumn) {\n      this._applyLabelsWidth($container, excludeTabbed, true, void 0, labelMarkOptions);\n    } else if (this._checkGrouping(items)) {\n      this._applyLabelsWidthWithGroups($container, layoutManager._getColCount(), excludeTabbed, labelMarkOptions);\n    } else {\n      this._applyLabelsWidth($container, excludeTabbed, false, layoutManager._getColCount(), labelMarkOptions);\n    }\n  },\n  _prepareFormData: function _prepareFormData() {\n    if (!isDefined(this.option(\"formData\"))) {\n      this.option(\"formData\", {});\n    }\n  },\n  _setStylingModeClass: function _setStylingModeClass() {\n    if (\"underlined\" === this.option(\"stylingMode\")) {\n      this.$element().addClass(FORM_UNDERLINED_CLASS);\n    }\n  },\n  _initMarkup: function _initMarkup() {\n    ValidationEngine.addGroup(this._getValidationGroup());\n\n    this._clearCachedInstances();\n\n    this._prepareFormData();\n\n    this.$element().addClass(FORM_CLASS);\n\n    this._setStylingModeClass();\n\n    this.callBase();\n    this.setAria(\"role\", \"form\", this.$element());\n\n    if (this.option(\"scrollingEnabled\")) {\n      this._renderScrollable();\n    }\n\n    this._renderLayout();\n\n    this._renderValidationSummary();\n\n    this._lastMarkupScreenFactor = this._targetScreenFactor || this._getCurrentScreenFactor();\n  },\n  _getCurrentScreenFactor: function _getCurrentScreenFactor() {\n    return hasWindow() ? getCurrentScreenFactor(this.option(\"screenByWidth\")) : \"lg\";\n  },\n  _clearCachedInstances: function _clearCachedInstances() {\n    this._itemsRunTimeInfo.clear();\n\n    this._cachedLayoutManagers = [];\n  },\n  _alignLabels: function _alignLabels(layoutManager, inOneColumn) {\n    this._alignLabelsInColumn({\n      $container: this.$element(),\n      layoutManager: layoutManager,\n      excludeTabbed: true,\n      items: this.option(\"items\"),\n      inOneColumn: inOneColumn\n    });\n\n    triggerResizeEvent(this.$element().find(\".\".concat(TOOLBAR_CLASS)));\n  },\n  _clean: function _clean() {\n    this._clearValidationSummary();\n\n    this.callBase();\n    this._groupsColCount = [];\n    this._cachedColCountOptions = [];\n    this._lastMarkupScreenFactor = void 0;\n  },\n  _renderScrollable: function _renderScrollable() {\n    var useNativeScrolling = this.option(\"useNativeScrolling\");\n    this._scrollable = new Scrollable(this.$element(), {\n      useNative: !!useNativeScrolling,\n      useSimulatedScrollbar: !useNativeScrolling,\n      useKeyboard: false,\n      direction: \"both\",\n      bounceEnabled: false\n    });\n  },\n  _getContent: function _getContent() {\n    return this.option(\"scrollingEnabled\") ? $(this._scrollable.content()) : this.$element();\n  },\n  _clearValidationSummary: function _clearValidationSummary() {\n    var _this$_$validationSum;\n\n    null === (_this$_$validationSum = this._$validationSummary) || void 0 === _this$_$validationSum ? void 0 : _this$_$validationSum.remove();\n    this._$validationSummary = void 0;\n    this._validationSummary = void 0;\n  },\n  _renderValidationSummary: function _renderValidationSummary() {\n    this._clearValidationSummary();\n\n    if (this.option(\"showValidationSummary\")) {\n      this._$validationSummary = $(\"<div>\").addClass(FORM_VALIDATION_SUMMARY).appendTo(this._getContent());\n      this._validationSummary = this._$validationSummary.dxValidationSummary({\n        validationGroup: this._getValidationGroup()\n      }).dxValidationSummary(\"instance\");\n    }\n  },\n  _prepareItems: function _prepareItems(items, parentIsTabbedItem, currentPath, isTabs) {\n    if (items) {\n      var result = [];\n\n      for (var i = 0; i < items.length; i++) {\n        var item = items[i];\n        var path = concatPaths(currentPath, createItemPathByIndex(i, isTabs));\n        var itemRunTimeInfo = {\n          item: item,\n          itemIndex: i,\n          path: path\n        };\n\n        var guid = this._itemsRunTimeInfo.add(itemRunTimeInfo);\n\n        if (isString(item)) {\n          item = {\n            dataField: item\n          };\n        }\n\n        if (isObject(item)) {\n          var preparedItem = _extends({}, item);\n\n          itemRunTimeInfo.preparedItem = preparedItem;\n          preparedItem.guid = guid;\n\n          this._tryPrepareGroupItem(preparedItem);\n\n          this._tryPrepareTabbedItem(preparedItem, path);\n\n          this._tryPrepareItemTemplate(preparedItem);\n\n          if (parentIsTabbedItem) {\n            preparedItem.cssItemClass = FIELD_ITEM_TAB_CLASS;\n          }\n\n          if (preparedItem.items) {\n            preparedItem.items = this._prepareItems(preparedItem.items, parentIsTabbedItem, path);\n          }\n\n          result.push(preparedItem);\n        } else {\n          result.push(item);\n        }\n      }\n\n      return result;\n    }\n  },\n  _tryPrepareGroupItem: function _tryPrepareGroupItem(item) {\n    var _this = this;\n\n    if (\"group\" === item.itemType) {\n      item.alignItemLabels = ensureDefined(item.alignItemLabels, true);\n\n      item._prepareGroupItemTemplate = function (itemTemplate) {\n        if (item.template) {\n          item.groupContentTemplate = _this._getTemplate(itemTemplate);\n        }\n\n        item.template = _this._itemGroupTemplate.bind(_this, item);\n      };\n\n      item._prepareGroupItemTemplate(item.template);\n    }\n  },\n  _tryPrepareTabbedItem: function _tryPrepareTabbedItem(item, path) {\n    if (\"tabbed\" === item.itemType) {\n      item.template = this._itemTabbedTemplate.bind(this, item);\n      item.tabs = this._prepareItems(item.tabs, true, path, true);\n    }\n  },\n  _tryPrepareItemTemplate: function _tryPrepareItemTemplate(item) {\n    if (item.template) {\n      item.template = this._getTemplate(item.template);\n    }\n  },\n  _checkGrouping: function _checkGrouping(items) {\n    if (items) {\n      for (var i = 0; i < items.length; i++) {\n        var item = items[i];\n\n        if (\"group\" === item.itemType) {\n          return true;\n        }\n      }\n    }\n  },\n  _renderLayout: function _renderLayout() {\n    var that = this;\n    var items = that.option(\"items\");\n\n    var $content = that._getContent();\n\n    items = that._prepareItems(items);\n    that._rootLayoutManager = that._renderLayoutManager($content, this._createLayoutManagerOptions(items, {\n      isRoot: true,\n      colCount: that.option(\"colCount\"),\n      alignItemLabels: that.option(\"alignItemLabels\"),\n      screenByWidth: this.option(\"screenByWidth\"),\n      colCountByScreen: this.option(\"colCountByScreen\"),\n      onLayoutChanged: function onLayoutChanged(inOneColumn) {\n        that._alignLabels.bind(that)(that._rootLayoutManager, inOneColumn);\n      },\n      onContentReady: function onContentReady(e) {\n        that._alignLabels(e.component, e.component.isSingleColumnMode());\n      }\n    }));\n  },\n  _tryGetItemsForTemplate: function _tryGetItemsForTemplate(item) {\n    return item.items || [];\n  },\n  _itemTabbedTemplate: function _itemTabbedTemplate(item, e, $container) {\n    var _this2 = this;\n\n    var $tabPanel = $(\"<div>\").appendTo($container);\n    var tabPanelOptions = extend({}, item.tabPanelOptions, {\n      dataSource: item.tabs,\n      onItemRendered: function onItemRendered(args) {\n        return triggerShownEvent(args.itemElement);\n      },\n      itemTemplate: function itemTemplate(itemData, e, container) {\n        var $container = $(container);\n        var alignItemLabels = ensureDefined(itemData.alignItemLabels, true);\n\n        var layoutManager = _this2._renderLayoutManager($container, _this2._createLayoutManagerOptions(_this2._tryGetItemsForTemplate(itemData), {\n          colCount: itemData.colCount,\n          alignItemLabels: alignItemLabels,\n          screenByWidth: _this2.option(\"screenByWidth\"),\n          colCountByScreen: itemData.colCountByScreen,\n          cssItemClass: itemData.cssItemClass,\n          onLayoutChanged: function onLayoutChanged(inOneColumn) {\n            _this2._alignLabelsInColumn({\n              $container: $container,\n              layoutManager: layoutManager,\n              items: itemData.items,\n              inOneColumn: inOneColumn\n            });\n          }\n        }));\n\n        if (_this2._itemsRunTimeInfo) {\n          _this2._itemsRunTimeInfo.extendRunTimeItemInfoByKey(itemData.guid, {\n            layoutManager: layoutManager\n          });\n        }\n\n        if (alignItemLabels) {\n          _this2._alignLabelsInColumn({\n            $container: $container,\n            layoutManager: layoutManager,\n            items: itemData.items,\n            inOneColumn: layoutManager.isSingleColumnMode()\n          });\n        }\n      }\n    });\n\n    var tryUpdateTabPanelInstance = function tryUpdateTabPanelInstance(items, instance) {\n      if (Array.isArray(items)) {\n        items.forEach(function (item) {\n          return _this2._itemsRunTimeInfo.extendRunTimeItemInfoByKey(item.guid, {\n            widgetInstance: instance\n          });\n        });\n      }\n    };\n\n    var tabPanel = this._createComponent($tabPanel, TabPanel, tabPanelOptions);\n\n    $($container).parent().addClass(FIELD_ITEM_CONTENT_HAS_TABS_CLASS);\n    tabPanel.on(\"optionChanged\", function (e) {\n      if (\"dataSource\" === e.fullName) {\n        tryUpdateTabPanelInstance(e.value, e.component);\n      }\n    });\n    tryUpdateTabPanelInstance([{\n      guid: item.guid\n    }].concat(_toConsumableArray(item.tabs)), tabPanel);\n  },\n  _itemGroupTemplate: function _itemGroupTemplate(item, e, $container) {\n    var _this3 = this;\n\n    var $group = $(\"<div>\").toggleClass(FORM_GROUP_WITH_CAPTION_CLASS, isDefined(item.caption) && item.caption.length).addClass(FORM_GROUP_CLASS).appendTo($container);\n    $($container).parent().addClass(FIELD_ITEM_CONTENT_HAS_GROUP_CLASS);\n    var colCount;\n    var layoutManager;\n\n    if (item.caption) {\n      $(\"<span>\").addClass(FORM_GROUP_CAPTION_CLASS).text(item.caption).appendTo($group);\n    }\n\n    var $groupContent = $(\"<div>\").addClass(FORM_GROUP_CONTENT_CLASS).appendTo($group);\n\n    if (item.groupContentTemplate) {\n      item._renderGroupContentTemplate = function () {\n        $groupContent.empty();\n        var data = {\n          formData: _this3.option(\"formData\"),\n          component: _this3\n        };\n        item.groupContentTemplate.render({\n          model: data,\n          container: getPublicElement($groupContent)\n        });\n      };\n\n      item._renderGroupContentTemplate();\n    } else {\n      layoutManager = this._renderLayoutManager($groupContent, this._createLayoutManagerOptions(this._tryGetItemsForTemplate(item), {\n        colCount: item.colCount,\n        colCountByScreen: item.colCountByScreen,\n        alignItemLabels: item.alignItemLabels,\n        cssItemClass: item.cssItemClass\n      }));\n      this._itemsRunTimeInfo && this._itemsRunTimeInfo.extendRunTimeItemInfoByKey(item.guid, {\n        layoutManager: layoutManager\n      });\n      colCount = layoutManager._getColCount();\n\n      if (-1 === inArray(colCount, this._groupsColCount)) {\n        this._groupsColCount.push(colCount);\n      }\n\n      $group.addClass(GROUP_COL_COUNT_CLASS + colCount);\n      $group.attr(GROUP_COL_COUNT_ATTR, colCount);\n    }\n  },\n  _createLayoutManagerOptions: function _createLayoutManagerOptions(items, extendedLayoutManagerOptions) {\n    var _this4 = this;\n\n    return convertToLayoutManagerOptions({\n      form: this,\n      formOptions: this.option(),\n      $formElement: this.$element(),\n      items: items,\n      validationGroup: this._getValidationGroup(),\n      extendedLayoutManagerOptions: extendedLayoutManagerOptions,\n      onFieldDataChanged: function onFieldDataChanged(args) {\n        if (!_this4._isDataUpdating) {\n          _this4._triggerOnFieldDataChanged(args);\n        }\n      },\n      onContentReady: function onContentReady(args) {\n        _this4._itemsRunTimeInfo.addItemsOrExtendFrom(args.component._itemsRunTimeInfo);\n\n        extendedLayoutManagerOptions.onContentReady && extendedLayoutManagerOptions.onContentReady(args);\n      },\n      onDisposing: function onDisposing(_ref2) {\n        var component = _ref2.component;\n        var nestedItemsRunTimeInfo = component.getItemsRunTimeInfo();\n\n        _this4._itemsRunTimeInfo.removeItemsByItems(nestedItemsRunTimeInfo);\n      },\n      onFieldItemRendered: function onFieldItemRendered() {\n        var _this$_validationSumm;\n\n        null === (_this$_validationSumm = _this4._validationSummary) || void 0 === _this$_validationSumm ? void 0 : _this$_validationSumm._initGroupRegistration();\n      }\n    });\n  },\n  _renderLayoutManager: function _renderLayoutManager($parent, layoutManagerOptions) {\n    var _this5 = this;\n\n    var baseColCountByScreen = {\n      lg: layoutManagerOptions.colCount,\n      md: layoutManagerOptions.colCount,\n      sm: layoutManagerOptions.colCount,\n      xs: 1\n    };\n\n    this._cachedColCountOptions.push({\n      colCountByScreen: extend(baseColCountByScreen, layoutManagerOptions.colCountByScreen)\n    });\n\n    var $element = $(\"<div>\");\n    $element.appendTo($parent);\n\n    var instance = this._createComponent($element, \"dxLayoutManager\", layoutManagerOptions);\n\n    instance.on(\"autoColCountChanged\", function () {\n      _this5._clearAutoColCountChangedTimeout();\n\n      _this5.autoColCountChangedTimeoutId = setTimeout(function () {\n        return !_this5._disposed && _this5._refresh();\n      }, 0);\n    });\n\n    this._cachedLayoutManagers.push(instance);\n\n    return instance;\n  },\n  _getValidationGroup: function _getValidationGroup() {\n    return this.option(\"validationGroup\") || this;\n  },\n  _createComponent: function _createComponent($element, type, config) {\n    config = config || {};\n\n    this._extendConfig(config, {\n      readOnly: this.option(\"readOnly\")\n    });\n\n    return this.callBase($element, type, config);\n  },\n  _attachSyncSubscriptions: function _attachSyncSubscriptions() {\n    var that = this;\n    that.on(\"optionChanged\", function (args) {\n      var optionFullName = args.fullName;\n\n      if (\"formData\" === optionFullName) {\n        if (!isDefined(args.value)) {\n          that._options.silent(\"formData\", args.value = {});\n        }\n\n        that._triggerOnFieldDataChangedByDataSet(args.value);\n      }\n\n      if (that._cachedLayoutManagers.length) {\n        each(that._cachedLayoutManagers, function (index, layoutManager) {\n          if (\"formData\" === optionFullName) {\n            that._isDataUpdating = true;\n            layoutManager.option(\"layoutData\", args.value);\n            that._isDataUpdating = false;\n          }\n\n          if (\"readOnly\" === args.name || \"disabled\" === args.name) {\n            layoutManager.option(optionFullName, args.value);\n          }\n        });\n      }\n    });\n  },\n  _optionChanged: function _optionChanged(args) {\n    var splitFullName = args.fullName.split(\".\");\n\n    if (splitFullName.length > 1 && -1 !== splitFullName[0].search(\"items\") && this._itemsOptionChangedHandler(args)) {\n      return;\n    }\n\n    if (splitFullName.length > 1 && -1 !== splitFullName[0].search(\"formData\") && this._formDataOptionChangedHandler(args)) {\n      return;\n    }\n\n    this._defaultOptionChangedHandler(args);\n  },\n  _defaultOptionChangedHandler: function _defaultOptionChangedHandler(args) {\n    switch (args.name) {\n      case \"formData\":\n        if (!this.option(\"items\")) {\n          this._invalidate();\n        } else if (isEmptyObject(args.value)) {\n          this._resetValues();\n        }\n\n        break;\n\n      case \"onFieldDataChanged\":\n        break;\n\n      case \"items\":\n      case \"colCount\":\n      case \"onEditorEnterKey\":\n      case \"labelLocation\":\n      case \"labelMode\":\n      case \"alignItemLabels\":\n      case \"showColonAfterLabel\":\n      case \"customizeItem\":\n      case \"alignItemLabelsInAllGroups\":\n      case \"showRequiredMark\":\n      case \"showOptionalMark\":\n      case \"requiredMark\":\n      case \"optionalMark\":\n      case \"requiredMessage\":\n      case \"scrollingEnabled\":\n      case \"formID\":\n      case \"colCountByScreen\":\n      case \"screenByWidth\":\n      case \"stylingMode\":\n        this._invalidate();\n\n        break;\n\n      case \"showValidationSummary\":\n        this._renderValidationSummary();\n\n        break;\n\n      case \"minColWidth\":\n        if (\"auto\" === this.option(\"colCount\")) {\n          this._invalidate();\n        }\n\n        break;\n\n      case \"alignRootItemLabels\":\n      case \"readOnly\":\n        break;\n\n      case \"width\":\n        this.callBase(args);\n\n        this._rootLayoutManager.option(args.name, args.value);\n\n        this._alignLabels(this._rootLayoutManager, this._rootLayoutManager.isSingleColumnMode());\n\n        break;\n\n      case \"visible\":\n        this.callBase(args);\n\n        if (args.value) {\n          triggerShownEvent(this.$element());\n        }\n\n        break;\n\n      case \"validationGroup\":\n        ValidationEngine.removeGroup(args.previousValue || this);\n\n        this._invalidate();\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  _itemsOptionChangedHandler: function _itemsOptionChangedHandler(args) {\n    var nameParts = args.fullName.split(\".\");\n    var value = args.value;\n\n    var itemPath = this._getItemPath(nameParts);\n\n    var item = this.option(itemPath);\n    var optionNameWithoutPath = args.fullName.replace(itemPath + \".\", \"\");\n    var simpleOptionName = optionNameWithoutPath.split(\".\")[0].replace(/\\[\\d+]/, \"\");\n\n    var itemAction = this._tryCreateItemOptionAction(simpleOptionName, item, item[simpleOptionName], args.previousValue, itemPath);\n\n    var result = this._tryExecuteItemOptionAction(itemAction) || this._tryChangeLayoutManagerItemOption(args.fullName, value);\n\n    if (!result && item) {\n      this._changeItemOption(item, optionNameWithoutPath, value);\n\n      var items = this._generateItemsFromData(this.option(\"items\"));\n\n      this.option(\"items\", items);\n      result = true;\n    }\n\n    return result;\n  },\n  _formDataOptionChangedHandler: function _formDataOptionChangedHandler(args) {\n    var nameParts = args.fullName.split(\".\");\n    var value = args.value;\n    var dataField = nameParts.slice(1).join(\".\");\n    var editor = this.getEditor(dataField);\n\n    if (editor) {\n      editor.option(\"value\", value);\n    } else {\n      this._triggerOnFieldDataChanged({\n        dataField: dataField,\n        value: value\n      });\n    }\n\n    return true;\n  },\n  _tryCreateItemOptionAction: function _tryCreateItemOptionAction(optionName, item, value, previousValue, itemPath) {\n    if (\"tabs\" === optionName) {\n      this._itemsRunTimeInfo.removeItemsByPathStartWith(\"\".concat(itemPath, \".tabs\"));\n\n      value = this._prepareItems(value, true, itemPath, true);\n    }\n\n    return tryCreateItemOptionAction(optionName, {\n      item: item,\n      value: value,\n      previousValue: previousValue,\n      itemsRunTimeInfo: this._itemsRunTimeInfo\n    });\n  },\n  _tryExecuteItemOptionAction: function _tryExecuteItemOptionAction(action) {\n    return action && action.tryExecute();\n  },\n  _updateValidationGroupAndSummaryIfNeeded: function _updateValidationGroupAndSummaryIfNeeded(fullName) {\n    var optionName = getOptionNameFromFullName(fullName);\n\n    if (ITEM_OPTIONS_FOR_VALIDATION_UPDATING.indexOf(optionName) > -1) {\n      ValidationEngine.addGroup(this._getValidationGroup());\n\n      if (this.option(\"showValidationSummary\")) {\n        var _this$_validationSumm2;\n\n        null === (_this$_validationSumm2 = this._validationSummary) || void 0 === _this$_validationSumm2 ? void 0 : _this$_validationSumm2._initGroupRegistration();\n      }\n    }\n  },\n  _setLayoutManagerItemOption: function _setLayoutManagerItemOption(layoutManager, optionName, value, path) {\n    var _this6 = this;\n\n    if (this._updateLockCount > 0) {\n      !layoutManager._updateLockCount && layoutManager.beginUpdate();\n\n      var key = this._itemsRunTimeInfo.findKeyByPath(path);\n\n      this.postponedOperations.add(key, function () {\n        !layoutManager._disposed && layoutManager.endUpdate();\n        return new Deferred().resolve();\n      });\n    }\n\n    var contentReadyHandler = function contentReadyHandler(e) {\n      e.component.off(\"contentReady\", contentReadyHandler);\n\n      if (isFullPathContainsTabs(path)) {\n        var tabPath = tryGetTabPath(path);\n\n        var tabLayoutManager = _this6._itemsRunTimeInfo.findGroupOrTabLayoutManagerByPath(tabPath);\n\n        if (tabLayoutManager) {\n          _this6._alignLabelsInColumn({\n            items: tabLayoutManager.option(\"items\"),\n            layoutManager: tabLayoutManager,\n            $container: tabLayoutManager.$element(),\n            inOneColumn: tabLayoutManager.isSingleColumnMode()\n          });\n        }\n      } else {\n        _this6._alignLabels(_this6._rootLayoutManager, _this6._rootLayoutManager.isSingleColumnMode());\n      }\n    };\n\n    layoutManager.on(\"contentReady\", contentReadyHandler);\n    layoutManager.option(optionName, value);\n\n    this._updateValidationGroupAndSummaryIfNeeded(optionName);\n  },\n  _tryChangeLayoutManagerItemOption: function _tryChangeLayoutManagerItemOption(fullName, value) {\n    var nameParts = fullName.split(\".\");\n    var optionName = getOptionNameFromFullName(fullName);\n\n    if (\"items\" === optionName && nameParts.length > 1) {\n      var itemPath = this._getItemPath(nameParts);\n\n      var layoutManager = this._itemsRunTimeInfo.findGroupOrTabLayoutManagerByPath(itemPath);\n\n      if (layoutManager) {\n        this._itemsRunTimeInfo.removeItemsByItems(layoutManager.getItemsRunTimeInfo());\n\n        var items = this._prepareItems(value, false, itemPath);\n\n        this._setLayoutManagerItemOption(layoutManager, optionName, items, itemPath);\n\n        return true;\n      }\n    } else if (nameParts.length > 2) {\n      var endPartIndex = nameParts.length - 2;\n\n      var _itemPath = this._getItemPath(nameParts.slice(0, endPartIndex));\n\n      var _layoutManager = this._itemsRunTimeInfo.findGroupOrTabLayoutManagerByPath(_itemPath);\n\n      if (_layoutManager) {\n        var fullOptionName = getFullOptionName(nameParts[endPartIndex], optionName);\n\n        if (\"editorType\" === optionName) {\n          if (_layoutManager.option(fullOptionName) !== value) {\n            return false;\n          }\n        }\n\n        if (\"visible\" === optionName) {\n          var formItems = this.option(getFullOptionName(_itemPath, \"items\"));\n\n          if (formItems && formItems.length) {\n            var layoutManagerItems = _layoutManager.option(\"items\");\n\n            formItems.forEach(function (item, index) {\n              var layoutItem = layoutManagerItems[index];\n              layoutItem.visibleIndex = item.visibleIndex;\n            });\n          }\n        }\n\n        this._setLayoutManagerItemOption(_layoutManager, fullOptionName, value, _itemPath);\n\n        return true;\n      }\n    }\n\n    return false;\n  },\n  _tryChangeLayoutManagerItemOptions: function _tryChangeLayoutManagerItemOptions(itemPath, options) {\n    var _this7 = this;\n\n    var result;\n    this.beginUpdate();\n    each(options, function (optionName, optionValue) {\n      result = _this7._tryChangeLayoutManagerItemOption(getFullOptionName(itemPath, optionName), optionValue);\n\n      if (!result) {\n        return false;\n      }\n    });\n    this.endUpdate();\n    return result;\n  },\n  _getItemPath: function _getItemPath(nameParts) {\n    var itemPath = nameParts[0];\n    var i;\n\n    for (i = 1; i < nameParts.length; i++) {\n      if (-1 !== nameParts[i].search(/items\\[\\d+]|tabs\\[\\d+]/)) {\n        itemPath += \".\" + nameParts[i];\n      } else {\n        break;\n      }\n    }\n\n    return itemPath;\n  },\n  _triggerOnFieldDataChanged: function _triggerOnFieldDataChanged(args) {\n    this._createActionByOption(\"onFieldDataChanged\")(args);\n  },\n  _triggerOnFieldDataChangedByDataSet: function _triggerOnFieldDataChangedByDataSet(data) {\n    var that = this;\n\n    if (data && isObject(data)) {\n      each(data, function (dataField, value) {\n        that._triggerOnFieldDataChanged({\n          dataField: dataField,\n          value: value\n        });\n      });\n    }\n  },\n  _updateFieldValue: function _updateFieldValue(dataField, value) {\n    if (isDefined(this.option(\"formData\"))) {\n      var editor = this.getEditor(dataField);\n      this.option(\"formData.\" + dataField, value);\n\n      if (editor) {\n        var editorValue = editor.option(\"value\");\n\n        if (editorValue !== value) {\n          editor.option(\"value\", value);\n        }\n      }\n    }\n  },\n  _generateItemsFromData: function _generateItemsFromData(items) {\n    var formData = this.option(\"formData\");\n    var result = [];\n\n    if (!items && isDefined(formData)) {\n      each(formData, function (dataField) {\n        result.push({\n          dataField: dataField\n        });\n      });\n    }\n\n    if (items) {\n      each(items, function (index, item) {\n        if (isObject(item)) {\n          result.push(item);\n        } else {\n          result.push({\n            dataField: item\n          });\n        }\n      });\n    }\n\n    return result;\n  },\n  _getItemByField: function _getItemByField(field, items) {\n    var that = this;\n    var fieldParts = isObject(field) ? field : that._getFieldParts(field);\n    var fieldName = fieldParts.fieldName;\n    var fieldPath = fieldParts.fieldPath;\n    var resultItem;\n\n    if (items.length) {\n      each(items, function (index, item) {\n        var itemType = item.itemType;\n\n        if (fieldPath.length) {\n          var path = fieldPath.slice();\n          item = that._getItemByFieldPath(path, fieldName, item);\n        } else if (\"group\" === itemType && !(item.caption || item.name) || \"tabbed\" === itemType && !item.name) {\n          var subItemsField = that._getSubItemField(itemType);\n\n          item.items = that._generateItemsFromData(item.items);\n          item = that._getItemByField({\n            fieldName: fieldName,\n            fieldPath: fieldPath\n          }, item[subItemsField]);\n        }\n\n        if (isEqualToDataFieldOrNameOrTitleOrCaption(item, fieldName)) {\n          resultItem = item;\n          return false;\n        }\n      });\n    }\n\n    return resultItem;\n  },\n  _getFieldParts: function _getFieldParts(field) {\n    var fieldName = field;\n    var separatorIndex = fieldName.indexOf(\".\");\n    var resultPath = [];\n\n    while (-1 !== separatorIndex) {\n      resultPath.push(fieldName.substr(0, separatorIndex));\n      fieldName = fieldName.substr(separatorIndex + 1);\n      separatorIndex = fieldName.indexOf(\".\");\n    }\n\n    return {\n      fieldName: fieldName,\n      fieldPath: resultPath.reverse()\n    };\n  },\n  _getItemByFieldPath: function _getItemByFieldPath(path, fieldName, item) {\n    var itemType = item.itemType;\n\n    var subItemsField = this._getSubItemField(itemType);\n\n    var isItemWithSubItems = \"group\" === itemType || \"tabbed\" === itemType || item.title;\n    var result;\n\n    do {\n      if (isItemWithSubItems) {\n        var name = item.name || item.caption || item.title;\n        var isGroupWithName = isDefined(name);\n        var nameWithoutSpaces = getTextWithoutSpaces(name);\n        var pathNode = void 0;\n        item[subItemsField] = this._generateItemsFromData(item[subItemsField]);\n\n        if (isGroupWithName) {\n          pathNode = path.pop();\n        }\n\n        if (!path.length) {\n          result = this._getItemByField(fieldName, item[subItemsField]);\n\n          if (result) {\n            break;\n          }\n        }\n\n        if (!isGroupWithName || isGroupWithName && nameWithoutSpaces === pathNode) {\n          if (path.length) {\n            result = this._searchItemInEverySubItem(path, fieldName, item[subItemsField]);\n          }\n        }\n      } else {\n        break;\n      }\n    } while (path.length && !isDefined(result));\n\n    return result;\n  },\n  _getSubItemField: function _getSubItemField(itemType) {\n    return \"tabbed\" === itemType ? \"tabs\" : \"items\";\n  },\n  _searchItemInEverySubItem: function _searchItemInEverySubItem(path, fieldName, items) {\n    var that = this;\n    var result;\n    each(items, function (index, groupItem) {\n      result = that._getItemByFieldPath(path.slice(), fieldName, groupItem);\n\n      if (result) {\n        return false;\n      }\n    });\n\n    if (!result) {\n      result = false;\n    }\n\n    return result;\n  },\n  _changeItemOption: function _changeItemOption(item, option, value) {\n    if (isObject(item)) {\n      item[option] = value;\n    }\n  },\n  _dimensionChanged: function _dimensionChanged() {\n    var currentScreenFactor = this._getCurrentScreenFactor();\n\n    if (this._lastMarkupScreenFactor !== currentScreenFactor) {\n      if (this._isColCountChanged(this._lastMarkupScreenFactor, currentScreenFactor)) {\n        this._targetScreenFactor = currentScreenFactor;\n\n        this._refresh();\n\n        this._targetScreenFactor = void 0;\n      }\n\n      this._lastMarkupScreenFactor = currentScreenFactor;\n    }\n  },\n  _isColCountChanged: function _isColCountChanged(oldScreenSize, newScreenSize) {\n    var isChanged = false;\n    each(this._cachedColCountOptions, function (index, item) {\n      if (item.colCountByScreen[oldScreenSize] !== item.colCountByScreen[newScreenSize]) {\n        isChanged = true;\n        return false;\n      }\n    });\n    return isChanged;\n  },\n  _refresh: function _refresh() {\n    var editorSelector = \".\" + FOCUSED_STATE_CLASS + \" input, .\" + FOCUSED_STATE_CLASS + \" textarea\";\n    eventsEngine.trigger(this.$element().find(editorSelector), \"change\");\n    this.callBase();\n  },\n  _resetValues: function _resetValues() {\n    this._itemsRunTimeInfo.each(function (_, itemRunTimeInfo) {\n      if (isDefined(itemRunTimeInfo.widgetInstance) && Editor.isEditor(itemRunTimeInfo.widgetInstance)) {\n        itemRunTimeInfo.widgetInstance.reset();\n        itemRunTimeInfo.widgetInstance.option(\"isValid\", true);\n      }\n    });\n\n    ValidationEngine.resetGroup(this._getValidationGroup());\n  },\n  _updateData: function _updateData(data, value, isComplexData) {\n    var that = this;\n\n    var _data = isComplexData ? value : data;\n\n    if (isObject(_data)) {\n      each(_data, function (dataField, fieldValue) {\n        that._updateData(isComplexData ? data + \".\" + dataField : dataField, fieldValue, isObject(fieldValue));\n      });\n    } else if (isString(data)) {\n      that._updateFieldValue(data, value);\n    }\n  },\n  registerKeyHandler: function registerKeyHandler(key, handler) {\n    this.callBase(key, handler);\n\n    this._itemsRunTimeInfo.each(function (_, itemRunTimeInfo) {\n      if (isDefined(itemRunTimeInfo.widgetInstance)) {\n        itemRunTimeInfo.widgetInstance.registerKeyHandler(key, handler);\n      }\n    });\n  },\n  _focusTarget: function _focusTarget() {\n    return this.$element().find(\".\" + FIELD_ITEM_CONTENT_CLASS + \" [tabindex]\").first();\n  },\n  _visibilityChanged: function _visibilityChanged() {},\n  _clearAutoColCountChangedTimeout: function _clearAutoColCountChangedTimeout() {\n    if (this.autoColCountChangedTimeoutId) {\n      clearTimeout(this.autoColCountChangedTimeoutId);\n      this.autoColCountChangedTimeoutId = void 0;\n    }\n  },\n  _dispose: function _dispose() {\n    this._clearAutoColCountChangedTimeout();\n\n    ValidationEngine.removeGroup(this._getValidationGroup());\n    this.callBase();\n  },\n  resetValues: function resetValues() {\n    this._resetValues();\n  },\n  updateData: function updateData(data, value) {\n    this._updateData(data, value);\n  },\n  getEditor: function getEditor(dataField) {\n    return this._itemsRunTimeInfo.findWidgetInstanceByDataField(dataField) || this._itemsRunTimeInfo.findWidgetInstanceByName(dataField);\n  },\n  getButton: function getButton(name) {\n    return this._itemsRunTimeInfo.findWidgetInstanceByName(name);\n  },\n  updateDimensions: function updateDimensions() {\n    var that = this;\n    var deferred = new Deferred();\n\n    if (that._scrollable) {\n      that._scrollable.update().done(function () {\n        deferred.resolveWith(that);\n      });\n    } else {\n      deferred.resolveWith(that);\n    }\n\n    return deferred.promise();\n  },\n  itemOption: function itemOption(id, option, value) {\n    var _this8 = this;\n\n    var items = this._generateItemsFromData(this.option(\"items\"));\n\n    var item = this._getItemByField(id, items);\n\n    var path = getItemPath(items, item);\n\n    if (!item) {\n      return;\n    }\n\n    switch (arguments.length) {\n      case 1:\n        return item;\n\n      case 3:\n        var itemAction = this._tryCreateItemOptionAction(option, item, value, item[option], path);\n\n        this._changeItemOption(item, option, value);\n\n        var fullName = getFullOptionName(path, option);\n\n        if (!this._tryExecuteItemOptionAction(itemAction) && !this._tryChangeLayoutManagerItemOption(fullName, value)) {\n          this.option(\"items\", items);\n        }\n\n        break;\n\n      default:\n        if (isObject(option)) {\n          if (!this._tryChangeLayoutManagerItemOptions(path, option)) {\n            var allowUpdateItems;\n            each(option, function (optionName, optionValue) {\n              var itemAction = _this8._tryCreateItemOptionAction(optionName, item, optionValue, item[optionName], path);\n\n              _this8._changeItemOption(item, optionName, optionValue);\n\n              if (!allowUpdateItems && !_this8._tryExecuteItemOptionAction(itemAction)) {\n                allowUpdateItems = true;\n              }\n            });\n            allowUpdateItems && this.option(\"items\", items);\n          }\n        }\n\n    }\n  },\n  validate: function validate() {\n    return ValidationEngine.validateGroup(this._getValidationGroup());\n  },\n  getItemID: function getItemID(name) {\n    return \"dx_\" + this.option(\"formID\") + \"_\" + (name || new Guid());\n  },\n  getTargetScreenFactor: function getTargetScreenFactor() {\n    return this._targetScreenFactor;\n  }\n});\nregisterComponent(\"dxForm\", Form);\nexport default Form;","map":null,"metadata":{},"sourceType":"module"}