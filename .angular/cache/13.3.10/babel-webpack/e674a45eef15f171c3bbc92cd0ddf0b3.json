{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/themes.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { extend } from \"../core/utils/extend\";\nimport { each } from \"../core/utils/iterator\";\nimport { normalizeEnum } from \"./core/utils\";\nimport { current as getCurrentTheme } from \"../ui/themes\";\nimport { isEmptyObject } from \"../core/utils/type\";\nimport lightThemes from \"./core/themes/generic.light\";\nimport carmineThemes from \"./core/themes/generic.carmine\";\nimport darkThemes from \"./core/themes/generic.dark\";\nimport contrastThemes from \"./core/themes/generic.contrast\";\nimport darkMoonThemes from \"./core/themes/generic.darkmoon\";\nimport darkVioletThemes from \"./core/themes/generic.darkviolet\";\nimport greenMistThemes from \"./core/themes/generic.greenmist\";\nimport softBlueThemes from \"./core/themes/generic.softblue\";\nimport materialThemes from \"./core/themes/material\";\nvar themes = {};\nvar themesMapping = {};\nvar themesSchemeMapping = {};\nvar _extend = extend;\nvar _each = each;\nvar currentThemeName = null;\nvar defaultTheme;\nvar nextCacheUid = 0;\nvar widgetsCache = {};\nexport function getTheme(themeName) {\n  var name = normalizeEnum(themeName);\n  return themes[name] || themes[themesMapping[name] || currentTheme()];\n}\n\nfunction findThemeNameByName(name, scheme) {\n  return themesMapping[name + \".\" + scheme] || themesSchemeMapping[name + \".\" + scheme] || themesMapping[name];\n}\n\nfunction findThemeNameByPlatform(platform, version, scheme) {\n  return findThemeNameByName(platform + version, scheme) || findThemeNameByName(platform, scheme);\n}\n\nexport function currentTheme(themeName, colorScheme) {\n  if (!arguments.length) {\n    return currentThemeName || findThemeNameByName(getCurrentTheme()) || defaultTheme;\n  }\n\n  var scheme = normalizeEnum(colorScheme);\n  currentThemeName = (themeName && themeName.platform ? findThemeNameByPlatform(normalizeEnum(themeName.platform), themeName.version, scheme) : findThemeNameByName(normalizeEnum(themeName), scheme)) || currentThemeName;\n  return this;\n}\n\nfunction getThemeInfo(themeName, splitter) {\n  var k = themeName.indexOf(splitter);\n  return k > 0 ? {\n    name: themeName.substring(0, k),\n    scheme: themeName.substring(k + 1)\n  } : null;\n}\n\nfunction registerThemeName(themeName, targetThemeName) {\n  var themeInfo = getThemeInfo(themeName, \".\") || {\n    name: themeName\n  };\n  var name = themeInfo.name;\n  var scheme = themeInfo.scheme;\n\n  if (scheme) {\n    themesMapping[name] = themesMapping[name] || targetThemeName;\n    themesMapping[name + \".\" + scheme] = targetThemeName;\n  } else {\n    themesMapping[name] = targetThemeName;\n  }\n}\n\nexport function registerTheme(theme, baseThemeName) {\n  var themeName = normalizeEnum(theme && theme.name);\n\n  if (themeName) {\n    theme.isDefault && (defaultTheme = themeName);\n    registerThemeName(themeName, themeName);\n    themes[themeName] = _extend(true, {}, getTheme(baseThemeName), patchTheme(theme));\n  }\n}\nexport function registerThemeSchemeAlias(from, to) {\n  themesSchemeMapping[from] = to;\n}\n\nfunction mergeScalar(target, field, source, sourceValue) {\n  var _value = source ? source[field] : sourceValue;\n\n  if (void 0 !== _value && void 0 === target[field]) {\n    target[field] = _value;\n  }\n}\n\nfunction mergeObject(target, field, source, sourceValue) {\n  var _value = source ? source[field] : sourceValue;\n\n  if (void 0 !== _value) {\n    target[field] = _extend(true, {}, _value, target[field]);\n  }\n}\n\nfunction patchTheme(theme) {\n  theme = _extend(true, {\n    loadingIndicator: {\n      font: {}\n    },\n    export: {\n      font: {}\n    },\n    legend: {\n      font: {},\n      border: {}\n    },\n    title: {\n      font: {}\n    },\n    tooltip: {\n      font: {}\n    },\n    \"chart:common\": {},\n    \"chart:common:axis\": {\n      grid: {},\n      minorGrid: {},\n      tick: {},\n      minorTick: {},\n      title: {\n        font: {}\n      },\n      label: {\n        font: {}\n      }\n    },\n    \"chart:common:annotation\": {\n      font: {},\n      border: {}\n    },\n    chart: {\n      commonSeriesSettings: {\n        candlestick: {}\n      }\n    },\n    pie: {},\n    polar: {},\n    gauge: {\n      scale: {\n        tick: {},\n        minorTick: {},\n        label: {\n          font: {}\n        }\n      }\n    },\n    barGauge: {},\n    funnel: {},\n    sankey: {},\n    map: {\n      background: {}\n    },\n    treeMap: {\n      tile: {\n        selectionStyle: {\n          border: {}\n        }\n      },\n      group: {\n        border: {},\n        selectionStyle: {\n          border: {}\n        },\n        label: {\n          font: {}\n        }\n      }\n    },\n    rangeSelector: {\n      scale: {\n        tick: {},\n        minorTick: {},\n        label: {\n          font: {}\n        }\n      },\n      chart: {}\n    },\n    sparkline: {},\n    bullet: {}\n  }, theme);\n  mergeScalar(theme.loadingIndicator, \"backgroundColor\", theme);\n  mergeScalar(theme.chart.commonSeriesSettings.candlestick, \"innerColor\", null, theme.backgroundColor);\n  mergeScalar(theme.map.background, \"color\", null, theme.backgroundColor);\n  mergeScalar(theme.title.font, \"color\", null, theme.primaryTitleColor);\n  mergeObject(theme.title, \"subtitle\", null, theme.title);\n  mergeScalar(theme.legend.font, \"color\", null, theme.secondaryTitleColor);\n  mergeScalar(theme.legend.border, \"color\", null, theme.gridColor);\n  patchAxes(theme);\n\n  _each([\"chart\", \"pie\", \"polar\", \"gauge\", \"barGauge\", \"map\", \"treeMap\", \"funnel\", \"rangeSelector\", \"sparkline\", \"bullet\", \"sankey\"], function (_, section) {\n    mergeScalar(theme[section], \"redrawOnResize\", theme);\n    mergeScalar(theme[section], \"containerBackgroundColor\", null, theme.backgroundColor);\n    mergeObject(theme[section], \"tooltip\", theme);\n    mergeObject(theme[section], \"export\", theme);\n  });\n\n  _each([\"chart\", \"pie\", \"polar\", \"gauge\", \"barGauge\", \"map\", \"treeMap\", \"funnel\", \"rangeSelector\", \"sankey\"], function (_, section) {\n    mergeObject(theme[section], \"loadingIndicator\", theme);\n    mergeObject(theme[section], \"legend\", theme);\n    mergeObject(theme[section], \"title\", theme);\n  });\n\n  _each([\"chart\", \"pie\", \"polar\"], function (_, section) {\n    mergeObject(theme, section, null, theme[\"chart:common\"]);\n  });\n\n  _each([\"chart\", \"polar\"], function (_, section) {\n    theme[section] = theme[section] || {};\n    mergeObject(theme[section], \"commonAxisSettings\", null, theme[\"chart:common:axis\"]);\n  });\n\n  _each([\"chart\", \"polar\", \"map\", \"pie\"], function (_, section) {\n    theme[section] = theme[section] || {};\n    mergeObject(theme[section], \"commonAnnotationSettings\", null, theme[\"chart:common:annotation\"]);\n  });\n\n  mergeObject(theme.rangeSelector.chart, \"commonSeriesSettings\", theme.chart);\n  mergeObject(theme.rangeSelector.chart, \"dataPrepareSettings\", theme.chart);\n  mergeScalar(theme.treeMap.group.border, \"color\", null, theme.gridColor);\n  mergeScalar(theme.treeMap.tile.selectionStyle.border, \"color\", null, theme.primaryTitleColor);\n  mergeScalar(theme.treeMap.group.selectionStyle.border, \"color\", null, theme.primaryTitleColor);\n  mergeScalar(theme.map.legend, \"backgroundColor\", theme);\n  patchMapLayers(theme);\n  return theme;\n}\n\nfunction patchAxes(theme) {\n  var commonAxisSettings = theme[\"chart:common:axis\"];\n\n  _each([commonAxisSettings.grid, commonAxisSettings.minorGrid], function (_, obj) {\n    mergeScalar(obj, \"color\", null, theme.gridColor);\n  });\n\n  _each([commonAxisSettings, commonAxisSettings.tick, commonAxisSettings.minorTick, commonAxisSettings.label.font], function (_, obj) {\n    mergeScalar(obj, \"color\", null, theme.axisColor);\n  });\n\n  mergeScalar(commonAxisSettings.title.font, \"color\", null, theme.secondaryTitleColor);\n  mergeScalar(theme.gauge.scale.label.font, \"color\", null, theme.axisColor);\n  mergeScalar(theme.gauge.scale.tick, \"color\", null, theme.backgroundColor);\n  mergeScalar(theme.gauge.scale.minorTick, \"color\", null, theme.backgroundColor);\n  mergeScalar(theme.rangeSelector.scale.label.font, \"color\", null, theme.axisColor);\n}\n\nfunction patchMapLayers(theme) {\n  var map = theme.map;\n\n  _each([\"area\", \"line\", \"marker\"], function (_, section) {\n    mergeObject(map, \"layer:\" + section, null, map.layer);\n  });\n\n  _each([\"dot\", \"bubble\", \"pie\", \"image\"], function (_, section) {\n    mergeObject(map, \"layer:marker:\" + section, null, map[\"layer:marker\"]);\n  });\n}\n\nexport function addCacheItem(target) {\n  var cacheUid = ++nextCacheUid;\n  target._cache = cacheUid;\n  widgetsCache[cacheUid] = target;\n}\nexport function removeCacheItem(target) {\n  delete widgetsCache[target._cache];\n}\nexport function refreshTheme() {\n  _each(widgetsCache, function () {\n    this.refresh();\n  });\n\n  return this;\n}\n\nif (isEmptyObject(themes) && isEmptyObject(themesMapping) && !defaultTheme) {\n  [].concat(lightThemes, carmineThemes, darkThemes, contrastThemes, darkMoonThemes, darkVioletThemes, greenMistThemes, softBlueThemes, materialThemes).forEach(function (t) {\n    registerTheme(t.theme, t.baseThemeName);\n  });\n}","map":null,"metadata":{},"sourceType":"module"}