{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/sankey/link_item.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { COLOR_MODE_GRADIENT, COLOR_MODE_SOURCE, COLOR_MODE_TARGET } from \"./constants\";\nvar states = [\"normal\", \"adjacentNodeHover\", \"hover\"];\nimport { isDefined } from \"../../core/utils/type\";\n\nfunction compileAttrs(color, itemOptions, itemBaseOptions, gradient) {\n  var border = itemOptions.border;\n  var baseBorder = itemBaseOptions.border;\n  var borderVisible = isDefined(border.visible) ? border.visible : baseBorder.visible;\n  var borderWidth = isDefined(border.width) ? border.width : baseBorder.width;\n  var borderOpacity = isDefined(border.opacity) ? border.opacity : isDefined(baseBorder.opacity) ? baseBorder.opacity : 1;\n  var opacity = isDefined(itemOptions.opacity) ? itemOptions.opacity : isDefined(itemBaseOptions.opacity) ? itemBaseOptions.opacity : 1;\n  var fill = itemOptions.color || color;\n\n  if (itemBaseOptions.colorMode === COLOR_MODE_TARGET || itemBaseOptions.colorMode === COLOR_MODE_SOURCE) {\n    fill = color;\n  } else if (itemBaseOptions.colorMode === COLOR_MODE_GRADIENT && gradient && isDefined(gradient.id)) {\n    fill = gradient.id;\n  }\n\n  return {\n    fill: fill,\n    \"stroke-width\": borderVisible ? borderWidth : 0,\n    stroke: itemOptions.border.color || itemBaseOptions.border.color,\n    \"stroke-opacity\": borderOpacity,\n    opacity: opacity,\n    hatching: itemOptions.hatching\n  };\n}\n\nfunction Link(widget, params) {\n  var widgetOffset = widget._renderer.getRootOffset();\n\n  this.code = 0;\n  this.widget = widget;\n  this.color = params.color;\n  this.connection = params.connection;\n  this.d = params.d;\n  this.options = params.options;\n  this.boundingRect = params.boundingRect, this.coords = {\n    x: params.boundingRect.x + params.boundingRect.width / 2 + widgetOffset.left,\n    y: params.boundingRect.y + params.boundingRect.height / 2 + widgetOffset.top\n  };\n  this.states = {\n    normal: compileAttrs(this.color, this.options, this.options, params.gradient),\n    adjacentNodeHover: compileAttrs(this.color, {\n      opacity: 0,\n      border: {}\n    }, this.options, params.gradient),\n    hover: compileAttrs(this.color, {\n      opacity: 0,\n      border: {}\n    }, this.options, params.gradient)\n  };\n  this.overlayStates = {\n    normal: compileAttrs(this.color, {\n      opacity: 0,\n      border: {}\n    }, this.options),\n    adjacentNodeHover: compileAttrs(this.color, this.options.hoverStyle, this.options),\n    hover: compileAttrs(this.color, this.options.hoverStyle, this.options)\n  };\n}\n\nLink.prototype = {\n  getState: function getState() {\n    return states[this.code];\n  },\n  isHovered: function isHovered() {\n    return 2 === this.code;\n  },\n  isAdjacentNodeHovered: function isAdjacentNodeHovered() {\n    return 1 === this.code;\n  },\n  setState: function setState(code, state) {\n    if (state) {\n      this.code = code;\n    } else {\n      this.code = 0;\n      this.hideTooltip();\n    }\n\n    this.widget._applyLinksAppearance();\n  },\n  setHover: function setHover() {\n    this.hover(true);\n  },\n  hover: function hover(state) {\n    if (!this.widget._getOption(\"hoverEnabled\", true) || state === this.isHovered()) {\n      return;\n    }\n\n    this.widget._suspend();\n\n    state && this.widget.clearHover();\n    this.setState(2, state);\n\n    this.widget._eventTrigger(\"linkHoverChanged\", {\n      target: this\n    });\n\n    this.widget._resume();\n  },\n  adjacentNodeHover: function adjacentNodeHover(state) {\n    if (!this.widget._getOption(\"hoverEnabled\", true) || state === this.isAdjacentNodeHovered()) {\n      return;\n    }\n\n    this.widget._suspend();\n\n    this.setState(1, state);\n\n    this.widget._resume();\n  },\n  setAdjacentNodeHover: function setAdjacentNodeHover() {\n    this.adjacentNodeHover(true);\n  },\n  showTooltip: function showTooltip(coords) {\n    this.widget._getOption(\"hoverEnabled\", true) && this.widget._tooltip && this.widget._tooltip.show({\n      type: \"link\",\n      info: {\n        source: this.connection.source,\n        target: this.connection.target,\n        weight: this.connection.weight\n      }\n    }, \"undefined\" !== typeof coords ? {\n      x: coords[0],\n      y: coords[1]\n    } : this.coords);\n  },\n  hideTooltip: function hideTooltip() {\n    this.widget._tooltip && this.widget._tooltip.hide();\n  }\n};\nexport default Link;","map":null,"metadata":{},"sourceType":"module"}