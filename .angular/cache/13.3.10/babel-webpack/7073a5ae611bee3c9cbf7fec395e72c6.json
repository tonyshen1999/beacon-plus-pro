{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/vector_map/vector_map.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { parseScalar as _parseScalar } from \"../core/utils\";\nimport { Projection } from \"./projection.main\";\nimport { ControlBar } from \"./control_bar\";\nimport { GestureHandler } from \"./gesture_handler\";\nimport { Tracker } from \"./tracker\";\nimport { DataExchanger } from \"./data_exchanger\";\nimport { LegendsControl } from \"./legend\";\nimport { LayoutControl } from \"./layout\";\nimport { MapLayerCollection, getMaxBound } from \"./map_layer\";\nimport { TooltipViewer } from \"./tooltip_viewer\";\nimport { generateDataKey } from \"./vector_map.utils\";\nvar DEFAULT_WIDTH = 800;\nvar DEFAULT_HEIGHT = 400;\nvar RE_STARTS_LAYERS = /^layers/;\nvar RE_ENDS_DATA_SOURCE = /\\.dataSource$/;\nimport \"./projection\";\nimport BaseWidget from \"../core/base_widget\";\n\nfunction mergeBounds(sumBounds, dataBounds) {\n  return dataBounds ? [Math.min(dataBounds[0], dataBounds[2], sumBounds[0]), Math.min(dataBounds[1], dataBounds[3], sumBounds[3]), Math.max(dataBounds[0], dataBounds[2], sumBounds[2]), Math.max(dataBounds[1], dataBounds[3], sumBounds[1])] : sumBounds;\n}\n\nvar dxVectorMap = BaseWidget.inherit({\n  _eventsMap: {\n    onClick: {\n      name: \"click\"\n    },\n    onCenterChanged: {\n      name: \"centerChanged\"\n    },\n    onZoomFactorChanged: {\n      name: \"zoomFactorChanged\"\n    },\n    onHoverChanged: {\n      name: \"hoverChanged\"\n    },\n    onSelectionChanged: {\n      name: \"selectionChanged\"\n    }\n  },\n  _rootClassPrefix: \"dxm\",\n  _rootClass: \"dxm-vector-map\",\n  _themeSection: \"map\",\n  _fontFields: [\"layer:area.label.font\", \"layer:marker:dot.label.font\", \"layer:marker:bubble.label.font\", \"layer:marker:pie.label.font\", \"layer:marker:image.label.font\", \"legend.font\", \"legend.title.font\", \"legend.title.subtitle.font\"],\n  _initLayerCollection: function _initLayerCollection(dataKey) {\n    var that = this;\n    that._layerCollection = new MapLayerCollection({\n      renderer: that._renderer,\n      projection: that._projection,\n      themeManager: that._themeManager,\n      tracker: that._tracker,\n      dataKey: dataKey,\n      eventTrigger: that._eventTrigger,\n      dataExchanger: that._dataExchanger,\n      tooltip: that._tooltip,\n      notifyDirty: that._notifyDirty,\n      notifyReady: that._notifyReady,\n      dataReady: function dataReady() {\n        var bounds;\n\n        if (that.option(\"getBoundsFromData\") && !that.option(\"bounds\")) {\n          that._preventProjectionEvents();\n\n          bounds = that._getBoundsFromData();\n\n          that._projection.setBounds(bounds);\n\n          that._allowProjectionEvents();\n        }\n\n        if (!that.option(\"projection\")) {\n          bounds = bounds || that._getBoundsFromData();\n\n          if (Math.ceil(bounds[0]) < -180 || Math.ceil(bounds[3]) < -90 || Math.floor(bounds[2]) > 180 || Math.floor(bounds[1]) > 90) {\n            var longitudeLength = bounds[2] - bounds[0];\n            var latitudeLength = bounds[1] - bounds[3];\n\n            that._projection.setEngine({\n              to: function to(coordinates) {\n                return [2 * (coordinates[0] - bounds[0]) / longitudeLength - 1, 2 * (coordinates[1] - bounds[3]) / latitudeLength - 1];\n              },\n              from: function from(coordinates) {\n                return [(coordinates[0] + 1) * longitudeLength / 2 + bounds[0], (coordinates[1] + 1) * latitudeLength / 2 + bounds[3]];\n              }\n            });\n          }\n        }\n      }\n    });\n  },\n  _getBoundsFromData: function _getBoundsFromData() {\n    var bounds = this._getBoundingBoxFromDataSource();\n\n    if (!bounds) {\n      var boundsByData = getMaxBound(this.getLayers().map(function (l) {\n        return l.getBounds();\n      }));\n\n      if (boundsByData) {\n        bounds = boundsByData;\n      }\n    }\n\n    bounds = bounds || [];\n    bounds = [bounds[0], bounds[3], bounds[2], bounds[1]];\n    return bounds;\n  },\n  _initLegendsControl: function _initLegendsControl() {\n    this._legendsControl = new LegendsControl({\n      renderer: this._renderer,\n      container: this._root,\n      widget: this,\n      layoutControl: this._layoutControl,\n      themeManager: this._themeManager,\n      dataExchanger: this._dataExchanger,\n      notifyDirty: this._notifyDirty,\n      notifyReady: this._notifyReady\n    });\n  },\n  _initControlBar: function _initControlBar(dataKey) {\n    this._controlBar = new ControlBar({\n      renderer: this._renderer,\n      container: this._root,\n      layoutControl: this._layoutControl,\n      projection: this._projection,\n      tracker: this._tracker,\n      dataKey: dataKey\n    });\n  },\n  _initElements: function _initElements() {\n    var that = this;\n    var dataKey = generateDataKey();\n    var notifyCounter = 0;\n    var preventProjectionEvents;\n\n    that._preventProjectionEvents = function () {\n      preventProjectionEvents = true;\n    };\n\n    that._allowProjectionEvents = function () {\n      preventProjectionEvents = false;\n    };\n\n    that._notifyDirty = function () {\n      that._resetIsReady();\n\n      ++notifyCounter;\n    };\n\n    that._notifyReady = function () {\n      that._allowProjectionEvents();\n\n      if (0 === --notifyCounter) {\n        that._drawn();\n      }\n    };\n\n    that._preventProjectionEvents();\n\n    that._dataExchanger = new DataExchanger();\n    that._projection = new Projection({\n      centerChanged: function centerChanged(value) {\n        if (!preventProjectionEvents) {\n          that._eventTrigger(\"centerChanged\", {\n            center: value\n          });\n        }\n      },\n      zoomChanged: function zoomChanged(value) {\n        if (!preventProjectionEvents) {\n          that._eventTrigger(\"zoomFactorChanged\", {\n            zoomFactor: value\n          });\n        }\n      }\n    });\n    that._tracker = new Tracker({\n      root: that._root,\n      projection: that._projection,\n      dataKey: dataKey\n    });\n    that._gestureHandler = new GestureHandler({\n      projection: that._projection,\n      renderer: that._renderer,\n      tracker: that._tracker\n    });\n    that._layoutControl = new LayoutControl(that);\n\n    that._layoutControl.suspend();\n\n    that._initLayerCollection(dataKey);\n\n    that._createHtmlStructure();\n\n    that._initControlBar(dataKey);\n\n    that._initLegendsControl();\n\n    that._prepareExtraElements();\n\n    that._tooltipViewer = new TooltipViewer({\n      tracker: that._tracker,\n      tooltip: that._tooltip,\n      layerCollection: that._layerCollection\n    });\n  },\n  _change_RESUME_LAYOUT: function _change_RESUME_LAYOUT() {\n    this._layoutControl.resume();\n  },\n  _initialChanges: [\"PROJECTION\", \"RESUME_LAYOUT\", \"LAYOUT_INIT\", \"BOUNDS\", \"MAX_ZOOM_FACTOR\", \"ZOOM_FACTOR\", \"CENTER\"],\n  _layoutChangesOrder: [\"RESUME_LAYOUT\", \"LAYERS\"],\n  _customChangesOrder: [\"EXTRA_ELEMENTS\"],\n  _initCore: function _initCore() {\n    this._root = this._renderer.root.attr({\n      align: \"center\",\n      cursor: \"default\"\n    });\n\n    this._initElements();\n  },\n  _disposeCore: function _disposeCore() {\n    this._controlBar.dispose();\n\n    this._gestureHandler.dispose();\n\n    this._tracker.dispose();\n\n    this._legendsControl.dispose();\n\n    this._layerCollection.dispose();\n\n    this._layoutControl.dispose();\n\n    this._tooltipViewer.dispose();\n\n    this._dataExchanger.dispose();\n\n    this._projection.dispose();\n\n    this._dataExchanger = this._gestureHandler = this._projection = this._tracker = this._layoutControl = this._root = this._layerCollection = this._controlBar = this._legendsControl = null;\n  },\n  _setupInteraction: function _setupInteraction() {\n    var options = {\n      centeringEnabled: !!_parseScalar(this._getOption(\"panningEnabled\", true), true),\n      zoomingEnabled: !!_parseScalar(this._getOption(\"zoomingEnabled\", true), true)\n    };\n\n    this._gestureHandler.setInteraction(options);\n\n    this._controlBar.setInteraction(options);\n  },\n  _getDefaultSize: function _getDefaultSize() {\n    return {\n      width: DEFAULT_WIDTH,\n      height: DEFAULT_HEIGHT\n    };\n  },\n  _applySize: function _applySize(rect) {\n    var layout = {\n      left: rect[0],\n      top: rect[1],\n      width: rect[2] - rect[0],\n      height: rect[3] - rect[1],\n      right: 0,\n      bottom: 0\n    };\n\n    this._projection.setSize(layout);\n\n    this._layoutControl.setSize(layout);\n\n    this._layerCollection.setRect([layout.left, layout.top, layout.width, layout.height]);\n\n    this._requestChange([\"EXTRA_ELEMENTS\"]);\n  },\n  _optionChanging: function _optionChanging(name, currentValue, nextValue) {\n    if (currentValue && nextValue) {\n      if (RE_STARTS_LAYERS.test(name)) {\n        if (currentValue.dataSource && nextValue.dataSource && currentValue !== nextValue) {\n          currentValue.dataSource = null;\n        } else if (RE_ENDS_DATA_SOURCE.test(name)) {\n          this.option(name, null);\n        }\n      }\n    }\n  },\n  _applyChanges: function _applyChanges() {\n    this._notifyDirty();\n\n    this.callBase.apply(this, arguments);\n\n    this._notifyReady();\n  },\n  _optionChangesMap: {\n    background: \"BACKGROUND\",\n    layers: \"LAYERS\",\n    extraElements: \"EXTRA_ELEMENTS\",\n    controlBar: \"CONTROL_BAR\",\n    legends: \"LEGENDS\",\n    touchEnabled: \"TRACKER\",\n    wheelEnabled: \"TRACKER\",\n    panningEnabled: \"INTERACTION\",\n    zoomingEnabled: \"INTERACTION\",\n    projection: \"PROJECTION\",\n    bounds: \"BOUNDS\",\n    maxZoomFactor: \"MAX_ZOOM_FACTOR\",\n    zoomFactor: \"ZOOM_FACTOR\",\n    center: \"CENTER\"\n  },\n  _optionChangesOrder: [\"PROJECTION\", \"BOUNDS\", \"MAX_ZOOM_FACTOR\", \"ZOOM_FACTOR\", \"CENTER\", \"BACKGROUND\", \"CONTROL_BAR\", \"LEGENDS\", \"TRACKER\", \"INTERACTION\"],\n  _change_PROJECTION: function _change_PROJECTION() {\n    this._setProjection();\n  },\n  _change_BOUNDS: function _change_BOUNDS() {\n    this._setBounds();\n  },\n  _change_MAX_ZOOM_FACTOR: function _change_MAX_ZOOM_FACTOR() {\n    this._setMaxZoom();\n  },\n  _change_ZOOM_FACTOR: function _change_ZOOM_FACTOR() {\n    this._setZoom();\n  },\n  _change_CENTER: function _change_CENTER() {\n    this._setCenter();\n  },\n  _change_BACKGROUND: function _change_BACKGROUND() {\n    this._setBackgroundOptions();\n  },\n  _change_LAYERS: function _change_LAYERS() {\n    this._setLayerCollectionOptions();\n  },\n  _change_CONTROL_BAR: function _change_CONTROL_BAR() {\n    this._setControlBarOptions();\n  },\n  _change_EXTRA_ELEMENTS: function _change_EXTRA_ELEMENTS() {\n    this._renderExtraElements();\n  },\n  _change_LEGENDS: function _change_LEGENDS() {\n    this._setLegendsOptions();\n  },\n  _change_TRACKER: function _change_TRACKER() {\n    this._setTrackerOptions();\n  },\n  _change_INTERACTION: function _change_INTERACTION() {\n    this._setupInteraction();\n  },\n  _themeDependentChanges: [\"BACKGROUND\", \"LAYERS\", \"CONTROL_BAR\", \"LEGENDS\", \"TRACKER\", \"INTERACTION\"],\n  _setProjection: function _setProjection() {\n    this._projection.setEngine(this.option(\"projection\"));\n  },\n  _setBounds: function _setBounds() {\n    this._projection.setBounds(this.option(\"bounds\"));\n  },\n  _setMaxZoom: function _setMaxZoom() {\n    this._projection.setMaxZoom(this.option(\"maxZoomFactor\"));\n  },\n  _setZoom: function _setZoom() {\n    this._projection.setZoom(this.option(\"zoomFactor\"));\n  },\n  _setCenter: function _setCenter() {\n    this._projection.setCenter(this.option(\"center\"));\n  },\n  _setBackgroundOptions: function _setBackgroundOptions() {\n    this._layerCollection.setBackgroundOptions(this._getOption(\"background\"));\n  },\n  _setLayerCollectionOptions: function _setLayerCollectionOptions() {\n    this._layerCollection.setOptions(this.option(\"layers\"));\n  },\n  _getBoundingBoxFromDataSource: function _getBoundingBoxFromDataSource() {\n    var layers = this._layerCollection.items();\n\n    var infinityBounds = [1 / 0, -1 / 0, -1 / 0, 1 / 0];\n    var resultBBox = layers && layers.length ? layers.reduce(function (sumBBox, l) {\n      var layerData = l.getData();\n      var itemCount = layerData.count();\n\n      if (itemCount > 0) {\n        var rootBBox = layerData.getBBox();\n\n        if (rootBBox) {\n          sumBBox = mergeBounds(sumBBox, rootBBox);\n        } else {\n          for (var i = 0; i < itemCount; i++) {\n            sumBBox = mergeBounds(sumBBox, layerData.getBBox(i));\n          }\n        }\n      }\n\n      return sumBBox;\n    }, infinityBounds) : void 0;\n    return resultBBox === infinityBounds ? void 0 : resultBBox;\n  },\n  _setControlBarOptions: function _setControlBarOptions() {\n    this._controlBar.setOptions(this._getOption(\"controlBar\"));\n  },\n  _setLegendsOptions: function _setLegendsOptions() {\n    this._legendsControl.setOptions(this.option(\"legends\"));\n  },\n  _setTrackerOptions: function _setTrackerOptions() {\n    this._tracker.setOptions({\n      touchEnabled: this._getOption(\"touchEnabled\", true),\n      wheelEnabled: this._getOption(\"wheelEnabled\", true)\n    });\n  },\n  getLayers: function getLayers() {\n    return this._layerCollection.items().map(function (l) {\n      return l.proxy;\n    });\n  },\n  getLayerByIndex: function getLayerByIndex(index) {\n    var layer = this._layerCollection.byIndex(index);\n\n    return layer ? layer.proxy : null;\n  },\n  getLayerByName: function getLayerByName(name) {\n    var layer = this._layerCollection.byName(name);\n\n    return layer ? layer.proxy : null;\n  },\n  clearSelection: function clearSelection(_noEvent) {\n    var layers = this._layerCollection.items();\n\n    var i;\n    var ii = layers.length;\n\n    for (i = 0; i < ii; ++i) {\n      layers[i].clearSelection(_noEvent);\n    }\n\n    return this;\n  },\n  center: function center(value) {\n    if (void 0 === value) {\n      return this._projection.getCenter();\n    } else {\n      this._projection.setCenter(value);\n\n      return this;\n    }\n  },\n  zoomFactor: function zoomFactor(value) {\n    if (void 0 === value) {\n      return this._projection.getZoom();\n    } else {\n      this._projection.setZoom(value);\n\n      return this;\n    }\n  },\n  viewport: function viewport(value) {\n    if (void 0 === value) {\n      return this._projection.getViewport();\n    } else {\n      this._projection.setViewport(value);\n\n      return this;\n    }\n  },\n  convertCoordinates: function convertCoordinates(coordinates) {\n    coordinates = coordinates && coordinates.length ? coordinates : [arguments[0], arguments[1]];\n    return this.convertToGeo(coordinates[0], coordinates[1]);\n  },\n  convertToGeo: function convertToGeo(x, y) {\n    return this._projection.fromScreenPoint([x, y]);\n  },\n  convertToXY: function convertToXY(longitude, latitude) {\n    return this._projection.toScreenPoint([longitude, latitude]);\n  }\n});\nimport componentRegistrator from \"../../core/component_registrator\";\ncomponentRegistrator(\"dxVectorMap\", dxVectorMap);\nexport default dxVectorMap;\nimport { plugin as ExportPlugin } from \"../core/export\";\nimport { plugin as TitlePlugin } from \"../core/title\";\nimport { plugin as TooltipPlugin } from \"../core/tooltip\";\nimport { plugin as LoadingIndicatorPlugin } from \"../core/loading_indicator\";\nimport { plugins as annotationsPlugins } from \"../core/annotations\";\ndxVectorMap.addPlugin(ExportPlugin);\ndxVectorMap.addPlugin(TitlePlugin);\ndxVectorMap.addPlugin(TooltipPlugin);\ndxVectorMap.addPlugin(LoadingIndicatorPlugin);\ndxVectorMap.addPlugin(annotationsPlugins.core);\ndxVectorMap.addPlugin(annotationsPlugins.vectorMap);","map":null,"metadata":{},"sourceType":"module"}