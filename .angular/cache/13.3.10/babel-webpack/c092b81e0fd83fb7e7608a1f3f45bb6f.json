{"ast":null,"code":"import _defineProperty from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/renovation/ui/scheduler/workspaces/base/header_panel/date_header/cell.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"allDay\", \"ariaLabel\", \"children\", \"className\", \"colSpan\", \"contentTemplate\", \"contentTemplateProps\", \"dateCellTemplate\", \"endDate\", \"groupIndex\", \"groups\", \"index\", \"isFirstGroupCell\", \"isLastGroupCell\", \"isTimeCellTemplate\", \"isWeekDayCell\", \"startDate\", \"text\", \"timeCellTemplate\", \"today\"];\nimport { createVNode, createFragment, createComponentVNode, normalizeProps } from \"inferno\";\nimport { Fragment } from \"inferno\";\nimport { BaseInfernoComponent } from \"@devextreme/runtime/inferno\";\nimport { CellBaseProps } from \"../../cell\";\nimport { combineClasses } from \"../../../../../../utils/combine_classes\";\nimport { getGroupCellClasses } from \"../../../utils\";\nexport var viewFunction = function viewFunction(_ref) {\n  var classes = _ref.classes,\n      _ref$props = _ref.props,\n      colSpan = _ref$props.colSpan,\n      DateCellTemplate = _ref$props.dateCellTemplate,\n      groupIndex = _ref$props.groupIndex,\n      groups = _ref$props.groups,\n      index = _ref$props.index,\n      isTimeCellTemplate = _ref$props.isTimeCellTemplate,\n      startDate = _ref$props.startDate,\n      text = _ref$props.text,\n      TimeCellTemplate = _ref$props.timeCellTemplate,\n      useTemplate = _ref.useTemplate;\n  return createVNode(1, \"th\", classes, useTemplate ? createFragment([isTimeCellTemplate && TimeCellTemplate && TimeCellTemplate({\n    data: {\n      date: startDate,\n      text: text,\n      groups: groups,\n      groupIndex: groupIndex\n    },\n    index: index\n  }), !isTimeCellTemplate && DateCellTemplate && DateCellTemplate({\n    data: {\n      date: startDate,\n      text: text,\n      groups: groups,\n      groupIndex: groupIndex\n    },\n    index: index\n  })], 0) : text, 0, {\n    colSpan: colSpan,\n    title: text\n  });\n};\nexport var DateHeaderCellProps = Object.create(Object.prototype, _extends(Object.getOwnPropertyDescriptors(CellBaseProps), Object.getOwnPropertyDescriptors({\n  today: false,\n  colSpan: 1,\n  isWeekDayCell: false,\n  isTimeCellTemplate: false\n})));\n\nvar getTemplate = function getTemplate(TemplateProp) {\n  return TemplateProp && (TemplateProp.defaultProps ? function (props) {\n    return normalizeProps(createComponentVNode(2, TemplateProp, _extends({}, props)));\n  } : TemplateProp);\n};\n\nexport var DateHeaderCell = /*#__PURE__*/(function () {\n  var DateHeaderCell = /*#__PURE__*/function (_BaseInfernoComponent) {\n    _inherits(DateHeaderCell, _BaseInfernoComponent);\n\n    var _super = _createSuper(DateHeaderCell);\n\n    function DateHeaderCell(props) {\n      var _this;\n\n      _classCallCheck(this, DateHeaderCell);\n\n      _this = _super.call(this, props);\n      _this.state = {};\n      return _this;\n    }\n\n    _createClass(DateHeaderCell, [{\n      key: \"classes\",\n      get: function get() {\n        var _this$props2 = this.props,\n            className = _this$props2.className,\n            isFirstGroupCell = _this$props2.isFirstGroupCell,\n            isLastGroupCell = _this$props2.isLastGroupCell,\n            isWeekDayCell = _this$props2.isWeekDayCell,\n            today = _this$props2.today;\n        var cellClasses = combineClasses(_defineProperty({\n          \"dx-scheduler-header-panel-cell\": true,\n          \"dx-scheduler-cell-sizes-horizontal\": true,\n          \"dx-scheduler-header-panel-current-time-cell\": today,\n          \"dx-scheduler-header-panel-week-cell\": isWeekDayCell\n        }, className, !!className));\n        return getGroupCellClasses(isFirstGroupCell, isLastGroupCell, cellClasses);\n      }\n    }, {\n      key: \"useTemplate\",\n      get: function get() {\n        var _this$props3 = this.props,\n            dateCellTemplate = _this$props3.dateCellTemplate,\n            isTimeCellTemplate = _this$props3.isTimeCellTemplate,\n            timeCellTemplate = _this$props3.timeCellTemplate;\n        return !isTimeCellTemplate && !!dateCellTemplate || isTimeCellTemplate && !!timeCellTemplate;\n      }\n    }, {\n      key: \"restAttributes\",\n      get: function get() {\n        var _this$props = this.props,\n            restProps = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n        return restProps;\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var props = this.props;\n        return viewFunction({\n          props: _extends({}, props, {\n            timeCellTemplate: getTemplate(props.timeCellTemplate),\n            dateCellTemplate: getTemplate(props.dateCellTemplate),\n            contentTemplate: getTemplate(props.contentTemplate)\n          }),\n          classes: this.classes,\n          useTemplate: this.useTemplate,\n          restAttributes: this.restAttributes\n        });\n      }\n    }]);\n\n    return DateHeaderCell;\n  }(BaseInfernoComponent);\n\n  DateHeaderCell.defaultProps = DateHeaderCellProps;\n  return DateHeaderCell;\n})();","map":null,"metadata":{},"sourceType":"module"}