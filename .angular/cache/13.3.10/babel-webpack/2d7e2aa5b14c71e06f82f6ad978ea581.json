{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/data_grid/ui.data_grid.focus.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport gridCore from \"./ui.data_grid.core\";\nimport { focusModule } from \"../grid_core/ui.grid_core.focus\";\nimport { Deferred } from \"../../core/utils/deferred\";\nimport { isDefined } from \"../../core/utils/type\";\nimport { equalByValue } from \"../../core/utils/common\";\nimport { createGroupFilter } from \"./ui.data_grid.utils\";\nimport { compileGetter } from \"../../core/utils/data\";\nimport { extend } from \"../../core/utils/extend\";\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;\ngridCore.registerModule(\"focus\", extend(true, {}, focusModule, {\n  extenders: {\n    controllers: {\n      data: {\n        changeRowExpand: function changeRowExpand(path, isRowClick) {\n          if (this.option(\"focusedRowEnabled\") && Array.isArray(path) && this.isRowExpanded(path)) {\n            var keyboardNavigation = this.getController(\"keyboardNavigation\");\n\n            if ((!isRowClick || !keyboardNavigation.isKeyboardEnabled()) && this._isFocusedRowInsideGroup(path)) {\n              this.option(\"focusedRowKey\", path);\n            }\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _isFocusedRowInsideGroup: function _isFocusedRowInsideGroup(path) {\n          var columnsController = this.getController(\"columns\");\n          var focusedRowKey = this.option(\"focusedRowKey\");\n          var rowIndex = this.getRowIndexByKey(focusedRowKey);\n          var focusedRow = rowIndex >= 0 && this.getVisibleRows()[rowIndex];\n          var groups = columnsController.getGroupDataSourceParameters(true);\n\n          if (focusedRow) {\n            for (var i = 0; i < path.length; ++i) {\n              var getter = compileGetter(groups[i] && groups[i].selector);\n\n              if (getter(focusedRow.data) !== path[i]) {\n                return false;\n              }\n            }\n          }\n\n          return true;\n        },\n        _getGroupPath: function _getGroupPath(group) {\n          var groupPath = [group.key];\n          var items = group.items;\n\n          while (items && items[0]) {\n            var item = items[0];\n\n            if (void 0 !== item.key) {\n              groupPath.push(item.key);\n            }\n\n            items = item.items;\n          }\n\n          return groupPath;\n        },\n        _expandGroupByPath: function _expandGroupByPath(that, groupPath, level) {\n          var d = new Deferred();\n          level++;\n          that.expandRow(groupPath.slice(0, level)).done(function () {\n            if (level === groupPath.length) {\n              d.resolve();\n            } else {\n              that._expandGroupByPath(that, groupPath, level).done(d.resolve).fail(d.reject);\n            }\n          }).fail(d.reject);\n          return d.promise();\n        },\n        _calculateGlobalRowIndexByGroupedData: function _calculateGlobalRowIndexByGroupedData(key) {\n          var that = this;\n          var dataSource = that._dataSource;\n\n          var filter = that._generateFilterByKey(key);\n\n          var deferred = new Deferred();\n          var isGroupKey = Array.isArray(key);\n          var group = dataSource.group();\n\n          if (isGroupKey) {\n            return deferred.resolve(-1).promise();\n          }\n\n          if (!dataSource._grouping._updatePagingOptions) {\n            that._calculateGlobalRowIndexByFlatData(key, null, true).done(deferred.resolve).fail(deferred.reject);\n\n            return deferred;\n          }\n\n          dataSource.load({\n            filter: that._concatWithCombinedFilter(filter),\n            group: group\n          }).done(function (data) {\n            if (!data || 0 === data.length || !isDefined(data[0].key) || -1 === data[0].key) {\n              return deferred.resolve(-1).promise();\n            }\n\n            var groupPath = that._getGroupPath(data[0]);\n\n            that._expandGroupByPath(that, groupPath, 0).done(function () {\n              that._calculateExpandedRowGlobalIndex(deferred, key, groupPath, group);\n            }).fail(deferred.reject);\n          }).fail(deferred.reject);\n          return deferred.promise();\n        },\n        _calculateExpandedRowGlobalIndex: function _calculateExpandedRowGlobalIndex(deferred, key, groupPath, group) {\n          var groupFilter = createGroupFilter(groupPath, {\n            group: group\n          });\n          var dataSource = this._dataSource;\n          var scrollingMode = this.option(\"scrolling.mode\");\n          var isVirtualScrolling = \"virtual\" === scrollingMode || \"infinite\" === scrollingMode;\n          var pageSize = dataSource.pageSize();\n          var groupOffset;\n\n          dataSource._grouping._updatePagingOptions({\n            skip: 0,\n            take: MAX_SAFE_INTEGER\n          }, function (groupInfo, totalOffset) {\n            if (equalByValue(groupInfo.path, groupPath)) {\n              groupOffset = totalOffset;\n            }\n          });\n\n          this._calculateGlobalRowIndexByFlatData(key, groupFilter).done(function (dataOffset) {\n            var count;\n            var groupContinuationCount;\n\n            if (dataOffset < 0) {\n              deferred.resolve(-1);\n              return;\n            }\n\n            var currentPageOffset = groupOffset % pageSize || pageSize;\n            count = currentPageOffset + dataOffset - groupPath.length;\n\n            if (isVirtualScrolling) {\n              groupContinuationCount = 0;\n            } else {\n              groupContinuationCount = Math.floor(count / (pageSize - groupPath.length)) * groupPath.length;\n            }\n\n            count = groupOffset + dataOffset + groupContinuationCount;\n            deferred.resolve(count);\n          }).fail(deferred.reject);\n        }\n      }\n    }\n  }\n}));","map":null,"metadata":{},"sourceType":"module"}