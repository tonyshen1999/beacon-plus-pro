{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/appointmentDragBehavior.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport Draggable from \"../draggable\";\nimport { extend } from \"../../core/utils/extend\";\nimport { LIST_ITEM_DATA_KEY } from \"./constants\";\nvar APPOINTMENT_ITEM_CLASS = \"dx-scheduler-appointment\";\n\nvar AppointmentDragBehavior = /*#__PURE__*/function () {\n  function AppointmentDragBehavior(scheduler) {\n    _classCallCheck(this, AppointmentDragBehavior);\n\n    this.scheduler = scheduler;\n    this.appointments = scheduler._appointments;\n    this.initialPosition = {\n      left: 0,\n      top: 0\n    };\n    this.appointmentInfo = null;\n  }\n\n  _createClass(AppointmentDragBehavior, [{\n    key: \"isAllDay\",\n    value: function isAllDay(appointment) {\n      return appointment.data(\"dxAppointmentSettings\").allDay;\n    }\n  }, {\n    key: \"onDragStart\",\n    value: function onDragStart(e) {\n      var itemSettings = e.itemSettings,\n          itemData = e.itemData,\n          initialPosition = e.initialPosition;\n      this.initialPosition = initialPosition;\n      this.appointmentInfo = {\n        appointment: itemData,\n        settings: itemSettings\n      };\n      this.appointments.notifyObserver(\"hideAppointmentTooltip\");\n    }\n  }, {\n    key: \"onDragMove\",\n    value: function onDragMove(e) {\n      if (e.fromComponent !== e.toComponent) {\n        this.appointments.notifyObserver(\"removeDroppableCellClass\");\n      }\n    }\n  }, {\n    key: \"getAppointmentElement\",\n    value: function getAppointmentElement(e) {\n      var itemElement = e.event.data && e.event.data.itemElement || e.itemElement;\n      return $(itemElement);\n    }\n  }, {\n    key: \"onDragEnd\",\n    value: function onDragEnd(e) {\n      var element = this.getAppointmentElement(e);\n\n      var rawAppointment = this.appointments._getItemData(element);\n\n      var container = this.appointments._getAppointmentContainer(this.isAllDay(element));\n\n      container.append(element);\n      this.appointments.notifyObserver(\"updateAppointmentAfterDrag\", {\n        event: e,\n        element: element,\n        rawAppointment: rawAppointment,\n        coordinates: this.initialPosition\n      });\n    }\n  }, {\n    key: \"getItemData\",\n    value: function getItemData(appointmentElement) {\n      var dataFromTooltip = $(appointmentElement).data(LIST_ITEM_DATA_KEY);\n      var itemDataFromTooltip = null === dataFromTooltip || void 0 === dataFromTooltip ? void 0 : dataFromTooltip.appointment;\n\n      var itemDataFromGrid = this.appointments._getItemData(appointmentElement);\n\n      return itemDataFromTooltip || itemDataFromGrid;\n    }\n  }, {\n    key: \"getItemSettings\",\n    value: function getItemSettings(appointment) {\n      var itemData = $(appointment).data(LIST_ITEM_DATA_KEY);\n      return itemData && itemData.settings || [];\n    }\n  }, {\n    key: \"createDragStartHandler\",\n    value: function createDragStartHandler(options, appointmentDragging) {\n      var _this = this;\n\n      return function (e) {\n        e.itemData = _this.getItemData(e.itemElement);\n        e.itemSettings = _this.getItemSettings(e.itemElement);\n        appointmentDragging.onDragStart && appointmentDragging.onDragStart(e);\n\n        if (!e.cancel) {\n          options.onDragStart(e);\n        }\n      };\n    }\n  }, {\n    key: \"createDragMoveHandler\",\n    value: function createDragMoveHandler(options, appointmentDragging) {\n      return function (e) {\n        appointmentDragging.onDragMove && appointmentDragging.onDragMove(e);\n\n        if (!e.cancel) {\n          options.onDragMove(e);\n        }\n      };\n    }\n  }, {\n    key: \"createDragEndHandler\",\n    value: function createDragEndHandler(options, appointmentDragging) {\n      var _this2 = this;\n\n      return function (e) {\n        _this2.appointmentInfo = null;\n        appointmentDragging.onDragEnd && appointmentDragging.onDragEnd(e);\n\n        if (!e.cancel) {\n          options.onDragEnd(e);\n\n          if (e.fromComponent !== e.toComponent) {\n            appointmentDragging.onRemove && appointmentDragging.onRemove(e);\n          }\n        }\n      };\n    }\n  }, {\n    key: \"createDropHandler\",\n    value: function createDropHandler(appointmentDragging) {\n      var _this3 = this;\n\n      return function (e) {\n        var updatedData = _this3.appointments.invoke(\"getUpdatedData\", e.itemData);\n\n        e.itemData = extend({}, e.itemData, updatedData);\n\n        if (e.fromComponent !== e.toComponent) {\n          appointmentDragging.onAdd && appointmentDragging.onAdd(e);\n        }\n      };\n    }\n  }, {\n    key: \"addTo\",\n    value: function addTo(container, config) {\n      var appointmentDragging = this.scheduler.option(\"appointmentDragging\") || {};\n      var options = extend({\n        component: this.scheduler,\n        contentTemplate: null,\n        filter: \".\".concat(APPOINTMENT_ITEM_CLASS),\n        immediate: false,\n        onDragStart: this.onDragStart.bind(this),\n        onDragMove: this.onDragMove.bind(this),\n        onDragEnd: this.onDragEnd.bind(this)\n      }, config);\n\n      this.appointments._createComponent(container, Draggable, extend({}, options, appointmentDragging, {\n        onDragStart: this.createDragStartHandler(options, appointmentDragging),\n        onDragMove: this.createDragMoveHandler(options, appointmentDragging),\n        onDragEnd: this.createDragEndHandler(options, appointmentDragging),\n        onDrop: this.createDropHandler(appointmentDragging)\n      }));\n    }\n  }, {\n    key: \"updateDragSource\",\n    value: function updateDragSource(appointment, settings) {\n      var appointmentInfo = this.appointmentInfo;\n\n      if (appointmentInfo || appointment) {\n        var currentAppointment = appointment || appointmentInfo.appointment;\n        var currentSettings = settings || appointmentInfo.settings;\n\n        this.appointments._setDragSourceAppointment(currentAppointment, currentSettings);\n      }\n    }\n  }]);\n\n  return AppointmentDragBehavior;\n}();\n\nexport { AppointmentDragBehavior as default };","map":null,"metadata":{},"sourceType":"module"}