{"ast":null,"code":"import _toConsumableArray from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/**\r\n * DevExtreme (esm/file_management/file_system_item.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { isString } from \"../core/utils/type\";\nimport { pathCombine, getFileExtension as _getFileExtension, getPathParts, getName, getEscapedFileName, PATH_SEPARATOR } from \"./utils\";\n\nvar FileSystemItem = /*#__PURE__*/function () {\n  function FileSystemItem() {\n    _classCallCheck(this, FileSystemItem);\n\n    var ctor = isString(arguments[0]) ? this._publicCtor : this._internalCtor;\n    ctor.apply(this, arguments);\n  }\n\n  _createClass(FileSystemItem, [{\n    key: \"_internalCtor\",\n    value: function _internalCtor(pathInfo, name, isDirectory, key) {\n      this.name = name || \"\";\n      this.pathInfo = pathInfo && _toConsumableArray(pathInfo) || [];\n      this.parentPath = this._getPathByPathInfo(this.pathInfo);\n      this.relativeName = pathCombine(this.parentPath, name);\n      this.key = key || this._getPathByPathInfo(this.getFullPathInfo(), true);\n      this.path = pathCombine(this.parentPath, name);\n      this.pathKeys = this.pathInfo.map(function (_ref) {\n        var key = _ref.key;\n        return key;\n      });\n\n      if (!this.isRoot()) {\n        this.pathKeys.push(this.key);\n      }\n\n      this._initialize(isDirectory);\n    }\n  }, {\n    key: \"_publicCtor\",\n    value: function _publicCtor(path, isDirectory, pathKeys) {\n      this.path = path || \"\";\n      this.pathKeys = pathKeys || [];\n      var pathInfo = [];\n      var parts = getPathParts(path, true);\n\n      for (var i = 0; i < parts.length - 1; i++) {\n        var part = parts[i];\n        var pathInfoPart = {\n          key: this.pathKeys[i] || part,\n          name: getName(part)\n        };\n        pathInfo.push(pathInfoPart);\n      }\n\n      this.pathInfo = pathInfo;\n      this.relativeName = path;\n      this.name = getName(path);\n      this.key = this.pathKeys.length ? this.pathKeys[this.pathKeys.length - 1] : path;\n      this.parentPath = parts.length > 1 ? parts[parts.length - 2] : \"\";\n\n      this._initialize(isDirectory);\n    }\n  }, {\n    key: \"_initialize\",\n    value: function _initialize(isDirectory) {\n      this.isDirectory = !!isDirectory;\n      this.size = 0;\n      this.dateModified = new Date();\n      this.thumbnail = \"\";\n      this.tooltipText = \"\";\n    }\n  }, {\n    key: \"getFullPathInfo\",\n    value: function getFullPathInfo() {\n      var pathInfo = _toConsumableArray(this.pathInfo);\n\n      if (!this.isRoot()) {\n        pathInfo.push({\n          key: this.key,\n          name: this.name\n        });\n      }\n\n      return pathInfo;\n    }\n  }, {\n    key: \"isRoot\",\n    value: function isRoot() {\n      return \"\" === this.path;\n    }\n  }, {\n    key: \"getFileExtension\",\n    value: function getFileExtension() {\n      return this.isDirectory ? \"\" : _getFileExtension(this.name);\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(item) {\n      return item && this.key === item.key;\n    }\n  }, {\n    key: \"createClone\",\n    value: function createClone() {\n      var result = new FileSystemItem(this.pathInfo, this.name, this.isDirectory, this.key);\n      result.key = this.key;\n      result.size = this.size;\n      result.dateModified = this.dateModified;\n      result.thumbnail = this.thumbnail;\n      result.tooltipText = this.tooltipText;\n      result.hasSubDirectories = this.hasSubDirectories;\n      result.dataItem = this.dataItem;\n      return result;\n    }\n  }, {\n    key: \"_getPathByPathInfo\",\n    value: function _getPathByPathInfo(pathInfo, escape) {\n      return pathInfo.map(function (info) {\n        return escape ? getEscapedFileName(info.name) : info.name;\n      }).join(PATH_SEPARATOR);\n    }\n  }]);\n\n  return FileSystemItem;\n}();\n\nexport default FileSystemItem;","map":null,"metadata":{},"sourceType":"module"}