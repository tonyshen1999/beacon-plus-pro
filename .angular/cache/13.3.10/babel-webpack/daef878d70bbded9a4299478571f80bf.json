{"ast":null,"code":"import _toConsumableArray from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/**\r\n * DevExtreme (esm/core/postponed_operations.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { Deferred, when } from \"./utils/deferred\";\nimport { isDefined } from \"./utils/type\";\nexport var PostponedOperations = /*#__PURE__*/function () {\n  function PostponedOperations() {\n    _classCallCheck(this, PostponedOperations);\n\n    this._postponedOperations = {};\n  }\n\n  _createClass(PostponedOperations, [{\n    key: \"add\",\n    value: function add(key, fn, postponedPromise) {\n      if (key in this._postponedOperations) {\n        postponedPromise && this._postponedOperations[key].promises.push(postponedPromise);\n      } else {\n        var completePromise = new Deferred();\n        this._postponedOperations[key] = {\n          fn: fn,\n          completePromise: completePromise,\n          promises: postponedPromise ? [postponedPromise] : []\n        };\n      }\n\n      return this._postponedOperations[key].completePromise.promise();\n    }\n  }, {\n    key: \"callPostponedOperations\",\n    value: function callPostponedOperations() {\n      for (var key in this._postponedOperations) {\n        var operation = this._postponedOperations[key];\n\n        if (isDefined(operation)) {\n          if (operation.promises && operation.promises.length) {\n            when.apply(void 0, _toConsumableArray(operation.promises)).done(operation.fn).then(operation.completePromise.resolve);\n          } else {\n            operation.fn().done(operation.completePromise.resolve);\n          }\n        }\n      }\n\n      this._postponedOperations = {};\n    }\n  }]);\n\n  return PostponedOperations;\n}();","map":null,"metadata":{},"sourceType":"module"}