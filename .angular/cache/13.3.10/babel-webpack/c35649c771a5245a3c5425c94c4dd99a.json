{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __decorate, __metadata, __param } from 'tslib';\nimport { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, Component, NgModule } from '@angular/core';\nimport DxTreeMap from 'devextreme/viz/tree_map';\nimport { DxComponent, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxoColorizerModule, DxoExportModule, DxoGroupModule, DxoBorderModule, DxoHoverStyleModule, DxoLabelModule, DxoFontModule, DxoSelectionStyleModule, DxoLoadingIndicatorModule, DxoSizeModule, DxoTileModule, DxoTitleModule, DxoMarginModule, DxoSubtitleModule, DxoTooltipModule, DxoFormatModule, DxoShadowModule } from 'devextreme-angular/ui/nested';\n/*!\r\n * devextreme-angular\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\n/**\r\n * The TreeMap is a UI component that displays hierarchical data by using nested rectangles.\r\n\r\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'devextreme-angular/core';\nimport * as ɵngcc2 from '@angular/platform-browser';\nvar DxTreeMapComponent = /*#__PURE__*/(function () {\n  var DxTreeMapComponent = /*#__PURE__*/function (_DxComponent) {\n    _inherits(DxTreeMapComponent, _DxComponent);\n\n    var _super = _createSuper(DxTreeMapComponent);\n\n    function DxTreeMapComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\n      var _this;\n\n      _classCallCheck(this, DxTreeMapComponent);\n\n      _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n      _this._watcherHelper = _watcherHelper;\n      _this._idh = _idh;\n\n      _this._createEventEmitters([{\n        subscribe: 'click',\n        emit: 'onClick'\n      }, {\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'drawn',\n        emit: 'onDrawn'\n      }, {\n        subscribe: 'drill',\n        emit: 'onDrill'\n      }, {\n        subscribe: 'exported',\n        emit: 'onExported'\n      }, {\n        subscribe: 'exporting',\n        emit: 'onExporting'\n      }, {\n        subscribe: 'fileSaving',\n        emit: 'onFileSaving'\n      }, {\n        subscribe: 'hoverChanged',\n        emit: 'onHoverChanged'\n      }, {\n        subscribe: 'incidentOccurred',\n        emit: 'onIncidentOccurred'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'nodesInitialized',\n        emit: 'onNodesInitialized'\n      }, {\n        subscribe: 'nodesRendering',\n        emit: 'onNodesRendering'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        subscribe: 'selectionChanged',\n        emit: 'onSelectionChanged'\n      }, {\n        emit: 'childrenFieldChange'\n      }, {\n        emit: 'colorFieldChange'\n      }, {\n        emit: 'colorizerChange'\n      }, {\n        emit: 'dataSourceChange'\n      }, {\n        emit: 'disabledChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'exportChange'\n      }, {\n        emit: 'groupChange'\n      }, {\n        emit: 'hoverEnabledChange'\n      }, {\n        emit: 'idFieldChange'\n      }, {\n        emit: 'interactWithGroupChange'\n      }, {\n        emit: 'labelFieldChange'\n      }, {\n        emit: 'layoutAlgorithmChange'\n      }, {\n        emit: 'layoutDirectionChange'\n      }, {\n        emit: 'loadingIndicatorChange'\n      }, {\n        emit: 'maxDepthChange'\n      }, {\n        emit: 'parentFieldChange'\n      }, {\n        emit: 'pathModifiedChange'\n      }, {\n        emit: 'redrawOnResizeChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'selectionModeChange'\n      }, {\n        emit: 'sizeChange'\n      }, {\n        emit: 'themeChange'\n      }, {\n        emit: 'tileChange'\n      }, {\n        emit: 'titleChange'\n      }, {\n        emit: 'tooltipChange'\n      }, {\n        emit: 'valueFieldChange'\n      }]);\n\n      _this._idh.setHost(_assertThisInitialized(_this));\n\n      optionHost.setHost(_assertThisInitialized(_this));\n      return _this;\n    }\n    /**\r\n     * Specifies the name of the data source field that provides nested items for a group. Applies to hierarchical data sources only.\r\n    \r\n     */\n\n\n    _createClass(DxTreeMapComponent, [{\n      key: \"childrenField\",\n      get: function get() {\n        return this._getOption('childrenField');\n      },\n      set: function set(value) {\n        this._setOption('childrenField', value);\n      }\n      /**\r\n       * Specifies the name of the data source field that provides colors for tiles.\r\n      \r\n       */\n\n    }, {\n      key: \"colorField\",\n      get: function get() {\n        return this._getOption('colorField');\n      },\n      set: function set(value) {\n        this._setOption('colorField', value);\n      }\n      /**\r\n       * Manages the color settings.\r\n      \r\n       */\n\n    }, {\n      key: \"colorizer\",\n      get: function get() {\n        return this._getOption('colorizer');\n      },\n      set: function set(value) {\n        this._setOption('colorizer', value);\n      }\n      /**\r\n       * Binds the UI component to data.\r\n      \r\n       */\n\n    }, {\n      key: \"dataSource\",\n      get: function get() {\n        return this._getOption('dataSource');\n      },\n      set: function set(value) {\n        this._setOption('dataSource', value);\n      }\n      /**\r\n       * Specifies whether the UI component responds to user interaction.\r\n      \r\n       */\n\n    }, {\n      key: \"disabled\",\n      get: function get() {\n        return this._getOption('disabled');\n      },\n      set: function set(value) {\n        this._setOption('disabled', value);\n      }\n      /**\r\n       * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n      \r\n       */\n\n    }, {\n      key: \"elementAttr\",\n      get: function get() {\n        return this._getOption('elementAttr');\n      },\n      set: function set(value) {\n        this._setOption('elementAttr', value);\n      }\n      /**\r\n       * Configures the exporting and printing features.\r\n      \r\n       */\n\n    }, {\n      key: \"export\",\n      get: function get() {\n        return this._getOption('export');\n      },\n      set: function set(value) {\n        this._setOption('export', value);\n      }\n      /**\r\n       * Configures groups.\r\n      \r\n       */\n\n    }, {\n      key: \"group\",\n      get: function get() {\n        return this._getOption('group');\n      },\n      set: function set(value) {\n        this._setOption('group', value);\n      }\n      /**\r\n       * Specifies whether tiles and groups change their style when a user pauses on them.\r\n      \r\n       */\n\n    }, {\n      key: \"hoverEnabled\",\n      get: function get() {\n        return this._getOption('hoverEnabled');\n      },\n      set: function set(value) {\n        this._setOption('hoverEnabled', value);\n      }\n      /**\r\n       * Specifies the name of the data source field that provides IDs for items. Applies to plain data sources only.\r\n      \r\n       */\n\n    }, {\n      key: \"idField\",\n      get: function get() {\n        return this._getOption('idField');\n      },\n      set: function set(value) {\n        this._setOption('idField', value);\n      }\n      /**\r\n       * Specifies whether the user will interact with a single tile or its group.\r\n      \r\n       */\n\n    }, {\n      key: \"interactWithGroup\",\n      get: function get() {\n        return this._getOption('interactWithGroup');\n      },\n      set: function set(value) {\n        this._setOption('interactWithGroup', value);\n      }\n      /**\r\n       * Specifies the name of the data source field that provides texts for tile and group labels.\r\n      \r\n       */\n\n    }, {\n      key: \"labelField\",\n      get: function get() {\n        return this._getOption('labelField');\n      },\n      set: function set(value) {\n        this._setOption('labelField', value);\n      }\n      /**\r\n       * Specifies the layout algorithm.\r\n      \r\n       */\n\n    }, {\n      key: \"layoutAlgorithm\",\n      get: function get() {\n        return this._getOption('layoutAlgorithm');\n      },\n      set: function set(value) {\n        this._setOption('layoutAlgorithm', value);\n      }\n      /**\r\n       * Specifies the direction in which the items will be laid out.\r\n      \r\n       */\n\n    }, {\n      key: \"layoutDirection\",\n      get: function get() {\n        return this._getOption('layoutDirection');\n      },\n      set: function set(value) {\n        this._setOption('layoutDirection', value);\n      }\n      /**\r\n       * Configures the loading indicator.\r\n      \r\n       */\n\n    }, {\n      key: \"loadingIndicator\",\n      get: function get() {\n        return this._getOption('loadingIndicator');\n      },\n      set: function set(value) {\n        this._setOption('loadingIndicator', value);\n      }\n      /**\r\n       * Specifies how many hierarchical levels must be visualized.\r\n      \r\n       */\n\n    }, {\n      key: \"maxDepth\",\n      get: function get() {\n        return this._getOption('maxDepth');\n      },\n      set: function set(value) {\n        this._setOption('maxDepth', value);\n      }\n      /**\r\n       * Specifies the name of the data source field that provides parent IDs for items. Applies to plain data sources only.\r\n      \r\n       */\n\n    }, {\n      key: \"parentField\",\n      get: function get() {\n        return this._getOption('parentField');\n      },\n      set: function set(value) {\n        this._setOption('parentField', value);\n      }\n      /**\r\n       * Notifies the UI component that it is embedded into an HTML page that uses a tag modifying the path.\r\n      \r\n       */\n\n    }, {\n      key: \"pathModified\",\n      get: function get() {\n        return this._getOption('pathModified');\n      },\n      set: function set(value) {\n        this._setOption('pathModified', value);\n      }\n      /**\r\n       * Specifies whether to redraw the UI component when the size of the parent browser window changes or a mobile device rotates.\r\n      \r\n       */\n\n    }, {\n      key: \"redrawOnResize\",\n      get: function get() {\n        return this._getOption('redrawOnResize');\n      },\n      set: function set(value) {\n        this._setOption('redrawOnResize', value);\n      }\n      /**\r\n       * Switches the UI component to a right-to-left representation.\r\n      \r\n       */\n\n    }, {\n      key: \"rtlEnabled\",\n      get: function get() {\n        return this._getOption('rtlEnabled');\n      },\n      set: function set(value) {\n        this._setOption('rtlEnabled', value);\n      }\n      /**\r\n       * Specifies whether a single or multiple nodes can be in the selected state simultaneously.\r\n      \r\n       */\n\n    }, {\n      key: \"selectionMode\",\n      get: function get() {\n        return this._getOption('selectionMode');\n      },\n      set: function set(value) {\n        this._setOption('selectionMode', value);\n      }\n      /**\r\n       * Specifies the UI component&apos;s size in pixels.\r\n      \r\n       */\n\n    }, {\n      key: \"size\",\n      get: function get() {\n        return this._getOption('size');\n      },\n      set: function set(value) {\n        this._setOption('size', value);\n      }\n      /**\r\n       * Sets the name of the theme the UI component uses.\r\n      \r\n       */\n\n    }, {\n      key: \"theme\",\n      get: function get() {\n        return this._getOption('theme');\n      },\n      set: function set(value) {\n        this._setOption('theme', value);\n      }\n      /**\r\n       * Configures tiles.\r\n      \r\n       */\n\n    }, {\n      key: \"tile\",\n      get: function get() {\n        return this._getOption('tile');\n      },\n      set: function set(value) {\n        this._setOption('tile', value);\n      }\n      /**\r\n       * Configures the UI component&apos;s title.\r\n      \r\n       */\n\n    }, {\n      key: \"title\",\n      get: function get() {\n        return this._getOption('title');\n      },\n      set: function set(value) {\n        this._setOption('title', value);\n      }\n      /**\r\n       * Configures tooltips - small pop-up rectangles that display information about a data-visualizing UI component element being pressed or hovered over with the mouse pointer.\r\n      \r\n       */\n\n    }, {\n      key: \"tooltip\",\n      get: function get() {\n        return this._getOption('tooltip');\n      },\n      set: function set(value) {\n        this._setOption('tooltip', value);\n      }\n      /**\r\n       * Specifies the name of the data source field that provides values for tiles.\r\n      \r\n       */\n\n    }, {\n      key: \"valueField\",\n      get: function get() {\n        return this._getOption('valueField');\n      },\n      set: function set(value) {\n        this._setOption('valueField', value);\n      }\n    }, {\n      key: \"_createInstance\",\n      value: function _createInstance(element, options) {\n        return new DxTreeMap(element, options);\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._destroyWidget();\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        _get(_getPrototypeOf(DxTreeMapComponent.prototype), \"ngOnChanges\", this).call(this, changes);\n\n        this.setupChanges('dataSource', changes);\n      }\n    }, {\n      key: \"setupChanges\",\n      value: function setupChanges(prop, changes) {\n        if (!(prop in this._optionsToUpdate)) {\n          this._idh.setup(prop, changes);\n        }\n      }\n    }, {\n      key: \"ngDoCheck\",\n      value: function ngDoCheck() {\n        this._idh.doCheck('dataSource');\n\n        this._watcherHelper.checkWatchers();\n\n        _get(_getPrototypeOf(DxTreeMapComponent.prototype), \"ngDoCheck\", this).call(this);\n\n        _get(_getPrototypeOf(DxTreeMapComponent.prototype), \"clearChangedOptions\", this).call(this);\n      }\n    }, {\n      key: \"_setOption\",\n      value: function _setOption(name, value) {\n        var isSetup = this._idh.setupSingle(name, value);\n\n        var isChanged = this._idh.getChanges(name, value) !== null;\n\n        if (isSetup || isChanged) {\n          _get(_getPrototypeOf(DxTreeMapComponent.prototype), \"_setOption\", this).call(this, name, value);\n        }\n      }\n    }]);\n\n    return DxTreeMapComponent;\n  }(DxComponent);\n\n  DxTreeMapComponent.ɵfac = function DxTreeMapComponent_Factory(t) {\n    return new (t || DxTreeMapComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DxTemplateHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.WatcherHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IterableDifferHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TransferState), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n\n  DxTreeMapComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: DxTreeMapComponent,\n    selectors: [[\"dx-tree-map\"]],\n    inputs: {\n      childrenField: \"childrenField\",\n      colorField: \"colorField\",\n      colorizer: \"colorizer\",\n      dataSource: \"dataSource\",\n      disabled: \"disabled\",\n      elementAttr: \"elementAttr\",\n      export: \"export\",\n      group: \"group\",\n      hoverEnabled: \"hoverEnabled\",\n      idField: \"idField\",\n      interactWithGroup: \"interactWithGroup\",\n      labelField: \"labelField\",\n      layoutAlgorithm: \"layoutAlgorithm\",\n      layoutDirection: \"layoutDirection\",\n      loadingIndicator: \"loadingIndicator\",\n      maxDepth: \"maxDepth\",\n      parentField: \"parentField\",\n      pathModified: \"pathModified\",\n      redrawOnResize: \"redrawOnResize\",\n      rtlEnabled: \"rtlEnabled\",\n      selectionMode: \"selectionMode\",\n      size: \"size\",\n      theme: \"theme\",\n      tile: \"tile\",\n      title: \"title\",\n      tooltip: \"tooltip\",\n      valueField: \"valueField\"\n    },\n    outputs: {\n      onClick: \"onClick\",\n      onDisposing: \"onDisposing\",\n      onDrawn: \"onDrawn\",\n      onDrill: \"onDrill\",\n      onExported: \"onExported\",\n      onExporting: \"onExporting\",\n      onFileSaving: \"onFileSaving\",\n      onHoverChanged: \"onHoverChanged\",\n      onIncidentOccurred: \"onIncidentOccurred\",\n      onInitialized: \"onInitialized\",\n      onNodesInitialized: \"onNodesInitialized\",\n      onNodesRendering: \"onNodesRendering\",\n      onOptionChanged: \"onOptionChanged\",\n      onSelectionChanged: \"onSelectionChanged\",\n      childrenFieldChange: \"childrenFieldChange\",\n      colorFieldChange: \"colorFieldChange\",\n      colorizerChange: \"colorizerChange\",\n      dataSourceChange: \"dataSourceChange\",\n      disabledChange: \"disabledChange\",\n      elementAttrChange: \"elementAttrChange\",\n      exportChange: \"exportChange\",\n      groupChange: \"groupChange\",\n      hoverEnabledChange: \"hoverEnabledChange\",\n      idFieldChange: \"idFieldChange\",\n      interactWithGroupChange: \"interactWithGroupChange\",\n      labelFieldChange: \"labelFieldChange\",\n      layoutAlgorithmChange: \"layoutAlgorithmChange\",\n      layoutDirectionChange: \"layoutDirectionChange\",\n      loadingIndicatorChange: \"loadingIndicatorChange\",\n      maxDepthChange: \"maxDepthChange\",\n      parentFieldChange: \"parentFieldChange\",\n      pathModifiedChange: \"pathModifiedChange\",\n      redrawOnResizeChange: \"redrawOnResizeChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      selectionModeChange: \"selectionModeChange\",\n      sizeChange: \"sizeChange\",\n      themeChange: \"themeChange\",\n      tileChange: \"tileChange\",\n      titleChange: \"titleChange\",\n      tooltipChange: \"tooltipChange\",\n      valueFieldChange: \"valueFieldChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function DxTreeMapComponent_Template(rf, ctx) {},\n    styles: [\"[_nghost-%COMP%] {  display: block; }\"]\n  });\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxTreeMapComponent.prototype, \"childrenField\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxTreeMapComponent.prototype, \"colorField\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxTreeMapComponent.prototype, \"colorizer\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxTreeMapComponent.prototype, \"dataSource\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxTreeMapComponent.prototype, \"disabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxTreeMapComponent.prototype, \"elementAttr\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxTreeMapComponent.prototype, \"export\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxTreeMapComponent.prototype, \"group\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxTreeMapComponent.prototype, \"hoverEnabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxTreeMapComponent.prototype, \"idField\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxTreeMapComponent.prototype, \"interactWithGroup\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxTreeMapComponent.prototype, \"labelField\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxTreeMapComponent.prototype, \"layoutAlgorithm\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxTreeMapComponent.prototype, \"layoutDirection\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxTreeMapComponent.prototype, \"loadingIndicator\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], DxTreeMapComponent.prototype, \"maxDepth\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxTreeMapComponent.prototype, \"parentField\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxTreeMapComponent.prototype, \"pathModified\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxTreeMapComponent.prototype, \"redrawOnResize\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxTreeMapComponent.prototype, \"rtlEnabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxTreeMapComponent.prototype, \"selectionMode\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxTreeMapComponent.prototype, \"size\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxTreeMapComponent.prototype, \"theme\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxTreeMapComponent.prototype, \"tile\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxTreeMapComponent.prototype, \"title\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxTreeMapComponent.prototype, \"tooltip\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxTreeMapComponent.prototype, \"valueField\", null);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxTreeMapComponent.prototype, \"onClick\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxTreeMapComponent.prototype, \"onDisposing\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxTreeMapComponent.prototype, \"onDrawn\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxTreeMapComponent.prototype, \"onDrill\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxTreeMapComponent.prototype, \"onExported\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxTreeMapComponent.prototype, \"onExporting\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxTreeMapComponent.prototype, \"onFileSaving\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxTreeMapComponent.prototype, \"onHoverChanged\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxTreeMapComponent.prototype, \"onIncidentOccurred\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxTreeMapComponent.prototype, \"onInitialized\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxTreeMapComponent.prototype, \"onNodesInitialized\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxTreeMapComponent.prototype, \"onNodesRendering\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxTreeMapComponent.prototype, \"onOptionChanged\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxTreeMapComponent.prototype, \"onSelectionChanged\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxTreeMapComponent.prototype, \"childrenFieldChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxTreeMapComponent.prototype, \"colorFieldChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxTreeMapComponent.prototype, \"colorizerChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxTreeMapComponent.prototype, \"dataSourceChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxTreeMapComponent.prototype, \"disabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxTreeMapComponent.prototype, \"elementAttrChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxTreeMapComponent.prototype, \"exportChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxTreeMapComponent.prototype, \"groupChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxTreeMapComponent.prototype, \"hoverEnabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxTreeMapComponent.prototype, \"idFieldChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxTreeMapComponent.prototype, \"interactWithGroupChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxTreeMapComponent.prototype, \"labelFieldChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxTreeMapComponent.prototype, \"layoutAlgorithmChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxTreeMapComponent.prototype, \"layoutDirectionChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxTreeMapComponent.prototype, \"loadingIndicatorChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxTreeMapComponent.prototype, \"maxDepthChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxTreeMapComponent.prototype, \"parentFieldChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxTreeMapComponent.prototype, \"pathModifiedChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxTreeMapComponent.prototype, \"redrawOnResizeChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxTreeMapComponent.prototype, \"rtlEnabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxTreeMapComponent.prototype, \"selectionModeChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxTreeMapComponent.prototype, \"sizeChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxTreeMapComponent.prototype, \"themeChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxTreeMapComponent.prototype, \"tileChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxTreeMapComponent.prototype, \"titleChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxTreeMapComponent.prototype, \"tooltipChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxTreeMapComponent.prototype, \"valueFieldChange\", void 0);\n\n  DxTreeMapComponent = __decorate([__param(7, Inject(PLATFORM_ID)), __metadata(\"design:paramtypes\", [ElementRef, NgZone, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, TransferState, Object])], DxTreeMapComponent);\n  return DxTreeMapComponent;\n})();\nvar DxTreeMapModule = /*#__PURE__*/(function () {\n  var DxTreeMapModule = /*#__PURE__*/_createClass(function DxTreeMapModule() {\n    _classCallCheck(this, DxTreeMapModule);\n  });\n\n  DxTreeMapModule.ɵfac = function DxTreeMapModule_Factory(t) {\n    return new (t || DxTreeMapModule)();\n  };\n\n  DxTreeMapModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: DxTreeMapModule\n  });\n  DxTreeMapModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[DxoColorizerModule, DxoExportModule, DxoGroupModule, DxoBorderModule, DxoHoverStyleModule, DxoLabelModule, DxoFontModule, DxoSelectionStyleModule, DxoLoadingIndicatorModule, DxoSizeModule, DxoTileModule, DxoTitleModule, DxoMarginModule, DxoSubtitleModule, DxoTooltipModule, DxoFormatModule, DxoShadowModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxoColorizerModule, DxoExportModule, DxoGroupModule, DxoBorderModule, DxoHoverStyleModule, DxoLabelModule, DxoFontModule, DxoSelectionStyleModule, DxoLoadingIndicatorModule, DxoSizeModule, DxoTileModule, DxoTitleModule, DxoMarginModule, DxoSubtitleModule, DxoTooltipModule, DxoFormatModule, DxoShadowModule, DxTemplateModule]\n  });\n  return DxTreeMapModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxTreeMapModule, {\n    declarations: function declarations() {\n      return [DxTreeMapComponent];\n    },\n    imports: function imports() {\n      return [DxoColorizerModule, DxoExportModule, DxoGroupModule, DxoBorderModule, DxoHoverStyleModule, DxoLabelModule, DxoFontModule, DxoSelectionStyleModule, DxoLoadingIndicatorModule, DxoSizeModule, DxoTileModule, DxoTitleModule, DxoMarginModule, DxoSubtitleModule, DxoTooltipModule, DxoFormatModule, DxoShadowModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule];\n    },\n    exports: function exports() {\n      return [DxTreeMapComponent, DxoColorizerModule, DxoExportModule, DxoGroupModule, DxoBorderModule, DxoHoverStyleModule, DxoLabelModule, DxoFontModule, DxoSelectionStyleModule, DxoLoadingIndicatorModule, DxoSizeModule, DxoTileModule, DxoTitleModule, DxoMarginModule, DxoSubtitleModule, DxoTooltipModule, DxoFormatModule, DxoShadowModule, DxTemplateModule];\n    }\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DxTreeMapComponent, DxTreeMapModule }; //# sourceMappingURL=devextreme-angular-ui-tree-map.js.map","map":null,"metadata":{},"sourceType":"module"}