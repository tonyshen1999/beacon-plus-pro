{"ast":null,"code":"import _toConsumableArray from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n\n/**\r\n * DevExtreme (esm/ui/data_grid/ui.data_grid.export.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport $ from \"../../core/renderer\";\nimport Class from \"../../core/class\";\nimport { isDefined } from \"../../core/utils/type\";\nimport { extend } from \"../../core/utils/extend\";\nimport { getDefaultAlignment } from \"../../core/utils/position\";\nimport { merge } from \"../../core/utils/array\";\nimport dataGridCore from \"./ui.data_grid.core\";\nimport exportMixin from \"../grid_core/ui.grid_core.export_mixin\";\nimport { export as clientExport, excel } from \"../../exporter\";\nimport messageLocalization from \"../../localization/message\";\nimport \"../button\";\nimport \"../drop_down_button\";\nimport List from \"../list_light\";\nimport { when, Deferred } from \"../../core/utils/deferred\";\nvar DATAGRID_EXPORT_MENU_CLASS = \"dx-datagrid-export-menu\";\nvar DATAGRID_EXPORT_BUTTON_CLASS = \"dx-datagrid-export-button\";\nvar DATAGRID_EXPORT_TOOLBAR_BUTTON_NAME = \"exportButton\";\nvar DATAGRID_EXPORT_ICON = \"export-to\";\nvar DATAGRID_EXPORT_EXCEL_ICON = \"xlsxfile\";\nvar DATAGRID_EXPORT_SELECTED_ICON = \"exportselected\";\nvar DATAGRID_EXPORT_EXCEL_BUTTON_ICON = \"export-excel-button\";\nexport var DataProvider = Class.inherit({\n  ctor: function ctor(exportController, initialColumnWidthsByColumnIndex, selectedRowsOnly) {\n    this._exportController = exportController;\n    this._initialColumnWidthsByColumnIndex = initialColumnWidthsByColumnIndex;\n    this._selectedRowsOnly = selectedRowsOnly;\n  },\n  _getGroupValue: function _getGroupValue(item) {\n    var key = item.key,\n        data = item.data,\n        rowType = item.rowType,\n        groupIndex = item.groupIndex,\n        summaryCells = item.summaryCells;\n    var groupColumn = this._options.groupColumns[groupIndex];\n    var value = dataGridCore.getDisplayValue(groupColumn, groupColumn.deserializeValue ? groupColumn.deserializeValue(key[groupIndex]) : key[groupIndex], data, rowType);\n    var result = groupColumn.caption + \": \" + dataGridCore.formatValue(value, groupColumn);\n\n    if (summaryCells && summaryCells[0] && summaryCells[0].length) {\n      result += \" \" + dataGridCore.getGroupRowSummaryText(summaryCells[0], this._options.summaryTexts);\n    }\n\n    return result;\n  },\n  _correctCellIndex: function _correctCellIndex(cellIndex) {\n    return cellIndex;\n  },\n  _initOptions: function _initOptions() {\n    var exportController = this._exportController;\n\n    var groupColumns = exportController._columnsController.getGroupColumns();\n\n    var excelWrapTextEnabled = exportController.option(\"export.excelWrapTextEnabled\");\n    this._options = {\n      columns: exportController._getColumns(this._initialColumnWidthsByColumnIndex),\n      groupColumns: groupColumns,\n      items: this._selectedRowsOnly || exportController._selectionOnly ? exportController._getSelectedItems() : exportController._getAllItems(),\n      getVisibleIndex: exportController._columnsController.getVisibleIndex.bind(exportController._columnsController),\n      isHeadersVisible: exportController.option(\"showColumnHeaders\"),\n      summaryTexts: exportController.option(\"summary.texts\"),\n      customizeExportData: exportController.option(\"customizeExportData\"),\n      rtlEnabled: exportController.option(\"rtlEnabled\"),\n      wrapTextEnabled: isDefined(excelWrapTextEnabled) ? excelWrapTextEnabled : !!exportController.option(\"wordWrapEnabled\"),\n      customizeExcelCell: exportController.option(\"export.customizeExcelCell\")\n    };\n  },\n  hasCustomizeExcelCell: function hasCustomizeExcelCell() {\n    return isDefined(this._options.customizeExcelCell);\n  },\n  customizeExcelCell: function customizeExcelCell(e, cellSourceData) {\n    if (this._options.customizeExcelCell) {\n      e.gridCell = cellSourceData;\n\n      if (isDefined(this._exportController) && isDefined(this._exportController.component)) {\n        e.component = this._exportController.component;\n      }\n\n      this._options.customizeExcelCell(e);\n    }\n  },\n  getHeaderStyles: function getHeaderStyles() {\n    return [{\n      bold: true,\n      alignment: \"center\",\n      wrapText: true\n    }, {\n      bold: true,\n      alignment: \"left\",\n      wrapText: true\n    }, {\n      bold: true,\n      alignment: \"right\",\n      wrapText: true\n    }];\n  },\n  getGroupRowStyle: function getGroupRowStyle() {\n    return {\n      bold: true,\n      wrapText: false,\n      alignment: getDefaultAlignment(this._options.rtlEnabled)\n    };\n  },\n  getColumnStyles: function getColumnStyles() {\n    var wrapTextEnabled = this._options.wrapTextEnabled;\n    var columnStyles = [];\n    this.getColumns().forEach(function (column) {\n      columnStyles.push({\n        alignment: column.alignment || \"left\",\n        format: column.format,\n        wrapText: wrapTextEnabled,\n        dataType: column.dataType\n      });\n    });\n    return columnStyles;\n  },\n  getStyles: function getStyles() {\n    return [].concat(_toConsumableArray(this.getHeaderStyles()), _toConsumableArray(this.getColumnStyles()), [this.getGroupRowStyle()]);\n  },\n  _getTotalCellStyleId: function _getTotalCellStyleId(cellIndex) {\n    var _this$getColumns$cell;\n\n    var alignment = (null === (_this$getColumns$cell = this.getColumns()[cellIndex]) || void 0 === _this$getColumns$cell ? void 0 : _this$getColumns$cell.alignment) || \"right\";\n    return this.getHeaderStyles().map(function (style) {\n      return style.alignment;\n    }).indexOf(alignment);\n  },\n  getStyleId: function getStyleId(rowIndex, cellIndex) {\n    if (rowIndex < this.getHeaderRowCount()) {\n      return 0;\n    } else if (this.isTotalCell(rowIndex - this.getHeaderRowCount(), cellIndex)) {\n      return this._getTotalCellStyleId(cellIndex);\n    } else if (this.isGroupRow(rowIndex - this.getHeaderRowCount())) {\n      return this.getHeaderStyles().length + this.getColumns().length;\n    } else {\n      return cellIndex + this.getHeaderStyles().length;\n    }\n  },\n  getColumns: function getColumns(getColumnsByAllRows) {\n    var columns = this._options.columns;\n    return getColumnsByAllRows ? columns : columns[columns.length - 1];\n  },\n  getColumnsWidths: function getColumnsWidths() {\n    var columns = this.getColumns();\n    return isDefined(columns) ? columns.map(function (c) {\n      return c.width;\n    }) : void 0;\n  },\n  getRowsCount: function getRowsCount() {\n    return this._options.items.length + this.getHeaderRowCount();\n  },\n  getHeaderRowCount: function getHeaderRowCount() {\n    if (this.isHeadersVisible()) {\n      return this._options.columns.length - 1;\n    }\n\n    return 0;\n  },\n  isGroupRow: function isGroupRow(rowIndex) {\n    return rowIndex < this._options.items.length && \"group\" === this._options.items[rowIndex].rowType;\n  },\n  getGroupLevel: function getGroupLevel(rowIndex) {\n    var item = this._options.items[rowIndex - this.getHeaderRowCount()];\n\n    var groupIndex = item && item.groupIndex;\n\n    if (item && \"totalFooter\" === item.rowType) {\n      return 0;\n    }\n\n    return isDefined(groupIndex) ? groupIndex : this._options.groupColumns.length;\n  },\n  getCellType: function getCellType(rowIndex, cellIndex) {\n    var columns = this.getColumns();\n\n    if (rowIndex < this.getHeaderRowCount()) {\n      return \"string\";\n    } else {\n      rowIndex -= this.getHeaderRowCount();\n    }\n\n    if (cellIndex < columns.length) {\n      var item = this._options.items.length && this._options.items[rowIndex];\n      var column = columns[cellIndex];\n\n      if (item && \"data\" === item.rowType) {\n        if (isFinite(item.values[this._correctCellIndex(cellIndex)]) && !isDefined(column.customizeText)) {\n          return isDefined(column.lookup) ? column.lookup.dataType : column.dataType;\n        }\n      }\n\n      return \"string\";\n    }\n  },\n  ready: function ready() {\n    var that = this;\n\n    that._initOptions();\n\n    var options = that._options;\n    return when(options.items).done(function (items) {\n      options.customizeExportData && options.customizeExportData(that.getColumns(that.getHeaderRowCount() > 1), items);\n      options.items = items;\n    }).fail(function () {\n      options.items = [];\n    });\n  },\n  _convertFromGridGroupSummaryItems: function _convertFromGridGroupSummaryItems(gridGroupSummaryItems) {\n    if (isDefined(gridGroupSummaryItems) && gridGroupSummaryItems.length > 0) {\n      return gridGroupSummaryItems.map(function (item) {\n        return {\n          value: item.value,\n          name: item.name\n        };\n      });\n    }\n  },\n  getCellData: function getCellData(rowIndex, cellIndex, isExcelJS) {\n    var value;\n    var column;\n    var result = {\n      cellSourceData: {},\n      value: value\n    };\n    var columns = this.getColumns();\n\n    var correctedCellIndex = this._correctCellIndex(cellIndex);\n\n    if (rowIndex < this.getHeaderRowCount()) {\n      var columnsRow = this.getColumns(true)[rowIndex];\n      column = columnsRow[cellIndex];\n      result.cellSourceData.rowType = \"header\";\n      result.cellSourceData.column = column && column.gridColumn;\n      result.value = column && column.caption;\n    } else {\n      rowIndex -= this.getHeaderRowCount();\n      var item = this._options.items.length && this._options.items[rowIndex];\n\n      if (item) {\n        var itemValues = item.values;\n        result.cellSourceData.rowType = item.rowType;\n        result.cellSourceData.column = columns[cellIndex] && columns[cellIndex].gridColumn;\n\n        switch (item.rowType) {\n          case \"groupFooter\":\n          case \"totalFooter\":\n            if (correctedCellIndex < itemValues.length) {\n              value = itemValues[correctedCellIndex];\n\n              if (isDefined(value)) {\n                result.cellSourceData.value = value.value;\n                result.cellSourceData.totalSummaryItemName = value.name;\n                result.value = dataGridCore.getSummaryText(value, this._options.summaryTexts);\n              } else {\n                result.cellSourceData.value = void 0;\n              }\n            }\n\n            break;\n\n          case \"group\":\n            result.cellSourceData.groupIndex = item.groupIndex;\n\n            if (cellIndex < 1) {\n              result.cellSourceData.column = this._options.groupColumns[item.groupIndex];\n              result.cellSourceData.value = item.key[item.groupIndex];\n              result.cellSourceData.groupSummaryItems = this._convertFromGridGroupSummaryItems(item.summaryCells[0]);\n              result.value = this._getGroupValue(item);\n            } else {\n              var summaryItems = item.values[correctedCellIndex];\n\n              if (Array.isArray(summaryItems)) {\n                result.cellSourceData.groupSummaryItems = this._convertFromGridGroupSummaryItems(summaryItems);\n                value = \"\";\n\n                for (var i = 0; i < summaryItems.length; i++) {\n                  value += (i > 0 ? isExcelJS ? \"\\n\" : \" \\n \" : \"\") + dataGridCore.getSummaryText(summaryItems[i], this._options.summaryTexts);\n                }\n\n                result.value = value;\n              } else {\n                result.cellSourceData.value = void 0;\n              }\n            }\n\n            break;\n\n          default:\n            column = columns[cellIndex];\n\n            if (column) {\n              var _value = itemValues[correctedCellIndex];\n              var displayValue = dataGridCore.getDisplayValue(column, _value, item.data, item.rowType);\n\n              if (!isFinite(displayValue) || isDefined(column.customizeText)) {\n                if (isExcelJS && isDefined(column.customizeText) && column.customizeText === this._exportController._columnsController.getCustomizeTextByDataType(\"boolean\")) {\n                  result.value = displayValue;\n                } else {\n                  result.value = dataGridCore.formatValue(displayValue, column);\n                }\n              } else {\n                result.value = displayValue;\n              }\n\n              result.cellSourceData.value = _value;\n            }\n\n            result.cellSourceData.data = item.data;\n        }\n      }\n    }\n\n    return result;\n  },\n  isHeadersVisible: function isHeadersVisible() {\n    return this._options.isHeadersVisible;\n  },\n  isTotalCell: function isTotalCell(rowIndex, cellIndex) {\n    var items = this._options.items;\n    var item = items[rowIndex];\n\n    var correctCellIndex = this._correctCellIndex(cellIndex);\n\n    var isSummaryAlignByColumn = item.summaryCells && item.summaryCells[correctCellIndex] && item.summaryCells[correctCellIndex].length > 0 && item.summaryCells[correctCellIndex][0].alignByColumn;\n    return item && \"groupFooter\" === item.rowType || \"totalFooter\" === item.rowType || isSummaryAlignByColumn;\n  },\n  getCellMerging: function getCellMerging(rowIndex, cellIndex) {\n    var columns = this._options.columns;\n    var column = columns[rowIndex] && columns[rowIndex][cellIndex];\n    return column ? {\n      colspan: (column.exportColspan || 1) - 1,\n      rowspan: (column.rowspan || 1) - 1\n    } : {\n      colspan: 0,\n      rowspan: 0\n    };\n  },\n  getFrozenArea: function getFrozenArea() {\n    return {\n      x: 0,\n      y: this.getHeaderRowCount()\n    };\n  }\n});\nexport var ExportController = dataGridCore.ViewController.inherit({}).include(exportMixin).inherit({\n  _getEmptyCell: function _getEmptyCell() {\n    return {\n      caption: \"\",\n      colspan: 1,\n      rowspan: 1\n    };\n  },\n  _updateColumnWidth: function _updateColumnWidth(column, width) {\n    column.width = width;\n  },\n  _getColumns: function _getColumns(initialColumnWidthsByColumnIndex) {\n    var result = [];\n    var i;\n    var columns;\n    var columnsController = this._columnsController;\n    var rowCount = columnsController.getRowCount();\n\n    for (i = 0; i <= rowCount; i++) {\n      var currentHeaderRow = [];\n      columns = columnsController.getVisibleColumns(i, true);\n      var columnWidthsByColumnIndex = void 0;\n\n      if (i === rowCount) {\n        if (this._updateLockCount) {\n          columnWidthsByColumnIndex = initialColumnWidthsByColumnIndex;\n        } else {\n          var columnWidths = this._getColumnWidths(this._headersView, this._rowsView);\n\n          if (columnWidths && columnWidths.length) {\n            columnWidthsByColumnIndex = {};\n\n            for (var _i = 0; _i < columns.length; _i++) {\n              columnWidthsByColumnIndex[columns[_i].index] = columnWidths[_i];\n            }\n          }\n        }\n      }\n\n      for (var j = 0; j < columns.length; j++) {\n        var column = extend({}, columns[j], {\n          dataType: \"datetime\" === columns[j].dataType ? \"date\" : columns[j].dataType,\n          gridColumn: columns[j]\n        });\n\n        if (this._needColumnExporting(column)) {\n          var currentColspan = this._calculateExportColspan(column);\n\n          if (isDefined(currentColspan)) {\n            column.exportColspan = currentColspan;\n          }\n\n          if (columnWidthsByColumnIndex) {\n            this._updateColumnWidth(column, columnWidthsByColumnIndex[column.index]);\n          }\n\n          currentHeaderRow.push(column);\n        }\n      }\n\n      result.push(currentHeaderRow);\n    }\n\n    columns = result[rowCount];\n    result = this._prepareItems(result.slice(0, -1));\n    result.push(columns);\n    return result;\n  },\n  _calculateExportColspan: function _calculateExportColspan(column) {\n    var _this = this;\n\n    if (!column.isBand) {\n      return;\n    }\n\n    var childColumns = this._columnsController.getChildrenByBandColumn(column.index, true);\n\n    if (!isDefined(childColumns)) {\n      return;\n    }\n\n    return childColumns.reduce(function (result, childColumn) {\n      if (_this._needColumnExporting(childColumn)) {\n        return result + (_this._calculateExportColspan(childColumn) || 1);\n      } else {\n        return result;\n      }\n    }, 0);\n  },\n  _needColumnExporting: function _needColumnExporting(column) {\n    return !column.command && (column.allowExporting || void 0 === column.allowExporting);\n  },\n  _getFooterSummaryItems: function _getFooterSummaryItems(summaryCells, isTotal) {\n    var result = [];\n    var estimatedItemsCount = 1;\n    var i = 0;\n\n    do {\n      var values = [];\n\n      for (var j = 0; j < summaryCells.length; j++) {\n        var summaryCell = summaryCells[j];\n        var itemsLength = summaryCell.length;\n\n        if (estimatedItemsCount < itemsLength) {\n          estimatedItemsCount = itemsLength;\n        }\n\n        values.push(summaryCell[i]);\n      }\n\n      result.push({\n        values: values,\n        rowType: isTotal ? \"totalFooter\" : \"groupFooter\"\n      });\n    } while (i++ < estimatedItemsCount - 1);\n\n    return result;\n  },\n  _hasSummaryGroupFooters: function _hasSummaryGroupFooters() {\n    var groupItems = this.option(\"summary.groupItems\");\n\n    if (isDefined(groupItems)) {\n      for (var i = 0; i < groupItems.length; i++) {\n        if (groupItems[i].showInGroupFooter) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n  _getItemsWithSummaryGroupFooters: function _getItemsWithSummaryGroupFooters(sourceItems) {\n    var result = [];\n    var beforeGroupFooterItems = [];\n    var groupFooterItems = [];\n\n    for (var i = 0; i < sourceItems.length; i++) {\n      var item = sourceItems[i];\n\n      if (\"groupFooter\" === item.rowType) {\n        groupFooterItems = this._getFooterSummaryItems(item.summaryCells);\n        result = result.concat(beforeGroupFooterItems, groupFooterItems);\n        beforeGroupFooterItems = [];\n      } else {\n        beforeGroupFooterItems.push(item);\n      }\n    }\n\n    return result.length ? result : beforeGroupFooterItems;\n  },\n  _updateGroupValuesWithSummaryByColumn: function _updateGroupValuesWithSummaryByColumn(sourceItems) {\n    var summaryValues = [];\n\n    for (var i = 0; i < sourceItems.length; i++) {\n      var item = sourceItems[i];\n      var summaryCells = item.summaryCells;\n\n      if (\"group\" === item.rowType && summaryCells && summaryCells.length > 1) {\n        var groupColumnCount = item.values.length;\n\n        for (var j = 1; j < summaryCells.length; j++) {\n          for (var k = 0; k < summaryCells[j].length; k++) {\n            var summaryItem = summaryCells[j][k];\n\n            if (summaryItem && summaryItem.alignByColumn) {\n              if (!Array.isArray(summaryValues[j - groupColumnCount])) {\n                summaryValues[j - groupColumnCount] = [];\n              }\n\n              summaryValues[j - groupColumnCount].push(summaryItem);\n            }\n          }\n        }\n\n        if (summaryValues.length > 0) {\n          merge(item.values, summaryValues);\n          summaryValues = [];\n        }\n      }\n    }\n  },\n  _processUnExportedItems: function _processUnExportedItems(items) {\n    var columns = this._columnsController.getVisibleColumns(null, true);\n\n    var groupColumns = this._columnsController.getGroupColumns();\n\n    var values;\n    var summaryCells;\n\n    for (var i = 0; i < items.length; i++) {\n      var item = items[i];\n      var isDetailExpandColumn = false;\n      values = [];\n      summaryCells = [];\n\n      for (var j = 0; j < columns.length; j++) {\n        var column = columns[j];\n        isDetailExpandColumn = isDetailExpandColumn || \"detailExpand\" === column.type;\n\n        if (this._needColumnExporting(column)) {\n          if (item.values) {\n            if (\"group\" === item.rowType && !values.length) {\n              values.push(item.key[item.groupIndex]);\n            } else {\n              values.push(item.values[j]);\n            }\n          }\n\n          if (item.summaryCells) {\n            if (\"group\" === item.rowType && !summaryCells.length) {\n              var index = j - groupColumns.length + item.groupIndex;\n              summaryCells.push(item.summaryCells[isDetailExpandColumn ? index : index + 1]);\n            } else {\n              summaryCells.push(item.summaryCells[j]);\n            }\n          }\n        }\n      }\n\n      if (values.length) {\n        item.values = values;\n      }\n\n      if (summaryCells.length) {\n        item.summaryCells = summaryCells;\n      }\n    }\n  },\n  _getAllItems: function _getAllItems(data) {\n    var that = this;\n    var d = new Deferred();\n    var dataController = this.getController(\"data\");\n    var footerItems = dataController.footerItems();\n    var totalItem = footerItems.length && footerItems[0];\n    var summaryTotalItems = that.option(\"summary.totalItems\");\n    var summaryCells;\n    when(data).done(function (data) {\n      dataController.loadAll(data).done(function (sourceItems, totalAggregates) {\n        that._updateGroupValuesWithSummaryByColumn(sourceItems);\n\n        if (that._hasSummaryGroupFooters()) {\n          sourceItems = that._getItemsWithSummaryGroupFooters(sourceItems);\n        }\n\n        summaryCells = totalItem && totalItem.summaryCells;\n\n        if (isDefined(totalAggregates) && summaryTotalItems) {\n          summaryCells = that._getSummaryCells(summaryTotalItems, totalAggregates);\n        }\n\n        var summaryItems = totalItem && that._getFooterSummaryItems(summaryCells, true);\n\n        if (summaryItems) {\n          sourceItems = sourceItems.concat(summaryItems);\n        }\n\n        that._processUnExportedItems(sourceItems);\n\n        d.resolve(sourceItems);\n      }).fail(d.reject);\n    }).fail(d.reject);\n    return d;\n  },\n  _getSummaryCells: function _getSummaryCells(summaryTotalItems, totalAggregates) {\n    var dataController = this.getController(\"data\");\n    var columnsController = dataController._columnsController;\n    return dataController._calculateSummaryCells(summaryTotalItems, totalAggregates, columnsController.getVisibleColumns(null, true), function (summaryItem, column) {\n      return dataController._isDataColumn(column) ? column.index : -1;\n    });\n  },\n  _getSelectedItems: function _getSelectedItems() {\n    var selectionController = this.getController(\"selection\");\n    var selectedRowData = selectionController.getSelectedRowsData();\n    return this._getAllItems(selectedRowData);\n  },\n  _getColumnWidths: function _getColumnWidths(headersView, rowsView) {\n    return headersView && headersView.isVisible() ? headersView.getColumnWidths() : rowsView.getColumnWidths();\n  },\n  init: function init() {\n    this._columnsController = this.getController(\"columns\");\n    this._rowsView = this.getView(\"rowsView\");\n    this._headersView = this.getView(\"columnHeadersView\");\n    this.createAction(\"onExporting\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n    this.createAction(\"onExported\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n    this.createAction(\"onFileSaving\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n  },\n  callbackNames: function callbackNames() {\n    return [\"selectionOnlyChanged\"];\n  },\n  getExportFormat: function getExportFormat() {\n    return [\"EXCEL\"];\n  },\n  getDataProvider: function getDataProvider(selectedRowsOnly) {\n    var columnWidths = this._getColumnWidths(this._headersView, this._rowsView);\n\n    var initialColumnWidthsByColumnIndex;\n\n    if (columnWidths && columnWidths.length) {\n      initialColumnWidthsByColumnIndex = {};\n\n      var columnsLastRowVisibleColumns = this._columnsController.getVisibleColumns(this._columnsController.getRowCount(), true);\n\n      for (var i = 0; i < columnsLastRowVisibleColumns.length; i++) {\n        initialColumnWidthsByColumnIndex[columnsLastRowVisibleColumns[i].index] = columnWidths[i];\n      }\n    }\n\n    return new DataProvider(this, initialColumnWidthsByColumnIndex, selectedRowsOnly);\n  },\n  exportToExcel: function exportToExcel(selectionOnly) {\n    this._selectionOnly = selectionOnly;\n    clientExport(this.component.getDataProvider(), {\n      fileName: this.option(\"export.fileName\"),\n      proxyUrl: this.option(\"export.proxyUrl\"),\n      format: \"EXCEL\",\n      autoFilterEnabled: !!this.option(\"export.excelFilterEnabled\"),\n      rtlEnabled: this.option(\"rtlEnabled\"),\n      ignoreErrors: this.option(\"export.ignoreExcelErrors\"),\n      exportingAction: this.getAction(\"onExporting\"),\n      exportedAction: this.getAction(\"onExported\"),\n      fileSavingAction: this.getAction(\"onFileSaving\")\n    }, excel.getData);\n  },\n  publicMethods: function publicMethods() {\n    return [\"getDataProvider\", \"getExportFormat\", \"exportToExcel\"];\n  },\n  selectionOnly: function selectionOnly(value) {\n    if (isDefined(value)) {\n      this._isSelectedRows = value;\n      this.selectionOnlyChanged.fire();\n    } else {\n      return this._isSelectedRows;\n    }\n  }\n});\ndataGridCore.registerModule(\"export\", {\n  defaultOptions: function defaultOptions() {\n    return {\n      export: {\n        enabled: false,\n        fileName: \"DataGrid\",\n        excelFilterEnabled: false,\n        excelWrapTextEnabled: void 0,\n        proxyUrl: void 0,\n        allowExportSelectedData: false,\n        ignoreExcelErrors: true,\n        texts: {\n          exportTo: messageLocalization.format(\"dxDataGrid-exportTo\"),\n          exportAll: messageLocalization.format(\"dxDataGrid-exportAll\"),\n          exportSelectedRows: messageLocalization.format(\"dxDataGrid-exportSelectedRows\")\n        }\n      }\n    };\n  },\n  controllers: {\n    export: ExportController\n  },\n  extenders: {\n    controllers: {\n      editing: {\n        callbackNames: function callbackNames() {\n          var callbackList = this.callBase();\n          return isDefined(callbackList) ? callbackList.push(\"editingChanged\") : [\"editingChanged\"];\n        },\n        _updateEditButtons: function _updateEditButtons() {\n          this.callBase();\n          this.editingChanged.fire(this.hasChanges());\n        }\n      }\n    },\n    views: {\n      headerPanel: {\n        _getToolbarItems: function _getToolbarItems() {\n          var items = this.callBase();\n\n          var exportButton = this._getExportToolbarButton();\n\n          if (exportButton) {\n            items.push(exportButton);\n\n            this._correctItemsPosition(items);\n          }\n\n          return items;\n        },\n        _getExportToolbarButton: function _getExportToolbarButton() {\n          var _this2 = this;\n\n          var items = this._getExportToolbarItems();\n\n          if (0 === items.length) {\n            return null;\n          }\n\n          var toolbarButtonOptions = {\n            name: DATAGRID_EXPORT_TOOLBAR_BUTTON_NAME,\n            location: \"after\",\n            locateInMenu: \"auto\",\n            sortIndex: 30,\n            options: {\n              items: items\n            }\n          };\n\n          if (1 === items.length) {\n            var widgetOptions = _extends({}, items[0], {\n              hint: items[0].text,\n              elementAttr: {\n                class: DATAGRID_EXPORT_BUTTON_CLASS\n              }\n            });\n\n            toolbarButtonOptions.widget = \"dxButton\";\n            toolbarButtonOptions.showText = \"inMenu\";\n            toolbarButtonOptions.options = widgetOptions;\n          } else {\n            var _widgetOptions = {\n              icon: DATAGRID_EXPORT_ICON,\n              displayExpr: \"text\",\n              items: items,\n              hint: this.option(\"export.texts.exportTo\"),\n              elementAttr: {\n                class: DATAGRID_EXPORT_BUTTON_CLASS\n              },\n              dropDownOptions: {\n                wrapperAttr: {\n                  class: DATAGRID_EXPORT_MENU_CLASS\n                },\n                width: \"auto\"\n              }\n            };\n            toolbarButtonOptions.options = _widgetOptions;\n            toolbarButtonOptions.widget = \"dxDropDownButton\";\n\n            toolbarButtonOptions.menuItemTemplate = function (_data, _index, container) {\n              _this2._createComponent($(container), List, {\n                items: items\n              });\n            };\n          }\n\n          return toolbarButtonOptions;\n        },\n        _getExportToolbarItems: function _getExportToolbarItems() {\n          var _this3 = this;\n\n          var exportOptions = this.option(\"export\");\n          var texts = this.option(\"export.texts\");\n          var items = [];\n\n          if (exportOptions.enabled) {\n            items.push({\n              text: texts.exportAll,\n              icon: DATAGRID_EXPORT_EXCEL_ICON,\n              onClick: function onClick() {\n                _this3._exportController.exportToExcel();\n              }\n            });\n\n            if (exportOptions.allowExportSelectedData) {\n              items.push({\n                text: texts.exportSelectedRows,\n                icon: DATAGRID_EXPORT_SELECTED_ICON,\n                onClick: function onClick() {\n                  _this3._exportController.exportToExcel(true);\n                }\n              });\n            }\n          }\n\n          return items;\n        },\n        _correctItemsPosition: function _correctItemsPosition(items) {\n          items.sort(function (itemA, itemB) {\n            return itemA.sortIndex - itemB.sortIndex;\n          });\n        },\n        _isExportButtonVisible: function _isExportButtonVisible() {\n          return this.option(\"export.enabled\");\n        },\n        _getButtonOptions: function _getButtonOptions(allowExportSelected) {\n          var that = this;\n          var texts = that.option(\"export.texts\");\n          var options;\n\n          if (allowExportSelected) {\n            options = {\n              hint: texts.exportTo,\n              icon: DATAGRID_EXPORT_ICON\n            };\n          } else {\n            options = {\n              hint: texts.exportAll,\n              icon: DATAGRID_EXPORT_EXCEL_BUTTON_ICON,\n              onClick: function onClick() {\n                that._exportController.exportToExcel();\n              }\n            };\n          }\n\n          return options;\n        },\n        optionChanged: function optionChanged(args) {\n          this.callBase(args);\n\n          if (\"export\" === args.name) {\n            args.handled = true;\n\n            this._invalidate();\n          }\n        },\n        init: function init() {\n          var that = this;\n          this.callBase();\n          this._exportController = this.getController(\"export\");\n          this._editingController = this.getController(\"editing\");\n\n          this._editingController.editingChanged.add(function (hasChanges) {\n            that.setToolbarItemDisabled(\"exportButton\", hasChanges);\n          });\n        },\n        isVisible: function isVisible() {\n          return this.callBase() || this._isExportButtonVisible();\n        }\n      }\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"module"}