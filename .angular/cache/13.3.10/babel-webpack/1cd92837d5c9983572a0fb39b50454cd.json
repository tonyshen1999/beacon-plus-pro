{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.editing_row_based.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { EDIT_MODE_ROW, MODES_WITH_DELAYED_FOCUS, ROW_SELECTED_CLASS, EDIT_FORM_CLASS } from \"./ui.grid_core.editing_constants\";\nvar EDIT_ROW = \"dx-edit-row\";\nexport var editingRowBasedModule = {\n  extenders: {\n    controllers: {\n      editing: {\n        isRowEditMode: function isRowEditMode() {\n          return this.getEditMode() === EDIT_MODE_ROW;\n        },\n        _afterCancelEditData: function _afterCancelEditData(rowIndex) {\n          var dataController = this._dataController;\n\n          if (this.isRowBasedEditMode() && rowIndex >= 0) {\n            dataController.updateItems({\n              changeType: \"update\",\n              rowIndices: [rowIndex, rowIndex + 1]\n            });\n          } else {\n            this.callBase.apply(this, arguments);\n          }\n        },\n        _isDefaultButtonVisible: function _isDefaultButtonVisible(button, options) {\n          var isRowMode = this.isRowBasedEditMode();\n\n          var isEditRow = options.row && options.row.rowIndex === this._getVisibleEditRowIndex();\n\n          if (isRowMode) {\n            switch (button.name) {\n              case \"edit\":\n                return !isEditRow && this.allowUpdating(options);\n\n              case \"delete\":\n                return this.callBase.apply(this, arguments) && !isEditRow;\n\n              case \"save\":\n              case \"cancel\":\n                return isEditRow;\n\n              default:\n                return this.callBase.apply(this, arguments);\n            }\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        isEditRow: function isEditRow(rowIndex) {\n          return this.isRowBasedEditMode() && this._isEditRowByIndex(rowIndex);\n        },\n        _cancelSaving: function _cancelSaving() {\n          if (this.isRowBasedEditMode()) {\n            if (!this.hasChanges()) {\n              this._cancelEditDataCore();\n            }\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        _refreshCore: function _refreshCore() {\n          if (this.isRowBasedEditMode()) {\n            this.init();\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        _isEditColumnVisible: function _isEditColumnVisible() {\n          var result = this.callBase.apply(this, arguments);\n          var editingOptions = this.option(\"editing\");\n          var isRowEditMode = this.isRowEditMode();\n          var isVisibleInRowEditMode = editingOptions.allowUpdating || editingOptions.allowAdding;\n          return result || isRowEditMode && isVisibleInRowEditMode;\n        },\n        _focusEditorIfNeed: function _focusEditorIfNeed() {\n          var _this = this;\n\n          var editMode = this.getEditMode();\n\n          if (this._needFocusEditor) {\n            if (-1 !== MODES_WITH_DELAYED_FOCUS.indexOf(editMode)) {\n              var $editingCell = this.getFocusedCellInRow(this._getVisibleEditRowIndex());\n\n              this._delayedInputFocus($editingCell, function () {\n                $editingCell && _this.component.focus($editingCell);\n              });\n            }\n\n            this._needFocusEditor = false;\n          }\n        }\n      },\n      data: {\n        _getChangedColumnIndices: function _getChangedColumnIndices(oldItem, newItem, rowIndex, isLiveUpdate) {\n          var editingController = this.getController(\"editing\");\n\n          if (editingController.isRowBasedEditMode() && oldItem.isEditing !== newItem.isEditing) {\n            return;\n          }\n\n          return this.callBase.apply(this, arguments);\n        }\n      }\n    },\n    views: {\n      rowsView: {\n        _createRow: function _createRow(row) {\n          var $row = this.callBase.apply(this, arguments);\n\n          if (row) {\n            var editingController = this._editingController;\n            var isEditRow = editingController.isEditRow(row.rowIndex);\n\n            if (isEditRow) {\n              $row.addClass(EDIT_ROW);\n              $row.removeClass(ROW_SELECTED_CLASS);\n\n              if (\"detail\" === row.rowType) {\n                $row.addClass(this.addWidgetPrefix(EDIT_FORM_CLASS));\n              }\n            }\n          }\n\n          return $row;\n        },\n        _update: function _update(change) {\n          this.callBase(change);\n\n          if (\"updateSelection\" === change.changeType) {\n            this.getTableElements().children(\"tbody\").children(\".\" + EDIT_ROW).removeClass(ROW_SELECTED_CLASS);\n          }\n        }\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}