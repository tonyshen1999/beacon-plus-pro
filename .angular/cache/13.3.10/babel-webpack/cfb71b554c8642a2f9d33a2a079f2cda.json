{"ast":null,"code":"import _slicedToArray from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/appointments/rendering_strategies/strategy_horizontal_month.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport HorizontalMonthLineRenderingStrategy from \"./strategy_horizontal_month_line\";\nimport { getGroupWidth as _getGroupWidth } from \"../../workspaces/helpers/positionHelper\";\nvar MONTH_APPOINTMENT_HEIGHT_RATIO = .6;\nvar MONTH_APPOINTMENT_MIN_OFFSET = 26;\nvar MONTH_APPOINTMENT_MAX_OFFSET = 30;\nvar MONTH_DROPDOWN_APPOINTMENT_MIN_RIGHT_OFFSET = 36;\nvar MONTH_DROPDOWN_APPOINTMENT_MAX_RIGHT_OFFSET = 60;\n\nvar HorizontalMonthRenderingStrategy = /*#__PURE__*/function (_HorizontalMonthLineR) {\n  _inherits(HorizontalMonthRenderingStrategy, _HorizontalMonthLineR);\n\n  var _super = _createSuper(HorizontalMonthRenderingStrategy);\n\n  function HorizontalMonthRenderingStrategy() {\n    _classCallCheck(this, HorizontalMonthRenderingStrategy);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(HorizontalMonthRenderingStrategy, [{\n    key: \"endViewDate\",\n    get: function get() {\n      return this.options.endViewDate;\n    }\n  }, {\n    key: \"adaptivityEnabled\",\n    get: function get() {\n      return this.options.adaptivityEnabled;\n    }\n  }, {\n    key: \"DOMMetaData\",\n    get: function get() {\n      return this.options.DOMMetaData;\n    }\n  }, {\n    key: \"_getLeftPosition\",\n    value: function _getLeftPosition(settings) {\n      var fullWeekAppointmentWidth = this.getGroupWidth(settings.groupIndex);\n      return this._calculateMultiWeekAppointmentLeftOffset(settings.hMax, fullWeekAppointmentWidth);\n    }\n  }, {\n    key: \"_getChunkCount\",\n    value: function _getChunkCount(fullChunksWidth, firstChunkWidth, weekWidth) {\n      var rawFullChunksWidth = fullChunksWidth - firstChunkWidth + weekWidth;\n      return Math.ceil(rawFullChunksWidth / weekWidth);\n    }\n  }, {\n    key: \"_getChunkWidths\",\n    value: function _getChunkWidths(geometry) {\n      var firstChunkWidth = geometry.reducedWidth;\n      var fullChunksWidth = Math.floor(geometry.sourceAppointmentWidth);\n      var widthWithoutFirstChunk = fullChunksWidth - firstChunkWidth;\n      return [firstChunkWidth, fullChunksWidth, widthWithoutFirstChunk];\n    }\n  }, {\n    key: \"_getTailChunkSettings\",\n    value: function _getTailChunkSettings(withoutFirstChunkWidth, weekWidth, leftPosition) {\n      var tailChunkWidth = withoutFirstChunkWidth % weekWidth || weekWidth;\n      var rtlPosition = leftPosition + (weekWidth - tailChunkWidth);\n      var tailChunkLeftPosition = this.rtlEnabled ? rtlPosition : leftPosition;\n      return [tailChunkWidth, tailChunkLeftPosition];\n    }\n  }, {\n    key: \"_getAppointmentParts\",\n    value: function _getAppointmentParts(geometry, settings) {\n      var result = [];\n      var weekWidth = Math.round(this.getGroupWidth(settings.groupIndex));\n\n      var _this$_getChunkWidths = this._getChunkWidths(geometry, settings, weekWidth),\n          _this$_getChunkWidths2 = _slicedToArray(_this$_getChunkWidths, 3),\n          firstChunkWidth = _this$_getChunkWidths2[0],\n          fullChunksWidth = _this$_getChunkWidths2[1],\n          withoutFirstChunkWidth = _this$_getChunkWidths2[2];\n\n      var leftPosition = this._getLeftPosition(settings);\n\n      var hasTailChunk = this.endViewDate > settings.info.appointment.endDate;\n\n      var chunkCount = this._getChunkCount(fullChunksWidth, firstChunkWidth, weekWidth);\n\n      var _this$_getTailChunkSe = this._getTailChunkSettings(withoutFirstChunkWidth, weekWidth, leftPosition),\n          _this$_getTailChunkSe2 = _slicedToArray(_this$_getTailChunkSe, 2),\n          tailChunkWidth = _this$_getTailChunkSe2[0],\n          tailChunkLeftPosition = _this$_getTailChunkSe2[1];\n\n      for (var chunkIndex = 1; chunkIndex < chunkCount; chunkIndex++) {\n        var topPosition = settings.top + this.cellHeight * chunkIndex;\n        var isTailChunk = hasTailChunk && chunkIndex === chunkCount - 1;\n        result.push(_extends({}, settings, {\n          top: topPosition,\n          left: isTailChunk ? tailChunkLeftPosition : leftPosition,\n          height: geometry.height,\n          width: isTailChunk ? tailChunkWidth : weekWidth,\n          appointmentReduced: isTailChunk ? \"tail\" : \"body\",\n          rowIndex: ++settings.rowIndex,\n          columnIndex: 0\n        }));\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_calculateMultiWeekAppointmentLeftOffset\",\n    value: function _calculateMultiWeekAppointmentLeftOffset(max, width) {\n      return this.rtlEnabled ? max : max - width;\n    }\n  }, {\n    key: \"getGroupWidth\",\n    value: function getGroupWidth(groupIndex) {\n      return _getGroupWidth(groupIndex, this.viewDataProvider, {\n        intervalCount: this.options.intervalCount,\n        currentDate: this.options.currentDate,\n        viewType: this.options.viewType,\n        hoursInterval: this.options.hoursInterval,\n        startDayHour: this.options.startDayHour,\n        endDayHour: this.options.endDayHour,\n        isVirtualScrolling: this.isVirtualScrolling,\n        rtlEnabled: this.rtlEnabled,\n        DOMMetaData: this.DOMMetaData\n      });\n    }\n  }, {\n    key: \"_getAppointmentDefaultHeight\",\n    value: function _getAppointmentDefaultHeight() {\n      return this._getAppointmentHeightByTheme();\n    }\n  }, {\n    key: \"_getAppointmentMinHeight\",\n    value: function _getAppointmentMinHeight() {\n      return this._getAppointmentDefaultHeight();\n    }\n  }, {\n    key: \"_columnCondition\",\n    value: function _columnCondition(a, b) {\n      var conditions = this._getConditions(a, b);\n\n      return conditions.rowCondition || conditions.columnCondition || conditions.cellPositionCondition;\n    }\n  }, {\n    key: \"createTaskPositionMap\",\n    value: function createTaskPositionMap(items) {\n      return _get(_getPrototypeOf(HorizontalMonthRenderingStrategy.prototype), \"createTaskPositionMap\", this).call(this, items, true);\n    }\n  }, {\n    key: \"_getSortedPositions\",\n    value: function _getSortedPositions(map) {\n      return _get(_getPrototypeOf(HorizontalMonthRenderingStrategy.prototype), \"_getSortedPositions\", this).call(this, map, true);\n    }\n  }, {\n    key: \"_getDefaultRatio\",\n    value: function _getDefaultRatio() {\n      return MONTH_APPOINTMENT_HEIGHT_RATIO;\n    }\n  }, {\n    key: \"_getOffsets\",\n    value: function _getOffsets() {\n      return {\n        unlimited: MONTH_APPOINTMENT_MIN_OFFSET,\n        auto: MONTH_APPOINTMENT_MAX_OFFSET\n      };\n    }\n  }, {\n    key: \"getDropDownAppointmentWidth\",\n    value: function getDropDownAppointmentWidth(intervalCount) {\n      if (this.adaptivityEnabled) {\n        return this.getDropDownButtonAdaptiveSize();\n      }\n\n      var offset = intervalCount > 1 ? MONTH_DROPDOWN_APPOINTMENT_MAX_RIGHT_OFFSET : MONTH_DROPDOWN_APPOINTMENT_MIN_RIGHT_OFFSET;\n      return this.cellWidth - offset;\n    }\n  }, {\n    key: \"needCorrectAppointmentDates\",\n    value: function needCorrectAppointmentDates() {\n      return false;\n    }\n  }, {\n    key: \"_needVerticalGroupBounds\",\n    value: function _needVerticalGroupBounds() {\n      return false;\n    }\n  }, {\n    key: \"_needHorizontalGroupBounds\",\n    value: function _needHorizontalGroupBounds() {\n      return true;\n    }\n  }, {\n    key: \"getPositionShift\",\n    value: function getPositionShift(timeShift) {\n      return {\n        cellPosition: timeShift * this.cellWidth,\n        top: 0,\n        left: 0\n      };\n    }\n  }]);\n\n  return HorizontalMonthRenderingStrategy;\n}(HorizontalMonthLineRenderingStrategy);\n\nexport default HorizontalMonthRenderingStrategy;","map":null,"metadata":{},"sourceType":"module"}