{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/shaders/ui.scheduler.current_time_shader.horizontal.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { setWidth } from \"../../../core/utils/size\";\nimport { getBoundingRect } from \"../../../core/utils/position\";\nimport CurrentTimeShader from \"../shaders/ui.scheduler.current_time_shader\";\n\nvar HorizontalCurrentTimeShader = /*#__PURE__*/function (_CurrentTimeShader) {\n  _inherits(HorizontalCurrentTimeShader, _CurrentTimeShader);\n\n  var _super = _createSuper(HorizontalCurrentTimeShader);\n\n  function HorizontalCurrentTimeShader() {\n    _classCallCheck(this, HorizontalCurrentTimeShader);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(HorizontalCurrentTimeShader, [{\n    key: \"renderShader\",\n    value: function renderShader() {\n      var groupCount = this._workSpace._isHorizontalGroupedWorkSpace() ? this._workSpace._getGroupCount() : 1;\n\n      for (var i = 0; i < groupCount; i++) {\n        var isFirstShader = 0 === i;\n        var $shader = isFirstShader ? this._$shader : this.createShader();\n\n        if (this._workSpace.isGroupedByDate()) {\n          this._customizeGroupedByDateShader($shader, i);\n        } else {\n          this._customizeShader($shader, i);\n        }\n\n        !isFirstShader && this._shader.push($shader);\n      }\n    }\n  }, {\n    key: \"_customizeShader\",\n    value: function _customizeShader($shader, groupIndex) {\n      var shaderWidth = this._workSpace.getIndicationWidth();\n\n      this._applyShaderWidth($shader, shaderWidth);\n\n      if (groupIndex >= 1) {\n        var workSpace = this._workSpace;\n        var indicationWidth = workSpace._getCellCount() * workSpace.getCellWidth();\n        $shader.css(\"left\", indicationWidth);\n      } else {\n        $shader.css(\"left\", 0);\n      }\n    }\n  }, {\n    key: \"_applyShaderWidth\",\n    value: function _applyShaderWidth($shader, width) {\n      var maxWidth = getBoundingRect(this._$container.get(0)).width;\n\n      if (width > maxWidth) {\n        width = maxWidth;\n      }\n\n      if (width > 0) {\n        setWidth($shader, width);\n      }\n    }\n  }, {\n    key: \"_customizeGroupedByDateShader\",\n    value: function _customizeGroupedByDateShader($shader, groupIndex) {\n      var cellCount = this._workSpace.getIndicationCellCount();\n\n      var integerPart = Math.floor(cellCount);\n      var fractionPart = cellCount - integerPart;\n      var isFirstShaderPart = 0 === groupIndex;\n      var workSpace = this._workSpace;\n      var shaderWidth = isFirstShaderPart ? workSpace.getIndicationWidth() : fractionPart * workSpace.getCellWidth();\n      var shaderLeft;\n\n      this._applyShaderWidth($shader, shaderWidth);\n\n      if (isFirstShaderPart) {\n        shaderLeft = workSpace._getCellCount() * workSpace.getCellWidth() * groupIndex;\n      } else {\n        shaderLeft = workSpace.getCellWidth() * integerPart * workSpace._getGroupCount() + groupIndex * workSpace.getCellWidth();\n      }\n\n      $shader.css(\"left\", shaderLeft);\n    }\n  }]);\n\n  return HorizontalCurrentTimeShader;\n}(CurrentTimeShader);\n\nexport default HorizontalCurrentTimeShader;","map":null,"metadata":{},"sourceType":"module"}