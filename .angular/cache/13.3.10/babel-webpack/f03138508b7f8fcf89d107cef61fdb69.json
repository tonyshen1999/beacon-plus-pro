{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/ui/html_editor/modules/tableContextMenu.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport Quill from \"devextreme-quill\";\nimport $ from \"../../../core/renderer\";\nimport BaseModule from \"./base\";\nimport eventsEngine from \"../../../events/core/events_engine\";\nimport { addNamespace } from \"../../../events/utils/index\";\nimport ContextMenu from \"../../context_menu\";\nimport localizationMessage from \"../../../localization/message\";\nimport { getTableFormats } from \"../utils/table_helper\";\nimport { getFormatHandlers, getDefaultClickHandler, ICON_MAP } from \"../utils/toolbar_helper\";\nimport { each } from \"../../../core/utils/iterator\";\nimport { isString, isObject } from \"../../../core/utils/type\";\nimport { titleize, camelize } from \"../../../core/utils/inflector\";\nimport { extend } from \"../../../core/utils/extend\";\nvar MODULE_NAMESPACE = \"dxHtmlEditorTableContextMenu\";\nvar CONTEXT_MENU_EVENT = addNamespace(\"dxcontextmenu\", MODULE_NAMESPACE);\nvar TableContextMenuModule = BaseModule;\n\nvar localize = function localize(name) {\n  return localizationMessage.format(\"dxHtmlEditor-\".concat(camelize(name)));\n};\n\nif (Quill) {\n  TableContextMenuModule = /*#__PURE__*/function (_BaseModule) {\n    _inherits(TableContextMenuModule, _BaseModule);\n\n    var _super = _createSuper(TableContextMenuModule);\n\n    function TableContextMenuModule(quill, options) {\n      var _this;\n\n      _classCallCheck(this, TableContextMenuModule);\n\n      _this = _super.call(this, quill, options);\n      _this.enabled = !!options.enabled;\n      _this._quillContainer = _this.editorInstance._getQuillContainer();\n\n      _this.addCleanCallback(_this.prepareCleanCallback());\n\n      _this._formatHandlers = getFormatHandlers(_assertThisInitialized(_this));\n      _this._tableFormats = getTableFormats(quill);\n\n      if (_this.enabled) {\n        _this._enableContextMenu(options.items);\n      }\n\n      return _this;\n    }\n\n    _createClass(TableContextMenuModule, [{\n      key: \"_enableContextMenu\",\n      value: function _enableContextMenu(items) {\n        var _this$_contextMenu;\n\n        null === (_this$_contextMenu = this._contextMenu) || void 0 === _this$_contextMenu ? void 0 : _this$_contextMenu.dispose();\n        this._contextMenu = this._createContextMenu(items);\n\n        this._attachEvents();\n      }\n    }, {\n      key: \"_attachEvents\",\n      value: function _attachEvents() {\n        eventsEngine.on(this.editorInstance._getContent(), CONTEXT_MENU_EVENT, this._prepareContextMenuHandler());\n      }\n    }, {\n      key: \"_detachEvents\",\n      value: function _detachEvents() {\n        eventsEngine.off(this.editorInstance._getContent(), CONTEXT_MENU_EVENT);\n      }\n    }, {\n      key: \"_createContextMenu\",\n      value: function _createContextMenu(items) {\n        var $container = $(\"<div>\").appendTo(this.editorInstance.$element());\n\n        var menuConfig = this._getMenuConfig(items);\n\n        return this.editorInstance._createComponent($container, ContextMenu, menuConfig);\n      }\n    }, {\n      key: \"showPropertiesForm\",\n      value: function showPropertiesForm() {\n        var type = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : \"cell\";\n        var $element = $(this._targetElement).closest(\"cell\" === type ? \"th, td\" : \"table\");\n\n        this._contextMenu.hide();\n\n        this._formatHandlers[\"\".concat(type, \"Properties\")]($element);\n\n        this._targetElement = null;\n      }\n    }, {\n      key: \"_isAcceptableItem\",\n      value: function _isAcceptableItem(widget, acceptableWidgetName) {\n        return !widget || widget === acceptableWidgetName;\n      }\n    }, {\n      key: \"_handleObjectItem\",\n      value: function _handleObjectItem(item) {\n        if (item.name && this._isAcceptableItem(item.widget, \"dxButton\")) {\n          var defaultButtonItemConfig = this._prepareMenuItemConfig(item.name);\n\n          var buttonItemConfig = extend(true, defaultButtonItemConfig, item);\n          return buttonItemConfig;\n        } else if (item.items) {\n          item.items = this._prepareMenuItems(item.items);\n          return item;\n        } else {\n          return item;\n        }\n      }\n    }, {\n      key: \"_prepareMenuItemConfig\",\n      value: function _prepareMenuItemConfig(name) {\n        var _ICON_MAP$name, _this$_formatHandlers;\n\n        var iconName = null !== (_ICON_MAP$name = ICON_MAP[name]) && void 0 !== _ICON_MAP$name ? _ICON_MAP$name : name;\n        var buttonText = titleize(name);\n        return {\n          text: localize(buttonText),\n          icon: iconName.toLowerCase(),\n          onClick: null !== (_this$_formatHandlers = this._formatHandlers[name]) && void 0 !== _this$_formatHandlers ? _this$_formatHandlers : getDefaultClickHandler(this, name)\n        };\n      }\n    }, {\n      key: \"_prepareMenuItems\",\n      value: function _prepareMenuItems(items) {\n        var _this2 = this;\n\n        var resultItems = [];\n        each(items, function (_, item) {\n          var newItem;\n\n          if (isObject(item)) {\n            newItem = _this2._handleObjectItem(item);\n          } else if (isString(item)) {\n            newItem = _this2._prepareMenuItemConfig(item);\n          }\n\n          if (newItem) {\n            resultItems.push(newItem);\n          }\n        });\n        return resultItems;\n      }\n    }, {\n      key: \"_getMenuConfig\",\n      value: function _getMenuConfig(items) {\n        var _this3 = this;\n\n        var defaultItems = [{\n          text: localize(\"insert\"),\n          items: [\"insertHeaderRow\", \"insertRowAbove\", \"insertRowBelow\", extend(this._prepareMenuItemConfig(\"insertColumnLeft\"), {\n            beginGroup: true\n          }), \"insertColumnRight\"]\n        }, {\n          text: localize(\"delete\"),\n          items: [\"deleteColumn\", \"deleteRow\", \"deleteTable\"]\n        }, extend(this._prepareMenuItemConfig(\"cellProperties\"), {\n          onClick: function onClick(e) {\n            _this3.showPropertiesForm(\"cell\");\n          }\n        }), extend(this._prepareMenuItemConfig(\"tableProperties\"), {\n          onClick: function onClick(e) {\n            _this3.showPropertiesForm(\"table\");\n          }\n        })];\n\n        var customItems = this._prepareMenuItems(null !== items && void 0 !== items && items.length ? items : defaultItems);\n\n        return {\n          target: this._quillContainer,\n          showEvent: null,\n          hideOnParentScroll: false,\n          items: customItems\n        };\n      }\n    }, {\n      key: \"_prepareContextMenuHandler\",\n      value: function _prepareContextMenuHandler() {\n        var _this4 = this;\n\n        return function (event) {\n          if (_this4._isTableTarget(event.target)) {\n            _this4._targetElement = event.target;\n\n            _this4._setContextMenuPosition(event);\n\n            _this4._contextMenu.show();\n\n            event.preventDefault();\n          }\n        };\n      }\n    }, {\n      key: \"_setContextMenuPosition\",\n      value: function _setContextMenuPosition(event) {\n        var startPosition = this._quillContainer.get(0).getBoundingClientRect();\n\n        this._contextMenu.option({\n          position: {\n            my: \"left top\",\n            at: \"left top\",\n            collision: \"fit fit\",\n            offset: {\n              x: event.clientX - startPosition.left,\n              y: event.clientY - startPosition.top\n            }\n          }\n        });\n      }\n    }, {\n      key: \"_isTableTarget\",\n      value: function _isTableTarget(targetElement) {\n        return !!$(targetElement).closest(\".dx-htmleditor-content td, .dx-htmleditor-content th\").length;\n      }\n    }, {\n      key: \"clean\",\n      value: function clean() {\n        this._detachEvents();\n      }\n    }, {\n      key: \"option\",\n      value: function option(_option, value) {\n        if (\"tableContextMenu\" === _option) {\n          this.handleOptionChangeValue(value);\n          return;\n        }\n\n        if (\"enabled\" === _option) {\n          this.enabled = value;\n          value ? this._enableContextMenu() : this.clean();\n        } else if (\"items\" === _option) {\n          var _this$_contextMenu2;\n\n          null === (_this$_contextMenu2 = this._contextMenu) || void 0 === _this$_contextMenu2 ? void 0 : _this$_contextMenu2.dispose();\n          this._contextMenu = this._createContextMenu(value);\n        }\n      }\n    }, {\n      key: \"prepareCleanCallback\",\n      value: function prepareCleanCallback() {\n        var _this5 = this;\n\n        return function () {\n          _this5.clean();\n        };\n      }\n    }]);\n\n    return TableContextMenuModule;\n  }(BaseModule);\n}\n\nexport default TableContextMenuModule;","map":null,"metadata":{},"sourceType":"module"}