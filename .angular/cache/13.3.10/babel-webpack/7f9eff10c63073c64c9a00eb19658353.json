{"ast":null,"code":"/**\r\n * DevExtreme (esm/data/remote_query.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport queryAdapters from \"./query_adapters\";\nimport { errors, handleError } from \"./errors\";\nimport { each } from \"../core/utils/iterator\";\nimport { isFunction } from \"../core/utils/type\";\nimport { Deferred } from \"../core/utils/deferred\";\nimport arrayQueryImpl from \"./array_query\";\n\nvar remoteQueryImpl = function remoteQueryImpl(url, queryOptions, tasks) {\n  tasks = tasks || [];\n  queryOptions = queryOptions || {};\n\n  var createTask = function createTask(name, args) {\n    return {\n      name: name,\n      args: args\n    };\n  };\n\n  var exec = function exec(executorTask) {\n    var d = new Deferred();\n\n    var _adapterFactory;\n\n    var _adapter;\n\n    var _taskQueue;\n\n    var _currentTask;\n\n    var _mergedSortArgs;\n\n    var rejectWithNotify = function rejectWithNotify(error) {\n      var handler = queryOptions.errorHandler;\n\n      if (handler) {\n        handler(error);\n      }\n\n      handleError(error);\n      d.reject(error);\n    };\n\n    function mergeSortTask(task) {\n      switch (task.name) {\n        case \"sortBy\":\n          _mergedSortArgs = [task.args];\n          return true;\n\n        case \"thenBy\":\n          if (!_mergedSortArgs) {\n            throw errors.Error(\"E4004\");\n          }\n\n          _mergedSortArgs.push(task.args);\n\n          return true;\n      }\n\n      return false;\n    }\n\n    try {\n      _adapterFactory = queryOptions.adapter;\n\n      if (!isFunction(_adapterFactory)) {\n        _adapterFactory = queryAdapters[_adapterFactory];\n      }\n\n      _adapter = _adapterFactory(queryOptions);\n      _taskQueue = [].concat(tasks).concat(executorTask);\n      var optimize = _adapter.optimize;\n\n      if (optimize) {\n        optimize(_taskQueue);\n      }\n\n      while (_taskQueue.length) {\n        _currentTask = _taskQueue[0];\n\n        if (!mergeSortTask(_currentTask)) {\n          if (_mergedSortArgs) {\n            _taskQueue.unshift(createTask(\"multiSort\", [_mergedSortArgs]));\n\n            _mergedSortArgs = null;\n            continue;\n          }\n\n          if (\"enumerate\" !== String(_currentTask.name)) {\n            if (!_adapter[_currentTask.name] || false === _adapter[_currentTask.name].apply(_adapter, _currentTask.args)) {\n              break;\n            }\n          }\n        }\n\n        _taskQueue.shift();\n      }\n\n      !function () {\n        var head = _taskQueue[0];\n        var unmergedTasks = [];\n\n        if (head && \"multiSort\" === head.name) {\n          _taskQueue.shift();\n\n          each(head.args[0], function () {\n            unmergedTasks.push(createTask(unmergedTasks.length ? \"thenBy\" : \"sortBy\", this));\n          });\n        }\n\n        _taskQueue = unmergedTasks.concat(_taskQueue);\n      }();\n\n      _adapter.exec(url).done(function (result, extra) {\n        if (!_taskQueue.length) {\n          d.resolve(result, extra);\n        } else {\n          var clientChain = arrayQueryImpl(result, {\n            errorHandler: queryOptions.errorHandler\n          });\n          each(_taskQueue, function () {\n            clientChain = clientChain[this.name].apply(clientChain, this.args);\n          });\n          clientChain.done(d.resolve).fail(d.reject);\n        }\n      }).fail(rejectWithNotify);\n    } catch (x) {\n      rejectWithNotify(x);\n    }\n\n    return d.promise();\n  };\n\n  var query = {};\n  each([\"sortBy\", \"thenBy\", \"filter\", \"slice\", \"select\", \"groupBy\"], function () {\n    var name = String(this);\n\n    query[name] = function () {\n      return remoteQueryImpl(url, queryOptions, tasks.concat(createTask(name, arguments)));\n    };\n  });\n  each([\"count\", \"min\", \"max\", \"sum\", \"avg\", \"aggregate\", \"enumerate\"], function () {\n    var name = String(this);\n\n    query[name] = function () {\n      return exec.call(this, createTask(name, arguments));\n    };\n  });\n  return query;\n};\n\nexport default remoteQueryImpl;","map":null,"metadata":{},"sourceType":"module"}