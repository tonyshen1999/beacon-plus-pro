{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/chart_components/shutter_zoom.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { start as dragEventStart, move as dragEventMove, end as dragEventEnd } from \"../../events/drag\";\nvar SHUTTER_EVENTS_NS = \".shutter-zoom\";\nvar DRAG_START_EVENT_NAME = dragEventStart + SHUTTER_EVENTS_NS;\nvar DRAG_UPDATE_EVENT_NAME = dragEventMove + SHUTTER_EVENTS_NS;\nvar DRAG_END_EVENT_NAME = dragEventEnd + SHUTTER_EVENTS_NS;\n\nfunction getPointerCoord(rootOffset, canvas, rotated, e) {\n  var coord = Math.floor(rotated ? e.pageY - rootOffset.top : e.pageX - rootOffset.left);\n  var min = rotated ? canvas.y1 : canvas.x1;\n  var max = rotated ? canvas.y2 : canvas.x2;\n\n  if (coord < min) {\n    coord = min;\n  } else if (coord > max) {\n    coord = max;\n  }\n\n  return coord;\n}\n\nfunction checkCoords(rootOffset, canvas, e) {\n  var x = e.pageX - rootOffset.left;\n  var y = e.pageY - rootOffset.top;\n  return x >= canvas.x1 && x <= canvas.x2 && y >= canvas.y1 && y <= canvas.y2;\n}\n\nfunction dragStartHandler(ctx) {\n  return function (e) {\n    var offset = ctx.getRootOffset();\n    var canvas = ctx.getCanvas();\n\n    if (!checkCoords(offset, canvas, e)) {\n      e.cancel = true;\n      return;\n    }\n\n    ctx.rootOffset = offset;\n    ctx.canvas = canvas;\n    ctx.startCoord = getPointerCoord(offset, canvas, ctx.rotated, e);\n    ctx.triggerStart();\n    ctx.rect.attr({\n      x: canvas.x1,\n      y: canvas.y1,\n      width: canvas.width,\n      height: canvas.height\n    }).append(ctx.root);\n  };\n}\n\nfunction dragHandler(ctx) {\n  return function (e) {\n    var curCoord = getPointerCoord(ctx.rootOffset, ctx.canvas, ctx.rotated, e);\n    var attr = {};\n    ctx.curCoord = curCoord;\n    attr[ctx.rotated ? \"y\" : \"x\"] = Math.min(ctx.startCoord, curCoord);\n    attr[ctx.rotated ? \"height\" : \"width\"] = Math.abs(ctx.startCoord - curCoord);\n    ctx.rect.attr(attr);\n  };\n}\n\nfunction dragEndHandler(ctx) {\n  return function (e) {\n    ctx.triggerEnd();\n    ctx.rect.remove();\n  };\n}\n\nfunction shutterZoom(options) {\n  var chart = options.chart;\n  var renderer = options.renderer;\n  var rotated = options.rotated;\n  var rect = renderer.rect(0, 0, 0, 0).attr(options.shutterOptions);\n  var shutter = {\n    rect: rect,\n    root: renderer.root,\n    rotated: rotated,\n    triggerStart: function triggerStart() {\n      chart._eventTrigger(\"zoomStart\");\n    },\n    triggerEnd: function triggerEnd() {\n      var tr = chart._argumentAxes[0].getTranslator();\n\n      var rangeStart = Math.min(this.startCoord, this.curCoord);\n      var rangeEnd = Math.max(this.startCoord, this.curCoord);\n\n      chart._eventTrigger(\"zoomEnd\", {\n        rangeStart: tr.from(rangeStart),\n        rangeEnd: tr.from(rangeEnd)\n      });\n    },\n    dispose: function dispose() {\n      renderer.root.off(SHUTTER_EVENTS_NS);\n      rect.dispose();\n    },\n    getRootOffset: function getRootOffset() {\n      return renderer.getRootOffset();\n    },\n    getCanvas: function getCanvas() {\n      var canvas = chart._canvas;\n      var panes = chart.panes;\n      var firstPane = panes[0].canvas;\n      var lastPane = panes[panes.length - 1].canvas;\n      return {\n        x1: firstPane.left,\n        y1: firstPane.top,\n        x2: canvas.width - lastPane.right,\n        y2: canvas.height - lastPane.bottom,\n        width: canvas.width - firstPane.left - lastPane.right,\n        height: canvas.height - firstPane.top - lastPane.bottom\n      };\n    }\n  };\n  renderer.root.off(SHUTTER_EVENTS_NS).on(DRAG_START_EVENT_NAME, {\n    direction: rotated ? \"vertical\" : \"horizontal\",\n    immediate: true\n  }, dragStartHandler(shutter)).on(DRAG_UPDATE_EVENT_NAME, dragHandler(shutter)).on(DRAG_END_EVENT_NAME, dragEndHandler(shutter));\n  return shutter;\n}\n\nexport default {\n  name: \"shutter_zoom\",\n  init: function init() {\n    var options = this.option(\"shutterZoom\") || {};\n\n    if (!options.enabled) {\n      return;\n    }\n\n    this._shutterZoom = shutterZoom({\n      chart: this,\n      renderer: this._renderer,\n      rotated: this.option(\"rotated\"),\n      shutterOptions: options\n    });\n  },\n  dispose: function dispose() {\n    this._shutterZoom && this._shutterZoom.dispose();\n  }\n};","map":null,"metadata":{},"sourceType":"module"}