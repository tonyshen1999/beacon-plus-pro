{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/core/tooltip.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getWidth, getHeight } from \"../../core/utils/size\";\nimport domAdapter from \"../../core/dom_adapter\";\nimport { getWindow } from \"../../core/utils/window\";\nimport { replaceWith } from \"../../core/utils/dom\";\nimport { camelize } from \"../../core/utils/inflector\";\nimport $ from \"../../core/renderer\";\nimport { Renderer } from \"./renderers/renderer\";\nimport { isFunction, isPlainObject, isDefined } from \"../../core/utils/type\";\nimport { extend } from \"../../core/utils/extend\";\nimport { patchFontOptions, normalizeEnum } from \"./utils\";\nimport formatHelper from \"../../format_helper\";\nimport { Plaque } from \"./plaque\";\nvar format = formatHelper.format;\nvar mathCeil = Math.ceil;\nvar mathMax = Math.max;\nvar mathMin = Math.min;\nvar window = getWindow();\nvar DEFAULT_HTML_GROUP_WIDTH = 3e3;\n\nfunction hideElement($element) {\n  $element.css({\n    left: \"-9999px\"\n  }).detach();\n}\n\nfunction getSpecialFormatOptions(options, specialFormat) {\n  var result = options;\n\n  switch (specialFormat) {\n    case \"argument\":\n      result = {\n        format: options.argumentFormat\n      };\n      break;\n\n    case \"percent\":\n      result = {\n        format: {\n          type: \"percent\",\n          precision: options.format && options.format.percentPrecision\n        }\n      };\n  }\n\n  return result;\n}\n\nfunction createTextHtml() {\n  return $(\"<div>\").css({\n    position: \"relative\",\n    display: \"inline-block\",\n    padding: 0,\n    margin: 0,\n    border: \"0px solid transparent\"\n  });\n}\n\nfunction removeElements(elements) {\n  elements.forEach(function (el) {\n    return el.remove();\n  });\n}\n\nexport var Tooltip = function Tooltip(params) {\n  this._eventTrigger = params.eventTrigger;\n  this._widgetRoot = params.widgetRoot;\n  this._widget = params.widget;\n  this._textHtmlContainers = [];\n  this._wrapper = $(\"<div>\").css({\n    position: \"absolute\",\n    overflow: \"hidden\",\n    pointerEvents: \"none\"\n  }).addClass(params.cssClass);\n  var renderer = this._renderer = new Renderer({\n    pathModified: params.pathModified,\n    container: this._wrapper[0]\n  });\n  var root = renderer.root;\n  root.attr({\n    \"pointer-events\": \"none\"\n  });\n  this._text = renderer.text(void 0, 0, 0);\n  this._textGroupHtml = $(\"<div>\").css({\n    position: \"absolute\",\n    padding: 0,\n    margin: 0,\n    border: \"0px solid transparent\"\n  }).appendTo(this._wrapper);\n  this._textHtml = createTextHtml().appendTo(this._textGroupHtml);\n};\nTooltip.prototype = {\n  constructor: Tooltip,\n  dispose: function dispose() {\n    this._wrapper.remove();\n\n    this._renderer.dispose();\n\n    this._options = this._widgetRoot = null;\n  },\n  _getContainer: function _getContainer() {\n    var options = this._options;\n    var container = $(this._widgetRoot).closest(options.container);\n\n    if (0 === container.length) {\n      container = $(options.container);\n    }\n\n    return (container.length ? container : $(\"body\")).get(0);\n  },\n  setTemplate: function setTemplate(contentTemplate) {\n    this._template = contentTemplate ? this._widget._getTemplate(contentTemplate) : null;\n  },\n  setOptions: function setOptions(options) {\n    var _this = this;\n\n    options = options || {};\n    var that = this;\n    that._options = options;\n    that._textFontStyles = patchFontOptions(options.font);\n    that._textFontStyles.color = that._textFontStyles.fill;\n\n    that._wrapper.css({\n      zIndex: options.zIndex\n    });\n\n    that._customizeTooltip = options.customizeTooltip;\n    var textGroupHtml = that._textGroupHtml;\n\n    if (this.plaque) {\n      this.plaque.clear();\n    }\n\n    this.setTemplate(options.contentTemplate);\n    var pointerEvents = options.interactive ? \"auto\" : \"none\";\n\n    if (options.interactive) {\n      this._renderer.root.css({\n        \"-ms-user-select\": \"auto\",\n        \"-moz-user-select\": \"auto\",\n        \"-webkit-user-select\": \"auto\"\n      });\n    }\n\n    this.plaque = new Plaque({\n      opacity: that._options.opacity,\n      color: that._options.color,\n      border: that._options.border,\n      paddingLeftRight: that._options.paddingLeftRight,\n      paddingTopBottom: that._options.paddingTopBottom,\n      arrowLength: that._options.arrowLength,\n      arrowWidth: 20,\n      shadow: that._options.shadow,\n      cornerRadius: that._options.cornerRadius\n    }, that, that._renderer.root, function (_ref) {\n      var group = _ref.group,\n          onRender = _ref.onRender,\n          eventData = _ref.eventData,\n          isMoving = _ref.isMoving,\n          _ref$templateCallback = _ref.templateCallback,\n          templateCallback = _ref$templateCallback === void 0 ? function () {} : _ref$templateCallback;\n      var state = that._state;\n\n      if (!isMoving) {\n        var template = that._template;\n        var useTemplate = template && !state.formatObject.skipTemplate;\n\n        if (state.html || useTemplate) {\n          textGroupHtml.css({\n            color: state.textColor,\n            width: DEFAULT_HTML_GROUP_WIDTH,\n            pointerEvents: pointerEvents\n          });\n\n          if (useTemplate) {\n            var htmlContainers = that._textHtmlContainers;\n            var containerToTemplateRender = createTextHtml();\n            htmlContainers.push(containerToTemplateRender);\n            template.render({\n              model: state.formatObject,\n              container: containerToTemplateRender,\n              onRendered: function onRendered() {\n                removeElements(htmlContainers.splice(0, htmlContainers.length - 1));\n                var containerWithContent = htmlContainers[0];\n                replaceWith(that._textHtml, containerWithContent);\n                that._textHtml = containerWithContent;\n                state.html = containerWithContent.html();\n\n                if (0 === getWidth(containerWithContent) && 0 === getHeight(containerWithContent)) {\n                  _this.plaque.clear();\n\n                  templateCallback(false);\n                  return;\n                }\n\n                onRender();\n\n                that._riseEvents(eventData);\n\n                that._moveWrapper();\n\n                that.plaque.customizeCloud({\n                  fill: state.color,\n                  stroke: state.borderColor,\n                  \"pointer-events\": pointerEvents\n                });\n                templateCallback(true);\n                that._textHtmlContainers = [];\n              }\n            });\n            return;\n          } else {\n            that._text.attr({\n              text: \"\"\n            });\n\n            that._textHtml.html(state.html);\n          }\n        } else {\n          that._text.css({\n            fill: state.textColor\n          }).attr({\n            text: state.text,\n            class: options.cssClass,\n            \"pointer-events\": pointerEvents\n          }).append(group.attr({\n            align: options.textAlignment\n          }));\n        }\n\n        that._riseEvents(eventData);\n\n        that.plaque.customizeCloud({\n          fill: state.color,\n          stroke: state.borderColor,\n          \"pointer-events\": pointerEvents\n        });\n      }\n\n      onRender();\n\n      that._moveWrapper();\n\n      return true;\n    }, true, function (tooltip, g) {\n      var state = tooltip._state;\n\n      if (state.html) {\n        var bBox;\n        var getComputedStyle = window.getComputedStyle;\n\n        if (getComputedStyle) {\n          bBox = getComputedStyle(that._textHtml.get(0));\n          bBox = {\n            x: 0,\n            y: 0,\n            width: mathCeil(parseFloat(bBox.width)),\n            height: mathCeil(parseFloat(bBox.height))\n          };\n        } else {\n          bBox = that._textHtml.get(0).getBoundingClientRect();\n          bBox = {\n            x: 0,\n            y: 0,\n            width: mathCeil(bBox.width ? bBox.width : bBox.right - bBox.left),\n            height: mathCeil(bBox.height ? bBox.height : bBox.bottom - bBox.top)\n          };\n        }\n\n        return bBox;\n      }\n\n      return g.getBBox();\n    }, function (tooltip, g, x, y) {\n      var state = tooltip._state;\n\n      if (state.html) {\n        that._textGroupHtml.css({\n          left: x,\n          top: y\n        });\n      } else {\n        g.move(x, y);\n      }\n    });\n    return that;\n  },\n  _riseEvents: function _riseEvents(eventData) {\n    this._eventData && this._eventTrigger(\"tooltipHidden\", this._eventData);\n    this._eventData = eventData;\n\n    this._eventTrigger(\"tooltipShown\", this._eventData);\n  },\n  setRendererOptions: function setRendererOptions(options) {\n    this._renderer.setOptions(options);\n\n    this._textGroupHtml.css({\n      direction: options.rtl ? \"rtl\" : \"ltr\"\n    });\n\n    return this;\n  },\n  update: function update(options) {\n    this.setOptions(options);\n    hideElement(this._wrapper);\n    var normalizedCSS = {};\n\n    for (var name in this._textFontStyles) {\n      normalizedCSS[camelize(name)] = this._textFontStyles[name];\n    }\n\n    this._textGroupHtml.css(normalizedCSS);\n\n    this._text.css(this._textFontStyles);\n\n    this._eventData = null;\n    return this;\n  },\n  _prepare: function _prepare(formatObject, state) {\n    var customizeTooltip = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this._customizeTooltip;\n    var options = this._options;\n    var customize = {};\n\n    if (isFunction(customizeTooltip)) {\n      customize = customizeTooltip.call(formatObject, formatObject);\n      customize = isPlainObject(customize) ? customize : {};\n\n      if (\"text\" in customize) {\n        state.text = isDefined(customize.text) ? String(customize.text) : \"\";\n      }\n\n      if (\"html\" in customize) {\n        state.html = isDefined(customize.html) ? String(customize.html) : \"\";\n      }\n    }\n\n    if (!(\"text\" in state) && !(\"html\" in state)) {\n      state.text = formatObject.valueText || formatObject.description || \"\";\n    }\n\n    state.color = customize.color || options.color;\n    state.borderColor = customize.borderColor || (options.border || {}).color;\n    state.textColor = customize.fontColor || (this._textFontStyles || {}).color;\n    return !!state.text || !!state.html || !!this._template;\n  },\n  show: function show(formatObject, params, eventData, customizeTooltip, templateCallback) {\n    if (this._options.forceEvents) {\n      eventData.x = params.x;\n      eventData.y = params.y - params.offset;\n\n      this._riseEvents(eventData);\n\n      return true;\n    }\n\n    var state = {\n      formatObject: formatObject,\n      eventData: eventData,\n      templateCallback: templateCallback\n    };\n\n    if (!this._prepare(formatObject, state, customizeTooltip)) {\n      return false;\n    }\n\n    this._state = state;\n\n    this._wrapper.appendTo(this._getContainer());\n\n    this._clear();\n\n    var parameters = extend({}, this._options, {\n      canvas: this._getCanvas()\n    }, state, {\n      x: params.x,\n      y: params.y,\n      offset: params.offset\n    });\n    return this.plaque.clear().draw(parameters);\n  },\n  isCursorOnTooltip: function isCursorOnTooltip(x, y) {\n    if (this._options.interactive) {\n      var box = this.plaque.getBBox();\n      return x > box.x && x < box.x + box.width && y > box.y && y < box.y + box.height;\n    }\n\n    return false;\n  },\n  hide: function hide(isPointerOut) {\n    hideElement(this._wrapper);\n\n    if (this._eventData) {\n      this._eventTrigger(\"tooltipHidden\", this._options.forceEvents ? extend({\n        isPointerOut: isPointerOut\n      }, this._eventData) : this._eventData);\n\n      this._clear();\n\n      this._eventData = null;\n    }\n  },\n  _clear: function _clear() {\n    this._textHtml.empty();\n  },\n  move: function move(x, y, offset) {\n    this.plaque.draw({\n      x: x,\n      y: y,\n      offset: offset,\n      canvas: this._getCanvas(),\n      isMoving: true\n    });\n  },\n  _moveWrapper: function _moveWrapper() {\n    var plaqueBBox = this.plaque.getBBox();\n\n    this._renderer.resize(plaqueBBox.width, plaqueBBox.height);\n\n    var offset = this._wrapper.css({\n      left: 0,\n      top: 0\n    }).offset();\n\n    var left = plaqueBBox.x;\n    var top = plaqueBBox.y;\n\n    this._wrapper.css({\n      left: left - offset.left,\n      top: top - offset.top\n    });\n\n    this.plaque.moveRoot(-left, -top);\n\n    if (this._state.html) {\n      this._textHtml.css({\n        left: -left,\n        top: -top\n      });\n\n      this._textGroupHtml.css({\n        width: mathCeil(getWidth(this._textHtml))\n      });\n    }\n  },\n  formatValue: function formatValue(value, _specialFormat) {\n    var options = _specialFormat ? getSpecialFormatOptions(this._options, _specialFormat) : this._options;\n    return format(value, options.format);\n  },\n  getOptions: function getOptions() {\n    return this._options;\n  },\n  getLocation: function getLocation() {\n    return normalizeEnum(this._options.location);\n  },\n  isEnabled: function isEnabled() {\n    return !!this._options.enabled || !!this._options.forceEvents;\n  },\n  isShared: function isShared() {\n    return !!this._options.shared;\n  },\n  _getCanvas: function _getCanvas() {\n    var container = this._getContainer();\n\n    var containerBox = container.getBoundingClientRect();\n    var html = domAdapter.getDocumentElement();\n    var document = domAdapter.getDocument();\n    var left = window.pageXOffset || html.scrollLeft || 0;\n    var top = window.pageYOffset || html.scrollTop || 0;\n    var box = {\n      left: left,\n      top: top,\n      width: mathMax(html.clientWidth, document.body.clientWidth) + left,\n      height: mathMax(document.body.scrollHeight, html.scrollHeight, document.body.offsetHeight, html.offsetHeight, document.body.clientHeight, html.clientHeight),\n      right: 0,\n      bottom: 0\n    };\n\n    if (container !== domAdapter.getBody()) {\n      left = mathMax(box.left, box.left + containerBox.left);\n      top = mathMax(box.top, box.top + containerBox.top);\n      box.width = mathMin(containerBox.width, box.width) + left + box.left;\n      box.height = mathMin(containerBox.height, box.height) + top + box.top;\n      box.left = left;\n      box.top = top;\n    }\n\n    return box;\n  }\n};\nexport var plugin = {\n  name: \"tooltip\",\n  init: function init() {\n    this._initTooltip();\n  },\n  dispose: function dispose() {\n    this._disposeTooltip();\n  },\n  members: {\n    _initTooltip: function _initTooltip() {\n      this._tooltip = new Tooltip({\n        cssClass: this._rootClassPrefix + \"-tooltip\",\n        eventTrigger: this._eventTrigger,\n        pathModified: this.option(\"pathModified\"),\n        widgetRoot: this.element(),\n        widget: this\n      });\n    },\n    _disposeTooltip: function _disposeTooltip() {\n      this._tooltip.dispose();\n\n      this._tooltip = null;\n    },\n    _setTooltipRendererOptions: function _setTooltipRendererOptions() {\n      this._tooltip.setRendererOptions(this._getRendererOptions());\n    },\n    _setTooltipOptions: function _setTooltipOptions() {\n      this._tooltip.update(this._getOption(\"tooltip\"));\n    }\n  },\n  extenders: {\n    _stopCurrentHandling: function _stopCurrentHandling() {\n      this._tooltip && this._tooltip.hide();\n    }\n  },\n  customize: function customize(constructor) {\n    var proto = constructor.prototype;\n    proto._eventsMap.onTooltipShown = {\n      name: \"tooltipShown\"\n    };\n    proto._eventsMap.onTooltipHidden = {\n      name: \"tooltipHidden\"\n    };\n    constructor.addChange({\n      code: \"TOOLTIP_RENDERER\",\n      handler: function handler() {\n        this._setTooltipRendererOptions();\n      },\n      isThemeDependent: true,\n      isOptionChange: true\n    });\n    constructor.addChange({\n      code: \"TOOLTIP\",\n      handler: function handler() {\n        this._setTooltipOptions();\n      },\n      isThemeDependent: true,\n      isOptionChange: true,\n      option: \"tooltip\"\n    });\n  },\n  fontFields: [\"tooltip.font\"]\n};","map":null,"metadata":{},"sourceType":"module"}