{"ast":null,"code":"import _toConsumableArray from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _defineProperty from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _slicedToArray from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/renovation/component_wrapper/common/component.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { createRef } from \"inferno\";\nimport KeyboardProcessor from \"../../../events/core/keyboard_processor\";\nimport renderer from \"../../../core/inferno_renderer\";\nimport $ from \"../../../core/renderer\";\nimport domAdapter from \"../../../core/dom_adapter\";\nimport DOMComponent from \"../../../core/dom_component\";\nimport { extend } from \"../../../core/utils/extend\";\nimport { getPublicElement } from \"../../../core/element\";\nimport { isDefined, isRenderer, isString } from \"../../../core/utils/type\";\nimport { TemplateWrapper } from \"./template_wrapper\";\nimport { updatePropsImmutable } from \"../utils/update_props_immutable\";\n\nvar setDefaultOptionValue = function setDefaultOptionValue(options, defaultValueGetter) {\n  return function (name) {\n    if (Object.prototype.hasOwnProperty.call(options, name) && void 0 === options[name]) {\n      options[name] = defaultValueGetter(name);\n    }\n  };\n};\n\nvar ComponentWrapper = /*#__PURE__*/function (_DOMComponent) {\n  _inherits(ComponentWrapper, _DOMComponent);\n\n  var _super = _createSuper(ComponentWrapper);\n\n  function ComponentWrapper(element, options) {\n    var _this;\n\n    _classCallCheck(this, ComponentWrapper);\n\n    _this = _super.call(this, element, options);\n    _this._shouldRaiseContentReady = false;\n\n    _this.validateKeyDownHandler();\n\n    return _this;\n  }\n\n  _createClass(ComponentWrapper, [{\n    key: \"_propsInfo\",\n    get: function get() {\n      return {\n        allowNull: [],\n        twoWay: [],\n        elements: [],\n        templates: [],\n        props: []\n      };\n    }\n  }, {\n    key: \"validateKeyDownHandler\",\n    value: function validateKeyDownHandler() {\n      var supportedKeyNames = this.getSupportedKeyNames();\n      var hasComponentDefaultKeyHandlers = supportedKeyNames.length > 0;\n      var hasComponentKeyDownMethod = \"function\" === typeof this._viewComponent.prototype.keyDown;\n\n      if (hasComponentDefaultKeyHandlers && !hasComponentKeyDownMethod) {\n        throw Error(\"Component's declaration must have 'keyDown' method.\");\n      }\n    }\n  }, {\n    key: \"viewRef\",\n    get: function get() {\n      var _this$_viewRef;\n\n      return null === (_this$_viewRef = this._viewRef) || void 0 === _this$_viewRef ? void 0 : _this$_viewRef.current;\n    }\n  }, {\n    key: \"_checkContentReadyOption\",\n    value: function _checkContentReadyOption(fullName) {\n      var contentReadyOptions = this._getContentReadyOptions().reduce(function (options, name) {\n        options[name] = true;\n        return options;\n      }, {});\n\n      this._checkContentReadyOption = function (optionName) {\n        return !!contentReadyOptions[optionName];\n      };\n\n      return this._checkContentReadyOption(fullName);\n    }\n  }, {\n    key: \"_getContentReadyOptions\",\n    value: function _getContentReadyOptions() {\n      return [\"rtlEnabled\"];\n    }\n  }, {\n    key: \"_fireContentReady\",\n    value: function _fireContentReady() {\n      this._actionsMap.onContentReady({});\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function _getDefaultOptions() {\n      var _this2 = this;\n\n      return extend(true, _get(_getPrototypeOf(ComponentWrapper.prototype), \"_getDefaultOptions\", this).call(this), this._viewComponent.defaultProps, this._propsInfo.twoWay.reduce(function (options, _ref) {\n        var _extends2;\n\n        var _ref5 = _slicedToArray(_ref, 3),\n            name = _ref5[0],\n            defaultName = _ref5[1],\n            eventName = _ref5[2];\n\n        return _extends({}, options, (_extends2 = {}, _defineProperty(_extends2, name, _this2._viewComponent.defaultProps[defaultName]), _defineProperty(_extends2, eventName, function (value) {\n          return _this2.option(name, value);\n        }), _extends2));\n      }, {}), this._propsInfo.templates.reduce(function (options, name) {\n        return _extends({}, options, _defineProperty({}, name, null));\n      }, {}));\n    }\n  }, {\n    key: \"_initializeComponent\",\n    value: function _initializeComponent() {\n      var _this3 = this;\n\n      var _this$_templateManage;\n\n      _get(_getPrototypeOf(ComponentWrapper.prototype), \"_initializeComponent\", this).call(this);\n\n      null === (_this$_templateManage = this._templateManager) || void 0 === _this$_templateManage ? void 0 : _this$_templateManage.addDefaultTemplates(this.getDefaultTemplates());\n      this._props = this._optionsWithDefaultTemplates(this.option());\n\n      this._propsInfo.templates.forEach(function (template) {\n        _this3._componentTemplates[template] = _this3._createTemplateComponent(_this3._props[template]);\n      });\n\n      Object.keys(this._getActionConfigsFull()).forEach(function (name) {\n        return _this3._addAction(name);\n      });\n      this._viewRef = createRef();\n      this.defaultKeyHandlers = this._createDefaultKeyHandlers();\n    }\n  }, {\n    key: \"_initMarkup\",\n    value: function _initMarkup() {\n      var props = this.getProps();\n\n      this._renderWrapper(props);\n    }\n  }, {\n    key: \"_renderWrapper\",\n    value: function _renderWrapper(props) {\n      var containerNode = this.$element()[0];\n\n      if (!this._isNodeReplaced) {\n        renderer.onPreRender();\n      }\n\n      renderer.render(this._viewComponent, props, containerNode, this._isNodeReplaced);\n\n      if (!this._isNodeReplaced) {\n        this._isNodeReplaced = true;\n        renderer.onAfterRender();\n        this._shouldRaiseContentReady = true;\n      }\n\n      if (this._shouldRaiseContentReady) {\n        this._fireContentReady();\n\n        this._shouldRaiseContentReady = false;\n      }\n    }\n  }, {\n    key: \"_silent\",\n    value: function _silent(name, value) {\n      this._options.silent(name, value);\n    }\n  }, {\n    key: \"_render\",\n    value: function _render() {}\n  }, {\n    key: \"_removeWidget\",\n    value: function _removeWidget() {\n      renderer.remove(this.$element()[0]);\n    }\n  }, {\n    key: \"_dispose\",\n    value: function _dispose() {\n      this._removeWidget();\n\n      _get(_getPrototypeOf(ComponentWrapper.prototype), \"_dispose\", this).call(this);\n    }\n  }, {\n    key: \"elementAttr\",\n    get: function get() {\n      var _this4 = this;\n\n      if (!this._elementAttr) {\n        var attributes = this.$element()[0].attributes;\n        var attrs = Array.from(attributes).filter(function (attr) {\n          var _attributes$attr$name;\n\n          return !_this4._propsInfo.templates.includes(attr.name) && (null === (_attributes$attr$name = attributes[attr.name]) || void 0 === _attributes$attr$name ? void 0 : _attributes$attr$name.specified);\n        }).reduce(function (result, _ref2) {\n          var name = _ref2.name,\n              value = _ref2.value;\n          var updatedAttributes = result;\n          updatedAttributes[name] = value;\n          return updatedAttributes;\n        }, {});\n        this._elementAttr = attrs;\n        this._storedClasses = this.$element()[0].getAttribute(\"class\") || \"\";\n      }\n\n      var elemStyle = this.$element()[0].style;\n      var style = {};\n\n      for (var i = 0; i < elemStyle.length; i += 1) {\n        style[elemStyle[i]] = elemStyle.getPropertyValue(elemStyle[i]);\n      }\n\n      this._elementAttr.style = style;\n      this._elementAttr.class = this._storedClasses;\n      return this._elementAttr;\n    }\n  }, {\n    key: \"_getAdditionalActionConfigs\",\n    value: function _getAdditionalActionConfigs() {\n      return {\n        onContentReady: {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        }\n      };\n    }\n  }, {\n    key: \"_getAdditionalProps\",\n    value: function _getAdditionalProps() {\n      return [];\n    }\n  }, {\n    key: \"_patchOptionValues\",\n    value: function _patchOptionValues(options) {\n      var _this5 = this;\n\n      var _this$_propsInfo = this._propsInfo,\n          allowNull = _this$_propsInfo.allowNull,\n          elements = _this$_propsInfo.elements,\n          props = _this$_propsInfo.props,\n          twoWay = _this$_propsInfo.twoWay;\n      var defaultProps = this._viewComponent.defaultProps;\n      var children = options.children,\n          onKeyboardHandled = options.onKeyboardHandled,\n          ref = options.ref;\n      var onKeyDown = onKeyboardHandled ? function (_, event_options) {\n        onKeyboardHandled(event_options);\n      } : void 0;\n      var widgetProps = {\n        ref: ref,\n        children: children,\n        onKeyDown: onKeyDown\n      };\n      [].concat(_toConsumableArray(props), _toConsumableArray(this._getAdditionalProps())).forEach(function (propName) {\n        if (Object.prototype.hasOwnProperty.call(options, propName)) {\n          widgetProps[propName] = options[propName];\n        }\n      });\n      allowNull.forEach(setDefaultOptionValue(widgetProps, function () {\n        return null;\n      }));\n      Object.keys(defaultProps).forEach(setDefaultOptionValue(widgetProps, function (name) {\n        return defaultProps[name];\n      }));\n      twoWay.forEach(function (_ref3) {\n        var _ref6 = _slicedToArray(_ref3, 2),\n            name = _ref6[0],\n            defaultName = _ref6[1];\n\n        setDefaultOptionValue(widgetProps, function () {\n          return defaultProps[defaultName];\n        })(name);\n      });\n      elements.forEach(function (name) {\n        if (name in widgetProps) {\n          var value = widgetProps[name];\n\n          if (isRenderer(value)) {\n            widgetProps[name] = _this5._patchElementParam(value);\n          }\n        }\n      });\n      return widgetProps;\n    }\n  }, {\n    key: \"getSupportedKeyNames\",\n    value: function getSupportedKeyNames() {\n      return [];\n    }\n  }, {\n    key: \"prepareStyleProp\",\n    value: function prepareStyleProp(props) {\n      if (\"string\" === typeof props.style) {\n        return _extends({}, props, {\n          style: {},\n          cssText: props.style\n        });\n      }\n\n      return props;\n    }\n  }, {\n    key: \"getProps\",\n    value: function getProps() {\n      var _this6 = this;\n\n      var _this$elementAttr$cla, _elementAttr$class;\n\n      var _this$option = this.option(),\n          elementAttr = _this$option.elementAttr;\n\n      var options = this._patchOptionValues(_extends({}, this._props, {\n        ref: this._viewRef,\n        children: this._extractDefaultSlot(),\n        aria: this._aria\n      }));\n\n      this._propsInfo.templates.forEach(function (template) {\n        options[template] = _this6._componentTemplates[template];\n      });\n\n      return this.prepareStyleProp(_extends({}, options, this.elementAttr, elementAttr, {\n        className: [].concat(_toConsumableArray((null !== (_this$elementAttr$cla = this.elementAttr.class) && void 0 !== _this$elementAttr$cla ? _this$elementAttr$cla : \"\").split(\" \")), _toConsumableArray((null !== (_elementAttr$class = null === elementAttr || void 0 === elementAttr ? void 0 : elementAttr.class) && void 0 !== _elementAttr$class ? _elementAttr$class : \"\").split(\" \"))).filter(function (c, i, a) {\n          return c && a.indexOf(c) === i;\n        }).join(\" \").trim(),\n        class: \"\"\n      }, this._actionsMap));\n    }\n  }, {\n    key: \"_getActionConfigs\",\n    value: function _getActionConfigs() {\n      return {};\n    }\n  }, {\n    key: \"_getActionConfigsFull\",\n    value: function _getActionConfigsFull() {\n      return _extends({}, this._getActionConfigs(), this._getAdditionalActionConfigs());\n    }\n  }, {\n    key: \"getDefaultTemplates\",\n    value: function getDefaultTemplates() {\n      var defaultTemplates = Object.values(this._templatesInfo);\n      var result = {};\n      defaultTemplates.forEach(function (template) {\n        result[template] = \"dx-renovation-template-mock\";\n      });\n      return result;\n    }\n  }, {\n    key: \"_templatesInfo\",\n    get: function get() {\n      return {};\n    }\n  }, {\n    key: \"_optionsWithDefaultTemplates\",\n    value: function _optionsWithDefaultTemplates(options) {\n      var templateOptions = Object.entries(this._templatesInfo).reduce(function (result, _ref4) {\n        var _options$templateName;\n\n        var _ref7 = _slicedToArray(_ref4, 2),\n            templateName = _ref7[0],\n            templateValue = _ref7[1];\n\n        return _extends({}, result, _defineProperty({}, templateName, null !== (_options$templateName = options[templateName]) && void 0 !== _options$templateName ? _options$templateName : templateValue));\n      }, {});\n      return _extends({}, options, templateOptions);\n    }\n  }, {\n    key: \"_init\",\n    value: function _init() {\n      _get(_getPrototypeOf(ComponentWrapper.prototype), \"_init\", this).call(this);\n\n      this.customKeyHandlers = {};\n      this._actionsMap = {};\n      this._aria = {};\n      this._componentTemplates = {};\n    }\n  }, {\n    key: \"_createDefaultKeyHandlers\",\n    value: function _createDefaultKeyHandlers() {\n      var _this7 = this;\n\n      var result = {};\n      var keys = this.getSupportedKeyNames();\n      keys.forEach(function (key) {\n        result[key] = function (e) {\n          return _this7.viewRef.keyDown(KeyboardProcessor.createKeyDownOptions(e));\n        };\n      });\n      return result;\n    }\n  }, {\n    key: \"_addAction\",\n    value: function _addAction(event, actionToAdd) {\n      var action = actionToAdd;\n\n      if (!action) {\n        var actionByOption = this._createActionByOption(event, this._getActionConfigsFull()[event]);\n\n        action = function action(actArgs) {\n          Object.keys(actArgs).forEach(function (name) {\n            if (isDefined(actArgs[name]) && domAdapter.isNode(actArgs[name])) {\n              actArgs[name] = getPublicElement($(actArgs[name]));\n            }\n          });\n          return actionByOption(actArgs);\n        };\n      }\n\n      this._actionsMap[event] = action;\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function _optionChanged(option) {\n      var fullName = option.fullName,\n          name = option.name,\n          value = option.value;\n      updatePropsImmutable(this._props, this.option(), name, fullName);\n\n      if (this._propsInfo.templates.includes(name)) {\n        this._componentTemplates[name] = this._createTemplateComponent(value);\n      }\n\n      if (name && this._getActionConfigsFull()[name]) {\n        this._addAction(name);\n      }\n\n      this._shouldRaiseContentReady = this._shouldRaiseContentReady || this._checkContentReadyOption(fullName);\n\n      _get(_getPrototypeOf(ComponentWrapper.prototype), \"_optionChanged\", this).call(this, option);\n\n      this._invalidate();\n    }\n  }, {\n    key: \"_extractDefaultSlot\",\n    value: function _extractDefaultSlot() {\n      if (this.option(\"_hasAnonymousTemplateContent\")) {\n        return renderer.createElement(TemplateWrapper, {\n          template: this._getTemplate(this._templateManager.anonymousTemplateName),\n          transclude: true\n        });\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_createTemplateComponent\",\n    value: function _createTemplateComponent(templateOption) {\n      if (!templateOption) {\n        return;\n      }\n\n      var template = this._getTemplate(templateOption);\n\n      if (isString(template) && \"dx-renovation-template-mock\" === template) {\n        return;\n      }\n\n      return function (model) {\n        return renderer.createElement(TemplateWrapper, {\n          template: template,\n          model: model\n        });\n      };\n    }\n  }, {\n    key: \"_wrapKeyDownHandler\",\n    value: function _wrapKeyDownHandler(initialHandler) {\n      var _this8 = this;\n\n      return function (options) {\n        var keyName = options.keyName,\n            originalEvent = options.originalEvent,\n            which = options.which;\n        var keys = _this8.customKeyHandlers;\n        var func = keys[keyName] || keys[which];\n\n        if (void 0 !== func) {\n          var handler = func.bind(_this8);\n          var result = handler(originalEvent, options);\n\n          if (!result) {\n            originalEvent.cancel = true;\n            return originalEvent;\n          }\n        }\n\n        return null === initialHandler || void 0 === initialHandler ? void 0 : initialHandler(originalEvent, options);\n      };\n    }\n  }, {\n    key: \"_toPublicElement\",\n    value: function _toPublicElement(element) {\n      return getPublicElement($(element));\n    }\n  }, {\n    key: \"_patchElementParam\",\n    value: function _patchElementParam(value) {\n      try {\n        var result = $(value);\n        var element = null === result || void 0 === result ? void 0 : result.get(0);\n        return null !== element && void 0 !== element && element.nodeType ? element : value;\n      } catch (error) {\n        return value;\n      }\n    }\n  }, {\n    key: \"repaint\",\n    value: function repaint() {\n      this._isNodeReplaced = false;\n      this._shouldRaiseContentReady = true;\n\n      this._removeWidget();\n\n      this._refresh();\n    }\n  }, {\n    key: \"_supportedKeys\",\n    value: function _supportedKeys() {\n      return _extends({}, this.defaultKeyHandlers, this.customKeyHandlers);\n    }\n  }, {\n    key: \"registerKeyHandler\",\n    value: function registerKeyHandler(key, handler) {\n      this.customKeyHandlers[key] = handler;\n    }\n  }, {\n    key: \"setAria\",\n    value: function setAria(name, value) {\n      this._aria[name] = value;\n\n      this._initMarkup();\n    }\n  }]);\n\n  return ComponentWrapper;\n}(DOMComponent);\n\nexport { ComponentWrapper as default };\nComponentWrapper.IS_RENOVATED_WIDGET = false;\nComponentWrapper.IS_RENOVATED_WIDGET = true;","map":null,"metadata":{},"sourceType":"module"}