{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/vector_map/tracker.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { getNavigator, hasProperty } from \"../../core/utils/window\";\nimport domAdapter from \"../../core/dom_adapter\";\nimport { makeEventEmitter } from \"./event_emitter\";\nimport { addNamespace } from \"../../events/utils/index\";\nimport { name as wheelEventName } from \"../../events/core/wheel\";\nimport { parseScalar } from \"../core/utils\";\nvar navigator = getNavigator();\nvar _math = Math;\nvar _abs = _math.abs;\nvar _sqrt = _math.sqrt;\nvar _round = _math.round;\nvar _addNamespace = addNamespace;\nvar _NAME = \"dxVectorMap\";\nvar EVENT_START = \"start\";\nvar EVENT_MOVE = \"move\";\nvar EVENT_END = \"end\";\nvar EVENT_ZOOM = \"zoom\";\nvar EVENT_HOVER_ON = \"hover-on\";\nvar EVENT_HOVER_OFF = \"hover-off\";\nvar EVENT_CLICK = \"click\";\nvar EVENT_FOCUS_ON = \"focus-on\";\nvar EVENT_FOCUS_MOVE = \"focus-move\";\nvar EVENT_FOCUS_OFF = \"focus-off\";\nvar CLICK_TIME_THRESHOLD = 500;\nvar CLICK_COORD_THRESHOLD_MOUSE = 5;\nvar CLICK_COORD_THRESHOLD_TOUCH = 20;\nvar DRAG_COORD_THRESHOLD_MOUSE = 5;\nvar DRAG_COORD_THRESHOLD_TOUCH = 10;\nvar FOCUS_OFF_DELAY = 100;\nvar WHEEL_COOLDOWN = 50;\nvar WHEEL_DIRECTION_COOLDOWN = 300;\nvar EVENTS;\nvar Focus;\nsetupEvents();\nexport function Tracker(parameters) {\n  var that = this;\n  that._root = parameters.root;\n\n  that._createEventHandlers(parameters.dataKey);\n\n  that._createProjectionHandlers(parameters.projection);\n\n  that._initEvents();\n\n  that._focus = new Focus(function (name, arg) {\n    that._fire(name, arg);\n  });\n\n  that._attachHandlers();\n}\nTracker.prototype = {\n  constructor: Tracker,\n  dispose: function dispose() {\n    this._detachHandlers();\n\n    this._disposeEvents();\n\n    this._focus.dispose();\n\n    this._root = this._focus = this._docHandlers = this._rootHandlers = null;\n  },\n  _eventNames: [EVENT_START, EVENT_MOVE, EVENT_END, EVENT_ZOOM, EVENT_CLICK, EVENT_HOVER_ON, EVENT_HOVER_OFF, EVENT_FOCUS_ON, EVENT_FOCUS_OFF, EVENT_FOCUS_MOVE],\n  _startClick: function _startClick(event, data) {\n    if (!data) {\n      return;\n    }\n\n    var coords = getEventCoords(event);\n    this._clickState = {\n      x: coords.x,\n      y: coords.y,\n      threshold: isTouchEvent(event) ? CLICK_COORD_THRESHOLD_TOUCH : CLICK_COORD_THRESHOLD_MOUSE,\n      time: Date.now()\n    };\n  },\n  _endClick: function _endClick(event, data) {\n    var state = this._clickState;\n    var threshold;\n    var coords;\n\n    if (!state) {\n      return;\n    }\n\n    if (data && Date.now() - state.time <= CLICK_TIME_THRESHOLD) {\n      threshold = state.threshold;\n      coords = getEventCoords(event);\n\n      if (_abs(coords.x - state.x) <= threshold && _abs(coords.y - state.y) <= threshold) {\n        this._fire(EVENT_CLICK, {\n          data: data,\n          x: coords.x,\n          y: coords.y,\n          $event: event\n        });\n      }\n    }\n\n    this._clickState = null;\n  },\n  _startDrag: function _startDrag(event, data) {\n    if (!data) {\n      return;\n    }\n\n    var coords = getEventCoords(event);\n    var state = this._dragState = {\n      x: coords.x,\n      y: coords.y,\n      data: data\n    };\n\n    this._fire(EVENT_START, {\n      x: state.x,\n      y: state.y,\n      data: state.data\n    });\n  },\n  _moveDrag: function _moveDrag(event, data) {\n    var state = this._dragState;\n\n    if (!state) {\n      return;\n    }\n\n    var coords = getEventCoords(event);\n    var threshold = isTouchEvent(event) ? DRAG_COORD_THRESHOLD_TOUCH : DRAG_COORD_THRESHOLD_MOUSE;\n\n    if (state.active || _abs(coords.x - state.x) > threshold || _abs(coords.y - state.y) > threshold) {\n      state.x = coords.x;\n      state.y = coords.y;\n      state.active = true;\n      state.data = data || {};\n\n      this._fire(EVENT_MOVE, {\n        x: state.x,\n        y: state.y,\n        data: state.data\n      });\n    }\n  },\n  _endDrag: function _endDrag() {\n    var state = this._dragState;\n\n    if (!state) {\n      return;\n    }\n\n    this._dragState = null;\n\n    this._fire(EVENT_END, {\n      x: state.x,\n      y: state.y,\n      data: state.data\n    });\n  },\n  _wheelZoom: function _wheelZoom(event, data) {\n    if (!data) {\n      return;\n    }\n\n    var lock = this._wheelLock;\n    var time = Date.now();\n\n    if (time - lock.time <= WHEEL_COOLDOWN) {\n      return;\n    }\n\n    if (time - lock.dirTime > WHEEL_DIRECTION_COOLDOWN) {\n      lock.dir = 0;\n    }\n\n    var delta = adjustWheelDelta(event.delta / 120 || 0, lock);\n\n    if (0 === delta) {\n      return;\n    }\n\n    var coords = getEventCoords(event);\n\n    this._fire(EVENT_ZOOM, {\n      delta: delta,\n      x: coords.x,\n      y: coords.y\n    });\n\n    lock.time = lock.dirTime = time;\n  },\n  _startZoom: function _startZoom(event, data) {\n    if (!isTouchEvent(event) || !data) {\n      return;\n    }\n\n    var state = this._zoomState = this._zoomState || {};\n    var coords;\n    var pointer2;\n\n    if (state.pointer1 && state.pointer2) {\n      return;\n    }\n\n    if (void 0 === state.pointer1) {\n      state.pointer1 = getPointerId(event) || 0;\n      coords = getMultitouchEventCoords(event, state.pointer1);\n      state.x1 = state.x1_0 = coords.x;\n      state.y1 = state.y1_0 = coords.y;\n    }\n\n    if (void 0 === state.pointer2) {\n      pointer2 = getPointerId(event) || 1;\n\n      if (pointer2 !== state.pointer1) {\n        coords = getMultitouchEventCoords(event, pointer2);\n\n        if (coords) {\n          state.x2 = state.x2_0 = coords.x;\n          state.y2 = state.y2_0 = coords.y;\n          state.pointer2 = pointer2;\n          state.ready = true;\n\n          this._endDrag();\n        }\n      }\n    }\n  },\n  _moveZoom: function _moveZoom(event) {\n    var state = this._zoomState;\n    var coords;\n\n    if (!state || !isTouchEvent(event)) {\n      return;\n    }\n\n    if (void 0 !== state.pointer1) {\n      coords = getMultitouchEventCoords(event, state.pointer1);\n\n      if (coords) {\n        state.x1 = coords.x;\n        state.y1 = coords.y;\n      }\n    }\n\n    if (void 0 !== state.pointer2) {\n      coords = getMultitouchEventCoords(event, state.pointer2);\n\n      if (coords) {\n        state.x2 = coords.x;\n        state.y2 = coords.y;\n      }\n    }\n  },\n  _endZoom: function _endZoom(event) {\n    var state = this._zoomState;\n    var startDistance;\n    var currentDistance;\n\n    if (!state || !isTouchEvent(event)) {\n      return;\n    }\n\n    if (state.ready) {\n      startDistance = getDistance(state.x1_0, state.y1_0, state.x2_0, state.y2_0);\n      currentDistance = getDistance(state.x1, state.y1, state.x2, state.y2);\n\n      this._fire(EVENT_ZOOM, {\n        ratio: currentDistance / startDistance,\n        x: (state.x1_0 + state.x2_0) / 2,\n        y: (state.y1_0 + state.y2_0) / 2\n      });\n    }\n\n    this._zoomState = null;\n  },\n  _startHover: function _startHover(event, data) {\n    this._doHover(event, data, true);\n  },\n  _moveHover: function _moveHover(event, data) {\n    this._doHover(event, data, false);\n  },\n  _doHover: function _doHover(event, data, isTouch) {\n    if (this._dragState && this._dragState.active || this._zoomState && this._zoomState.ready) {\n      this._cancelHover();\n\n      return;\n    }\n\n    if (isTouchEvent(event) !== isTouch || this._hoverTarget === event.target || this._hoverState && this._hoverState.data === data) {\n      return;\n    }\n\n    this._cancelHover();\n\n    if (data) {\n      this._hoverState = {\n        data: data\n      };\n\n      this._fire(EVENT_HOVER_ON, {\n        data: data\n      });\n    }\n\n    this._hoverTarget = event.target;\n  },\n  _cancelHover: function _cancelHover() {\n    var state = this._hoverState;\n    this._hoverState = this._hoverTarget = null;\n\n    if (state) {\n      this._fire(EVENT_HOVER_OFF, {\n        data: state.data\n      });\n    }\n  },\n  _startFocus: function _startFocus(event, data) {\n    this._doFocus(event, data, true);\n  },\n  _moveFocus: function _moveFocus(event, data) {\n    this._doFocus(event, data, false);\n  },\n  _doFocus: function _doFocus(event, data, isTouch) {\n    if (this._dragState && this._dragState.active || this._zoomState && this._zoomState.ready) {\n      this._cancelFocus();\n\n      return;\n    }\n\n    if (isTouchEvent(event) !== isTouch) {\n      return;\n    }\n\n    this._focus.turnOff();\n\n    data && this._focus.turnOn(data, getEventCoords(event));\n  },\n  _cancelFocus: function _cancelFocus() {\n    this._focus.cancel();\n  },\n  _createEventHandlers: function _createEventHandlers(DATA_KEY) {\n    var that = this;\n    that._docHandlers = {};\n    that._rootHandlers = {};\n\n    that._rootHandlers[EVENTS.start] = that._docHandlers[EVENTS.start] = function (event) {\n      var isTouch = isTouchEvent(event);\n      var data = getData(event);\n\n      if (isTouch && !that._isTouchEnabled) {\n        return;\n      }\n\n      if (data) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n\n      that._startClick(event, data);\n\n      that._startDrag(event, data);\n\n      that._startZoom(event, data);\n\n      that._startHover(event, data);\n\n      that._startFocus(event, data);\n    };\n\n    that._docHandlers[EVENTS.move] = function (event) {\n      var isTouch = isTouchEvent(event);\n      var data = getData(event);\n\n      if (isTouch && !that._isTouchEnabled) {\n        return;\n      }\n\n      that._moveDrag(event, data);\n\n      that._moveZoom(event, data);\n\n      that._moveHover(event, data);\n\n      that._moveFocus(event, data);\n    };\n\n    that._docHandlers[EVENTS.end] = function (event) {\n      var isTouch = isTouchEvent(event);\n      var data = getData(event);\n\n      if (isTouch && !that._isTouchEnabled) {\n        return;\n      }\n\n      that._endClick(event, data);\n\n      that._endDrag(event, data);\n\n      that._endZoom(event, data);\n    };\n\n    that._rootHandlers[EVENTS.wheel] = function (event) {\n      that._cancelFocus();\n\n      if (!that._isWheelEnabled) {\n        return;\n      }\n\n      var data = getData(event);\n\n      if (data) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        that._wheelZoom(event, data);\n      }\n    };\n\n    that._wheelLock = {\n      dir: 0\n    };\n\n    function getData(event) {\n      var target = event.target;\n      return (\"tspan\" === target.tagName ? target.parentNode : target)[DATA_KEY];\n    }\n  },\n  _createProjectionHandlers: function _createProjectionHandlers(projection) {\n    var that = this;\n    projection.on({\n      center: handler,\n      zoom: handler\n    });\n\n    function handler() {\n      that._cancelFocus();\n    }\n  },\n  reset: function reset() {\n    this._clickState = null;\n\n    this._endDrag();\n\n    this._cancelHover();\n\n    this._cancelFocus();\n  },\n  setOptions: function setOptions(options) {\n    this.reset();\n\n    this._detachHandlers();\n\n    this._isTouchEnabled = !!parseScalar(options.touchEnabled, true);\n    this._isWheelEnabled = !!parseScalar(options.wheelEnabled, true);\n\n    this._attachHandlers();\n  },\n  _detachHandlers: function _detachHandlers() {\n    if (this._isTouchEnabled) {\n      this._root.css({\n        \"touch-action\": \"\",\n        \"-webkit-user-select\": \"\"\n      }).off(_addNamespace(\"MSHoldVisual\", _NAME)).off(_addNamespace(\"contextmenu\", _NAME));\n    }\n\n    eventsEngine.off(domAdapter.getDocument(), this._docHandlers);\n\n    this._root.off(this._rootHandlers);\n  },\n  _attachHandlers: function _attachHandlers() {\n    if (this._isTouchEnabled) {\n      this._root.css({\n        \"touch-action\": \"none\",\n        \"-webkit-user-select\": \"none\"\n      }).on(_addNamespace(\"MSHoldVisual\", _NAME), function (event) {\n        event.preventDefault();\n      }).on(_addNamespace(\"contextmenu\", _NAME), function (event) {\n        isTouchEvent(event) && event.preventDefault();\n      });\n    }\n\n    eventsEngine.on(domAdapter.getDocument(), this._docHandlers);\n\n    this._root.on(this._rootHandlers);\n  }\n};\n\nFocus = function Focus(fire) {\n  var that = this;\n  var _activeData = null;\n  var _data = null;\n  var _disabled = false;\n  var _offTimer = null;\n\n  var _x;\n\n  var _y;\n\n  that.dispose = function () {\n    clearTimeout(_offTimer);\n    that.turnOn = that.turnOff = that.cancel = that.dispose = that = fire = _activeData = _data = _offTimer = null;\n  };\n\n  that.turnOn = function (data, coords) {\n    if (data === _data && _disabled) {\n      return;\n    }\n\n    _disabled = false;\n    _data = data;\n\n    if (_activeData) {\n      _x = coords.x;\n      _y = coords.y;\n\n      if (_data === _activeData) {\n        fire(EVENT_FOCUS_MOVE, {\n          data: _data,\n          x: _x,\n          y: _y\n        });\n        onCheck(true);\n      } else {\n        fire(EVENT_FOCUS_ON, {\n          data: _data,\n          x: _x,\n          y: _y,\n          done: onCheck\n        });\n      }\n    } else {\n      _x = coords.x;\n      _y = coords.y;\n      fire(EVENT_FOCUS_ON, {\n        data: _data,\n        x: _x,\n        y: _y,\n        done: onCheck\n      });\n    }\n\n    function onCheck(result) {\n      _disabled = !result;\n\n      if (result) {\n        _activeData = _data;\n        clearTimeout(_offTimer);\n        _offTimer = null;\n      }\n    }\n  };\n\n  that.turnOff = function () {\n    _data = null;\n\n    if (_activeData && !_disabled) {\n      _offTimer = _offTimer || setTimeout(function () {\n        _offTimer = null;\n        fire(EVENT_FOCUS_OFF, {\n          data: _activeData\n        });\n        _activeData = null;\n      }, FOCUS_OFF_DELAY);\n    }\n  };\n\n  that.cancel = function () {\n    clearTimeout(_offTimer);\n\n    if (_activeData) {\n      fire(EVENT_FOCUS_OFF, {\n        data: _activeData\n      });\n    }\n\n    _activeData = _data = _offTimer = null;\n  };\n};\n\nmakeEventEmitter(Tracker);\n\nfunction getDistance(x1, y1, x2, y2) {\n  return _sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\n}\n\nfunction isTouchEvent(event) {\n  var type = event.originalEvent.type;\n  var pointerType = event.originalEvent.pointerType;\n  return /^touch/.test(type) || /^MSPointer/.test(type) && 4 !== pointerType || /^pointer/.test(type) && \"mouse\" !== pointerType;\n}\n\nfunction selectItem(flags, items) {\n  var i = 0;\n  var ii = flags.length;\n  var item;\n\n  for (; i < ii; ++i) {\n    if (flags[i]) {\n      item = items[i];\n      break;\n    }\n  }\n\n  return _addNamespace(item || items[i], _NAME);\n}\n\nfunction setupEvents() {\n  var flags = [navigator.pointerEnabled, navigator.msPointerEnabled, hasProperty(\"ontouchstart\")];\n  EVENTS = {\n    start: selectItem(flags, [\"pointerdown\", \"MSPointerDown\", \"touchstart mousedown\", \"mousedown\"]),\n    move: selectItem(flags, [\"pointermove\", \"MSPointerMove\", \"touchmove mousemove\", \"mousemove\"]),\n    end: selectItem(flags, [\"pointerup\", \"MSPointerUp\", \"touchend mouseup\", \"mouseup\"]),\n    wheel: _addNamespace(wheelEventName, _NAME)\n  };\n}\n\nfunction getEventCoords(event) {\n  var originalEvent = event.originalEvent;\n  var touch = originalEvent.touches && originalEvent.touches[0] || {};\n  return {\n    x: touch.pageX || originalEvent.pageX || event.pageX,\n    y: touch.pageY || originalEvent.pageY || event.pageY\n  };\n}\n\nfunction getPointerId(event) {\n  return event.originalEvent.pointerId;\n}\n\nfunction getMultitouchEventCoords(event, pointerId) {\n  var originalEvent = event.originalEvent;\n\n  if (void 0 !== originalEvent.pointerId) {\n    originalEvent = originalEvent.pointerId === pointerId ? originalEvent : null;\n  } else {\n    originalEvent = originalEvent.touches[pointerId];\n  }\n\n  return originalEvent ? {\n    x: originalEvent.pageX || event.pageX,\n    y: originalEvent.pageY || event.pageY\n  } : null;\n}\n\nfunction adjustWheelDelta(delta, lock) {\n  if (0 === delta) {\n    return 0;\n  }\n\n  var _delta = _abs(delta);\n\n  var sign = _round(delta / _delta);\n\n  if (lock.dir && sign !== lock.dir) {\n    return 0;\n  }\n\n  lock.dir = sign;\n\n  if (_delta < .1) {\n    _delta = 0;\n  } else if (_delta < 1) {\n    _delta = 1;\n  } else if (_delta > 4) {\n    _delta = 4;\n  } else {\n    _delta = _round(_delta);\n  }\n\n  return sign * _delta;\n}","map":null,"metadata":{},"sourceType":"module"}