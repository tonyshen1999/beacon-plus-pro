{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/timezones/utils.timezones_data.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport query from \"../../../data/query\";\nimport errors from \"../../../core/errors\";\nimport tzData from \"./timezones_data\";\nimport { sign } from \"../../../core/utils/math\";\n\nvar getConvertedUntils = function getConvertedUntils(value) {\n  return value.split(\"|\").map(function (until) {\n    if (\"Infinity\" === until) {\n      return null;\n    }\n\n    return 1e3 * parseInt(until, 36);\n  });\n};\n\nvar parseTimezone = function parseTimezone(timeZoneConfig) {\n  var offsets = timeZoneConfig.offsets;\n  var offsetIndices = timeZoneConfig.offsetIndices;\n  var untils = timeZoneConfig.untils;\n  var offsetList = offsets.split(\"|\").map(function (value) {\n    return parseInt(value);\n  });\n  var offsetIndexList = offsetIndices.split(\"\").map(function (value) {\n    return parseInt(value);\n  });\n  var dateList = getConvertedUntils(untils).map((accumulator = 0, function (value) {\n    return accumulator += value;\n  }));\n  var accumulator;\n  return {\n    offsetList: offsetList,\n    offsetIndexList: offsetIndexList,\n    dateList: dateList\n  };\n};\n\nvar TimeZoneCache = /*#__PURE__*/function () {\n  function TimeZoneCache() {\n    _classCallCheck(this, TimeZoneCache);\n\n    this.map = new Map();\n  }\n\n  _createClass(TimeZoneCache, [{\n    key: \"tryGet\",\n    value: function tryGet(id) {\n      if (!this.map.get(id)) {\n        var config = timeZoneDataUtils.getTimezoneById(id);\n\n        if (!config) {\n          return false;\n        }\n\n        var timeZoneInfo = parseTimezone(config);\n        this.map.set(id, timeZoneInfo);\n      }\n\n      return this.map.get(id);\n    }\n  }]);\n\n  return TimeZoneCache;\n}();\n\nvar tzCache = new TimeZoneCache();\nvar timeZoneDataUtils = {\n  _tzCache: tzCache,\n  _timeZones: tzData.zones,\n  getDisplayedTimeZones: function getDisplayedTimeZones(timestamp) {\n    var _this = this;\n\n    var timeZones = this._timeZones.map(function (timezone) {\n      var timeZoneInfo = parseTimezone(timezone);\n\n      var offset = _this.getUtcOffset(timeZoneInfo, timestamp);\n\n      var title = \"(GMT \".concat(_this.formatOffset(offset), \") \").concat(_this.formatId(timezone.id));\n      return {\n        offset: offset,\n        title: title,\n        id: timezone.id\n      };\n    });\n\n    return query(timeZones).sortBy(\"offset\").toArray();\n  },\n  formatOffset: function formatOffset(offset) {\n    var hours = Math.floor(offset);\n    var minutesInDecimal = offset - hours;\n    var signString = sign(offset) >= 0 ? \"+\" : \"-\";\n    var hoursString = \"0\".concat(Math.abs(hours)).slice(-2);\n    var minutesString = minutesInDecimal > 0 ? \":\".concat(60 * minutesInDecimal) : \":00\";\n    return signString + hoursString + minutesString;\n  },\n  formatId: function formatId(id) {\n    return id.split(\"/\").join(\" - \").split(\"_\").join(\" \");\n  },\n  getTimezoneById: function getTimezoneById(id) {\n    if (!id) {\n      return;\n    }\n\n    var tzList = this._timeZones;\n\n    for (var i = 0; i < tzList.length; i++) {\n      var currentId = tzList[i].id;\n\n      if (currentId === id) {\n        return tzList[i];\n      }\n    }\n\n    errors.log(\"W0009\", id);\n    return;\n  },\n  getTimeZoneOffsetById: function getTimeZoneOffsetById(id, timestamp) {\n    var timeZoneInfo = tzCache.tryGet(id);\n    return timeZoneInfo ? this.getUtcOffset(timeZoneInfo, timestamp) : void 0;\n  },\n  getTimeZoneDeclarationTuple: function getTimeZoneDeclarationTuple(id, year) {\n    var timeZoneInfo = tzCache.tryGet(id);\n    return timeZoneInfo ? this.getTimeZoneDeclarationTupleCore(timeZoneInfo, year) : [];\n  },\n  getTimeZoneDeclarationTupleCore: function getTimeZoneDeclarationTupleCore(timeZoneInfo, year) {\n    var offsetList = timeZoneInfo.offsetList;\n    var offsetIndexList = timeZoneInfo.offsetIndexList;\n    var dateList = timeZoneInfo.dateList;\n    var tupleResult = [];\n\n    for (var i = 0; i < dateList.length; i++) {\n      var currentDate = dateList[i];\n      var currentYear = new Date(currentDate).getFullYear();\n\n      if (currentYear === year) {\n        var offset = offsetList[offsetIndexList[i + 1]];\n        tupleResult.push({\n          date: currentDate,\n          offset: -offset / 60\n        });\n      }\n\n      if (currentYear > year) {\n        break;\n      }\n    }\n\n    return tupleResult;\n  },\n  getUtcOffset: function getUtcOffset(timeZoneInfo, dateTimeStamp) {\n    var offsetList = timeZoneInfo.offsetList;\n    var offsetIndexList = timeZoneInfo.offsetIndexList;\n    var dateList = timeZoneInfo.dateList;\n    var lastIntervalStartIndex = dateList.length - 1 - 1;\n    var index = lastIntervalStartIndex;\n\n    while (index >= 0 && dateTimeStamp < dateList[index]) {\n      index--;\n    }\n\n    var offset = offsetList[offsetIndexList[index + 1]];\n    return -offset / 60 || offset;\n  }\n};\nexport default timeZoneDataUtils;","map":null,"metadata":{},"sourceType":"module"}