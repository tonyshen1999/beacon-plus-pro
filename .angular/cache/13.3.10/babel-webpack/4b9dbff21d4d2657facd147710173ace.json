{"ast":null,"code":"/**\r\n * DevExtreme (esm/animation/position.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getOuterWidth, getOuterHeight, getWidth, getHeight } from \"../core/utils/size\";\nimport $ from \"../core/renderer\";\nimport { splitPair, pairToObject } from \"../core/utils/common\";\nimport { each } from \"../core/utils/iterator\";\nimport { getWindow } from \"../core/utils/window\";\nvar window = getWindow();\nimport domAdapter from \"../core/dom_adapter\";\nimport { isWindow, isDefined } from \"../core/utils/type\";\nimport { extend } from \"../core/utils/extend\";\nimport { getBoundingRect } from \"../core/utils/position\";\nimport browser from \"../core/utils/browser\";\nimport { resetPosition, move } from \"./translator\";\nimport { touch } from \"../core/utils/support\";\nimport devices from \"../core/devices\";\nvar horzRe = /left|right/;\nvar vertRe = /top|bottom/;\nvar collisionRe = /fit|flip|none/;\nvar scaleRe = /scale\\(.+?\\)/;\nvar IS_SAFARI = browser.safari;\n\nvar normalizeAlign = function normalizeAlign(raw) {\n  var result = {\n    h: \"center\",\n    v: \"center\"\n  };\n  var pair = splitPair(raw);\n\n  if (pair) {\n    each(pair, function () {\n      var w = String(this).toLowerCase();\n\n      if (horzRe.test(w)) {\n        result.h = w;\n      } else if (vertRe.test(w)) {\n        result.v = w;\n      }\n    });\n  }\n\n  return result;\n};\n\nvar normalizeOffset = function normalizeOffset(raw) {\n  return pairToObject(raw);\n};\n\nvar normalizeCollision = function normalizeCollision(raw) {\n  var pair = splitPair(raw);\n  var h = String(pair && pair[0]).toLowerCase();\n  var v = String(pair && pair[1]).toLowerCase();\n\n  if (!collisionRe.test(h)) {\n    h = \"none\";\n  }\n\n  if (!collisionRe.test(v)) {\n    v = h;\n  }\n\n  return {\n    h: h,\n    v: v\n  };\n};\n\nvar getAlignFactor = function getAlignFactor(align) {\n  switch (align) {\n    case \"center\":\n      return .5;\n\n    case \"right\":\n    case \"bottom\":\n      return 1;\n\n    default:\n      return 0;\n  }\n};\n\nvar inverseAlign = function inverseAlign(align) {\n  switch (align) {\n    case \"left\":\n      return \"right\";\n\n    case \"right\":\n      return \"left\";\n\n    case \"top\":\n      return \"bottom\";\n\n    case \"bottom\":\n      return \"top\";\n\n    default:\n      return align;\n  }\n};\n\nvar calculateOversize = function calculateOversize(data, bounds) {\n  var oversize = 0;\n\n  if (data.myLocation < bounds.min) {\n    oversize += bounds.min - data.myLocation;\n  }\n\n  if (data.myLocation > bounds.max) {\n    oversize += data.myLocation - bounds.max;\n  }\n\n  return oversize;\n};\n\nvar collisionSide = function collisionSide(direction, data, bounds) {\n  if (data.myLocation < bounds.min) {\n    return \"h\" === direction ? \"left\" : \"top\";\n  }\n\n  if (data.myLocation > bounds.max) {\n    return \"h\" === direction ? \"right\" : \"bottom\";\n  }\n\n  return \"none\";\n};\n\nvar initMyLocation = function initMyLocation(data) {\n  data.myLocation = data.atLocation + getAlignFactor(data.atAlign) * data.atSize - getAlignFactor(data.myAlign) * data.mySize + data.offset;\n};\n\nvar collisionResolvers = {\n  fit: function fit(data, bounds) {\n    var result = false;\n\n    if (data.myLocation > bounds.max) {\n      data.myLocation = bounds.max;\n      result = true;\n    }\n\n    if (data.myLocation < bounds.min) {\n      data.myLocation = bounds.min;\n      result = true;\n    }\n\n    data.fit = result;\n  },\n  flip: function flip(data, bounds) {\n    data.flip = false;\n\n    if (\"center\" === data.myAlign && \"center\" === data.atAlign) {\n      return;\n    }\n\n    if (data.myLocation < bounds.min || data.myLocation > bounds.max) {\n      var inverseData = extend({}, data, {\n        myAlign: inverseAlign(data.myAlign),\n        atAlign: inverseAlign(data.atAlign),\n        offset: -data.offset\n      });\n      initMyLocation(inverseData);\n      inverseData.oversize = calculateOversize(inverseData, bounds);\n\n      if (inverseData.myLocation >= bounds.min && inverseData.myLocation <= bounds.max || data.oversize > inverseData.oversize) {\n        data.myLocation = inverseData.myLocation;\n        data.oversize = inverseData.oversize;\n        data.flip = true;\n      }\n    }\n  },\n  flipfit: function flipfit(data, bounds) {\n    this.flip(data, bounds);\n    this.fit(data, bounds);\n  },\n  none: function none(data) {\n    data.oversize = 0;\n  }\n};\nvar scrollbarWidth;\n\nvar calculateScrollbarWidth = function calculateScrollbarWidth() {\n  var $scrollDiv = $(\"<div>\").css({\n    width: 100,\n    height: 100,\n    overflow: \"scroll\",\n    position: \"absolute\",\n    top: -9999\n  }).appendTo($(\"body\"));\n  var result = $scrollDiv.get(0).offsetWidth - $scrollDiv.get(0).clientWidth;\n  $scrollDiv.remove();\n  scrollbarWidth = result;\n};\n\nvar defaultPositionResult = {\n  h: {\n    location: 0,\n    flip: false,\n    fit: false,\n    oversize: 0\n  },\n  v: {\n    location: 0,\n    flip: false,\n    fit: false,\n    oversize: 0\n  }\n};\n\nvar calculatePosition = function calculatePosition(what, options) {\n  var $what = $(what);\n  var currentOffset = $what.offset();\n  var result = extend(true, {}, defaultPositionResult, {\n    h: {\n      location: currentOffset.left\n    },\n    v: {\n      location: currentOffset.top\n    }\n  });\n\n  if (!options) {\n    return result;\n  }\n\n  var my = normalizeAlign(options.my);\n  var at = normalizeAlign(options.at);\n  var of = $(options.of).length && options.of || window;\n  var offset = normalizeOffset(options.offset);\n  var collision = normalizeCollision(options.collision);\n  var boundary = options.boundary;\n  var boundaryOffset = normalizeOffset(options.boundaryOffset);\n  var h = {\n    mySize: getOuterWidth($what),\n    myAlign: my.h,\n    atAlign: at.h,\n    offset: offset.h,\n    collision: collision.h,\n    boundaryOffset: boundaryOffset.h\n  };\n  var v = {\n    mySize: getOuterHeight($what),\n    myAlign: my.v,\n    atAlign: at.v,\n    offset: offset.v,\n    collision: collision.v,\n    boundaryOffset: boundaryOffset.v\n  };\n\n  if (of.preventDefault) {\n    h.atLocation = of.pageX;\n    v.atLocation = of.pageY;\n    h.atSize = 0;\n    v.atSize = 0;\n  } else {\n    of = $(of);\n\n    if (isWindow(of[0])) {\n      h.atLocation = of.scrollLeft();\n      v.atLocation = of.scrollTop();\n\n      if (\"phone\" === devices.real().deviceType && of[0].visualViewport) {\n        h.atLocation = Math.max(h.atLocation, of[0].visualViewport.offsetLeft);\n        v.atLocation = Math.max(v.atLocation, of[0].visualViewport.offsetTop);\n        h.atSize = of[0].visualViewport.width;\n        v.atSize = of[0].visualViewport.height;\n      } else {\n        h.atSize = of[0].innerWidth > of[0].outerWidth ? of[0].innerWidth : getWidth(of);\n        v.atSize = of[0].innerHeight > of[0].outerHeight || IS_SAFARI ? of[0].innerHeight : getHeight(of);\n      }\n    } else if (9 === of[0].nodeType) {\n      h.atLocation = 0;\n      v.atLocation = 0;\n      h.atSize = getWidth(of);\n      v.atSize = getHeight(of);\n    } else {\n      var ofRect = getBoundingRect(of.get(0));\n      var o = getOffsetWithoutScale(of);\n      h.atLocation = o.left;\n      v.atLocation = o.top;\n      h.atSize = Math.max(ofRect.width, getOuterWidth(of));\n      v.atSize = Math.max(ofRect.height, getOuterHeight(of));\n    }\n  }\n\n  initMyLocation(h);\n  initMyLocation(v);\n\n  var bounds = function () {\n    var win = $(window);\n    var windowWidth = getWidth(win);\n    var windowHeight = getHeight(win);\n    var left = win.scrollLeft();\n    var top = win.scrollTop();\n    var documentElement = domAdapter.getDocumentElement();\n    var hZoomLevel = touch ? documentElement.clientWidth / windowWidth : 1;\n    var vZoomLevel = touch ? documentElement.clientHeight / windowHeight : 1;\n\n    if (void 0 === scrollbarWidth) {\n      calculateScrollbarWidth();\n    }\n\n    var boundaryWidth = windowWidth;\n    var boundaryHeight = windowHeight;\n\n    if (boundary) {\n      var $boundary = $(boundary);\n      var boundaryPosition = $boundary.offset();\n      left = boundaryPosition.left;\n      top = boundaryPosition.top;\n      boundaryWidth = getWidth($boundary);\n      boundaryHeight = getHeight($boundary);\n    }\n\n    return {\n      h: {\n        min: left + h.boundaryOffset,\n        max: left + boundaryWidth / hZoomLevel - h.mySize - h.boundaryOffset\n      },\n      v: {\n        min: top + v.boundaryOffset,\n        max: top + boundaryHeight / vZoomLevel - v.mySize - v.boundaryOffset\n      }\n    };\n  }();\n\n  h.oversize = calculateOversize(h, bounds.h);\n  v.oversize = calculateOversize(v, bounds.v);\n  h.collisionSide = collisionSide(\"h\", h, bounds.h);\n  v.collisionSide = collisionSide(\"v\", v, bounds.v);\n\n  if (collisionResolvers[h.collision]) {\n    collisionResolvers[h.collision](h, bounds.h);\n  }\n\n  if (collisionResolvers[v.collision]) {\n    collisionResolvers[v.collision](v, bounds.v);\n  }\n\n  var preciser = function preciser(number) {\n    return options.precise ? number : Math.round(number);\n  };\n\n  extend(true, result, {\n    h: {\n      location: preciser(h.myLocation),\n      oversize: preciser(h.oversize),\n      fit: h.fit,\n      flip: h.flip,\n      collisionSide: h.collisionSide\n    },\n    v: {\n      location: preciser(v.myLocation),\n      oversize: preciser(v.oversize),\n      fit: v.fit,\n      flip: v.flip,\n      collisionSide: v.collisionSide\n    },\n    precise: options.precise\n  });\n  return result;\n};\n\nvar setScaleProperty = function setScaleProperty(element, scale, transformProp, styleAttr, isEmpty) {\n  var stylePropIsValid = isDefined(element.style) && !domAdapter.isNode(element.style);\n\n  if (stylePropIsValid) {\n    element.style.transform = isEmpty ? transformProp.replace(scale, \"\") : transformProp;\n  } else {\n    element.setAttribute(\"style\", isEmpty ? styleAttr.replace(scale, \"\") : styleAttr);\n  }\n};\n\nvar getOffsetWithoutScale = function getOffsetWithoutScale($startElement) {\n  var _currentElement$getAt, _currentElement$style, _style$match;\n\n  var $currentElement = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : $startElement;\n  var currentElement = $currentElement.get(0);\n\n  if (!currentElement) {\n    return $startElement.offset();\n  }\n\n  var style = (null === (_currentElement$getAt = currentElement.getAttribute) || void 0 === _currentElement$getAt ? void 0 : _currentElement$getAt.call(currentElement, \"style\")) || \"\";\n  var transform = null === (_currentElement$style = currentElement.style) || void 0 === _currentElement$style ? void 0 : _currentElement$style.transform;\n  var scale = null === (_style$match = style.match(scaleRe)) || void 0 === _style$match ? void 0 : _style$match[0];\n  var offset;\n\n  if (scale) {\n    setScaleProperty(currentElement, scale, transform, style, true);\n    offset = getOffsetWithoutScale($startElement, $currentElement.parent());\n    setScaleProperty(currentElement, scale, transform, style, false);\n  } else {\n    offset = getOffsetWithoutScale($startElement, $currentElement.parent());\n  }\n\n  return offset;\n};\n\nvar position = function position(what, options) {\n  var $what = $(what);\n\n  if (!options) {\n    return $what.offset();\n  }\n\n  resetPosition($what, true);\n  var offset = getOffsetWithoutScale($what);\n  var targetPosition = options.h && options.v ? options : calculatePosition($what, options);\n\n  var preciser = function preciser(number) {\n    return options.precise ? number : Math.round(number);\n  };\n\n  move($what, {\n    left: targetPosition.h.location - preciser(offset.left),\n    top: targetPosition.v.location - preciser(offset.top)\n  });\n  return targetPosition;\n};\n\nvar offset = function offset(element) {\n  element = $(element).get(0);\n\n  if (isWindow(element)) {\n    return null;\n  } else if (element && \"pageY\" in element && \"pageX\" in element) {\n    return {\n      top: element.pageY,\n      left: element.pageX\n    };\n  }\n\n  return $(element).offset();\n};\n\nif (!position.inverseAlign) {\n  position.inverseAlign = inverseAlign;\n}\n\nif (!position.normalizeAlign) {\n  position.normalizeAlign = normalizeAlign;\n}\n\nexport default {\n  calculateScrollbarWidth: calculateScrollbarWidth,\n  calculate: calculatePosition,\n  setup: position,\n  offset: offset\n};","map":null,"metadata":{},"sourceType":"module"}