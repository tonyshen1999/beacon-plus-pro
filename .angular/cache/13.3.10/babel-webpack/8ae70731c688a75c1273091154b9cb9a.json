{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __decorate, __metadata, __param } from 'tslib';\nimport { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, Component, NgModule } from '@angular/core';\nimport DxSparkline from 'devextreme/viz/sparkline';\nimport { DxComponent, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxoMarginModule, DxoSizeModule, DxoTooltipModule, DxoBorderModule, DxoFontModule, DxoFormatModule, DxoShadowModule } from 'devextreme-angular/ui/nested';\n/*!\r\n * devextreme-angular\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\n/**\r\n * The Sparkline UI component is a compact chart that contains only one series. Owing to their size, sparklines occupy very little space and can be easily collected in a table or embedded straight in text.\r\n\r\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'devextreme-angular/core';\nimport * as ɵngcc2 from '@angular/platform-browser';\nvar DxSparklineComponent = /*#__PURE__*/(function () {\n  var DxSparklineComponent = /*#__PURE__*/function (_DxComponent) {\n    _inherits(DxSparklineComponent, _DxComponent);\n\n    var _super = _createSuper(DxSparklineComponent);\n\n    function DxSparklineComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\n      var _this;\n\n      _classCallCheck(this, DxSparklineComponent);\n\n      _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\n      _this._watcherHelper = _watcherHelper;\n      _this._idh = _idh;\n\n      _this._createEventEmitters([{\n        subscribe: 'disposing',\n        emit: 'onDisposing'\n      }, {\n        subscribe: 'drawn',\n        emit: 'onDrawn'\n      }, {\n        subscribe: 'exported',\n        emit: 'onExported'\n      }, {\n        subscribe: 'exporting',\n        emit: 'onExporting'\n      }, {\n        subscribe: 'fileSaving',\n        emit: 'onFileSaving'\n      }, {\n        subscribe: 'incidentOccurred',\n        emit: 'onIncidentOccurred'\n      }, {\n        subscribe: 'initialized',\n        emit: 'onInitialized'\n      }, {\n        subscribe: 'optionChanged',\n        emit: 'onOptionChanged'\n      }, {\n        subscribe: 'tooltipHidden',\n        emit: 'onTooltipHidden'\n      }, {\n        subscribe: 'tooltipShown',\n        emit: 'onTooltipShown'\n      }, {\n        emit: 'argumentFieldChange'\n      }, {\n        emit: 'barNegativeColorChange'\n      }, {\n        emit: 'barPositiveColorChange'\n      }, {\n        emit: 'dataSourceChange'\n      }, {\n        emit: 'disabledChange'\n      }, {\n        emit: 'elementAttrChange'\n      }, {\n        emit: 'firstLastColorChange'\n      }, {\n        emit: 'ignoreEmptyPointsChange'\n      }, {\n        emit: 'lineColorChange'\n      }, {\n        emit: 'lineWidthChange'\n      }, {\n        emit: 'lossColorChange'\n      }, {\n        emit: 'marginChange'\n      }, {\n        emit: 'maxColorChange'\n      }, {\n        emit: 'maxValueChange'\n      }, {\n        emit: 'minColorChange'\n      }, {\n        emit: 'minValueChange'\n      }, {\n        emit: 'pathModifiedChange'\n      }, {\n        emit: 'pointColorChange'\n      }, {\n        emit: 'pointSizeChange'\n      }, {\n        emit: 'pointSymbolChange'\n      }, {\n        emit: 'rtlEnabledChange'\n      }, {\n        emit: 'showFirstLastChange'\n      }, {\n        emit: 'showMinMaxChange'\n      }, {\n        emit: 'sizeChange'\n      }, {\n        emit: 'themeChange'\n      }, {\n        emit: 'tooltipChange'\n      }, {\n        emit: 'typeChange'\n      }, {\n        emit: 'valueFieldChange'\n      }, {\n        emit: 'winColorChange'\n      }, {\n        emit: 'winlossThresholdChange'\n      }]);\n\n      _this._idh.setHost(_assertThisInitialized(_this));\n\n      optionHost.setHost(_assertThisInitialized(_this));\n      return _this;\n    }\n    /**\r\n     * Specifies the data source field that provides arguments for a sparkline.\r\n    \r\n     */\n\n\n    _createClass(DxSparklineComponent, [{\n      key: \"argumentField\",\n      get: function get() {\n        return this._getOption('argumentField');\n      },\n      set: function set(value) {\n        this._setOption('argumentField', value);\n      }\n      /**\r\n       * Sets a color for the bars indicating negative values. Available for a sparkline of the bar type only.\r\n      \r\n       */\n\n    }, {\n      key: \"barNegativeColor\",\n      get: function get() {\n        return this._getOption('barNegativeColor');\n      },\n      set: function set(value) {\n        this._setOption('barNegativeColor', value);\n      }\n      /**\r\n       * Sets a color for the bars indicating positive values. Available for a sparkline of the bar type only.\r\n      \r\n       */\n\n    }, {\n      key: \"barPositiveColor\",\n      get: function get() {\n        return this._getOption('barPositiveColor');\n      },\n      set: function set(value) {\n        this._setOption('barPositiveColor', value);\n      }\n      /**\r\n       * Binds the UI component to data.\r\n      \r\n       */\n\n    }, {\n      key: \"dataSource\",\n      get: function get() {\n        return this._getOption('dataSource');\n      },\n      set: function set(value) {\n        this._setOption('dataSource', value);\n      }\n      /**\r\n       * Specifies whether the UI component responds to user interaction.\r\n      \r\n       */\n\n    }, {\n      key: \"disabled\",\n      get: function get() {\n        return this._getOption('disabled');\n      },\n      set: function set(value) {\n        this._setOption('disabled', value);\n      }\n      /**\r\n       * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n      \r\n       */\n\n    }, {\n      key: \"elementAttr\",\n      get: function get() {\n        return this._getOption('elementAttr');\n      },\n      set: function set(value) {\n        this._setOption('elementAttr', value);\n      }\n      /**\r\n       * Sets a color for the boundary of both the first and last points on a sparkline.\r\n      \r\n       */\n\n    }, {\n      key: \"firstLastColor\",\n      get: function get() {\n        return this._getOption('firstLastColor');\n      },\n      set: function set(value) {\n        this._setOption('firstLastColor', value);\n      }\n      /**\r\n       * Specifies whether the sparkline should ignore null data points.\r\n      \r\n       */\n\n    }, {\n      key: \"ignoreEmptyPoints\",\n      get: function get() {\n        return this._getOption('ignoreEmptyPoints');\n      },\n      set: function set(value) {\n        this._setOption('ignoreEmptyPoints', value);\n      }\n      /**\r\n       * Sets a color for a line on a sparkline. Available for the sparklines of the line- and area-like types.\r\n      \r\n       */\n\n    }, {\n      key: \"lineColor\",\n      get: function get() {\n        return this._getOption('lineColor');\n      },\n      set: function set(value) {\n        this._setOption('lineColor', value);\n      }\n      /**\r\n       * Specifies a width for a line on a sparkline. Available for the sparklines of the line- and area-like types.\r\n      \r\n       */\n\n    }, {\n      key: \"lineWidth\",\n      get: function get() {\n        return this._getOption('lineWidth');\n      },\n      set: function set(value) {\n        this._setOption('lineWidth', value);\n      }\n      /**\r\n       * Sets a color for the bars indicating the values that are less than the winloss threshold. Available for a sparkline of the winloss type only.\r\n      \r\n       */\n\n    }, {\n      key: \"lossColor\",\n      get: function get() {\n        return this._getOption('lossColor');\n      },\n      set: function set(value) {\n        this._setOption('lossColor', value);\n      }\n      /**\r\n       * Generates space around the UI component.\r\n      \r\n       */\n\n    }, {\n      key: \"margin\",\n      get: function get() {\n        return this._getOption('margin');\n      },\n      set: function set(value) {\n        this._setOption('margin', value);\n      }\n      /**\r\n       * Sets a color for the boundary of the maximum point on a sparkline.\r\n      \r\n       */\n\n    }, {\n      key: \"maxColor\",\n      get: function get() {\n        return this._getOption('maxColor');\n      },\n      set: function set(value) {\n        this._setOption('maxColor', value);\n      }\n      /**\r\n       * Specifies the maximum value of the sparkline&apos;s value axis.\r\n      \r\n       */\n\n    }, {\n      key: \"maxValue\",\n      get: function get() {\n        return this._getOption('maxValue');\n      },\n      set: function set(value) {\n        this._setOption('maxValue', value);\n      }\n      /**\r\n       * Sets a color for the boundary of the minimum point on a sparkline.\r\n      \r\n       */\n\n    }, {\n      key: \"minColor\",\n      get: function get() {\n        return this._getOption('minColor');\n      },\n      set: function set(value) {\n        this._setOption('minColor', value);\n      }\n      /**\r\n       * Specifies the minimum value of the sparkline value axis.\r\n      \r\n       */\n\n    }, {\n      key: \"minValue\",\n      get: function get() {\n        return this._getOption('minValue');\n      },\n      set: function set(value) {\n        this._setOption('minValue', value);\n      }\n      /**\r\n       * Notifies the UI component that it is embedded into an HTML page that uses a tag modifying the path.\r\n      \r\n       */\n\n    }, {\n      key: \"pathModified\",\n      get: function get() {\n        return this._getOption('pathModified');\n      },\n      set: function set(value) {\n        this._setOption('pathModified', value);\n      }\n      /**\r\n       * Sets a color for points on a sparkline. Available for the sparklines of the line- and area-like types.\r\n      \r\n       */\n\n    }, {\n      key: \"pointColor\",\n      get: function get() {\n        return this._getOption('pointColor');\n      },\n      set: function set(value) {\n        this._setOption('pointColor', value);\n      }\n      /**\r\n       * Specifies the diameter of sparkline points in pixels. Available for the sparklines of line- and area-like types.\r\n      \r\n       */\n\n    }, {\n      key: \"pointSize\",\n      get: function get() {\n        return this._getOption('pointSize');\n      },\n      set: function set(value) {\n        this._setOption('pointSize', value);\n      }\n      /**\r\n       * Specifies a symbol to use as a point marker on a sparkline. Available for the sparklines of the line- and area-like types.\r\n      \r\n       */\n\n    }, {\n      key: \"pointSymbol\",\n      get: function get() {\n        return this._getOption('pointSymbol');\n      },\n      set: function set(value) {\n        this._setOption('pointSymbol', value);\n      }\n      /**\r\n       * Switches the UI component to a right-to-left representation.\r\n      \r\n       */\n\n    }, {\n      key: \"rtlEnabled\",\n      get: function get() {\n        return this._getOption('rtlEnabled');\n      },\n      set: function set(value) {\n        this._setOption('rtlEnabled', value);\n      }\n      /**\r\n       * Specifies whether or not to indicate both the first and last values on a sparkline.\r\n      \r\n       */\n\n    }, {\n      key: \"showFirstLast\",\n      get: function get() {\n        return this._getOption('showFirstLast');\n      },\n      set: function set(value) {\n        this._setOption('showFirstLast', value);\n      }\n      /**\r\n       * Specifies whether or not to indicate both the minimum and maximum values on a sparkline.\r\n      \r\n       */\n\n    }, {\n      key: \"showMinMax\",\n      get: function get() {\n        return this._getOption('showMinMax');\n      },\n      set: function set(value) {\n        this._setOption('showMinMax', value);\n      }\n      /**\r\n       * Specifies the UI component&apos;s size in pixels.\r\n      \r\n       */\n\n    }, {\n      key: \"size\",\n      get: function get() {\n        return this._getOption('size');\n      },\n      set: function set(value) {\n        this._setOption('size', value);\n      }\n      /**\r\n       * Sets the name of the theme the UI component uses.\r\n      \r\n       */\n\n    }, {\n      key: \"theme\",\n      get: function get() {\n        return this._getOption('theme');\n      },\n      set: function set(value) {\n        this._setOption('theme', value);\n      }\n      /**\r\n       * Configures the tooltip.\r\n      \r\n       */\n\n    }, {\n      key: \"tooltip\",\n      get: function get() {\n        return this._getOption('tooltip');\n      },\n      set: function set(value) {\n        this._setOption('tooltip', value);\n      }\n      /**\r\n       * Determines the type of a sparkline.\r\n      \r\n       */\n\n    }, {\n      key: \"type\",\n      get: function get() {\n        return this._getOption('type');\n      },\n      set: function set(value) {\n        this._setOption('type', value);\n      }\n      /**\r\n       * Specifies the data source field that provides values for a sparkline.\r\n      \r\n       */\n\n    }, {\n      key: \"valueField\",\n      get: function get() {\n        return this._getOption('valueField');\n      },\n      set: function set(value) {\n        this._setOption('valueField', value);\n      }\n      /**\r\n       * Sets a color for the bars indicating the values greater than a winloss threshold. Available for a sparkline of the winloss type only.\r\n      \r\n       */\n\n    }, {\n      key: \"winColor\",\n      get: function get() {\n        return this._getOption('winColor');\n      },\n      set: function set(value) {\n        this._setOption('winColor', value);\n      }\n      /**\r\n       * Specifies a value that serves as a threshold for the sparkline of the winloss type.\r\n      \r\n       */\n\n    }, {\n      key: \"winlossThreshold\",\n      get: function get() {\n        return this._getOption('winlossThreshold');\n      },\n      set: function set(value) {\n        this._setOption('winlossThreshold', value);\n      }\n    }, {\n      key: \"_createInstance\",\n      value: function _createInstance(element, options) {\n        return new DxSparkline(element, options);\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._destroyWidget();\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        _get(_getPrototypeOf(DxSparklineComponent.prototype), \"ngOnChanges\", this).call(this, changes);\n\n        this.setupChanges('dataSource', changes);\n      }\n    }, {\n      key: \"setupChanges\",\n      value: function setupChanges(prop, changes) {\n        if (!(prop in this._optionsToUpdate)) {\n          this._idh.setup(prop, changes);\n        }\n      }\n    }, {\n      key: \"ngDoCheck\",\n      value: function ngDoCheck() {\n        this._idh.doCheck('dataSource');\n\n        this._watcherHelper.checkWatchers();\n\n        _get(_getPrototypeOf(DxSparklineComponent.prototype), \"ngDoCheck\", this).call(this);\n\n        _get(_getPrototypeOf(DxSparklineComponent.prototype), \"clearChangedOptions\", this).call(this);\n      }\n    }, {\n      key: \"_setOption\",\n      value: function _setOption(name, value) {\n        var isSetup = this._idh.setupSingle(name, value);\n\n        var isChanged = this._idh.getChanges(name, value) !== null;\n\n        if (isSetup || isChanged) {\n          _get(_getPrototypeOf(DxSparklineComponent.prototype), \"_setOption\", this).call(this, name, value);\n        }\n      }\n    }]);\n\n    return DxSparklineComponent;\n  }(DxComponent);\n\n  DxSparklineComponent.ɵfac = function DxSparklineComponent_Factory(t) {\n    return new (t || DxSparklineComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DxTemplateHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.WatcherHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IterableDifferHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TransferState), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n\n  DxSparklineComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: DxSparklineComponent,\n    selectors: [[\"dx-sparkline\"]],\n    inputs: {\n      argumentField: \"argumentField\",\n      barNegativeColor: \"barNegativeColor\",\n      barPositiveColor: \"barPositiveColor\",\n      dataSource: \"dataSource\",\n      disabled: \"disabled\",\n      elementAttr: \"elementAttr\",\n      firstLastColor: \"firstLastColor\",\n      ignoreEmptyPoints: \"ignoreEmptyPoints\",\n      lineColor: \"lineColor\",\n      lineWidth: \"lineWidth\",\n      lossColor: \"lossColor\",\n      margin: \"margin\",\n      maxColor: \"maxColor\",\n      maxValue: \"maxValue\",\n      minColor: \"minColor\",\n      minValue: \"minValue\",\n      pathModified: \"pathModified\",\n      pointColor: \"pointColor\",\n      pointSize: \"pointSize\",\n      pointSymbol: \"pointSymbol\",\n      rtlEnabled: \"rtlEnabled\",\n      showFirstLast: \"showFirstLast\",\n      showMinMax: \"showMinMax\",\n      size: \"size\",\n      theme: \"theme\",\n      tooltip: \"tooltip\",\n      type: \"type\",\n      valueField: \"valueField\",\n      winColor: \"winColor\",\n      winlossThreshold: \"winlossThreshold\"\n    },\n    outputs: {\n      onDisposing: \"onDisposing\",\n      onDrawn: \"onDrawn\",\n      onExported: \"onExported\",\n      onExporting: \"onExporting\",\n      onFileSaving: \"onFileSaving\",\n      onIncidentOccurred: \"onIncidentOccurred\",\n      onInitialized: \"onInitialized\",\n      onOptionChanged: \"onOptionChanged\",\n      onTooltipHidden: \"onTooltipHidden\",\n      onTooltipShown: \"onTooltipShown\",\n      argumentFieldChange: \"argumentFieldChange\",\n      barNegativeColorChange: \"barNegativeColorChange\",\n      barPositiveColorChange: \"barPositiveColorChange\",\n      dataSourceChange: \"dataSourceChange\",\n      disabledChange: \"disabledChange\",\n      elementAttrChange: \"elementAttrChange\",\n      firstLastColorChange: \"firstLastColorChange\",\n      ignoreEmptyPointsChange: \"ignoreEmptyPointsChange\",\n      lineColorChange: \"lineColorChange\",\n      lineWidthChange: \"lineWidthChange\",\n      lossColorChange: \"lossColorChange\",\n      marginChange: \"marginChange\",\n      maxColorChange: \"maxColorChange\",\n      maxValueChange: \"maxValueChange\",\n      minColorChange: \"minColorChange\",\n      minValueChange: \"minValueChange\",\n      pathModifiedChange: \"pathModifiedChange\",\n      pointColorChange: \"pointColorChange\",\n      pointSizeChange: \"pointSizeChange\",\n      pointSymbolChange: \"pointSymbolChange\",\n      rtlEnabledChange: \"rtlEnabledChange\",\n      showFirstLastChange: \"showFirstLastChange\",\n      showMinMaxChange: \"showMinMaxChange\",\n      sizeChange: \"sizeChange\",\n      themeChange: \"themeChange\",\n      tooltipChange: \"tooltipChange\",\n      typeChange: \"typeChange\",\n      valueFieldChange: \"valueFieldChange\",\n      winColorChange: \"winColorChange\",\n      winlossThresholdChange: \"winlossThresholdChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([DxTemplateHost, WatcherHelper, NestedOptionHost, IterableDifferHelper]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function DxSparklineComponent_Template(rf, ctx) {},\n    styles: [\"[_nghost-%COMP%] {  display: block; }\"]\n  });\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxSparklineComponent.prototype, \"argumentField\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxSparklineComponent.prototype, \"barNegativeColor\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxSparklineComponent.prototype, \"barPositiveColor\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxSparklineComponent.prototype, \"dataSource\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxSparklineComponent.prototype, \"disabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxSparklineComponent.prototype, \"elementAttr\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxSparklineComponent.prototype, \"firstLastColor\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxSparklineComponent.prototype, \"ignoreEmptyPoints\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxSparklineComponent.prototype, \"lineColor\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], DxSparklineComponent.prototype, \"lineWidth\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxSparklineComponent.prototype, \"lossColor\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxSparklineComponent.prototype, \"margin\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxSparklineComponent.prototype, \"maxColor\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], DxSparklineComponent.prototype, \"maxValue\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxSparklineComponent.prototype, \"minColor\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], DxSparklineComponent.prototype, \"minValue\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxSparklineComponent.prototype, \"pathModified\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxSparklineComponent.prototype, \"pointColor\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], DxSparklineComponent.prototype, \"pointSize\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxSparklineComponent.prototype, \"pointSymbol\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxSparklineComponent.prototype, \"rtlEnabled\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxSparklineComponent.prototype, \"showFirstLast\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DxSparklineComponent.prototype, \"showMinMax\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxSparklineComponent.prototype, \"size\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxSparklineComponent.prototype, \"theme\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DxSparklineComponent.prototype, \"tooltip\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxSparklineComponent.prototype, \"type\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxSparklineComponent.prototype, \"valueField\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DxSparklineComponent.prototype, \"winColor\", null);\n\n  __decorate([Input(), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], DxSparklineComponent.prototype, \"winlossThreshold\", null);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSparklineComponent.prototype, \"onDisposing\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSparklineComponent.prototype, \"onDrawn\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSparklineComponent.prototype, \"onExported\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSparklineComponent.prototype, \"onExporting\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSparklineComponent.prototype, \"onFileSaving\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSparklineComponent.prototype, \"onIncidentOccurred\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSparklineComponent.prototype, \"onInitialized\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSparklineComponent.prototype, \"onOptionChanged\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSparklineComponent.prototype, \"onTooltipHidden\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSparklineComponent.prototype, \"onTooltipShown\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSparklineComponent.prototype, \"argumentFieldChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSparklineComponent.prototype, \"barNegativeColorChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSparklineComponent.prototype, \"barPositiveColorChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSparklineComponent.prototype, \"dataSourceChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSparklineComponent.prototype, \"disabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSparklineComponent.prototype, \"elementAttrChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSparklineComponent.prototype, \"firstLastColorChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSparklineComponent.prototype, \"ignoreEmptyPointsChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSparklineComponent.prototype, \"lineColorChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSparklineComponent.prototype, \"lineWidthChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSparklineComponent.prototype, \"lossColorChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSparklineComponent.prototype, \"marginChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSparklineComponent.prototype, \"maxColorChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSparklineComponent.prototype, \"maxValueChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSparklineComponent.prototype, \"minColorChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSparklineComponent.prototype, \"minValueChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSparklineComponent.prototype, \"pathModifiedChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSparklineComponent.prototype, \"pointColorChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSparklineComponent.prototype, \"pointSizeChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSparklineComponent.prototype, \"pointSymbolChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSparklineComponent.prototype, \"rtlEnabledChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSparklineComponent.prototype, \"showFirstLastChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSparklineComponent.prototype, \"showMinMaxChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSparklineComponent.prototype, \"sizeChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSparklineComponent.prototype, \"themeChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSparklineComponent.prototype, \"tooltipChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSparklineComponent.prototype, \"typeChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSparklineComponent.prototype, \"valueFieldChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSparklineComponent.prototype, \"winColorChange\", void 0);\n\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], DxSparklineComponent.prototype, \"winlossThresholdChange\", void 0);\n\n  DxSparklineComponent = __decorate([__param(7, Inject(PLATFORM_ID)), __metadata(\"design:paramtypes\", [ElementRef, NgZone, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, TransferState, Object])], DxSparklineComponent);\n  return DxSparklineComponent;\n})();\nvar DxSparklineModule = /*#__PURE__*/(function () {\n  var DxSparklineModule = /*#__PURE__*/_createClass(function DxSparklineModule() {\n    _classCallCheck(this, DxSparklineModule);\n  });\n\n  DxSparklineModule.ɵfac = function DxSparklineModule_Factory(t) {\n    return new (t || DxSparklineModule)();\n  };\n\n  DxSparklineModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: DxSparklineModule\n  });\n  DxSparklineModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[DxoMarginModule, DxoSizeModule, DxoTooltipModule, DxoBorderModule, DxoFontModule, DxoFormatModule, DxoShadowModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule], DxoMarginModule, DxoSizeModule, DxoTooltipModule, DxoBorderModule, DxoFontModule, DxoFormatModule, DxoShadowModule, DxTemplateModule]\n  });\n  return DxSparklineModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxSparklineModule, {\n    declarations: function declarations() {\n      return [DxSparklineComponent];\n    },\n    imports: function imports() {\n      return [DxoMarginModule, DxoSizeModule, DxoTooltipModule, DxoBorderModule, DxoFontModule, DxoFormatModule, DxoShadowModule, DxIntegrationModule, DxTemplateModule, BrowserTransferStateModule];\n    },\n    exports: function exports() {\n      return [DxSparklineComponent, DxoMarginModule, DxoSizeModule, DxoTooltipModule, DxoBorderModule, DxoFontModule, DxoFormatModule, DxoShadowModule, DxTemplateModule];\n    }\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DxSparklineComponent, DxSparklineModule }; //# sourceMappingURL=devextreme-angular-ui-sparkline.js.map","map":null,"metadata":{},"sourceType":"module"}