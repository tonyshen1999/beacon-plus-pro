{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/renovation/ui/pager/pages/small.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"pageCount\", \"pageIndex\", \"pageIndexChange\", \"pagesCountText\"];\nimport { createVNode, createComponentVNode } from \"inferno\";\nimport { InfernoEffect, InfernoComponent } from \"@devextreme/runtime/inferno\";\nimport { Page } from \"./page\";\nimport { PAGER_INFO_CLASS } from \"../info\";\nimport { NumberBox } from \"../../editors/number_box\";\nimport messageLocalization from \"../../../../localization/message\";\nimport { calculateValuesFittedWidth } from \"../utils/calculate_values_fitted_width\";\nimport { getElementMinWidth } from \"../utils/get_element_width\";\nimport { InternalPagerProps } from \"../common/pager_props\";\nvar PAGER_INFO_TEXT_CLASS = \"\".concat(PAGER_INFO_CLASS, \"  dx-info-text\");\nvar PAGER_PAGE_INDEX_CLASS = \"dx-page-index\";\nvar LIGHT_PAGES_CLASS = \"dx-light-pages\";\nvar PAGER_PAGES_COUNT_CLASS = \"dx-pages-count\";\nexport var viewFunction = function viewFunction(_ref) {\n  var pageIndexRef = _ref.pageIndexRef,\n      pagesCountText = _ref.pagesCountText,\n      pageCount = _ref.props.pageCount,\n      selectLastPageIndex = _ref.selectLastPageIndex,\n      value = _ref.value,\n      valueChange = _ref.valueChange,\n      width = _ref.width;\n  return createVNode(1, \"div\", LIGHT_PAGES_CLASS, [createComponentVNode(2, NumberBox, {\n    className: PAGER_PAGE_INDEX_CLASS,\n    min: 1,\n    max: pageCount,\n    width: width,\n    value: value,\n    valueChange: valueChange\n  }), createVNode(1, \"span\", PAGER_INFO_TEXT_CLASS, pagesCountText, 0), createComponentVNode(2, Page, {\n    className: PAGER_PAGES_COUNT_CLASS,\n    selected: false,\n    index: pageCount - 1,\n    onClick: selectLastPageIndex\n  })], 4, null, null, pageIndexRef);\n};\nvar PagerSmallProps = {\n  get pageIndex() {\n    return InternalPagerProps.pageIndex;\n  },\n\n  get pageCount() {\n    return InternalPagerProps.pageCount;\n  }\n\n};\nimport { createRef as infernoCreateRef } from \"inferno\";\nexport var PagesSmall = /*#__PURE__*/(function () {\n  var PagesSmall = /*#__PURE__*/function (_InfernoComponent) {\n    _inherits(PagesSmall, _InfernoComponent);\n\n    var _super = _createSuper(PagesSmall);\n\n    function PagesSmall(props) {\n      var _this;\n\n      _classCallCheck(this, PagesSmall);\n\n      _this = _super.call(this, props);\n      _this.pageIndexRef = infernoCreateRef();\n      _this.state = {\n        minWidth: 10\n      };\n      _this.updateWidth = _this.updateWidth.bind(_assertThisInitialized(_this));\n      _this.selectLastPageIndex = _this.selectLastPageIndex.bind(_assertThisInitialized(_this));\n      _this.valueChange = _this.valueChange.bind(_assertThisInitialized(_this));\n      return _this;\n    }\n\n    _createClass(PagesSmall, [{\n      key: \"createEffects\",\n      value: function createEffects() {\n        return [new InfernoEffect(this.updateWidth, [this.state.minWidth])];\n      }\n    }, {\n      key: \"updateEffects\",\n      value: function updateEffects() {\n        var _this$_effects$;\n\n        null === (_this$_effects$ = this._effects[0]) || void 0 === _this$_effects$ ? void 0 : _this$_effects$.update([this.state.minWidth]);\n      }\n    }, {\n      key: \"updateWidth\",\n      value: function updateWidth() {\n        var _this$pageIndexRef$cu;\n\n        var el = null === (_this$pageIndexRef$cu = this.pageIndexRef.current) || void 0 === _this$pageIndexRef$cu ? void 0 : _this$pageIndexRef$cu.querySelector(\".\".concat(PAGER_PAGE_INDEX_CLASS));\n        this.setState(function (__state_argument) {\n          return {\n            minWidth: el && getElementMinWidth(el) || __state_argument.minWidth\n          };\n        });\n      }\n    }, {\n      key: \"value\",\n      get: function get() {\n        return this.props.pageIndex + 1;\n      }\n    }, {\n      key: \"width\",\n      get: function get() {\n        var pageCount = this.props.pageCount;\n        return calculateValuesFittedWidth(this.state.minWidth, [pageCount]);\n      }\n    }, {\n      key: \"pagesCountText\",\n      get: function get() {\n        var _this$props$pagesCoun;\n\n        return (null !== (_this$props$pagesCoun = this.props.pagesCountText) && void 0 !== _this$props$pagesCoun ? _this$props$pagesCoun : \"\") || messageLocalization.getFormatter(\"dxPager-pagesCountText\")();\n      }\n    }, {\n      key: \"selectLastPageIndex\",\n      value: function selectLastPageIndex() {\n        this.props.pageIndexChange(this.props.pageCount - 1);\n      }\n    }, {\n      key: \"valueChange\",\n      value: function valueChange(value) {\n        this.props.pageIndexChange(value - 1);\n      }\n    }, {\n      key: \"restAttributes\",\n      get: function get() {\n        var _this$props = this.props,\n            restProps = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n        return restProps;\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var props = this.props;\n        return viewFunction({\n          props: _extends({}, props),\n          pageIndexRef: this.pageIndexRef,\n          value: this.value,\n          width: this.width,\n          pagesCountText: this.pagesCountText,\n          selectLastPageIndex: this.selectLastPageIndex,\n          valueChange: this.valueChange,\n          restAttributes: this.restAttributes\n        });\n      }\n    }]);\n\n    return PagesSmall;\n  }(InfernoComponent);\n\n  PagesSmall.defaultProps = PagerSmallProps;\n  return PagesSmall;\n})();","map":null,"metadata":{},"sourceType":"module"}