{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/slide_out.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../core/renderer\";\nimport { getPublicElement } from \"../core/element\";\nimport { noop } from \"../core/utils/common\";\nimport { isDefined } from \"../core/utils/type\";\nimport registerComponent from \"../core/component_registrator\";\nimport { extend } from \"../core/utils/extend\";\nimport PlainEditStrategy from \"./collection/ui.collection_widget.edit.strategy.plain\";\nimport SlideOutView from \"./slide_out_view\";\nimport CollectionWidget from \"./collection/ui.collection_widget.edit\";\nimport List from \"./list_light\";\nimport { ChildDefaultTemplate } from \"../core/templates/child_default_template\";\nimport { EmptyTemplate } from \"../core/templates/empty_template\";\nimport DataConverterMixin from \"./shared/grouped_data_converter_mixin\";\nvar SLIDEOUT_CLASS = \"dx-slideout\";\nvar SLIDEOUT_ITEM_CONTAINER_CLASS = \"dx-slideout-item-container\";\nvar SLIDEOUT_MENU = \"dx-slideout-menu\";\nvar SLIDEOUT_ITEM_CLASS = \"dx-slideout-item\";\nvar SLIDEOUT_ITEM_DATA_KEY = \"dxSlideoutItemData\";\nvar SlideOut = CollectionWidget.inherit({\n  ctor: function ctor(element, options) {\n    this.callBase(element, options);\n\n    this._logDeprecatedComponentWarning(\"20.1\", \"dxDrawer\");\n  },\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      activeStateEnabled: false,\n      menuItemTemplate: \"menuItem\",\n      swipeEnabled: true,\n      menuVisible: false,\n      menuPosition: \"normal\",\n      menuGrouped: false,\n      menuGroupTemplate: \"menuGroup\",\n      onMenuItemRendered: null,\n      onMenuGroupRendered: null,\n      contentTemplate: \"content\",\n      selectionMode: \"single\",\n      selectedIndex: 0,\n      selectionRequired: true\n    });\n  },\n  _itemClass: function _itemClass() {\n    return SLIDEOUT_ITEM_CLASS;\n  },\n  _itemDataKey: function _itemDataKey() {\n    return SLIDEOUT_ITEM_DATA_KEY;\n  },\n  _itemContainer: function _itemContainer() {\n    return $(this._slideOutView.content());\n  },\n  _init: function _init() {\n    this._selectedItemContentRendered = false;\n    this.callBase();\n    this.$element().addClass(SLIDEOUT_CLASS);\n\n    this._initSlideOutView();\n  },\n  _initTemplates: function _initTemplates() {\n    this.callBase();\n\n    this._templateManager.addDefaultTemplates({\n      menuItem: new ChildDefaultTemplate(\"item\"),\n      menuGroup: new ChildDefaultTemplate(\"group\"),\n      content: new EmptyTemplate()\n    });\n  },\n  _initEditStrategy: function _initEditStrategy() {\n    if (this.option(\"menuGrouped\")) {\n      var strategy = PlainEditStrategy.inherit({\n        _getPlainItems: function _getPlainItems() {\n          return this.callBase().reduce(function (result, group) {\n            result.push.apply(result, group.items);\n            return result;\n          }, []);\n        }\n      });\n      this._editStrategy = new strategy(this);\n    } else {\n      this.callBase();\n    }\n  },\n  _initSlideOutView: function _initSlideOutView() {\n    this._slideOutView = this._createComponent(this.$element(), SlideOutView, {\n      integrationOptions: {},\n      menuVisible: this.option(\"menuVisible\"),\n      swipeEnabled: this.option(\"swipeEnabled\"),\n      menuPosition: this.option(\"menuPosition\"),\n      onOptionChanged: this._slideOutViewOptionChanged.bind(this)\n    });\n\n    this._itemContainer().addClass(SLIDEOUT_ITEM_CONTAINER_CLASS);\n  },\n  _slideOutViewOptionChanged: function _slideOutViewOptionChanged(args) {\n    if (\"menuVisible\" === args.name) {\n      this.option(args.name, args.value);\n    }\n  },\n  _initMarkup: function _initMarkup() {\n    this._renderList();\n\n    this._renderContentTemplate();\n\n    this.callBase();\n  },\n  _render: function _render() {\n    this._slideOutView._renderShield();\n\n    this.callBase();\n  },\n  _renderList: function _renderList() {\n    var $list = this._list && this._list.$element() || $(\"<div>\").addClass(SLIDEOUT_MENU).appendTo($(this._slideOutView.menuContent()));\n\n    this._renderItemClickAction();\n\n    this._list = this._createComponent($list, List, {\n      itemTemplateProperty: \"menuTemplate\",\n      selectionMode: this.option(\"selectionMode\"),\n      selectionRequired: this.option(\"selectionRequired\"),\n      indicateLoading: false,\n      onItemClick: this._listItemClickHandler.bind(this),\n      items: this.option(\"items\"),\n      dataSource: this._dataSource,\n      itemTemplate: this._getTemplateByOption(\"menuItemTemplate\"),\n      grouped: this.option(\"menuGrouped\"),\n      groupTemplate: this._getTemplateByOption(\"menuGroupTemplate\"),\n      onItemRendered: this.option(\"onMenuItemRendered\"),\n      onGroupRendered: this.option(\"onMenuGroupRendered\"),\n      onContentReady: this._updateSlideOutView.bind(this)\n    });\n\n    this._list.option(\"selectedIndex\", this.option(\"selectedIndex\"));\n  },\n  _getGroupedOption: function _getGroupedOption() {\n    return this.option(\"menuGrouped\");\n  },\n  _updateSlideOutView: function _updateSlideOutView() {\n    this._slideOutView._dimensionChanged();\n  },\n  _renderItemClickAction: function _renderItemClickAction() {\n    this._itemClickAction = this._createActionByOption(\"onItemClick\");\n  },\n  _listItemClickHandler: function _listItemClickHandler(e) {\n    var selectedIndex = this._list.$element().find(\".dx-list-item\").index(e.itemElement);\n\n    this.option(\"selectedIndex\", selectedIndex);\n\n    this._itemClickAction(e);\n  },\n  _renderContentTemplate: function _renderContentTemplate() {\n    if (isDefined(this._singleContent)) {\n      return;\n    }\n\n    var itemsLength = this._itemContainer().html().length;\n\n    this._getTemplateByOption(\"contentTemplate\").render({\n      container: getPublicElement(this._itemContainer())\n    });\n\n    this._singleContent = this._itemContainer().html().length !== itemsLength;\n  },\n  _itemClickHandler: noop,\n  _renderContentImpl: function _renderContentImpl() {\n    if (this._singleContent) {\n      return;\n    }\n\n    var items = this.option(\"items\");\n    var selectedIndex = this.option(\"selectedIndex\");\n\n    if (items.length && selectedIndex > -1) {\n      this._selectedItemContentRendered = true;\n\n      var selectedItem = this._list.getItemByIndex(selectedIndex);\n\n      this._renderItems([selectedItem]);\n    }\n  },\n  _renderItem: function _renderItem(index, item) {\n    this._itemContainer().find(\".\" + SLIDEOUT_ITEM_CLASS).remove();\n\n    this.callBase(index, item);\n  },\n  _selectedItemElement: function _selectedItemElement() {\n    return this._itemElements().eq(0);\n  },\n  _updateSelection: function _updateSelection() {\n    this._prepareContent();\n\n    this._renderContent();\n  },\n  _getListWidth: function _getListWidth() {\n    return this._slideOutView._getMenuWidth();\n  },\n  _changeMenuOption: function _changeMenuOption(name, value) {\n    this._list.option(name, value);\n\n    this._updateSlideOutView();\n  },\n  _cleanItemContainer: function _cleanItemContainer() {\n    if (this._singleContent) {\n      return;\n    }\n\n    this.callBase();\n  },\n  beginUpdate: function beginUpdate() {\n    this.callBase();\n    this._list && this._list.beginUpdate();\n  },\n  endUpdate: function endUpdate() {\n    this._list && this._list.endUpdate();\n    this.callBase();\n  },\n  _optionChanged: function _optionChanged(args) {\n    var name = args.name;\n    var value = args.value;\n\n    switch (name) {\n      case \"menuVisible\":\n      case \"swipeEnabled\":\n      case \"rtlEnabled\":\n      case \"menuPosition\":\n        this._slideOutView.option(name, value);\n\n        break;\n\n      case \"width\":\n        this.callBase(args);\n\n        this._updateSlideOutView();\n\n        break;\n\n      case \"menuItemTemplate\":\n        this._changeMenuOption(\"itemTemplate\", this._getTemplate(value));\n\n        break;\n\n      case \"items\":\n        this._changeMenuOption(\"items\", this.option(\"items\"));\n\n        if (!this._selectedItemContentRendered) {\n          this._updateSelection();\n        }\n\n        break;\n\n      case \"dataSource\":\n      case \"selectedIndex\":\n      case \"selectedItem\":\n        this._changeMenuOption(name, value);\n\n        this.callBase(args);\n        break;\n\n      case \"menuGrouped\":\n        this._initEditStrategy();\n\n        this._changeMenuOption(\"grouped\", value);\n\n        break;\n\n      case \"menuGroupTemplate\":\n        this._changeMenuOption(\"groupTemplate\", this._getTemplate(value));\n\n        break;\n\n      case \"onMenuItemRendered\":\n        this._changeMenuOption(\"onItemRendered\", value);\n\n        break;\n\n      case \"onMenuGroupRendered\":\n        this._changeMenuOption(\"onGroupRendered\", value);\n\n        break;\n\n      case \"onItemClick\":\n        this._renderItemClickAction();\n\n        break;\n\n      case \"contentTemplate\":\n        this._singleContent = null;\n\n        this._invalidate();\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  showMenu: function showMenu() {\n    return this._slideOutView.toggleMenuVisibility(true);\n  },\n  hideMenu: function hideMenu() {\n    return this._slideOutView.toggleMenuVisibility(false);\n  },\n  toggleMenuVisibility: function toggleMenuVisibility(showing) {\n    return this._slideOutView.toggleMenuVisibility(showing);\n  }\n}).include(DataConverterMixin);\nregisterComponent(\"dxSlideOut\", SlideOut);\nexport default SlideOut;","map":null,"metadata":{},"sourceType":"module"}