{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/tree_list/ui.tree_list.focus.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport core from \"./ui.tree_list.core\";\nimport { extend } from \"../../core/utils/extend\";\nimport { Deferred } from \"../../core/utils/deferred\";\nimport { focusModule } from \"../grid_core/ui.grid_core.focus\";\n\nfunction findIndex(items, callback) {\n  var result = -1;\n  items.forEach(function (node, index) {\n    if (callback(node)) {\n      result = index;\n    }\n  });\n  return result;\n}\n\ncore.registerModule(\"focus\", extend(true, {}, focusModule, {\n  extenders: {\n    controllers: {\n      data: {\n        changeRowExpand: function changeRowExpand(key) {\n          if (this.option(\"focusedRowEnabled\") && this.isRowExpanded(key)) {\n            if (this._isFocusedRowInside(key)) {\n              this.option(\"focusedRowKey\", key);\n            }\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _isFocusedRowInside: function _isFocusedRowInside(parentKey) {\n          var focusedRowKey = this.option(\"focusedRowKey\");\n          var rowIndex = this.getRowIndexByKey(focusedRowKey);\n          var focusedRow = rowIndex >= 0 && this.getVisibleRows()[rowIndex];\n          var parent = focusedRow && focusedRow.node.parent;\n\n          while (parent) {\n            if (parent.key === parentKey) {\n              return true;\n            }\n\n            parent = parent.parent;\n          }\n\n          return false;\n        },\n        getParentKey: function getParentKey(key) {\n          var dataSource = this._dataSource;\n          var node = this.getNodeByKey(key);\n          var d = new Deferred();\n\n          if (node) {\n            d.resolve(node.parent ? node.parent.key : void 0);\n          } else {\n            dataSource.load({\n              filter: [dataSource.getKeyExpr(), \"=\", key]\n            }).done(function (items) {\n              var parentData = items[0];\n\n              if (parentData) {\n                d.resolve(dataSource.parentKeyOf(parentData));\n              } else {\n                d.reject();\n              }\n            }).fail(d.reject);\n          }\n\n          return d.promise();\n        },\n        expandAscendants: function expandAscendants(key) {\n          var that = this;\n          var dataSource = that._dataSource;\n          var d = new Deferred();\n          that.getParentKey(key).done(function (parentKey) {\n            if (dataSource && void 0 !== parentKey && parentKey !== that.option(\"rootValue\")) {\n              dataSource._isNodesInitializing = true;\n              that.expandRow(parentKey);\n              dataSource._isNodesInitializing = false;\n              that.expandAscendants(parentKey).done(d.resolve).fail(d.reject);\n            } else {\n              d.resolve();\n            }\n          }).fail(d.reject);\n          return d.promise();\n        },\n        getPageIndexByKey: function getPageIndexByKey(key) {\n          var that = this;\n          var dataSource = that._dataSource;\n          var d = new Deferred();\n          that.expandAscendants(key).done(function () {\n            dataSource.load({\n              parentIds: []\n            }).done(function (nodes) {\n              var offset = findIndex(nodes, function (node) {\n                return that.keyOf(node.data) === key;\n              });\n              var pageIndex = -1;\n\n              if (offset >= 0) {\n                pageIndex = Math.floor(offset / that.pageSize());\n              }\n\n              d.resolve(pageIndex);\n            }).fail(d.reject);\n          }).fail(d.reject);\n          return d.promise();\n        }\n      }\n    }\n  }\n}));","map":null,"metadata":{},"sourceType":"module"}