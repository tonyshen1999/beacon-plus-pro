{"ast":null,"code":"import _toConsumableArray from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/**\r\n * DevExtreme (esm/ui/scheduler/appointmentPopup/form.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport $ from \"../../../core/renderer\";\nimport Form from \"../../form\";\nimport dateSerialization from \"../../../core/utils/date_serialization\";\nimport messageLocalization from \"../../../localization/message\";\nimport devices from \"../../../core/devices\";\nimport DataSource from \"../../../data/data_source\";\nimport timeZoneDataUtils from \"../timezones/utils.timezones_data\";\nimport { extend } from \"../../../core/utils/extend\";\nimport dateUtils from \"../../../core/utils/date\";\nimport { Semaphore } from \"../../../renovation/ui/scheduler/utils/semaphore/semaphore\";\nimport \"../recurrence_editor\";\nimport \"../../text_area\";\nimport \"../../tag_box\";\nimport \"../../switch\";\nimport \"../../select_box\";\nvar SCREEN_SIZE_OF_SINGLE_COLUMN = 600;\nexport var APPOINTMENT_FORM_GROUP_NAMES = {\n  Main: \"mainGroup\",\n  Recurrence: \"recurrenceGroup\"\n};\n\nvar getStartDateWithStartHour = function getStartDateWithStartHour(startDate, startDayHour) {\n  return new Date(new Date(startDate).setHours(startDayHour));\n};\n\nvar validateAppointmentFormDate = function validateAppointmentFormDate(editor, value, previousValue) {\n  var isCurrentDateCorrect = null === value || !!value;\n  var isPreviousDateCorrect = null === previousValue || !!previousValue;\n\n  if (!isCurrentDateCorrect && isPreviousDateCorrect) {\n    editor.option(\"value\", previousValue);\n  }\n};\n\nvar updateRecurrenceItemVisibility = function updateRecurrenceItemVisibility(recurrenceRuleExpr, value, form) {\n  var _form$getEditor;\n\n  form.itemOption(APPOINTMENT_FORM_GROUP_NAMES.Recurrence, \"visible\", value);\n  !value && form.updateData(recurrenceRuleExpr, \"\");\n  null === (_form$getEditor = form.getEditor(recurrenceRuleExpr)) || void 0 === _form$getEditor ? void 0 : _form$getEditor.changeValueByVisibility(value);\n};\n\nvar createDateBoxEditor = function createDateBoxEditor(dataField, colSpan, firstDayOfWeek, label, onValueChanged) {\n  return {\n    editorType: \"dxDateBox\",\n    dataField: dataField,\n    colSpan: colSpan,\n    label: {\n      text: messageLocalization.format(label)\n    },\n    validationRules: [{\n      type: \"required\"\n    }],\n    editorOptions: {\n      width: \"100%\",\n      calendarOptions: {\n        firstDayOfWeek: firstDayOfWeek\n      },\n      onValueChanged: onValueChanged,\n      useMaskBehavior: true\n    }\n  };\n};\n\nexport var AppointmentForm = /*#__PURE__*/function () {\n  function AppointmentForm(scheduler) {\n    _classCallCheck(this, AppointmentForm);\n\n    this.scheduler = scheduler;\n    this.form = null;\n    this.semaphore = new Semaphore();\n  }\n\n  _createClass(AppointmentForm, [{\n    key: \"dxForm\",\n    get: function get() {\n      return this.form;\n    }\n  }, {\n    key: \"readOnly\",\n    set: function set(value) {\n      this.form.option(\"readOnly\", value);\n      var recurrenceRuleExpr = this.scheduler.getDataAccessors().expr.recurrenceRuleExpr;\n      var recurrenceEditor = this.form.getEditor(recurrenceRuleExpr);\n      null === recurrenceEditor || void 0 === recurrenceEditor ? void 0 : recurrenceEditor.option(\"readOnly\", value);\n    }\n  }, {\n    key: \"formData\",\n    get: function get() {\n      return this.form.option(\"formData\");\n    },\n    set: function set(value) {\n      this.form.option(\"formData\", value);\n    }\n  }, {\n    key: \"create\",\n    value: function create(triggerResize, changeSize, formData) {\n      var allowTimeZoneEditing = this.scheduler.getEditingConfig().allowTimeZoneEditing;\n\n      var _this$scheduler$getDa = this.scheduler.getDataAccessors(),\n          expr = _this$scheduler$getDa.expr;\n\n      var recurrenceEditorVisibility = !!formData[expr.recurrenceRuleExpr];\n      var colSpan = recurrenceEditorVisibility ? 1 : 2;\n      var mainItems = [].concat(_toConsumableArray(this._createMainItems(expr, triggerResize, changeSize, allowTimeZoneEditing)), _toConsumableArray(this.scheduler.createResourceEditorModel()));\n      changeSize(recurrenceEditorVisibility);\n      var items = [{\n        itemType: \"group\",\n        name: APPOINTMENT_FORM_GROUP_NAMES.Main,\n        colCountByScreen: {\n          lg: 2,\n          xs: 1\n        },\n        colSpan: colSpan,\n        items: mainItems\n      }, {\n        itemType: \"group\",\n        name: APPOINTMENT_FORM_GROUP_NAMES.Recurrence,\n        visible: recurrenceEditorVisibility,\n        colSpan: colSpan,\n        items: this._createRecurrenceEditor(expr)\n      }];\n      var element = $(\"<div>\");\n      this.form = this.scheduler.createComponent(element, Form, {\n        items: items,\n        showValidationSummary: true,\n        scrollingEnabled: true,\n        colCount: \"auto\",\n        colCountByScreen: {\n          lg: 2,\n          xs: 1\n        },\n        formData: formData,\n        showColonAfterLabel: false,\n        labelLocation: \"top\",\n        screenByWidth: function screenByWidth(width) {\n          return width < SCREEN_SIZE_OF_SINGLE_COLUMN || \"desktop\" !== devices.current().deviceType ? \"xs\" : \"lg\";\n        }\n      });\n    }\n  }, {\n    key: \"_dateBoxValueChanged\",\n    value: function _dateBoxValueChanged(args, dateExpr, isNeedCorrect) {\n      validateAppointmentFormDate(args.component, args.value, args.previousValue);\n      var value = dateSerialization.deserializeDate(args.value);\n      var previousValue = dateSerialization.deserializeDate(args.previousValue);\n      var dateEditor = this.form.getEditor(dateExpr);\n      var dateValue = dateSerialization.deserializeDate(dateEditor.option(\"value\"));\n\n      if (this.semaphore.isFree() && dateValue && value && isNeedCorrect(dateValue, value)) {\n        var duration = previousValue ? dateValue.getTime() - previousValue.getTime() : 0;\n        dateEditor.option(\"value\", new Date(value.getTime() + duration));\n      }\n    }\n  }, {\n    key: \"_createTimezoneEditor\",\n    value: function _createTimezoneEditor(timeZoneExpr, secondTimeZoneExpr, visibleIndex, colSpan, isMainTimeZone) {\n      var _this = this;\n\n      var visible = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : false;\n      var noTzTitle = messageLocalization.format(\"dxScheduler-noTimezoneTitle\");\n      return {\n        dataField: timeZoneExpr,\n        editorType: \"dxSelectBox\",\n        visibleIndex: visibleIndex,\n        colSpan: colSpan,\n        label: {\n          text: \" \"\n        },\n        editorOptions: {\n          displayExpr: \"title\",\n          valueExpr: \"id\",\n          placeholder: noTzTitle,\n          searchEnabled: true,\n          onValueChanged: function onValueChanged(args) {\n            var form = _this.form;\n            var secondTimezoneEditor = form.getEditor(secondTimeZoneExpr);\n\n            if (isMainTimeZone) {\n              secondTimezoneEditor.option(\"value\", args.value);\n            }\n          }\n        },\n        visible: visible\n      };\n    }\n  }, {\n    key: \"_createDateBoxItems\",\n    value: function _createDateBoxItems(dataExprs, allowTimeZoneEditing) {\n      var _this2 = this;\n\n      var colSpan = allowTimeZoneEditing ? 2 : 1;\n      var firstDayOfWeek = this.scheduler.getFirstDayOfWeek();\n      return [createDateBoxEditor(dataExprs.startDateExpr, colSpan, firstDayOfWeek, \"dxScheduler-editorLabelStartDate\", function (args) {\n        _this2._dateBoxValueChanged(args, dataExprs.endDateExpr, function (endValue, startValue) {\n          return endValue < startValue;\n        });\n      }), this._createTimezoneEditor(dataExprs.startDateTimeZoneExpr, dataExprs.endDateTimeZoneExpr, 1, colSpan, true, allowTimeZoneEditing), createDateBoxEditor(dataExprs.endDateExpr, colSpan, firstDayOfWeek, \"dxScheduler-editorLabelEndDate\", function (args) {\n        _this2._dateBoxValueChanged(args, dataExprs.startDateExpr, function (startValue, endValue) {\n          return endValue < startValue;\n        });\n      }), this._createTimezoneEditor(dataExprs.endDateTimeZoneExpr, dataExprs.startDateTimeZoneExpr, 3, colSpan, false, allowTimeZoneEditing)];\n    }\n  }, {\n    key: \"_changeFormItemDateType\",\n    value: function _changeFormItemDateType(itemPath, isAllDay) {\n      var itemEditorOptions = this.form.itemOption(itemPath).editorOptions;\n      var type = isAllDay ? \"date\" : \"datetime\";\n\n      var newEditorOption = _extends({}, itemEditorOptions, {\n        type: type\n      });\n\n      this.form.itemOption(itemPath, \"editorOptions\", newEditorOption);\n    }\n  }, {\n    key: \"_createMainItems\",\n    value: function _createMainItems(dataExprs, triggerResize, changeSize, allowTimeZoneEditing) {\n      var _this3 = this;\n\n      return [{\n        dataField: dataExprs.textExpr,\n        editorType: \"dxTextBox\",\n        colSpan: 2,\n        label: {\n          text: messageLocalization.format(\"dxScheduler-editorLabelTitle\")\n        }\n      }, {\n        itemType: \"group\",\n        colSpan: 2,\n        colCountByScreen: {\n          lg: 2,\n          xs: 1\n        },\n        items: this._createDateBoxItems(dataExprs, allowTimeZoneEditing)\n      }, {\n        itemType: \"group\",\n        colCountByScreen: {\n          lg: 3,\n          xs: 3\n        },\n        colSpan: 2,\n        items: [{\n          dataField: dataExprs.allDayExpr,\n          cssClass: \"dx-appointment-form-switch\",\n          editorType: \"dxSwitch\",\n          label: {\n            text: messageLocalization.format(\"dxScheduler-allDay\"),\n            location: \"right\"\n          },\n          editorOptions: {\n            onValueChanged: function onValueChanged(args) {\n              var value = args.value;\n\n              var startDateEditor = _this3.form.getEditor(dataExprs.startDateExpr);\n\n              var endDateEditor = _this3.form.getEditor(dataExprs.endDateExpr);\n\n              var startDate = dateSerialization.deserializeDate(startDateEditor.option(\"value\"));\n\n              if (_this3.semaphore.isFree() && startDate) {\n                if (value) {\n                  var allDayStartDate = dateUtils.trimTime(startDate);\n                  startDateEditor.option(\"value\", new Date(allDayStartDate));\n                  endDateEditor.option(\"value\", new Date(allDayStartDate));\n                } else {\n                  var startDateWithStartHour = getStartDateWithStartHour(startDate, _this3.scheduler.getStartDayHour());\n\n                  var endDate = _this3.scheduler.getCalculatedEndDate(startDateWithStartHour);\n\n                  startDateEditor.option(\"value\", startDateWithStartHour);\n                  endDateEditor.option(\"value\", endDate);\n                }\n              }\n\n              var startDateItemPath = \"\".concat(APPOINTMENT_FORM_GROUP_NAMES.Main, \".\").concat(dataExprs.startDateExpr);\n              var endDateItemPath = \"\".concat(APPOINTMENT_FORM_GROUP_NAMES.Main, \".\").concat(dataExprs.endDateExpr);\n\n              _this3._changeFormItemDateType(startDateItemPath, value);\n\n              _this3._changeFormItemDateType(endDateItemPath, value);\n            }\n          }\n        }, {\n          editorType: \"dxSwitch\",\n          dataField: \"repeat\",\n          cssClass: \"dx-appointment-form-switch\",\n          name: \"visibilityChanged\",\n          label: {\n            text: messageLocalization.format(\"dxScheduler-editorLabelRecurrence\"),\n            location: \"right\"\n          },\n          editorOptions: {\n            onValueChanged: function onValueChanged(args) {\n              var form = _this3.form;\n              var colSpan = args.value ? 1 : 2;\n              form.itemOption(APPOINTMENT_FORM_GROUP_NAMES.Main, \"colSpan\", colSpan);\n              form.itemOption(APPOINTMENT_FORM_GROUP_NAMES.Recurrence, \"colSpan\", colSpan);\n              updateRecurrenceItemVisibility(dataExprs.recurrenceRuleExpr, args.value, form);\n              changeSize(args.value);\n              triggerResize();\n            }\n          }\n        }]\n      }, {\n        itemType: \"empty\",\n        colSpan: 2\n      }, {\n        dataField: dataExprs.descriptionExpr,\n        editorType: \"dxTextArea\",\n        colSpan: 2,\n        label: {\n          text: messageLocalization.format(\"dxScheduler-editorLabelDescription\")\n        }\n      }, {\n        itemType: \"empty\",\n        colSpan: 2\n      }];\n    }\n  }, {\n    key: \"_createRecurrenceEditor\",\n    value: function _createRecurrenceEditor(dataExprs) {\n      return [{\n        dataField: dataExprs.recurrenceRuleExpr,\n        editorType: \"dxRecurrenceEditor\",\n        editorOptions: {\n          firstDayOfWeek: this.scheduler.getFirstDayOfWeek()\n        },\n        label: {\n          text: \" \",\n          visible: false\n        }\n      }];\n    }\n  }, {\n    key: \"setEditorsType\",\n    value: function setEditorsType(allDay) {\n      var _this$scheduler$getDa2 = this.scheduler.getDataAccessors().expr,\n          startDateExpr = _this$scheduler$getDa2.startDateExpr,\n          endDateExpr = _this$scheduler$getDa2.endDateExpr;\n      var startDateItemPath = \"\".concat(APPOINTMENT_FORM_GROUP_NAMES.Main, \".\").concat(startDateExpr);\n      var endDateItemPath = \"\".concat(APPOINTMENT_FORM_GROUP_NAMES.Recurrence, \".\").concat(endDateExpr);\n      var startDateFormItem = this.form.itemOption(startDateItemPath);\n      var endDateFormItem = this.form.itemOption(endDateItemPath);\n\n      if (startDateFormItem && endDateFormItem) {\n        var startDateEditorOptions = startDateFormItem.editorOptions;\n        var endDateEditorOptions = endDateFormItem.editorOptions;\n        startDateEditorOptions.type = endDateEditorOptions.type = allDay ? \"date\" : \"datetime\";\n        this.form.itemOption(startDateItemPath, \"editorOptions\", startDateEditorOptions);\n        this.form.itemOption(endDateItemPath, \"editorOptions\", endDateEditorOptions);\n      }\n    }\n  }, {\n    key: \"updateTimeZoneEditorDataSource\",\n    value: function updateTimeZoneEditorDataSource(date, expression) {\n      var timeZoneDataSource = new DataSource({\n        store: timeZoneDataUtils.getDisplayedTimeZones(date),\n        paginate: true,\n        pageSize: 10\n      });\n      var options = {\n        dataSource: timeZoneDataSource\n      };\n      this.setEditorOptions(expression, \"Main\", options);\n    }\n  }, {\n    key: \"updateRecurrenceEditorStartDate\",\n    value: function updateRecurrenceEditorStartDate(date, expression) {\n      var options = {\n        startDate: date\n      };\n      this.setEditorOptions(expression, \"Recurrence\", options);\n    }\n  }, {\n    key: \"setEditorOptions\",\n    value: function setEditorOptions(name, groupName, options) {\n      var editorPath = \"\".concat(APPOINTMENT_FORM_GROUP_NAMES.groupName, \".\").concat(name);\n      var editor = this.form.itemOption(editorPath);\n      editor && this.form.itemOption(editorPath, \"editorOptions\", extend({}, editor.editorOptions, options));\n    }\n  }, {\n    key: \"updateFormData\",\n    value: function updateFormData(formData) {\n      this.semaphore.take();\n      var dataExprs = this.scheduler.getDataAccessors().expr;\n      var allDay = formData[dataExprs.allDayExpr];\n      var startDate = new Date(formData[dataExprs.startDateExpr]);\n      var endDate = new Date(formData[dataExprs.endDateExpr]);\n      this.updateTimeZoneEditorDataSource(startDate, dataExprs.startDateTimeZoneExpr);\n      this.updateTimeZoneEditorDataSource(endDate, dataExprs.endDateTimeZoneExpr);\n      this.updateRecurrenceEditorStartDate(startDate, dataExprs.recurrenceRuleExpr);\n      this.form.option(\"formData\", formData);\n      this.setEditorsType(allDay);\n      this.semaphore.release();\n    }\n  }]);\n\n  return AppointmentForm;\n}();","map":null,"metadata":{},"sourceType":"module"}