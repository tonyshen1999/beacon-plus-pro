{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/series/points/polar_point.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { extend } from \"../../../core/utils/extend\";\nvar _extend = extend;\nimport symbolPoint from \"./symbol_point\";\nimport barPoint from \"./bar_point\";\nimport piePoint from \"./pie_point\";\nimport { isDefined } from \"../../../core/utils/type\";\nimport { normalizeAngle, convertPolarToXY, getCosAndSin, convertXYToPolar } from \"../../core/utils\";\nvar _math = Math;\nvar _max = _math.max;\nimport consts from \"../../components/consts\";\nvar RADIAL_LABEL_INDENT = consts.radialLabelIndent;\nvar ERROR_BARS_ANGLE_OFFSET = 90;\nvar CANVAS_POSITION_START = \"canvas_position_start\";\nvar CANVAS_POSITION_END = \"canvas_position_end\";\nvar CANVAS_POSITION_DEFAULT = \"canvas_position_default\";\nexport var polarSymbolPoint = _extend({}, symbolPoint, {\n  _getLabelCoords: piePoint._getLabelCoords,\n  _getElementCoords: piePoint._getElementCoords,\n  _moveLabelOnCanvas: function _moveLabelOnCanvas(coord, visibleArea, labelBBox) {\n    var x = coord.x;\n    var y = coord.y;\n\n    if (visibleArea.minX > x) {\n      x = visibleArea.minX;\n    }\n\n    if (visibleArea.maxX < x + labelBBox.width) {\n      x = visibleArea.maxX - labelBBox.width;\n    }\n\n    if (visibleArea.minY > y) {\n      y = visibleArea.minY;\n    }\n\n    if (visibleArea.maxY < y + labelBBox.height) {\n      y = visibleArea.maxY - labelBBox.height;\n    }\n\n    return {\n      x: x,\n      y: y\n    };\n  },\n  _getLabelPosition: function _getLabelPosition() {\n    return \"outside\";\n  },\n  _getCoords: function _getCoords(argument, value) {\n    var axis = this.series.getValueAxis();\n    var startAngle = axis.getAngles()[0];\n\n    var angle = this._getArgTranslator().translate(argument);\n\n    var radius = this._getValTranslator().translate(value);\n\n    var coords = convertPolarToXY(axis.getCenter(), axis.getAngles()[0], angle, radius);\n    coords.angle = angle + startAngle - 90, coords.radius = radius;\n    return coords;\n  },\n  _translate: function _translate() {\n    var center = this.series.getValueAxis().getCenter();\n\n    var coord = this._getCoords(this.argument, this.value);\n\n    var translator = this._getValTranslator();\n\n    var maxRadius = translator.isInverted() ? translator.translate(CANVAS_POSITION_START) : translator.translate(CANVAS_POSITION_END);\n    var normalizedRadius = isDefined(coord.radius) && coord.radius >= 0 ? coord.radius : null;\n    this.vx = normalizeAngle(coord.angle);\n    this.vy = this.radiusOuter = this.radiusLabels = normalizedRadius;\n    this.radiusLabels += RADIAL_LABEL_INDENT;\n    this.radius = normalizedRadius;\n    this.middleAngle = -coord.angle;\n    this.angle = -coord.angle;\n    this.x = coord.x;\n    this.y = coord.y;\n    this.defaultX = this.centerX = center.x;\n    this.defaultY = this.centerY = center.y;\n\n    this._translateErrorBars();\n\n    this.inVisibleArea = this._checkRadiusForVisibleArea(normalizedRadius, maxRadius);\n  },\n  _checkRadiusForVisibleArea: function _checkRadiusForVisibleArea(radius, maxRadius) {\n    return isDefined(radius) && radius <= maxRadius;\n  },\n  _translateErrorBars: function _translateErrorBars() {\n    var errorBars = this._options.errorBars;\n\n    var translator = this._getValTranslator();\n\n    if (!errorBars) {\n      return;\n    }\n\n    isDefined(this.lowError) && (this._lowErrorCoord = this.centerY - translator.translate(this.lowError));\n    isDefined(this.highError) && (this._highErrorCoord = this.centerY - translator.translate(this.highError));\n    this._errorBarPos = this.centerX;\n    this._baseErrorBarPos = \"stdDeviation\" === errorBars.type ? this._lowErrorCoord + (this._highErrorCoord - this._lowErrorCoord) / 2 : this.centerY - this.radius;\n  },\n  _getTranslates: function _getTranslates(animationEnabled) {\n    return animationEnabled ? this.getDefaultCoords() : {\n      x: this.x,\n      y: this.y\n    };\n  },\n  getDefaultCoords: function getDefaultCoords() {\n    var cosSin = getCosAndSin(-this.angle);\n\n    var radius = this._getValTranslator().translate(CANVAS_POSITION_DEFAULT);\n\n    var x = this.defaultX + radius * cosSin.cos;\n    var y = this.defaultY + radius * cosSin.sin;\n    return {\n      x: x,\n      y: y\n    };\n  },\n  _addLabelAlignmentAndOffset: function _addLabelAlignmentAndOffset(label, coord) {\n    return coord;\n  },\n  _checkLabelPosition: function _checkLabelPosition(label, coord) {\n    var visibleArea = this._getVisibleArea();\n\n    var graphicBBox = this._getGraphicBBox();\n\n    if (this._isPointInVisibleArea(visibleArea, graphicBBox)) {\n      coord = this._moveLabelOnCanvas(coord, visibleArea, label.getBoundingRect());\n    }\n\n    return coord;\n  },\n  _getErrorBarSettings: function _getErrorBarSettings(errorBarOptions, animationEnabled) {\n    var settings = symbolPoint._getErrorBarSettings.call(this, errorBarOptions, animationEnabled);\n\n    settings.rotate = ERROR_BARS_ANGLE_OFFSET - this.angle;\n    settings.rotateX = this.centerX;\n    settings.rotateY = this.centerY;\n    return settings;\n  },\n  getCoords: function getCoords(min) {\n    return min ? this.getDefaultCoords() : {\n      x: this.x,\n      y: this.y\n    };\n  }\n});\nexport var polarBarPoint = _extend({}, barPoint, {\n  _translateErrorBars: polarSymbolPoint._translateErrorBars,\n  _getErrorBarSettings: polarSymbolPoint._getErrorBarSettings,\n  _moveLabelOnCanvas: polarSymbolPoint._moveLabelOnCanvas,\n  _getLabelCoords: piePoint._getLabelCoords,\n  _getElementCoords: piePoint._getElementCoords,\n  _getLabelConnector: piePoint._getLabelConnector,\n  getTooltipParams: piePoint.getTooltipParams,\n  _getLabelPosition: piePoint._getLabelPosition,\n  _getCoords: polarSymbolPoint._getCoords,\n  _translate: function _translate() {\n    var translator = this._getValTranslator();\n\n    var businessRange = translator.getBusinessRange();\n    var maxRadius = translator.isInverted() ? translator.translate(CANVAS_POSITION_START) : translator.translate(CANVAS_POSITION_END);\n    this.radiusInner = translator.translate(this.minValue);\n\n    polarSymbolPoint._translate.call(this);\n\n    if (null === this.radiusInner) {\n      this.radiusInner = this.radius = maxRadius;\n    } else if (null === this.radius) {\n      this.radius = this.value >= businessRange.minVisible ? maxRadius : 0;\n    } else if (this.radius > maxRadius) {\n      this.radius = maxRadius;\n    }\n\n    this.radiusOuter = this.radiusLabels = _max(this.radiusInner, this.radius);\n    this.radiusLabels += RADIAL_LABEL_INDENT;\n    this.radiusInner = this.defaultRadius = _math.min(this.radiusInner, this.radius);\n    this.middleAngle = this.angle = -normalizeAngle(this.middleAngleCorrection - this.angle);\n  },\n  _checkRadiusForVisibleArea: function _checkRadiusForVisibleArea(radius) {\n    return isDefined(radius) || this._getValTranslator().translate(this.minValue) > 0;\n  },\n  _getErrorBarBaseEdgeLength: function _getErrorBarBaseEdgeLength() {\n    var coord = this.getMarkerCoords();\n    return _math.PI * coord.outerRadius * _math.abs(coord.startAngle - coord.endAngle) / 180;\n  },\n  getMarkerCoords: function getMarkerCoords() {\n    return {\n      x: this.centerX,\n      y: this.centerY,\n      outerRadius: this.radiusOuter,\n      innerRadius: this.defaultRadius,\n      startAngle: this.middleAngle - this.interval / 2,\n      endAngle: this.middleAngle + this.interval / 2\n    };\n  },\n  _drawMarker: function _drawMarker(renderer, group, animationEnabled) {\n    var styles = this._getStyle();\n\n    var coords = this.getMarkerCoords();\n    var innerRadius = coords.innerRadius;\n    var outerRadius = coords.outerRadius;\n\n    var start = this._getCoords(this.argument, CANVAS_POSITION_DEFAULT);\n\n    var x = coords.x;\n    var y = coords.y;\n\n    if (animationEnabled) {\n      innerRadius = 0;\n      outerRadius = 0;\n      x = start.x;\n      y = start.y;\n    }\n\n    this.graphic = renderer.arc(x, y, innerRadius, outerRadius, coords.startAngle, coords.endAngle).attr(styles).data({\n      \"chart-data-point\": this\n    }).append(group);\n  },\n  _checkLabelPosition: function _checkLabelPosition(label, coord) {\n    var visibleArea = this._getVisibleArea();\n\n    var angleFunctions = getCosAndSin(this.middleAngle);\n    var x = this.centerX + this.defaultRadius * angleFunctions.cos;\n    var y = this.centerY - this.defaultRadius * angleFunctions.sin;\n\n    if (x > visibleArea.minX && x < visibleArea.maxX && y > visibleArea.minY && y < visibleArea.maxY) {\n      coord = this._moveLabelOnCanvas(coord, visibleArea, label.getBoundingRect());\n    }\n\n    return coord;\n  },\n  _addLabelAlignmentAndOffset: function _addLabelAlignmentAndOffset(label, coord) {\n    return coord;\n  },\n  correctCoordinates: function correctCoordinates(correctOptions) {\n    this.middleAngleCorrection = correctOptions.offset;\n    this.interval = correctOptions.width;\n  },\n  coordsIn: function coordsIn(x, y) {\n    var val = convertXYToPolar(this.series.getValueAxis().getCenter(), x, y);\n    var coords = this.getMarkerCoords();\n    var isBetweenAngles = coords.startAngle < coords.endAngle ? -val.phi >= coords.startAngle && -val.phi <= coords.endAngle : -val.phi <= coords.startAngle && -val.phi >= coords.endAngle;\n    return val.r >= coords.innerRadius && val.r <= coords.outerRadius && isBetweenAngles;\n  }\n});","map":null,"metadata":{},"sourceType":"module"}