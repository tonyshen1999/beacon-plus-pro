{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/ui/diagram/ui.diagram.properties_panel.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getHeight, getOuterHeight } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport ScrollView from \"../scroll_view\";\nimport TabPanel from \"../tab_panel\";\nimport DiagramFloatingPanel from \"./ui.diagram.floating_panel\";\nimport DiagramCommandsManager from \"./diagram.commands_manager\";\nvar DIAGRAM_PROPERTIES_POPUP_WIDTH = 420;\nvar DIAGRAM_PROPERTIES_POPUP_HEIGHT = 340;\nvar DIAGRAM_PROPERTIES_POPUP_CLASS = \"dx-diagram-properties-popup\";\nvar DIAGRAM_PROPERTIES_POPUP_NOTABS_CLASS = \"dx-diagram-properties-popup-notabs\";\nvar DIAGRAM_PROPERTIES_PANEL_CLASS = \"dx-diagram-properties-panel\";\nvar DIAGRAM_PROPERTIES_PANEL_GROUP_TITLE_CLASS = \"dx-diagram-properties-panel-group-title\";\nvar DIAGRAM_PROPERTIES_PANEL_GROUP_TOOLBAR_CLASS = \"dx-diagram-properties-panel-group-toolbar\";\n\nvar DiagramPropertiesPanel = /*#__PURE__*/function (_DiagramFloatingPanel) {\n  _inherits(DiagramPropertiesPanel, _DiagramFloatingPanel);\n\n  var _super = _createSuper(DiagramPropertiesPanel);\n\n  function DiagramPropertiesPanel() {\n    _classCallCheck(this, DiagramPropertiesPanel);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DiagramPropertiesPanel, [{\n    key: \"_init\",\n    value: function _init() {\n      _get(_getPrototypeOf(DiagramPropertiesPanel.prototype), \"_init\", this).call(this);\n\n      this._commandTabs = DiagramCommandsManager.getPropertyPanelCommandTabs(this.option(\"propertyTabs\"));\n\n      this._createOnCreateToolbar();\n\n      this._createOnSelectedGroupChanged();\n    }\n  }, {\n    key: \"_initMarkup\",\n    value: function _initMarkup() {\n      this._toolbars = [];\n      this._selectedToolbar = void 0;\n\n      _get(_getPrototypeOf(DiagramPropertiesPanel.prototype), \"_initMarkup\", this).call(this);\n    }\n  }, {\n    key: \"_getPopupClass\",\n    value: function _getPopupClass() {\n      var className = DIAGRAM_PROPERTIES_POPUP_CLASS;\n\n      if (!this._hasTabPanel()) {\n        className += \" \" + DIAGRAM_PROPERTIES_POPUP_NOTABS_CLASS;\n      }\n\n      return className;\n    }\n  }, {\n    key: \"_getPopupWidth\",\n    value: function _getPopupWidth() {\n      return this.isMobileView() ? \"100%\" : DIAGRAM_PROPERTIES_POPUP_WIDTH;\n    }\n  }, {\n    key: \"_getPopupHeight\",\n    value: function _getPopupHeight() {\n      return DIAGRAM_PROPERTIES_POPUP_HEIGHT;\n    }\n  }, {\n    key: \"_getPopupPosition\",\n    value: function _getPopupPosition() {\n      var $parent = this.option(\"offsetParent\");\n\n      if (this.isMobileView()) {\n        return {\n          my: \"left bottom\",\n          at: \"left bottom\",\n          of: $parent\n        };\n      }\n\n      return {\n        my: \"right bottom\",\n        at: \"right bottom\",\n        of: $parent,\n        offset: \"-\" + this.option(\"offsetX\") + \" -\" + this.option(\"offsetY\")\n      };\n    }\n  }, {\n    key: \"_getPopupAnimation\",\n    value: function _getPopupAnimation() {\n      var $parent = this.option(\"offsetParent\");\n\n      if (this.isMobileView()) {\n        return {\n          hide: this._getPopupSlideAnimationObject({\n            direction: \"bottom\",\n            from: {\n              position: {\n                my: \"left bottom\",\n                at: \"left bottom\",\n                of: $parent\n              }\n            },\n            to: {\n              position: {\n                my: \"left top\",\n                at: \"left bottom\",\n                of: $parent\n              }\n            }\n          }),\n          show: this._getPopupSlideAnimationObject({\n            direction: \"top\",\n            from: {\n              position: {\n                my: \"left top\",\n                at: \"left bottom\",\n                of: $parent\n              }\n            },\n            to: {\n              position: {\n                my: \"left bottom\",\n                at: \"left bottom\",\n                of: $parent\n              }\n            }\n          })\n        };\n      }\n\n      return _get(_getPrototypeOf(DiagramPropertiesPanel.prototype), \"_getPopupAnimation\", this).call(this);\n    }\n  }, {\n    key: \"_getPopupOptions\",\n    value: function _getPopupOptions() {\n      return extend(_get(_getPrototypeOf(DiagramPropertiesPanel.prototype), \"_getPopupOptions\", this).call(this), {\n        showTitle: this.isMobileView(),\n        showCloseButton: this.isMobileView()\n      });\n    }\n  }, {\n    key: \"_renderPopupContent\",\n    value: function _renderPopupContent($parent) {\n      if (!this._commandTabs.length) {\n        return;\n      }\n\n      var $panel = $(\"<div>\").addClass(DIAGRAM_PROPERTIES_PANEL_CLASS).appendTo($parent);\n\n      if (this._hasTabPanel()) {\n        this._renderTabPanel($panel);\n      } else {\n        this._renderTabContent($panel, this._commandTabs[0], 0, true);\n      }\n    }\n  }, {\n    key: \"_hasTabPanel\",\n    value: function _hasTabPanel() {\n      return this._commandTabs.length > 1;\n    }\n  }, {\n    key: \"_renderTabPanel\",\n    value: function _renderTabPanel($parent) {\n      var _this = this;\n\n      var $tabPanel = $(\"<div>\").appendTo($parent);\n      this._tabPanel = this._createComponent($tabPanel, TabPanel, {\n        focusStateEnabled: false,\n        dataSource: this._commandTabs,\n        itemTemplate: function itemTemplate(data, index, $element) {\n          _this._renderTabContent($element, data, index);\n        },\n        onSelectionChanged: function onSelectionChanged(e) {\n          _this._onSelectedGroupChangedAction();\n\n          _this._onPointerUpAction();\n        },\n        onContentReady: function onContentReady(e) {\n          _this._popup.option(\"height\", getHeight(e.component.$element()) + _this._getVerticalPaddingsAndBorders());\n\n          if (_this._firstScrollView) {\n            _this._scrollViewHeight = getOuterHeight(_this._firstScrollView.$element());\n\n            _this._firstScrollView.option(\"height\", _this._scrollViewHeight);\n          }\n        }\n      });\n    }\n  }, {\n    key: \"_renderTabContent\",\n    value: function _renderTabContent($parent, tab, index, isSingleTab) {\n      var $scrollViewWrapper = $(\"<div>\").appendTo($parent);\n\n      var scrollView = this._createComponent($scrollViewWrapper, ScrollView, {\n        height: this._scrollViewHeight\n      });\n\n      this._renderTabInnerContent(scrollView.content(), tab, index);\n\n      if (isSingleTab) {\n        this._popup.option(\"height\", getHeight(scrollView.$element()) + this._getVerticalPaddingsAndBorders());\n      } else {\n        this._firstScrollView = this._firstScrollView || scrollView;\n      }\n    }\n  }, {\n    key: \"_renderTabInnerContent\",\n    value: function _renderTabInnerContent($parent, group, index) {\n      var _this2 = this;\n\n      if (group.groups) {\n        group.groups.forEach(function (sg, si) {\n          _this2._renderTabGroupContent($parent, index, sg.title, sg.commands);\n        });\n      } else if (group.commands) {\n        this._renderTabGroupContent($parent, index, void 0, group.commands);\n      }\n    }\n  }, {\n    key: \"_renderTabGroupContent\",\n    value: function _renderTabGroupContent($parent, index, title, commands) {\n      if (title) {\n        $(\"<div>\").addClass(DIAGRAM_PROPERTIES_PANEL_GROUP_TITLE_CLASS).appendTo($parent).text(title);\n      }\n\n      var $toolbar = $(\"<div>\").addClass(DIAGRAM_PROPERTIES_PANEL_GROUP_TOOLBAR_CLASS).appendTo($parent);\n      var args = {\n        $parent: $toolbar,\n        commands: commands\n      };\n\n      this._onCreateToolbarAction(args);\n\n      if (!this._toolbars[index]) {\n        this._toolbars[index] = [];\n      }\n\n      this._toolbars[index].push(args.toolbar);\n\n      this._selectedToolbar = args.toolbar;\n    }\n  }, {\n    key: \"getActiveToolbars\",\n    value: function getActiveToolbars() {\n      var index = this._tabPanel ? this._tabPanel.option(\"selectedIndex\") : 0;\n      return this._toolbars[index];\n    }\n  }, {\n    key: \"_createOnCreateToolbar\",\n    value: function _createOnCreateToolbar() {\n      this._onCreateToolbarAction = this._createActionByOption(\"onCreateToolbar\");\n    }\n  }, {\n    key: \"_createOnSelectedGroupChanged\",\n    value: function _createOnSelectedGroupChanged() {\n      this._onSelectedGroupChangedAction = this._createActionByOption(\"onSelectedGroupChanged\");\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function _optionChanged(args) {\n      switch (args.name) {\n        case \"onCreateToolbar\":\n          this._createOnCreateToolbar();\n\n          break;\n\n        case \"onSelectedGroupChanged\":\n          this._createOnSelectedGroupChanged();\n\n          break;\n\n        case \"propertyTabs\":\n          this._invalidate();\n\n          break;\n\n        default:\n          _get(_getPrototypeOf(DiagramPropertiesPanel.prototype), \"_optionChanged\", this).call(this, args);\n\n      }\n    }\n  }]);\n\n  return DiagramPropertiesPanel;\n}(DiagramFloatingPanel);\n\nexport default DiagramPropertiesPanel;","map":null,"metadata":{},"sourceType":"module"}