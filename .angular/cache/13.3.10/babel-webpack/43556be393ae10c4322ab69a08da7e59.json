{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _get from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\n\n/**\r\n * DevExtreme (esm/ui/html_editor/modules/mentions.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../../core/renderer\";\nimport Quill from \"devextreme-quill\";\nimport { compileGetter } from \"../../../core/utils/data\";\nimport { isString } from \"../../../core/utils/type\";\nimport { extend } from \"../../../core/utils/extend\";\nimport { getPublicElement } from \"../../../core/element\";\nimport eventsEngine from \"../../../events/core/events_engine\";\nimport BaseModule from \"./base\";\nimport PopupModule from \"./popup\";\nimport Mention from \"../formats/mention\";\nvar MentionModule = BaseModule;\n\nif (Quill) {\n  var USER_ACTION = \"user\";\n  var DEFAULT_MARKER = \"@\";\n  var KEYS = {\n    ARROW_UP: \"upArrow\",\n    ARROW_DOWN: \"downArrow\",\n    ARROW_LEFT: \"leftArrow\",\n    ARROW_RIGHT: \"rightArrow\",\n    ENTER: \"enter\",\n    ESCAPE: \"escape\",\n    SPACE: \"space\",\n    PAGE_UP: \"pageUp\",\n    PAGE_DOWN: \"pageDown\",\n    END: \"end\",\n    HOME: \"home\"\n  };\n  var NAVIGATION_KEYS = [KEYS.ARROW_LEFT, KEYS.ARROW_RIGHT, KEYS.PAGE_UP, KEYS.PAGE_DOWN, KEYS.END, KEYS.HOME];\n  var ALLOWED_PREFIX_CHARS = [\" \", \"\\n\"];\n  var DISABLED_STATE_CLASS = \"dx-state-disabled\";\n  Quill.register({\n    \"formats/mention\": Mention\n  }, true);\n\n  MentionModule = /*#__PURE__*/function (_PopupModule) {\n    _inherits(MentionModule, _PopupModule);\n\n    var _super = _createSuper(MentionModule);\n\n    function MentionModule(quill, options) {\n      var _this;\n\n      _classCallCheck(this, MentionModule);\n\n      _this = _super.call(this, quill, options);\n      _this._mentions = {};\n      options.mentions.forEach(function (item) {\n        var marker = item.marker;\n\n        if (!marker) {\n          item.marker = marker = DEFAULT_MARKER;\n        }\n\n        var template = item.template;\n\n        if (template) {\n          var preparedTemplate = _this.editorInstance._getTemplate(template);\n\n          preparedTemplate && Mention.addTemplate(marker, preparedTemplate);\n        }\n\n        _this._mentions[marker] = extend({}, _this._getDefaultOptions(), item);\n      });\n\n      _this._attachKeyboardHandlers();\n\n      _this.addCleanCallback(_this.clean.bind(_assertThisInitialized(_this)));\n\n      _this.quill.on(\"text-change\", _this.onTextChange.bind(_assertThisInitialized(_this)));\n\n      return _this;\n    }\n\n    _createClass(MentionModule, [{\n      key: \"_getDefaultOptions\",\n      value: function _getDefaultOptions() {\n        var baseConfig = _get(_getPrototypeOf(MentionModule.prototype), \"_getDefaultOptions\", this).call(this);\n\n        return extend(baseConfig, {\n          itemTemplate: \"item\",\n          valueExpr: \"this\",\n          displayExpr: \"this\",\n          template: null,\n          searchExpr: null,\n          searchTimeout: 500,\n          minSearchLength: 0\n        });\n      }\n    }, {\n      key: \"_attachKeyboardHandlers\",\n      value: function _attachKeyboardHandlers() {\n        this.quill.keyboard.addBinding({\n          key: KEYS.ARROW_UP\n        }, this._moveToItem.bind(this, \"prev\"));\n        this.quill.keyboard.addBinding({\n          key: KEYS.ARROW_DOWN\n        }, this._moveToItem.bind(this, \"next\"));\n        this.quill.keyboard.addBinding({\n          key: [KEYS.ENTER, KEYS.SPACE]\n        }, this._selectItemHandler.bind(this));\n        var enterBindings = this.quill.keyboard.bindings[KEYS.ENTER];\n        enterBindings.unshift(enterBindings.pop());\n        this.quill.keyboard.addBinding({\n          key: KEYS.ESCAPE\n        }, this._escapeKeyHandler.bind(this));\n        this.quill.keyboard.addBinding({\n          key: [KEYS.ARROW_LEFT, KEYS.ARROW_RIGHT],\n          shiftKey: true\n        }, this._ignoreKeyHandler.bind(this));\n        this.quill.keyboard.addBinding({\n          key: NAVIGATION_KEYS\n        }, this._ignoreKeyHandler.bind(this));\n      }\n    }, {\n      key: \"_moveToItem\",\n      value: function _moveToItem(direction) {\n        var dataSource = this._list.getDataSource();\n\n        if (this._isMentionActive && !dataSource.isLoading()) {\n          var $focusedItem = $(this._list.option(\"focusedElement\"));\n          var defaultItemPosition = \"next\" === direction ? \"first\" : \"last\";\n          var $nextItem = $focusedItem[direction]();\n          $nextItem = $nextItem.length ? $nextItem : this._activeListItems[defaultItemPosition]();\n\n          this._list.option(\"focusedElement\", getPublicElement($nextItem));\n\n          this._list.scrollToItem($nextItem);\n        }\n\n        return !this._isMentionActive;\n      }\n    }, {\n      key: \"_ignoreKeyHandler\",\n      value: function _ignoreKeyHandler() {\n        return !this._isMentionActive;\n      }\n    }, {\n      key: \"_fitIntoRange\",\n      value: function _fitIntoRange(value, start, end) {\n        if (value > end) {\n          return start;\n        }\n\n        if (value < start) {\n          return end;\n        }\n\n        return value;\n      }\n    }, {\n      key: \"_selectItemHandler\",\n      value: function _selectItemHandler() {\n        if (this._isMentionActive) {\n          this._list.selectItem(this._list.option(\"focusedElement\"));\n        }\n\n        return !this._isMentionActive;\n      }\n    }, {\n      key: \"_escapeKeyHandler\",\n      value: function _escapeKeyHandler() {\n        if (this._isMentionActive) {\n          this._popup.hide();\n        }\n\n        return !this._isMentionActive;\n      }\n    }, {\n      key: \"renderList\",\n      value: function renderList($container, options) {\n        this.compileGetters(this.options);\n\n        _get(_getPrototypeOf(MentionModule.prototype), \"renderList\", this).call(this, $container, options);\n      }\n    }, {\n      key: \"compileGetters\",\n      value: function compileGetters(_ref) {\n        var displayExpr = _ref.displayExpr,\n            valueExpr = _ref.valueExpr;\n        this._valueGetter = compileGetter(displayExpr);\n        this._idGetter = compileGetter(valueExpr);\n      }\n    }, {\n      key: \"_getListConfig\",\n      value: function _getListConfig(options) {\n        var _this2 = this;\n\n        var baseConfig = _get(_getPrototypeOf(MentionModule.prototype), \"_getListConfig\", this).call(this, options);\n\n        return extend(baseConfig, {\n          itemTemplate: this.options.itemTemplate,\n          onContentReady: function onContentReady() {\n            if (_this2._hasSearch) {\n              _this2._popup.repaint();\n\n              _this2._focusFirstElement();\n\n              _this2._hasSearch = false;\n            }\n          }\n        });\n      }\n    }, {\n      key: \"insertEmbedContent\",\n      value: function insertEmbedContent() {\n        var markerLength = this._activeMentionConfig.marker.length;\n        var textLength = markerLength + this._searchValue.length;\n        var caretPosition = this.getPosition();\n\n        var selectedItem = this._list.option(\"selectedItem\");\n\n        var value = {\n          value: this._valueGetter(selectedItem),\n          id: this._idGetter(selectedItem),\n          marker: this._activeMentionConfig.marker\n        };\n        var Delta = Quill.import(\"delta\");\n        var startIndex = Math.max(0, caretPosition - markerLength);\n        var retainCorrection = \"\\n\" === this._getCharByIndex(startIndex) ? 1 : 0;\n        startIndex += retainCorrection;\n        var newDelta = new Delta().retain(startIndex).delete(textLength).insert({\n          mention: value\n        }).insert(\" \");\n        this.quill.updateContents(newDelta);\n        this.quill.setSelection(startIndex + 2);\n      }\n    }, {\n      key: \"_getLastInsertOperation\",\n      value: function _getLastInsertOperation(ops) {\n        var lastOperation = ops[ops.length - 1];\n        var isLastOperationInsert = (\"insert\" in lastOperation);\n\n        if (isLastOperationInsert) {\n          return lastOperation;\n        }\n\n        var isLastOperationDelete = (\"delete\" in lastOperation);\n\n        if (isLastOperationDelete && ops.length >= 2) {\n          var penultOperation = ops[ops.length - 2];\n          var isPenultOperationInsert = (\"insert\" in penultOperation);\n          var isSelectionReplacing = isLastOperationDelete && isPenultOperationInsert;\n\n          if (isSelectionReplacing) {\n            return penultOperation;\n          }\n        }\n\n        return null;\n      }\n    }, {\n      key: \"onTextChange\",\n      value: function onTextChange(newDelta, oldDelta, source) {\n        if (source === USER_ACTION) {\n          var lastOperation = newDelta.ops[newDelta.ops.length - 1];\n\n          if (this._isMentionActive && this._isPopupVisible) {\n            this._processSearchValue(lastOperation) && this._filterList(this._searchValue);\n          } else {\n            var ops = newDelta.ops;\n\n            var lastInsertOperation = this._getLastInsertOperation(ops);\n\n            if (lastInsertOperation) {\n              this.checkMentionRequest(lastInsertOperation, ops);\n            }\n          }\n        }\n      }\n    }, {\n      key: \"_isPopupVisible\",\n      get: function get() {\n        var _this$_popup;\n\n        return null === (_this$_popup = this._popup) || void 0 === _this$_popup ? void 0 : _this$_popup.option(\"visible\");\n      }\n    }, {\n      key: \"_processSearchValue\",\n      value: function _processSearchValue(operation) {\n        var isInsertOperation = (\"insert\" in operation);\n\n        if (isInsertOperation) {\n          this._searchValue += operation.insert;\n        } else if (!this._searchValue.length || operation.delete > 1) {\n          this._popup.hide();\n\n          return false;\n        } else {\n          this._searchValue = this._searchValue.slice(0, -1);\n        }\n\n        return true;\n      }\n    }, {\n      key: \"checkMentionRequest\",\n      value: function checkMentionRequest(_ref2, ops) {\n        var insert = _ref2.insert;\n        var caret = this.quill.getSelection();\n\n        if (!insert || !isString(insert) || !caret || this._isMarkerPartOfText(ops[0].retain)) {\n          return;\n        }\n\n        this._activeMentionConfig = this._mentions[insert];\n\n        if (this._activeMentionConfig) {\n          this._updateList(this._activeMentionConfig);\n\n          this.savePosition(caret.index);\n\n          this._popup.option(\"position\", this._popupPosition);\n\n          this._searchValue = \"\";\n\n          this._popup.show();\n        }\n      }\n    }, {\n      key: \"_isMarkerPartOfText\",\n      value: function _isMarkerPartOfText(retain) {\n        if (!retain || -1 !== ALLOWED_PREFIX_CHARS.indexOf(this._getCharByIndex(retain - 1))) {\n          return false;\n        }\n\n        return true;\n      }\n    }, {\n      key: \"_getCharByIndex\",\n      value: function _getCharByIndex(index) {\n        return this.quill.getContents(index, 1).ops[0].insert;\n      }\n    }, {\n      key: \"_updateList\",\n      value: function _updateList(_ref3) {\n        var dataSource = _ref3.dataSource,\n            displayExpr = _ref3.displayExpr,\n            valueExpr = _ref3.valueExpr,\n            itemTemplate = _ref3.itemTemplate,\n            searchExpr = _ref3.searchExpr;\n        this.compileGetters({\n          displayExpr: displayExpr,\n          valueExpr: valueExpr\n        });\n\n        this._list.unselectAll();\n\n        this._list.option({\n          dataSource: dataSource,\n          displayExpr: displayExpr,\n          itemTemplate: itemTemplate,\n          searchExpr: searchExpr\n        });\n      }\n    }, {\n      key: \"_filterList\",\n      value: function _filterList(searchValue) {\n        var _this3 = this;\n\n        if (!this._isMinSearchLengthExceeded(searchValue)) {\n          this._resetFilter();\n\n          return;\n        }\n\n        var searchTimeout = this._activeMentionConfig.searchTimeout;\n\n        if (searchTimeout) {\n          clearTimeout(this._searchTimer);\n          this._searchTimer = setTimeout(function () {\n            _this3._search(searchValue);\n          }, searchTimeout);\n        } else {\n          this._search(searchValue);\n        }\n      }\n    }, {\n      key: \"_isMinSearchLengthExceeded\",\n      value: function _isMinSearchLengthExceeded(searchValue) {\n        return searchValue.length >= this._activeMentionConfig.minSearchLength;\n      }\n    }, {\n      key: \"_resetFilter\",\n      value: function _resetFilter() {\n        clearTimeout(this._searchTimer);\n\n        this._search(null);\n      }\n    }, {\n      key: \"_search\",\n      value: function _search(searchValue) {\n        this._hasSearch = true;\n\n        this._list.option(\"searchValue\", searchValue);\n      }\n    }, {\n      key: \"_focusFirstElement\",\n      value: function _focusFirstElement() {\n        if (!this._list) {\n          return;\n        }\n\n        var $firstItem = this._activeListItems.first();\n\n        this._list.option(\"focusedElement\", getPublicElement($firstItem));\n\n        this._list.scrollToItem($firstItem);\n      }\n    }, {\n      key: \"_popupPosition\",\n      get: function get() {\n        var position = this.getPosition();\n\n        var _this$quill$getBounds = this.quill.getBounds(position ? position - 1 : position),\n            mentionLeft = _this$quill$getBounds.left,\n            mentionTop = _this$quill$getBounds.top,\n            mentionHeight = _this$quill$getBounds.height;\n\n        var _$$offset = $(this.quill.root).offset(),\n            leftOffset = _$$offset.left,\n            topOffset = _$$offset.top;\n\n        var positionEvent = eventsEngine.Event(\"positionEvent\", {\n          pageX: leftOffset + mentionLeft,\n          pageY: topOffset + mentionTop\n        });\n        return {\n          of: positionEvent,\n          offset: {\n            v: mentionHeight\n          },\n          my: \"top left\",\n          at: \"top left\",\n          collision: {\n            y: \"flip\",\n            x: \"flipfit\"\n          }\n        };\n      }\n    }, {\n      key: \"_getPopupConfig\",\n      value: function _getPopupConfig() {\n        var _this4 = this;\n\n        return extend(_get(_getPrototypeOf(MentionModule.prototype), \"_getPopupConfig\", this).call(this), {\n          hideOnParentScroll: false,\n          onShown: function onShown() {\n            _this4._isMentionActive = true;\n            _this4._hasSearch = false;\n\n            _this4._focusFirstElement();\n          },\n          onHidden: function onHidden() {\n            _this4._list.unselectAll();\n\n            _this4._list.option(\"focusedElement\", null);\n\n            _this4._isMentionActive = false;\n\n            _this4._search(null);\n          },\n          focusStateEnabled: false\n        });\n      }\n    }, {\n      key: \"_activeListItems\",\n      get: function get() {\n        return this._list.itemElements().filter(\":not(.\".concat(DISABLED_STATE_CLASS, \")\"));\n      }\n    }, {\n      key: \"clean\",\n      value: function clean() {\n        var _this5 = this;\n\n        Object.keys(this._mentions).forEach(function (marker) {\n          if (_this5._mentions[marker].template) {\n            Mention.removeTemplate(marker);\n          }\n        });\n      }\n    }]);\n\n    return MentionModule;\n  }(PopupModule);\n}\n\nexport default MentionModule;","map":null,"metadata":{},"sourceType":"module"}