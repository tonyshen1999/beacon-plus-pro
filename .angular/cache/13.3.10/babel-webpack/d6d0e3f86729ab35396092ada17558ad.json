{"ast":null,"code":"import _defineProperty from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\r\n * DevExtreme (esm/renovation/ui/scheduler/workspaces/month/date_table/cell.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"allDay\", \"ariaLabel\", \"children\", \"className\", \"contentTemplate\", \"contentTemplateProps\", \"dataCellTemplate\", \"endDate\", \"firstDayOfMonth\", \"groupIndex\", \"groups\", \"index\", \"isFirstGroupCell\", \"isFocused\", \"isLastGroupCell\", \"isSelected\", \"otherMonth\", \"startDate\", \"text\", \"today\"];\nimport { createVNode, createComponentVNode, normalizeProps } from \"inferno\";\nimport { BaseInfernoComponent } from \"@devextreme/runtime/inferno\";\nimport { combineClasses } from \"../../../../../utils/combine_classes\";\nimport { DateTableCellBase, DateTableCellBaseProps } from \"../../base/date_table/cell\";\nexport var viewFunction = function viewFunction(_ref) {\n  var classes = _ref.classes,\n      contentTemplateProps = _ref.contentTemplateProps,\n      _ref$props = _ref.props,\n      dataCellTemplate = _ref$props.dataCellTemplate,\n      endDate = _ref$props.endDate,\n      groupIndex = _ref$props.groupIndex,\n      groups = _ref$props.groups,\n      index = _ref$props.index,\n      isFirstGroupCell = _ref$props.isFirstGroupCell,\n      isFocused = _ref$props.isFocused,\n      isLastGroupCell = _ref$props.isLastGroupCell,\n      isSelected = _ref$props.isSelected,\n      startDate = _ref$props.startDate,\n      text = _ref$props.text;\n  return createComponentVNode(2, DateTableCellBase, {\n    className: classes,\n    dataCellTemplate: dataCellTemplate,\n    startDate: startDate,\n    endDate: endDate,\n    text: text,\n    groups: groups,\n    groupIndex: groupIndex,\n    index: index,\n    isFirstGroupCell: isFirstGroupCell,\n    isLastGroupCell: isLastGroupCell,\n    isSelected: isSelected,\n    isFocused: isFocused,\n    contentTemplateProps: contentTemplateProps,\n    children: createVNode(1, \"div\", \"dx-scheduler-date-table-cell-text\", text, 0)\n  });\n};\n\nvar getTemplate = function getTemplate(TemplateProp) {\n  return TemplateProp && (TemplateProp.defaultProps ? function (props) {\n    return normalizeProps(createComponentVNode(2, TemplateProp, _extends({}, props)));\n  } : TemplateProp);\n};\n\nexport var MonthDateTableCell = /*#__PURE__*/(function () {\n  var MonthDateTableCell = /*#__PURE__*/function (_BaseInfernoComponent) {\n    _inherits(MonthDateTableCell, _BaseInfernoComponent);\n\n    var _super = _createSuper(MonthDateTableCell);\n\n    function MonthDateTableCell(props) {\n      var _this;\n\n      _classCallCheck(this, MonthDateTableCell);\n\n      _this = _super.call(this, props);\n      _this.state = {};\n      _this.__getterCache = {};\n      return _this;\n    }\n\n    _createClass(MonthDateTableCell, [{\n      key: \"classes\",\n      get: function get() {\n        var _this$props2 = this.props,\n            className = _this$props2.className,\n            firstDayOfMonth = _this$props2.firstDayOfMonth,\n            otherMonth = _this$props2.otherMonth,\n            today = _this$props2.today;\n        return combineClasses(_defineProperty({\n          \"dx-scheduler-date-table-other-month\": !!otherMonth,\n          \"dx-scheduler-date-table-current-date\": !!today,\n          \"dx-scheduler-date-table-first-of-month\": !!firstDayOfMonth\n        }, className, !!className));\n      }\n    }, {\n      key: \"contentTemplateProps\",\n      get: function get() {\n        var _this2 = this;\n\n        if (void 0 !== this.__getterCache.contentTemplateProps) {\n          return this.__getterCache.contentTemplateProps;\n        }\n\n        return this.__getterCache.contentTemplateProps = function () {\n          var _this2$props = _this2.props,\n              index = _this2$props.index,\n              text = _this2$props.text;\n          return {\n            data: {\n              text: text\n            },\n            index: index\n          };\n        }();\n      }\n    }, {\n      key: \"restAttributes\",\n      get: function get() {\n        var _this$props = this.props,\n            restProps = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n        return restProps;\n      }\n    }, {\n      key: \"componentWillUpdate\",\n      value: function componentWillUpdate(nextProps, nextState, context) {\n        if (this.props.index !== nextProps.index || this.props.text !== nextProps.text) {\n          this.__getterCache.contentTemplateProps = void 0;\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var props = this.props;\n        return viewFunction({\n          props: _extends({}, props, {\n            dataCellTemplate: getTemplate(props.dataCellTemplate),\n            contentTemplate: getTemplate(props.contentTemplate)\n          }),\n          classes: this.classes,\n          contentTemplateProps: this.contentTemplateProps,\n          restAttributes: this.restAttributes\n        });\n      }\n    }]);\n\n    return MonthDateTableCell;\n  }(BaseInfernoComponent);\n\n  MonthDateTableCell.defaultProps = DateTableCellBaseProps;\n  return MonthDateTableCell;\n})();","map":null,"metadata":{},"sourceType":"module"}