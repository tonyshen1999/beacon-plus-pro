{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/utils.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { refreshPaths } from \"./core/renderers/renderer\";\nimport { each as _each } from \"../core/utils/iterator\";\nexport var prepareSegmentRectPoints = function prepareSegmentRectPoints(left, top, width, height, borderOptions) {\n  var maxSW = ~~((width < height ? width : height) / 2);\n  var sw = borderOptions.width || 0;\n  var newSW = sw < maxSW ? sw : maxSW;\n  left += newSW / 2;\n  top += newSW / 2;\n  width -= newSW;\n  height -= newSW;\n  var right = left + width;\n  var bottom = top + height;\n  var points = [];\n  var segments = [];\n  var segmentSequence;\n  var visiblyOpt = 0;\n  var prevSegmentVisibility = 0;\n  var allSegment = {\n    top: [[left, top], [right, top]],\n    right: [[right, top], [right, bottom]],\n    bottom: [[right, bottom], [left, bottom]],\n    left: [[left, bottom], [left, top]]\n  };\n\n  _each(allSegment, function (seg) {\n    var visibility = !!borderOptions[seg];\n    visiblyOpt = 2 * visiblyOpt + ~~visibility;\n  });\n\n  switch (visiblyOpt) {\n    case 13:\n    case 9:\n      segmentSequence = [\"left\", \"top\", \"right\", \"bottom\"];\n      break;\n\n    case 11:\n      segmentSequence = [\"bottom\", \"left\", \"top\", \"right\"];\n      break;\n\n    default:\n      segmentSequence = [\"top\", \"right\", \"bottom\", \"left\"];\n  }\n\n  _each(segmentSequence, function (_, seg) {\n    var segmentVisibility = !!borderOptions[seg];\n\n    if (!prevSegmentVisibility && segments.length) {\n      points.push(segments);\n      segments = [];\n    }\n\n    if (segmentVisibility) {\n      _each(allSegment[seg].slice(prevSegmentVisibility), function (_, segment) {\n        segments = segments.concat(segment);\n      });\n    }\n\n    prevSegmentVisibility = ~~segmentVisibility;\n  });\n\n  segments.length && points.push(segments);\n  1 === points.length && (points = points[0]);\n  return {\n    points: points,\n    pathType: 15 === visiblyOpt ? \"area\" : \"line\"\n  };\n};\nexport { refreshPaths };","map":null,"metadata":{},"sourceType":"module"}