{"ast":null,"code":"import _classCallCheck from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tonyshen/beacon-pro/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, Input, Injectable, NgModule } from '@angular/core';\nimport { isBs3 } from 'ngx-bootstrap/utils';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nvar _c0 = [\"*\"];\n\nfunction ProgressbarComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction ProgressbarComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"bar\", 3);\n    i0.ɵɵprojection(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"type\", ctx_r2.type)(\"value\", ctx_r2._value)(\"max\", ctx_r2.max)(\"animate\", ctx_r2.animate)(\"striped\", ctx_r2.striped);\n  }\n}\n\nfunction ProgressbarComponent_ng_template_3_bar_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"bar\", 3);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var item_r6 = ctx.$implicit;\n    var ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"type\", item_r6.type)(\"value\", item_r6.value)(\"max\", item_r6.max || ctx_r5.max)(\"animate\", ctx_r5.animate)(\"striped\", ctx_r5.striped);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r6.label);\n  }\n}\n\nfunction ProgressbarComponent_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, ProgressbarComponent_ng_template_3_bar_0_Template, 2, 6, \"bar\", 4);\n  }\n\n  if (rf & 2) {\n    var ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4._values);\n  }\n}\n\nvar BarComponent = /*#__PURE__*/(function () {\n  var BarComponent = /*#__PURE__*/function () {\n    function BarComponent(el, renderer) {\n      _classCallCheck(this, BarComponent);\n\n      this.el = el;\n      this.renderer = renderer;\n      /** maximum total value of progress element */\n\n      this.max = 100;\n      /** current value of progress bar */\n\n      this.value = 0;\n      /** if `true` changing value of progress bar will be animated */\n\n      this.animate = false;\n      /** If `true`, striped classes are applied */\n\n      this.striped = false;\n      /** provide one of the four supported contextual classes: `success`, `info`, `warning`, `danger` */\n\n      this.type = 'info';\n      this.percent = 100;\n    }\n\n    _createClass(BarComponent, [{\n      key: \"isBs3\",\n      get: function get() {\n        return isBs3();\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        var _a, _b;\n\n        if (changes[\"value\"] || changes[\"max\"]) {\n          this.percent = 100 * (Number(((_a = changes[\"value\"]) === null || _a === void 0 ? void 0 : _a.currentValue) || this.value) / Number(((_b = changes[\"max\"]) === null || _b === void 0 ? void 0 : _b.currentValue) || this.max || 100));\n        }\n\n        if (changes[\"type\"]) {\n          this.applyTypeClasses();\n        }\n      }\n    }, {\n      key: \"applyTypeClasses\",\n      value: function applyTypeClasses() {\n        if (this._prevType) {\n          var barTypeClass = \"progress-bar-\".concat(this._prevType);\n          var bgClass = \"bg-\".concat(this._prevType);\n          this.renderer.removeClass(this.el.nativeElement, barTypeClass);\n          this.renderer.removeClass(this.el.nativeElement, bgClass);\n          this._prevType = void 0;\n        }\n\n        if (this.type) {\n          var _barTypeClass = \"progress-bar-\".concat(this.type);\n\n          var _bgClass = \"bg-\".concat(this.type);\n\n          this.renderer.addClass(this.el.nativeElement, _barTypeClass);\n          this.renderer.addClass(this.el.nativeElement, _bgClass);\n          this._prevType = this.type;\n        }\n      }\n    }]);\n\n    return BarComponent;\n  }();\n\n  BarComponent.ɵfac = function BarComponent_Factory(t) {\n    return new (t || BarComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n  };\n\n  BarComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: BarComponent,\n    selectors: [[\"bar\"]],\n    hostAttrs: [\"role\", \"progressbar\", \"aria-valuemin\", \"0\"],\n    hostVars: 15,\n    hostBindings: function BarComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"aria-valuenow\", ctx.value)(\"aria-valuetext\", ctx.percent ? ctx.percent.toFixed(0) + \"%\" : \"\")(\"aria-valuemax\", ctx.max);\n        i0.ɵɵstyleProp(\"height\", \"100\", \"%\")(\"width\", ctx.percent, \"%\");\n        i0.ɵɵclassProp(\"progress-bar\", true)(\"progress-bar-animated\", !ctx.isBs3 && ctx.animate)(\"progress-bar-striped\", ctx.striped)(\"active\", ctx.isBs3 && ctx.animate);\n      }\n    },\n    inputs: {\n      max: \"max\",\n      value: \"value\",\n      animate: \"animate\",\n      striped: \"striped\",\n      type: \"type\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function BarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return BarComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar ProgressbarConfig = /*#__PURE__*/(function () {\n  var ProgressbarConfig = /*#__PURE__*/_createClass(function ProgressbarConfig() {\n    _classCallCheck(this, ProgressbarConfig);\n\n    /** if `true` changing value of progress bar will be animated */\n    this.animate = false;\n    /** maximum total value of progress element */\n\n    this.max = 100;\n  });\n\n  ProgressbarConfig.ɵfac = function ProgressbarConfig_Factory(t) {\n    return new (t || ProgressbarConfig)();\n  };\n\n  ProgressbarConfig.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ProgressbarConfig,\n    factory: ProgressbarConfig.ɵfac,\n    providedIn: 'root'\n  });\n  return ProgressbarConfig;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar ProgressbarComponent = /*#__PURE__*/(function () {\n  var ProgressbarComponent = /*#__PURE__*/function () {\n    function ProgressbarComponent(config) {\n      _classCallCheck(this, ProgressbarComponent);\n\n      /** maximum total value of progress element */\n      this.max = 100;\n      /** if `true` changing value of progress bar will be animated */\n\n      this.animate = false;\n      /** If `true`, striped classes are applied */\n\n      this.striped = false;\n      this.isStacked = false;\n      this._value = 0;\n      Object.assign(this, config);\n    }\n    /** current value of progress bar. Could be a number or array of objects\n     * like {\"value\":15,\"type\":\"info\",\"label\":\"15 %\"}\n     */\n\n\n    _createClass(ProgressbarComponent, [{\n      key: \"value\",\n      set: function set(value) {\n        this.isStacked = Array.isArray(value);\n\n        if (typeof value === 'number') {\n          this._value = value;\n          this._values = void 0;\n        } else {\n          this._value = void 0;\n          this._values = value;\n        }\n      }\n    }]);\n\n    return ProgressbarComponent;\n  }();\n\n  ProgressbarComponent.ɵfac = function ProgressbarComponent_Factory(t) {\n    return new (t || ProgressbarComponent)(i0.ɵɵdirectiveInject(ProgressbarConfig));\n  };\n\n  ProgressbarComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ProgressbarComponent,\n    selectors: [[\"progressbar\"]],\n    hostVars: 3,\n    hostBindings: function ProgressbarComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"max\", ctx.max);\n        i0.ɵɵclassProp(\"progress\", true);\n      }\n    },\n    inputs: {\n      max: \"max\",\n      animate: \"animate\",\n      striped: \"striped\",\n      type: \"type\",\n      value: \"value\"\n    },\n    ngContentSelectors: _c0,\n    decls: 5,\n    vars: 3,\n    consts: [[4, \"ngIf\", \"ngIfThen\", \"ngIfElse\"], [\"NotStacked\", \"\"], [\"Stacked\", \"\"], [3, \"type\", \"value\", \"max\", \"animate\", \"striped\"], [3, \"type\", \"value\", \"max\", \"animate\", \"striped\", 4, \"ngFor\", \"ngForOf\"]],\n    template: function ProgressbarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵtemplate(0, ProgressbarComponent_ng_container_0_Template, 1, 0, \"ng-container\", 0);\n        i0.ɵɵtemplate(1, ProgressbarComponent_ng_template_1_Template, 2, 5, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(3, ProgressbarComponent_ng_template_3_Template, 1, 1, \"ng-template\", null, 2, i0.ɵɵtemplateRefExtractor);\n      }\n\n      if (rf & 2) {\n        var _r1 = i0.ɵɵreference(2);\n\n        var _r3 = i0.ɵɵreference(4);\n\n        i0.ɵɵproperty(\"ngIf\", !ctx.isStacked)(\"ngIfThen\", _r1)(\"ngIfElse\", _r3);\n      }\n    },\n    directives: [BarComponent, i3.NgIf, i3.NgForOf],\n    styles: [\"[_nghost-%COMP%]{width:100%;display:flex}\"],\n    changeDetection: 0\n  });\n  return ProgressbarComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar ProgressbarModule = /*#__PURE__*/(function () {\n  var ProgressbarModule = /*#__PURE__*/function () {\n    function ProgressbarModule() {\n      _classCallCheck(this, ProgressbarModule);\n    }\n\n    _createClass(ProgressbarModule, null, [{\n      key: \"forRoot\",\n      value: function forRoot() {\n        return {\n          ngModule: ProgressbarModule,\n          providers: []\n        };\n      }\n    }]);\n\n    return ProgressbarModule;\n  }();\n\n  ProgressbarModule.ɵfac = function ProgressbarModule_Factory(t) {\n    return new (t || ProgressbarModule)();\n  };\n\n  ProgressbarModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ProgressbarModule\n  });\n  ProgressbarModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return ProgressbarModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BarComponent, ProgressbarComponent, ProgressbarConfig, ProgressbarModule }; //# sourceMappingURL=ngx-bootstrap-progressbar.mjs.map","map":null,"metadata":{},"sourceType":"module"}