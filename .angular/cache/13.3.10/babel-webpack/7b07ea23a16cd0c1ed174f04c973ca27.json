{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/lookup.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getWidth, getHeight, getOuterHeight, getOuterWidth } from \"../core/utils/size\";\nimport $ from \"../core/renderer\";\nimport eventsEngine from \"../events/core/events_engine\";\nimport { getWindow } from \"../core/utils/window\";\nvar window = getWindow();\nimport { nativeScrolling } from \"../core/utils/support\";\nimport { noop } from \"../core/utils/common\";\nimport { getPublicElement } from \"../core/element\";\nimport { each } from \"../core/utils/iterator\";\nimport { extend } from \"../core/utils/extend\";\nimport { getFieldName } from \"../core/options/utils\";\nimport messageLocalization from \"../localization/message\";\nimport devices from \"../core/devices\";\nimport registerComponent from \"../core/component_registrator\";\nimport { addNamespace } from \"../events/utils/index\";\nimport DropDownList from \"./drop_down_editor/ui.drop_down_list\";\nimport { current, isMaterial } from \"./themes\";\nimport { name as clickEventName } from \"../events/click\";\nimport Popover from \"./popover\";\nimport TextBox from \"./text_box\";\nimport { ChildDefaultTemplate } from \"../core/templates/child_default_template\";\nimport { locate, move, resetPosition } from \"../animation/translator\";\nimport { isDefined } from \"../core/utils/type\";\nimport { getElementWidth } from \"./drop_down_editor/utils\";\nvar LOOKUP_CLASS = \"dx-lookup\";\nvar LOOKUP_SEARCH_CLASS = \"dx-lookup-search\";\nvar LOOKUP_SEARCH_WRAPPER_CLASS = \"dx-lookup-search-wrapper\";\nvar LOOKUP_FIELD_CLASS = \"dx-lookup-field\";\nvar LOOKUP_ARROW_CLASS = \"dx-lookup-arrow\";\nvar LOOKUP_FIELD_WRAPPER_CLASS = \"dx-lookup-field-wrapper\";\nvar LOOKUP_POPUP_CLASS = \"dx-lookup-popup\";\nvar LOOKUP_POPUP_WRAPPER_CLASS = \"dx-lookup-popup-wrapper\";\nvar LOOKUP_POPUP_SEARCH_CLASS = \"dx-lookup-popup-search\";\nvar LOOKUP_POPOVER_MODE = \"dx-lookup-popover-mode\";\nvar LOOKUP_EMPTY_CLASS = \"dx-lookup-empty\";\nvar LOOKUP_POPOVER_FLIP_VERTICAL_CLASS = \"dx-popover-flipped-vertical\";\nvar TEXTEDITOR_INPUT_CLASS = \"dx-texteditor-input\";\nvar LIST_ITEM_CLASS = \"dx-list-item\";\nvar LIST_ITEM_SELECTED_CLASS = \"dx-list-item-selected\";\nvar GROUP_LIST_HEADER_CLASS = \"dx-list-group-header\";\nvar MATERIAL_LOOKUP_LIST_ITEMS_COUNT = 5;\nvar MATERIAL_LOOKUP_LIST_PADDING = 8;\nvar Lookup = DropDownList.inherit({\n  _supportedKeys: function _supportedKeys() {\n    return extend(this.callBase(), {\n      space: function space(e) {\n        e.preventDefault();\n\n        this._validatedOpening();\n      },\n      enter: function enter() {\n        this._validatedOpening();\n      }\n    });\n  },\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      placeholder: messageLocalization.format(\"Select\"),\n      searchPlaceholder: messageLocalization.format(\"Search\"),\n      searchEnabled: true,\n      cleanSearchOnOpening: true,\n      showCancelButton: true,\n      showClearButton: false,\n      clearButtonText: messageLocalization.format(\"Clear\"),\n      applyButtonText: messageLocalization.format(\"OK\"),\n      pullRefreshEnabled: false,\n      useNativeScrolling: true,\n      pullingDownText: messageLocalization.format(\"dxList-pullingDownText\"),\n      pulledDownText: messageLocalization.format(\"dxList-pulledDownText\"),\n      refreshingText: messageLocalization.format(\"dxList-refreshingText\"),\n      pageLoadingText: messageLocalization.format(\"dxList-pageLoadingText\"),\n      onScroll: null,\n      onPullRefresh: null,\n      onPageLoading: null,\n      pageLoadMode: \"scrollBottom\",\n      nextButtonText: messageLocalization.format(\"dxList-nextButtonText\"),\n      grouped: false,\n      groupTemplate: \"group\",\n      usePopover: false,\n      showDropDownButton: false,\n      focusStateEnabled: false,\n      dropDownOptions: {\n        showTitle: true,\n        width: function width() {\n          return .8 * getWidth(window);\n        },\n        height: function height() {\n          return .8 * getHeight(window);\n        },\n        shading: true,\n        closeOnOutsideClick: false,\n        position: void 0,\n        animation: {},\n        title: \"\",\n        titleTemplate: \"title\",\n        onTitleRendered: null,\n        fullScreen: false\n      },\n      dropDownCentered: false,\n      _scrollToSelectedItemEnabled: false,\n      useHiddenSubmitElement: true\n    });\n  },\n  _defaultOptionsRules: function _defaultOptionsRules() {\n    var _this = this;\n\n    var themeName = current();\n    return this.callBase().concat([{\n      device: function device() {\n        return !nativeScrolling;\n      },\n      options: {\n        useNativeScrolling: false\n      }\n    }, {\n      device: function device(_device) {\n        return !devices.isSimulator() && \"desktop\" === devices.real().deviceType && \"generic\" === _device.platform;\n      },\n      options: {\n        usePopover: true,\n        dropDownOptions: {\n          height: \"auto\"\n        }\n      }\n    }, {\n      device: {\n        platform: \"ios\",\n        phone: true\n      },\n      options: {\n        dropDownOptions: {\n          fullScreen: true\n        }\n      }\n    }, {\n      device: {\n        platform: \"ios\",\n        tablet: true\n      },\n      options: {\n        dropDownOptions: {\n          width: function width() {\n            return .4 * Math.min(getWidth(window), getHeight(window));\n          },\n          height: \"auto\"\n        },\n        usePopover: true\n      }\n    }, {\n      device: function device() {\n        return \"desktop\" === devices.real().deviceType && !devices.isSimulator();\n      },\n      options: {\n        focusStateEnabled: true\n      }\n    }, {\n      device: function device() {\n        return isMaterial(themeName);\n      },\n      options: {\n        usePopover: false,\n        searchEnabled: false,\n        showCancelButton: false,\n        dropDownCentered: true,\n        _scrollToSelectedItemEnabled: true,\n        dropDownOptions: {\n          closeOnOutsideClick: true,\n          _ignoreFunctionValueDeprecation: true,\n          width: function width() {\n            return getElementWidth(_this.$element());\n          },\n          height: function () {\n            return this._getPopupHeight();\n          }.bind(this),\n          showTitle: false,\n          shading: false\n        }\n      }\n    }]);\n  },\n  _init: function _init() {\n    this.callBase();\n\n    this._initActions();\n  },\n  _initActions: function _initActions() {\n    this.callBase();\n\n    this._initScrollAction();\n\n    this._initPageLoadingAction();\n\n    this._initPullRefreshAction();\n  },\n  _initPageLoadingAction: function _initPageLoadingAction() {\n    this._pageLoadingAction = this._createActionByOption(\"onPageLoading\");\n  },\n  _initPullRefreshAction: function _initPullRefreshAction() {\n    this._pullRefreshAction = this._createActionByOption(\"onPullRefresh\");\n  },\n  _initScrollAction: function _initScrollAction() {\n    this._scrollAction = this._createActionByOption(\"onScroll\");\n  },\n  _scrollHandler: function _scrollHandler(e) {\n    this._scrollAction(e);\n  },\n  _pullRefreshHandler: function _pullRefreshHandler(e) {\n    this._pullRefreshAction(e);\n  },\n  _pageLoadingHandler: function _pageLoadingHandler(e) {\n    this._pageLoadingAction(e);\n  },\n  _initTemplates: function _initTemplates() {\n    this.callBase();\n\n    this._templateManager.addDefaultTemplates({\n      group: new ChildDefaultTemplate(\"group\"),\n      title: new ChildDefaultTemplate(\"title\")\n    });\n  },\n  _initMarkup: function _initMarkup() {\n    this.$element().addClass(LOOKUP_CLASS).toggleClass(LOOKUP_POPOVER_MODE, this.option(\"usePopover\"));\n    this.callBase();\n  },\n  _inputWrapper: function _inputWrapper() {\n    return this.$element().find(\".\" + LOOKUP_FIELD_WRAPPER_CLASS);\n  },\n  _dataSourceOptions: function _dataSourceOptions() {\n    return extend(this.callBase(), {\n      paginate: true\n    });\n  },\n  _fireContentReadyAction: noop,\n  _popupWrapperClass: function _popupWrapperClass() {\n    return \"\";\n  },\n  _renderInput: function _renderInput() {\n    var _this2 = this;\n\n    var fieldClickAction = this._createAction(function () {\n      _this2._toggleOpenState();\n    });\n\n    this._$field = $(\"<div>\").addClass(LOOKUP_FIELD_CLASS);\n    eventsEngine.on(this._$field, addNamespace(clickEventName, this.NAME), function (e) {\n      fieldClickAction({\n        event: e\n      });\n    });\n    var $arrow = $(\"<div>\").addClass(LOOKUP_ARROW_CLASS);\n    this._$fieldWrapper = $(\"<div>\").addClass(LOOKUP_FIELD_WRAPPER_CLASS).append(this._$field).append($arrow).appendTo(this.$element());\n  },\n  _getInputContainer: function _getInputContainer() {\n    return this._$fieldWrapper;\n  },\n  _renderField: function _renderField() {\n    var fieldTemplate = this._getTemplateByOption(\"fieldTemplate\");\n\n    if (fieldTemplate && this.option(\"fieldTemplate\")) {\n      this._renderFieldTemplate(fieldTemplate);\n\n      return;\n    }\n\n    var displayValue = this.option(\"displayValue\");\n\n    this._updateField(isDefined(displayValue) && String(displayValue) || this.option(\"placeholder\"));\n\n    this.$element().toggleClass(LOOKUP_EMPTY_CLASS, !this.option(\"selectedItem\"));\n  },\n  _getLabelContainer: function _getLabelContainer() {\n    return this._$field;\n  },\n  _renderDisplayText: function _renderDisplayText(text) {\n    if (this._input().length) {\n      this.callBase(text);\n    } else {\n      this._updateField(text);\n    }\n  },\n  _updateField: function _updateField(text) {\n    this._$field.text(text);\n  },\n  _renderFieldTemplate: function _renderFieldTemplate(template) {\n    this._$field.empty();\n\n    var data = this._fieldRenderData();\n\n    template.render({\n      model: data,\n      container: getPublicElement(this._$field)\n    });\n  },\n  _fieldRenderData: function _fieldRenderData() {\n    return this.option(\"selectedItem\");\n  },\n  _popupShowingHandler: function _popupShowingHandler() {\n    this.callBase.apply(this, arguments);\n\n    if (this.option(\"cleanSearchOnOpening\")) {\n      if (this.option(\"searchEnabled\") && this._searchBox.option(\"value\")) {\n        this._searchBox.option(\"value\", \"\");\n\n        this._searchCanceled();\n      }\n\n      this._list && this._list.option(\"focusedElement\", null);\n    }\n\n    if (this.option(\"dropDownOptions.fullScreen\") && this.option(\"_scrollToSelectedItemEnabled\")) {\n      this._popup.option(\"position\").of = $(window);\n    }\n  },\n  _popupShownHandler: function _popupShownHandler() {\n    var scrollToSelectedItemEnabled = this.option(\"_scrollToSelectedItemEnabled\");\n    var fullScreen = this.option(\"dropDownOptions.fullScreen\");\n\n    if (!fullScreen && scrollToSelectedItemEnabled) {\n      this._setPopupPosition();\n    }\n\n    this.callBase();\n  },\n  _scrollToSelectedItem: function _scrollToSelectedItem() {\n    var selectedIndex = this._list.option(\"selectedIndex\");\n\n    var listItems = this._list.option(\"items\");\n\n    var itemsCount = listItems.length;\n\n    if (0 !== itemsCount) {\n      if (this._list.option(\"grouped\")) {\n        this._list.scrollToItem({\n          group: itemsCount - 1,\n          item: listItems[itemsCount - 1].items.length - 1\n        });\n      } else {\n        this._list.scrollToItem(itemsCount - 1);\n      }\n\n      this._list.scrollToItem(selectedIndex);\n    }\n  },\n  _getDifferenceOffsets: function _getDifferenceOffsets(selectedListItem) {\n    return selectedListItem.offset().top - $(this.element()).offset().top;\n  },\n  _isCenteringEnabled: function _isCenteringEnabled(index, count) {\n    return 1 < index && index < count - 2;\n  },\n  _getPopupOffset: function _getPopupOffset() {\n    var listItemsCount = this._listItemElements().length;\n\n    if (0 === listItemsCount) {\n      return;\n    }\n\n    var selectedListItem = $(this._list.element()).find(\".\" + LIST_ITEM_SELECTED_CLASS);\n\n    var selectedIndex = this._listItemElements().index(selectedListItem);\n\n    var differenceOfHeights = (getHeight(selectedListItem) - getHeight(this.element())) / 2;\n    var lookupOffset = $(this._list.element()).offset().top;\n    var dropDownHeightOption = this.option(\"dropDownOptions.height\");\n    var popupHeight = \"function\" === typeof dropDownHeightOption ? dropDownHeightOption() : dropDownHeightOption;\n    var windowHeight = getHeight(window);\n    var offsetTop = 0;\n\n    if (-1 !== selectedIndex) {\n      if (this._isCenteringEnabled(selectedIndex, listItemsCount)) {\n        this._scrollToSelectedItem();\n\n        var scrollOffsetTop = (popupHeight - getHeight(selectedListItem)) / 2 - this._getDifferenceOffsets(selectedListItem);\n\n        this._list.scrollTo(this._list.scrollTop() + MATERIAL_LOOKUP_LIST_PADDING / 2 - scrollOffsetTop);\n\n        offsetTop = differenceOfHeights + this._getDifferenceOffsets(selectedListItem);\n\n        if (lookupOffset < offsetTop && selectedIndex !== listItemsCount - 3) {\n          this._list.scrollTo(this._list.scrollTop() + this._getDifferenceOffsets(selectedListItem) / 2);\n\n          offsetTop = differenceOfHeights + this._getDifferenceOffsets(selectedListItem);\n        }\n      } else if (selectedIndex <= 1) {\n        this._list.scrollTo(0);\n\n        offsetTop = differenceOfHeights + this._getDifferenceOffsets(selectedListItem);\n      } else if (selectedIndex >= listItemsCount - 2) {\n        this._scrollToSelectedItem();\n\n        offsetTop = differenceOfHeights + this._getDifferenceOffsets(selectedListItem);\n      }\n\n      if (lookupOffset < offsetTop) {\n        this._scrollToSelectedItem();\n\n        offsetTop = differenceOfHeights + MATERIAL_LOOKUP_LIST_PADDING;\n      }\n    }\n\n    var offsetBottom = popupHeight - offsetTop - getHeight(this.element());\n\n    if (windowHeight - lookupOffset < offsetBottom) {\n      this._list.scrollTo(this._list.scrollTop() + differenceOfHeights - offsetBottom);\n\n      offsetTop = popupHeight - getHeight(this.element()) - MATERIAL_LOOKUP_LIST_PADDING;\n    }\n\n    return offsetTop;\n  },\n  _setPopupPosition: function _setPopupPosition() {\n    if (!this.option(\"dropDownCentered\")) {\n      return;\n    }\n\n    var flipped = this._popup.$wrapper().hasClass(LOOKUP_POPOVER_FLIP_VERTICAL_CLASS);\n\n    if (flipped) {\n      return;\n    }\n\n    var popupContentParent = $(this._popup.$content()).parent();\n\n    var popupOffset = this._getPopupOffset();\n\n    var position = locate(popupContentParent);\n    move(popupContentParent, {\n      top: position.top - popupOffset\n    });\n  },\n  _listItemGroupedElements: function _listItemGroupedElements() {\n    var groups = this._list._itemContainer().children();\n\n    var items = [];\n    groups.each(function (_, group) {\n      items.push($(group).find(\".\" + GROUP_LIST_HEADER_CLASS)[0]);\n      var groupedItems = $(group).find(\".\" + LIST_ITEM_CLASS);\n      groupedItems.each(function (_, item) {\n        items.push(item);\n      });\n    });\n    return $(items);\n  },\n  _calculateListHeight: function _calculateListHeight(grouped) {\n    var listItems = grouped ? this._listItemGroupedElements() : this._listItemElements();\n    var selectedListItem = $(\".\" + LIST_ITEM_SELECTED_CLASS);\n    var selectedIndex = listItems.index(selectedListItem);\n    var listHeight = 0;\n    var requireListItems = [];\n\n    if (0 === listItems.length) {\n      listHeight += MATERIAL_LOOKUP_LIST_PADDING;\n    } else if (listItems.length < MATERIAL_LOOKUP_LIST_ITEMS_COUNT) {\n      listItems.each(function (_, item) {\n        listHeight += getOuterHeight(item);\n      });\n    } else {\n      if (selectedIndex <= 1) {\n        requireListItems = listItems.slice(0, MATERIAL_LOOKUP_LIST_ITEMS_COUNT);\n      } else if (this._isCenteringEnabled(selectedIndex, listItems.length)) {\n        requireListItems = listItems.slice(selectedIndex - 2, selectedIndex + 3);\n      } else {\n        requireListItems = listItems.slice(listItems.length - MATERIAL_LOOKUP_LIST_ITEMS_COUNT, listItems.length);\n      }\n\n      requireListItems.each(function (_, item) {\n        listHeight += getOuterHeight(item);\n      });\n    }\n\n    return listHeight + (grouped ? MATERIAL_LOOKUP_LIST_PADDING : 2 * MATERIAL_LOOKUP_LIST_PADDING);\n  },\n  _getPopupHeight: function _getPopupHeight() {\n    if (this._list && this._list.itemElements()) {\n      return this._calculateListHeight(this.option(\"grouped\")) + (this._$searchWrapper ? getOuterHeight(this._$searchWrapper) : 0) + (this._popup._$bottom ? getOuterHeight(this._popup._$bottom) : 0) + (this._popup._$title ? getOuterHeight(this._popup._$title) : 0);\n    } else {\n      return \"auto\";\n    }\n  },\n  _renderPopup: function _renderPopup() {\n    if (this.option(\"usePopover\") && !this.option(\"dropDownOptions.fullScreen\")) {\n      if (this.option(\"_scrollToSelectedItemEnabled\")) {\n        this.callBase();\n      } else {\n        this._renderPopover();\n      }\n    } else {\n      this.callBase();\n    }\n\n    this._$popup.addClass(LOOKUP_POPUP_CLASS);\n\n    this._popup.$wrapper().addClass(LOOKUP_POPUP_WRAPPER_CLASS);\n  },\n  _renderPopover: function _renderPopover() {\n    this._popup = this._createComponent(this._$popup, Popover, extend(this._popupConfig(), this._options.cache(\"dropDownOptions\"), {\n      showEvent: null,\n      hideEvent: null,\n      target: this.$element(),\n      fullScreen: false,\n      shading: false,\n      hideOnParentScroll: true,\n      _fixWrapperPosition: false,\n      width: this._isInitialOptionValue(\"dropDownOptions.width\") ? function () {\n        return getOuterWidth(this.$element());\n      }.bind(this) : this._popupConfig().width\n    }));\n\n    this._popup.on({\n      showing: this._popupShowingHandler.bind(this),\n      shown: this._popupShownHandler.bind(this),\n      hiding: this._popupHidingHandler.bind(this),\n      hidden: this._popupHiddenHandler.bind(this),\n      contentReady: this._contentReadyHandler.bind(this)\n    });\n\n    if (this.option(\"_scrollToSelectedItemEnabled\")) {\n      this._popup._$arrow.remove();\n    }\n\n    this._setPopupContentId(this._popup.$content());\n\n    this._contentReadyHandler();\n  },\n  _popupHidingHandler: function _popupHidingHandler() {\n    this.callBase();\n    this.option(\"focusStateEnabled\") && this.focus();\n  },\n  _popupHiddenHandler: function _popupHiddenHandler() {\n    this.callBase();\n\n    if (this.option(\"_scrollToSelectedItemEnabled\")) {\n      resetPosition($(this._popup.content()).parent());\n    }\n  },\n  _preventFocusOnPopup: noop,\n  _popupConfig: function _popupConfig() {\n    var _this3 = this;\n\n    var result = extend(this.callBase(), {\n      toolbarItems: this._getPopupToolbarItems(),\n      hideOnParentScroll: false,\n      onPositioned: null,\n      maxHeight: \"100vh\",\n      showTitle: this.option(\"dropDownOptions.showTitle\"),\n      title: this.option(\"dropDownOptions.title\"),\n      titleTemplate: this._getTemplateByOption(\"dropDownOptions.titleTemplate\"),\n      onTitleRendered: this.option(\"dropDownOptions.onTitleRendered\"),\n      fullScreen: this.option(\"dropDownOptions.fullScreen\"),\n      shading: this.option(\"dropDownOptions.shading\"),\n      closeOnOutsideClick: this.option(\"dropDownOptions.closeOnOutsideClick\")\n    });\n    delete result.animation;\n    delete result.position;\n\n    if (this.option(\"_scrollToSelectedItemEnabled\")) {\n      result.position = this.option(\"dropDownCentered\") ? {\n        my: \"left top\",\n        at: \"left top\",\n        of: this.element()\n      } : {\n        my: \"left top\",\n        at: \"left bottom\",\n        of: this.element()\n      };\n      result.hideOnParentScroll = true;\n    }\n\n    each([\"position\", \"animation\", \"width\", \"height\"], function (_, optionName) {\n      var popupOptionValue = _this3.option(\"dropDownOptions.\".concat(optionName));\n\n      if (void 0 !== popupOptionValue) {\n        result[optionName] = popupOptionValue;\n      }\n    });\n    return result;\n  },\n  _getPopupToolbarItems: function _getPopupToolbarItems() {\n    var buttonsConfig = \"useButtons\" === this.option(\"applyValueMode\") ? this._popupToolbarItemsConfig() : [];\n\n    var cancelButton = this._getCancelButtonConfig();\n\n    if (cancelButton) {\n      buttonsConfig.push(cancelButton);\n    }\n\n    var clearButton = this._getClearButtonConfig();\n\n    if (clearButton) {\n      buttonsConfig.push(clearButton);\n    }\n\n    return this._applyButtonsLocation(buttonsConfig);\n  },\n  _popupToolbarItemsConfig: function _popupToolbarItemsConfig() {\n    return [{\n      shortcut: \"done\",\n      options: {\n        onClick: this._applyButtonHandler.bind(this),\n        text: this.option(\"applyButtonText\")\n      }\n    }];\n  },\n  _getCancelButtonConfig: function _getCancelButtonConfig() {\n    var _this4 = this;\n\n    return this.option(\"showCancelButton\") ? {\n      shortcut: \"cancel\",\n      onClick: this._cancelButtonHandler.bind(this),\n      options: {\n        onInitialized: function onInitialized(e) {\n          e.component.registerKeyHandler(\"escape\", _this4.close.bind(_this4));\n        },\n        text: this.option(\"cancelButtonText\")\n      }\n    } : null;\n  },\n  _getClearButtonConfig: function _getClearButtonConfig() {\n    return this.option(\"showClearButton\") ? {\n      shortcut: \"clear\",\n      onClick: this._resetValue.bind(this),\n      options: {\n        text: this.option(\"clearButtonText\")\n      }\n    } : null;\n  },\n  _applyButtonHandler: function _applyButtonHandler(args) {\n    if (args) {\n      this._saveValueChangeEvent(args.event);\n    }\n\n    this.option(\"value\", this._valueGetter(this._currentSelectedItem()));\n    this.callBase();\n  },\n  _cancelButtonHandler: function _cancelButtonHandler() {\n    this._refreshSelected();\n\n    this.callBase();\n  },\n  _refreshPopupVisibility: function _refreshPopupVisibility() {\n    if (this.option(\"opened\")) {\n      this._updatePopupDimensions();\n    }\n  },\n  _dimensionChanged: function _dimensionChanged() {\n    if (this.option(\"usePopover\") && !this.option(\"dropDownOptions.width\")) {\n      this.option(\"dropDownOptions.width\", getWidth(this.$element()));\n    }\n\n    this._popup && this._updatePopupDimensions();\n  },\n  _input: function _input() {\n    return this._$searchBox || this.callBase();\n  },\n  _renderPopupContent: function _renderPopupContent() {\n    this.callBase();\n\n    this._renderSearch();\n  },\n  _renderSearch: function _renderSearch() {\n    var _this5 = this;\n\n    var isSearchEnabled = this.option(\"searchEnabled\");\n\n    this._toggleSearchClass(isSearchEnabled);\n\n    if (isSearchEnabled) {\n      var $searchWrapper = this._$searchWrapper = $(\"<div>\").addClass(LOOKUP_SEARCH_WRAPPER_CLASS);\n      var $searchBox = this._$searchBox = $(\"<div>\").addClass(LOOKUP_SEARCH_CLASS).appendTo($searchWrapper);\n      var currentDevice = devices.current();\n      var searchMode = currentDevice.android && currentDevice.version[0] >= 5 ? \"text\" : \"search\";\n      var isKeyboardListeningEnabled = false;\n      this._searchBox = this._createComponent($searchBox, TextBox, {\n        onDisposing: function onDisposing() {\n          return isKeyboardListeningEnabled = false;\n        },\n        onFocusIn: function onFocusIn() {\n          return isKeyboardListeningEnabled = true;\n        },\n        onFocusOut: function onFocusOut() {\n          return isKeyboardListeningEnabled = false;\n        },\n        onKeyboardHandled: function onKeyboardHandled(opts) {\n          return isKeyboardListeningEnabled && _this5._list._keyboardHandler(opts);\n        },\n        mode: searchMode,\n        showClearButton: true,\n        valueChangeEvent: this.option(\"valueChangeEvent\"),\n        onValueChanged: function onValueChanged(e) {\n          _this5._searchHandler(e);\n        }\n      });\n\n      this._registerSearchKeyHandlers();\n\n      $searchWrapper.insertBefore(this._$list);\n\n      this._setSearchPlaceholder();\n    }\n  },\n  _removeSearch: function _removeSearch() {\n    this._$searchWrapper && this._$searchWrapper.remove();\n    delete this._$searchWrapper;\n    this._$searchBox && this._$searchBox.remove();\n    delete this._$searchBox;\n    delete this._searchBox;\n  },\n  _selectListItemHandler: function _selectListItemHandler(e) {\n    var $itemElement = $(this._list.option(\"focusedElement\"));\n\n    if (!$itemElement.length) {\n      return;\n    }\n\n    e.preventDefault();\n    e.target = $itemElement.get(0);\n\n    this._saveValueChangeEvent(e);\n\n    this._selectListItem(e.itemData, $itemElement);\n  },\n  _registerSearchKeyHandlers: function _registerSearchKeyHandlers() {\n    this._searchBox.registerKeyHandler(\"escape\", this.close.bind(this));\n\n    this._searchBox.registerKeyHandler(\"enter\", this._selectListItemHandler.bind(this));\n\n    this._searchBox.registerKeyHandler(\"space\", this._selectListItemHandler.bind(this));\n\n    this._searchBox.registerKeyHandler(\"end\", noop);\n\n    this._searchBox.registerKeyHandler(\"home\", noop);\n  },\n  _toggleSearchClass: function _toggleSearchClass(isSearchEnabled) {\n    if (this._popup) {\n      this._popup.$wrapper().toggleClass(LOOKUP_POPUP_SEARCH_CLASS, isSearchEnabled);\n    }\n  },\n  _setSearchPlaceholder: function _setSearchPlaceholder() {\n    if (!this._$searchBox) {\n      return;\n    }\n\n    var minSearchLength = this.option(\"minSearchLength\");\n    var placeholder = this.option(\"searchPlaceholder\");\n\n    if (minSearchLength && placeholder === messageLocalization.format(\"Search\")) {\n      placeholder = messageLocalization.getFormatter(\"dxLookup-searchPlaceholder\")(minSearchLength);\n    }\n\n    this._searchBox.option(\"placeholder\", placeholder);\n  },\n  _setAriaTargetForList: noop,\n  _renderList: function _renderList() {\n    var _this6 = this;\n\n    this.callBase();\n\n    this._list.registerKeyHandler(\"escape\", function () {\n      _this6.close();\n    });\n  },\n  _listConfig: function _listConfig() {\n    return extend(this.callBase(), {\n      tabIndex: 0,\n      grouped: this.option(\"grouped\"),\n      groupTemplate: this._getTemplateByOption(\"groupTemplate\"),\n      pullRefreshEnabled: this.option(\"pullRefreshEnabled\"),\n      useNativeScrolling: this.option(\"useNativeScrolling\"),\n      pullingDownText: this.option(\"pullingDownText\"),\n      pulledDownText: this.option(\"pulledDownText\"),\n      refreshingText: this.option(\"refreshingText\"),\n      pageLoadingText: this.option(\"pageLoadingText\"),\n      onScroll: this._scrollHandler.bind(this),\n      onPullRefresh: this._pullRefreshHandler.bind(this),\n      onPageLoading: this._pageLoadingHandler.bind(this),\n      pageLoadMode: this.option(\"pageLoadMode\"),\n      nextButtonText: this.option(\"nextButtonText\"),\n      indicateLoading: this.option(\"searchEnabled\"),\n      onSelectionChanged: this._getSelectionChangedHandler()\n    });\n  },\n  _getSelectionChangedHandler: function _getSelectionChangedHandler() {\n    return this.option(\"showSelectionControls\") ? this._selectionChangeHandler.bind(this) : noop;\n  },\n  _listContentReadyHandler: function _listContentReadyHandler() {\n    this.callBase.apply(this, arguments);\n\n    this._refreshSelected();\n  },\n  _runWithoutCloseOnScroll: function _runWithoutCloseOnScroll(callback) {\n    var _this7 = this;\n\n    var _this$option = this.option(),\n        _scrollToSelectedItemEnabled = _this$option._scrollToSelectedItemEnabled;\n\n    var hideOnParentScroll = this._popup.option(\"hideOnParentScroll\");\n\n    if (!_scrollToSelectedItemEnabled) {\n      callback();\n    } else {\n      this._popup.option(\"hideOnParentScroll\", false);\n\n      callback();\n      this._hideOnParentScrollTimer = setTimeout(function () {\n        _this7._popup.option(\"hideOnParentScroll\", hideOnParentScroll);\n      });\n    }\n  },\n  _setFocusPolicy: function _setFocusPolicy() {\n    var _this8 = this;\n\n    if (!this.option(\"focusStateEnabled\")) {\n      return;\n    }\n\n    this._runWithoutCloseOnScroll(function () {\n      if (_this8.option(\"searchEnabled\")) {\n        _this8._searchBox.focus();\n      } else {\n        eventsEngine.trigger(_this8._$list, \"focus\");\n      }\n    });\n  },\n  _focusTarget: function _focusTarget() {\n    return this._$field;\n  },\n  _keyboardEventBindingTarget: function _keyboardEventBindingTarget() {\n    return this._$field;\n  },\n  _listItemClickHandler: function _listItemClickHandler(e) {\n    this._saveValueChangeEvent(e.event);\n\n    this._selectListItem(e.itemData, e.event.currentTarget);\n  },\n  _selectListItem: function _selectListItem(itemData, target) {\n    this._list.selectItem(target);\n\n    if (\"instantly\" === this.option(\"applyValueMode\")) {\n      this._applyButtonHandler();\n    }\n  },\n  _currentSelectedItem: function _currentSelectedItem() {\n    return this.option(\"grouped\") ? this._list.option(\"selectedItems[0]\").items[0] : this._list.option(\"selectedItems[0]\");\n  },\n  _resetValue: function _resetValue(e) {\n    this._saveValueChangeEvent(e.event);\n\n    this.option(\"value\", null);\n    this.option(\"opened\", false);\n  },\n  _searchValue: function _searchValue() {\n    return this.option(\"searchEnabled\") && this._searchBox ? this._searchBox.option(\"value\") : \"\";\n  },\n  _renderInputValue: function _renderInputValue() {\n    var _this9 = this;\n\n    return this.callBase().always(function () {\n      _this9._refreshSelected();\n    });\n  },\n  _renderPlaceholder: function _renderPlaceholder() {\n    if (0 === this.$element().find(\".\" + TEXTEDITOR_INPUT_CLASS).length) {\n      return;\n    }\n\n    this.callBase();\n  },\n  _clean: function _clean() {\n    this._$fieldWrapper.remove();\n\n    clearTimeout(this._hideOnParentScrollTimer);\n    this._hideOnParentScrollTimer = null;\n    this._$searchBox = null;\n    this.callBase();\n  },\n  _optionChanged: function _optionChanged(args) {\n    var name = args.name,\n        fullName = args.fullName,\n        value = args.value;\n\n    switch (name) {\n      case \"dataSource\":\n        this.callBase.apply(this, arguments);\n\n        this._renderField();\n\n        break;\n\n      case \"searchEnabled\":\n        if (this._popup) {\n          this._removeSearch();\n\n          this._renderSearch();\n        }\n\n        break;\n\n      case \"searchPlaceholder\":\n        this._setSearchPlaceholder();\n\n        break;\n\n      case \"minSearchLength\":\n        this._setSearchPlaceholder();\n\n        this.callBase.apply(this, arguments);\n        break;\n\n      case \"usePopover\":\n      case \"placeholder\":\n        this._invalidate();\n\n        break;\n\n      case \"clearButtonText\":\n      case \"showClearButton\":\n      case \"showCancelButton\":\n        this._setPopupOption(\"toolbarItems\", this._getPopupToolbarItems());\n\n        break;\n\n      case \"applyValueMode\":\n        this.callBase.apply(this, arguments);\n        break;\n\n      case \"onPageLoading\":\n        this._initPageLoadingAction();\n\n        break;\n\n      case \"onPullRefresh\":\n        this._initPullRefreshAction();\n\n        break;\n\n      case \"pullRefreshEnabled\":\n      case \"useNativeScrolling\":\n      case \"pullingDownText\":\n      case \"pulledDownText\":\n      case \"refreshingText\":\n      case \"pageLoadingText\":\n      case \"nextButtonText\":\n      case \"grouped\":\n      case \"groupTemplate\":\n        this._setListOption(name);\n\n        break;\n\n      case \"onScroll\":\n        this._initScrollAction();\n\n        break;\n\n      case \"pageLoadMode\":\n        this._setListOption(\"pageLoadMode\", this.option(\"pageLoadMode\"));\n\n        break;\n\n      case \"cleanSearchOnOpening\":\n      case \"_scrollToSelectedItemEnabled\":\n        break;\n\n      case \"dropDownOptions\":\n        switch (fullName) {\n          case \"dropDownOptions.width\":\n          case \"dropDownOptions.height\":\n            this._popupOptionChanged({\n              name: name,\n              fullName: fullName,\n              value: \"auto\" === value ? this.initialOption(\"dropDownOptions\")[getFieldName(fullName)] : value\n            });\n\n            this._options.cache(\"dropDownOptions\", this.option(\"dropDownOptions\"));\n\n            break;\n\n          default:\n            this.callBase.apply(this, arguments);\n        }\n\n        break;\n\n      case \"dropDownCentered\":\n        if (this.option(\"_scrollToSelectedItemEnabled\")) {\n          this.option(\"dropDownOptions.position\", void 0);\n\n          this._renderPopup();\n        }\n\n        break;\n\n      default:\n        this.callBase.apply(this, arguments);\n    }\n  },\n  focus: function focus() {\n    this.option(\"opened\") ? this._setFocusPolicy() : eventsEngine.trigger(this._focusTarget(), \"focus\");\n  },\n  field: function field() {\n    return this._$field;\n  }\n});\nregisterComponent(\"dxLookup\", Lookup);\nexport default Lookup;","map":null,"metadata":{},"sourceType":"module"}