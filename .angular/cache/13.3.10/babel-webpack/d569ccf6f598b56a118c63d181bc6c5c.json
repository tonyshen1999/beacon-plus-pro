{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/gauges/base_indicators.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { noop } from \"../../core/utils/common\";\nimport { each } from \"../../core/utils/iterator\";\nvar _isFinite = isFinite;\nvar _Number = Number;\nvar _round = Math.round;\nimport { formatValue, getSampleText } from \"./base_gauge\";\nvar _formatValue = formatValue;\nvar _getSampleText = getSampleText;\nimport { patchFontOptions as _patchFontOptions } from \"../core/utils\";\nimport { extend } from \"../../core/utils/extend\";\nimport Class from \"../../core/class\";\nexport var BaseElement = Class.inherit({\n  ctor: function ctor(parameters) {\n    var that = this;\n    each(parameters, function (name, value) {\n      that[\"_\" + name] = value;\n    });\n\n    that._init();\n  },\n  dispose: function dispose() {\n    var that = this;\n\n    that._dispose();\n\n    each(that, function (name) {\n      that[name] = null;\n    });\n    return that;\n  },\n  getOffset: function getOffset() {\n    return _Number(this._options.offset) || 0;\n  }\n});\nexport var BaseIndicator = BaseElement.inherit({\n  _init: function _init() {\n    this._rootElement = this._createRoot().linkOn(this._owner, {\n      name: \"value-indicator\",\n      after: \"core\"\n    });\n    this._trackerElement = this._createTracker();\n  },\n  _dispose: function _dispose() {\n    this._rootElement.linkOff();\n  },\n  _setupAnimation: function _setupAnimation() {\n    var that = this;\n\n    if (that._options.animation) {\n      that._animation = {\n        step: function step(pos) {\n          that._actualValue = that._animation.start + that._animation.delta * pos;\n          that._actualPosition = that._translator.translate(that._actualValue);\n\n          that._move();\n        },\n        duration: that._options.animation.duration > 0 ? _Number(that._options.animation.duration) : 0,\n        easing: that._options.animation.easing\n      };\n    }\n  },\n  _runAnimation: function _runAnimation(value) {\n    var animation = this._animation;\n    animation.start = this._actualValue;\n    animation.delta = value - this._actualValue;\n\n    this._rootElement.animate({\n      _: 0\n    }, {\n      step: animation.step,\n      duration: animation.duration,\n      easing: animation.easing\n    });\n  },\n  _createRoot: function _createRoot() {\n    return this._renderer.g().attr({\n      class: this._className\n    });\n  },\n  _createTracker: function _createTracker() {\n    return this._renderer.path([], \"area\");\n  },\n  _getTrackerSettings: noop,\n  clean: function clean() {\n    this._animation && this._rootElement.stopAnimation();\n\n    this._rootElement.linkRemove().clear();\n\n    this._clear();\n\n    this._tracker.detach(this._trackerElement);\n\n    this._options = this.enabled = this._animation = null;\n    return this;\n  },\n  render: function render(options) {\n    this.type = options.type;\n    this._options = options;\n    this._actualValue = this._currentValue = this._translator.adjust(this._options.currentValue);\n    this.enabled = this._isEnabled();\n\n    if (this.enabled) {\n      this._setupAnimation();\n\n      this._rootElement.attr({\n        fill: this._options.color\n      }).linkAppend();\n\n      this._tracker.attach(this._trackerElement, this, this._trackerInfo);\n    }\n\n    return this;\n  },\n  resize: function resize(layout) {\n    this._rootElement.clear();\n\n    this._clear();\n\n    this.visible = this._isVisible(layout);\n\n    if (this.visible) {\n      extend(this._options, layout);\n      this._actualPosition = this._translator.translate(this._actualValue);\n\n      this._render();\n\n      this._trackerElement.attr(this._getTrackerSettings());\n\n      this._move();\n    }\n\n    return this;\n  },\n  value: function value(arg, _noAnimation) {\n    var val;\n    var rootElement = this._rootElement;\n    var visibility = null;\n\n    if (void 0 === arg) {\n      return this._currentValue;\n    }\n\n    if (null === arg) {\n      visibility = \"hidden\";\n      this._currentValue = arg;\n    } else {\n      val = this._translator.adjust(arg);\n\n      if (this._currentValue !== val && _isFinite(val)) {\n        this._currentValue = val;\n\n        if (this.visible) {\n          if (this._animation && !_noAnimation) {\n            this._runAnimation(val);\n          } else {\n            this._actualValue = val;\n            this._actualPosition = this._translator.translate(val);\n\n            this._move();\n          }\n        }\n      }\n    }\n\n    rootElement.attr({\n      visibility: visibility\n    });\n    return this;\n  },\n  _isEnabled: null,\n  _isVisible: null,\n  _render: null,\n  _clear: null,\n  _move: null\n});\nvar COEFFICIENTS_MAP = {};\nCOEFFICIENTS_MAP[\"right-bottom\"] = COEFFICIENTS_MAP.rb = [0, -1, -1, 0, 0, 1, 1, 0];\nCOEFFICIENTS_MAP[\"bottom-right\"] = COEFFICIENTS_MAP.br = [-1, 0, 0, -1, 1, 0, 0, 1];\nCOEFFICIENTS_MAP[\"left-bottom\"] = COEFFICIENTS_MAP.lb = [0, -1, 1, 0, 0, 1, -1, 0];\nCOEFFICIENTS_MAP[\"bottom-left\"] = COEFFICIENTS_MAP.bl = [1, 0, 0, -1, -1, 0, 0, 1];\nCOEFFICIENTS_MAP[\"left-top\"] = COEFFICIENTS_MAP.lt = [0, 1, 1, 0, 0, -1, -1, 0];\nCOEFFICIENTS_MAP[\"top-left\"] = COEFFICIENTS_MAP.tl = [1, 0, 0, 1, -1, 0, 0, -1];\nCOEFFICIENTS_MAP[\"right-top\"] = COEFFICIENTS_MAP.rt = [0, 1, -1, 0, 0, -1, 1, 0];\nCOEFFICIENTS_MAP[\"top-right\"] = COEFFICIENTS_MAP.tr = [-1, 0, 0, 1, 1, 0, 0, -1];\n\nfunction getTextCloudInfo(options) {\n  var x = options.x;\n  var y = options.y;\n  var type = COEFFICIENTS_MAP[options.type];\n  var cloudWidth = options.cloudWidth;\n  var cloudHeight = options.cloudHeight;\n  var tailWidth;\n  var tailHeight;\n  var cx = x;\n  var cy = y;\n  tailWidth = tailHeight = options.tailLength;\n\n  if (1 & type[0]) {\n    tailHeight = Math.min(tailHeight, cloudHeight / 3);\n  } else {\n    tailWidth = Math.min(tailWidth, cloudWidth / 3);\n  }\n\n  return {\n    cx: _round(cx + type[0] * tailWidth + (type[0] + type[2]) * cloudWidth / 2),\n    cy: _round(cy + type[1] * tailHeight + (type[1] + type[3]) * cloudHeight / 2),\n    points: [_round(x), _round(y), _round(x += type[0] * (cloudWidth + tailWidth)), _round(y += type[1] * (cloudHeight + tailHeight)), _round(x += type[2] * cloudWidth), _round(y += type[3] * cloudHeight), _round(x += type[4] * cloudWidth), _round(y += type[5] * cloudHeight), _round(x += type[6] * (cloudWidth - tailWidth)), _round(y += type[7] * (cloudHeight - tailHeight))]\n  };\n}\n\nexport var BaseTextCloudMarker = BaseIndicator.inherit({\n  _move: function _move() {\n    var options = this._options;\n\n    var textCloudOptions = this._getTextCloudOptions();\n\n    var text = _formatValue(this._actualValue, options.text);\n\n    this._text.attr({\n      text: text\n    });\n\n    var bBox = this._text.getBBox();\n\n    var x = textCloudOptions.x;\n    var y = textCloudOptions.y;\n    var cloudWidth = (bBox.width || text.length * this._textUnitWidth) + 2 * options.horizontalOffset;\n    var cloudHeight = (bBox.height || this._textHeight) + 2 * options.verticalOffset;\n    var info = getTextCloudInfo({\n      x: x,\n      y: y,\n      cloudWidth: cloudWidth,\n      cloudHeight: cloudHeight,\n      tailLength: options.arrowLength,\n      type: this._correctCloudType(textCloudOptions.type, {\n        x: x,\n        y: y\n      }, {\n        width: cloudWidth,\n        height: cloudHeight\n      })\n    });\n\n    this._text.attr({\n      x: info.cx,\n      y: info.cy + this._textVerticalOffset\n    });\n\n    this._cloud.attr({\n      points: info.points\n    });\n\n    this._trackerElement && this._trackerElement.attr({\n      points: info.points\n    });\n  },\n  _measureText: function _measureText() {\n    var root;\n    var text;\n    var bBox;\n    var sampleText;\n\n    if (!this._textVerticalOffset) {\n      root = this._createRoot().append(this._owner);\n      sampleText = _getSampleText(this._translator, this._options.text);\n      text = this._renderer.text(sampleText, 0, 0).attr({\n        align: \"center\"\n      }).css(_patchFontOptions(this._options.text.font)).append(root);\n      bBox = text.getBBox();\n      root.remove();\n      this._textVerticalOffset = -bBox.y - bBox.height / 2;\n      this._textWidth = bBox.width;\n      this._textHeight = bBox.height;\n      this._textUnitWidth = this._textWidth / sampleText.length;\n      this._textFullWidth = this._textWidth + 2 * this._options.horizontalOffset;\n      this._textFullHeight = this._textHeight + 2 * this._options.verticalOffset;\n    }\n  },\n  _render: function _render() {\n    this._measureText();\n\n    this._cloud = this._cloud || this._renderer.path([], \"area\").append(this._rootElement);\n    this._text = this._text || this._renderer.text().append(this._rootElement);\n\n    this._text.attr({\n      align: \"center\"\n    }).css(_patchFontOptions(this._options.text.font));\n  },\n  _clear: function _clear() {\n    delete this._cloud;\n    delete this._text;\n  },\n  getTooltipParameters: function getTooltipParameters() {\n    var position = this._getTextCloudOptions();\n\n    return {\n      x: position.x,\n      y: position.y,\n      value: this._currentValue,\n      color: this._options.color\n    };\n  },\n  _correctCloudType: function _correctCloudType(type) {\n    return type;\n  }\n});\nexport var BaseRangeBar = BaseIndicator.inherit({\n  _measureText: function _measureText() {\n    var root;\n    var text;\n    var bBox;\n    this._hasText = this._isTextVisible();\n\n    if (this._hasText && !this._textVerticalOffset) {\n      root = this._createRoot().append(this._owner);\n      text = this._renderer.text(_getSampleText(this._translator, this._options.text), 0, 0).attr({\n        class: \"dxg-text\",\n        align: \"center\"\n      }).css(_patchFontOptions(this._options.text.font)).append(root);\n      bBox = text.getBBox();\n      root.remove();\n      this._textVerticalOffset = -bBox.y - bBox.height / 2;\n      this._textWidth = bBox.width;\n      this._textHeight = bBox.height;\n    }\n  },\n  _move: function _move() {\n    this._updateBarItemsPositions();\n\n    if (this._hasText) {\n      this._text.attr({\n        text: _formatValue(this._actualValue, this._options.text)\n      });\n\n      this._updateTextPosition();\n\n      this._updateLinePosition();\n    }\n  },\n  _updateBarItems: function _updateBarItems() {\n    var options = this._options;\n    var spaceColor;\n    var translator = this._translator;\n\n    this._setBarSides();\n\n    this._startPosition = translator.translate(translator.getDomainStart());\n    this._endPosition = translator.translate(translator.getDomainEnd());\n    this._basePosition = translator.translate(options.baseValue);\n    this._space = this._getSpace();\n    var backgroundColor = options.backgroundColor || \"none\";\n\n    if (\"none\" !== backgroundColor && this._space > 0) {\n      spaceColor = options.containerBackgroundColor || \"none\";\n    } else {\n      this._space = 0;\n      spaceColor = \"none\";\n    }\n\n    this._backItem1.attr({\n      fill: backgroundColor\n    });\n\n    this._backItem2.attr({\n      fill: backgroundColor\n    });\n\n    this._spaceItem1.attr({\n      fill: spaceColor\n    });\n\n    this._spaceItem2.attr({\n      fill: spaceColor\n    });\n  },\n  _getSpace: function _getSpace() {\n    return 0;\n  },\n  _updateTextItems: function _updateTextItems() {\n    if (this._hasText) {\n      this._line = this._line || this._renderer.path([], \"line\").attr({\n        class: \"dxg-main-bar\",\n        \"stroke-linecap\": \"square\"\n      }).append(this._rootElement);\n      this._text = this._text || this._renderer.text(\"\", 0, 0).attr({\n        class: \"dxg-text\"\n      }).append(this._rootElement);\n\n      this._text.attr({\n        align: this._getTextAlign()\n      }).css(this._getFontOptions());\n\n      this._setTextItemsSides();\n    } else {\n      if (this._line) {\n        this._line.remove();\n\n        delete this._line;\n      }\n\n      if (this._text) {\n        this._text.remove();\n\n        delete this._text;\n      }\n    }\n  },\n  _isTextVisible: function _isTextVisible() {\n    return false;\n  },\n  _getTextAlign: function _getTextAlign() {\n    return \"center\";\n  },\n  _getFontOptions: function _getFontOptions() {\n    var options = this._options;\n    var font = options.text.font;\n\n    if (!font || !font.color) {\n      font = extend({}, font, {\n        color: options.color\n      });\n    }\n\n    return _patchFontOptions(font);\n  },\n  _updateBarItemsPositions: function _updateBarItemsPositions() {\n    var positions = this._getPositions();\n\n    this._backItem1.attr(this._buildItemSettings(positions.start, positions.back1));\n\n    this._backItem2.attr(this._buildItemSettings(positions.back2, positions.end));\n\n    this._spaceItem1.attr(this._buildItemSettings(positions.back1, positions.main1));\n\n    this._spaceItem2.attr(this._buildItemSettings(positions.main2, positions.back2));\n\n    this._mainItem.attr(this._buildItemSettings(positions.main1, positions.main2));\n\n    this._trackerElement && this._trackerElement.attr(this._buildItemSettings(positions.main1, positions.main2));\n  },\n  _render: function _render() {\n    this._measureText();\n\n    if (!this._backItem1) {\n      this._backItem1 = this._createBarItem();\n\n      this._backItem1.attr({\n        class: \"dxg-back-bar\"\n      });\n    }\n\n    if (!this._backItem2) {\n      this._backItem2 = this._createBarItem();\n\n      this._backItem2.attr({\n        class: \"dxg-back-bar\"\n      });\n    }\n\n    if (!this._spaceItem1) {\n      this._spaceItem1 = this._createBarItem();\n\n      this._spaceItem1.attr({\n        class: \"dxg-space-bar\"\n      });\n    }\n\n    if (!this._spaceItem2) {\n      this._spaceItem2 = this._createBarItem();\n\n      this._spaceItem2.attr({\n        class: \"dxg-space-bar\"\n      });\n    }\n\n    if (!this._mainItem) {\n      this._mainItem = this._createBarItem();\n\n      this._mainItem.attr({\n        class: \"dxg-main-bar\"\n      });\n    }\n\n    this._updateBarItems();\n\n    this._updateTextItems();\n  },\n  _clear: function _clear() {\n    delete this._backItem1;\n    delete this._backItem2;\n    delete this._spaceItem1;\n    delete this._spaceItem2;\n    delete this._mainItem;\n    delete this._hasText;\n    delete this._line;\n    delete this._text;\n  },\n  getTooltipParameters: function getTooltipParameters() {\n    var position = this._getTooltipPosition();\n\n    return {\n      x: position.x,\n      y: position.y,\n      value: this._currentValue,\n      color: this._options.color,\n      offset: 0\n    };\n  }\n});","map":null,"metadata":{},"sourceType":"module"}