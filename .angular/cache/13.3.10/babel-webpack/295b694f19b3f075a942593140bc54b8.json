{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.filter_sync.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { isDefined } from \"../../core/utils/type\";\nimport modules from \"./ui.grid_core.modules\";\nimport { getDefaultOperation, getMatchedConditions, syncFilters, removeFieldConditionsFromFilter, addItem, getNormalizedFilter, getFilterExpression, filterHasField } from \"../filter_builder/utils\";\nimport errors from \"../widget/ui.errors\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nimport filterUtils from \"../shared/filtering\";\nimport { anyOf, noneOf } from \"./ui.grid_core.filter_custom_operations\";\nvar FILTER_ROW_OPERATIONS = [\"=\", \"<>\", \"<\", \"<=\", \">\", \">=\", \"notcontains\", \"contains\", \"startswith\", \"endswith\", \"between\"];\nvar FILTER_TYPES_INCLUDE = \"include\";\nvar FILTER_TYPES_EXCLUDE = \"exclude\";\n\nfunction getColumnIdentifier(column) {\n  return column.name || column.dataField;\n}\n\nfunction checkForErrors(columns) {\n  columns.forEach(function (column) {\n    var identifier = getColumnIdentifier(column);\n\n    if (!isDefined(identifier) && column.allowFiltering) {\n      throw new errors.Error(\"E1049\", column.caption);\n    }\n  });\n}\n\nvar FilterSyncController = modules.Controller.inherit(function () {\n  var getEmptyFilterValues = function getEmptyFilterValues() {\n    return {\n      filterType: FILTER_TYPES_INCLUDE,\n      filterValues: void 0\n    };\n  };\n\n  var canSyncHeaderFilterWithFilterRow = function canSyncHeaderFilterWithFilterRow(column) {\n    var filterValues = column.filterValues || [];\n    return !filterUtils.getGroupInterval(column) && !(column.headerFilter && column.headerFilter.dataSource) || 1 === filterValues.length && null === filterValues[0];\n  };\n\n  var getConditionFromFilterRow = function getConditionFromFilterRow(column) {\n    var value = column.filterValue;\n\n    if (isDefined(value)) {\n      var operation = column.selectedFilterOperation || column.defaultFilterOperation || getDefaultOperation(column);\n      var filter = [getColumnIdentifier(column), operation, column.filterValue];\n      return filter;\n    } else {\n      return null;\n    }\n  };\n\n  var getConditionFromHeaderFilter = function getConditionFromHeaderFilter(column) {\n    var selectedOperation;\n    var value;\n    var filterValues = column.filterValues;\n\n    if (!filterValues) {\n      return null;\n    }\n\n    if (1 === filterValues.length && canSyncHeaderFilterWithFilterRow(column) && !Array.isArray(filterValues[0])) {\n      column.filterType === FILTER_TYPES_EXCLUDE ? selectedOperation = \"<>\" : selectedOperation = \"=\";\n      value = filterValues[0];\n    } else {\n      column.filterType === FILTER_TYPES_EXCLUDE ? selectedOperation = \"noneof\" : selectedOperation = \"anyof\";\n      value = filterValues;\n    }\n\n    return [getColumnIdentifier(column), selectedOperation, value];\n  };\n\n  var updateHeaderFilterCondition = function updateHeaderFilterCondition(columnsController, column, headerFilterCondition) {\n    var headerFilter = function (headerFilterCondition, column) {\n      if (!headerFilterCondition) {\n        return getEmptyFilterValues();\n      }\n\n      var filterType;\n      var selectedFilterOperation = headerFilterCondition[1];\n      var value = headerFilterCondition[2];\n      var hasArrayValue = Array.isArray(value);\n\n      if (!hasArrayValue) {\n        if (!canSyncHeaderFilterWithFilterRow(column)) {\n          return getEmptyFilterValues();\n        }\n      }\n\n      switch (selectedFilterOperation) {\n        case \"anyof\":\n        case \"=\":\n          filterType = FILTER_TYPES_INCLUDE;\n          break;\n\n        case \"noneof\":\n        case \"<>\":\n          filterType = FILTER_TYPES_EXCLUDE;\n          break;\n\n        default:\n          return getEmptyFilterValues();\n      }\n\n      return {\n        filterType: filterType,\n        filterValues: hasArrayValue ? value : [value]\n      };\n    }(headerFilterCondition, column);\n\n    columnsController.columnOption(getColumnIdentifier(column), headerFilter);\n  };\n\n  var updateFilterRowCondition = function updateFilterRowCondition(columnsController, column, condition) {\n    var filterRowOptions;\n    var selectedFilterOperation = null === condition || void 0 === condition ? void 0 : condition[1];\n    var filterValue = null === condition || void 0 === condition ? void 0 : condition[2];\n    var filterOperations = column.filterOperations || column.defaultFilterOperations;\n\n    if ((!filterOperations || filterOperations.indexOf(selectedFilterOperation) >= 0 || selectedFilterOperation === column.defaultFilterOperation) && FILTER_ROW_OPERATIONS.indexOf(selectedFilterOperation) >= 0 && null !== filterValue) {\n      if (selectedFilterOperation === column.defaultFilterOperation && !isDefined(column.selectedFilterOperation)) {\n        selectedFilterOperation = column.selectedFilterOperation;\n      }\n\n      filterRowOptions = {\n        filterValue: filterValue,\n        selectedFilterOperation: selectedFilterOperation\n      };\n    } else {\n      filterRowOptions = {\n        filterValue: void 0,\n        selectedFilterOperation: void 0\n      };\n    }\n\n    columnsController.columnOption(getColumnIdentifier(column), filterRowOptions);\n  };\n\n  return {\n    syncFilterValue: function syncFilterValue() {\n      var that = this;\n      var columnsController = that.getController(\"columns\");\n      var columns = columnsController.getFilteringColumns();\n      this._skipSyncColumnOptions = true;\n      columns.forEach(function (column) {\n        var filterConditions = getMatchedConditions(that.option(\"filterValue\"), getColumnIdentifier(column));\n\n        if (1 === filterConditions.length) {\n          var filterCondition = filterConditions[0];\n          updateHeaderFilterCondition(columnsController, column, filterCondition);\n          updateFilterRowCondition(columnsController, column, filterCondition);\n        } else {\n          isDefined(column.filterValues) && updateHeaderFilterCondition(columnsController, column);\n          isDefined(column.filterValue) && updateFilterRowCondition(columnsController, column);\n        }\n      });\n      this._skipSyncColumnOptions = false;\n    },\n    _initSync: function _initSync() {\n      var columns = this.getController(\"columns\").getColumns();\n      var dataController = this.getController(\"data\");\n      var pageIndex = dataController.pageIndex();\n      checkForErrors(columns);\n\n      if (!this.option(\"filterValue\")) {\n        var filteringColumns = this.getController(\"columns\").getFilteringColumns();\n        var filterValue = this.getFilterValueFromColumns(filteringColumns);\n        this.option(\"filterValue\", filterValue);\n      }\n\n      this.syncFilterValue();\n      dataController.pageIndex(pageIndex);\n    },\n    init: function init() {\n      var _this = this;\n\n      var dataController = this.getController(\"data\");\n\n      if (dataController.isFilterSyncActive()) {\n        if (this.getController(\"columns\").isAllDataTypesDefined()) {\n          this._initSync();\n        } else {\n          dataController.dataSourceChanged.add(function () {\n            return _this._initSync();\n          });\n        }\n      }\n    },\n    _getSyncFilterRow: function _getSyncFilterRow(filterValue, column) {\n      var filter = getConditionFromFilterRow(column);\n\n      if (isDefined(filter)) {\n        return syncFilters(filterValue, filter);\n      } else {\n        return removeFieldConditionsFromFilter(filterValue, getColumnIdentifier(column));\n      }\n    },\n    _getSyncHeaderFilter: function _getSyncHeaderFilter(filterValue, column) {\n      var filter = getConditionFromHeaderFilter(column);\n\n      if (filter) {\n        return syncFilters(filterValue, filter);\n      } else {\n        return removeFieldConditionsFromFilter(filterValue, getColumnIdentifier(column));\n      }\n    },\n    getFilterValueFromColumns: function getFilterValueFromColumns(columns) {\n      if (!this.getController(\"data\").isFilterSyncActive()) {\n        return null;\n      }\n\n      var filterValue = [\"and\"];\n      columns && columns.forEach(function (column) {\n        var headerFilter = getConditionFromHeaderFilter(column);\n        var filterRow = getConditionFromFilterRow(column);\n        headerFilter && addItem(headerFilter, filterValue);\n        filterRow && addItem(filterRow, filterValue);\n      });\n      return getNormalizedFilter(filterValue);\n    },\n    syncFilterRow: function syncFilterRow(column, value) {\n      this.option(\"filterValue\", this._getSyncFilterRow(this.option(\"filterValue\"), column));\n    },\n    syncHeaderFilter: function syncHeaderFilter(column) {\n      this.option(\"filterValue\", this._getSyncHeaderFilter(this.option(\"filterValue\"), column));\n    },\n    getCustomFilterOperations: function getCustomFilterOperations() {\n      var filterBuilderCustomOperations = this.option(\"filterBuilder.customOperations\") || [];\n      return [anyOf(this.component), noneOf(this.component)].concat(filterBuilderCustomOperations);\n    },\n    publicMethods: function publicMethods() {\n      return [\"getCustomFilterOperations\"];\n    }\n  };\n}());\nvar DataControllerFilterSyncExtender = {\n  isFilterSyncActive: function isFilterSyncActive() {\n    var filterSyncEnabledValue = this.option(\"filterSyncEnabled\");\n    return \"auto\" === filterSyncEnabledValue ? this.option(\"filterPanel.visible\") : filterSyncEnabledValue;\n  },\n  skipCalculateColumnFilters: function skipCalculateColumnFilters() {\n    return isDefined(this.option(\"filterValue\")) && this.isFilterSyncActive();\n  },\n  _calculateAdditionalFilter: function _calculateAdditionalFilter() {\n    if (false === this.option(\"filterPanel.filterEnabled\")) {\n      return this.callBase();\n    }\n\n    var filters = [this.callBase()];\n    var columns = this.getController(\"columns\").getFilteringColumns();\n    var filterValue = this.option(\"filterValue\");\n\n    if (this.isFilterSyncActive()) {\n      var currentColumn = this.getController(\"headerFilter\").getCurrentColumn();\n\n      if (currentColumn && filterValue) {\n        filterValue = removeFieldConditionsFromFilter(filterValue, getColumnIdentifier(currentColumn));\n      }\n    }\n\n    var customOperations = this.getController(\"filterSync\").getCustomFilterOperations();\n    var calculatedFilterValue = getFilterExpression(filterValue, columns, customOperations, \"filterBuilder\");\n\n    if (calculatedFilterValue) {\n      filters.push(calculatedFilterValue);\n    }\n\n    return gridCoreUtils.combineFilters(filters);\n  },\n  _parseColumnPropertyName: function _parseColumnPropertyName(fullName) {\n    var matched = fullName.match(/.*\\.(.*)/);\n\n    if (matched) {\n      return matched[1];\n    } else {\n      return null;\n    }\n  },\n  clearFilter: function clearFilter(filterName) {\n    this.component.beginUpdate();\n\n    if (arguments.length > 0) {\n      if (\"filterValue\" === filterName) {\n        this.option(\"filterValue\", null);\n      }\n\n      this.callBase(filterName);\n    } else {\n      this.option(\"filterValue\", null);\n      this.callBase();\n    }\n\n    this.component.endUpdate();\n  },\n  optionChanged: function optionChanged(args) {\n    switch (args.name) {\n      case \"filterValue\":\n        this._applyFilter();\n\n        this.isFilterSyncActive() && this.getController(\"filterSync\").syncFilterValue();\n        args.handled = true;\n        break;\n\n      case \"filterSyncEnabled\":\n        args.handled = true;\n        break;\n\n      case \"columns\":\n        if (this.isFilterSyncActive()) {\n          var column = this.getController(\"columns\").getColumnByPath(args.fullName);\n          var filterSyncController = this.getController(\"filterSync\");\n\n          if (column && !filterSyncController._skipSyncColumnOptions) {\n            var propertyName = this._parseColumnPropertyName(args.fullName);\n\n            filterSyncController._skipSyncColumnOptions = true;\n\n            if (\"filterType\" === propertyName) {\n              if (FILTER_TYPES_EXCLUDE === args.value || FILTER_TYPES_EXCLUDE === args.previousValue) {\n                filterSyncController.syncHeaderFilter(column);\n              }\n            } else if (\"filterValues\" === propertyName) {\n              filterSyncController.syncHeaderFilter(column);\n            } else if ([\"filterValue\", \"selectedFilterOperation\"].indexOf(propertyName) > -1) {\n              filterSyncController.syncFilterRow(column, column.filterValue);\n            }\n\n            filterSyncController._skipSyncColumnOptions = false;\n          }\n        }\n\n        this.callBase(args);\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  }\n};\nvar ColumnHeadersViewFilterSyncExtender = {\n  _isHeaderFilterEmpty: function _isHeaderFilterEmpty(column) {\n    if (this.getController(\"data\").isFilterSyncActive()) {\n      return !filterHasField(this.option(\"filterValue\"), getColumnIdentifier(column));\n    }\n\n    return this.callBase(column);\n  },\n  _needUpdateFilterIndicators: function _needUpdateFilterIndicators() {\n    return !this.getController(\"data\").isFilterSyncActive();\n  },\n  optionChanged: function optionChanged(args) {\n    if (\"filterValue\" === args.name) {\n      this._updateHeaderFilterIndicators();\n    } else {\n      this.callBase(args);\n    }\n  }\n};\nexport var filterSyncModule = {\n  defaultOptions: function defaultOptions() {\n    return {\n      filterValue: null,\n      filterSyncEnabled: \"auto\"\n    };\n  },\n  controllers: {\n    filterSync: FilterSyncController\n  },\n  extenders: {\n    controllers: {\n      data: DataControllerFilterSyncExtender\n    },\n    views: {\n      columnHeadersView: ColumnHeadersViewFilterSyncExtender\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}