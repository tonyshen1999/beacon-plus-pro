{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/editor/editor.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { data } from \"../../core/element_data\";\nimport Callbacks from \"../../core/utils/callbacks\";\nimport { hasWindow } from \"../../core/utils/window\";\nimport { addNamespace, normalizeKeyName } from \"../../events/utils/index\";\nimport { extend } from \"../../core/utils/extend\";\nimport Widget from \"../widget/ui.widget\";\nimport ValidationEngine from \"../validation_engine\";\nimport EventsEngine from \"../../events/core/events_engine\";\nimport ValidationMessage from \"../validation_message\";\nimport Guid from \"../../core/guid\";\nimport { noop } from \"../../core/utils/common\";\nimport { resetActiveElement } from \"../../core/utils/dom\";\nvar INVALID_MESSAGE_AUTO = \"dx-invalid-message-auto\";\nvar READONLY_STATE_CLASS = \"dx-state-readonly\";\nvar INVALID_CLASS = \"dx-invalid\";\nvar DX_INVALID_BADGE_CLASS = \"dx-show-invalid-badge\";\nvar VALIDATION_TARGET = \"dx-validation-target\";\nvar VALIDATION_STATUS_VALID = \"valid\";\nvar VALIDATION_STATUS_INVALID = \"invalid\";\nvar READONLY_NAMESPACE = \"editorReadOnly\";\nvar ALLOWED_STYLING_MODES = [\"outlined\", \"filled\", \"underlined\"];\nvar VALIDATION_MESSAGE_KEYS_MAP = {\n  validationMessageMode: \"mode\",\n  validationMessageOffset: \"offset\",\n  validationBoundary: \"boundary\"\n};\nvar Editor = Widget.inherit({\n  ctor: function ctor() {\n    this.showValidationMessageTimeout = null;\n    this.validationRequest = Callbacks();\n    this.callBase.apply(this, arguments);\n  },\n  _createElement: function _createElement(element) {\n    this.callBase(element);\n    var $element = this.$element();\n\n    if ($element) {\n      data($element[0], VALIDATION_TARGET, this);\n    }\n  },\n  _initOptions: function _initOptions(options) {\n    this.callBase.apply(this, arguments);\n    this.option(ValidationEngine.initValidationOptions(options));\n  },\n  _init: function _init() {\n    this.callBase();\n\n    this._options.cache(\"validationTooltipOptions\", this.option(\"validationTooltipOptions\"));\n\n    var $element = this.$element();\n    $element.addClass(DX_INVALID_BADGE_CLASS);\n  },\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      value: null,\n      name: \"\",\n      onValueChanged: null,\n      readOnly: false,\n      isValid: true,\n      validationError: null,\n      validationErrors: null,\n      validationStatus: VALIDATION_STATUS_VALID,\n      validationMessageMode: \"auto\",\n      validationBoundary: void 0,\n      validationMessageOffset: {\n        h: 0,\n        v: 0\n      },\n      validationTooltipOptions: {}\n    });\n  },\n  _attachKeyboardEvents: function _attachKeyboardEvents() {\n    if (!this.option(\"readOnly\")) {\n      this.callBase();\n    }\n  },\n  _setOptionsByReference: function _setOptionsByReference() {\n    this.callBase();\n    extend(this._optionsByReference, {\n      validationError: true\n    });\n  },\n  _createValueChangeAction: function _createValueChangeAction() {\n    this._valueChangeAction = this._createActionByOption(\"onValueChanged\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n  },\n  _suppressValueChangeAction: function _suppressValueChangeAction() {\n    this._valueChangeActionSuppressed = true;\n  },\n  _resumeValueChangeAction: function _resumeValueChangeAction() {\n    this._valueChangeActionSuppressed = false;\n  },\n  _initMarkup: function _initMarkup() {\n    var _this$option;\n\n    this._toggleReadOnlyState();\n\n    this._setSubmitElementName(this.option(\"name\"));\n\n    this.callBase();\n\n    this._renderValidationState();\n\n    null === (_this$option = this.option(\"_onMarkupRendered\")) || void 0 === _this$option ? void 0 : _this$option();\n  },\n  _raiseValueChangeAction: function _raiseValueChangeAction(value, previousValue) {\n    if (!this._valueChangeAction) {\n      this._createValueChangeAction();\n    }\n\n    this._valueChangeAction(this._valueChangeArgs(value, previousValue));\n  },\n  _valueChangeArgs: function _valueChangeArgs(value, previousValue) {\n    return {\n      value: value,\n      previousValue: previousValue,\n      event: this._valueChangeEventInstance\n    };\n  },\n  _saveValueChangeEvent: function _saveValueChangeEvent(e) {\n    this._valueChangeEventInstance = e;\n  },\n  _focusInHandler: function _focusInHandler(e) {\n    var isValidationMessageShownOnFocus = \"auto\" === this.option(\"validationMessageMode\");\n\n    if (this._canValueBeChangedByClick() && isValidationMessageShownOnFocus) {\n      var _this$_validationMess;\n\n      var $validationMessageWrapper = null === (_this$_validationMess = this._validationMessage) || void 0 === _this$_validationMess ? void 0 : _this$_validationMess.$wrapper();\n      null === $validationMessageWrapper || void 0 === $validationMessageWrapper ? void 0 : $validationMessageWrapper.removeClass(INVALID_MESSAGE_AUTO);\n      clearTimeout(this.showValidationMessageTimeout);\n      this.showValidationMessageTimeout = setTimeout(function () {\n        return null === $validationMessageWrapper || void 0 === $validationMessageWrapper ? void 0 : $validationMessageWrapper.addClass(INVALID_MESSAGE_AUTO);\n      }, 150);\n    }\n\n    return this.callBase(e);\n  },\n  _canValueBeChangedByClick: function _canValueBeChangedByClick() {\n    return false;\n  },\n  _getStylingModePrefix: function _getStylingModePrefix() {\n    return \"dx-editor-\";\n  },\n  _renderStylingMode: function _renderStylingMode() {\n    var _this = this;\n\n    var optionValue = this.option(\"stylingMode\");\n\n    var prefix = this._getStylingModePrefix();\n\n    var allowedStylingClasses = ALLOWED_STYLING_MODES.map(function (mode) {\n      return prefix + mode;\n    });\n    allowedStylingClasses.forEach(function (className) {\n      return _this.$element().removeClass(className);\n    });\n    var stylingModeClass = prefix + optionValue;\n\n    if (-1 === allowedStylingClasses.indexOf(stylingModeClass)) {\n      var defaultOptionValue = this._getDefaultOptions().stylingMode;\n\n      var platformOptionValue = this._convertRulesToOptions(this._defaultOptionsRules()).stylingMode;\n\n      stylingModeClass = prefix + (platformOptionValue || defaultOptionValue);\n    }\n\n    this.$element().addClass(stylingModeClass);\n  },\n  _getValidationErrors: function _getValidationErrors() {\n    var validationErrors = this.option(\"validationErrors\");\n\n    if (!validationErrors && this.option(\"validationError\")) {\n      validationErrors = [this.option(\"validationError\")];\n    }\n\n    return validationErrors;\n  },\n  _disposeValidationMessage: function _disposeValidationMessage() {\n    if (this._$validationMessage) {\n      this._$validationMessage.remove();\n\n      this.setAria(\"describedby\", null);\n      this._$validationMessage = void 0;\n      this._validationMessage = void 0;\n    }\n  },\n  _toggleValidationClasses: function _toggleValidationClasses(isInvalid) {\n    this.$element().toggleClass(INVALID_CLASS, isInvalid);\n    this.setAria(VALIDATION_STATUS_INVALID, isInvalid || void 0);\n  },\n  _renderValidationState: function _renderValidationState() {\n    var isValid = this.option(\"isValid\") && this.option(\"validationStatus\") !== VALIDATION_STATUS_INVALID;\n\n    var validationErrors = this._getValidationErrors();\n\n    var $element = this.$element();\n\n    this._toggleValidationClasses(!isValid);\n\n    if (!hasWindow()) {\n      return;\n    }\n\n    this._disposeValidationMessage();\n\n    if (!isValid && validationErrors) {\n      var _this$option2 = this.option(),\n          validationMessageMode = _this$option2.validationMessageMode,\n          validationMessageOffset = _this$option2.validationMessageOffset,\n          validationBoundary = _this$option2.validationBoundary,\n          rtlEnabled = _this$option2.rtlEnabled;\n\n      this._$validationMessage = $(\"<div>\").appendTo($element);\n      var validationMessageContentId = \"dx-\".concat(new Guid());\n      this.setAria(\"describedby\", validationMessageContentId);\n      this._validationMessage = new ValidationMessage(this._$validationMessage, extend({\n        validationErrors: validationErrors,\n        rtlEnabled: rtlEnabled,\n        target: this._getValidationMessageTarget(),\n        container: $element,\n        mode: validationMessageMode,\n        positionRequest: \"below\",\n        offset: validationMessageOffset,\n        boundary: validationBoundary,\n        contentId: validationMessageContentId\n      }, this._options.cache(\"validationTooltipOptions\")));\n\n      this._bindInnerWidgetOptions(this._validationMessage, \"validationTooltipOptions\");\n    }\n  },\n  _getValidationMessageTarget: function _getValidationMessageTarget() {\n    return this.$element();\n  },\n  _toggleReadOnlyState: function _toggleReadOnlyState() {\n    var readOnly = this.option(\"readOnly\");\n\n    this._toggleBackspaceHandler(readOnly);\n\n    this.$element().toggleClass(READONLY_STATE_CLASS, !!readOnly);\n    this.setAria(\"readonly\", readOnly || void 0);\n  },\n  _toggleBackspaceHandler: function _toggleBackspaceHandler(isReadOnly) {\n    var $eventTarget = this._keyboardEventBindingTarget();\n\n    var eventName = addNamespace(\"keydown\", READONLY_NAMESPACE);\n    EventsEngine.off($eventTarget, eventName);\n\n    if (isReadOnly) {\n      EventsEngine.on($eventTarget, eventName, function (e) {\n        if (\"backspace\" === normalizeKeyName(e)) {\n          e.preventDefault();\n        }\n      });\n    }\n  },\n  _dispose: function _dispose() {\n    var element = this.$element()[0];\n    data(element, VALIDATION_TARGET, null);\n    clearTimeout(this.showValidationMessageTimeout);\n\n    this._disposeValidationMessage();\n\n    this.callBase();\n  },\n  _setSubmitElementName: function _setSubmitElementName(name) {\n    var $submitElement = this._getSubmitElement();\n\n    if (!$submitElement) {\n      return;\n    }\n\n    if (name.length > 0) {\n      $submitElement.attr(\"name\", name);\n    } else {\n      $submitElement.removeAttr(\"name\");\n    }\n  },\n  _getSubmitElement: function _getSubmitElement() {\n    return null;\n  },\n  _setValidationMessageOption: function _setValidationMessageOption(_ref) {\n    var _this$_validationMess2;\n\n    var name = _ref.name,\n        value = _ref.value;\n    var optionKey = VALIDATION_MESSAGE_KEYS_MAP[name] ? VALIDATION_MESSAGE_KEYS_MAP[name] : name;\n    null === (_this$_validationMess2 = this._validationMessage) || void 0 === _this$_validationMess2 ? void 0 : _this$_validationMess2.option(optionKey, value);\n  },\n  _hasActiveElement: noop,\n  _optionChanged: function _optionChanged(args) {\n    var _this$_validationMess3;\n\n    switch (args.name) {\n      case \"onValueChanged\":\n        this._createValueChangeAction();\n\n        break;\n\n      case \"readOnly\":\n        this._toggleReadOnlyState();\n\n        this._refreshFocusState();\n\n        break;\n\n      case \"value\":\n        if (args.value != args.previousValue) {\n          this.validationRequest.fire({\n            value: args.value,\n            editor: this\n          });\n        }\n\n        if (!this._valueChangeActionSuppressed) {\n          this._raiseValueChangeAction(args.value, args.previousValue);\n\n          this._saveValueChangeEvent(void 0);\n        }\n\n        break;\n\n      case \"width\":\n        this.callBase(args);\n        null === (_this$_validationMess3 = this._validationMessage) || void 0 === _this$_validationMess3 ? void 0 : _this$_validationMess3.updateMaxWidth();\n        break;\n\n      case \"name\":\n        this._setSubmitElementName(args.value);\n\n        break;\n\n      case \"isValid\":\n      case \"validationError\":\n      case \"validationErrors\":\n      case \"validationStatus\":\n        this.option(ValidationEngine.synchronizeValidationOptions(args, this.option()));\n\n        this._renderValidationState();\n\n        break;\n\n      case \"validationBoundary\":\n      case \"validationMessageMode\":\n      case \"validationMessageOffset\":\n        this._setValidationMessageOption(args);\n\n        break;\n\n      case \"rtlEnabled\":\n        this._setValidationMessageOption(args);\n\n        this.callBase(args);\n        break;\n\n      case \"validationTooltipOptions\":\n        this._innerWidgetOptionChanged(this._validationMessage, args);\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  blur: function blur() {\n    if (this._hasActiveElement()) {\n      resetActiveElement();\n    }\n  },\n  reset: function reset() {\n    var defaultOptions = this._getDefaultOptions();\n\n    this.option(\"value\", defaultOptions.value);\n  }\n});\n\nEditor.isEditor = function (instance) {\n  return instance instanceof Editor;\n};\n\nexport default Editor;","map":null,"metadata":{},"sourceType":"module"}