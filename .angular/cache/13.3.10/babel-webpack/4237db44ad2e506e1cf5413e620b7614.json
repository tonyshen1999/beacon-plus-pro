{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/sankey/sankey.js)\r\n * Version: 21.2.6\r\n * Build date: Tue Mar 01 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { COLOR_MODE_GRADIENT, COLOR_MODE_SOURCE, COLOR_MODE_TARGET } from \"./constants\";\nimport { noop } from \"../../core/utils/common\";\nimport Node from \"./node_item\";\nimport Link from \"./link_item\";\nimport { layout as defaultLayoutBuilder } from \"./layout\";\nimport { isString as _isString, isNumeric as _isNumber } from \"../../core/utils/type\";\nimport baseWidget from \"../core/base_widget\";\nimport componentRegistrator from \"../../core/component_registrator\";\n\nfunction moveLabel(node, labelOptions, availableLabelWidth, rect) {\n  if (node._label.getBBox().width > availableLabelWidth) {\n    node.labelText.applyEllipsis(availableLabelWidth);\n  }\n\n  var bBox = node._label.getBBox();\n\n  var verticalOffset = labelOptions.verticalOffset;\n  var horizontalOffset = labelOptions.horizontalOffset;\n  var labelOffsetY = Math.round(node.rect.y + node.rect.height / 2 - bBox.y - bBox.height / 2) + verticalOffset;\n  var labelOffsetX = node.rect.x + horizontalOffset + node.rect.width - bBox.x;\n\n  if (labelOffsetX + bBox.width >= rect[2] - rect[0]) {\n    labelOffsetX = node.rect.x - horizontalOffset - bBox.x - bBox.width;\n  }\n\n  if (labelOffsetY >= rect[3]) {\n    labelOffsetY = rect[3];\n  }\n\n  if (labelOffsetY - bBox.height < rect[1]) {\n    labelOffsetY = node.rect.y - bBox.y + verticalOffset;\n  }\n\n  node.labelText.attr({\n    translateX: labelOffsetX,\n    translateY: labelOffsetY\n  });\n}\n\nfunction getConnectedLinks(layout, nodeName, linkType) {\n  var result = [];\n  var attrName = \"in\" === linkType ? \"_to\" : \"_from\";\n  var invertedAttrName = \"in\" === linkType ? \"_from\" : \"_to\";\n  layout.links.map(function (link) {\n    return link[attrName]._name === nodeName;\n  }).forEach(function (connected, idx) {\n    connected && result.push({\n      index: idx,\n      weight: layout.links[idx]._weight,\n      node: layout.links[idx][invertedAttrName]._name\n    });\n  });\n  return result;\n}\n\nvar dxSankey = baseWidget.inherit({\n  _rootClass: \"dxs-sankey\",\n  _rootClassPrefix: \"dxs\",\n  _proxyData: [],\n  _optionChangesMap: {\n    dataSource: \"DATA_SOURCE\",\n    sortData: \"DATA_SOURCE\",\n    alignment: \"DATA_SOURCE\",\n    node: \"BUILD_LAYOUT\",\n    link: \"BUILD_LAYOUT\",\n    palette: \"BUILD_LAYOUT\",\n    paletteExtensionMode: \"BUILD_LAYOUT\"\n  },\n  _themeDependentChanges: [\"BUILD_LAYOUT\"],\n  _getDefaultSize: function _getDefaultSize() {\n    return {\n      width: 400,\n      height: 400\n    };\n  },\n  _themeSection: \"sankey\",\n  _fontFields: [\"label.font\"],\n  _optionChangesOrder: [\"DATA_SOURCE\"],\n  _initialChanges: [\"DATA_SOURCE\"],\n  _initCore: function _initCore() {\n    this._groupLinks = this._renderer.g().append(this._renderer.root);\n    this._groupNodes = this._renderer.g().append(this._renderer.root);\n    this._groupLabels = this._renderer.g().attr({\n      class: this._rootClassPrefix + \"-labels\"\n    }).append(this._renderer.root);\n    this._drawLabels = true;\n    this._nodes = [];\n    this._links = [];\n    this._gradients = [];\n  },\n  _disposeCore: noop,\n  _applySize: function _applySize(rect) {\n    this._rect = rect.slice();\n\n    var adaptiveLayout = this._getOption(\"adaptiveLayout\");\n\n    if (adaptiveLayout.keepLabels || this._rect[2] - this._rect[0] > adaptiveLayout.width) {\n      this._drawLabels = true;\n    } else {\n      this._drawLabels = false;\n    }\n\n    this._change([\"BUILD_LAYOUT\"]);\n\n    return this._rect;\n  },\n  _eventsMap: {\n    onNodeHoverChanged: {\n      name: \"nodeHoverChanged\"\n    },\n    onLinkHoverChanged: {\n      name: \"linkHoverChanged\"\n    }\n  },\n  _customChangesOrder: [\"BUILD_LAYOUT\", \"NODES_DRAW\", \"LINKS_DRAW\", \"LABELS\", \"DRAWN\"],\n  _dataSourceChangedHandler: function _dataSourceChangedHandler() {\n    this._requestChange([\"BUILD_LAYOUT\"]);\n  },\n  _change_DRAWN: function _change_DRAWN() {\n    this._drawn();\n  },\n  _change_DATA_SOURCE: function _change_DATA_SOURCE() {\n    this._change([\"DRAWN\"]);\n\n    this._updateDataSource();\n  },\n  _change_LABELS: function _change_LABELS() {\n    this._applyLabelsAppearance();\n  },\n  _change_BUILD_LAYOUT: function _change_BUILD_LAYOUT() {\n    this._groupNodes.clear();\n\n    this._groupLinks.clear();\n\n    this._groupLabels.clear();\n\n    this._buildLayout();\n  },\n  _change_NODES_DRAW: function _change_NODES_DRAW() {\n    var that = this;\n    var nodes = that._nodes;\n    nodes.forEach(function (node, index) {\n      var element = that._renderer.rect().attr(node.rect).append(that._groupNodes);\n\n      node.element = element;\n    });\n\n    this._applyNodesAppearance();\n  },\n  _change_LINKS_DRAW: function _change_LINKS_DRAW() {\n    var that = this;\n    var links = that._links;\n    links.forEach(function (link, index) {\n      var group = that._renderer.g().attr({\n        class: \"link\",\n        \"data-link-idx\": index\n      }).append(that._groupLinks);\n\n      link.overlayElement = that._renderer.path([], \"area\").attr({\n        d: link.d\n      }).append(group);\n      link.element = that._renderer.path([], \"area\").attr({\n        d: link.d\n      }).append(group);\n    });\n\n    this._applyLinksAppearance();\n  },\n  _suspend: function _suspend() {\n    if (!this._applyingChanges) {\n      this._suspendChanges();\n    }\n  },\n  _resume: function _resume() {\n    if (!this._applyingChanges) {\n      this._resumeChanges();\n    }\n  },\n  _showTooltip: noop,\n  hideTooltip: noop,\n  clearHover: function clearHover() {\n    this._suspend();\n\n    this._nodes.forEach(function (node) {\n      node.isHovered() && node.hover(false);\n    });\n\n    this._links.forEach(function (link) {\n      link.isHovered() && link.hover(false);\n      link.isAdjacentNodeHovered() && link.adjacentNodeHover(false);\n    });\n\n    this._resume();\n  },\n  _applyNodesAppearance: function _applyNodesAppearance() {\n    this._nodes.forEach(function (node) {\n      var state = node.getState();\n      node.element.smartAttr(node.states[state]);\n    });\n  },\n  _applyLinksAppearance: function _applyLinksAppearance() {\n    this._links.forEach(function (link) {\n      var state = link.getState();\n      link.element.smartAttr(link.states[state]);\n      link.overlayElement.smartAttr(link.overlayStates[state]);\n    });\n  },\n  _hitTestTargets: function _hitTestTargets(x, y) {\n    var that = this;\n    var data;\n\n    this._proxyData.some(function (callback) {\n      data = callback.call(that, x, y);\n\n      if (data) {\n        return true;\n      }\n    });\n\n    return data;\n  },\n  _getData: function _getData() {\n    var that = this;\n    var data = that._dataSourceItems() || [];\n\n    var sourceField = that._getOption(\"sourceField\", true);\n\n    var targetField = that._getOption(\"targetField\", true);\n\n    var weightField = that._getOption(\"weightField\", true);\n\n    var processedData = [];\n    data.forEach(function (item) {\n      var hasItemOwnProperty = Object.prototype.hasOwnProperty.bind(item);\n\n      if (!hasItemOwnProperty(sourceField)) {\n        that._incidentOccurred(\"E2007\", sourceField);\n      } else if (!hasItemOwnProperty(targetField)) {\n        that._incidentOccurred(\"E2007\", targetField);\n      } else if (!hasItemOwnProperty(weightField)) {\n        that._incidentOccurred(\"E2007\", weightField);\n      } else if (!_isString(item[sourceField])) {\n        that._incidentOccurred(\"E2008\", sourceField);\n      } else if (!_isString(item[targetField])) {\n        that._incidentOccurred(\"E2008\", targetField);\n      } else if (!_isNumber(item[weightField]) || item[weightField] <= 0) {\n        that._incidentOccurred(\"E2009\", weightField);\n      } else {\n        processedData.push([item[sourceField], item[targetField], item[weightField]]);\n      }\n    });\n    return processedData;\n  },\n  _buildLayout: function _buildLayout() {\n    var _this = this;\n\n    var that = this;\n\n    var data = that._getData();\n\n    var availableRect = this._rect;\n\n    var nodeOptions = that._getOption(\"node\");\n\n    var sortData = that._getOption(\"sortData\");\n\n    var layoutBuilder = that._getOption(\"layoutBuilder\", true) || defaultLayoutBuilder;\n    var rect = {\n      x: availableRect[0],\n      y: availableRect[1],\n      width: availableRect[2] - availableRect[0],\n      height: availableRect[3] - availableRect[1]\n    };\n    var layout = layoutBuilder.computeLayout(data, sortData, {\n      availableRect: rect,\n      nodePadding: nodeOptions.padding,\n      nodeWidth: nodeOptions.width,\n      nodeAlign: that._getOption(\"alignment\", true)\n    }, that._incidentOccurred);\n    that._layoutMap = layout;\n\n    if (!Object.prototype.hasOwnProperty.call(layout, \"error\")) {\n      var nodeColors = {};\n      var nodeIdx = 0;\n\n      var linkOptions = that._getOption(\"link\");\n\n      var totalNodesNum = layout.nodes.map(function (item) {\n        return item.length;\n      }).reduce(function (previousValue, currentValue) {\n        return previousValue + currentValue;\n      }, 0);\n\n      var palette = that._themeManager.createPalette(that._getOption(\"palette\", true), {\n        useHighlight: true,\n        extensionMode: that._getOption(\"paletteExtensionMode\", true),\n        count: totalNodesNum\n      });\n\n      that._nodes = [];\n      that._links = [];\n\n      that._gradients.forEach(function (gradient) {\n        gradient.dispose();\n      });\n\n      that._gradients = [];\n      that._shadowFilter && that._shadowFilter.dispose();\n      layout.nodes.forEach(function (cascadeNodes) {\n        cascadeNodes.forEach(function (node) {\n          var color = nodeOptions.color || palette.getNextColor();\n          var nodeItem = new Node(that, {\n            id: nodeIdx,\n            color: color,\n            rect: node,\n            options: nodeOptions,\n            linksIn: getConnectedLinks(layout, node._name, \"in\"),\n            linksOut: getConnectedLinks(layout, node._name, \"out\")\n          });\n\n          that._nodes.push(nodeItem);\n\n          nodeIdx++;\n          nodeColors[node._name] = color;\n        });\n      });\n      layout.links.forEach(function (link) {\n        var gradient = null;\n\n        if (linkOptions.colorMode === COLOR_MODE_GRADIENT) {\n          gradient = that._renderer.linearGradient([{\n            offset: \"0%\",\n            \"stop-color\": nodeColors[link._from._name]\n          }, {\n            offset: \"100%\",\n            \"stop-color\": nodeColors[link._to._name]\n          }]);\n\n          _this._gradients.push(gradient);\n        }\n\n        var color = linkOptions.color;\n\n        if (linkOptions.colorMode === COLOR_MODE_SOURCE) {\n          color = nodeColors[link._from._name];\n        } else if (linkOptions.colorMode === COLOR_MODE_TARGET) {\n          color = nodeColors[link._to._name];\n        }\n\n        var linkItem = new Link(that, {\n          d: link.d,\n          boundingRect: link._boundingRect,\n          color: color,\n          options: linkOptions,\n          connection: {\n            source: link._from._name,\n            target: link._to._name,\n            weight: link._weight\n          },\n          gradient: gradient\n        });\n\n        that._links.push(linkItem);\n      });\n\n      that._renderer.initHatching();\n\n      that._change([\"NODES_DRAW\", \"LINKS_DRAW\", \"LABELS\"]);\n    }\n\n    that._change([\"DRAWN\"]);\n  },\n  _applyLabelsAppearance: function _applyLabelsAppearance() {\n    var that = this;\n\n    var labelOptions = that._getOption(\"label\");\n\n    var availableWidth = that._rect[2] - that._rect[0];\n\n    var nodeOptions = that._getOption(\"node\");\n\n    that._shadowFilter = that._renderer.shadowFilter(\"-50%\", \"-50%\", \"200%\", \"200%\").attr(labelOptions.shadow);\n\n    that._groupLabels.clear();\n\n    if (that._drawLabels && labelOptions.visible) {\n      var availableLabelWidth = (availableWidth - (nodeOptions.width + labelOptions.horizontalOffset) - that._layoutMap.cascades.length * nodeOptions.width) / (that._layoutMap.cascades.length - 1) - labelOptions.horizontalOffset;\n\n      that._nodes.forEach(function (node) {\n        that._createLabel(node, labelOptions, that._shadowFilter.id);\n\n        moveLabel(node, labelOptions, availableLabelWidth, that._rect);\n      });\n\n      if (\"none\" !== labelOptions.overlappingBehavior) {\n        that._nodes.forEach(function (thisNode) {\n          var thisBox = thisNode._label.getBBox();\n\n          that._nodes.forEach(function (otherNode) {\n            var otherBox = otherNode._label.getBBox();\n\n            if (thisNode.id !== otherNode.id && defaultLayoutBuilder.overlap(thisBox, otherBox)) {\n              if (\"ellipsis\" === labelOptions.overlappingBehavior) {\n                thisNode.labelText.applyEllipsis(otherBox.x - thisBox.x);\n              } else if (\"hide\" === labelOptions.overlappingBehavior) {\n                thisNode.labelText.remove();\n              }\n            }\n          });\n        });\n      }\n    }\n  },\n  _createLabel: function _createLabel(node, labelOptions, filter) {\n    var textData = labelOptions.customizeText(node);\n    var settings = node.getLabelAttributes(labelOptions, filter);\n\n    if (textData) {\n      node._label = this._renderer.g().append(this._groupLabels);\n      node.labelText = this._renderer.text(textData).attr(settings.attr).css(settings.css);\n      node.labelText.append(node._label);\n    }\n  },\n  _getMinSize: function _getMinSize() {\n    var adaptiveLayout = this._getOption(\"adaptiveLayout\");\n\n    return [adaptiveLayout.width, adaptiveLayout.height];\n  },\n  getAllNodes: function getAllNodes() {\n    return this._nodes.slice();\n  },\n  getAllLinks: function getAllLinks() {\n    return this._links.slice();\n  }\n});\ncomponentRegistrator(\"dxSankey\", dxSankey);\nexport default dxSankey;\nimport { plugin as pluginDataSource } from \"../core/data_source\";\ndxSankey.addPlugin(pluginDataSource);","map":null,"metadata":{},"sourceType":"module"}